{
  "_content": {
    "Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Was not able to parse docstring for IPython.core.completer"
                }
              }
            ],
            "inner": []
          }
        }
      ],
      "title": null
    },
    "Extended Summary": {
      "children": [],
      "title": null
    },
    "Parameters": {
      "children": [],
      "title": null
    },
    "Returns": {
      "children": [],
      "title": null
    },
    "Yields": {
      "children": [],
      "title": null
    },
    "Receives": {
      "children": [],
      "title": null
    },
    "Raises": {
      "children": [],
      "title": null
    },
    "Warns": {
      "children": [],
      "title": null
    },
    "Other Parameters": {
      "children": [],
      "title": null
    },
    "Attributes": {
      "children": [],
      "title": null
    },
    "Methods": {
      "children": [],
      "title": null
    },
    "Notes": {
      "children": [],
      "title": null
    },
    "Warnings": {
      "children": [],
      "title": null
    }
  },
  "refs": [],
  "ordered_sections": [
    "Summary",
    "Extended Summary"
  ],
  "item_file": "/Users/bussonniermatthias/dev/ipython/IPython/core/completer.py",
  "item_line": 0,
  "item_type": "<class 'module'>",
  "aliases": [
    "IPython.core.completer"
  ],
  "example_section_data": {
    "children": [],
    "title": null
  },
  "see_also": [],
  "signature": null,
  "references": null,
  "arbitrary": [
    {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Completion for IPython. "
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "This module started as fork of the rlcompleter module in the Python standard library. The original enhancements made to rlcompleter have been sent upstream and were accepted as of Python 2.3, "
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "This module now support a wide variety of completion mechanism both available for normal classic Python code, as well as completer for IPython specific Syntax like magics. "
                }
              }
            ],
            "inner": []
          }
        }
      ],
      "title": null
    },
    {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "IPython and compatible frontends not only can complete your code, but can help you to input a wide range of characters. In particular we allow you to insert a unicode character using the tab completion mechanism. "
                }
              }
            ],
            "inner": []
          }
        }
      ],
      "title": "Latex and Unicode completion"
    },
    {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Forward completion allows you to easily type a unicode character using its latex name, or unicode long description. To do so type a backslash follow by the relevant name and press tab : "
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Using latex completion : "
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "or using unicode completion : "
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Only valid Python identifiers will complete. Combining characters (like arrow or dots) are also available, unlike latex they need to be put after the their counterpart that is to say, "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "F\\\\vec<tab>"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " is correct, not "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "\\\\vec<tab>F"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " . "
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Some browsers are known to display combining characters incorrectly. "
                }
              }
            ],
            "inner": []
          }
        }
      ],
      "title": "Forward latex/unicode completion"
    },
    {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "It is sometime challenging to know how to type a character, if you are using IPython, or any compatible frontend you can prepend backslash to the character and press "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "<tab>"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " to expand it to its latex form. "
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Both forward and backward completions can be deactivated by setting the "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "Completer.backslash_combining_completions"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " option to "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "False"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " . "
                }
              }
            ],
            "inner": []
          }
        }
      ],
      "title": "Backward latex completion"
    },
    {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Starting with IPython 6.0, this module can make use of the Jedi library to generate completions both using static analysis of the code, and dynamically inspecting multiple namespaces. Jedi is an autocompletion and static analysis for Python. The APIs attached to this new mechanism is unstable and will raise unless use in an "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "any:`provisionalcompleter"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " context manager. "
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "You will find that the following are experimental : "
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "BlockQuote",
          "data": {
            "value": [
              "- :any:`provisionalcompleter`",
              "- :any:`IPCompleter.completions`",
              "- :any:`Completion`",
              "- :any:`rectify_completions`"
            ]
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "We welcome any feedback on these new API, and we also encourage you to try this module in debug mode (start IPython with "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "--Completer.debug=True"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " ) in order to have extra logging information if "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "any:`jedi"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " is crashing, or if current IPython completer pending deprecations are returning results not yet handled by "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "any:`jedi"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " "
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Using Jedi for tab completion allow snippets like the following to work without having to execute any code : "
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "BlockQuote",
          "data": {
            "value": [
              ">>> myvar = ['hello', 42]",
              "... myvar[1].bi<tab>"
            ]
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Tab completion will be able to infer that "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "myvar[1]"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " is a real number without executing any code unlike the previously available "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "IPCompleter.greedy"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " option. "
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Be sure to update "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "any:`jedi"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " to the latest stable version or to try the current development version to get better completions. "
                }
              }
            ],
            "inner": []
          }
        }
      ],
      "title": "Experimental"
    }
  ]
}