{
  "_content": {
    "Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "children": [
              {
                "type": "Words",
                "data": {
                  "value": "Create a GeoJSON display object given raw data."
                }
              }
            ]
          }
        }
      ]
    },
    "Extended Summary": {
      "children": []
    },
    "Parameters": {
      "children": [
        {
          "type": "Param",
          "data": {
            "param": "data",
            "type_": "dict or list",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "VegaLite data. Not an already-serialized JSON string. Scalar types (None, number, string) are not allowed, only dict or list containers."
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "url_template",
            "type_": "string",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Leaflet TileLayer URL template: http://leafletjs.com/reference.html#url-template"
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "layer_options",
            "type_": "dict",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Leaflet TileLayer options: http://leafletjs.com/reference.html#tilelayer-options"
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "url",
            "type_": "unicode",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "A URL to download the data from."
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "filename",
            "type_": "unicode",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Path to a local file to load the data from."
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "metadata: dict",
            "type_": "",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Specify extra metadata to attach to the json display object."
                      }
                    }
                  ]
                }
              }
            ]
          }
        }
      ]
    },
    "Returns": {
      "children": []
    },
    "Yields": {
      "children": []
    },
    "Receives": {
      "children": []
    },
    "Raises": {
      "children": []
    },
    "Warns": {
      "children": []
    },
    "Other Parameters": {
      "children": []
    },
    "Attributes": {
      "children": []
    },
    "Methods": {
      "children": []
    },
    "Notes": {
      "children": []
    },
    "Warnings": {
      "children": []
    }
  },
  "refs": [],
  "ordered_sections": [
    "Summary",
    "Parameters",
    "Examples"
  ],
  "item_file": "/Users/bussonniermatthias/dev/ipython/IPython/core/display.py",
  "item_line": 637,
  "item_type": "<class 'function'>",
  "aliases": [
    "IPython.display.GeoJSON.__init__"
  ],
  "example_section_data": {
    "children": [
      {
        "type": "Paragraph",
        "data": {
          "children": [
            {
              "type": "Words",
              "data": {
                "value": "The following will display an interactive map of Mars with a point of interest on frontend that do support GeoJSON display."
              }
            }
          ]
        }
      },
      {
        "type": "DefList",
        "data": {
          "children": [
            {
              "lines": {
                "_lines": [
                  {
                    "_line": ":: workaround numpyoc summary/ext summary bug in take2::Line.__init__",
                    "_number": 0,
                    "_offset": 0
                  }
                ]
              },
              "wh": {
                "_lines": []
              },
              "ind": {
                "_lines": [
                  {
                    "_line": "    >>> from IPython.display import GeoJSON",
                    "_number": 0,
                    "_offset": 0
                  }
                ]
              },
              "dt": {
                "children": [
                  {
                    "type": "Words",
                    "data": {
                      "value": ":: workaround numpyoc summary/ext summary bug in take2::Line.__init__"
                    }
                  }
                ]
              },
              "dd": {
                "children": [
                  {
                    "type": "Words",
                    "data": {
                      "value": ">>> from IPython.display import GeoJSON"
                    }
                  }
                ]
              }
            }
          ]
        }
      },
      {
        "type": "DefList",
        "data": {
          "children": [
            {
              "lines": {
                "_lines": [
                  {
                    "_line": ":: workaround numpyoc summary/ext summary bug in take2::Line.__init__",
                    "_number": 0,
                    "_offset": 0
                  }
                ]
              },
              "wh": {
                "_lines": []
              },
              "ind": {
                "_lines": [
                  {
                    "_line": "    >>> GeoJSON(data={",
                    "_number": 0,
                    "_offset": 0
                  },
                  {
                    "_line": "    ...     \"type\": \"Feature\",",
                    "_number": 1,
                    "_offset": 0
                  },
                  {
                    "_line": "    ...     \"geometry\": {",
                    "_number": 2,
                    "_offset": 0
                  },
                  {
                    "_line": "    ...         \"type\": \"Point\",",
                    "_number": 3,
                    "_offset": 0
                  },
                  {
                    "_line": "    ...         \"coordinates\": [-81.327, 296.038]",
                    "_number": 4,
                    "_offset": 0
                  },
                  {
                    "_line": "    ...     }",
                    "_number": 5,
                    "_offset": 0
                  },
                  {
                    "_line": "    ... },",
                    "_number": 6,
                    "_offset": 0
                  },
                  {
                    "_line": "    ... url_template=\"http://s3-eu-west-1.amazonaws.com/whereonmars.cartodb.net/{basemap_id}/{z}/{x}/{y}.png\",",
                    "_number": 7,
                    "_offset": 0
                  },
                  {
                    "_line": "    ... layer_options={",
                    "_number": 8,
                    "_offset": 0
                  },
                  {
                    "_line": "    ...     \"basemap_id\": \"celestia_mars-shaded-16k_global\",",
                    "_number": 9,
                    "_offset": 0
                  },
                  {
                    "_line": "    ...     \"attribution\" : \"Celestia/praesepe\",",
                    "_number": 10,
                    "_offset": 0
                  },
                  {
                    "_line": "    ...     \"minZoom\" : 0,",
                    "_number": 11,
                    "_offset": 0
                  },
                  {
                    "_line": "    ...     \"maxZoom\" : 18,",
                    "_number": 12,
                    "_offset": 0
                  },
                  {
                    "_line": "    ... })",
                    "_number": 13,
                    "_offset": 0
                  },
                  {
                    "_line": "    <IPython.core.display.GeoJSON object>",
                    "_number": 14,
                    "_offset": 0
                  }
                ]
              },
              "dt": {
                "children": [
                  {
                    "type": "Words",
                    "data": {
                      "value": ":: workaround numpyoc summary/ext summary bug in take2::Line.__init__"
                    }
                  }
                ]
              },
              "dd": {
                "children": [
                  {
                    "type": "Words",
                    "data": {
                      "value": ">>> GeoJSON(data={ ...     \"type\": \"Feature\", ...     \"geometry\": { ...         \"type\": \"Point\", ...         \"coordinates\": [-81.327, 296.038] ...     } ... }, ... url_template=\"http://s3-eu-west-1.amazonaws.com/whereonmars.cartodb.net/{basemap_id}/{z}/{x}/{y}.png\", ... layer_options={ ...     \"basemap_id\": \"celestia_mars-shaded-16k_global\", ...     \"attribution\" : \"Celestia/praesepe\", ...     \"minZoom\" : 0, ...     \"maxZoom\" : 18, ... }) <IPython.core.display.GeoJSON object>"
                    }
                  }
                ]
              }
            }
          ]
        }
      },
      {
        "type": "Paragraph",
        "data": {
          "children": [
            {
              "type": "Words",
              "data": {
                "value": "In the terminal IPython, you will only see the text representation of the GeoJSON object."
              }
            }
          ]
        }
      }
    ]
  },
  "see_also": [],
  "references": null,
  "signature": "__init__(self, *args, **kwargs)"
}