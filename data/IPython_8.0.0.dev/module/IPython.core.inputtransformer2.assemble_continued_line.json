{
  "_content": {
    "Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Assemble a single line from multiple continued line pieces"
                }
              }
            ],
            "inner": []
          }
        }
      ],
      "title": null
    },
    "Extended Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Continued lines are lines ending in "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "\\"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": ", and the line following the last "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "\\"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " in the block."
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "For example, this code continues over multiple lines::"
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "BlockVerbatim",
          "data": {
            "lines": {
              "_lines": [
                {
                  "_line": "    if (assign_ix is not None) \\",
                  "_number": 5,
                  "_offset": 4
                },
                {
                  "_line": "         and (len(line) >= assign_ix + 2) \\",
                  "_number": 6,
                  "_offset": 4
                },
                {
                  "_line": "         and (line[assign_ix+1].string == '%') \\",
                  "_number": 7,
                  "_offset": 4
                },
                {
                  "_line": "         and (line[assign_ix+2].type == tokenize.NAME):",
                  "_number": 8,
                  "_offset": 4
                },
                {
                  "_line": "",
                  "_number": 9,
                  "_offset": 4
                }
              ]
            }
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "This statement contains four continued line pieces. Assembling these pieces into a single line would give::"
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "BlockVerbatim",
          "data": {
            "lines": {
              "_lines": [
                {
                  "_line": "    if (assign_ix is not None) and (len(line) >= assign_ix + 2) and (line[...",
                  "_number": 13,
                  "_offset": 4
                },
                {
                  "_line": "",
                  "_number": 14,
                  "_offset": 4
                }
              ]
            }
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "This uses 0-indexed line numbers. *start* is (lineno, colno)."
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Used to allow "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "%magic"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " and "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "!system"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " commands to be continued over multiple lines."
                }
              }
            ],
            "inner": []
          }
        }
      ],
      "title": null
    },
    "Parameters": {
      "children": [],
      "title": null
    },
    "Returns": {
      "children": [],
      "title": null
    },
    "Yields": {
      "children": [],
      "title": null
    },
    "Receives": {
      "children": [],
      "title": null
    },
    "Raises": {
      "children": [],
      "title": null
    },
    "Warns": {
      "children": [],
      "title": null
    },
    "Other Parameters": {
      "children": [],
      "title": null
    },
    "Attributes": {
      "children": [],
      "title": null
    },
    "Methods": {
      "children": [],
      "title": null
    },
    "Notes": {
      "children": [],
      "title": null
    },
    "Warnings": {
      "children": [],
      "title": null
    }
  },
  "refs": [],
  "ordered_sections": [
    "Summary",
    "Extended Summary"
  ],
  "item_file": "/Users/bussonniermatthias/dev/ipython/IPython/core/inputtransformer2.py",
  "item_line": 135,
  "item_type": "<class 'function'>",
  "aliases": [
    "IPython.core.inputtransformer2.assemble_continued_line"
  ],
  "example_section_data": {
    "children": [],
    "title": null
  },
  "see_also": [],
  "signature": "assemble_continued_line(lines, start: Tuple[int, int], end_line: int)",
  "references": null,
  "arbitrary": []
}