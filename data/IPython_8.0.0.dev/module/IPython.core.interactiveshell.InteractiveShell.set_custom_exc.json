{
  "_content": {
    "Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Set a custom exception handler, which will be called if any of the exceptions in exc_tuple occur in the mainloop (specifically, in the run_code() method)."
                }
              }
            ],
            "inner": []
          }
        }
      ],
      "title": null
    },
    "Extended Summary": {
      "children": [],
      "title": null
    },
    "Parameters": {
      "children": [
        {
          "type": "Param",
          "data": {
            "param": "exc_tuple",
            "type_": "tuple of exception classes",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "A *tuple* of exception classes, for which to call the defined handler.  It is very important that you use a tuple, and NOT A LIST here, because of the way Python's except statement works.  If you only want to trap a single exception, use a singleton tuple::"
                      }
                    }
                  ],
                  "inner": []
                }
              },
              {
                "type": "BlockVerbatim",
                "data": {
                  "lines": {
                    "_lines": [
                      {
                        "_line": "    exc_tuple == (MyCustomException,)",
                        "_number": 5,
                        "_offset": 4
                      }
                    ]
                  }
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "handler",
            "type_": "callable",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "handler must have the following signature::"
                      }
                    }
                  ],
                  "inner": []
                }
              },
              {
                "type": "BlockVerbatim",
                "data": {
                  "lines": {
                    "_lines": [
                      {
                        "_line": "    def my_handler(self, etype, value, tb, tb_offset=None):",
                        "_number": 2,
                        "_offset": 4
                      },
                      {
                        "_line": "        ...",
                        "_number": 3,
                        "_offset": 4
                      },
                      {
                        "_line": "        return structured_traceback",
                        "_number": 4,
                        "_offset": 4
                      },
                      {
                        "_line": "",
                        "_number": 5,
                        "_offset": 4
                      }
                    ]
                  }
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Your handler must return a structured traceback (a list of strings), or None."
                      }
                    }
                  ],
                  "inner": []
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "This will be made into an instance method (via types.MethodType) of IPython itself, and it will be called if any of the exceptions listed in the exc_tuple are caught. If the handler is None, an internal basic one is used, which just prints basic info."
                      }
                    }
                  ],
                  "inner": []
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "To protect IPython from crashes, if your handler ever raises an exception or returns an invalid result, it will be immediately disabled."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "WARNING: by putting in your own exception handler into IPython's main",
            "type_": "",
            "desc": []
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "execution loop, you run a very good chance of nasty crashes.  This",
            "type_": "",
            "desc": []
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "facility should only be used if you really know what you are doing.",
            "type_": "",
            "desc": []
          }
        }
      ],
      "title": null
    },
    "Returns": {
      "children": [],
      "title": null
    },
    "Yields": {
      "children": [],
      "title": null
    },
    "Receives": {
      "children": [],
      "title": null
    },
    "Raises": {
      "children": [],
      "title": null
    },
    "Warns": {
      "children": [],
      "title": null
    },
    "Other Parameters": {
      "children": [],
      "title": null
    },
    "Attributes": {
      "children": [],
      "title": null
    },
    "Methods": {
      "children": [],
      "title": null
    },
    "Notes": {
      "children": [],
      "title": null
    },
    "Warnings": {
      "children": [],
      "title": null
    }
  },
  "refs": [],
  "ordered_sections": [
    "Signature",
    "Summary",
    "Parameters"
  ],
  "item_file": "/Users/bussonniermatthias/dev/ipython/IPython/core/interactiveshell.py",
  "item_line": 1855,
  "item_type": "<class 'function'>",
  "aliases": [
    "IPython.InteractiveShell.set_custom_exc"
  ],
  "example_section_data": {
    "children": [],
    "title": null
  },
  "see_also": [],
  "signature": "set_custom_exc(exc_tuple, handler)",
  "references": null,
  "arbitrary": []
}