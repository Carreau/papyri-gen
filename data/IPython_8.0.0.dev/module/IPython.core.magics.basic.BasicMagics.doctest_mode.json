{
  "_content": {
    "Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "children": [
              {
                "type": "Words",
                "data": {
                  "value": "Toggle doctest mode on and off."
                }
              }
            ]
          }
        }
      ]
    },
    "Extended Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "children": [
              {
                "type": "Words",
                "data": {
                  "value": "This mode is intended to make IPython behave as much as possible like a plain Python shell, from the perspective of how its prompts, exceptions and output look.  This makes it easy to copy and paste parts of a session into doctests.  It does so by:"
                }
              }
            ]
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "children": [
              {
                "type": "Words",
                "data": {
                  "value": "- Changing the prompts to the classic "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    ">>>"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " ones. - Changing the exception reporting mode to 'Plain'. - Disabling pretty-printing of output."
                }
              }
            ]
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "children": [
              {
                "type": "Words",
                "data": {
                  "value": "Note that IPython also supports the pasting of code snippets that have leading '>>>' and '...' prompts in them.  This means that you can paste doctests from files or docstrings (even if they have leading whitespace), and the code will execute correctly.  You can then use '%history -t' to see the translated history; this will give you the input after removal of all the leading prompts and whitespace, which can be pasted back into an editor."
                }
              }
            ]
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "children": [
              {
                "type": "Words",
                "data": {
                  "value": "With these features, you can switch into this mode easily whenever you need to do testing and changes to doctests, without having to leave your existing IPython session."
                }
              }
            ]
          }
        }
      ]
    },
    "Parameters": {
      "children": []
    },
    "Returns": {
      "children": []
    },
    "Yields": {
      "children": []
    },
    "Receives": {
      "children": []
    },
    "Raises": {
      "children": []
    },
    "Warns": {
      "children": []
    },
    "Other Parameters": {
      "children": []
    },
    "Attributes": {
      "children": []
    },
    "Methods": {
      "children": []
    },
    "Notes": {
      "children": []
    },
    "Warnings": {
      "children": []
    }
  },
  "refs": [],
  "ordered_sections": [
    "Summary",
    "Extended Summary"
  ],
  "item_file": "<decorator-gen-31>",
  "item_line": 400,
  "item_type": "<class 'function'>",
  "aliases": [
    "IPython.core.magics.BasicMagics.doctest_mode"
  ],
  "example_section_data": {
    "children": []
  },
  "see_also": [],
  "references": null,
  "signature": "doctest_mode(self, parameter_s='')"
}