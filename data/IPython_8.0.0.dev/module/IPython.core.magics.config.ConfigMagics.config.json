{
  "_content": {
    "Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "configure IPython"
                }
              }
            ],
            "inner": []
          }
        }
      ],
      "title": null
    },
    "Extended Summary": {
      "children": [
        {
          "type": "DefList",
          "data": {
            "children": [
              {
                "lines": {
                  "_lines": [
                    {
                      "_line": ":: workaround numpyoc summary/ext summary bug in take2::Line.__init__",
                      "_number": 0,
                      "_offset": 0
                    }
                  ]
                },
                "wh": {
                  "_lines": []
                },
                "ind": {
                  "_lines": [
                    {
                      "_line": "    %config Class[.trait=value]",
                      "_number": 0,
                      "_offset": 4
                    },
                    {
                      "_line": "",
                      "_number": 1,
                      "_offset": 4
                    }
                  ]
                },
                "dt": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": ":: workaround numpyoc summary/ext summary bug in take2::Line.__init__"
                      }
                    }
                  ],
                  "inner": []
                },
                "dd": [
                  {
                    "type": "Paragraph",
                    "data": {
                      "inline": [
                        {
                          "type": "Words",
                          "data": {
                            "value": "%config Class[.trait=value] "
                          }
                        }
                      ],
                      "inner": []
                    }
                  }
                ]
              }
            ]
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "This magic exposes most of the IPython config system. Any Configurable class should be able to be configured with the simple line::"
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "BlockVerbatim",
          "data": {
            "lines": {
              "_lines": [
                {
                  "_line": "    %config Class.trait=value",
                  "_number": 6,
                  "_offset": 4
                },
                {
                  "_line": "",
                  "_number": 7,
                  "_offset": 4
                }
              ]
            }
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Where "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "value"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " will be resolved in the user's namespace, if it is an expression or variable name."
                }
              }
            ],
            "inner": []
          }
        }
      ],
      "title": null
    },
    "Parameters": {
      "children": [],
      "title": null
    },
    "Returns": {
      "children": [],
      "title": null
    },
    "Yields": {
      "children": [],
      "title": null
    },
    "Receives": {
      "children": [],
      "title": null
    },
    "Raises": {
      "children": [],
      "title": null
    },
    "Warns": {
      "children": [],
      "title": null
    },
    "Other Parameters": {
      "children": [],
      "title": null
    },
    "Attributes": {
      "children": [],
      "title": null
    },
    "Methods": {
      "children": [],
      "title": null
    },
    "Notes": {
      "children": [],
      "title": null
    },
    "Warnings": {
      "children": [],
      "title": null
    }
  },
  "refs": [],
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Examples"
  ],
  "item_file": "<decorator-gen-41>",
  "item_line": 35,
  "item_type": "<class 'function'>",
  "aliases": [
    "IPython.core.magics.ConfigMagics.config"
  ],
  "example_section_data": {
    "children": [
      {
        "type": "Paragraph",
        "data": {
          "inline": [
            {
              "type": "Words",
              "data": {
                "value": "To see what classes are available for config, pass no arguments::"
              }
            }
          ],
          "inner": []
        }
      },
      {
        "type": "DefList",
        "data": {
          "children": [
            {
              "lines": {
                "_lines": [
                  {
                    "_line": ":: workaround numpyoc summary/ext summary bug in take2::Line.__init__",
                    "_number": 0,
                    "_offset": 0
                  }
                ]
              },
              "wh": {
                "_lines": []
              },
              "ind": {
                "_lines": [
                  {
                    "_line": "    In [1]: %config",
                    "_number": 0,
                    "_offset": 4
                  },
                  {
                    "_line": "    Available objects for config:",
                    "_number": 1,
                    "_offset": 4
                  },
                  {
                    "_line": "        TerminalInteractiveShell",
                    "_number": 2,
                    "_offset": 4
                  },
                  {
                    "_line": "        HistoryManager",
                    "_number": 3,
                    "_offset": 4
                  },
                  {
                    "_line": "        PrefilterManager",
                    "_number": 4,
                    "_offset": 4
                  },
                  {
                    "_line": "        AliasManager",
                    "_number": 5,
                    "_offset": 4
                  },
                  {
                    "_line": "        IPCompleter",
                    "_number": 6,
                    "_offset": 4
                  },
                  {
                    "_line": "        DisplayFormatter",
                    "_number": 7,
                    "_offset": 4
                  }
                ]
              },
              "dt": {
                "inline": [
                  {
                    "type": "Words",
                    "data": {
                      "value": ":: workaround numpyoc summary/ext summary bug in take2::Line.__init__"
                    }
                  }
                ],
                "inner": []
              },
              "dd": [
                {
                  "type": "Paragraph",
                  "data": {
                    "inline": [
                      {
                        "type": "Words",
                        "data": {
                          "value": "In [1]: %config Available objects for config:     TerminalInteractiveShell     HistoryManager     PrefilterManager     AliasManager     IPCompleter     DisplayFormatter"
                        }
                      }
                    ],
                    "inner": []
                  }
                }
              ]
            }
          ]
        }
      },
      {
        "type": "Paragraph",
        "data": {
          "inline": [
            {
              "type": "Words",
              "data": {
                "value": "To view what is configurable on a given class, just pass the class name::"
              }
            }
          ],
          "inner": []
        }
      },
      {
        "type": "DefList",
        "data": {
          "children": [
            {
              "lines": {
                "_lines": [
                  {
                    "_line": ":: workaround numpyoc summary/ext summary bug in take2::Line.__init__",
                    "_number": 0,
                    "_offset": 0
                  }
                ]
              },
              "wh": {
                "_lines": []
              },
              "ind": {
                "_lines": [
                  {
                    "_line": "    In [2]: %config IPCompleter",
                    "_number": 0,
                    "_offset": 4
                  },
                  {
                    "_line": "    IPCompleter options",
                    "_number": 1,
                    "_offset": 4
                  },
                  {
                    "_line": "    -----------------",
                    "_number": 2,
                    "_offset": 4
                  },
                  {
                    "_line": "    IPCompleter.omit__names=<Enum>",
                    "_number": 3,
                    "_offset": 4
                  },
                  {
                    "_line": "        Current: 2",
                    "_number": 4,
                    "_offset": 4
                  },
                  {
                    "_line": "        Choices: (0, 1, 2)",
                    "_number": 5,
                    "_offset": 4
                  },
                  {
                    "_line": "        Instruct the completer to omit private method names",
                    "_number": 6,
                    "_offset": 4
                  },
                  {
                    "_line": "        Specifically, when completing on ``object.<tab>``.",
                    "_number": 7,
                    "_offset": 4
                  },
                  {
                    "_line": "        When 2 [default]: all names that start with '_' will be excluded.",
                    "_number": 8,
                    "_offset": 4
                  },
                  {
                    "_line": "        When 1: all 'magic' names (``__foo__``) will be excluded.",
                    "_number": 9,
                    "_offset": 4
                  },
                  {
                    "_line": "        When 0: nothing will be excluded.",
                    "_number": 10,
                    "_offset": 4
                  },
                  {
                    "_line": "    IPCompleter.merge_completions=<CBool>",
                    "_number": 11,
                    "_offset": 4
                  },
                  {
                    "_line": "        Current: True",
                    "_number": 12,
                    "_offset": 4
                  },
                  {
                    "_line": "        Whether to merge completion results into a single list",
                    "_number": 13,
                    "_offset": 4
                  },
                  {
                    "_line": "        If False, only the completion results from the first non-empty",
                    "_number": 14,
                    "_offset": 4
                  },
                  {
                    "_line": "        completer will be returned.",
                    "_number": 15,
                    "_offset": 4
                  },
                  {
                    "_line": "    IPCompleter.limit_to__all__=<CBool>",
                    "_number": 16,
                    "_offset": 4
                  },
                  {
                    "_line": "        Current: False",
                    "_number": 17,
                    "_offset": 4
                  },
                  {
                    "_line": "        Instruct the completer to use __all__ for the completion",
                    "_number": 18,
                    "_offset": 4
                  },
                  {
                    "_line": "        Specifically, when completing on ``object.<tab>``.",
                    "_number": 19,
                    "_offset": 4
                  },
                  {
                    "_line": "        When True: only those names in obj.__all__ will be included.",
                    "_number": 20,
                    "_offset": 4
                  },
                  {
                    "_line": "        When False [default]: the __all__ attribute is ignored",
                    "_number": 21,
                    "_offset": 4
                  },
                  {
                    "_line": "    IPCompleter.greedy=<CBool>",
                    "_number": 22,
                    "_offset": 4
                  },
                  {
                    "_line": "        Current: False",
                    "_number": 23,
                    "_offset": 4
                  },
                  {
                    "_line": "        Activate greedy completion",
                    "_number": 24,
                    "_offset": 4
                  },
                  {
                    "_line": "        This will enable completion on elements of lists, results of",
                    "_number": 25,
                    "_offset": 4
                  },
                  {
                    "_line": "        function calls, etc., but can be unsafe because the code is",
                    "_number": 26,
                    "_offset": 4
                  },
                  {
                    "_line": "        actually evaluated on TAB.",
                    "_number": 27,
                    "_offset": 4
                  }
                ]
              },
              "dt": {
                "inline": [
                  {
                    "type": "Words",
                    "data": {
                      "value": ":: workaround numpyoc summary/ext summary bug in take2::Line.__init__"
                    }
                  }
                ],
                "inner": []
              },
              "dd": [
                {
                  "type": "Paragraph",
                  "data": {
                    "inline": [
                      {
                        "type": "Words",
                        "data": {
                          "value": "In [2]: %config IPCompleter IPCompleter options ----------------- IPCompleter.omit__names=<Enum>     Current: 2     Choices: (0, 1, 2)     Instruct the completer to omit private method names     Specifically, when completing on "
                        }
                      },
                      {
                        "type": "Verbatim",
                        "data": {
                          "value": [
                            "object.<tab>"
                          ]
                        }
                      },
                      {
                        "type": "Words",
                        "data": {
                          "value": ".     When 2 [default]: all names that start with '_' will be excluded.     When 1: all 'magic' names ("
                        }
                      },
                      {
                        "type": "Verbatim",
                        "data": {
                          "value": [
                            "_",
                            "_",
                            "foo",
                            "_",
                            "_"
                          ]
                        }
                      },
                      {
                        "type": "Words",
                        "data": {
                          "value": ") will be excluded.     When 0: nothing will be excluded. IPCompleter.merge_completions=<CBool>     Current: True     Whether to merge completion results into a single list     If False, only the completion results from the first non-empty     completer will be returned. IPCompleter.limit_to__all__=<CBool>     Current: False     Instruct the completer to use __all__ for the completion     Specifically, when completing on "
                        }
                      },
                      {
                        "type": "Verbatim",
                        "data": {
                          "value": [
                            "object.<tab>"
                          ]
                        }
                      },
                      {
                        "type": "Words",
                        "data": {
                          "value": ".     When True: only those names in obj.__all__ will be included.     When False [default]: the __all__ attribute is ignored IPCompleter.greedy=<CBool>     Current: False     Activate greedy completion     This will enable completion on elements of lists, results of     function calls, etc., but can be unsafe because the code is     actually evaluated on TAB."
                        }
                      }
                    ],
                    "inner": []
                  }
                }
              ]
            }
          ]
        }
      },
      {
        "type": "Paragraph",
        "data": {
          "inline": [
            {
              "type": "Words",
              "data": {
                "value": "but the real use is in setting values::"
              }
            }
          ],
          "inner": []
        }
      },
      {
        "type": "DefList",
        "data": {
          "children": [
            {
              "lines": {
                "_lines": [
                  {
                    "_line": ":: workaround numpyoc summary/ext summary bug in take2::Line.__init__",
                    "_number": 0,
                    "_offset": 0
                  }
                ]
              },
              "wh": {
                "_lines": []
              },
              "ind": {
                "_lines": [
                  {
                    "_line": "    In [3]: %config IPCompleter.greedy = True",
                    "_number": 0,
                    "_offset": 4
                  }
                ]
              },
              "dt": {
                "inline": [
                  {
                    "type": "Words",
                    "data": {
                      "value": ":: workaround numpyoc summary/ext summary bug in take2::Line.__init__"
                    }
                  }
                ],
                "inner": []
              },
              "dd": [
                {
                  "type": "Paragraph",
                  "data": {
                    "inline": [
                      {
                        "type": "Words",
                        "data": {
                          "value": "In [3]: %config IPCompleter.greedy = True"
                        }
                      }
                    ],
                    "inner": []
                  }
                }
              ]
            }
          ]
        }
      },
      {
        "type": "Paragraph",
        "data": {
          "inline": [
            {
              "type": "Words",
              "data": {
                "value": "and these values are read from the user_ns if they are variables::"
              }
            }
          ],
          "inner": []
        }
      },
      {
        "type": "DefList",
        "data": {
          "children": [
            {
              "lines": {
                "_lines": [
                  {
                    "_line": ":: workaround numpyoc summary/ext summary bug in take2::Line.__init__",
                    "_number": 0,
                    "_offset": 0
                  }
                ]
              },
              "wh": {
                "_lines": []
              },
              "ind": {
                "_lines": [
                  {
                    "_line": "    In [4]: feeling_greedy=False",
                    "_number": 0,
                    "_offset": 4
                  }
                ]
              },
              "dt": {
                "inline": [
                  {
                    "type": "Words",
                    "data": {
                      "value": ":: workaround numpyoc summary/ext summary bug in take2::Line.__init__"
                    }
                  }
                ],
                "inner": []
              },
              "dd": [
                {
                  "type": "Paragraph",
                  "data": {
                    "inline": [
                      {
                        "type": "Words",
                        "data": {
                          "value": "In [4]: feeling_greedy=False"
                        }
                      }
                    ],
                    "inner": []
                  }
                }
              ]
            }
          ]
        }
      },
      {
        "type": "DefList",
        "data": {
          "children": [
            {
              "lines": {
                "_lines": [
                  {
                    "_line": ":: workaround numpyoc summary/ext summary bug in take2::Line.__init__",
                    "_number": 0,
                    "_offset": 0
                  }
                ]
              },
              "wh": {
                "_lines": []
              },
              "ind": {
                "_lines": [
                  {
                    "_line": "    In [5]: %config IPCompleter.greedy = feeling_greedy",
                    "_number": 0,
                    "_offset": 4
                  }
                ]
              },
              "dt": {
                "inline": [
                  {
                    "type": "Words",
                    "data": {
                      "value": ":: workaround numpyoc summary/ext summary bug in take2::Line.__init__"
                    }
                  }
                ],
                "inner": []
              },
              "dd": [
                {
                  "type": "Paragraph",
                  "data": {
                    "inline": [
                      {
                        "type": "Words",
                        "data": {
                          "value": "In [5]: %config IPCompleter.greedy = feeling_greedy"
                        }
                      }
                    ],
                    "inner": []
                  }
                }
              ]
            }
          ]
        }
      }
    ],
    "title": null
  },
  "see_also": [],
  "signature": "config(self, s)",
  "references": null,
  "arbitrary": []
}