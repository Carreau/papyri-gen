{
  "_content": {
    "Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Run the named file inside IPython as a program."
                }
              }
            ],
            "inner": []
          }
        }
      ],
      "title": null
    },
    "Extended Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Usage::"
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "BlockVerbatim",
          "data": {
            "lines": {
              "_lines": [
                {
                  "_line": "  %run [-n -i -e -G]",
                  "_number": 2,
                  "_offset": 2
                },
                {
                  "_line": "       [( -t [-N<N>] | -d [-b<N>] | -p [profile options] )]",
                  "_number": 3,
                  "_offset": 2
                },
                {
                  "_line": "       ( -m mod | file ) [args]",
                  "_number": 4,
                  "_offset": 2
                },
                {
                  "_line": "",
                  "_number": 5,
                  "_offset": 2
                }
              ]
            }
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Parameters after the filename are passed as command-line arguments to the program (put in sys.argv). Then, control returns to IPython's prompt."
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "This is similar to running at a system prompt "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "python",
                    " ",
                    "file",
                    " ",
                    "args"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": ", but with the advantage of giving you IPython's tracebacks, and of loading all variables into your interactive namespace for further use (unless -p is used, see below)."
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "The file is executed in a namespace initially consisting only of "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "_",
                    "_",
                    "name",
                    "_",
                    "_",
                    "=='",
                    "_",
                    "_",
                    "main",
                    "_",
                    "_",
                    "'"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " and sys.argv constructed as indicated. It thus sees its environment as if it were being run as a stand-alone program (except for sharing global objects such as previously imported modules). But after execution, the IPython interactive namespace gets updated with all variables defined in the program (except for __name__ and sys.argv). This allows for very convenient loading of code for interactive work, while giving each program a 'clean sheet' to run in."
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Arguments are expanded using shell-like glob match.  Patterns '*', '?', '[seq]' and '[!seq]' can be used.  Additionally, tilde '~' will be expanded into user's home directory.  Unlike real shells, quotation does not suppress expansions.  Use *two* back slashes (e.g. "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "\\\\",
                    "*"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": ") to suppress expansions. To completely disable these expansions, you can use -G flag."
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "On Windows systems, the use of single quotes "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "'"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " when specifying a file is not supported. Use double quotes "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "\""
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": "."
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Options:"
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "DefList",
          "data": {
            "children": [
              {
                "lines": {
                  "_lines": [
                    {
                      "_line": "-n",
                      "_number": 36,
                      "_offset": 0
                    }
                  ]
                },
                "wh": {
                  "_lines": []
                },
                "ind": {
                  "_lines": [
                    {
                      "_line": "  __name__ is NOT set to '__main__', but to the running file's name",
                      "_number": 37,
                      "_offset": 2
                    },
                    {
                      "_line": "  without extension (as python does under import).  This allows running",
                      "_number": 38,
                      "_offset": 2
                    },
                    {
                      "_line": "  scripts and reloading the definitions in them without calling code",
                      "_number": 39,
                      "_offset": 2
                    },
                    {
                      "_line": "  protected by an ``if __name__ == \"__main__\"`` clause.",
                      "_number": 40,
                      "_offset": 2
                    },
                    {
                      "_line": "",
                      "_number": 41,
                      "_offset": 2
                    }
                  ]
                },
                "dt": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "-n"
                      }
                    }
                  ],
                  "inner": []
                },
                "dd": [
                  {
                    "type": "Paragraph",
                    "data": {
                      "inline": [
                        {
                          "type": "Words",
                          "data": {
                            "value": "__name__ is NOT set to '__main__', but to the running file's name without extension (as python does under import).  This allows running scripts and reloading the definitions in them without calling code protected by an "
                          }
                        },
                        {
                          "type": "Verbatim",
                          "data": {
                            "value": [
                              "if",
                              " ",
                              "_",
                              "_",
                              "name",
                              "_",
                              "_",
                              " ",
                              "==",
                              " ",
                              "\"",
                              "_",
                              "_",
                              "main",
                              "_",
                              "_",
                              "\""
                            ]
                          }
                        },
                        {
                          "type": "Words",
                          "data": {
                            "value": " clause. "
                          }
                        }
                      ],
                      "inner": []
                    }
                  }
                ]
              },
              {
                "lines": {
                  "_lines": [
                    {
                      "_line": "-i",
                      "_number": 42,
                      "_offset": 0
                    }
                  ]
                },
                "wh": {
                  "_lines": []
                },
                "ind": {
                  "_lines": [
                    {
                      "_line": "  run the file in IPython's namespace instead of an empty one. This",
                      "_number": 43,
                      "_offset": 2
                    },
                    {
                      "_line": "  is useful if you are experimenting with code written in a text editor",
                      "_number": 44,
                      "_offset": 2
                    },
                    {
                      "_line": "  which depends on variables defined interactively.",
                      "_number": 45,
                      "_offset": 2
                    },
                    {
                      "_line": "",
                      "_number": 46,
                      "_offset": 2
                    }
                  ]
                },
                "dt": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "-i"
                      }
                    }
                  ],
                  "inner": []
                },
                "dd": [
                  {
                    "type": "Paragraph",
                    "data": {
                      "inline": [
                        {
                          "type": "Words",
                          "data": {
                            "value": "run the file in IPython's namespace instead of an empty one. This is useful if you are experimenting with code written in a text editor which depends on variables defined interactively. "
                          }
                        }
                      ],
                      "inner": []
                    }
                  }
                ]
              },
              {
                "lines": {
                  "_lines": [
                    {
                      "_line": "-e",
                      "_number": 47,
                      "_offset": 0
                    }
                  ]
                },
                "wh": {
                  "_lines": []
                },
                "ind": {
                  "_lines": [
                    {
                      "_line": "  ignore sys.exit() calls or SystemExit exceptions in the script",
                      "_number": 48,
                      "_offset": 2
                    },
                    {
                      "_line": "  being run.  This is particularly useful if IPython is being used to",
                      "_number": 49,
                      "_offset": 2
                    },
                    {
                      "_line": "  run unittests, which always exit with a sys.exit() call.  In such",
                      "_number": 50,
                      "_offset": 2
                    },
                    {
                      "_line": "  cases you are interested in the output of the test results, not in",
                      "_number": 51,
                      "_offset": 2
                    },
                    {
                      "_line": "  seeing a traceback of the unittest module.",
                      "_number": 52,
                      "_offset": 2
                    },
                    {
                      "_line": "",
                      "_number": 53,
                      "_offset": 2
                    }
                  ]
                },
                "dt": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "-e"
                      }
                    }
                  ],
                  "inner": []
                },
                "dd": [
                  {
                    "type": "Paragraph",
                    "data": {
                      "inline": [
                        {
                          "type": "Words",
                          "data": {
                            "value": "ignore sys.exit() calls or SystemExit exceptions in the script being run.  This is particularly useful if IPython is being used to run unittests, which always exit with a sys.exit() call.  In such cases you are interested in the output of the test results, not in seeing a traceback of the unittest module. "
                          }
                        }
                      ],
                      "inner": []
                    }
                  }
                ]
              },
              {
                "lines": {
                  "_lines": [
                    {
                      "_line": "-t",
                      "_number": 54,
                      "_offset": 0
                    }
                  ]
                },
                "wh": {
                  "_lines": []
                },
                "ind": {
                  "_lines": [
                    {
                      "_line": "  print timing information at the end of the run.  IPython will give",
                      "_number": 55,
                      "_offset": 2
                    },
                    {
                      "_line": "  you an estimated CPU time consumption for your script, which under",
                      "_number": 56,
                      "_offset": 2
                    },
                    {
                      "_line": "  Unix uses the resource module to avoid the wraparound problems of",
                      "_number": 57,
                      "_offset": 2
                    },
                    {
                      "_line": "  time.clock().  Under Unix, an estimate of time spent on system tasks",
                      "_number": 58,
                      "_offset": 2
                    },
                    {
                      "_line": "  is also given (for Windows platforms this is reported as 0.0).",
                      "_number": 59,
                      "_offset": 2
                    },
                    {
                      "_line": "",
                      "_number": 60,
                      "_offset": 2
                    }
                  ]
                },
                "dt": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "-t"
                      }
                    }
                  ],
                  "inner": []
                },
                "dd": [
                  {
                    "type": "Paragraph",
                    "data": {
                      "inline": [
                        {
                          "type": "Words",
                          "data": {
                            "value": "print timing information at the end of the run.  IPython will give you an estimated CPU time consumption for your script, which under Unix uses the resource module to avoid the wraparound problems of time.clock().  Under Unix, an estimate of time spent on system tasks is also given (for Windows platforms this is reported as 0.0). "
                          }
                        }
                      ],
                      "inner": []
                    }
                  }
                ]
              }
            ]
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "If -t is given, an additional "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "-N<N>"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " option can be given, where <N> must be an integer indicating how many times you want the script to run.  The final timing report will include total and per run results."
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "For example (testing the script uniq_stable.py)::"
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "BlockVerbatim",
          "data": {
            "lines": {
              "_lines": [
                {
                  "_line": "    In [1]: run -t uniq_stable",
                  "_number": 67,
                  "_offset": 4
                },
                {
                  "_line": "",
                  "_number": 68,
                  "_offset": 4
                },
                {
                  "_line": "    IPython CPU timings (estimated):",
                  "_number": 69,
                  "_offset": 4
                },
                {
                  "_line": "      User  :    0.19597 s.",
                  "_number": 70,
                  "_offset": 4
                },
                {
                  "_line": "      System:        0.0 s.",
                  "_number": 71,
                  "_offset": 4
                },
                {
                  "_line": "",
                  "_number": 72,
                  "_offset": 4
                },
                {
                  "_line": "    In [2]: run -t -N5 uniq_stable",
                  "_number": 73,
                  "_offset": 4
                },
                {
                  "_line": "",
                  "_number": 74,
                  "_offset": 4
                },
                {
                  "_line": "    IPython CPU timings (estimated):",
                  "_number": 75,
                  "_offset": 4
                },
                {
                  "_line": "    Total runs performed: 5",
                  "_number": 76,
                  "_offset": 4
                },
                {
                  "_line": "      Times :      Total       Per run",
                  "_number": 77,
                  "_offset": 4
                },
                {
                  "_line": "      User  :   0.910862 s,  0.1821724 s.",
                  "_number": 78,
                  "_offset": 4
                },
                {
                  "_line": "      System:        0.0 s,        0.0 s.",
                  "_number": 79,
                  "_offset": 4
                },
                {
                  "_line": "",
                  "_number": 80,
                  "_offset": 4
                }
              ]
            }
          }
        },
        {
          "type": "DefList",
          "data": {
            "children": [
              {
                "lines": {
                  "_lines": [
                    {
                      "_line": "-d",
                      "_number": 81,
                      "_offset": 0
                    }
                  ]
                },
                "wh": {
                  "_lines": []
                },
                "ind": {
                  "_lines": [
                    {
                      "_line": "  run your program under the control of pdb, the Python debugger.",
                      "_number": 82,
                      "_offset": 2
                    },
                    {
                      "_line": "  This allows you to execute your program step by step, watch variables,",
                      "_number": 83,
                      "_offset": 2
                    },
                    {
                      "_line": "  etc.  Internally, what IPython does is similar to calling::",
                      "_number": 84,
                      "_offset": 2
                    },
                    {
                      "_line": "",
                      "_number": 85,
                      "_offset": 2
                    },
                    {
                      "_line": "      pdb.run('execfile(\"YOURFILENAME\")')",
                      "_number": 86,
                      "_offset": 2
                    },
                    {
                      "_line": "",
                      "_number": 87,
                      "_offset": 2
                    },
                    {
                      "_line": "  with a breakpoint set on line 1 of your file.  You can change the line",
                      "_number": 88,
                      "_offset": 2
                    },
                    {
                      "_line": "  number for this automatic breakpoint to be <N> by using the -bN option",
                      "_number": 89,
                      "_offset": 2
                    },
                    {
                      "_line": "  (where N must be an integer). For example::",
                      "_number": 90,
                      "_offset": 2
                    },
                    {
                      "_line": "",
                      "_number": 91,
                      "_offset": 2
                    },
                    {
                      "_line": "      %run -d -b40 myscript",
                      "_number": 92,
                      "_offset": 2
                    },
                    {
                      "_line": "",
                      "_number": 93,
                      "_offset": 2
                    },
                    {
                      "_line": "  will set the first breakpoint at line 40 in myscript.py.  Note that",
                      "_number": 94,
                      "_offset": 2
                    },
                    {
                      "_line": "  the first breakpoint must be set on a line which actually does",
                      "_number": 95,
                      "_offset": 2
                    },
                    {
                      "_line": "  something (not a comment or docstring) for it to stop execution.",
                      "_number": 96,
                      "_offset": 2
                    },
                    {
                      "_line": "",
                      "_number": 97,
                      "_offset": 2
                    },
                    {
                      "_line": "  Or you can specify a breakpoint in a different file::",
                      "_number": 98,
                      "_offset": 2
                    },
                    {
                      "_line": "",
                      "_number": 99,
                      "_offset": 2
                    },
                    {
                      "_line": "      %run -d -b myotherfile.py:20 myscript",
                      "_number": 100,
                      "_offset": 2
                    },
                    {
                      "_line": "",
                      "_number": 101,
                      "_offset": 2
                    },
                    {
                      "_line": "  When the pdb debugger starts, you will see a (Pdb) prompt.  You must",
                      "_number": 102,
                      "_offset": 2
                    },
                    {
                      "_line": "  first enter 'c' (without quotes) to start execution up to the first",
                      "_number": 103,
                      "_offset": 2
                    },
                    {
                      "_line": "  breakpoint.",
                      "_number": 104,
                      "_offset": 2
                    },
                    {
                      "_line": "",
                      "_number": 105,
                      "_offset": 2
                    },
                    {
                      "_line": "  Entering 'help' gives information about the use of the debugger.  You",
                      "_number": 106,
                      "_offset": 2
                    },
                    {
                      "_line": "  can easily see pdb's full documentation with \"import pdb;pdb.help()\"",
                      "_number": 107,
                      "_offset": 2
                    },
                    {
                      "_line": "  at a prompt.",
                      "_number": 108,
                      "_offset": 2
                    },
                    {
                      "_line": "",
                      "_number": 109,
                      "_offset": 2
                    }
                  ]
                },
                "dt": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "-d"
                      }
                    }
                  ],
                  "inner": []
                },
                "dd": [
                  {
                    "type": "Paragraph",
                    "data": {
                      "inline": [
                        {
                          "type": "Words",
                          "data": {
                            "value": "run your program under the control of pdb, the Python debugger. This allows you to execute your program step by step, watch variables, etc.  Internally, what IPython does is similar to calling::      pdb.run('execfile(\"YOURFILENAME\")')  with a breakpoint set on line 1 of your file.  You can change the line number for this automatic breakpoint to be <N> by using the -bN option (where N must be an integer). For example::      %run -d -b40 myscript  will set the first breakpoint at line 40 in myscript.py.  Note that the first breakpoint must be set on a line which actually does something (not a comment or docstring) for it to stop execution.  Or you can specify a breakpoint in a different file::      %run -d -b myotherfile.py:20 myscript  When the pdb debugger starts, you will see a (Pdb) prompt.  You must first enter 'c' (without quotes) to start execution up to the first breakpoint.  Entering 'help' gives information about the use of the debugger.  You can easily see pdb's full documentation with \"import pdb;pdb.help()\" at a prompt. "
                          }
                        }
                      ],
                      "inner": []
                    }
                  }
                ]
              },
              {
                "lines": {
                  "_lines": [
                    {
                      "_line": "-p",
                      "_number": 110,
                      "_offset": 0
                    }
                  ]
                },
                "wh": {
                  "_lines": []
                },
                "ind": {
                  "_lines": [
                    {
                      "_line": "  run program under the control of the Python profiler module (which",
                      "_number": 111,
                      "_offset": 2
                    },
                    {
                      "_line": "  prints a detailed report of execution times, function calls, etc).",
                      "_number": 112,
                      "_offset": 2
                    },
                    {
                      "_line": "",
                      "_number": 113,
                      "_offset": 2
                    },
                    {
                      "_line": "  You can pass other options after -p which affect the behavior of the",
                      "_number": 114,
                      "_offset": 2
                    },
                    {
                      "_line": "  profiler itself. See the docs for %prun for details.",
                      "_number": 115,
                      "_offset": 2
                    },
                    {
                      "_line": "",
                      "_number": 116,
                      "_offset": 2
                    },
                    {
                      "_line": "  In this mode, the program's variables do NOT propagate back to the",
                      "_number": 117,
                      "_offset": 2
                    },
                    {
                      "_line": "  IPython interactive namespace (because they remain in the namespace",
                      "_number": 118,
                      "_offset": 2
                    },
                    {
                      "_line": "  where the profiler executes them).",
                      "_number": 119,
                      "_offset": 2
                    },
                    {
                      "_line": "",
                      "_number": 120,
                      "_offset": 2
                    },
                    {
                      "_line": "  Internally this triggers a call to %prun, see its documentation for",
                      "_number": 121,
                      "_offset": 2
                    },
                    {
                      "_line": "  details on the options available specifically for profiling.",
                      "_number": 122,
                      "_offset": 2
                    },
                    {
                      "_line": "",
                      "_number": 123,
                      "_offset": 2
                    }
                  ]
                },
                "dt": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "-p"
                      }
                    }
                  ],
                  "inner": []
                },
                "dd": [
                  {
                    "type": "Paragraph",
                    "data": {
                      "inline": [
                        {
                          "type": "Words",
                          "data": {
                            "value": "run program under the control of the Python profiler module (which prints a detailed report of execution times, function calls, etc).  You can pass other options after -p which affect the behavior of the profiler itself. See the docs for %prun for details.  In this mode, the program's variables do NOT propagate back to the IPython interactive namespace (because they remain in the namespace where the profiler executes them).  Internally this triggers a call to %prun, see its documentation for details on the options available specifically for profiling. "
                          }
                        }
                      ],
                      "inner": []
                    }
                  }
                ]
              }
            ]
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "There is one special usage for which the text above doesn't apply: if the filename ends with .ipy[nb], the file is run as ipython script, just as if the commands were written on IPython prompt."
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "DefList",
          "data": {
            "children": [
              {
                "lines": {
                  "_lines": [
                    {
                      "_line": "-m",
                      "_number": 128,
                      "_offset": 0
                    }
                  ]
                },
                "wh": {
                  "_lines": []
                },
                "ind": {
                  "_lines": [
                    {
                      "_line": "  specify module name to load instead of script path. Similar to",
                      "_number": 129,
                      "_offset": 2
                    },
                    {
                      "_line": "  the -m option for the python interpreter. Use this option last if you",
                      "_number": 130,
                      "_offset": 2
                    },
                    {
                      "_line": "  want to combine with other %run options. Unlike the python interpreter",
                      "_number": 131,
                      "_offset": 2
                    },
                    {
                      "_line": "  only source modules are allowed no .pyc or .pyo files.",
                      "_number": 132,
                      "_offset": 2
                    },
                    {
                      "_line": "  For example::",
                      "_number": 133,
                      "_offset": 2
                    },
                    {
                      "_line": "",
                      "_number": 134,
                      "_offset": 2
                    },
                    {
                      "_line": "      %run -m example",
                      "_number": 135,
                      "_offset": 2
                    },
                    {
                      "_line": "",
                      "_number": 136,
                      "_offset": 2
                    },
                    {
                      "_line": "  will run the example module.",
                      "_number": 137,
                      "_offset": 2
                    },
                    {
                      "_line": "",
                      "_number": 138,
                      "_offset": 2
                    }
                  ]
                },
                "dt": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "-m"
                      }
                    }
                  ],
                  "inner": []
                },
                "dd": [
                  {
                    "type": "Paragraph",
                    "data": {
                      "inline": [
                        {
                          "type": "Words",
                          "data": {
                            "value": "specify module name to load instead of script path. Similar to the -m option for the python interpreter. Use this option last if you want to combine with other %run options. Unlike the python interpreter only source modules are allowed no .pyc or .pyo files. For example::      %run -m example  will run the example module. "
                          }
                        }
                      ],
                      "inner": []
                    }
                  }
                ]
              },
              {
                "lines": {
                  "_lines": [
                    {
                      "_line": "-G",
                      "_number": 139,
                      "_offset": 0
                    }
                  ]
                },
                "wh": {
                  "_lines": []
                },
                "ind": {
                  "_lines": [
                    {
                      "_line": "  disable shell-like glob expansion of arguments.",
                      "_number": 140,
                      "_offset": 2
                    }
                  ]
                },
                "dt": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "-G"
                      }
                    }
                  ],
                  "inner": []
                },
                "dd": [
                  {
                    "type": "Paragraph",
                    "data": {
                      "inline": [
                        {
                          "type": "Words",
                          "data": {
                            "value": "disable shell-like glob expansion of arguments."
                          }
                        }
                      ],
                      "inner": []
                    }
                  }
                ]
              }
            ]
          }
        }
      ],
      "title": null
    },
    "Parameters": {
      "children": [],
      "title": null
    },
    "Returns": {
      "children": [],
      "title": null
    },
    "Yields": {
      "children": [],
      "title": null
    },
    "Receives": {
      "children": [],
      "title": null
    },
    "Raises": {
      "children": [],
      "title": null
    },
    "Warns": {
      "children": [],
      "title": null
    },
    "Other Parameters": {
      "children": [],
      "title": null
    },
    "Attributes": {
      "children": [],
      "title": null
    },
    "Methods": {
      "children": [],
      "title": null
    },
    "Notes": {
      "children": [],
      "title": null
    },
    "Warnings": {
      "children": [],
      "title": null
    }
  },
  "refs": [],
  "ordered_sections": [
    "Summary",
    "Extended Summary"
  ],
  "item_file": "<decorator-gen-52>",
  "item_line": 515,
  "item_type": "<class 'function'>",
  "aliases": [
    "IPython.core.magics.ExecutionMagics.run"
  ],
  "example_section_data": {
    "children": [],
    "title": null
  },
  "see_also": [],
  "signature": "run(self, parameter_s='', runner=None, file_finder=<function get_py_filename at 0x10260dee0>)",
  "references": null,
  "arbitrary": []
}