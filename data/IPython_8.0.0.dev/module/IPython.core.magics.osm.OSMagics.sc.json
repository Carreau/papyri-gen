{
  "_content": {
    "Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Shell capture - run shell command and capture output (DEPRECATED use !)."
                }
              }
            ],
            "inner": []
          }
        }
      ],
      "title": null
    },
    "Extended Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "DEPRECATED. Suboptimal, retained for backwards compatibility."
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "You should use the form 'var = !command' instead. Example:"
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": " \"%sc -l myfiles = ls ~\" should now be written as"
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": " \"myfiles = !ls ~\""
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "myfiles.s, myfiles.l and myfiles.n still apply as documented below."
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "-- %sc [options] varname=command"
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "IPython will run the given command using commands.getoutput(), and will then update the user's interactive namespace with a variable called varname, containing the value of the call.  Your command can contain shell wildcards, pipes, etc."
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "The '=' sign in the syntax is mandatory, and the variable name you supply must follow Python's standard conventions for valid names."
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "(A special format without variable name exists for internal use)"
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Options:"
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "  -l: list output.  Split the output on newlines into a list before   assigning it to the given variable.  By default the output is stored   as a single string."
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "  -v: verbose.  Print the contents of the variable."
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "In most cases you should not need to split as a list, because the returned value is a special type of string which can automatically provide its contents either as a list (split on newlines) or as a space-separated string.  These are convenient, respectively, either for sequential processing or to be passed to a shell command."
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "For example::"
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "BlockVerbatim",
          "data": {
            "lines": {
              "_lines": [
                {
                  "_line": "    # Capture into variable a",
                  "_number": 40,
                  "_offset": 4
                },
                {
                  "_line": "    In [1]: sc a=ls *py",
                  "_number": 41,
                  "_offset": 4
                },
                {
                  "_line": "",
                  "_number": 42,
                  "_offset": 4
                },
                {
                  "_line": "    # a is a string with embedded newlines",
                  "_number": 43,
                  "_offset": 4
                },
                {
                  "_line": "    In [2]: a",
                  "_number": 44,
                  "_offset": 4
                },
                {
                  "_line": "    Out[2]: 'setup.py\\nwin32_manual_post_install.py'",
                  "_number": 45,
                  "_offset": 4
                },
                {
                  "_line": "",
                  "_number": 46,
                  "_offset": 4
                },
                {
                  "_line": "    # which can be seen as a list:",
                  "_number": 47,
                  "_offset": 4
                },
                {
                  "_line": "    In [3]: a.l",
                  "_number": 48,
                  "_offset": 4
                },
                {
                  "_line": "    Out[3]: ['setup.py', 'win32_manual_post_install.py']",
                  "_number": 49,
                  "_offset": 4
                },
                {
                  "_line": "",
                  "_number": 50,
                  "_offset": 4
                },
                {
                  "_line": "    # or as a whitespace-separated string:",
                  "_number": 51,
                  "_offset": 4
                },
                {
                  "_line": "    In [4]: a.s",
                  "_number": 52,
                  "_offset": 4
                },
                {
                  "_line": "    Out[4]: 'setup.py win32_manual_post_install.py'",
                  "_number": 53,
                  "_offset": 4
                },
                {
                  "_line": "",
                  "_number": 54,
                  "_offset": 4
                },
                {
                  "_line": "    # a.s is useful to pass as a single command line:",
                  "_number": 55,
                  "_offset": 4
                },
                {
                  "_line": "    In [5]: !wc -l $a.s",
                  "_number": 56,
                  "_offset": 4
                },
                {
                  "_line": "      146 setup.py",
                  "_number": 57,
                  "_offset": 4
                },
                {
                  "_line": "      130 win32_manual_post_install.py",
                  "_number": 58,
                  "_offset": 4
                },
                {
                  "_line": "      276 total",
                  "_number": 59,
                  "_offset": 4
                },
                {
                  "_line": "",
                  "_number": 60,
                  "_offset": 4
                },
                {
                  "_line": "    # while the list form is useful to loop over:",
                  "_number": 61,
                  "_offset": 4
                },
                {
                  "_line": "    In [6]: for f in a.l:",
                  "_number": 62,
                  "_offset": 4
                },
                {
                  "_line": "      ...:      !wc -l $f",
                  "_number": 63,
                  "_offset": 4
                },
                {
                  "_line": "      ...:",
                  "_number": 64,
                  "_offset": 4
                },
                {
                  "_line": "    146 setup.py",
                  "_number": 65,
                  "_offset": 4
                },
                {
                  "_line": "    130 win32_manual_post_install.py",
                  "_number": 66,
                  "_offset": 4
                },
                {
                  "_line": "",
                  "_number": 67,
                  "_offset": 4
                }
              ]
            }
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Similarly, the lists returned by the -l option are also special, in the sense that you can equally invoke the .s attribute on them to automatically get a whitespace-separated string from their contents::"
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "BlockVerbatim",
          "data": {
            "lines": {
              "_lines": [
                {
                  "_line": "    In [7]: sc -l b=ls *py",
                  "_number": 72,
                  "_offset": 4
                },
                {
                  "_line": "",
                  "_number": 73,
                  "_offset": 4
                },
                {
                  "_line": "    In [8]: b",
                  "_number": 74,
                  "_offset": 4
                },
                {
                  "_line": "    Out[8]: ['setup.py', 'win32_manual_post_install.py']",
                  "_number": 75,
                  "_offset": 4
                },
                {
                  "_line": "",
                  "_number": 76,
                  "_offset": 4
                },
                {
                  "_line": "    In [9]: b.s",
                  "_number": 77,
                  "_offset": 4
                },
                {
                  "_line": "    Out[9]: 'setup.py win32_manual_post_install.py'",
                  "_number": 78,
                  "_offset": 4
                },
                {
                  "_line": "",
                  "_number": 79,
                  "_offset": 4
                }
              ]
            }
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "In summary, both the lists and strings used for output capture have the following special attributes::"
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "BlockVerbatim",
          "data": {
            "lines": {
              "_lines": [
                {
                  "_line": "    .l (or .list) : value as list.",
                  "_number": 83,
                  "_offset": 4
                },
                {
                  "_line": "    .n (or .nlstr): value as newline-separated string.",
                  "_number": 84,
                  "_offset": 4
                },
                {
                  "_line": "    .s (or .spstr): value as space-separated string.",
                  "_number": 85,
                  "_offset": 4
                }
              ]
            }
          }
        }
      ],
      "title": null
    },
    "Parameters": {
      "children": [],
      "title": null
    },
    "Returns": {
      "children": [],
      "title": null
    },
    "Yields": {
      "children": [],
      "title": null
    },
    "Receives": {
      "children": [],
      "title": null
    },
    "Raises": {
      "children": [],
      "title": null
    },
    "Warns": {
      "children": [],
      "title": null
    },
    "Other Parameters": {
      "children": [],
      "title": null
    },
    "Attributes": {
      "children": [],
      "title": null
    },
    "Methods": {
      "children": [],
      "title": null
    },
    "Notes": {
      "children": [],
      "title": null
    },
    "Warnings": {
      "children": [],
      "title": null
    }
  },
  "refs": [],
  "ordered_sections": [
    "Summary",
    "Extended Summary"
  ],
  "item_file": "<decorator-gen-92>",
  "item_line": 565,
  "item_type": "<class 'function'>",
  "aliases": [
    "IPython.core.magics.OSMagics.sc"
  ],
  "example_section_data": {
    "children": [],
    "title": null
  },
  "see_also": [],
  "signature": "sc(self, parameter_s='')",
  "references": null,
  "arbitrary": []
}