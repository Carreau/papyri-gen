{
  "aliases": [],
  "arbitrary": [
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "This document is meant to highlight the main differences between the Python language and what are the specific constructs you can do only in IPython."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Unless expressed otherwise all of the constructs you will see here will raise a "
            },
            {
              "type": "inlineCode",
              "value": "SyntaxError"
            },
            {
              "type": "text",
              "value": " if run in a pure Python shell, or if executing in a Python script."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Each of these features is described more in detail in the further parts of the documentation."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": "Python vs IPython",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "All the following constructs are valid IPython syntax:"
            }
          ],
          "type": "paragraph"
        },
        {
          "args": "ipython",
          "children": [],
          "name": "code-block",
          "options": {},
          "type": "mystDirective",
          "value": "In [1]: ?"
        },
        {
          "args": "ipython",
          "children": [],
          "name": "code-block",
          "options": {},
          "type": "mystDirective",
          "value": "In [1]: ?object"
        },
        {
          "args": "ipython",
          "children": [],
          "name": "code-block",
          "options": {},
          "type": "mystDirective",
          "value": "In [1]: object?"
        },
        {
          "args": "ipython",
          "children": [],
          "name": "code-block",
          "options": {},
          "type": "mystDirective",
          "value": "In [1]: *pattern*?"
        },
        {
          "args": "ipython",
          "children": [],
          "name": "code-block",
          "options": {},
          "type": "mystDirective",
          "value": "In [1]: %shell like --syntax"
        },
        {
          "args": "ipython",
          "children": [],
          "name": "code-block",
          "options": {},
          "type": "mystDirective",
          "value": "In [1]: !ls"
        },
        {
          "args": "ipython",
          "children": [],
          "name": "code-block",
          "options": {},
          "type": "mystDirective",
          "value": "In [1]: my_files = !ls ~/\nIn [1]: for i, file in enumerate(my_files):\n   ...:     raw = !echo $file\n   ...:     !echo {file[0].upper()} $raw"
        },
        {
          "args": "ipython",
          "children": [],
          "name": "code-block",
          "options": {},
          "type": "mystDirective",
          "value": "In [1]: %%perl magic --function\n   ...: @months = (\"July\", \"August\", \"September\");\n   ...: print $months[0];"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Each of these constructs is compiled by IPython into valid python code and will do most of the time what you expect it will do. Let's see each of these examples in more detail."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 1,
      "target": null,
      "title": "Quick overview:",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "As IPython is mostly an interactive shell, the question mark is a simple shortcut to get help. A question mark alone will bring up the IPython help:"
            }
          ],
          "type": "paragraph"
        },
        {
          "args": "ipython",
          "children": [],
          "name": "code-block",
          "options": {},
          "type": "mystDirective",
          "value": "In [1]: ?\n\nIPython -- An enhanced Interactive Python\n=========================================\n\nIPython offers a combination of convenient shell features, special commands\nand a history mechanism for both input (command history) and output (results\ncaching, similar to Mathematica). It is intended to be a fully compatible\nreplacement for the standard Python interpreter, while offering vastly\nimproved functionality and flexibility.\n\nAt your system command line, type 'ipython -h' to see the command line\noptions available. This document only describes interactive features.\n\nMAIN FEATURES\n-------------\n..."
        },
        {
          "children": [
            {
              "type": "text",
              "value": "A single question mark before or after an object available in the current namespace will show help relative to this object:"
            }
          ],
          "type": "paragraph"
        },
        {
          "args": "ipython",
          "children": [],
          "name": "code-block",
          "options": {},
          "type": "mystDirective",
          "value": "In [6]: object?\nDocstring: The most base type\nType:      type"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "A double question mark will try to pull out more information about the object, and if possible display the python source code of this object."
            }
          ],
          "type": "paragraph"
        },
        {
          "args": "ipython",
          "children": [],
          "name": "code-block",
          "options": {},
          "type": "mystDirective",
          "value": "In[1]: import collections\nIn[2]: collections.Counter??\n\nInit signature: collections.Counter(*args, **kwds)\nSource:\nclass Counter(dict):\n    '''Dict subclass for counting hashable items.  Sometimes called a bag\n    or multiset.  Elements are stored as dictionary keys and their counts\n    are stored as dictionary values.\n\n    >>> c = Counter('abcdeabcdabcaba')  # count elements from a string\n\n    >>> c.most_common(3)                # three most common elements\n    [('a', 5), ('b', 4), ('c', 3)]\n    >>> sorted(c)                       # list all unique elements\n    ['a', 'b', 'c', 'd', 'e']\n    >>> ''.join(sorted(c.elements()))   # list elements with repetitions\n    'aaaaabbbbcccdde'\n    ..."
        },
        {
          "children": [
            {
              "type": "text",
              "value": "If you are looking for an object, the use of wildcards "
            },
            {
              "type": "inlineCode",
              "value": "*"
            },
            {
              "type": "text",
              "value": " in conjunction with a question mark will allow you to search the current namespace for objects with matching names:"
            }
          ],
          "type": "paragraph"
        },
        {
          "args": "ipython",
          "children": [],
          "name": "code-block",
          "options": {},
          "type": "mystDirective",
          "value": "In [24]: *int*?\nFloatingPointError\nint\nprint"
        }
      ],
      "level": 1,
      "target": null,
      "title": "Accessing help",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "When doing interactive computing it is a common need to access the underlying shell. This is doable through the use of the exclamation mark "
            },
            {
              "type": "inlineCode",
              "value": "!"
            },
            {
              "type": "text",
              "value": " (or bang)."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "This allows to execute simple commands when present in beginning of the line:"
            }
          ],
          "type": "paragraph"
        },
        {
          "args": "ipython",
          "children": [],
          "name": "code-block",
          "options": {},
          "type": "mystDirective",
          "value": "In[1]: !pwd\n/User/home/"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Change directory:"
            }
          ],
          "type": "paragraph"
        },
        {
          "args": "ipython",
          "children": [],
          "name": "code-block",
          "options": {},
          "type": "mystDirective",
          "value": "In[1]: !cd /var/etc"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Or edit file:"
            }
          ],
          "type": "paragraph"
        },
        {
          "args": "ipython",
          "children": [],
          "name": "code-block",
          "options": {},
          "type": "mystDirective",
          "value": "In[1]: !mvim myfile.txt"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "The line after the bang can call any program installed in the underlying shell, and support variable expansion in the form of "
            },
            {
              "type": "inlineCode",
              "value": "$variable"
            },
            {
              "type": "text",
              "value": " or "
            },
            {
              "type": "inlineCode",
              "value": "{variable}"
            },
            {
              "type": "text",
              "value": ". The later form of expansion supports arbitrary python expressions:"
            }
          ],
          "type": "paragraph"
        },
        {
          "args": "ipython",
          "children": [],
          "name": "code-block",
          "options": {},
          "type": "mystDirective",
          "value": "In[1]: file = 'myfile.txt'\n\nIn[2]: !mv $file {file.upper()}"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "The bang ("
            },
            {
              "type": "inlineCode",
              "value": "!"
            },
            {
              "type": "text",
              "value": ") can also be present on the right hand side of an assignment, just after the equal sign, or separated from it by a white space. In this case the standard output of the command after the bang will be split out into lines in a list-like object and assigned to the left hand side."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "This allows you, for example, to put the list of files of the current working directory in a variable:"
            }
          ],
          "type": "paragraph"
        },
        {
          "args": "ipython",
          "children": [],
          "name": "code-block",
          "options": {},
          "type": "mystDirective",
          "value": "In[1]: my_files = !ls"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "You can combine the different possibilities in for loops, conditions, functions...:"
            }
          ],
          "type": "paragraph"
        },
        {
          "args": "ipython",
          "children": [],
          "name": "code-block",
          "options": {},
          "type": "mystDirective",
          "value": "my_files = !ls ~/\nfor i, file in enumerate(my_files):\n    raw = !echo $backup $file\n    !cp $file {file.split('.')[0] + '.bak'}"
        }
      ],
      "level": 1,
      "target": null,
      "title": "Shell Assignment",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Magic functions (magics) are often present in the form of shell-like syntax, but they are python functions under the hood. The syntax and assignment possibilities are similar to the one with the bang ("
            },
            {
              "type": "inlineCode",
              "value": "!"
            },
            {
              "type": "text",
              "value": ") syntax, but with more flexibility and power. Magic functions start with a percent sign ("
            },
            {
              "type": "inlineCode",
              "value": "%"
            },
            {
              "type": "text",
              "value": ") or double percent signs ("
            },
            {
              "type": "inlineCode",
              "value": "%%"
            },
            {
              "type": "text",
              "value": ")."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "A magic call with a single percent sign will act only on one line:"
            }
          ],
          "type": "paragraph"
        },
        {
          "args": "ipython",
          "children": [],
          "name": "code-block",
          "options": {},
          "type": "mystDirective",
          "value": "In[1]: %xmode\nException reporting mode: Verbose"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Magics support assignment:"
            }
          ],
          "type": "paragraph"
        },
        {
          "args": "ipython",
          "children": [],
          "name": "code-block",
          "options": {},
          "type": "mystDirective",
          "value": "In [1]: results = %timeit -r1 -n1 -o list(range(1000))\n1 loops, best of 1: 21.1 \u00b5s per loop\n\nIn [2]: results\nOut[2]: <TimeitResult : 1 loops, best of 1: 21.1 \u00b5s per loop>"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Magics with double percent signs ("
            },
            {
              "type": "inlineCode",
              "value": "%%"
            },
            {
              "type": "text",
              "value": ") can spread over multiple lines, but they do not support assignments:"
            }
          ],
          "type": "paragraph"
        },
        {
          "args": "ipython",
          "children": [],
          "name": "code-block",
          "options": {},
          "type": "mystDirective",
          "value": "In[1]: %%bash\n...  : echo \"My shell is:\" $SHELL\n...  : echo \"My disk usage is:\"\n...  : df -h\nMy shell is: /usr/local/bin/bash\nMy disk usage is:\nFilesystem      Size   Used  Avail Capacity  iused   ifree %iused  Mounted on\n/dev/disk1     233Gi  216Gi   16Gi    94% 56788108 4190706   93%   /\ndevfs          190Ki  190Ki    0Bi   100%      656       0  100%   /dev\nmap -hosts       0Bi    0Bi    0Bi   100%        0       0  100%   /net\nmap auto_home    0Bi    0Bi    0Bi   100%        0       0  100%   /hom"
        }
      ],
      "level": 2,
      "target": null,
      "title": "Magics",
      "type": "Section"
    }
  ],
  "content": {},
  "example_section_data": {
    "children": [],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": null,
  "item_line": null,
  "item_type": null,
  "ordered_sections": [],
  "references": null,
  "see_also": [],
  "signature": {
    "type": "Signature",
    "value": null
  },
  "type": "DocBlob"
}