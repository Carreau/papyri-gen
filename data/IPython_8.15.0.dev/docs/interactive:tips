{
  "aliases": [],
  "arbitrary": [
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "The "
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "IPython cookbook"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://github.com/ipython/ipython/wiki?path=Cookbook"
            },
            {
              "type": "text",
              "value": " details more things you can do with IPython."
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "mystComment",
          "value": ".. This is not in the current version:"
        }
      ],
      "level": 0,
      "target": "tips",
      "title": "IPython Tips & Tricks",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "A few lines of code are enough to load a complete IPython inside your own programs, giving you the ability to work with your data interactively after automatic processing has been completed. See "
            },
            {
              "type": "inlineCode",
              "value": "the embedding section <embedding>"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 1,
      "target": null,
      "title": "Embed IPython in your programs",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Run your doctests from within IPython for development and debugging. The special "
            },
            {
              "type": "inlineCode",
              "value": "%doctest_mode"
            },
            {
              "type": "text",
              "value": " command toggles a mode where the prompt, output and exceptions display matches as closely as possible that of the default Python interpreter. In addition, this mode allows you to directly paste in code that contains leading '>>>' prompts, even if they have extra leading whitespace (as is common in doctest files). This combined with the "
            },
            {
              "type": "inlineCode",
              "value": "%hist -t"
            },
            {
              "type": "text",
              "value": " call to see your translated history allows for an easy doctest workflow, where you can go from doctest to interactive execution to pasting into valid Python code as needed."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 1,
      "target": null,
      "title": "Run doctests",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Use the "
            },
            {
              "type": "inlineCode",
              "value": "IPython.lib.demo.Demo"
            },
            {
              "type": "text",
              "value": " class to load any Python script as an interactive demo. With a minimal amount of simple markup, you can control the execution of the script, stopping as needed. See "
            },
            {
              "type": "inlineCode",
              "value": "here <interactive_demos>"
            },
            {
              "type": "text",
              "value": " for more."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 1,
      "target": null,
      "title": "Use IPython to present interactive demos",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Put a ';' at the end of a line to suppress the printing of output. This is useful when doing calculations which generate long output you are not interested in seeing. It also keeps the object out of the output cache, so if you're working with large temporary objects, they'll be released from memory sooner."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 1,
      "target": null,
      "title": "Suppress output",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "When you call "
            },
            {
              "type": "inlineCode",
              "value": "%edit"
            },
            {
              "type": "text",
              "value": " with no arguments, IPython opens an empty editor with a temporary file, and it returns the contents of your editing session as a string variable. Thanks to IPython's output caching mechanism, this is automatically stored      "
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": "In [1]: %edit\n\nIPython will make a temporary file named: /tmp/ipython_edit_yR-HCN.py\n\nEditing... done. Executing edited code...\n\nhello - this is a temporary file\n\nOut[1]: \"print('hello - this is a temporary file')\\n\""
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Now, if you call "
            },
            {
              "type": "inlineCode",
              "value": "%edit -p"
            },
            {
              "type": "text",
              "value": ", IPython tries to open an editor with the same data as the last time you used %edit. So if you haven't used %edit in the meantime, this same contents will reopen; however, it will be done in a new file. This means that if you make changes and you later want to find an old version, you can always retrieve it by using its output number, via '%edit _NN', where NN is the number of the output prompt."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Continuing with the example above, this should illustrate this idea      "
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": "In [2]: edit -p\n\nIPython will make a temporary file named: /tmp/ipython_edit_nA09Qk.py\n\nEditing... done. Executing edited code...\n\nhello - now I made some changes\n\nOut[2]: \"print('hello - now I made some changes')\\n\"\n\nIn [3]: edit _1\n\nIPython will make a temporary file named: /tmp/ipython_edit_gy6-zD.py\n\nEditing... done. Executing edited code...\n\nhello - this is a temporary file\n\nIPython version control at work :)\n\nOut[3]: \"print('hello - this is a temporary file')\\nprint('IPython version control at work :)')\\n\""
        },
        {
          "children": [
            {
              "type": "text",
              "value": "This section was written after a contribution by Alexander Belchenko on the IPython user list."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 1,
      "target": null,
      "title": "Lightweight 'version control'",
      "type": "Section"
    }
  ],
  "content": {},
  "example_section_data": {
    "children": [],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": null,
  "item_line": null,
  "item_type": null,
  "ordered_sections": [],
  "references": null,
  "see_also": [],
  "signature": {
    "type": "Signature",
    "value": null
  },
  "type": "DocBlob"
}