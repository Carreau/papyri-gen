{
  "aliases": [
    "IPython.utils.text.compute_item_matrix"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "list of strings to columize"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "items",
              "type": "Param",
              "type_": ""
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Whether to compute columns for a row-first matrix instead of column-first (default)."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "row_first",
              "type": "Param",
              "type_": "(default False)"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "default value to fill list if needed"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "empty",
              "type": "Param",
              "type_": "(default None)"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "How much characters will be used as a separation between each columns."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "separator_size",
              "type": "Param",
              "type_": "int (default=2)"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The width of the area onto which the columns should enter"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "displaywidth",
              "type": "Param",
              "type_": "int (default=80)"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "nested list of string, the outer most list contains as many list as rows, the innermost lists have each as many element as columns. If the total number of elements in "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "items",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "items"
                    },
                    {
                      "type": "text",
                      "value": " does not equal the product of rows*columns, the last element of some lists are filled with "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "None"
                    },
                    {
                      "type": "text",
                      "value": "."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "",
              "type": "Param",
              "type_": "strings_matrix"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "some info to make columnize easier:"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "dd": [
                        {
                          "children": [
                            {
                              "type": "text",
                              "value": "number of columns"
                            }
                          ],
                          "type": "paragraph"
                        }
                      ],
                      "dt": {
                        "children": [
                          {
                            "type": "text",
                            "value": "num_columns"
                          }
                        ],
                        "type": "paragraph"
                      },
                      "type": "DefListItem"
                    },
                    {
                      "dd": [
                        {
                          "children": [
                            {
                              "type": "text",
                              "value": "maximum number of rows (final number may be less)"
                            }
                          ],
                          "type": "paragraph"
                        }
                      ],
                      "dt": {
                        "children": [
                          {
                            "type": "text",
                            "value": "max_rows"
                          }
                        ],
                        "type": "paragraph"
                      },
                      "type": "DefListItem"
                    },
                    {
                      "dd": [
                        {
                          "children": [
                            {
                              "type": "text",
                              "value": "list of with of each columns"
                            }
                          ],
                          "type": "paragraph"
                        }
                      ],
                      "dt": {
                        "children": [
                          {
                            "type": "text",
                            "value": "column_widths"
                          }
                        ],
                        "type": "paragraph"
                      },
                      "type": "DefListItem"
                    },
                    {
                      "dd": [
                        {
                          "children": [
                            {
                              "type": "text",
                              "value": "best separator width between columns"
                            }
                          ],
                          "type": "paragraph"
                        }
                      ],
                      "dt": {
                        "children": [
                          {
                            "type": "text",
                            "value": "optimal_separator_width"
                          }
                        ],
                        "type": "paragraph"
                      },
                      "type": "DefListItem"
                    }
                  ],
                  "type": "DefList"
                }
              ],
              "param": "",
              "type": "Param",
              "type_": "dict_info"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Returns a nested list, and info to columnize items"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [
      {
        "type": "text",
        "value": "::"
      },
      {
        "type": "text",
        "value": "    In [1]: l = ['aaa','b','cc','d','eeeee','f','g','h','i','j','k','l']\n    In [2]: list, info = compute_item_matrix(l, displaywidth=12)\n    In [3]: list\n    Out[3]: [['aaa', 'f', 'k'], ['b', 'g', 'l'], ['cc', 'h', None], ['d', 'i', None], ['eeeee', 'j', None]]\n    In [4]: ideal = {'num_columns': 3, 'column_widths': [5, 1, 1], 'optimal_separator_width': 2, 'max_rows': 5}\n    In [5]: all((info[k] == ideal[k] for k in ideal.keys()))\n    Out[5]: True"
      }
    ],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/dev/ipython/IPython/utils/text.py",
  "item_line": 637,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Parameters",
    "Returns",
    "Examples"
  ],
  "references": null,
  "see_also": [],
  "signature": {
    "type": "Signature",
    "value": "(items, row_first=False, empty=None, *args, **kwargs)"
  },
  "type": "DocBlob"
}