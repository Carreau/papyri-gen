{
  "aliases": [
    "IPython.embed_kernel"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "If you don't want the kernel to initialize the namespace from the scope of the surrounding function, and/or you want to load full IPython configuration, you probably want "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "module",
              "reference": {
                "kind": "api",
                "module": "IPython",
                "path": "IPython:start_kernel",
                "type": "RefInfo",
                "version": "*"
              },
              "type": "Link",
              "value": "IPython.start_kernel()"
            },
            {
              "type": "text",
              "value": " instead."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The module to load into IPython globals (default: caller)"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "module",
              "type": "Param",
              "type_": "types.ModuleType, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The namespace to load into IPython user namespace (default: caller)"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "local_ns",
              "type": "Param",
              "type_": "dict, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Further keyword args are relayed to the IPKernelApp constructor, such as "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "config"
                    },
                    {
                      "type": "text",
                      "value": ", a traitlets "
                    },
                    {
                      "type": "inlineCode",
                      "value": "Config"
                    },
                    {
                      "type": "text",
                      "value": " object (see "
                    },
                    {
                      "type": "inlineCode",
                      "value": "configure_start_ipython"
                    },
                    {
                      "type": "text",
                      "value": "), allowing configuration of the kernel (see "
                    },
                    {
                      "type": "inlineCode",
                      "value": "kernel_options"
                    },
                    {
                      "type": "text",
                      "value": ").  Will only have an effect on the first embed_kernel call for a given process."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "**kwargs",
              "type": "Param",
              "type_": "various, optional"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Embed and start an IPython kernel in a given scope."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/dev/ipython/IPython/__init__.py",
  "item_line": 72,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters"
  ],
  "references": null,
  "see_also": [],
  "signature": {
    "type": "Signature",
    "value": "(module=None, local_ns=None, **kwargs)"
  },
  "type": "DocBlob"
}