{
  "aliases": [],
  "arbitrary": [
    {
      "children": [
        {
          "data": {
            "placeholder": "target",
            "value": ".. _events:"
          },
          "type": "Unimplemented"
        },
        {
          "data": {
            "placeholder": "target",
            "value": ".. _callbacks:"
          },
          "type": "Unimplemented"
        }
      ],
      "title": null
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Extension code can register callbacks functions which will be called on specific events within the IPython code. You can see the current list of available callbacks, and the parameters that will be passed with each, in the callback prototype functions defined in "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "IPython.core.events"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": "."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "To register callbacks, use "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "IPython.core.events.EventManager.register"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ". For example::      "
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": "class VarWatcher(object):\n    def __init__(self, ip):\n        self.shell = ip\n        self.last_x = None\n\n    def pre_execute(self):\n        self.last_x = self.shell.user_ns.get('x', None)\n\n    def pre_run_cell(self, info):\n        print('info.raw_cell =', info.raw_cell)\n        print('info.store_history =', info.store_history)\n        print('info.silent =', info.silent)\n        print('info.shell_futures =', info.shell_futures)\n        print('info.cell_id =', info.cell_id)\n        print(dir(info))\n\n    def post_execute(self):\n        if self.shell.user_ns.get('x', None) != self.last_x:\n            print(\"x changed!\")\n\n    def post_run_cell(self, result):\n        print('result.execution_count = ', result.execution_count)\n        print('result.error_before_exec = ', result.error_before_exec)\n        print('result.error_in_exec = ', result.error_in_exec)\n        print('result.info = ', result.info)\n        print('result.result = ', result.result)\n\ndef load_ipython_extension(ip):\n    vw = VarWatcher(ip)\n    ip.events.register('pre_execute', vw.pre_execute)\n    ip.events.register('pre_run_cell', vw.pre_run_cell)\n    ip.events.register('post_execute', vw.post_execute)\n    ip.events.register('post_run_cell', vw.post_run_cell)"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "children": [
                    {
                      "data": {
                        "value": "Since IPython 8.3 and ipykernel 6.12.1, the "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "info"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " objects in the callback now have a the "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "cell_id"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " that will be set to the value sent by the frontened, when those send it."
                      },
                      "type": "Words"
                    }
                  ]
                },
                "type": "Paragraph"
              }
            ],
            "kind": "versionadded",
            "title": "8.3"
          },
          "type": "Admonition"
        }
      ],
      "title": "IPython Events"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "These are the events IPython will emit. Callbacks will be passed no arguments, unless otherwise specified."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "Events"
    },
    {
      "children": [
        {
          "data": {
            "argument": "python",
            "content": "def shell_initialized(ipython):\n    ...",
            "name": "code-block",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "This event is triggered only once, at the end of setting up IPython. Extensions registered to load by default as part of configuration can use this to execute code to finalize setup. Callbacks will be passed the InteractiveShell instance."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "shell_initialized"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": [
                    "pre_run_cell"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " fires prior to interactive execution (e.g. a cell in a notebook). It can be used to note the state prior to execution, and keep track of changes. An object containing information used for the code execution is provided as an argument."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "pre_run_cell"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": [
                    "pre_execute"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " is like "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "pre_run_cell"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", but is triggered prior to "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "any"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": " execution. Sometimes code can be executed by libraries, etc. which skipping the history/display mechanisms, in which cases "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "pre_run_cell"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " will not fire."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "pre_execute"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": [
                    "post_run_cell"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " runs after interactive execution (e.g. a cell in a notebook). It can be used to cleanup or notify or perform operations on any side effects produced during execution. For instance, the inline matplotlib backend uses this event to display any figures created but not explicitly displayed during the course of the cell. The object which will be returned as the execution result is provided as an argument."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "post_run_cell"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "The same as "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "pre_execute"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "post_execute"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " is like "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "post_run_cell"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", but fires for "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "all"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": " executions, not just interactive ones."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "argument": "",
            "content": "Module :mod:`IPython.core.hooks`\n  The older 'hooks' system allows end users to customise some parts of\n  IPython's behaviour.\n\n:doc:`inputtransforms`\n  By registering input transformers that don't change code, you can monitor\n  what is being executed.",
            "name": "seealso",
            "options": []
          },
          "type": "BlockDirective"
        }
      ],
      "title": "post_execute"
    }
  ],
  "content": {},
  "example_section_data": {
    "children": [],
    "title": null
  },
  "item_file": null,
  "item_line": null,
  "item_type": null,
  "ordered_sections": [],
  "references": null,
  "see_also": [],
  "signature": {
    "value": null
  }
}