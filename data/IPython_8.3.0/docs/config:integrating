{
  "_content": {},
  "aliases": [],
  "arbitrary": [
    {
      "children": [
        {
          "data": {
            "placeholder": "target",
            "value": ".. _integrating:"
          },
          "type": "Unimplemented"
        }
      ],
      "title": null
    },
    {
      "children": [],
      "title": "Integrating your objects with IPython"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "To change the attributes displayed by tab-completing your object, define a "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "__dir__(self)"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " method for it. For more details, see the documentation of the built-in "
                },
                "type": "Words"
              },
              {
                "data": {
                  "target": "http://docs.python.org/library/functions.html#dir",
                  "value": "dir() function"
                },
                "type": "ExternalLink"
              },
              {
                "data": {
                  "value": "."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "You can also customise key completions for your objects, e.g. pressing tab after "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "obj[\"a"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ". To do so, define a method "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "_ipython_key_completions_()"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", which returns a list of objects which are possible keys in a subscript expression "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "obj[key]"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": "."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "children": [
                    {
                      "data": {
                        "value": "Custom key completions"
                      },
                      "type": "Words"
                    }
                  ]
                },
                "type": "Paragraph"
              }
            ],
            "kind": "versionadded",
            "title": "5.0"
          },
          "type": "Admonition"
        },
        {
          "data": {
            "placeholder": "target",
            "value": ".. _integrating_rich_display:"
          },
          "type": "Unimplemented"
        }
      ],
      "title": "Tab completion"
    },
    {
      "children": [],
      "title": "Rich display"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "IPython can display richer representations of objects. To do this, you can define "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "_ipython_display_()"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", or any of a number of  "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "_repr_*_()"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " methods.  Note that these are surrounded by single, not double underscores."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "argument": "Supported ``_repr_*_`` methods",
            "content": "* - Format\n  - REPL\n  - Notebook\n  - Qt Console\n* - ``_repr_pretty_``\n  - yes\n  - yes\n  - yes\n* - ``_repr_svg_``\n  - no\n  - yes\n  - yes\n* - ``_repr_png_``\n  - no\n  - yes\n  - yes\n* - ``_repr_jpeg_``\n  - no\n  - yes\n  - yes\n* - ``_repr_html_``\n  - no\n  - yes\n  - no\n* - ``_repr_javascript_``\n  - no\n  - yes\n  - no\n* - ``_repr_markdown_``\n  - no\n  - yes\n  - no\n* - ``_repr_latex_``\n  - no\n  - yes\n  - no\n* - ``_repr_mimebundle_``\n  - no\n  - ?\n  - ?",
            "name": "list-table",
            "options": [
              [
                "widths",
                "20 15 15 15"
              ],
              [
                "header-rows",
                "1"
              ]
            ]
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "If the methods don't exist, or return "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "None"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", the standard "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "repr()"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " is used."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "For example::      "
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": "class Shout(object):\n    def __init__(self, text):\n        self.text = text\n    \n    def _repr_html_(self):\n        return \"<h1>\" + self.text + \"</h1>\""
          },
          "type": "BlockVerbatim"
        }
      ],
      "title": "Custom methods"
    },
    {
      "children": [],
      "title": "Special methods"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "To customize how your object is pretty-printed, add a "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "_repr_pretty_"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " method to the class.  The method should accept a pretty printer, and a boolean that indicates whether the printer detected a cycle. The method should act on the printer to produce your customized pretty output. Here is an example::      "
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": "class MyObject(object):\n\n    def _repr_pretty_(self, p, cycle):\n        if cycle:\n            p.text('MyObject(...)')\n        else:\n            p.text('MyObject[...]')"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "For details on how to use the pretty printer, see "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "IPython.lib.pretty"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": "."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "Pretty printing"
    },
    {
      "children": [
        {
          "data": {
            "argument": "MyObject",
            "content": ".. method:: _repr_mimebundle_(include=None, exclude=None)\n\n  Should return a dictionary of multiple formats, keyed by mimetype, or a tuple\n  of two dictionaries: *data, metadata* (see :ref:`Metadata`).\n  If this returns something, other ``_repr_*_`` methods are ignored.\n  The method should take keyword arguments ``include`` and ``exclude``, though \n  it is not required to respect them.\n\n.. method:: _ipython_display_()\n\n   Displays the object as a side effect; the return value is ignored. If this\n   is defined, all other display methods are ignored.\n   This method is ignored in the REPL.",
            "name": "class",
            "options": []
          },
          "type": "BlockDirective"
        }
      ],
      "title": "More powerful methods"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "We often want to provide frontends with guidance on how to display the data. To support this, "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "_repr_*_()"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " methods (except "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "_repr_pretty_"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": "?) can also return a "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "(data, metadata)"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " tuple where "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "metadata"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " is a dictionary containing arbitrary key-value pairs for the frontend to interpret. An example use case is "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "_repr_jpeg_()"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", which can be set to return a jpeg image and a "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "{'height': 400, 'width': 600}"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " dictionary to inform the frontend how to size the image."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "Metadata"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "The user can also register formatters for types without modifying the class::      "
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": "from bar.baz import Foo\n\ndef foo_html(obj):\n    return '<marquee>Foo object %s</marquee>' % obj.name\n\nhtml_formatter = get_ipython().display_formatter.formatters['text/html']\nhtml_formatter.for_type(Foo, foo_html)\n\n# Or register a type without importing it - this does the same as above:\nhtml_formatter.for_type_by_name('bar.baz', 'Foo', foo_html)"
          },
          "type": "BlockVerbatim"
        }
      ],
      "title": "Formatters for third-party types"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Rarely, you might want to display a custom traceback when reporting an exception. To do this, define the custom traceback using "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "_render_traceback_(self)"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " method which returns a list of strings, one string for each line of the traceback. For example, the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "ipyparallel\n<https://ipyparallel.readthedocs.io/>"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " a parallel computing framework for IPython, does this to display errors from multiple engines."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Please be conservative in using this feature; by replacing the default traceback you may hide important information from the user."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "Custom exception tracebacks"
    }
  ],
  "example_section_data": {
    "children": [],
    "title": null
  },
  "item_file": null,
  "item_line": null,
  "item_type": null,
  "ordered_sections": [],
  "references": null,
  "see_also": [],
  "signature": {
    "value": null
  }
}