{
  "aliases": [],
  "arbitrary": [
    {
      "children": [
        {
          "data": {
            "placeholder": "target",
            "value": ".. _overview:"
          },
          "type": "Unimplemented"
        }
      ],
      "title": null
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "One of Python's most useful features is its interactive interpreter. It allows for very fast testing of ideas without the overhead of creating test files as is typical in most programming languages. However, the interpreter supplied with the standard Python distribution is somewhat limited for extended interactive use."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "The goal of IPython is to create a comprehensive environment for interactive and exploratory computing.  To support this goal, IPython has three main components:"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "An enhanced interactive Python shell."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "A decoupled "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "two-process communication model <ipythonzmq>"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": ", which   allows for multiple clients to connect to a computation kernel, most notably   the web-based notebook provided with "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "target": "https://jupyter.org",
                            "value": "Jupyter"
                          },
                          "type": "ExternalLink"
                        },
                        {
                          "data": {
                            "value": "."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "An architecture for interactive parallel computing now part of the   "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "exists": true,
                            "kind": "module",
                            "reference": {
                              "kind": "api",
                              "module": "ipyparallel",
                              "path": "ipyparallel",
                              "version": "*"
                            },
                            "value": "ipyparallel"
                          },
                          "type": "Link"
                        },
                        {
                          "data": {
                            "value": " package."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              }
            ]
          },
          "type": "BulletList"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "All of IPython is open source (released under the revised BSD license)."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "Overview"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "IPython's interactive shell ("
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "ipython"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": "), has the following goals, amongst others:"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Provide an interactive shell superior to Python's default. IPython    has many features for tab-completion, object introspection, system shell    access, command history retrieval across sessions, and its own special    command system for adding functionality when working interactively. It    tries to be a very efficient environment both for Python code development    and for exploration of problems using Python objects (in situations like    data analysis)."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Serve as an embeddable, ready to use interpreter for your own    programs. An interactive IPython shell can be started with a single call    from inside another program, providing access to the current namespace.    This can be very useful both for debugging purposes and for situations    where a blend of batch-processing and interactive exploration are needed."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Offer a flexible framework which can be used as the base    environment for working with other systems, with Python as the underlying    bridge language. Specifically scientific environments like Mathematica,    IDL and Matlab inspired its design, but similar ideas can be    useful in many fields."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Allow interactive testing of threaded graphical toolkits. IPython    has support for interactive, non-blocking control of GTK, Qt, WX, GLUT, and    OS X applications via special threading flags. The normal Python    shell can only do this for Tkinter applications."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              }
            ]
          },
          "type": "EnumeratedList"
        }
      ],
      "title": "Enhanced interactive Python shell"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Dynamic object introspection. One can access docstrings, function   definition prototypes, source code, source files and other details   of any object accessible to the interpreter with a single   keystroke ("
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "?"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": ", and using "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "??"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " provides additional detail)."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Searching through modules and namespaces with "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "*"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " wildcards, both   when using the "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "?"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " system and via the "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "%psearch"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " command."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Completion in the local namespace, by typing "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "TAB"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " at the prompt.   This works for keywords, modules, methods, variables and files in the   current directory. This is supported via the "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "prompt_toolkit"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " library.   Custom completers can be implemented easily for different purposes   (system commands, magic arguments etc.)"
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Numbered input/output prompts with command history (persistent   across sessions and tied to each profile), full searching in this   history and caching of all input and output."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "User-extensible 'magic' commands. A set of commands prefixed with   "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "%"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": "  or "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "%%"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " is available for controlling IPython itself and provides   directory control, namespace information and many aliases to   common system shell commands."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Alias facility for defining your own system aliases."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Complete system shell access. Lines starting with "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "!"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " are passed   directly to the system shell, and using "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "!!"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " or "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "var = !cmd"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": "    captures shell output into python variables for further use."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "The ability to expand python variables when calling the system shell. In a   shell command, any python variable prefixed with "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "$"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " is expanded. A   double "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "$$"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " allows passing a literal "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "$"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " to the shell (for access   to shell and environment variables like "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "domain": null,
                            "role": "envvar",
                            "value": "PATH"
                          },
                          "type": "Directive"
                        },
                        {
                          "data": {
                            "value": ")."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Filesystem navigation, via a magic "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "%cd"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " command, along with a   persistent bookmark system (using "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "%bookmark"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": ") for fast access to   frequently visited directories."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "A lightweight persistence framework via the "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "%store"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " command, which   allows you to save arbitrary Python variables. These get restored   when you run the "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "%store -r"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " command."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Automatic indentation and highlighting of code as you type (through the   "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "exists": true,
                            "kind": "module",
                            "reference": {
                              "kind": "api",
                              "module": "prompt_toolkit",
                              "path": "prompt_toolkit",
                              "version": "*"
                            },
                            "value": "prompt_toolkit"
                          },
                          "type": "Link"
                        },
                        {
                          "data": {
                            "value": " library)."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Macro system for quickly re-executing multiple lines of previous   input with a single name via the "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "%macro"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " command. Macros can be   stored persistently via "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "%store"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " and edited via "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "%edit"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": "."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Session logging (you can then later use these logs as code in your   programs). Logs can optionally timestamp all input, and also store   session output (marked as comments, so the log remains valid   Python source code)."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Session restoring: logs can be replayed to restore a previous   session to the state where you left it."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Verbose and colored exception traceback printouts. Easier to parse   visually, and in verbose mode they produce a lot of useful   debugging information (basically a terminal version of the cgitb   module)."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Auto-parentheses via the "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "%autocall"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " command: callable objects can be   executed without parentheses: "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "sin 3"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " is automatically converted to   "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "sin(3)"
                            ]
                          },
                          "type": "Verbatim"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Auto-quoting: using "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              ","
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": ", or "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              ";"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " as the first character forces   auto-quoting of the rest of the line: "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              ",my_function a b"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " becomes   automatically "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "my_function(\"a\",\"b\")"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": ", while "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              ";my_function a b"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": "   becomes "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "my_function(\"a b\")"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": "."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Extensible input syntax. You can define filters that pre-process   user input to simplify input in special situations. This allows   for example pasting multi-line code fragments which start with   "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              ">>>"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " or "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "..."
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " such as those from other python sessions or the   standard Python documentation."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Flexible "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "configuration system <config_overview>"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": ". It uses a   configuration file which allows permanent setting of all command-line   options, module loading, code and file execution. The system allows   recursive file inclusion, so you can have a base file with defaults and   layers which load other customizations for particular projects."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Embeddable. You can call IPython as a python shell inside your own   python programs. This can be used both for debugging code or for   providing interactive abilities to your programs with knowledge   about the local namespaces (very useful in debugging and data   analysis situations)."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Easy debugger access. You can set IPython to call up an enhanced version of   the Python debugger (pdb) every time there is an uncaught exception. This   drops you inside the code which triggered the exception with all the data   live and it is possible to navigate the stack to rapidly isolate the source   of a bug. The "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "%run"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " magic command (with the "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "-d"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " option) can run   any script under pdb's control, automatically setting initial breakpoints for   you.  This version of pdb has IPython-specific improvements, including   tab-completion and traceback coloring support. For even easier debugger   access, try "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "%debug"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " after seeing an exception."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Profiler support. You can run single statements (similar to   "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "profile.run()"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": ") or complete programs under the profiler's control.   While this is possible with standard cProfile or profile modules,   IPython wraps this functionality with magic commands (see "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "%prun"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": "   and "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "%run -p"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": ") convenient for rapid interactive work."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Simple timing information. You can use the "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "%timeit"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " command to get   the execution time of a Python statement or expression. This machinery is   intelligent enough to do more repetitions for commands that finish very   quickly in order to get a better estimate of their running time."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              }
            ]
          },
          "type": "BulletList"
        },
        {
          "data": {
            "argument": "ipython",
            "content": "In [1]: %timeit 1+1\n10000000 loops, best of 3: 25.5 ns per loop\n\nIn [2]: %timeit [math.sin(x) for x in range(5000)]\n1000 loops, best of 3: 719 \u00b5s per loop",
            "name": "sourcecode",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "value": ".."
          },
          "type": "Comment"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "children": [
                    {
                      "data": {
                        "value": "To get the timing information for more than one expression, use the   "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "%%timeit"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " cell magic command."
                      },
                      "type": "Words"
                    }
                  ]
                },
                "type": "Paragraph"
              }
            ]
          },
          "type": "BlockQuote"
        },
        {
          "data": {
            "children": [
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Doctest support. The special "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "%doctest_mode"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " command toggles a mode   to use doctest-compatible prompts, so you can use IPython sessions as   doctest code. By default, IPython also allows you to paste existing   doctests, and strips out the leading "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              ">>>"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " and "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "..."
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " prompts in   them."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              }
            ]
          },
          "type": "BulletList"
        },
        {
          "data": {
            "placeholder": "target",
            "value": ".. _ipythonzmq:"
          },
          "type": "Unimplemented"
        }
      ],
      "title": "Main features of the interactive shell"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "IPython has abstracted and extended the notion of a traditional "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "Read-Evaluate-Print Loop"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": " (REPL) environment by decoupling the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "evaluation"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": " into its own process. We call this process a "
                },
                "type": "Words"
              },
              {
                "data": {
                  "content": {
                    "value": "kernel"
                  }
                },
                "type": "Strong"
              },
              {
                "data": {
                  "value": ": it receives execution instructions from clients and communicates the results back to them."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "This decoupling allows us to have several clients connected to the same kernel, and even allows clients and kernels to live on different machines. With the exclusion of the traditional single process terminal-based IPython (what you start if you run "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "ipython"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " without any subcommands), all other IPython machinery uses this two-process model. Most of this is now part of the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "Jupyter"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " project, which includes "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "jupyter console"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ",  "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "jupyter\nqtconsole"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", and "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "jupyter notebook"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": "."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "As an example, this means that when you start "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "jupyter qtconsole"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", you're really starting two processes, a kernel and a Qt-based client which can send commands to and receive results from that kernel. If there is already a kernel running that you want to connect to, you can pass the  "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "--existing"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " flag which will skip initiating a new kernel and connect to the most recent kernel, instead. To connect to a specific kernel once you have several kernels running, use the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "%connect_info"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " magic to get the unique connection file, which will be something like "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "--existing kernel-19732.json"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " but with different numbers which correspond to the Process ID of the kernel."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "You can read more about using "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "jupyter qtconsole\n<https://jupyter.org/qtconsole/>"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": ", and "
                },
                "type": "Words"
              },
              {
                "data": {
                  "target": "https://jupyter-notebook.readthedocs.io/en/latest/",
                  "value": "jupyter notebook"
                },
                "type": "ExternalLink"
              },
              {
                "data": {
                  "value": ". There is also a "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "message spec <messaging>"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " which documents the protocol for communication between kernels and clients."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "argument": "",
            "content": "`Frontend/Kernel Model`_ example notebook",
            "name": "seealso",
            "options": []
          },
          "type": "BlockDirective"
        }
      ],
      "title": "Decoupled two-process model"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "This functionality is optional and now part of the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "ipyparallel\n<https://ipyparallel.readthedocs.io/>"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " project."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "Interactive parallel computing"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Version 7.0+ supports Python 3.4 and higher. Versions 6.x support Python 3.3 and higher. Versions 2.0 to 5.x work with Python 2.7.x releases and Python 3.3 and higher. Version 1.0 additionally worked with Python 2.6 and 3.2. Version 0.12 was the first version to fully support Python 3."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "IPython is known to work on the following operating systems:"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "children": [
                    {
                      "children": [
                        {
                          "data": {
                            "children": [
                              {
                                "data": {
                                  "value": "Linux"
                                },
                                "type": "Words"
                              }
                            ]
                          },
                          "type": "Paragraph"
                        }
                      ]
                    },
                    {
                      "children": [
                        {
                          "data": {
                            "children": [
                              {
                                "data": {
                                  "value": "Most other Unix-like OSs (AIX, Solaris, BSD, etc.)"
                                },
                                "type": "Words"
                              }
                            ]
                          },
                          "type": "Paragraph"
                        }
                      ]
                    },
                    {
                      "children": [
                        {
                          "data": {
                            "children": [
                              {
                                "data": {
                                  "value": "Mac OS X"
                                },
                                "type": "Words"
                              }
                            ]
                          },
                          "type": "Paragraph"
                        }
                      ]
                    },
                    {
                      "children": [
                        {
                          "data": {
                            "children": [
                              {
                                "data": {
                                  "value": "Windows (CygWin, XP, Vista, etc.)"
                                },
                                "type": "Words"
                              }
                            ]
                          },
                          "type": "Paragraph"
                        }
                      ]
                    }
                  ]
                },
                "type": "BulletList"
              }
            ]
          },
          "type": "BlockQuote"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "See "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "here <install_index>"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " for instructions on how to install IPython."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "argument": "links.txt",
            "content": "",
            "name": "include",
            "options": []
          },
          "type": "BlockDirective"
        }
      ],
      "title": "Portability and Python requirements"
    }
  ],
  "content": {},
  "example_section_data": {
    "children": [],
    "title": null
  },
  "item_file": null,
  "item_line": null,
  "item_type": null,
  "ordered_sections": [],
  "references": null,
  "see_also": [],
  "signature": {
    "value": null
  }
}