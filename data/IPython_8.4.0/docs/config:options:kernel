{
  "aliases": [],
  "arbitrary": [
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "These options can be used in "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "ipython_kernel_config.py"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ". The kernel also respects any options in "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "ipython_config.py"
                },
                "type": "Directive"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "argument": "ConnectionFileMixin.connection_file",
            "content": "JSON file in which to store connection info [default: kernel-<pid>.json]\n\nThis file will contain the IP, ports, and authentication key needed to connect\nclients to this kernel. By default, this file will be created in the security dir\nof the current profile, but can be specified by absolute path.\n\n:trait type: Unicode",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "ConnectionFileMixin.control_port",
            "content": "set the control (ROUTER) port [default: random]\n\n:trait type: Int\n:default: ``0``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "ConnectionFileMixin.hb_port",
            "content": "set the heartbeat port [default: random]\n\n:trait type: Int\n:default: ``0``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "ConnectionFileMixin.iopub_port",
            "content": "set the iopub (PUB) port [default: random]\n\n:trait type: Int\n:default: ``0``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "ConnectionFileMixin.ip",
            "content": "Set the kernel's IP address [default localhost].\nIf the IP address is something other than localhost, then\nConsoles on other machines will be able to connect\nto the Kernel, so be careful!\n\n:trait type: Unicode",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "ConnectionFileMixin.shell_port",
            "content": "set the shell (ROUTER) port [default: random]\n\n:trait type: Int\n:default: ``0``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "ConnectionFileMixin.stdin_port",
            "content": "set the stdin (ROUTER) port [default: random]\n\n:trait type: Int\n:default: ``0``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "ConnectionFileMixin.transport",
            "content": "No description\n\n:options: ``'tcp'``, ``'ipc'``\n:default: ``'tcp'``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "InteractiveShellApp.code_to_run",
            "content": "Execute the given command string.\n\n:trait type: Unicode\n:CLI option: ``-c``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "InteractiveShellApp.exec_PYTHONSTARTUP",
            "content": "Run the file referenced by the PYTHONSTARTUP environment\nvariable at IPython startup.\n\n:trait type: Bool\n:default: ``True``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "InteractiveShellApp.exec_files",
            "content": "List of files to run at IPython startup.\n\n:trait type: List",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "InteractiveShellApp.exec_lines",
            "content": "lines of code to run at IPython startup.\n\n:trait type: List",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "InteractiveShellApp.extensions",
            "content": "A list of dotted module names of IPython extensions to load.\n\n:trait type: List",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "InteractiveShellApp.extra_extensions",
            "content": "Dotted module name(s) of one or more IPython extensions to load.\n\nFor specifying extra extensions to load on the command-line.\n\n.. versionadded:: 7.10\n\n:trait type: List\n:CLI option: ``--ext``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "InteractiveShellApp.file_to_run",
            "content": "A file to be run\n\n:trait type: Unicode",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "InteractiveShellApp.gui",
            "content": "Enable GUI event loop integration with any of ('asyncio', 'glut', 'gtk', 'gtk2', 'gtk3', 'gtk4', 'osx', 'pyglet', 'qt', 'qt4', 'qt5', 'qt6', 'tk', 'wx', 'gtk2', 'qt4').\n\n:options: ``'asyncio'``, ``'glut'``, ``'gtk'``, ``'gtk2'``, ``'gtk3'``, ``'gtk4'``, ``'osx'``, ``'pyglet'``, ``'qt'``, ``'qt4'``, ``'qt5'``, ``'qt6'``, ``'tk'``, ``'wx'``, ``'gtk2'``, ``'qt4'``\n:CLI option: ``--gui``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "InteractiveShellApp.hide_initial_ns",
            "content": "Should variables loaded at startup (by startup files, exec_lines, etc.)\nbe hidden from tools like %who?\n\n:trait type: Bool\n:default: ``True``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "InteractiveShellApp.ignore_cwd",
            "content": "If True, IPython will not add the current working directory to sys.path.\nWhen False, the current working directory is added to sys.path, allowing imports\nof modules defined in the current directory.\n\n:trait type: Bool\n:default: ``False``\n:CLI option: ``--ignore-cwd``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "InteractiveShellApp.matplotlib",
            "content": "Configure matplotlib for interactive use with\nthe default matplotlib backend.\n\n:options: ``'auto'``, ``'agg'``, ``'gtk'``, ``'gtk3'``, ``'gtk4'``, ``'inline'``, ``'ipympl'``, ``'nbagg'``, ``'notebook'``, ``'osx'``, ``'pdf'``, ``'ps'``, ``'qt'``, ``'qt4'``, ``'qt5'``, ``'qt6'``, ``'svg'``, ``'tk'``, ``'widget'``, ``'wx'``\n:CLI option: ``--matplotlib``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "InteractiveShellApp.module_to_run",
            "content": "Run the module as a script.\n\n:trait type: Unicode\n:CLI option: ``-m``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "InteractiveShellApp.pylab",
            "content": "Pre-load matplotlib and numpy for interactive use,\nselecting a particular matplotlib backend and loop integration.\n\n:options: ``'auto'``, ``'agg'``, ``'gtk'``, ``'gtk3'``, ``'gtk4'``, ``'inline'``, ``'ipympl'``, ``'nbagg'``, ``'notebook'``, ``'osx'``, ``'pdf'``, ``'ps'``, ``'qt'``, ``'qt4'``, ``'qt5'``, ``'qt6'``, ``'svg'``, ``'tk'``, ``'widget'``, ``'wx'``\n:CLI option: ``--pylab``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "InteractiveShellApp.pylab_import_all",
            "content": "If true, IPython will populate the user namespace with numpy, pylab, etc.\nand an ``import *`` is done from numpy and pylab, when using pylab mode.\n\nWhen False, pylab mode should not import any names into the user namespace.\n\n:trait type: Bool\n:default: ``True``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "InteractiveShellApp.reraise_ipython_extension_failures",
            "content": "Reraise exceptions encountered loading IPython extensions?\n\n:trait type: Bool\n:default: ``False``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "Application.log_datefmt",
            "content": "The date format used by logging formatters for %(asctime)s\n\n:trait type: Unicode\n:default: ``'%Y-%m-%d %H:%M:%S'``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "Application.log_format",
            "content": "The Logging format template\n\n:trait type: Unicode\n:default: ``'[%(name)s]%(highlevel)s %(message)s'``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "Application.log_level",
            "content": "Set the log level by value or name.\n\n:options: ``0``, ``10``, ``20``, ``30``, ``40``, ``50``, ``'DEBUG'``, ``'INFO'``, ``'WARN'``, ``'ERROR'``, ``'CRITICAL'``\n:default: ``30``\n:CLI option: ``--log-level``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "Application.show_config",
            "content": "Instead of starting the Application, dump configuration to stdout\n\n:trait type: Bool\n:default: ``False``\n:CLI option: ``--show-config``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "Application.show_config_json",
            "content": "Instead of starting the Application, dump configuration to stdout (as JSON)\n\n:trait type: Bool\n:default: ``False``\n:CLI option: ``--show-config-json``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "BaseIPythonApplication.add_ipython_dir_to_sys_path",
            "content": "No description\n\n:trait type: Bool\n:default: ``False``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "BaseIPythonApplication.auto_create",
            "content": "Whether to create profile dir if it doesn't exist\n\n:trait type: Bool\n:default: ``False``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "BaseIPythonApplication.copy_config_files",
            "content": "Whether to install the default config files into the profile dir.\nIf a new profile is being created, and IPython contains config files for that\nprofile, then they will be staged into the new directory.  Otherwise,\ndefault config files will be automatically generated.\n\n:trait type: Bool\n:default: ``False``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "BaseIPythonApplication.extra_config_file",
            "content": "Path to an extra config file to load.\n\nIf specified, load this config file in addition to any other IPython config.\n\n:trait type: Unicode\n:CLI option: ``--config``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "BaseIPythonApplication.ipython_dir",
            "content": "The name of the IPython directory. This directory is used for logging\nconfiguration (through profiles), history storage, etc. The default\nis usually $HOME/.ipython. This option can also be specified through\nthe environment variable IPYTHONDIR.\n\n:trait type: Unicode\n:CLI option: ``--ipython-dir``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "BaseIPythonApplication.log_datefmt",
            "content": "The date format used by logging formatters for %(asctime)s\n\n:trait type: Unicode\n:default: ``'%Y-%m-%d %H:%M:%S'``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "BaseIPythonApplication.log_format",
            "content": "The Logging format template\n\n:trait type: Unicode\n:default: ``'[%(name)s]%(highlevel)s %(message)s'``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "BaseIPythonApplication.log_level",
            "content": "Set the log level by value or name.\n\n:options: ``0``, ``10``, ``20``, ``30``, ``40``, ``50``, ``'DEBUG'``, ``'INFO'``, ``'WARN'``, ``'ERROR'``, ``'CRITICAL'``\n:default: ``30``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "BaseIPythonApplication.overwrite",
            "content": "Whether to overwrite existing config files when copying\n\n:trait type: Bool\n:default: ``False``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "BaseIPythonApplication.profile",
            "content": "The IPython profile to use.\n\n:trait type: Unicode\n:default: ``'default'``\n:CLI option: ``--profile``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "BaseIPythonApplication.show_config",
            "content": "Instead of starting the Application, dump configuration to stdout\n\n:trait type: Bool\n:default: ``False``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "BaseIPythonApplication.show_config_json",
            "content": "Instead of starting the Application, dump configuration to stdout (as JSON)\n\n:trait type: Bool\n:default: ``False``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "BaseIPythonApplication.verbose_crash",
            "content": "Create a massive crash report when IPython encounters what may be an\ninternal error.  The default is to append a short message to the\nusual traceback\n\n:trait type: Bool\n:default: ``False``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "IPKernelApp.add_ipython_dir_to_sys_path",
            "content": "No description\n\n:trait type: Bool\n:default: ``False``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "IPKernelApp.auto_create",
            "content": "Whether to create profile dir if it doesn't exist\n\n:trait type: Bool\n:default: ``False``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "IPKernelApp.capture_fd_output",
            "content": "Attempt to capture and forward low-level output, e.g. produced by Extension libraries.\n\n:trait type: Bool\n:default: ``True``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "IPKernelApp.code_to_run",
            "content": "Execute the given command string.\n\n:trait type: Unicode",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "IPKernelApp.connection_file",
            "content": "JSON file in which to store connection info [default: kernel-<pid>.json]\n\nThis file will contain the IP, ports, and authentication key needed to connect\nclients to this kernel. By default, this file will be created in the security dir\nof the current profile, but can be specified by absolute path.\n\n:trait type: Unicode\n:CLI option: ``-f``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "IPKernelApp.control_port",
            "content": "set the control (ROUTER) port [default: random]\n\n:trait type: Int\n:default: ``0``\n:CLI option: ``--control``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "IPKernelApp.copy_config_files",
            "content": "Whether to install the default config files into the profile dir.\nIf a new profile is being created, and IPython contains config files for that\nprofile, then they will be staged into the new directory.  Otherwise,\ndefault config files will be automatically generated.\n\n:trait type: Bool\n:default: ``False``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "IPKernelApp.displayhook_class",
            "content": "The importstring for the DisplayHook factory\n\n:trait type: DottedObjectName\n:default: ``'ipykernel.displayhook.ZMQDisplayHook'``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "IPKernelApp.exec_PYTHONSTARTUP",
            "content": "Run the file referenced by the PYTHONSTARTUP environment\nvariable at IPython startup.\n\n:trait type: Bool\n:default: ``True``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "IPKernelApp.exec_files",
            "content": "List of files to run at IPython startup.\n\n:trait type: List",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "IPKernelApp.exec_lines",
            "content": "lines of code to run at IPython startup.\n\n:trait type: List",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "IPKernelApp.extensions",
            "content": "A list of dotted module names of IPython extensions to load.\n\n:trait type: List",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "IPKernelApp.extra_config_file",
            "content": "Path to an extra config file to load.\n\nIf specified, load this config file in addition to any other IPython config.\n\n:trait type: Unicode",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "IPKernelApp.extra_extensions",
            "content": "Dotted module name(s) of one or more IPython extensions to load.\n\nFor specifying extra extensions to load on the command-line.\n\n.. versionadded:: 7.10\n\n:trait type: List",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "IPKernelApp.file_to_run",
            "content": "A file to be run\n\n:trait type: Unicode",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "IPKernelApp.gui",
            "content": "Enable GUI event loop integration with any of ('asyncio', 'glut', 'gtk', 'gtk2', 'gtk3', 'gtk4', 'osx', 'pyglet', 'qt', 'qt4', 'qt5', 'qt6', 'tk', 'wx', 'gtk2', 'qt4').\n\n:options: ``'asyncio'``, ``'glut'``, ``'gtk'``, ``'gtk2'``, ``'gtk3'``, ``'gtk4'``, ``'osx'``, ``'pyglet'``, ``'qt'``, ``'qt4'``, ``'qt5'``, ``'qt6'``, ``'tk'``, ``'wx'``, ``'gtk2'``, ``'qt4'``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "IPKernelApp.hb_port",
            "content": "set the heartbeat port [default: random]\n\n:trait type: Int\n:default: ``0``\n:CLI option: ``--hb``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "IPKernelApp.hide_initial_ns",
            "content": "Should variables loaded at startup (by startup files, exec_lines, etc.)\nbe hidden from tools like %who?\n\n:trait type: Bool\n:default: ``True``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "IPKernelApp.ignore_cwd",
            "content": "If True, IPython will not add the current working directory to sys.path.\nWhen False, the current working directory is added to sys.path, allowing imports\nof modules defined in the current directory.\n\n:trait type: Bool\n:default: ``False``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "IPKernelApp.interrupt",
            "content": "ONLY USED ON WINDOWS\nInterrupt this process when the parent is signaled.\n\n:trait type: Int\n:default: ``0``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "IPKernelApp.iopub_port",
            "content": "set the iopub (PUB) port [default: random]\n\n:trait type: Int\n:default: ``0``\n:CLI option: ``--iopub``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "IPKernelApp.ip",
            "content": "Set the kernel's IP address [default localhost].\nIf the IP address is something other than localhost, then\nConsoles on other machines will be able to connect\nto the Kernel, so be careful!\n\n:trait type: Unicode\n:CLI option: ``--ip``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "IPKernelApp.ipython_dir",
            "content": "The name of the IPython directory. This directory is used for logging\nconfiguration (through profiles), history storage, etc. The default\nis usually $HOME/.ipython. This option can also be specified through\nthe environment variable IPYTHONDIR.\n\n:trait type: Unicode",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "IPKernelApp.kernel_class",
            "content": "The Kernel subclass to be used.\n\nThis should allow easy re-use of the IPKernelApp entry point\nto configure and launch kernels other than IPython's own.\n\n:trait type: Type\n:default: ``'ipykernel.ipkernel.IPythonKernel'``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "IPKernelApp.log_datefmt",
            "content": "The date format used by logging formatters for %(asctime)s\n\n:trait type: Unicode\n:default: ``'%Y-%m-%d %H:%M:%S'``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "IPKernelApp.log_format",
            "content": "The Logging format template\n\n:trait type: Unicode\n:default: ``'[%(name)s]%(highlevel)s %(message)s'``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "IPKernelApp.log_level",
            "content": "Set the log level by value or name.\n\n:options: ``0``, ``10``, ``20``, ``30``, ``40``, ``50``, ``'DEBUG'``, ``'INFO'``, ``'WARN'``, ``'ERROR'``, ``'CRITICAL'``\n:default: ``30``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "IPKernelApp.matplotlib",
            "content": "Configure matplotlib for interactive use with\nthe default matplotlib backend.\n\n:options: ``'auto'``, ``'agg'``, ``'gtk'``, ``'gtk3'``, ``'gtk4'``, ``'inline'``, ``'ipympl'``, ``'nbagg'``, ``'notebook'``, ``'osx'``, ``'pdf'``, ``'ps'``, ``'qt'``, ``'qt4'``, ``'qt5'``, ``'qt6'``, ``'svg'``, ``'tk'``, ``'widget'``, ``'wx'``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "IPKernelApp.module_to_run",
            "content": "Run the module as a script.\n\n:trait type: Unicode",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "IPKernelApp.no_stderr",
            "content": "redirect stderr to the null device\n\n:trait type: Bool\n:default: ``False``\n:CLI option: ``--no-stderr``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "IPKernelApp.no_stdout",
            "content": "redirect stdout to the null device\n\n:trait type: Bool\n:default: ``False``\n:CLI option: ``--no-stdout``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "IPKernelApp.outstream_class",
            "content": "The importstring for the OutStream factory\n\n:trait type: DottedObjectName\n:default: ``'ipykernel.iostream.OutStream'``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "IPKernelApp.overwrite",
            "content": "Whether to overwrite existing config files when copying\n\n:trait type: Bool\n:default: ``False``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "IPKernelApp.parent_handle",
            "content": "kill this process if its parent dies.  On Windows, the argument\nspecifies the HANDLE of the parent process, otherwise it is simply boolean.\n\n:trait type: Int\n:default: ``0``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "IPKernelApp.profile",
            "content": "The IPython profile to use.\n\n:trait type: Unicode\n:default: ``'default'``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "IPKernelApp.pylab",
            "content": "Pre-load matplotlib and numpy for interactive use,\nselecting a particular matplotlib backend and loop integration.\n\n:options: ``'auto'``, ``'agg'``, ``'gtk'``, ``'gtk3'``, ``'gtk4'``, ``'inline'``, ``'ipympl'``, ``'nbagg'``, ``'notebook'``, ``'osx'``, ``'pdf'``, ``'ps'``, ``'qt'``, ``'qt4'``, ``'qt5'``, ``'qt6'``, ``'svg'``, ``'tk'``, ``'widget'``, ``'wx'``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "IPKernelApp.pylab_import_all",
            "content": "If true, IPython will populate the user namespace with numpy, pylab, etc.\nand an ``import *`` is done from numpy and pylab, when using pylab mode.\n\nWhen False, pylab mode should not import any names into the user namespace.\n\n:trait type: Bool\n:default: ``True``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "IPKernelApp.quiet",
            "content": "Only send stdout/stderr to output stream\n\n:trait type: Bool\n:default: ``True``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "IPKernelApp.reraise_ipython_extension_failures",
            "content": "Reraise exceptions encountered loading IPython extensions?\n\n:trait type: Bool\n:default: ``False``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "IPKernelApp.shell_port",
            "content": "set the shell (ROUTER) port [default: random]\n\n:trait type: Int\n:default: ``0``\n:CLI option: ``--shell``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "IPKernelApp.show_config",
            "content": "Instead of starting the Application, dump configuration to stdout\n\n:trait type: Bool\n:default: ``False``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "IPKernelApp.show_config_json",
            "content": "Instead of starting the Application, dump configuration to stdout (as JSON)\n\n:trait type: Bool\n:default: ``False``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "IPKernelApp.stdin_port",
            "content": "set the stdin (ROUTER) port [default: random]\n\n:trait type: Int\n:default: ``0``\n:CLI option: ``--stdin``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "IPKernelApp.transport",
            "content": "No description\n\n:options: ``'tcp'``, ``'ipc'``\n:default: ``'tcp'``\n:CLI option: ``--transport``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "IPKernelApp.trio_loop",
            "content": "Set main event loop.\n\n:trait type: Bool\n:default: ``False``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "IPKernelApp.verbose_crash",
            "content": "Create a massive crash report when IPython encounters what may be an\ninternal error.  The default is to append a short message to the\nusual traceback\n\n:trait type: Bool\n:default: ``False``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "Kernel._darwin_app_nap",
            "content": "Whether to use appnope for compatibility with OS X App Nap.\n\nOnly affects OS X >= 10.9.\n\n:trait type: Bool\n:default: ``True``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "Kernel._execute_sleep",
            "content": "No description\n\n:trait type: Float\n:default: ``0.0005``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "Kernel._poll_interval",
            "content": "No description\n\n:trait type: Float\n:default: ``0.01``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "Kernel.debug_just_my_code",
            "content": "Set to False if you want to debug python standard and dependent libraries.\n\n:trait type: Bool\n:default: ``True``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "Kernel.stop_on_error_timeout",
            "content": "time (in seconds) to wait for messages to arrive\nwhen aborting queued requests after an error.\n\nRequests that arrive within this window after an error\nwill be cancelled.\n\nIncrease in the event of unusually slow network\ncausing significant delays,\nwhich can manifest as e.g. \"Run all\" in a notebook\naborting some, but not all, messages after an error.\n\n:trait type: Float\n:default: ``0.0``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "IPythonKernel._darwin_app_nap",
            "content": "Whether to use appnope for compatibility with OS X App Nap.\n\nOnly affects OS X >= 10.9.\n\n:trait type: Bool\n:default: ``True``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "IPythonKernel._execute_sleep",
            "content": "No description\n\n:trait type: Float\n:default: ``0.0005``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "IPythonKernel._poll_interval",
            "content": "No description\n\n:trait type: Float\n:default: ``0.01``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "IPythonKernel.debug_just_my_code",
            "content": "Set to False if you want to debug python standard and dependent libraries.\n\n:trait type: Bool\n:default: ``True``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "IPythonKernel.help_links",
            "content": "No description\n\n:trait type: List",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "IPythonKernel.stop_on_error_timeout",
            "content": "time (in seconds) to wait for messages to arrive\nwhen aborting queued requests after an error.\n\nRequests that arrive within this window after an error\nwill be cancelled.\n\nIncrease in the event of unusually slow network\ncausing significant delays,\nwhich can manifest as e.g. \"Run all\" in a notebook\naborting some, but not all, messages after an error.\n\n:trait type: Float\n:default: ``0.0``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "IPythonKernel.use_experimental_completions",
            "content": "Set this flag to False to deactivate the use of experimental IPython completion APIs.\n\n:trait type: Bool\n:default: ``True``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "InteractiveShell.ast_node_interactivity",
            "content": "'all', 'last', 'last_expr' or 'none', 'last_expr_or_assign' specifying\nwhich nodes should be run interactively (displaying output from expressions).\n\n:options: ``'all'``, ``'last'``, ``'last_expr'``, ``'none'``, ``'last_expr_or_assign'``\n:default: ``'last_expr'``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "InteractiveShell.ast_transformers",
            "content": "A list of ast.NodeTransformer subclass instances, which will be applied\nto user input before code is run.\n\n:trait type: List",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "InteractiveShell.autoawait",
            "content": "Automatically run await statement in the top level repl.\n\n:trait type: Bool\n:default: ``True``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "InteractiveShell.autocall",
            "content": "Make IPython automatically call any callable object even if you didn't\ntype explicit parentheses. For example, 'str 43' becomes 'str(43)'\nautomatically. The value can be '0' to disable the feature, '1' for\n'smart' autocall, where it is not applied if there are no more\narguments on the line, and '2' for 'full' autocall, where all callable\nobjects are automatically called (even if no arguments are present).\n\n:options: ``0``, ``1``, ``2``\n:default: ``0``\n:CLI option: ``--autocall``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "InteractiveShell.autoindent",
            "content": "Autoindent IPython code entered interactively.\n\n:trait type: Bool\n:default: ``True``\n:CLI option: ``--autoindent``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "InteractiveShell.automagic",
            "content": "Enable magic commands to be called without the leading %.\n\n:trait type: Bool\n:default: ``True``\n:CLI option: ``--automagic``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "InteractiveShell.banner1",
            "content": "The part of the banner to be printed before the profile\n\n:trait type: Unicode\n:default: ``\"Python 3.10.0 | packaged by conda-forge | (default, Oct 12 2...``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "InteractiveShell.banner2",
            "content": "The part of the banner to be printed after the profile\n\n:trait type: Unicode",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "InteractiveShell.cache_size",
            "content": "Set the size of the output cache.  The default is 1000, you can\nchange it permanently in your config file.  Setting it to 0 completely\ndisables the caching system, and the minimum value accepted is 3 (if\nyou provide a value less than 3, it is reset to 0 and a warning is\nissued).  This limit is defined because otherwise you'll spend more\ntime re-flushing a too small cache than working\n\n:trait type: Int\n:default: ``1000``\n:CLI option: ``--cache-size``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "InteractiveShell.color_info",
            "content": "Use colors for displaying information about objects. Because this\ninformation is passed through a pager (like 'less'), and some pagers\nget confused with color codes, this capability can be turned off.\n\n:trait type: Bool\n:default: ``True``\n:CLI option: ``--color-info``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "InteractiveShell.colors",
            "content": "Set the color scheme (NoColor, Neutral, Linux, or LightBG).\n\n:options: ``'Neutral'``, ``'NoColor'``, ``'LightBG'``, ``'Linux'``\n:default: ``'Neutral'``\n:CLI option: ``--colors``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "InteractiveShell.debug",
            "content": "No description\n\n:trait type: Bool\n:default: ``False``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "InteractiveShell.disable_failing_post_execute",
            "content": "Don't call post-execute functions that have failed in the past.\n\n:trait type: Bool\n:default: ``False``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "InteractiveShell.display_page",
            "content": "If True, anything that would be passed to the pager\nwill be displayed as regular output instead.\n\n:trait type: Bool\n:default: ``False``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "InteractiveShell.enable_html_pager",
            "content": "(Provisional API) enables html representation in mime bundles sent\nto pagers.\n\n:trait type: Bool\n:default: ``False``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "InteractiveShell.history_length",
            "content": "Total length of command history\n\n:trait type: Int\n:default: ``10000``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "InteractiveShell.history_load_length",
            "content": "The number of saved history entries to be loaded\ninto the history buffer at startup.\n\n:trait type: Int\n:default: ``1000``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "InteractiveShell.ipython_dir",
            "content": "No description\n\n:trait type: Unicode",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "InteractiveShell.logappend",
            "content": "Start logging to the given file in append mode.\nUse `logfile` to specify a log file to **overwrite** logs to.\n\n:trait type: Unicode\n:CLI option: ``--logappend``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "InteractiveShell.logfile",
            "content": "The name of the logfile to use.\n\n:trait type: Unicode\n:CLI option: ``--logfile``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "InteractiveShell.logstart",
            "content": "Start logging to the default log file in overwrite mode.\nUse `logappend` to specify a log file to **append** logs to.\n\n:trait type: Bool\n:default: ``False``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "InteractiveShell.loop_runner",
            "content": "Select the loop runner that will be used to execute top-level asynchronous code\n\n:trait type: Any\n:default: ``'IPython.core.interactiveshell._asyncio_runner'``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "InteractiveShell.object_info_string_level",
            "content": "No description\n\n:options: ``0``, ``1``, ``2``\n:default: ``0``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "InteractiveShell.pdb",
            "content": "Automatically call the pdb debugger after every exception.\n\n:trait type: Bool\n:default: ``False``\n:CLI option: ``--pdb``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "InteractiveShell.quiet",
            "content": "No description\n\n:trait type: Bool\n:default: ``False``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "InteractiveShell.separate_in",
            "content": "No description\n\n:trait type: SeparateUnicode\n:default: ``'\\\\n'``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "InteractiveShell.separate_out",
            "content": "No description\n\n:trait type: SeparateUnicode",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "InteractiveShell.separate_out2",
            "content": "No description\n\n:trait type: SeparateUnicode",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "InteractiveShell.show_rewritten_input",
            "content": "Show rewritten input, e.g. for autocall.\n\n:trait type: Bool\n:default: ``True``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "InteractiveShell.sphinxify_docstring",
            "content": "Enables rich html representation of docstrings. (This requires the\ndocrepr module).\n\n:trait type: Bool\n:default: ``False``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "InteractiveShell.wildcards_case_sensitive",
            "content": "No description\n\n:trait type: Bool\n:default: ``True``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "InteractiveShell.xmode",
            "content": "Switch modes for the IPython exception handlers.\n\n:options: ``'Context'``, ``'Plain'``, ``'Verbose'``, ``'Minimal'``\n:default: ``'Context'``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "ZMQInteractiveShell.ast_node_interactivity",
            "content": "'all', 'last', 'last_expr' or 'none', 'last_expr_or_assign' specifying\nwhich nodes should be run interactively (displaying output from expressions).\n\n:options: ``'all'``, ``'last'``, ``'last_expr'``, ``'none'``, ``'last_expr_or_assign'``\n:default: ``'last_expr'``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "ZMQInteractiveShell.ast_transformers",
            "content": "A list of ast.NodeTransformer subclass instances, which will be applied\nto user input before code is run.\n\n:trait type: List",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "ZMQInteractiveShell.autoawait",
            "content": "Automatically run await statement in the top level repl.\n\n:trait type: Bool\n:default: ``True``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "ZMQInteractiveShell.autocall",
            "content": "Make IPython automatically call any callable object even if you didn't\ntype explicit parentheses. For example, 'str 43' becomes 'str(43)'\nautomatically. The value can be '0' to disable the feature, '1' for\n'smart' autocall, where it is not applied if there are no more\narguments on the line, and '2' for 'full' autocall, where all callable\nobjects are automatically called (even if no arguments are present).\n\n:options: ``0``, ``1``, ``2``\n:default: ``0``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "ZMQInteractiveShell.automagic",
            "content": "Enable magic commands to be called without the leading %.\n\n:trait type: Bool\n:default: ``True``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "ZMQInteractiveShell.banner1",
            "content": "The part of the banner to be printed before the profile\n\n:trait type: Unicode\n:default: ``\"Python 3.10.0 | packaged by conda-forge | (default, Oct 12 2...``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "ZMQInteractiveShell.banner2",
            "content": "The part of the banner to be printed after the profile\n\n:trait type: Unicode",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "ZMQInteractiveShell.cache_size",
            "content": "Set the size of the output cache.  The default is 1000, you can\nchange it permanently in your config file.  Setting it to 0 completely\ndisables the caching system, and the minimum value accepted is 3 (if\nyou provide a value less than 3, it is reset to 0 and a warning is\nissued).  This limit is defined because otherwise you'll spend more\ntime re-flushing a too small cache than working\n\n:trait type: Int\n:default: ``1000``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "ZMQInteractiveShell.color_info",
            "content": "Use colors for displaying information about objects. Because this\ninformation is passed through a pager (like 'less'), and some pagers\nget confused with color codes, this capability can be turned off.\n\n:trait type: Bool\n:default: ``True``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "ZMQInteractiveShell.colors",
            "content": "Set the color scheme (NoColor, Neutral, Linux, or LightBG).\n\n:options: ``'Neutral'``, ``'NoColor'``, ``'LightBG'``, ``'Linux'``\n:default: ``'Neutral'``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "ZMQInteractiveShell.debug",
            "content": "No description\n\n:trait type: Bool\n:default: ``False``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "ZMQInteractiveShell.disable_failing_post_execute",
            "content": "Don't call post-execute functions that have failed in the past.\n\n:trait type: Bool\n:default: ``False``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "ZMQInteractiveShell.display_page",
            "content": "If True, anything that would be passed to the pager\nwill be displayed as regular output instead.\n\n:trait type: Bool\n:default: ``False``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "ZMQInteractiveShell.enable_html_pager",
            "content": "(Provisional API) enables html representation in mime bundles sent\nto pagers.\n\n:trait type: Bool\n:default: ``False``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "ZMQInteractiveShell.history_length",
            "content": "Total length of command history\n\n:trait type: Int\n:default: ``10000``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "ZMQInteractiveShell.history_load_length",
            "content": "The number of saved history entries to be loaded\ninto the history buffer at startup.\n\n:trait type: Int\n:default: ``1000``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "ZMQInteractiveShell.ipython_dir",
            "content": "No description\n\n:trait type: Unicode",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "ZMQInteractiveShell.logappend",
            "content": "Start logging to the given file in append mode.\nUse `logfile` to specify a log file to **overwrite** logs to.\n\n:trait type: Unicode",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "ZMQInteractiveShell.logfile",
            "content": "The name of the logfile to use.\n\n:trait type: Unicode",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "ZMQInteractiveShell.logstart",
            "content": "Start logging to the default log file in overwrite mode.\nUse `logappend` to specify a log file to **append** logs to.\n\n:trait type: Bool\n:default: ``False``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "ZMQInteractiveShell.loop_runner",
            "content": "Select the loop runner that will be used to execute top-level asynchronous code\n\n:trait type: Any\n:default: ``'IPython.core.interactiveshell._asyncio_runner'``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "ZMQInteractiveShell.object_info_string_level",
            "content": "No description\n\n:options: ``0``, ``1``, ``2``\n:default: ``0``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "ZMQInteractiveShell.pdb",
            "content": "Automatically call the pdb debugger after every exception.\n\n:trait type: Bool\n:default: ``False``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "ZMQInteractiveShell.quiet",
            "content": "No description\n\n:trait type: Bool\n:default: ``False``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "ZMQInteractiveShell.separate_in",
            "content": "No description\n\n:trait type: SeparateUnicode\n:default: ``'\\\\n'``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "ZMQInteractiveShell.separate_out",
            "content": "No description\n\n:trait type: SeparateUnicode",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "ZMQInteractiveShell.separate_out2",
            "content": "No description\n\n:trait type: SeparateUnicode",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "ZMQInteractiveShell.show_rewritten_input",
            "content": "Show rewritten input, e.g. for autocall.\n\n:trait type: Bool\n:default: ``True``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "ZMQInteractiveShell.sphinxify_docstring",
            "content": "Enables rich html representation of docstrings. (This requires the\ndocrepr module).\n\n:trait type: Bool\n:default: ``False``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "ZMQInteractiveShell.wildcards_case_sensitive",
            "content": "No description\n\n:trait type: Bool\n:default: ``True``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "ZMQInteractiveShell.xmode",
            "content": "Switch modes for the IPython exception handlers.\n\n:options: ``'Context'``, ``'Plain'``, ``'Verbose'``, ``'Minimal'``\n:default: ``'Context'``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "ProfileDir.location",
            "content": "Set the profile location directly. This overrides the logic used by the\n`profile` option.\n\n:trait type: Unicode\n:CLI option: ``--profile-dir``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "Session.buffer_threshold",
            "content": "Threshold (in bytes) beyond which an object's buffer should be extracted to avoid pickling.\n\n:trait type: Int\n:default: ``1024``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "Session.check_pid",
            "content": "Whether to check PID to protect against calls after fork.\n\nThis check can be disabled if fork-safety is handled elsewhere.\n\n:trait type: Bool\n:default: ``True``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "Session.copy_threshold",
            "content": "Threshold (in bytes) beyond which a buffer should be sent without copying.\n\n:trait type: Int\n:default: ``65536``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "Session.debug",
            "content": "Debug output in the Session\n\n:trait type: Bool\n:default: ``False``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "Session.digest_history_size",
            "content": "The maximum number of digests to remember.\n\nThe digest history will be culled when it exceeds this value.\n\n:trait type: Int\n:default: ``65536``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "Session.item_threshold",
            "content": "The maximum number of items for a container to be introspected for custom serialization.\nContainers larger than this are pickled outright.\n\n:trait type: Int\n:default: ``64``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "Session.key",
            "content": "execution key, for signing messages.\n\n:trait type: CBytes\n:default: ``b''``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "Session.keyfile",
            "content": "path to file containing execution key.\n\n:trait type: Unicode\n:CLI option: ``--keyfile``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "Session.metadata",
            "content": "Metadata dictionary, which serves as the default top-level metadata dict for each message.\n\n:trait type: Dict",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "Session.packer",
            "content": "The name of the packer for serializing messages.\nShould be one of 'json', 'pickle', or an import name\nfor a custom callable serializer.\n\n:trait type: DottedObjectName\n:default: ``'json'``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "Session.session",
            "content": "The UUID identifying this session.\n\n:trait type: CUnicode\n:CLI option: ``--ident``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "Session.signature_scheme",
            "content": "The digest scheme used to construct the message signatures.\nMust have the form 'hmac-HASH'.\n\n:trait type: Unicode\n:default: ``'hmac-sha256'``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "Session.unpacker",
            "content": "The name of the unpacker for unserializing messages.\nOnly used with custom functions for `packer`.\n\n:trait type: DottedObjectName\n:default: ``'json'``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "Session.username",
            "content": "Username for the Session. Default is your system username.\n\n:trait type: Unicode\n:default: ``'bussonniermatthias'``\n:CLI option: ``--user``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        }
      ],
      "level": 0,
      "target": null,
      "title": "IPython kernel options"
    }
  ],
  "content": {},
  "example_section_data": {
    "children": [],
    "level": 0,
    "target": null,
    "title": null
  },
  "item_file": null,
  "item_line": null,
  "item_type": null,
  "ordered_sections": [],
  "references": null,
  "see_also": [],
  "signature": {
    "value": null
  }
}