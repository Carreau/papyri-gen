{
  "aliases": [],
  "arbitrary": [
    {
      "children": [
        {
          "data": {
            "argument": "InteractiveShellApp.code_to_run",
            "content": "Execute the given command string.\n\n:trait type: Unicode\n:CLI option: ``-c``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "InteractiveShellApp.exec_PYTHONSTARTUP",
            "content": "Run the file referenced by the PYTHONSTARTUP environment\nvariable at IPython startup.\n\n:trait type: Bool\n:default: ``True``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "InteractiveShellApp.exec_files",
            "content": "List of files to run at IPython startup.\n\n:trait type: List",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "InteractiveShellApp.exec_lines",
            "content": "lines of code to run at IPython startup.\n\n:trait type: List",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "InteractiveShellApp.extensions",
            "content": "A list of dotted module names of IPython extensions to load.\n\n:trait type: List",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "InteractiveShellApp.extra_extensions",
            "content": "Dotted module name(s) of one or more IPython extensions to load.\n\nFor specifying extra extensions to load on the command-line.\n\n.. versionadded:: 7.10\n\n:trait type: List\n:CLI option: ``--ext``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "InteractiveShellApp.file_to_run",
            "content": "A file to be run\n\n:trait type: Unicode",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "InteractiveShellApp.gui",
            "content": "Enable GUI event loop integration with any of ('asyncio', 'glut', 'gtk', 'gtk2', 'gtk3', 'gtk4', 'osx', 'pyglet', 'qt', 'qt4', 'qt5', 'qt6', 'tk', 'wx', 'gtk2', 'qt4').\n\n:options: ``'asyncio'``, ``'glut'``, ``'gtk'``, ``'gtk2'``, ``'gtk3'``, ``'gtk4'``, ``'osx'``, ``'pyglet'``, ``'qt'``, ``'qt4'``, ``'qt5'``, ``'qt6'``, ``'tk'``, ``'wx'``, ``'gtk2'``, ``'qt4'``\n:CLI option: ``--gui``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "InteractiveShellApp.hide_initial_ns",
            "content": "Should variables loaded at startup (by startup files, exec_lines, etc.)\nbe hidden from tools like %who?\n\n:trait type: Bool\n:default: ``True``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "InteractiveShellApp.ignore_cwd",
            "content": "If True, IPython will not add the current working directory to sys.path.\nWhen False, the current working directory is added to sys.path, allowing imports\nof modules defined in the current directory.\n\n:trait type: Bool\n:default: ``False``\n:CLI option: ``--ignore-cwd``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "InteractiveShellApp.matplotlib",
            "content": "Configure matplotlib for interactive use with\nthe default matplotlib backend.\n\n:options: ``'auto'``, ``'agg'``, ``'gtk'``, ``'gtk3'``, ``'gtk4'``, ``'inline'``, ``'ipympl'``, ``'nbagg'``, ``'notebook'``, ``'osx'``, ``'pdf'``, ``'ps'``, ``'qt'``, ``'qt4'``, ``'qt5'``, ``'qt6'``, ``'svg'``, ``'tk'``, ``'widget'``, ``'wx'``\n:CLI option: ``--matplotlib``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "InteractiveShellApp.module_to_run",
            "content": "Run the module as a script.\n\n:trait type: Unicode\n:CLI option: ``-m``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "InteractiveShellApp.pylab",
            "content": "Pre-load matplotlib and numpy for interactive use,\nselecting a particular matplotlib backend and loop integration.\n\n:options: ``'auto'``, ``'agg'``, ``'gtk'``, ``'gtk3'``, ``'gtk4'``, ``'inline'``, ``'ipympl'``, ``'nbagg'``, ``'notebook'``, ``'osx'``, ``'pdf'``, ``'ps'``, ``'qt'``, ``'qt4'``, ``'qt5'``, ``'qt6'``, ``'svg'``, ``'tk'``, ``'widget'``, ``'wx'``\n:CLI option: ``--pylab``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "InteractiveShellApp.pylab_import_all",
            "content": "If true, IPython will populate the user namespace with numpy, pylab, etc.\nand an ``import *`` is done from numpy and pylab, when using pylab mode.\n\nWhen False, pylab mode should not import any names into the user namespace.\n\n:trait type: Bool\n:default: ``True``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "InteractiveShellApp.reraise_ipython_extension_failures",
            "content": "Reraise exceptions encountered loading IPython extensions?\n\n:trait type: Bool\n:default: ``False``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "Application.log_datefmt",
            "content": "The date format used by logging formatters for %(asctime)s\n\n:trait type: Unicode\n:default: ``'%Y-%m-%d %H:%M:%S'``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "Application.log_format",
            "content": "The Logging format template\n\n:trait type: Unicode\n:default: ``'[%(name)s]%(highlevel)s %(message)s'``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "Application.log_level",
            "content": "Set the log level by value or name.\n\n:options: ``0``, ``10``, ``20``, ``30``, ``40``, ``50``, ``'DEBUG'``, ``'INFO'``, ``'WARN'``, ``'ERROR'``, ``'CRITICAL'``\n:default: ``30``\n:CLI option: ``--log-level``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "Application.show_config",
            "content": "Instead of starting the Application, dump configuration to stdout\n\n:trait type: Bool\n:default: ``False``\n:CLI option: ``--show-config``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "Application.show_config_json",
            "content": "Instead of starting the Application, dump configuration to stdout (as JSON)\n\n:trait type: Bool\n:default: ``False``\n:CLI option: ``--show-config-json``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "BaseIPythonApplication.add_ipython_dir_to_sys_path",
            "content": "No description\n\n:trait type: Bool\n:default: ``False``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "BaseIPythonApplication.auto_create",
            "content": "Whether to create profile dir if it doesn't exist\n\n:trait type: Bool\n:default: ``False``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "BaseIPythonApplication.copy_config_files",
            "content": "Whether to install the default config files into the profile dir.\nIf a new profile is being created, and IPython contains config files for that\nprofile, then they will be staged into the new directory.  Otherwise,\ndefault config files will be automatically generated.\n\n:trait type: Bool\n:default: ``False``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "BaseIPythonApplication.extra_config_file",
            "content": "Path to an extra config file to load.\n\nIf specified, load this config file in addition to any other IPython config.\n\n:trait type: Unicode\n:CLI option: ``--config``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "BaseIPythonApplication.ipython_dir",
            "content": "The name of the IPython directory. This directory is used for logging\nconfiguration (through profiles), history storage, etc. The default\nis usually $HOME/.ipython. This option can also be specified through\nthe environment variable IPYTHONDIR.\n\n:trait type: Unicode\n:CLI option: ``--ipython-dir``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "BaseIPythonApplication.log_datefmt",
            "content": "The date format used by logging formatters for %(asctime)s\n\n:trait type: Unicode\n:default: ``'%Y-%m-%d %H:%M:%S'``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "BaseIPythonApplication.log_format",
            "content": "The Logging format template\n\n:trait type: Unicode\n:default: ``'[%(name)s]%(highlevel)s %(message)s'``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "BaseIPythonApplication.log_level",
            "content": "Set the log level by value or name.\n\n:options: ``0``, ``10``, ``20``, ``30``, ``40``, ``50``, ``'DEBUG'``, ``'INFO'``, ``'WARN'``, ``'ERROR'``, ``'CRITICAL'``\n:default: ``30``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "BaseIPythonApplication.overwrite",
            "content": "Whether to overwrite existing config files when copying\n\n:trait type: Bool\n:default: ``False``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "BaseIPythonApplication.profile",
            "content": "The IPython profile to use.\n\n:trait type: Unicode\n:default: ``'default'``\n:CLI option: ``--profile``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "BaseIPythonApplication.show_config",
            "content": "Instead of starting the Application, dump configuration to stdout\n\n:trait type: Bool\n:default: ``False``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "BaseIPythonApplication.show_config_json",
            "content": "Instead of starting the Application, dump configuration to stdout (as JSON)\n\n:trait type: Bool\n:default: ``False``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "BaseIPythonApplication.verbose_crash",
            "content": "Create a massive crash report when IPython encounters what may be an\ninternal error.  The default is to append a short message to the\nusual traceback\n\n:trait type: Bool\n:default: ``False``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "TerminalIPythonApp.add_ipython_dir_to_sys_path",
            "content": "No description\n\n:trait type: Bool\n:default: ``False``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "TerminalIPythonApp.code_to_run",
            "content": "Execute the given command string.\n\n:trait type: Unicode",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "TerminalIPythonApp.copy_config_files",
            "content": "Whether to install the default config files into the profile dir.\nIf a new profile is being created, and IPython contains config files for that\nprofile, then they will be staged into the new directory.  Otherwise,\ndefault config files will be automatically generated.\n\n:trait type: Bool\n:default: ``False``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "TerminalIPythonApp.display_banner",
            "content": "Whether to display a banner upon starting IPython.\n\n:trait type: Bool\n:default: ``True``\n:CLI option: ``--banner``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "TerminalIPythonApp.exec_PYTHONSTARTUP",
            "content": "Run the file referenced by the PYTHONSTARTUP environment\nvariable at IPython startup.\n\n:trait type: Bool\n:default: ``True``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "TerminalIPythonApp.exec_files",
            "content": "List of files to run at IPython startup.\n\n:trait type: List",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "TerminalIPythonApp.exec_lines",
            "content": "lines of code to run at IPython startup.\n\n:trait type: List",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "TerminalIPythonApp.extensions",
            "content": "A list of dotted module names of IPython extensions to load.\n\n:trait type: List",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "TerminalIPythonApp.extra_config_file",
            "content": "Path to an extra config file to load.\n\nIf specified, load this config file in addition to any other IPython config.\n\n:trait type: Unicode",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "TerminalIPythonApp.extra_extensions",
            "content": "Dotted module name(s) of one or more IPython extensions to load.\n\nFor specifying extra extensions to load on the command-line.\n\n.. versionadded:: 7.10\n\n:trait type: List",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "TerminalIPythonApp.file_to_run",
            "content": "A file to be run\n\n:trait type: Unicode",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "TerminalIPythonApp.force_interact",
            "content": "If a command or file is given via the command-line,\ne.g. 'ipython foo.py', start an interactive shell after executing the\nfile or command.\n\n:trait type: Bool\n:default: ``False``\n:CLI option: ``-i``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "TerminalIPythonApp.gui",
            "content": "Enable GUI event loop integration with any of ('asyncio', 'glut', 'gtk', 'gtk2', 'gtk3', 'gtk4', 'osx', 'pyglet', 'qt', 'qt4', 'qt5', 'qt6', 'tk', 'wx', 'gtk2', 'qt4').\n\n:options: ``'asyncio'``, ``'glut'``, ``'gtk'``, ``'gtk2'``, ``'gtk3'``, ``'gtk4'``, ``'osx'``, ``'pyglet'``, ``'qt'``, ``'qt4'``, ``'qt5'``, ``'qt6'``, ``'tk'``, ``'wx'``, ``'gtk2'``, ``'qt4'``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "TerminalIPythonApp.hide_initial_ns",
            "content": "Should variables loaded at startup (by startup files, exec_lines, etc.)\nbe hidden from tools like %who?\n\n:trait type: Bool\n:default: ``True``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "TerminalIPythonApp.ignore_cwd",
            "content": "If True, IPython will not add the current working directory to sys.path.\nWhen False, the current working directory is added to sys.path, allowing imports\nof modules defined in the current directory.\n\n:trait type: Bool\n:default: ``False``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "TerminalIPythonApp.interactive_shell_class",
            "content": "Class to use to instantiate the TerminalInteractiveShell object. Useful for custom Frontends\n\n:trait type: Type\n:default: ``'IPython.terminal.interactiveshell.TerminalInteractiveShell'``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "TerminalIPythonApp.ipython_dir",
            "content": "The name of the IPython directory. This directory is used for logging\nconfiguration (through profiles), history storage, etc. The default\nis usually $HOME/.ipython. This option can also be specified through\nthe environment variable IPYTHONDIR.\n\n:trait type: Unicode",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "TerminalIPythonApp.log_datefmt",
            "content": "The date format used by logging formatters for %(asctime)s\n\n:trait type: Unicode\n:default: ``'%Y-%m-%d %H:%M:%S'``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "TerminalIPythonApp.log_format",
            "content": "The Logging format template\n\n:trait type: Unicode\n:default: ``'[%(name)s]%(highlevel)s %(message)s'``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "TerminalIPythonApp.log_level",
            "content": "Set the log level by value or name.\n\n:options: ``0``, ``10``, ``20``, ``30``, ``40``, ``50``, ``'DEBUG'``, ``'INFO'``, ``'WARN'``, ``'ERROR'``, ``'CRITICAL'``\n:default: ``30``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "TerminalIPythonApp.matplotlib",
            "content": "Configure matplotlib for interactive use with\nthe default matplotlib backend.\n\n:options: ``'auto'``, ``'agg'``, ``'gtk'``, ``'gtk3'``, ``'gtk4'``, ``'inline'``, ``'ipympl'``, ``'nbagg'``, ``'notebook'``, ``'osx'``, ``'pdf'``, ``'ps'``, ``'qt'``, ``'qt4'``, ``'qt5'``, ``'qt6'``, ``'svg'``, ``'tk'``, ``'widget'``, ``'wx'``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "TerminalIPythonApp.module_to_run",
            "content": "Run the module as a script.\n\n:trait type: Unicode",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "TerminalIPythonApp.overwrite",
            "content": "Whether to overwrite existing config files when copying\n\n:trait type: Bool\n:default: ``False``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "TerminalIPythonApp.profile",
            "content": "The IPython profile to use.\n\n:trait type: Unicode\n:default: ``'default'``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "TerminalIPythonApp.pylab",
            "content": "Pre-load matplotlib and numpy for interactive use,\nselecting a particular matplotlib backend and loop integration.\n\n:options: ``'auto'``, ``'agg'``, ``'gtk'``, ``'gtk3'``, ``'gtk4'``, ``'inline'``, ``'ipympl'``, ``'nbagg'``, ``'notebook'``, ``'osx'``, ``'pdf'``, ``'ps'``, ``'qt'``, ``'qt4'``, ``'qt5'``, ``'qt6'``, ``'svg'``, ``'tk'``, ``'widget'``, ``'wx'``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "TerminalIPythonApp.pylab_import_all",
            "content": "If true, IPython will populate the user namespace with numpy, pylab, etc.\nand an ``import *`` is done from numpy and pylab, when using pylab mode.\n\nWhen False, pylab mode should not import any names into the user namespace.\n\n:trait type: Bool\n:default: ``True``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "TerminalIPythonApp.quick",
            "content": "Start IPython quickly by skipping the loading of config files.\n\n:trait type: Bool\n:default: ``False``\n:CLI option: ``--quick``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "TerminalIPythonApp.reraise_ipython_extension_failures",
            "content": "Reraise exceptions encountered loading IPython extensions?\n\n:trait type: Bool\n:default: ``False``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "TerminalIPythonApp.show_config",
            "content": "Instead of starting the Application, dump configuration to stdout\n\n:trait type: Bool\n:default: ``False``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "TerminalIPythonApp.show_config_json",
            "content": "Instead of starting the Application, dump configuration to stdout (as JSON)\n\n:trait type: Bool\n:default: ``False``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "TerminalIPythonApp.verbose_crash",
            "content": "Create a massive crash report when IPython encounters what may be an\ninternal error.  The default is to append a short message to the\nusual traceback\n\n:trait type: Bool\n:default: ``False``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "InteractiveShell.ast_node_interactivity",
            "content": "'all', 'last', 'last_expr' or 'none', 'last_expr_or_assign' specifying\nwhich nodes should be run interactively (displaying output from expressions).\n\n:options: ``'all'``, ``'last'``, ``'last_expr'``, ``'none'``, ``'last_expr_or_assign'``\n:default: ``'last_expr'``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "InteractiveShell.ast_transformers",
            "content": "A list of ast.NodeTransformer subclass instances, which will be applied\nto user input before code is run.\n\n:trait type: List",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "InteractiveShell.autoawait",
            "content": "Automatically run await statement in the top level repl.\n\n:trait type: Bool\n:default: ``True``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "InteractiveShell.autocall",
            "content": "Make IPython automatically call any callable object even if you didn't\ntype explicit parentheses. For example, 'str 43' becomes 'str(43)'\nautomatically. The value can be '0' to disable the feature, '1' for\n'smart' autocall, where it is not applied if there are no more\narguments on the line, and '2' for 'full' autocall, where all callable\nobjects are automatically called (even if no arguments are present).\n\n:options: ``0``, ``1``, ``2``\n:default: ``0``\n:CLI option: ``--autocall``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "InteractiveShell.autoindent",
            "content": "Autoindent IPython code entered interactively.\n\n:trait type: Bool\n:default: ``True``\n:CLI option: ``--autoindent``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "InteractiveShell.automagic",
            "content": "Enable magic commands to be called without the leading %.\n\n:trait type: Bool\n:default: ``True``\n:CLI option: ``--automagic``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "InteractiveShell.banner1",
            "content": "The part of the banner to be printed before the profile\n\n:trait type: Unicode\n:default: ``\"Python 3.10.0 | packaged by conda-forge | (default, Oct 12 2...``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "InteractiveShell.banner2",
            "content": "The part of the banner to be printed after the profile\n\n:trait type: Unicode",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "InteractiveShell.cache_size",
            "content": "Set the size of the output cache.  The default is 1000, you can\nchange it permanently in your config file.  Setting it to 0 completely\ndisables the caching system, and the minimum value accepted is 3 (if\nyou provide a value less than 3, it is reset to 0 and a warning is\nissued).  This limit is defined because otherwise you'll spend more\ntime re-flushing a too small cache than working\n\n:trait type: Int\n:default: ``1000``\n:CLI option: ``--cache-size``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "InteractiveShell.color_info",
            "content": "Use colors for displaying information about objects. Because this\ninformation is passed through a pager (like 'less'), and some pagers\nget confused with color codes, this capability can be turned off.\n\n:trait type: Bool\n:default: ``True``\n:CLI option: ``--color-info``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "InteractiveShell.colors",
            "content": "Set the color scheme (NoColor, Neutral, Linux, or LightBG).\n\n:options: ``'Neutral'``, ``'NoColor'``, ``'LightBG'``, ``'Linux'``\n:default: ``'Neutral'``\n:CLI option: ``--colors``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "InteractiveShell.debug",
            "content": "No description\n\n:trait type: Bool\n:default: ``False``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "InteractiveShell.disable_failing_post_execute",
            "content": "Don't call post-execute functions that have failed in the past.\n\n:trait type: Bool\n:default: ``False``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "InteractiveShell.display_page",
            "content": "If True, anything that would be passed to the pager\nwill be displayed as regular output instead.\n\n:trait type: Bool\n:default: ``False``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "InteractiveShell.enable_html_pager",
            "content": "(Provisional API) enables html representation in mime bundles sent\nto pagers.\n\n:trait type: Bool\n:default: ``False``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "InteractiveShell.history_length",
            "content": "Total length of command history\n\n:trait type: Int\n:default: ``10000``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "InteractiveShell.history_load_length",
            "content": "The number of saved history entries to be loaded\ninto the history buffer at startup.\n\n:trait type: Int\n:default: ``1000``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "InteractiveShell.ipython_dir",
            "content": "No description\n\n:trait type: Unicode",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "InteractiveShell.logappend",
            "content": "Start logging to the given file in append mode.\nUse `logfile` to specify a log file to **overwrite** logs to.\n\n:trait type: Unicode\n:CLI option: ``--logappend``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "InteractiveShell.logfile",
            "content": "The name of the logfile to use.\n\n:trait type: Unicode\n:CLI option: ``--logfile``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "InteractiveShell.logstart",
            "content": "Start logging to the default log file in overwrite mode.\nUse `logappend` to specify a log file to **append** logs to.\n\n:trait type: Bool\n:default: ``False``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "InteractiveShell.loop_runner",
            "content": "Select the loop runner that will be used to execute top-level asynchronous code\n\n:trait type: Any\n:default: ``'IPython.core.interactiveshell._asyncio_runner'``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "InteractiveShell.object_info_string_level",
            "content": "No description\n\n:options: ``0``, ``1``, ``2``\n:default: ``0``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "InteractiveShell.pdb",
            "content": "Automatically call the pdb debugger after every exception.\n\n:trait type: Bool\n:default: ``False``\n:CLI option: ``--pdb``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "InteractiveShell.quiet",
            "content": "No description\n\n:trait type: Bool\n:default: ``False``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "InteractiveShell.separate_in",
            "content": "No description\n\n:trait type: SeparateUnicode\n:default: ``'\\\\n'``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "InteractiveShell.separate_out",
            "content": "No description\n\n:trait type: SeparateUnicode",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "InteractiveShell.separate_out2",
            "content": "No description\n\n:trait type: SeparateUnicode",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "InteractiveShell.show_rewritten_input",
            "content": "Show rewritten input, e.g. for autocall.\n\n:trait type: Bool\n:default: ``True``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "InteractiveShell.sphinxify_docstring",
            "content": "Enables rich html representation of docstrings. (This requires the\ndocrepr module).\n\n:trait type: Bool\n:default: ``False``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "InteractiveShell.wildcards_case_sensitive",
            "content": "No description\n\n:trait type: Bool\n:default: ``True``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "InteractiveShell.xmode",
            "content": "Switch modes for the IPython exception handlers.\n\n:options: ``'Context'``, ``'Plain'``, ``'Verbose'``, ``'Minimal'``\n:default: ``'Context'``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "TerminalInteractiveShell.ast_node_interactivity",
            "content": "'all', 'last', 'last_expr' or 'none', 'last_expr_or_assign' specifying\nwhich nodes should be run interactively (displaying output from expressions).\n\n:options: ``'all'``, ``'last'``, ``'last_expr'``, ``'none'``, ``'last_expr_or_assign'``\n:default: ``'last_expr'``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "TerminalInteractiveShell.ast_transformers",
            "content": "A list of ast.NodeTransformer subclass instances, which will be applied\nto user input before code is run.\n\n:trait type: List",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "TerminalInteractiveShell.auto_match",
            "content": "Automatically add/delete closing bracket or quote when opening bracket or quote is entered/deleted.\nBrackets: (), [], {}\nQuotes: '', \"\"\n\n:trait type: Bool\n:default: ``False``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "TerminalInteractiveShell.autoawait",
            "content": "Automatically run await statement in the top level repl.\n\n:trait type: Bool\n:default: ``True``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "TerminalInteractiveShell.autocall",
            "content": "Make IPython automatically call any callable object even if you didn't\ntype explicit parentheses. For example, 'str 43' becomes 'str(43)'\nautomatically. The value can be '0' to disable the feature, '1' for\n'smart' autocall, where it is not applied if there are no more\narguments on the line, and '2' for 'full' autocall, where all callable\nobjects are automatically called (even if no arguments are present).\n\n:options: ``0``, ``1``, ``2``\n:default: ``0``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "TerminalInteractiveShell.autoformatter",
            "content": "Autoformatter to reformat Terminal code. Can be `'black'`, `'yapf'` or `None`\n\n:trait type: Unicode",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "TerminalInteractiveShell.autoindent",
            "content": "Autoindent IPython code entered interactively.\n\n:trait type: Bool\n:default: ``True``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "TerminalInteractiveShell.automagic",
            "content": "Enable magic commands to be called without the leading %.\n\n:trait type: Bool\n:default: ``True``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "TerminalInteractiveShell.autosuggestions_provider",
            "content": "Specifies from which source automatic suggestions are provided. Can be set to `'AutoSuggestFromHistory`' or `None` to disableautomatic suggestions. Default is `'AutoSuggestFromHistory`'.\n\n:trait type: Unicode\n:default: ``'AutoSuggestFromHistory'``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "TerminalInteractiveShell.banner1",
            "content": "The part of the banner to be printed before the profile\n\n:trait type: Unicode\n:default: ``\"Python 3.10.0 | packaged by conda-forge | (default, Oct 12 2...``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "TerminalInteractiveShell.banner2",
            "content": "The part of the banner to be printed after the profile\n\n:trait type: Unicode",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "TerminalInteractiveShell.cache_size",
            "content": "Set the size of the output cache.  The default is 1000, you can\nchange it permanently in your config file.  Setting it to 0 completely\ndisables the caching system, and the minimum value accepted is 3 (if\nyou provide a value less than 3, it is reset to 0 and a warning is\nissued).  This limit is defined because otherwise you'll spend more\ntime re-flushing a too small cache than working\n\n:trait type: Int\n:default: ``1000``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "TerminalInteractiveShell.color_info",
            "content": "Use colors for displaying information about objects. Because this\ninformation is passed through a pager (like 'less'), and some pagers\nget confused with color codes, this capability can be turned off.\n\n:trait type: Bool\n:default: ``True``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "TerminalInteractiveShell.colors",
            "content": "Set the color scheme (NoColor, Neutral, Linux, or LightBG).\n\n:options: ``'Neutral'``, ``'NoColor'``, ``'LightBG'``, ``'Linux'``\n:default: ``'Neutral'``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "TerminalInteractiveShell.confirm_exit",
            "content": "Set to confirm when you try to exit IPython with an EOF (Control-D\nin Unix, Control-Z/Enter in Windows). By typing 'exit' or 'quit',\nyou can force a direct exit without any confirmation.\n\n:trait type: Bool\n:default: ``True``\n:CLI option: ``--confirm-exit``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "TerminalInteractiveShell.debug",
            "content": "No description\n\n:trait type: Bool\n:default: ``False``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "TerminalInteractiveShell.debugger_history_file",
            "content": "File in which to store and read history\n\n:trait type: Unicode\n:default: ``'~/.pdbhistory'``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "TerminalInteractiveShell.disable_failing_post_execute",
            "content": "Don't call post-execute functions that have failed in the past.\n\n:trait type: Bool\n:default: ``False``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "TerminalInteractiveShell.display_completions",
            "content": "Options for displaying tab completions, 'column', 'multicolumn', and 'readlinelike'. These options are for `prompt_toolkit`, see `prompt_toolkit` documentation for more information.\n\n:options: ``'column'``, ``'multicolumn'``, ``'readlinelike'``\n:default: ``'multicolumn'``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "TerminalInteractiveShell.display_page",
            "content": "If True, anything that would be passed to the pager\nwill be displayed as regular output instead.\n\n:trait type: Bool\n:default: ``False``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "TerminalInteractiveShell.editing_mode",
            "content": "Shortcut style to use at the prompt. 'vi' or 'emacs'.\n\n:trait type: Unicode\n:default: ``'emacs'``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "TerminalInteractiveShell.editor",
            "content": "Set the editor used by IPython (default to $EDITOR/vi/notepad).\n\n:trait type: Unicode\n:default: ``'vi'``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "TerminalInteractiveShell.emacs_bindings_in_vi_insert_mode",
            "content": "Add shortcuts from 'emacs' insert mode to 'vi' insert mode.\n\n:trait type: Bool\n:default: ``True``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "TerminalInteractiveShell.enable_history_search",
            "content": "Allows to enable/disable the prompt toolkit history search\n\n:trait type: Bool\n:default: ``True``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "TerminalInteractiveShell.enable_html_pager",
            "content": "(Provisional API) enables html representation in mime bundles sent\nto pagers.\n\n:trait type: Bool\n:default: ``False``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "TerminalInteractiveShell.extra_open_editor_shortcuts",
            "content": "Enable vi (v) or Emacs (C-X C-E) shortcuts to open an external editor. This is in addition to the F2 binding, which is always enabled.\n\n:trait type: Bool\n:default: ``False``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "TerminalInteractiveShell.handle_return",
            "content": "Provide an alternative handler to be called when the user presses Return. This is an advanced option intended for debugging, which may be changed or removed in later releases.\n\n:trait type: Any",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "TerminalInteractiveShell.highlight_matching_brackets",
            "content": "Highlight matching brackets.\n\n:trait type: Bool\n:default: ``True``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "TerminalInteractiveShell.highlighting_style",
            "content": "The name or class of a Pygments style to use for syntax\nhighlighting. To see available styles, run `pygmentize -L styles`.\n\n:trait type: Union",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "TerminalInteractiveShell.highlighting_style_overrides",
            "content": "Override highlighting format for specific tokens\n\n:trait type: Dict",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "TerminalInteractiveShell.history_length",
            "content": "Total length of command history\n\n:trait type: Int\n:default: ``10000``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "TerminalInteractiveShell.history_load_length",
            "content": "The number of saved history entries to be loaded\ninto the history buffer at startup.\n\n:trait type: Int\n:default: ``1000``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "TerminalInteractiveShell.ipython_dir",
            "content": "No description\n\n:trait type: Unicode",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "TerminalInteractiveShell.logappend",
            "content": "Start logging to the given file in append mode.\nUse `logfile` to specify a log file to **overwrite** logs to.\n\n:trait type: Unicode",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "TerminalInteractiveShell.logfile",
            "content": "The name of the logfile to use.\n\n:trait type: Unicode",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "TerminalInteractiveShell.logstart",
            "content": "Start logging to the default log file in overwrite mode.\nUse `logappend` to specify a log file to **append** logs to.\n\n:trait type: Bool\n:default: ``False``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "TerminalInteractiveShell.loop_runner",
            "content": "Select the loop runner that will be used to execute top-level asynchronous code\n\n:trait type: Any\n:default: ``'IPython.core.interactiveshell._asyncio_runner'``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "TerminalInteractiveShell.mime_renderers",
            "content": "No description\n\n:trait type: Dict",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "TerminalInteractiveShell.modal_cursor",
            "content": "Cursor shape changes depending on vi mode: beam in vi insert mode,\nblock in nav mode, underscore in replace mode.\n\n:trait type: Bool\n:default: ``True``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "TerminalInteractiveShell.mouse_support",
            "content": "Enable mouse support in the prompt\n(Note: prevents selecting text with the mouse)\n\n:trait type: Bool\n:default: ``False``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "TerminalInteractiveShell.object_info_string_level",
            "content": "No description\n\n:options: ``0``, ``1``, ``2``\n:default: ``0``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "TerminalInteractiveShell.pdb",
            "content": "Automatically call the pdb debugger after every exception.\n\n:trait type: Bool\n:default: ``False``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "TerminalInteractiveShell.prompt_includes_vi_mode",
            "content": "Display the current vi mode (when using vi editing mode).\n\n:trait type: Bool\n:default: ``True``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "TerminalInteractiveShell.prompts_class",
            "content": "Class used to generate Prompt token for prompt_toolkit\n\n:trait type: Type\n:default: ``'IPython.terminal.prompts.Prompts'``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "TerminalInteractiveShell.quiet",
            "content": "No description\n\n:trait type: Bool\n:default: ``False``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "TerminalInteractiveShell.separate_in",
            "content": "No description\n\n:trait type: SeparateUnicode\n:default: ``'\\\\n'``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "TerminalInteractiveShell.separate_out",
            "content": "No description\n\n:trait type: SeparateUnicode",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "TerminalInteractiveShell.separate_out2",
            "content": "No description\n\n:trait type: SeparateUnicode",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "TerminalInteractiveShell.show_rewritten_input",
            "content": "Show rewritten input, e.g. for autocall.\n\n:trait type: Bool\n:default: ``True``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "TerminalInteractiveShell.simple_prompt",
            "content": "Use `raw_input` for the REPL, without completion and prompt colors.\n\nUseful when controlling IPython as a subprocess, and piping STDIN/OUT/ERR. Known usage are:\nIPython own testing machinery, and emacs inferior-shell integration through elpy.\n\nThis mode default to `True` if the `IPY_TEST_SIMPLE_PROMPT`\nenvironment variable is set, or the current terminal is not a tty.\n\n:trait type: Bool\n:default: ``False``\n:CLI option: ``--simple-prompt``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "TerminalInteractiveShell.space_for_menu",
            "content": "Number of line at the bottom of the screen to reserve for the tab completion menu, search history, ...etc, the height of these menus will at most this value. Increase it is you prefer long and skinny menus, decrease for short and wide.\n\n:trait type: Int\n:default: ``6``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "TerminalInteractiveShell.sphinxify_docstring",
            "content": "Enables rich html representation of docstrings. (This requires the\ndocrepr module).\n\n:trait type: Bool\n:default: ``False``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "TerminalInteractiveShell.term_title",
            "content": "Automatically set the terminal title\n\n:trait type: Bool\n:default: ``True``\n:CLI option: ``--term-title``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "TerminalInteractiveShell.term_title_format",
            "content": "Customize the terminal title format.  This is a python format string. Available substitutions are: {cwd}.\n\n:trait type: Unicode\n:default: ``'IPython: {cwd}'``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "TerminalInteractiveShell.timeoutlen",
            "content": "The time in milliseconds that is waited for a mapped key\nsequence to complete.\n\n:trait type: Float\n:default: ``0.5``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "TerminalInteractiveShell.true_color",
            "content": "Use 24bit colors instead of 256 colors in prompt highlighting.\nIf your terminal supports true color, the following command should\nprint ``TRUECOLOR`` in orange::\n\n    printf \"\\x1b[38;2;255;100;0mTRUECOLOR\\x1b[0m\\n\"\n\n:trait type: Bool\n:default: ``False``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "TerminalInteractiveShell.ttimeoutlen",
            "content": "The time in milliseconds that is waited for a key code\nto complete.\n\n:trait type: Float\n:default: ``0.01``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "TerminalInteractiveShell.wildcards_case_sensitive",
            "content": "No description\n\n:trait type: Bool\n:default: ``True``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "TerminalInteractiveShell.xmode",
            "content": "Switch modes for the IPython exception handlers.\n\n:options: ``'Context'``, ``'Plain'``, ``'Verbose'``, ``'Minimal'``\n:default: ``'Context'``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "HistoryAccessor.connection_options",
            "content": "Options for configuring the SQLite connection\n\nThese options are passed as keyword args to sqlite3.connect\nwhen establishing database connections.\n\n:trait type: Dict",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "HistoryAccessor.enabled",
            "content": "enable the SQLite history\n\nset enabled=False to disable the SQLite history,\nin which case there will be no stored history, no SQLite connection,\nand no background saving thread.  This may be necessary in some\nthreaded environments where IPython is embedded.\n\n:trait type: Bool\n:default: ``True``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "HistoryAccessor.hist_file",
            "content": "Path to file to use for SQLite history database.\n\nBy default, IPython will put the history database in the IPython\nprofile directory.  If you would rather share one history among\nprofiles, you can set this value in each, so that they are consistent.\n\nDue to an issue with fcntl, SQLite is known to misbehave on some NFS\nmounts.  If you see IPython hanging, try setting this to something on a\nlocal disk, e.g::\n\n    ipython --HistoryManager.hist_file=/tmp/ipython_hist.sqlite\n\nyou can also use the specific value `:memory:` (including the colon\nat both end but not the back ticks), to avoid creating an history file.\n\n:trait type: Union",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "HistoryManager.connection_options",
            "content": "Options for configuring the SQLite connection\n\nThese options are passed as keyword args to sqlite3.connect\nwhen establishing database connections.\n\n:trait type: Dict",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "HistoryManager.db_cache_size",
            "content": "Write to database every x commands (higher values save disk access & power).\nValues of 1 or less effectively disable caching.\n\n:trait type: Int\n:default: ``0``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "HistoryManager.db_log_output",
            "content": "Should the history database include output? (default: no)\n\n:trait type: Bool\n:default: ``False``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "HistoryManager.enabled",
            "content": "enable the SQLite history\n\nset enabled=False to disable the SQLite history,\nin which case there will be no stored history, no SQLite connection,\nand no background saving thread.  This may be necessary in some\nthreaded environments where IPython is embedded.\n\n:trait type: Bool\n:default: ``True``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "HistoryManager.hist_file",
            "content": "Path to file to use for SQLite history database.\n\nBy default, IPython will put the history database in the IPython\nprofile directory.  If you would rather share one history among\nprofiles, you can set this value in each, so that they are consistent.\n\nDue to an issue with fcntl, SQLite is known to misbehave on some NFS\nmounts.  If you see IPython hanging, try setting this to something on a\nlocal disk, e.g::\n\n    ipython --HistoryManager.hist_file=/tmp/ipython_hist.sqlite\n\nyou can also use the specific value `:memory:` (including the colon\nat both end but not the back ticks), to avoid creating an history file.\n\n:trait type: Union",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "MagicsManager.auto_magic",
            "content": "Automatically call line magics without requiring explicit % prefix\n\n:trait type: Bool\n:default: ``True``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "MagicsManager.lazy_magics",
            "content": "Mapping from magic names to modules to load.\n\nThis can be used in IPython/IPykernel configuration to declare lazy magics\nthat will only be imported/registered on first use.\n\nFor example::\n\n    c.MagicsManager.lazy_magics = {\n      \"my_magic\": \"slow.to.import\",\n      \"my_other_magic\": \"also.slow\",\n    }\n\nOn first invocation of `%my_magic`, `%%my_magic`, `%%my_other_magic` or\n`%%my_other_magic`, the corresponding module will be loaded as an ipython\nextensions as if you had previously done `%load_ext ipython`.\n\nMagics names should be without percent(s) as magics can be both cell\nand line magics.\n\nLazy loading happen relatively late in execution process, and\ncomplex extensions that manipulate Python/IPython internal state or global state\nmight not support lazy loading.\n\n:trait type: Dict",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "ProfileDir.location",
            "content": "Set the profile location directly. This overrides the logic used by the\n`profile` option.\n\n:trait type: Unicode\n:CLI option: ``--profile-dir``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "BaseFormatter.deferred_printers",
            "content": "No description\n\n:trait type: Dict",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "BaseFormatter.enabled",
            "content": "No description\n\n:trait type: Bool\n:default: ``True``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "BaseFormatter.singleton_printers",
            "content": "No description\n\n:trait type: Dict",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "BaseFormatter.type_printers",
            "content": "No description\n\n:trait type: Dict",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "PlainTextFormatter.deferred_printers",
            "content": "No description\n\n:trait type: Dict",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "PlainTextFormatter.float_precision",
            "content": "No description\n\n:trait type: CUnicode",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "PlainTextFormatter.max_seq_length",
            "content": "Truncate large collections (lists, dicts, tuples, sets) to this size.\n\nSet to 0 to disable truncation.\n\n:trait type: Int\n:default: ``1000``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "PlainTextFormatter.max_width",
            "content": "No description\n\n:trait type: Int\n:default: ``79``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "PlainTextFormatter.newline",
            "content": "No description\n\n:trait type: Unicode\n:default: ``'\\\\n'``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "PlainTextFormatter.pprint",
            "content": "No description\n\n:trait type: Bool\n:default: ``True``\n:CLI option: ``--pprint``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "PlainTextFormatter.singleton_printers",
            "content": "No description\n\n:trait type: Dict",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "PlainTextFormatter.type_printers",
            "content": "No description\n\n:trait type: Dict",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "PlainTextFormatter.verbose",
            "content": "No description\n\n:trait type: Bool\n:default: ``False``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "Completer.backslash_combining_completions",
            "content": "Enable unicode completions, e.g. \\alpha<tab> . Includes completion of latex commands, unicode names, and expanding unicode characters back to latex commands.\n\n:trait type: Bool\n:default: ``True``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "Completer.debug",
            "content": "Enable debug for the Completer. Mostly print extra information for experimental jedi integration.\n\n:trait type: Bool\n:default: ``False``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "Completer.greedy",
            "content": "Activate greedy completion\nPENDING DEPRECATION. this is now mostly taken care of with Jedi.\n\nThis will enable completion on elements of lists, results of function calls, etc.,\nbut can be unsafe because the code is actually evaluated on TAB.\n\n:trait type: Bool\n:default: ``False``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "Completer.jedi_compute_type_timeout",
            "content": "Experimental: restrict time (in milliseconds) during which Jedi can compute types.\nSet to 0 to stop computing types. Non-zero value lower than 100ms may hurt\nperformance by preventing jedi to build its cache.\n\n:trait type: Int\n:default: ``400``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "Completer.use_jedi",
            "content": "Experimental: Use Jedi to generate autocompletions. Default to True if jedi is installed.\n\n:trait type: Bool\n:default: ``True``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "IPCompleter.backslash_combining_completions",
            "content": "Enable unicode completions, e.g. \\alpha<tab> . Includes completion of latex commands, unicode names, and expanding unicode characters back to latex commands.\n\n:trait type: Bool\n:default: ``True``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "IPCompleter.debug",
            "content": "Enable debug for the Completer. Mostly print extra information for experimental jedi integration.\n\n:trait type: Bool\n:default: ``False``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "IPCompleter.greedy",
            "content": "Activate greedy completion\nPENDING DEPRECATION. this is now mostly taken care of with Jedi.\n\nThis will enable completion on elements of lists, results of function calls, etc.,\nbut can be unsafe because the code is actually evaluated on TAB.\n\n:trait type: Bool\n:default: ``False``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "IPCompleter.jedi_compute_type_timeout",
            "content": "Experimental: restrict time (in milliseconds) during which Jedi can compute types.\nSet to 0 to stop computing types. Non-zero value lower than 100ms may hurt\nperformance by preventing jedi to build its cache.\n\n:trait type: Int\n:default: ``400``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "IPCompleter.limit_to__all__",
            "content": "DEPRECATED as of version 5.0.\n\nInstruct the completer to use __all__ for the completion\n\nSpecifically, when completing on ``object.<tab>``.\n\nWhen True: only those names in obj.__all__ will be included.\n\nWhen False [default]: the __all__ attribute is ignored\n\n:trait type: Bool\n:default: ``False``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "IPCompleter.merge_completions",
            "content": "Whether to merge completion results into a single list\n\nIf False, only the completion results from the first non-empty\ncompleter will be returned.\n\n:trait type: Bool\n:default: ``True``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "IPCompleter.omit__names",
            "content": "Instruct the completer to omit private method names\n\nSpecifically, when completing on ``object.<tab>``.\n\nWhen 2 [default]: all names that start with '_' will be excluded.\n\nWhen 1: all 'magic' names (``__foo__``) will be excluded.\n\nWhen 0: nothing will be excluded.\n\n:options: ``0``, ``1``, ``2``\n:default: ``2``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "IPCompleter.profile_completions",
            "content": "If True, emit profiling data for completion subsystem using cProfile.\n\n:trait type: Bool\n:default: ``False``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "IPCompleter.profiler_output_dir",
            "content": "Template for path at which to output profile data for completions.\n\n:trait type: Unicode\n:default: ``'.completion_profiles'``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "IPCompleter.use_jedi",
            "content": "Experimental: Use Jedi to generate autocompletions. Default to True if jedi is installed.\n\n:trait type: Bool\n:default: ``True``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "ScriptMagics.script_magics",
            "content": "Extra script cell magics to define\n\nThis generates simple wrappers of `%%script foo` as `%%foo`.\n\nIf you want to add script magics that aren't on your path,\nspecify them in script_paths\n\n:trait type: List",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "ScriptMagics.script_paths",
            "content": "Dict mapping short 'ruby' names to full paths, such as '/opt/secret/bin/ruby'\n\nOnly necessary for items in script_magics where the default path will not\nfind the right interpreter.\n\n:trait type: Dict",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "LoggingMagics.quiet",
            "content": "Suppress output of log state when logging is enabled\n\n:trait type: Bool\n:default: ``False``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "StoreMagics.autorestore",
            "content": "If True, any %store-d variables will be automatically restored\nwhen IPython starts.\n\n:trait type: Bool\n:default: ``False``",
            "name": "configtrait",
            "options": []
          },
          "type": "BlockDirective"
        }
      ],
      "level": 0,
      "target": null,
      "title": "Terminal IPython options"
    }
  ],
  "content": {},
  "example_section_data": {
    "children": [],
    "level": 0,
    "target": null,
    "title": null
  },
  "item_file": null,
  "item_line": null,
  "item_type": null,
  "ordered_sections": [],
  "references": null,
  "see_also": [],
  "signature": {
    "value": null
  }
}