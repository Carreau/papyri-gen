{
  "aliases": [],
  "arbitrary": [
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "One of the main feature of IPython when used as a kernel is its ability to show rich output. This means that object that can be representing as image, sounds, animation, (etc...) can be shown this way if the frontend support it."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "In order for this to be possible, you need to use the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "display()"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " function, that should be available by default on IPython 5.4+ and 6.1+, or that you can import with "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "from IPython.display import display"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ". Then use "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "display(<your\nobject>)"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " instead of "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "print()"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", and if possible your object will be displayed with a richer representation. In the terminal of course, there won't be much difference as object are most of the time represented by text, but in notebook and similar interface you will get richer outputs."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "level": 0,
      "target": "plotting",
      "title": "Rich Outputs"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "children": [
                    {
                      "data": {
                        "value": "Starting with IPython 5.0 and matplotlib 2.0 you can avoid the use of IPython's specific magic and use "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "matplotlib.pyplot.ion()"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": "/"
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "matplotlib.pyplot.ioff()"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " which have the advantages of working outside of IPython as well."
                      },
                      "type": "Words"
                    }
                  ]
                },
                "type": "Paragraph"
              }
            ],
            "kind": "note",
            "title": ""
          },
          "type": "Admonition"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "One major feature of the IPython kernel is the ability to display plots that  are the output of running code cells. The IPython kernel is designed to work  seamlessly with the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "matplotlib_"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " plotting library to provide this functionality."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "To set this up, before any plotting or import of matplotlib is performed you must execute the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "%matplotlib"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": "  "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "magic command <magics_explained>"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ". This performs the necessary behind-the-scenes setup for IPython to work correctly hand in hand with "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "matplotlib"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": "; it does "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "not"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": ", however, actually execute any Python "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "import"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " commands, that is, no names are added to the namespace."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "If the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "%matplotlib"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " magic is called without an argument, the output of a plotting command is displayed using the default "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "matplotlib"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " backend in a separate window. Alternatively, the backend can be explicitly requested using, for example:    "
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": "%matplotlib gtk"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "A particularly interesting backend, provided by IPython, is the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "inline"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " backend.  This is available only for the Jupyter Notebook and the Jupyter QtConsole.  It can be invoked as follows:    "
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": "%matplotlib inline"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "With this backend, the output of plotting commands is displayed "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "inline"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": " within frontends like the Jupyter notebook, directly below the code cell that produced it. The resulting plots will then also be stored in the notebook document."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "argument": "",
            "content": "`Plotting with Matplotlib`_  example notebook",
            "name": "seealso",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "The "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "matplotlib_"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " library also ships with "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "%matplotlib notebook"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " command that allows interactive figures if your environment allows it."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "See the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "matplotlib_"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " documentation for more information."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "argument": "../links.txt",
            "content": "",
            "name": "include",
            "options": []
          },
          "type": "BlockDirective"
        }
      ],
      "level": 0,
      "target": null,
      "title": "Plotting"
    }
  ],
  "content": {},
  "example_section_data": {
    "children": [],
    "level": 0,
    "target": null,
    "title": null
  },
  "item_file": null,
  "item_line": null,
  "item_type": null,
  "ordered_sections": [],
  "references": null,
  "see_also": [],
  "signature": {
    "value": null
  }
}