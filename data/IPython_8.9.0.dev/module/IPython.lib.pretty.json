{
  "aliases": [
    "IPython.lib.pretty"
  ],
  "arbitrary": [
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Python advanced pretty printer.  This pretty printer is intended to replace the old "
                },
                "type": "Words"
              },
              {
                "data": {
                  "anchor": null,
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "api",
                    "module": "pprint",
                    "path": "pprint",
                    "version": "*"
                  },
                  "value": "pprint"
                },
                "type": "Link"
              },
              {
                "data": {
                  "value": " python module which does not allow developers to provide their own pretty print callbacks."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "This module is based on ruby's "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "prettyprint.rb"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " library by "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "Tanaka Akira"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": "."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "To directly print the representation of an object use "
                },
                "type": "Words"
              },
              {
                "data": {
                  "anchor": null,
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "api",
                    "module": "pprint",
                    "path": "pprint",
                    "version": "*"
                  },
                  "value": "pprint"
                },
                "type": "Link"
              },
              {
                "data": {
                  "value": ":      "
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": "from pretty import pprint\npprint(complex_object)"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "To get a string of the output use "
                },
                "type": "Words"
              },
              {
                "data": {
                  "anchor": null,
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "module",
                    "module": "IPython",
                    "path": "IPython.lib.pretty",
                    "version": "8.9.0.dev"
                  },
                  "value": "pretty"
                },
                "type": "Link"
              },
              {
                "data": {
                  "value": ":      "
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": "from pretty import pretty\nstring = pretty(complex_object)"
          },
          "type": "BlockVerbatim"
        }
      ],
      "level": 0,
      "target": null,
      "title": "Example Usage"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "The pretty library allows developers to add pretty printing rules for their own objects.  This process is straightforward.  All you have to do is to add a "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "_repr_pretty_"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " method to your object and call the methods on the pretty printer passed:      "
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": "class MyObject(object):\n\n    def _repr_pretty_(self, p, cycle):\n        ..."
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Here's an example for a class with a simple constructor:      "
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": "class MySimpleObject:\n\n    def __init__(self, a, b, *, c=None):\n        self.a = a\n        self.b = b\n        self.c = c\n\n    def _repr_pretty_(self, p, cycle):\n        ctor = CallExpression.factory(self.__class__.__name__)\n        if self.c is None:\n            p.pretty(ctor(a, b))\n        else:\n            p.pretty(ctor(a, b, c=c))"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Here is an example implementation of a "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "_repr_pretty_"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " method for a list subclass:      "
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": "class MyList(list):\n\n    def _repr_pretty_(self, p, cycle):\n        if cycle:\n            p.text('MyList(...)')\n        else:\n            with p.group(8, 'MyList([', '])'):\n                for idx, item in enumerate(self):\n                    if idx:\n                        p.text(',')\n                        p.breakable()\n                    p.pretty(item)"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "The "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "cycle"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " parameter is "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "True"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " if pretty detected a cycle.  You "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "have"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": " to react to that or the result is an infinite loop.  "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "p.text()"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " just adds non breaking text to the output, "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "p.breakable()"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " either adds a whitespace or breaks here.  If you pass it an argument it's used instead of the default space.  "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "p.pretty"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " prettyprints another object using the pretty print method."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "The first parameter to the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "anchor": null,
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "module",
                    "module": "IPython",
                    "path": "IPython.lib.pretty._PrettyPrinterBase.group",
                    "version": "8.9.0.dev"
                  },
                  "value": "group"
                },
                "type": "Link"
              },
              {
                "data": {
                  "value": " function specifies the extra indentation of the next line.  In this example the next item will either be on the same line (if the items are short enough) or aligned with the right edge of the opening bracket of "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "MyList"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": "."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "If you just want to indent something you can use the group function without open / close parameters.  You can also use this code:      "
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": "with p.indent(2):\n    ..."
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Inheritance diagram:"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "argument": "IPython.lib.pretty",
            "content": "",
            "name": "inheritance-diagram",
            "options": [
              [
                "parts",
                "3"
              ]
            ]
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "children": [
              {
                "body": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "2007 by Armin Ronacher.             Portions (c) 2009 by Robert Kern."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "name": [
                  {
                    "data": {
                      "value": "copyright"
                    },
                    "type": "Words"
                  }
                ]
              },
              {
                "body": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "BSD License."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "name": [
                  {
                    "data": {
                      "value": "license"
                    },
                    "type": "Words"
                  }
                ]
              }
            ]
          },
          "type": "FieldList"
        }
      ],
      "level": 0,
      "target": null,
      "title": "Extending"
    }
  ],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    },
    "Extended Summary": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    },
    "Notes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    },
    "Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    },
    "Returns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    },
    "Summary": {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "To remove in the future \u2013\u2013 IPython.lib.pretty"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    }
  },
  "example_section_data": {
    "children": [],
    "level": 0,
    "target": null,
    "title": null
  },
  "item_file": "/dev/ipython/IPython/lib/pretty.py",
  "item_line": 0,
  "item_type": "<class 'module'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary"
  ],
  "references": null,
  "see_also": [],
  "signature": {
    "value": null
  }
}