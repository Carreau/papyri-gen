{
  "_content": {
    "Attributes": {
      "children": [],
      "title": null
    },
    "Extended Summary": {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "It uses the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "validator"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " object from "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "validate.py"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": "."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "To run "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "validate"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " on the current ConfigObj, call: ::      "
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": "test = config.validate(validator)"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "(Normally having previously passed in the configspec when the ConfigObj was created - you can dynamically assign a dictionary of checks to the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "configspec"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " attribute of a section though)."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "It returns "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "True"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " if everything passes, or a dictionary of pass/fails (True/False). If every member of a subsection passes, it will just have the value "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "True"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ". (It also returns "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "False"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " if all members fail)."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "In addition, it converts the values from strings to their native types if their checks pass (and "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "stringify"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " is set)."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "If "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "preserve_errors"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " is "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "True"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " ("
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "False"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " is default) then instead of a marking a fail with a "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "False"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", it will preserve the actual exception object. This can contain info about the reason for failure. For example the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "VdtValueTooSmallError"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " indicates that the value supplied was too small. If a value (or section) is missing it will still be marked as "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "False"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": "."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "You must have the validate module to use "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "preserve_errors=True"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": "."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "You can then use the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "flatten_errors"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " function to turn your nested results dictionary into a flattened list of failures - useful for displaying meaningful error messages."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": null
    },
    "Methods": {
      "children": [],
      "title": null
    },
    "Notes": {
      "children": [],
      "title": null
    },
    "Other Parameters": {
      "children": [],
      "title": null
    },
    "Parameters": {
      "children": [],
      "title": null
    },
    "Raises": {
      "children": [],
      "title": null
    },
    "Receives": {
      "children": [],
      "title": null
    },
    "Returns": {
      "children": [],
      "title": null
    },
    "Summary": {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Test the ConfigObj against a configspec."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": null
    },
    "Warnings": {
      "children": [],
      "title": null
    },
    "Warns": {
      "children": [],
      "title": null
    },
    "Yields": {
      "children": [],
      "title": null
    }
  },
  "aliases": [
    "astropy.config.configuration.configobj.ConfigObj.validate"
  ],
  "arbitrary": [],
  "example_section_data": {
    "children": [],
    "title": null
  },
  "item_file": "/astropy/extern/configobj/configobj.py",
  "item_line": 2124,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary"
  ],
  "references": null,
  "refs": [],
  "see_also": [],
  "signature": {
    "value": "validate(self, validator, preserve_errors=False, copy=False, section=None)"
  }
}