{
  "aliases": [
    "astropy.config.configuration.validate._test"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "title": null
    },
    "Extended Summary": {
      "children": [
        {
          "data": {
            "value": ">>> checks = [\n...     '3, 6, min=1, max=3, test=list(a, b, c)',\n...     '3',\n...     '3, 6',\n...     '3,',\n...     'min=1, test=\"a b c\"',\n...     'min=5, test=\"a, b, c\"',\n...     'min=1, max=3, test=\"a, b, c\"',\n...     'min=-100, test=-99',\n...     'min=1, max=3',\n...     '3, 6, test=\"36\"',\n...     '3, 6, test=\"a, b, c\"',\n...     '3, max=3, test=list(\"a\", \"b\", \"c\")',\n...     '''3, max=3, test=list(\"'a'\", 'b', \"x=(c)\")''',\n...     \"test='x=fish(3)'\",\n...    ]\n>>> v = Validator({'test': _test})\n>>> for entry in checks:\n...     pprint(v.check(('test(%s)' % entry), 3))\n(3, ('3', '6'), {'max': '3', 'min': '1', 'test': ['a', 'b', 'c']})\n(3, ('3',), {})\n(3, ('3', '6'), {})\n(3, ('3',), {})\n(3, (), {'min': '1', 'test': 'a b c'})\n(3, (), {'min': '5', 'test': 'a, b, c'})\n(3, (), {'max': '3', 'min': '1', 'test': 'a, b, c'})\n(3, (), {'min': '-100', 'test': '-99'})\n(3, (), {'max': '3', 'min': '1'})\n(3, ('3', '6'), {'test': '36'})\n(3, ('3', '6'), {'test': 'a, b, c'})\n(3, ('3',), {'max': '3', 'test': ['a', 'b', 'c']})\n(3, ('3',), {'max': '3', 'test': [\"'a'\", 'b', 'x=(c)']})\n(3, (), {'test': 'x=fish(3)'})"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "value": ">>> v = Validator()\n>>> v.check('integer(default=6)', '3')\n3\n>>> v.check('integer(default=6)', None, True)\n6\n>>> v.get_default_value('integer(default=6)')\n6\n>>> v.get_default_value('float(default=6)')\n6.0\n>>> v.get_default_value('pass(default=None)')\n>>> v.get_default_value(\"string(default='None')\")\n'None'\n>>> v.get_default_value('pass')\nTraceback (most recent call last):\nKeyError: 'Check \"pass\" has no default value.'\n>>> v.get_default_value('pass(default=list(1, 2, 3, 4))')\n['1', '2', '3', '4']"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "value": ">>> v = Validator()\n>>> v.check(\"pass(default=None)\", None, True)\n>>> v.check(\"pass(default='None')\", None, True)\n'None'\n>>> v.check('pass(default=\"None\")', None, True)\n'None'\n>>> v.check('pass(default=list(1, 2, 3, 4))', None, True)\n['1', '2', '3', '4']"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Bug test for unicode arguments >>> v = Validator() >>> v.check(unicode('string(min=4)'), unicode('test')) == unicode('test') True"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": ">>> v = Validator()\n>>> v.get_default_value(unicode('string(min=4, default=\"1234\")')) == unicode('1234')\nTrue\n>>> v.check(unicode('string(min=4, default=\"1234\")'), unicode('test')) == unicode('test')\nTrue"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "value": ">>> v = Validator()\n>>> default = v.get_default_value('string(default=None)')\n>>> default == None\n1"
          },
          "type": "BlockVerbatim"
        }
      ],
      "level": 0,
      "title": null
    },
    "Methods": {
      "children": [],
      "level": 0,
      "title": null
    },
    "Notes": {
      "children": [],
      "level": 0,
      "title": null
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "title": null
    },
    "Parameters": {
      "children": [],
      "level": 0,
      "title": null
    },
    "Raises": {
      "children": [],
      "level": 0,
      "title": null
    },
    "Receives": {
      "children": [],
      "level": 0,
      "title": null
    },
    "Returns": {
      "children": [],
      "level": 0,
      "title": null
    },
    "Summary": {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "A function that exists for test purposes."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "level": 0,
      "title": null
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "title": null
    },
    "Warns": {
      "children": [],
      "level": 0,
      "title": null
    },
    "Yields": {
      "children": [],
      "level": 0,
      "title": null
    }
  },
  "example_section_data": {
    "children": [],
    "level": 0,
    "title": null
  },
  "item_file": "/astropy/extern/configobj/validate.py",
  "item_line": 1336,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary"
  ],
  "references": null,
  "see_also": [],
  "signature": {
    "value": "_test(value, *args, **keywargs)"
  }
}