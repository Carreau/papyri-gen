{
  "aliases": [
    "astropy.utils.sharedmethod"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "When using "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "sharedmethod"
            },
            {
              "type": "text",
              "value": " on a method defined in a class's body, it may be called on an instance, or on a class.  In the former case it behaves like a normal instance method (a reference to the instance is automatically passed as the first "
            },
            {
              "type": "inlineCode",
              "value": "self"
            },
            {
              "type": "text",
              "value": " argument of the method)      "
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": ">>> class Example:\n...     @sharedmethod\n...     def identify(self, *args):\n...         print('self was', self)\n...         print('additional args were', args)\n...\n>>> ex = Example()\n>>> ex.identify(1, 2)\nself was <astropy.utils.decorators.Example object at 0x...>\nadditional args were (1, 2)"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "In the latter case, when the "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "sharedmethod"
            },
            {
              "type": "text",
              "value": " is called directly from a class, it behaves like a "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "classmethod"
            },
            {
              "type": "text",
              "value": ":      "
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": ">>> Example.identify(3, 4)\nself was <class 'astropy.utils.decorators.Example'>\nadditional args were (3, 4)"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "This also supports a more advanced usage, where the "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "classmethod"
            },
            {
              "type": "text",
              "value": " implementation can be written separately.  If the class's "
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "metaclass"
                }
              ],
              "type": "emphasis"
            },
            {
              "type": "text",
              "value": " has a method of the same name as the "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "sharedmethod"
            },
            {
              "type": "text",
              "value": ", the version on the metaclass is delegated to      "
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": ">>> class ExampleMeta(type):\n...     def identify(self):\n...         print('this implements the {0}.identify '\n...               'classmethod'.format(self.__name__))\n...\n>>> class Example(metaclass=ExampleMeta):\n...     @sharedmethod\n...     def identify(self):\n...         print('this implements the instancemethod')\n...\n>>> Example().identify()\nthis implements the instancemethod\n>>> Example.identify()\nthis implements the Example.identify classmethod"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "This is a method decorator that allows both an instancemethod and a "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "classmethod"
            },
            {
              "type": "text",
              "value": " to share the same name."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": null,
  "item_line": null,
  "item_type": "<class 'type'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary"
  ],
  "references": null,
  "see_also": [],
  "signature": {
    "type": "Signature",
    "value": null
  },
  "type": "DocBlob"
}