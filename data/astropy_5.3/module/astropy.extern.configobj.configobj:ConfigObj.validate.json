{
  "aliases": [
    "astropy.config.configuration.configobj.ConfigObj.validate"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "It uses the "
            },
            {
              "type": "inlineCode",
              "value": "validator"
            },
            {
              "type": "text",
              "value": " object from "
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "validate.py"
                }
              ],
              "type": "emphasis"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "To run "
            },
            {
              "type": "inlineCode",
              "value": "validate"
            },
            {
              "type": "text",
              "value": " on the current ConfigObj, call:       "
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": "test = config.validate(validator)"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "(Normally having previously passed in the configspec when the ConfigObj was created - you can dynamically assign a dictionary of checks to the "
            },
            {
              "type": "inlineCode",
              "value": "configspec"
            },
            {
              "type": "text",
              "value": " attribute of a section though)."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "It returns "
            },
            {
              "type": "inlineCode",
              "value": "True"
            },
            {
              "type": "text",
              "value": " if everything passes, or a dictionary of pass/fails (True/False). If every member of a subsection passes, it will just have the value "
            },
            {
              "type": "inlineCode",
              "value": "True"
            },
            {
              "type": "text",
              "value": ". (It also returns "
            },
            {
              "type": "inlineCode",
              "value": "False"
            },
            {
              "type": "text",
              "value": " if all members fail)."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "In addition, it converts the values from strings to their native types if their checks pass (and "
            },
            {
              "type": "inlineCode",
              "value": "stringify"
            },
            {
              "type": "text",
              "value": " is set)."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "If "
            },
            {
              "type": "inlineCode",
              "value": "preserve_errors"
            },
            {
              "type": "text",
              "value": " is "
            },
            {
              "type": "inlineCode",
              "value": "True"
            },
            {
              "type": "text",
              "value": " ("
            },
            {
              "type": "inlineCode",
              "value": "False"
            },
            {
              "type": "text",
              "value": " is default) then instead of a marking a fail with a "
            },
            {
              "type": "inlineCode",
              "value": "False"
            },
            {
              "type": "text",
              "value": ", it will preserve the actual exception object. This can contain info about the reason for failure. For example the "
            },
            {
              "type": "inlineCode",
              "value": "VdtValueTooSmallError"
            },
            {
              "type": "text",
              "value": " indicates that the value supplied was too small. If a value (or section) is missing it will still be marked as "
            },
            {
              "type": "inlineCode",
              "value": "False"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "You must have the validate module to use "
            },
            {
              "type": "inlineCode",
              "value": "preserve_errors=True"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "You can then use the "
            },
            {
              "type": "inlineCode",
              "value": "flatten_errors"
            },
            {
              "type": "text",
              "value": " function to turn your nested results dictionary into a flattened list of failures - useful for displaying meaningful error messages."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Test the ConfigObj against a configspec."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/astropy/extern/configobj/configobj.py",
  "item_line": 2124,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary"
  ],
  "references": null,
  "see_also": [],
  "signature": {
    "type": "Signature",
    "value": "(self, validator, preserve_errors=False, copy=False, section=None)"
  },
  "type": "DocBlob"
}