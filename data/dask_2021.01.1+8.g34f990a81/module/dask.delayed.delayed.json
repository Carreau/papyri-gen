{
  "_content": {
    "Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Wraps a function or object to produce a "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "Delayed"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": "."
                }
              }
            ],
            "inner": []
          }
        }
      ],
      "title": null
    },
    "Extended Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "Delayed"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " objects act as proxies for the object they wrap, but all operations on them are done lazily by building up a dask graph internally."
                }
              }
            ],
            "inner": []
          }
        }
      ],
      "title": null
    },
    "Parameters": {
      "children": [
        {
          "type": "Param",
          "data": {
            "param": "obj",
            "type_": "object",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "The function or object to wrap"
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "name",
            "type_": "string or hashable, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "The key to use in the underlying graph for the wrapped object. Defaults to hashing content. Note that this only affects the name of the object wrapped by this call to delayed, and *not* the output of delayed function calls - for that use "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "dask",
                          "_",
                          "key",
                          "_",
                          "name="
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " as described below."
                      }
                    }
                  ],
                  "inner": []
                }
              },
              {
                "type": "BlockDirective",
                "data": {
                  "lines": {
                    "_lines": [
                      {
                        "_line": ".. note::",
                        "_number": 5,
                        "_offset": 0
                      }
                    ]
                  },
                  "wh": {
                    "_lines": [
                      {
                        "_line": "",
                        "_number": 6,
                        "_offset": 0
                      }
                    ]
                  },
                  "ind": {
                    "_lines": [
                      {
                        "_line": "   Because this ``name`` is used as the key in task graphs, you should",
                        "_number": 7,
                        "_offset": 0
                      },
                      {
                        "_line": "   ensure that it uniquely identifies ``obj``. If you'd like to provide",
                        "_number": 8,
                        "_offset": 0
                      },
                      {
                        "_line": "   a descriptive name that is still unique, combine the descriptive name",
                        "_number": 9,
                        "_offset": 0
                      },
                      {
                        "_line": "   with :func:`dask.base.tokenize` of the ``array_like``. See",
                        "_number": 10,
                        "_offset": 0
                      },
                      {
                        "_line": "   :ref:`graphs` for more.",
                        "_number": 11,
                        "_offset": 0
                      }
                    ]
                  },
                  "directive_name": "note",
                  "args0": [
                    ""
                  ],
                  "inner": {
                    "inline": [
                      {
                        "type": "Words",
                        "data": {
                          "value": "Because this "
                        }
                      },
                      {
                        "type": "Verbatim",
                        "data": {
                          "value": [
                            "name"
                          ]
                        }
                      },
                      {
                        "type": "Words",
                        "data": {
                          "value": " is used as the key in task graphs, you should ensure that it uniquely identifies "
                        }
                      },
                      {
                        "type": "Verbatim",
                        "data": {
                          "value": [
                            "obj"
                          ]
                        }
                      },
                      {
                        "type": "Words",
                        "data": {
                          "value": ". If you'd like to provide a descriptive name that is still unique, combine the descriptive name with "
                        }
                      },
                      {
                        "type": "Directive",
                        "data": {
                          "value": [
                            "dask.base.tokenize"
                          ],
                          "domain": null,
                          "role": "func"
                        }
                      },
                      {
                        "type": "Words",
                        "data": {
                          "value": " of the "
                        }
                      },
                      {
                        "type": "Verbatim",
                        "data": {
                          "value": [
                            "array",
                            "_",
                            "like"
                          ]
                        }
                      },
                      {
                        "type": "Words",
                        "data": {
                          "value": ". See "
                        }
                      },
                      {
                        "type": "Directive",
                        "data": {
                          "value": [
                            "graphs"
                          ],
                          "domain": null,
                          "role": "ref"
                        }
                      },
                      {
                        "type": "Words",
                        "data": {
                          "value": " for more."
                        }
                      }
                    ],
                    "inner": []
                  }
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "pure",
            "type_": "bool, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Indicates whether calling the resulting "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "Delayed"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " object is a pure operation. If True, arguments to the call are hashed to produce deterministic keys. If not provided, the default is to check the global "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "delayed",
                          "_",
                          "pure"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " setting, and fallback to "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "False"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " if unset."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "nout",
            "type_": "int, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "The number of outputs returned from calling the resulting "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "Delayed"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " object. If provided, the "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "Delayed"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " output of the call can be iterated into "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "nout"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " objects, allowing for unpacking of results. By default iteration over "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "Delayed"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " objects will error. Note, that "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "nout=1"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " expects "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "obj"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " to return a tuple of length 1, and consequently for "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "nout=0"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ", "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "obj"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " should return an empty tuple."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "traverse",
            "type_": "bool, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "By default dask traverses builtin python collections looking for dask objects passed to "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "delayed"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ". For large collections this can be expensive. If "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "obj"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " doesn't contain any dask objects, set "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "traverse=False"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " to avoid doing this traversal."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        }
      ],
      "title": null
    },
    "Returns": {
      "children": [],
      "title": null
    },
    "Yields": {
      "children": [],
      "title": null
    },
    "Receives": {
      "children": [],
      "title": null
    },
    "Raises": {
      "children": [],
      "title": null
    },
    "Warns": {
      "children": [],
      "title": null
    },
    "Other Parameters": {
      "children": [],
      "title": null
    },
    "Attributes": {
      "children": [],
      "title": null
    },
    "Methods": {
      "children": [],
      "title": null
    },
    "Notes": {
      "children": [],
      "title": null
    },
    "Warnings": {
      "children": [],
      "title": null
    }
  },
  "refs": [],
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Examples"
  ],
  "item_file": null,
  "item_line": null,
  "item_type": null,
  "aliases": [
    "dask.delayed"
  ],
  "example_section_data": {
    "children": [
      {
        "type": "Paragraph",
        "data": {
          "inline": [
            {
              "type": "Words",
              "data": {
                "value": "Apply to functions to delay execution:"
              }
            }
          ],
          "inner": []
        }
      },
      {
        "type": "Code",
        "data": {
          "entries": [
            [
              "from",
              "",
              "kn"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "dask",
              "",
              "nn"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "import",
              "",
              "kn"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "delayed",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "def",
              "",
              "k"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "inc",
              "",
              "nf"
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "x",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              ":",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "    ",
              "",
              ""
            ],
            [
              "return",
              "",
              "k"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "x",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "+",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "1",
              "",
              "mi"
            ]
          ],
          "out": "",
          "ce_status": "compiled"
        }
      },
      {
        "type": "Code",
        "data": {
          "entries": [
            [
              "inc",
              "",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "10",
              "",
              "mi"
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": "11",
          "ce_status": "compiled"
        }
      },
      {
        "type": "Code",
        "data": {
          "entries": [
            [
              "x",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "delayed",
              "",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "inc",
              "",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "pure",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "True",
              "",
              "kc"
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "10",
              "",
              "mi"
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "type",
              "",
              "nb"
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "x",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "==",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "Delayed",
              "",
              ""
            ],
            [
              "              ",
              "",
              ""
            ],
            [
              "# doctest: +SKIP",
              "",
              "c1"
            ]
          ],
          "out": "True",
          "ce_status": "compiled"
        }
      },
      {
        "type": "Code",
        "data": {
          "entries": [
            [
              "x",
              "",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "compute",
              "",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": "11",
          "ce_status": "compiled"
        }
      },
      {
        "type": "Paragraph",
        "data": {
          "inline": [
            {
              "type": "Words",
              "data": {
                "value": "Can be used as a decorator:"
              }
            }
          ],
          "inner": []
        }
      },
      {
        "type": "Code",
        "data": {
          "entries": [
            [
              "@delayed",
              "",
              "nd"
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "pure",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "True",
              "",
              "kc"
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "def",
              "",
              "k"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "add",
              "",
              "nf"
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "a",
              "",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "b",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              ":",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "    ",
              "",
              ""
            ],
            [
              "return",
              "",
              "k"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "a",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "+",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "b",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "add",
              "",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "1",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "2",
              "",
              "mi"
            ],
            [
              ")",
              "",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "compute",
              "",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": "3",
          "ce_status": "compiled"
        }
      },
      {
        "type": "Paragraph",
        "data": {
          "inline": [
            {
              "type": "Verbatim",
              "data": {
                "value": [
                  "delayed"
                ]
              }
            },
            {
              "type": "Words",
              "data": {
                "value": " also accepts an optional keyword "
              }
            },
            {
              "type": "Verbatim",
              "data": {
                "value": [
                  "pure"
                ]
              }
            },
            {
              "type": "Words",
              "data": {
                "value": ". If False, then subsequent calls will always produce a different "
              }
            },
            {
              "type": "Verbatim",
              "data": {
                "value": [
                  "Delayed"
                ]
              }
            },
            {
              "type": "Words",
              "data": {
                "value": ". This is useful for non-pure functions (such as "
              }
            },
            {
              "type": "Verbatim",
              "data": {
                "value": [
                  "time"
                ]
              }
            },
            {
              "type": "Words",
              "data": {
                "value": " or "
              }
            },
            {
              "type": "Verbatim",
              "data": {
                "value": [
                  "random"
                ]
              }
            },
            {
              "type": "Words",
              "data": {
                "value": ")."
              }
            }
          ],
          "inner": []
        }
      },
      {
        "type": "Code",
        "data": {
          "entries": [
            [
              "from",
              "",
              "kn"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "random",
              "",
              "nn"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "import",
              "",
              "kn"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "random",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "out1",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "delayed",
              "",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "random",
              "",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "pure",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "False",
              "",
              "kc"
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "out2",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "delayed",
              "",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "random",
              "",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "pure",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "False",
              "",
              "kc"
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "out1",
              "",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "key",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "==",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "out2",
              "",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "key",
              "",
              ""
            ]
          ],
          "out": "False",
          "ce_status": "compiled"
        }
      },
      {
        "type": "Paragraph",
        "data": {
          "inline": [
            {
              "type": "Words",
              "data": {
                "value": "If you know a function is pure (output only depends on the input, with no global state), then you can set "
              }
            },
            {
              "type": "Verbatim",
              "data": {
                "value": [
                  "pure=True"
                ]
              }
            },
            {
              "type": "Words",
              "data": {
                "value": ". This will attempt to apply a consistent name to the output, but will fallback on the same behavior of "
              }
            },
            {
              "type": "Verbatim",
              "data": {
                "value": [
                  "pure=False"
                ]
              }
            },
            {
              "type": "Words",
              "data": {
                "value": " if this fails."
              }
            }
          ],
          "inner": []
        }
      },
      {
        "type": "Code",
        "data": {
          "entries": [
            [
              "@delayed",
              "",
              "nd"
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "pure",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "True",
              "",
              "kc"
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "def",
              "",
              "k"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "add",
              "",
              "nf"
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "a",
              "",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "b",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              ":",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "    ",
              "",
              ""
            ],
            [
              "return",
              "",
              "k"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "a",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "+",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "b",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "out1",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "add",
              "",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "1",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "2",
              "",
              "mi"
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "out2",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "add",
              "",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "1",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "2",
              "",
              "mi"
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "out1",
              "",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "key",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "==",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "out2",
              "",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "key",
              "",
              ""
            ]
          ],
          "out": "True",
          "ce_status": "compiled"
        }
      },
      {
        "type": "Paragraph",
        "data": {
          "inline": [
            {
              "type": "Words",
              "data": {
                "value": "Instead of setting "
              }
            },
            {
              "type": "Verbatim",
              "data": {
                "value": [
                  "pure"
                ]
              }
            },
            {
              "type": "Words",
              "data": {
                "value": " as a property of the callable, you can also set it contextually using the "
              }
            },
            {
              "type": "Verbatim",
              "data": {
                "value": [
                  "delayed",
                  "_",
                  "pure"
                ]
              }
            },
            {
              "type": "Words",
              "data": {
                "value": " setting. Note that this influences the *call* and not the *creation* of the callable:"
              }
            }
          ],
          "inner": []
        }
      },
      {
        "type": "Code",
        "data": {
          "entries": [
            [
              "@delayed",
              "",
              "nd"
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "def",
              "",
              "k"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "mul",
              "",
              "nf"
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "a",
              "",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "b",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              ":",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "    ",
              "",
              ""
            ],
            [
              "return",
              "",
              "k"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "a",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "*",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "b",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "import",
              "",
              "kn"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "dask",
              "",
              "nn"
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "with",
              "",
              "k"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "dask",
              "",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "config",
              "",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "set",
              "",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "delayed_pure",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "True",
              "",
              "kc"
            ],
            [
              ")",
              "",
              ""
            ],
            [
              ":",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "    ",
              "",
              ""
            ],
            [
              "print",
              "",
              "nb"
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "mul",
              "",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "1",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "2",
              "",
              "mi"
            ],
            [
              ")",
              "",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "key",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "==",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "mul",
              "",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "1",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "2",
              "",
              "mi"
            ],
            [
              ")",
              "",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "key",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": "True",
          "ce_status": "compiled"
        }
      },
      {
        "type": "Code",
        "data": {
          "entries": [
            [
              "with",
              "",
              "k"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "dask",
              "",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "config",
              "",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "set",
              "",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "delayed_pure",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "False",
              "",
              "kc"
            ],
            [
              ")",
              "",
              ""
            ],
            [
              ":",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "    ",
              "",
              ""
            ],
            [
              "print",
              "",
              "nb"
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "mul",
              "",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "1",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "2",
              "",
              "mi"
            ],
            [
              ")",
              "",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "key",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "==",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "mul",
              "",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "1",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "2",
              "",
              "mi"
            ],
            [
              ")",
              "",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "key",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": "False",
          "ce_status": "compiled"
        }
      },
      {
        "type": "Paragraph",
        "data": {
          "inline": [
            {
              "type": "Words",
              "data": {
                "value": "The key name of the result of calling a delayed object is determined by hashing the arguments by default. To explicitly set the name, you can use the "
              }
            },
            {
              "type": "Verbatim",
              "data": {
                "value": [
                  "dask",
                  "_",
                  "key",
                  "_",
                  "name"
                ]
              }
            },
            {
              "type": "Words",
              "data": {
                "value": " keyword when calling the function:"
              }
            }
          ],
          "inner": []
        }
      },
      {
        "type": "Code",
        "data": {
          "entries": [
            [
              "add",
              "",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "1",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "2",
              "",
              "mi"
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "   ",
              "",
              ""
            ],
            [
              "# doctest: +SKIP",
              "",
              "c1"
            ]
          ],
          "out": "Delayed('add-3dce7c56edd1ac2614add714086e950f')",
          "ce_status": "compiled"
        }
      },
      {
        "type": "Code",
        "data": {
          "entries": [
            [
              "add",
              "",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "1",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "2",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "dask_key_name",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              "three",
              "",
              "s2"
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": "Delayed('three')",
          "ce_status": "compiled"
        }
      },
      {
        "type": "Paragraph",
        "data": {
          "inline": [
            {
              "type": "Words",
              "data": {
                "value": "Note that objects with the same key name are assumed to have the same result. If you set the names explicitly you should make sure your key names are different for different results."
              }
            }
          ],
          "inner": []
        }
      },
      {
        "type": "Code",
        "data": {
          "entries": [
            [
              "add",
              "",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "1",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "2",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "dask_key_name",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              "three",
              "",
              "s2"
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": "Delayed('three')",
          "ce_status": "compiled"
        }
      },
      {
        "type": "Code",
        "data": {
          "entries": [
            [
              "add",
              "",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "2",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "1",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "dask_key_name",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              "three",
              "",
              "s2"
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": "Delayed('three')",
          "ce_status": "compiled"
        }
      },
      {
        "type": "Code",
        "data": {
          "entries": [
            [
              "add",
              "",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "2",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "2",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "dask_key_name",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              "four",
              "",
              "s2"
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": "Delayed('four')",
          "ce_status": "compiled"
        }
      },
      {
        "type": "Paragraph",
        "data": {
          "inline": [
            {
              "type": "Verbatim",
              "data": {
                "value": [
                  "delayed"
                ]
              }
            },
            {
              "type": "Words",
              "data": {
                "value": " can also be applied to objects to make operations on them lazy:"
              }
            }
          ],
          "inner": []
        }
      },
      {
        "type": "Code",
        "data": {
          "entries": [
            [
              "a",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "delayed",
              "",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "1",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "2",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "3",
              "",
              "mi"
            ],
            [
              "]",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "isinstance",
              "",
              "nb"
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "a",
              "",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "Delayed",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "      ",
              "",
              ""
            ],
            [
              "# doctest: +SKIP",
              "",
              "c1"
            ]
          ],
          "out": "True",
          "ce_status": "compiled"
        }
      },
      {
        "type": "Code",
        "data": {
          "entries": [
            [
              "a",
              "",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "compute",
              "",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": "[1, 2, 3]",
          "ce_status": "compiled"
        }
      },
      {
        "type": "Paragraph",
        "data": {
          "inline": [
            {
              "type": "Words",
              "data": {
                "value": "The key name of a delayed object is hashed by default if "
              }
            },
            {
              "type": "Verbatim",
              "data": {
                "value": [
                  "pure=True"
                ]
              }
            },
            {
              "type": "Words",
              "data": {
                "value": " or is generated randomly if "
              }
            },
            {
              "type": "Verbatim",
              "data": {
                "value": [
                  "pure=False"
                ]
              }
            },
            {
              "type": "Words",
              "data": {
                "value": " (default).  To explicitly set the name, you can use the "
              }
            },
            {
              "type": "Verbatim",
              "data": {
                "value": [
                  "name"
                ]
              }
            },
            {
              "type": "Words",
              "data": {
                "value": " keyword. To ensure that the key is unique you should include the tokenized value as well, or otherwise ensure that it's unique:"
              }
            }
          ],
          "inner": []
        }
      },
      {
        "type": "Code",
        "data": {
          "entries": [
            [
              "from",
              "",
              "kn"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "dask",
              "",
              "nn"
            ],
            [
              ".",
              "",
              "nn"
            ],
            [
              "base",
              "",
              "nn"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "import",
              "",
              "kn"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "tokenize",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "data",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "1",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "2",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "3",
              "",
              "mi"
            ],
            [
              "]",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "a",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "delayed",
              "",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "data",
              "",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "name",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "'",
              "",
              "s1"
            ],
            [
              "mylist-",
              "",
              "s1"
            ],
            [
              "'",
              "",
              "s1"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "+",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "tokenize",
              "",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "data",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "a",
              "",
              ""
            ],
            [
              "  ",
              "",
              ""
            ],
            [
              "# doctest: +SKIP",
              "",
              "c1"
            ]
          ],
          "out": "Delayed('mylist-55af65871cb378a4fa6de1660c3e8fb7')",
          "ce_status": "compiled"
        }
      },
      {
        "type": "Paragraph",
        "data": {
          "inline": [
            {
              "type": "Words",
              "data": {
                "value": "Delayed results act as a proxy to the underlying object. Many operators are supported:"
              }
            }
          ],
          "inner": []
        }
      },
      {
        "type": "Code",
        "data": {
          "entries": [
            [
              "(",
              "",
              ""
            ],
            [
              "a",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "+",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "1",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "2",
              "",
              "mi"
            ],
            [
              "]",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "compute",
              "",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "      ",
              "",
              ""
            ],
            [
              "# doctest: +SKIP",
              "",
              "c1"
            ]
          ],
          "out": "[1, 2, 3, 1, 2]",
          "ce_status": "compiled"
        }
      },
      {
        "type": "Code",
        "data": {
          "entries": [
            [
              "a",
              "",
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "1",
              "",
              "mi"
            ],
            [
              "]",
              "",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "compute",
              "",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "              ",
              "",
              ""
            ],
            [
              "# doctest: +SKIP",
              "",
              "c1"
            ]
          ],
          "out": "2",
          "ce_status": "compiled"
        }
      },
      {
        "type": "Paragraph",
        "data": {
          "inline": [
            {
              "type": "Words",
              "data": {
                "value": "Method and attribute access also works:"
              }
            }
          ],
          "inner": []
        }
      },
      {
        "type": "Code",
        "data": {
          "entries": [
            [
              "a",
              "",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "count",
              "",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "2",
              "",
              "mi"
            ],
            [
              ")",
              "",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "compute",
              "",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "        ",
              "",
              ""
            ],
            [
              "# doctest: +SKIP",
              "",
              "c1"
            ]
          ],
          "out": "1",
          "ce_status": "compiled"
        }
      },
      {
        "type": "Paragraph",
        "data": {
          "inline": [
            {
              "type": "Words",
              "data": {
                "value": "Note that if a method doesn't exist, no error will be thrown until runtime:"
              }
            }
          ],
          "inner": []
        }
      },
      {
        "type": "Code",
        "data": {
          "entries": [
            [
              "res",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "a",
              "",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "not_a_real_method",
              "",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "# doctest: +SKIP",
              "",
              "c1"
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "res",
              "",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "compute",
              "",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "  ",
              "",
              ""
            ],
            [
              "# doctest: +SKIP",
              "",
              "c1"
            ]
          ],
          "out": "AttributeError(\"'list' object has no attribute 'not_a_real_method'\")",
          "ce_status": "compiled"
        }
      },
      {
        "type": "Paragraph",
        "data": {
          "inline": [
            {
              "type": "Words",
              "data": {
                "value": "\"Magic\" methods (e.g. operators and attribute access) are assumed to be pure, meaning that subsequent calls must return the same results. This behavior is not overrideable through the "
              }
            },
            {
              "type": "Verbatim",
              "data": {
                "value": [
                  "delayed"
                ]
              }
            },
            {
              "type": "Words",
              "data": {
                "value": " call, but can be modified using other ways as described below."
              }
            }
          ],
          "inner": []
        }
      },
      {
        "type": "Paragraph",
        "data": {
          "inline": [
            {
              "type": "Words",
              "data": {
                "value": "To invoke an impure attribute or operator, you'd need to use it in a delayed function with "
              }
            },
            {
              "type": "Verbatim",
              "data": {
                "value": [
                  "pure=False"
                ]
              }
            },
            {
              "type": "Words",
              "data": {
                "value": ":"
              }
            }
          ],
          "inner": []
        }
      },
      {
        "type": "Code",
        "data": {
          "entries": [
            [
              "class",
              "",
              "k"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "Incrementer",
              "",
              "nc"
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "object",
              "",
              "nb"
            ],
            [
              ")",
              "",
              ""
            ],
            [
              ":",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "    ",
              "",
              ""
            ],
            [
              "def",
              "",
              "k"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "__init__",
              "",
              "fm"
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "self",
              "",
              "bp"
            ],
            [
              ")",
              "",
              ""
            ],
            [
              ":",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "        ",
              "",
              ""
            ],
            [
              "self",
              "",
              "bp"
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "_n",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "0",
              "",
              "mi"
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "    ",
              "",
              ""
            ],
            [
              "@property",
              "",
              "nd"
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "    ",
              "",
              ""
            ],
            [
              "def",
              "",
              "k"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "n",
              "",
              "nf"
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "self",
              "",
              "bp"
            ],
            [
              ")",
              "",
              ""
            ],
            [
              ":",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "        ",
              "",
              ""
            ],
            [
              "self",
              "",
              "bp"
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "_n",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "+",
              "",
              "o"
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "1",
              "",
              "mi"
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "        ",
              "",
              ""
            ],
            [
              "return",
              "",
              "k"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "self",
              "",
              "bp"
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "_n",
              "",
              ""
            ]
          ],
          "out": "...",
          "ce_status": "compiled"
        }
      },
      {
        "type": "Code",
        "data": {
          "entries": [
            [
              "x",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "delayed",
              "",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "Incrementer",
              "",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "x",
              "",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "n",
              "",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "key",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "==",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "x",
              "",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "n",
              "",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "key",
              "",
              ""
            ]
          ],
          "out": "True",
          "ce_status": "compiled"
        }
      },
      {
        "type": "Code",
        "data": {
          "entries": [
            [
              "get_n",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "delayed",
              "",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "lambda",
              "",
              "k"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "x",
              "",
              ""
            ],
            [
              ":",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "x",
              "",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "n",
              "",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "pure",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "False",
              "",
              "kc"
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "get_n",
              "",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "x",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "key",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "==",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "get_n",
              "",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "x",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "key",
              "",
              ""
            ]
          ],
          "out": "False",
          "ce_status": "compiled"
        }
      },
      {
        "type": "Paragraph",
        "data": {
          "inline": [
            {
              "type": "Words",
              "data": {
                "value": "In contrast, methods are assumed to be impure by default, meaning that subsequent calls may return different results. To assume purity, set "
              }
            },
            {
              "type": "Verbatim",
              "data": {
                "value": [
                  "pure=True"
                ]
              }
            },
            {
              "type": "Words",
              "data": {
                "value": ". This allows sharing of any intermediate values."
              }
            }
          ],
          "inner": []
        }
      },
      {
        "type": "Code",
        "data": {
          "entries": [
            [
              "a",
              "",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "count",
              "",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "2",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "pure",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "True",
              "",
              "kc"
            ],
            [
              ")",
              "",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "key",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "==",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "a",
              "",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "count",
              "",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "2",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "pure",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "True",
              "",
              "kc"
            ],
            [
              ")",
              "",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "key",
              "",
              ""
            ]
          ],
          "out": "True",
          "ce_status": "compiled"
        }
      },
      {
        "type": "Paragraph",
        "data": {
          "inline": [
            {
              "type": "Words",
              "data": {
                "value": "As with function calls, method calls also respect the global "
              }
            },
            {
              "type": "Verbatim",
              "data": {
                "value": [
                  "delayed",
                  "_",
                  "pure"
                ]
              }
            },
            {
              "type": "Words",
              "data": {
                "value": " setting and support the "
              }
            },
            {
              "type": "Verbatim",
              "data": {
                "value": [
                  "dask",
                  "_",
                  "key",
                  "_",
                  "name"
                ]
              }
            },
            {
              "type": "Words",
              "data": {
                "value": " keyword:"
              }
            }
          ],
          "inner": []
        }
      },
      {
        "type": "Code",
        "data": {
          "entries": [
            [
              "a",
              "",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "count",
              "",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "2",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "dask_key_name",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              "count_2",
              "",
              "s2"
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": "Delayed('count_2')",
          "ce_status": "compiled"
        }
      },
      {
        "type": "Code",
        "data": {
          "entries": [
            [
              "import",
              "",
              "kn"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "dask",
              "",
              "nn"
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "with",
              "",
              "k"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "dask",
              "",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "config",
              "",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "set",
              "",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "delayed_pure",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "True",
              "",
              "kc"
            ],
            [
              ")",
              "",
              ""
            ],
            [
              ":",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "    ",
              "",
              ""
            ],
            [
              "print",
              "",
              "nb"
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "a",
              "",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "count",
              "",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "2",
              "",
              "mi"
            ],
            [
              ")",
              "",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "key",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "==",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "a",
              "",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "count",
              "",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "2",
              "",
              "mi"
            ],
            [
              ")",
              "",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "key",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": "True",
          "ce_status": "compiled"
        }
      }
    ],
    "title": null
  },
  "see_also": [],
  "signature": "delayed(obj='__no__default__', name=None, pure=None, nout=None, traverse=True)",
  "references": null,
  "arbitrary": []
}