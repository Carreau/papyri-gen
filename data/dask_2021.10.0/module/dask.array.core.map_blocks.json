{
  "_content": {
    "Attributes": {
      "children": [],
      "title": null
    },
    "Extended Summary": {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Note that "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "map_blocks"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " will attempt to automatically determine the output array type by calling "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "func"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " on 0-d versions of the inputs. Please refer to the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "meta"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " keyword argument below if you expect that the function will not succeed when operating on 0-d arrays."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": null
    },
    "Methods": {
      "children": [],
      "title": null
    },
    "Notes": {
      "children": [],
      "title": null
    },
    "Other Parameters": {
      "children": [],
      "title": null
    },
    "Parameters": {
      "children": [
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Function to apply to every block in the array."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "func",
            "type_": "callable"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [],
            "param": "args",
            "type_": "dask arrays or other objects"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "The "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "dtype"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " of the output array. It is recommended to provide this. If not provided, will be inferred by applying the function to a small set of fake data."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "dtype",
            "type_": "np.dtype, optional"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Chunk shape of resulting blocks if the function does not preserve shape. If not provided, the resulting array is assumed to have the same block structure as the first input array."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "chunks",
            "type_": "tuple, optional"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Dimensions lost by the function."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "drop_axis",
            "type_": "number or iterable, optional"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "New dimensions created by the function. Note that these are applied after "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "drop_axis"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " (if present)."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "new_axis",
            "type_": "number or iterable, optional"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "The key prefix to use for the output array. If not provided, will be determined from the function name."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "token",
            "type_": "string, optional"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "The key name to use for the output array. Note that this fully specifies the output key name, and must be unique. If not provided, will be determined by a hash of the arguments."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "name",
            "type_": "string, optional"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "The "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "meta"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " of the output array, when specified is expected to be an array of the same type and dtype of that returned when calling "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          ".compute()"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " on the array returned by this function. When not provided, "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "meta"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " will be inferred by applying the function to a small set of fake data, usually a 0-d array. It's important to ensure that "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "func"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " can successfully complete computation without raising exceptions when 0-d is passed to it, providing "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "meta"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " will be required otherwise. If the output type is known beforehand (e.g., "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "np.ndarray"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": ", "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "cupy.ndarray"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": "), an empty array of such type dtype can be passed, for example: "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "meta=np.array((), dtype=np.int32)"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": "."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "meta",
            "type_": "array-like, optional"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Other keyword arguments to pass to function. Values must be constants (not dask.arrays)"
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "**kwargs",
            "type_": ""
          },
          "type": "Param"
        }
      ],
      "title": null
    },
    "Raises": {
      "children": [],
      "title": null
    },
    "Receives": {
      "children": [],
      "title": null
    },
    "Returns": {
      "children": [],
      "title": null
    },
    "Summary": {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Map a function across all blocks of a dask array."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": null
    },
    "Warnings": {
      "children": [],
      "title": null
    },
    "Warns": {
      "children": [],
      "title": null
    },
    "Yields": {
      "children": [],
      "title": null
    }
  },
  "aliases": [
    "dask.array.map_blocks",
    "dask.array.Array.map_blocks",
    "dask.array.core.map_blocks"
  ],
  "arbitrary": [],
  "example_section_data": {
    "children": [
      {
        "data": {
          "ce_status": "compiled",
          "entries": [
            [
              "import",
              null,
              "kn"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "dask",
              "dask",
              "nn"
            ],
            [
              ".",
              "",
              "nn"
            ],
            [
              "array",
              "dask.array",
              "nn"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "as",
              null,
              "k"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "da",
              "dask.array",
              "nn"
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "x",
              "dask.array.core.Array",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "da",
              "dask.array",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "arange",
              "dask.array.creation.arange",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "6",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "chunks",
              null,
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "3",
              "",
              "mi"
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": ""
        },
        "type": "Code"
      },
      {
        "data": {
          "ce_status": "compiled",
          "entries": [
            [
              "x",
              "dask.array.core.Array",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "map_blocks",
              "dask.array.core.Array.map_blocks",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "lambda",
              null,
              "k"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "x",
              null,
              ""
            ],
            [
              ":",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "x",
              null,
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "*",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "2",
              "",
              "mi"
            ],
            [
              ")",
              "",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "compute",
              "dask.base.DaskMethodsMixin.compute",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": "array([ 0,  2,  4,  6,  8, 10])"
        },
        "type": "Code"
      },
      {
        "data": {
          "inline": [
            {
              "data": {
                "value": "The "
              },
              "type": "Words"
            },
            {
              "data": {
                "value": [
                  "da.map_blocks"
                ]
              },
              "type": "Verbatim"
            },
            {
              "data": {
                "value": " function can also accept multiple arrays."
              },
              "type": "Words"
            }
          ],
          "inner": []
        },
        "type": "Paragraph"
      },
      {
        "data": {
          "ce_status": "compiled",
          "entries": [
            [
              "d",
              "dask.array.core.Array",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "da",
              "dask.array",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "arange",
              "dask.array.creation.arange",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "5",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "chunks",
              null,
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "2",
              "",
              "mi"
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "e",
              "dask.array.core.Array",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "da",
              "dask.array",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "arange",
              "dask.array.creation.arange",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "5",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "chunks",
              null,
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "2",
              "",
              "mi"
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": ""
        },
        "type": "Code"
      },
      {
        "data": {
          "ce_status": "compiled",
          "entries": [
            [
              "f",
              "dask.array.core.Array",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "da",
              "dask.array",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "map_blocks",
              "dask.array.core.map_blocks",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "lambda",
              null,
              "k"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "a",
              null,
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "b",
              null,
              ""
            ],
            [
              ":",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "a",
              null,
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "+",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "b",
              null,
              ""
            ],
            [
              "*",
              "",
              "o"
            ],
            [
              "*",
              "",
              "o"
            ],
            [
              "2",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "d",
              "dask.array.core.Array",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "e",
              "dask.array.core.Array",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "f",
              "dask.array.core.Array",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "compute",
              "dask.base.DaskMethodsMixin.compute",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": "array([ 0,  2,  6, 12, 20])"
        },
        "type": "Code"
      },
      {
        "data": {
          "inline": [
            {
              "data": {
                "value": "If the function changes shape of the blocks then you must provide chunks explicitly."
              },
              "type": "Words"
            }
          ],
          "inner": []
        },
        "type": "Paragraph"
      },
      {
        "data": {
          "ce_status": "compiled",
          "entries": [
            [
              "y",
              "dask.array.core.Array",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "x",
              "dask.array.core.Array",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "map_blocks",
              "dask.array.core.Array.map_blocks",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "lambda",
              null,
              "k"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "x",
              null,
              ""
            ],
            [
              ":",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "x",
              null,
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              ":",
              "",
              ""
            ],
            [
              ":",
              "",
              ""
            ],
            [
              "2",
              "",
              "mi"
            ],
            [
              "]",
              "",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "chunks",
              null,
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "2",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "2",
              "",
              "mi"
            ],
            [
              ")",
              "",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": ""
        },
        "type": "Code"
      },
      {
        "data": {
          "inline": [
            {
              "data": {
                "value": "You have a bit of freedom in specifying chunks.  If all of the output chunk sizes are the same, you can provide just that chunk size as a single tuple."
              },
              "type": "Words"
            }
          ],
          "inner": []
        },
        "type": "Paragraph"
      },
      {
        "data": {
          "ce_status": "compiled",
          "entries": [
            [
              "a",
              "dask.array.core.Array",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "da",
              "dask.array",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "arange",
              "dask.array.creation.arange",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "18",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "chunks",
              null,
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "6",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "b",
              "dask.array.core.Array",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "a",
              "dask.array.core.Array",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "map_blocks",
              "dask.array.core.Array.map_blocks",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "lambda",
              null,
              "k"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "x",
              null,
              ""
            ],
            [
              ":",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "x",
              null,
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              ":",
              "",
              ""
            ],
            [
              "3",
              "",
              "mi"
            ],
            [
              "]",
              "",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "chunks",
              null,
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "3",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": ""
        },
        "type": "Code"
      },
      {
        "data": {
          "inline": [
            {
              "data": {
                "value": "If the function changes the dimension of the blocks you must specify the created or destroyed dimensions."
              },
              "type": "Words"
            }
          ],
          "inner": []
        },
        "type": "Paragraph"
      },
      {
        "data": {
          "ce_status": "compiled",
          "entries": [
            [
              "b",
              "dask.array.core.Array",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "a",
              "dask.array.core.Array",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "map_blocks",
              "dask.array.core.Array.map_blocks",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "lambda",
              null,
              "k"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "x",
              null,
              ""
            ],
            [
              ":",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "x",
              null,
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "None",
              null,
              "kc"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              ":",
              "",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "None",
              null,
              "kc"
            ],
            [
              "]",
              "",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "chunks",
              null,
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "1",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "6",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "1",
              "",
              "mi"
            ],
            [
              ")",
              "",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "                 ",
              "",
              ""
            ],
            [
              "new_axis",
              null,
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "0",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "2",
              "",
              "mi"
            ],
            [
              "]",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": ""
        },
        "type": "Code"
      },
      {
        "data": {
          "inline": [
            {
              "data": {
                "value": "If "
              },
              "type": "Words"
            },
            {
              "data": {
                "value": [
                  "chunks"
                ]
              },
              "type": "Verbatim"
            },
            {
              "data": {
                "value": " is specified but "
              },
              "type": "Words"
            },
            {
              "data": {
                "value": [
                  "new_axis"
                ]
              },
              "type": "Verbatim"
            },
            {
              "data": {
                "value": " is not, then it is inferred to add the necessary number of axes on the left."
              },
              "type": "Words"
            }
          ],
          "inner": []
        },
        "type": "Paragraph"
      },
      {
        "data": {
          "inline": [
            {
              "data": {
                "value": "Map_blocks aligns blocks by block positions without regard to shape. In the following example we have two arrays with the same number of blocks but with different shape and chunk sizes."
              },
              "type": "Words"
            }
          ],
          "inner": []
        },
        "type": "Paragraph"
      },
      {
        "data": {
          "ce_status": "compiled",
          "entries": [
            [
              "x",
              "dask.array.core.Array",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "da",
              "dask.array",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "arange",
              "dask.array.creation.arange",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "1000",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "chunks",
              null,
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "100",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "y",
              "dask.array.core.Array",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "da",
              "dask.array",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "arange",
              "dask.array.creation.arange",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "100",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "chunks",
              null,
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "10",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": ""
        },
        "type": "Code"
      },
      {
        "data": {
          "inline": [
            {
              "data": {
                "value": "The relevant attribute to match is numblocks."
              },
              "type": "Words"
            }
          ],
          "inner": []
        },
        "type": "Paragraph"
      },
      {
        "data": {
          "ce_status": "compiled",
          "entries": [
            [
              "x",
              "dask.array.core.Array",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "numblocks",
              "functools.cached_property",
              ""
            ]
          ],
          "out": "(10,)"
        },
        "type": "Code"
      },
      {
        "data": {
          "ce_status": "compiled",
          "entries": [
            [
              "y",
              "dask.array.core.Array",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "numblocks",
              "functools.cached_property",
              ""
            ]
          ],
          "out": "(10,)"
        },
        "type": "Code"
      },
      {
        "data": {
          "inline": [
            {
              "data": {
                "value": "If these match (up to broadcasting rules) then we can map arbitrary functions across blocks"
              },
              "type": "Words"
            }
          ],
          "inner": []
        },
        "type": "Paragraph"
      },
      {
        "data": {
          "ce_status": "compiled",
          "entries": [
            [
              "def",
              null,
              "k"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "func",
              "__main__.func",
              "nf"
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "a",
              null,
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "b",
              null,
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              ":",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "    ",
              "",
              ""
            ],
            [
              "return",
              null,
              "k"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "np",
              "numpy",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "array",
              "numpy.array",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "a",
              null,
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "max",
              null,
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "b",
              null,
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "max",
              null,
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "]",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": ""
        },
        "type": "Code"
      },
      {
        "data": {
          "ce_status": "compiled",
          "entries": [
            [
              "da",
              "dask.array",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "map_blocks",
              "dask.array.core.map_blocks",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "func",
              "__main__.func",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "x",
              "dask.array.core.Array",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "y",
              "dask.array.core.Array",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "chunks",
              null,
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "2",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "dtype",
              null,
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "'",
              "",
              "s1"
            ],
            [
              "i8",
              null,
              "s1"
            ],
            [
              "'",
              "",
              "s1"
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": "dask.array<func, shape=(20,), dtype=int64, chunksize=(2,), chunktype=numpy.ndarray>"
        },
        "type": "Code"
      },
      {
        "data": {
          "ce_status": "compiled",
          "entries": [
            [
              "_",
              null,
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "compute",
              null,
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": "array([ 99,   9, 199,  19, 299,  29, 399,  39, 499,  49, 599,  59, 699,\n        69, 799,  79, 899,  89, 999,  99])"
        },
        "type": "Code"
      },
      {
        "data": {
          "inline": [
            {
              "data": {
                "value": "Your block function get information about where it is in the array by accepting a special "
              },
              "type": "Words"
            },
            {
              "data": {
                "value": [
                  "block_info"
                ]
              },
              "type": "Verbatim"
            },
            {
              "data": {
                "value": " or "
              },
              "type": "Words"
            },
            {
              "data": {
                "value": [
                  "block_id"
                ]
              },
              "type": "Verbatim"
            },
            {
              "data": {
                "value": " keyword argument."
              },
              "type": "Words"
            }
          ],
          "inner": []
        },
        "type": "Paragraph"
      },
      {
        "data": {
          "ce_status": "compiled",
          "entries": [
            [
              "def",
              null,
              "k"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "func",
              "__main__.func",
              "nf"
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "block_info",
              "builtins.NoneType",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "None",
              null,
              "kc"
            ],
            [
              ")",
              "",
              ""
            ],
            [
              ":",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "    ",
              "",
              ""
            ],
            [
              "pass",
              null,
              "k"
            ]
          ],
          "out": ""
        },
        "type": "Code"
      },
      {
        "data": {
          "inline": [
            {
              "data": {
                "value": "This will receive the following information:"
              },
              "type": "Words"
            }
          ],
          "inner": []
        },
        "type": "Paragraph"
      },
      {
        "data": {
          "ce_status": "compiled",
          "entries": [
            [
              "block_info",
              null,
              ""
            ],
            [
              "  ",
              "",
              ""
            ],
            [
              "# doctest: +SKIP",
              "",
              "c1"
            ]
          ],
          "out": "{0: {'shape': (1000,),\n     'num-chunks': (10,),\n     'chunk-location': (4,),\n     'array-location': [(400, 500)]},\n None: {'shape': (1000,),\n        'num-chunks': (10,),\n        'chunk-location': (4,),\n        'array-location': [(400, 500)],\n        'chunk-shape': (100,),\n        'dtype': dtype('float64')}}"
        },
        "type": "Code"
      },
      {
        "data": {
          "inline": [
            {
              "data": {
                "value": "For each argument and keyword arguments that are dask arrays (the positions of which are the first index), you will receive the shape of the full array, the number of chunks of the full array in each dimension, the chunk location (for example the fourth chunk over in the first dimension), and the array location (for example the slice corresponding to "
              },
              "type": "Words"
            },
            {
              "data": {
                "value": [
                  "40:50"
                ]
              },
              "type": "Verbatim"
            },
            {
              "data": {
                "value": "). The same information is provided for the output, with the key "
              },
              "type": "Words"
            },
            {
              "data": {
                "value": [
                  "None"
                ]
              },
              "type": "Verbatim"
            },
            {
              "data": {
                "value": ", plus the shape and dtype that should be returned."
              },
              "type": "Words"
            }
          ],
          "inner": []
        },
        "type": "Paragraph"
      },
      {
        "data": {
          "inline": [
            {
              "data": {
                "value": "These features can be combined to synthesize an array from scratch, for example:"
              },
              "type": "Words"
            }
          ],
          "inner": []
        },
        "type": "Paragraph"
      },
      {
        "data": {
          "ce_status": "compiled",
          "entries": [
            [
              "def",
              null,
              "k"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "func",
              "__main__.func",
              "nf"
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "block_info",
              "builtins.NoneType",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "None",
              null,
              "kc"
            ],
            [
              ")",
              "",
              ""
            ],
            [
              ":",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "    ",
              "",
              ""
            ],
            [
              "loc",
              null,
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "block_info",
              "builtins.NoneType",
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "None",
              "builtins.NoneType",
              "kc"
            ],
            [
              "]",
              "",
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "'",
              "",
              "s1"
            ],
            [
              "array-location",
              "",
              "s1"
            ],
            [
              "'",
              "",
              "s1"
            ],
            [
              "]",
              "",
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "0",
              "",
              "mi"
            ],
            [
              "]",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "    ",
              "",
              ""
            ],
            [
              "return",
              null,
              "k"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "np",
              "numpy",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "arange",
              "numpy.arange",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "loc",
              null,
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "0",
              "",
              "mi"
            ],
            [
              "]",
              "",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "loc",
              null,
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "1",
              "",
              "mi"
            ],
            [
              "]",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": ""
        },
        "type": "Code"
      },
      {
        "data": {
          "ce_status": "compiled",
          "entries": [
            [
              "da",
              "dask.array",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "map_blocks",
              "dask.array.core.map_blocks",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "func",
              "__main__.func",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "chunks",
              null,
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "4",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "4",
              "",
              "mi"
            ],
            [
              ")",
              "",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "dtype",
              null,
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "np",
              "numpy",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "float_",
              "numpy.floating",
              ""
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": "dask.array<func, shape=(8,), dtype=float64, chunksize=(4,), chunktype=numpy.ndarray>"
        },
        "type": "Code"
      },
      {
        "data": {
          "ce_status": "compiled",
          "entries": [
            [
              "_",
              null,
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "compute",
              null,
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": "array([0, 1, 2, 3, 4, 5, 6, 7])"
        },
        "type": "Code"
      },
      {
        "data": {
          "inline": [
            {
              "data": {
                "value": [
                  "block_id"
                ]
              },
              "type": "Verbatim"
            },
            {
              "data": {
                "value": " is similar to "
              },
              "type": "Words"
            },
            {
              "data": {
                "value": [
                  "block_info"
                ]
              },
              "type": "Verbatim"
            },
            {
              "data": {
                "value": " but contains only the "
              },
              "type": "Words"
            },
            {
              "data": {
                "value": [
                  "chunk_location"
                ]
              },
              "type": "Verbatim"
            },
            {
              "data": {
                "value": ":"
              },
              "type": "Words"
            }
          ],
          "inner": []
        },
        "type": "Paragraph"
      },
      {
        "data": {
          "ce_status": "compiled",
          "entries": [
            [
              "def",
              null,
              "k"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "func",
              "__main__.func",
              "nf"
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "block_id",
              "builtins.NoneType",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "None",
              null,
              "kc"
            ],
            [
              ")",
              "",
              ""
            ],
            [
              ":",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "    ",
              "",
              ""
            ],
            [
              "pass",
              null,
              "k"
            ]
          ],
          "out": ""
        },
        "type": "Code"
      },
      {
        "data": {
          "inline": [
            {
              "data": {
                "value": "This will receive the following information:"
              },
              "type": "Words"
            }
          ],
          "inner": []
        },
        "type": "Paragraph"
      },
      {
        "data": {
          "ce_status": "compiled",
          "entries": [
            [
              "block_id",
              null,
              ""
            ],
            [
              "  ",
              "",
              ""
            ],
            [
              "# doctest: +SKIP",
              "",
              "c1"
            ]
          ],
          "out": "(4, 3)"
        },
        "type": "Code"
      },
      {
        "data": {
          "inline": [
            {
              "data": {
                "value": "You may specify the key name prefix of the resulting task in the graph with the optional "
              },
              "type": "Words"
            },
            {
              "data": {
                "value": [
                  "token"
                ]
              },
              "type": "Verbatim"
            },
            {
              "data": {
                "value": " keyword argument."
              },
              "type": "Words"
            }
          ],
          "inner": []
        },
        "type": "Paragraph"
      },
      {
        "data": {
          "ce_status": "compiled",
          "entries": [
            [
              "x",
              "dask.array.core.Array",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "map_blocks",
              "dask.array.core.Array.map_blocks",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "lambda",
              null,
              "k"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "x",
              null,
              ""
            ],
            [
              ":",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "x",
              null,
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "+",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "1",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "name",
              null,
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "'",
              "",
              "s1"
            ],
            [
              "increment",
              null,
              "s1"
            ],
            [
              "'",
              "",
              "s1"
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": "dask.array<increment, shape=(1000,), dtype=int64, chunksize=(100,), chunktype=numpy.ndarray>"
        },
        "type": "Code"
      },
      {
        "data": {
          "inline": [
            {
              "data": {
                "value": "For functions that may not handle 0-d arrays, it's also possible to specify "
              },
              "type": "Words"
            },
            {
              "data": {
                "value": [
                  "meta"
                ]
              },
              "type": "Verbatim"
            },
            {
              "data": {
                "value": " with an empty array matching the type of the expected result. In the example below, "
              },
              "type": "Words"
            },
            {
              "data": {
                "value": [
                  "func"
                ]
              },
              "type": "Verbatim"
            },
            {
              "data": {
                "value": " will result in an "
              },
              "type": "Words"
            },
            {
              "data": {
                "value": [
                  "IndexError"
                ]
              },
              "type": "Verbatim"
            },
            {
              "data": {
                "value": " when computing "
              },
              "type": "Words"
            },
            {
              "data": {
                "value": [
                  "meta"
                ]
              },
              "type": "Verbatim"
            },
            {
              "data": {
                "value": ":"
              },
              "type": "Words"
            }
          ],
          "inner": []
        },
        "type": "Paragraph"
      },
      {
        "data": {
          "ce_status": "compiled",
          "entries": [
            [
              "da",
              "dask.array",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "map_blocks",
              "dask.array.core.map_blocks",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "lambda",
              null,
              "k"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "x",
              null,
              ""
            ],
            [
              ":",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "x",
              null,
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "2",
              "",
              "mi"
            ],
            [
              "]",
              "",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "da",
              "dask.array",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "random",
              "dask.array.random",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "random",
              "dask.array.random.RandomState.random_sample",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "5",
              "",
              "mi"
            ],
            [
              ")",
              "",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "meta",
              null,
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "np",
              "numpy",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "array",
              "numpy.array",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": "dask.array<lambda, shape=(5,), dtype=float64, chunksize=(5,), chunktype=numpy.ndarray>"
        },
        "type": "Code"
      },
      {
        "data": {
          "inline": [
            {
              "data": {
                "value": "Similarly, it's possible to specify a non-NumPy array to "
              },
              "type": "Words"
            },
            {
              "data": {
                "value": [
                  "meta"
                ]
              },
              "type": "Verbatim"
            },
            {
              "data": {
                "value": ", and provide a "
              },
              "type": "Words"
            },
            {
              "data": {
                "value": [
                  "dtype"
                ]
              },
              "type": "Verbatim"
            },
            {
              "data": {
                "value": ":"
              },
              "type": "Words"
            }
          ],
          "inner": []
        },
        "type": "Paragraph"
      },
      {
        "data": {
          "ce_status": "compiled",
          "entries": [
            [
              "import",
              null,
              "kn"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "cupy",
              null,
              "nn"
            ],
            [
              "  ",
              "",
              ""
            ],
            [
              "# doctest: +SKIP",
              "",
              "c1"
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "rs",
              "dask.array.random.RandomState",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "da",
              "dask.array",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "random",
              "dask.array.random",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "RandomState",
              "dask.array.random.RandomState",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "RandomState",
              null,
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "cupy",
              null,
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "random",
              null,
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "RandomState",
              null,
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "  ",
              "",
              ""
            ],
            [
              "# doctest: +SKIP",
              "",
              "c1"
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "dt",
              "numpy.floating",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "np",
              "numpy",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "float32",
              "numpy.floating",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "da",
              "dask.array",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "map_blocks",
              "dask.array.core.map_blocks",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "lambda",
              null,
              "k"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "x",
              null,
              ""
            ],
            [
              ":",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "x",
              null,
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "2",
              "",
              "mi"
            ],
            [
              "]",
              "",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "rs",
              "dask.array.random.RandomState",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "random",
              "dask.array.random.RandomState.random_sample",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "5",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "dtype",
              null,
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "dt",
              "numpy.floating",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "meta",
              null,
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "cupy",
              null,
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "array",
              null,
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "dtype",
              null,
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "dt",
              "numpy.floating",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "  ",
              "",
              ""
            ],
            [
              "# doctest: +SKIP",
              "",
              "c1"
            ]
          ],
          "out": "dask.array<lambda, shape=(5,), dtype=float32, chunksize=(5,), chunktype=cupy.ndarray>"
        },
        "type": "Code"
      }
    ],
    "title": null
  },
  "item_file": "/dask/array/core.py",
  "item_line": 459,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "See Also",
    "Examples"
  ],
  "references": null,
  "refs": [
    "__main__.func",
    "builtins.NoneType",
    "dask",
    "dask.array",
    "dask.array.blockwise.blockwise",
    "dask.array.core.Array",
    "dask.array.core.Array.map_blocks",
    "dask.array.core.map_blocks",
    "dask.array.creation.arange",
    "dask.array.random",
    "dask.array.random.RandomState",
    "dask.array.random.RandomState.random_sample",
    "dask.base.DaskMethodsMixin.compute",
    "functools.cached_property",
    "numpy",
    "numpy.arange",
    "numpy.array",
    "numpy.floating"
  ],
  "see_also": [
    {
      "descriptions": [
        {
          "inline": [
            {
              "data": {
                "value": "Generalized operation with control over block alignment."
              },
              "type": "Words"
            }
          ],
          "inner": []
        }
      ],
      "name": {
        "exists": true,
        "name": "dask.array.blockwise",
        "ref": "dask.array.blockwise.blockwise"
      },
      "type": null
    }
  ],
  "signature": {
    "value": "map_blocks(func, *args, name=None, token=None, dtype=None, chunks=None, drop_axis=[], new_axis=None, meta=None, **kwargs)"
  }
}