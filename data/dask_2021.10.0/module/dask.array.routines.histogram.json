{
  "_content": {
    "Attributes": {
      "children": [],
      "title": null
    },
    "Extended Summary": {
      "children": [],
      "title": null
    },
    "Methods": {
      "children": [],
      "title": null
    },
    "Notes": {
      "children": [],
      "title": null
    },
    "Other Parameters": {
      "children": [],
      "title": null
    },
    "Parameters": {
      "children": [
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Input data; the histogram is computed over the flattened array. If the "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "weights"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " argument is used, the chunks of "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "a"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " are accessed to check chunking compatibility between "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "a"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " and "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "weights"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": ". If "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "weights"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " is "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "None"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": ", a "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "dask.dataframe.Series"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " object can be passed as input data."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "a",
            "type_": "dask.array.Array"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Either an iterable specifying the "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "bins"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " or the number of "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "bins"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " and a "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "range"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " argument is required as computing "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "min"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " and "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "max"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " over blocked arrays is an expensive operation that must be performed explicitly. If "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "local",
                        "reference": {
                          "kind": "local",
                          "module": null,
                          "path": "bins",
                          "version": null
                        },
                        "value": "bins"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": " is an int, it defines the number of equal-width bins in the given range (10, by default). If "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "local",
                        "reference": {
                          "kind": "local",
                          "module": null,
                          "path": "bins",
                          "version": null
                        },
                        "value": "bins"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": " is a sequence, it defines a monotonically increasing array of bin edges, including the rightmost edge, allowing for non-uniform bin widths."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "bins",
            "type_": "int or sequence of scalars, optional"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "The lower and upper range of the bins.  If not provided, range is simply "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "(a.min(), a.max())"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": ".  Values outside the range are ignored. The first element of the range must be less than or equal to the second. "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "local",
                        "reference": {
                          "kind": "local",
                          "module": null,
                          "path": "range",
                          "version": null
                        },
                        "value": "range"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": " affects the automatic bin computation as well. While bin width is computed to be optimal based on the actual data within "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "local",
                        "reference": {
                          "kind": "local",
                          "module": null,
                          "path": "range",
                          "version": null
                        },
                        "value": "range"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": ", the bin count will fill the entire range including portions containing no data."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "range",
            "type_": "(float, float), optional"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "This is equivalent to the "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "density"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " argument, but produces incorrect results for unequal bin widths. It should not be used."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "normed",
            "type_": "bool, optional"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "A dask.array.Array of weights, of the same block structure as "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "a"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": ".  Each value in "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "a"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " only contributes its associated weight towards the bin count (instead of 1). If "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "density"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " is True, the weights are normalized, so that the integral of the density over the range remains 1."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "weights",
            "type_": "dask.array.Array, optional"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "If "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "False"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": ", the result will contain the number of samples in each bin. If "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "True"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": ", the result is the value of the probability "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": {
                          "value": "density"
                        }
                      },
                      "type": "Emph"
                    },
                    {
                      "data": {
                        "value": " function at the bin, normalized such that the "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": {
                          "value": "integral"
                        }
                      },
                      "type": "Emph"
                    },
                    {
                      "data": {
                        "value": " over the range is 1. Note that the sum of the histogram values will not be equal to 1 unless bins of unity width are chosen; it is not a probability "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": {
                          "value": "mass"
                        }
                      },
                      "type": "Emph"
                    },
                    {
                      "data": {
                        "value": " function. Overrides the "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "normed"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " keyword if given. If "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "density"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " is True, "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "bins"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " cannot be a single-number delayed value. It must be a concrete number, or a (possibly-delayed) array/sequence of the bin edges."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "density",
            "type_": "bool, optional"
          },
          "type": "Param"
        }
      ],
      "title": null
    },
    "Raises": {
      "children": [],
      "title": null
    },
    "Receives": {
      "children": [],
      "title": null
    },
    "Returns": {
      "children": [
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "The values of the histogram. See "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "local",
                        "reference": {
                          "kind": "local",
                          "module": null,
                          "path": "density",
                          "version": null
                        },
                        "value": "density"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": " and "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "local",
                        "reference": {
                          "kind": "local",
                          "module": null,
                          "path": "weights",
                          "version": null
                        },
                        "value": "weights"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": " for a description of the possible semantics."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "hist",
            "type_": "dask Array"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Return the bin edges "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "(length(hist)+1)"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": "."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "bin_edges",
            "type_": "dask Array of dtype float"
          },
          "type": "Param"
        }
      ],
      "title": null
    },
    "Summary": {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Blocked variant of "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "numpy.histogram"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": "."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": null
    },
    "Warnings": {
      "children": [],
      "title": null
    },
    "Warns": {
      "children": [],
      "title": null
    },
    "Yields": {
      "children": [],
      "title": null
    }
  },
  "aliases": [
    "dask.array.histogram"
  ],
  "arbitrary": [],
  "example_section_data": {
    "children": [
      {
        "data": {
          "inline": [
            {
              "data": {
                "value": "Using number of bins and range:"
              },
              "type": "Words"
            }
          ],
          "inner": []
        },
        "type": "Paragraph"
      },
      {
        "data": {
          "ce_status": "compiled",
          "entries": [
            [
              "import",
              null,
              "kn"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "dask",
              "dask",
              "nn"
            ],
            [
              ".",
              "",
              "nn"
            ],
            [
              "array",
              "dask.array",
              "nn"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "as",
              null,
              "k"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "da",
              "dask.array",
              "nn"
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "import",
              null,
              "kn"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "numpy",
              "numpy",
              "nn"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "as",
              null,
              "k"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "np",
              "numpy",
              "nn"
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "x",
              "dask.array.core.Array",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "da",
              "dask.array",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "from_array",
              "dask.array.core.from_array",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "np",
              "numpy",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "arange",
              "numpy.arange",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "10000",
              "",
              "mi"
            ],
            [
              ")",
              "",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "chunks",
              null,
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "10",
              "",
              "mi"
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "h",
              "dask.array.core.Array",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "bins",
              "dask.array.core.Array",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "da",
              "dask.array",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "histogram",
              "dask.array.routines.histogram",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "x",
              "dask.array.core.Array",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "bins",
              null,
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "10",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "range",
              "builtins.range",
              "nb"
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "0",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "10000",
              "",
              "mi"
            ],
            [
              "]",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "bins",
              "dask.array.core.Array",
              ""
            ]
          ],
          "out": "array([    0.,  1000.,  2000.,  3000.,  4000.,  5000.,  6000.,  7000.,\n        8000.,  9000., 10000.])"
        },
        "type": "Code"
      },
      {
        "data": {
          "ce_status": "compiled",
          "entries": [
            [
              "h",
              "dask.array.core.Array",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "compute",
              "dask.base.DaskMethodsMixin.compute",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": "array([1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000])"
        },
        "type": "Code"
      },
      {
        "data": {
          "inline": [
            {
              "data": {
                "value": "Explicitly specifying the bins:"
              },
              "type": "Words"
            }
          ],
          "inner": []
        },
        "type": "Paragraph"
      },
      {
        "data": {
          "ce_status": "compiled",
          "entries": [
            [
              "h",
              "dask.array.core.Array",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "bins",
              "dask.array.core.Array",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "da",
              "dask.array",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "histogram",
              "dask.array.routines.histogram",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "x",
              null,
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "bins",
              null,
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "np",
              "numpy",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "array",
              "numpy.array",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "0",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "5000",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "10000",
              "",
              "mi"
            ],
            [
              "]",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "bins",
              "dask.array.core.Array",
              ""
            ]
          ],
          "out": "array([    0,  5000, 10000])"
        },
        "type": "Code"
      },
      {
        "data": {
          "ce_status": "compiled",
          "entries": [
            [
              "h",
              "dask.array.core.Array",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "compute",
              "dask.base.DaskMethodsMixin.compute",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": "array([5000, 5000])"
        },
        "type": "Code"
      }
    ],
    "title": null
  },
  "item_file": "/dask/array/routines.py",
  "item_line": 824,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Parameters",
    "Returns",
    "Examples"
  ],
  "references": null,
  "refs": [
    "builtins.range",
    "dask",
    "dask.array",
    "dask.array.core.Array",
    "dask.array.core.from_array",
    "dask.array.routines.histogram",
    "dask.base.DaskMethodsMixin.compute",
    "numpy",
    "numpy.arange",
    "numpy.array"
  ],
  "see_also": [],
  "signature": {
    "value": "histogram(a, bins=None, range=None, normed=False, weights=None, density=None)"
  }
}