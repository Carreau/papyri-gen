{
  "_content": {
    "Attributes": {
      "children": [],
      "title": null
    },
    "Extended Summary": {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Some inconsistencies with the Dask version may exist."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Inverse sine, element-wise."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": null
    },
    "Methods": {
      "children": [],
      "title": null
    },
    "Notes": {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "module",
                    "module": "dask",
                    "path": "dask.array.ufunc.arcsin",
                    "version": "2021.10.0"
                  },
                  "value": "arcsin"
                },
                "type": "Link"
              },
              {
                "data": {
                  "value": " is a multivalued function: for each "
                },
                "type": "Words"
              },
              {
                "data": {
                  "exists": true,
                  "kind": "local",
                  "reference": {
                    "kind": "local",
                    "module": null,
                    "path": "x",
                    "version": null
                  },
                  "value": "x"
                },
                "type": "Link"
              },
              {
                "data": {
                  "value": " there are infinitely many numbers "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "z"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " such that "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "sin(z) = x"
                  ]
                },
                "type": "Math"
              },
              {
                "data": {
                  "value": ".  The convention is to return the angle "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "z"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " whose real part lies in [-pi/2, pi/2]."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "For real-valued input data types, "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "arcsin"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": " always returns real output. For each value that cannot be expressed as a real number or infinity, it yields "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "nan"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " and sets the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "invalid"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " floating point error flag."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "For complex-valued input, "
                },
                "type": "Words"
              },
              {
                "data": {
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "module",
                    "module": "dask",
                    "path": "dask.array.ufunc.arcsin",
                    "version": "2021.10.0"
                  },
                  "value": "arcsin"
                },
                "type": "Link"
              },
              {
                "data": {
                  "value": " is a complex analytic function that has, by convention, the branch cuts [-inf, -1] and [1, inf]  and is continuous from above on the former and from below on the latter."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "The inverse sine is also known as "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "asin"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " or sin^{-1}."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": null
    },
    "Other Parameters": {
      "children": [],
      "title": null
    },
    "Parameters": {
      "children": [
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "domain": null,
                        "role": null,
                        "value": "y"
                      },
                      "type": "Directive"
                    },
                    {
                      "data": {
                        "value": "-coordinate on the unit circle."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "x",
            "type_": "array_like"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "A location into which the result is stored. If provided, it must have a shape that the inputs broadcast to. If not provided or None, a freshly-allocated array is returned. A tuple (possible only as a keyword argument) must have length equal to the number of outputs."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "out",
            "type_": "ndarray, None, or tuple of ndarray and None, optional"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "This condition is broadcast over the input. At locations where the condition is True, the "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "local",
                        "reference": {
                          "kind": "local",
                          "module": null,
                          "path": "out",
                          "version": null
                        },
                        "value": "out"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": " array will be set to the ufunc result. Elsewhere, the "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "local",
                        "reference": {
                          "kind": "local",
                          "module": null,
                          "path": "out",
                          "version": null
                        },
                        "value": "out"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": " array will retain its original value. Note that if an uninitialized "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "local",
                        "reference": {
                          "kind": "local",
                          "module": null,
                          "path": "out",
                          "version": null
                        },
                        "value": "out"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": " array is created via the default "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "out=None"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": ", locations within it where the condition is False will remain uninitialized."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "where",
            "type_": "array_like, optional"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "For other keyword-only arguments, see the "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "ufunc docs <ufuncs.kwargs>"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": "."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "**kwargs",
            "type_": ""
          },
          "type": "Param"
        }
      ],
      "title": null
    },
    "Raises": {
      "children": [],
      "title": null
    },
    "Receives": {
      "children": [],
      "title": null
    },
    "Returns": {
      "children": [
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "The inverse sine of each element in "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "local",
                        "reference": {
                          "kind": "local",
                          "module": null,
                          "path": "x",
                          "version": null
                        },
                        "value": "x"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": ", in radians and in the closed interval "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "[-pi/2, pi/2]"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": ". This is a scalar if "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "local",
                        "reference": {
                          "kind": "local",
                          "module": null,
                          "path": "x",
                          "version": null
                        },
                        "value": "x"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": " is a scalar."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "angle",
            "type_": "ndarray"
          },
          "type": "Param"
        }
      ],
      "title": null
    },
    "Summary": {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "This docstring was copied from numpy.arcsin."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": null
    },
    "Warnings": {
      "children": [],
      "title": null
    },
    "Warns": {
      "children": [],
      "title": null
    },
    "Yields": {
      "children": [],
      "title": null
    }
  },
  "aliases": [
    "dask.array.arcsin"
  ],
  "arbitrary": [],
  "example_section_data": {
    "children": [
      {
        "data": {
          "ce_status": "compiled",
          "entries": [
            [
              "np",
              "numpy",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "arcsin",
              "numpy.ufunc",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "1",
              "",
              "mi"
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "     ",
              "",
              ""
            ],
            [
              "# pi/2  # doctest: +SKIP",
              "",
              "c1"
            ]
          ],
          "out": "1.5707963267948966"
        },
        "type": "Code"
      },
      {
        "data": {
          "ce_status": "compiled",
          "entries": [
            [
              "np",
              "numpy",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "arcsin",
              "numpy.ufunc",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "-",
              "",
              "o"
            ],
            [
              "1",
              "",
              "mi"
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "    ",
              "",
              ""
            ],
            [
              "# -pi/2  # doctest: +SKIP",
              "",
              "c1"
            ]
          ],
          "out": "-1.5707963267948966"
        },
        "type": "Code"
      },
      {
        "data": {
          "ce_status": "compiled",
          "entries": [
            [
              "np",
              "numpy",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "arcsin",
              "numpy.ufunc",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "0",
              "",
              "mi"
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "  ",
              "",
              ""
            ],
            [
              "# doctest: +SKIP",
              "",
              "c1"
            ]
          ],
          "out": "0.0"
        },
        "type": "Code"
      }
    ],
    "title": null
  },
  "item_file": "/dask/array/ufunc.py",
  "item_line": null,
  "item_type": "<class 'dask.array.ufunc.ufunc'>",
  "ordered_sections": [
    "Signature",
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns",
    "See Also",
    "Notes",
    "References",
    "Examples"
  ],
  "references": null,
  "refs": [
    "arccos",
    "arctan",
    "arctan2",
    "cos",
    "emath.arcsin",
    "numpy",
    "numpy.ufunc",
    "sin",
    "tan"
  ],
  "see_also": [
    {
      "descriptions": [],
      "name": {
        "exists": true,
        "name": "sin",
        "ref": "dask.array.ufunc.sin"
      },
      "type": null
    },
    {
      "descriptions": [],
      "name": {
        "exists": true,
        "name": "cos",
        "ref": "dask.array.ufunc.cos"
      },
      "type": null
    },
    {
      "descriptions": [],
      "name": {
        "exists": true,
        "name": "arccos",
        "ref": "dask.array.ufunc.arccos"
      },
      "type": null
    },
    {
      "descriptions": [],
      "name": {
        "exists": true,
        "name": "tan",
        "ref": "dask.array.ufunc.tan"
      },
      "type": null
    },
    {
      "descriptions": [],
      "name": {
        "exists": true,
        "name": "arctan",
        "ref": "dask.array.ufunc.arctan"
      },
      "type": null
    },
    {
      "descriptions": [],
      "name": {
        "exists": true,
        "name": "arctan2",
        "ref": "dask.array.ufunc.arctan2"
      },
      "type": null
    },
    {
      "descriptions": [],
      "name": {
        "exists": null,
        "name": "emath.arcsin",
        "ref": null
      },
      "type": null
    }
  ],
  "signature": {
    "value": "arcsin(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])"
  }
}