{
  "_content": {
    "Attributes": {
      "children": [],
      "title": null
    },
    "Extended Summary": {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Some inconsistencies with the Dask version may exist."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Compute the bit-wise AND of two arrays element-wise."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Computes the bit-wise AND of the underlying binary representation of the integers in the input arrays. This ufunc implements the C/Python operator "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "&"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": "."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": null
    },
    "Methods": {
      "children": [],
      "title": null
    },
    "Notes": {
      "children": [],
      "title": null
    },
    "Other Parameters": {
      "children": [],
      "title": null
    },
    "Parameters": {
      "children": [
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Only integer and boolean types are handled. If "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "x1.shape != x2.shape"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": ", they must be broadcastable to a common shape (which becomes the shape of the output)."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "x1, x2",
            "type_": "array_like"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "A location into which the result is stored. If provided, it must have a shape that the inputs broadcast to. If not provided or None, a freshly-allocated array is returned. A tuple (possible only as a keyword argument) must have length equal to the number of outputs."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "out",
            "type_": "ndarray, None, or tuple of ndarray and None, optional"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "This condition is broadcast over the input. At locations where the condition is True, the "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "local",
                        "reference": {
                          "kind": "local",
                          "module": null,
                          "path": "out",
                          "version": null
                        },
                        "value": "out"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": " array will be set to the ufunc result. Elsewhere, the "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "local",
                        "reference": {
                          "kind": "local",
                          "module": null,
                          "path": "out",
                          "version": null
                        },
                        "value": "out"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": " array will retain its original value. Note that if an uninitialized "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "local",
                        "reference": {
                          "kind": "local",
                          "module": null,
                          "path": "out",
                          "version": null
                        },
                        "value": "out"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": " array is created via the default "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "out=None"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": ", locations within it where the condition is False will remain uninitialized."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "where",
            "type_": "array_like, optional"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "For other keyword-only arguments, see the "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "ufunc docs <ufuncs.kwargs>"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": "."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "**kwargs",
            "type_": ""
          },
          "type": "Param"
        }
      ],
      "title": null
    },
    "Raises": {
      "children": [],
      "title": null
    },
    "Receives": {
      "children": [],
      "title": null
    },
    "Returns": {
      "children": [
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Result. This is a scalar if both "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "local",
                        "reference": {
                          "kind": "local",
                          "module": null,
                          "path": "x1",
                          "version": null
                        },
                        "value": "x1"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": " and "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "local",
                        "reference": {
                          "kind": "local",
                          "module": null,
                          "path": "x2",
                          "version": null
                        },
                        "value": "x2"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": " are scalars."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "out",
            "type_": "ndarray or scalar"
          },
          "type": "Param"
        }
      ],
      "title": null
    },
    "Summary": {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "This docstring was copied from numpy.bitwise_and."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": null
    },
    "Warnings": {
      "children": [],
      "title": null
    },
    "Warns": {
      "children": [],
      "title": null
    },
    "Yields": {
      "children": [],
      "title": null
    }
  },
  "aliases": [
    "dask.array.bitwise_and"
  ],
  "arbitrary": [],
  "example_section_data": {
    "children": [
      {
        "data": {
          "inline": [
            {
              "data": {
                "value": "The number 13 is represented by "
              },
              "type": "Words"
            },
            {
              "data": {
                "value": [
                  "00001101"
                ]
              },
              "type": "Verbatim"
            },
            {
              "data": {
                "value": ".  Likewise, 17 is represented by "
              },
              "type": "Words"
            },
            {
              "data": {
                "value": [
                  "00010001"
                ]
              },
              "type": "Verbatim"
            },
            {
              "data": {
                "value": ".  The bit-wise AND of 13 and 17 is therefore "
              },
              "type": "Words"
            },
            {
              "data": {
                "value": [
                  "000000001"
                ]
              },
              "type": "Verbatim"
            },
            {
              "data": {
                "value": ", or 1:"
              },
              "type": "Words"
            }
          ],
          "inner": []
        },
        "type": "Paragraph"
      },
      {
        "data": {
          "ce_status": "compiled",
          "entries": [
            [
              "np",
              "numpy",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "bitwise_and",
              "numpy.ufunc",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "13",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "17",
              "",
              "mi"
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "  ",
              "",
              ""
            ],
            [
              "# doctest: +SKIP",
              "",
              "c1"
            ]
          ],
          "out": "1"
        },
        "type": "Code"
      },
      {
        "data": {
          "ce_status": "compiled",
          "entries": [
            [
              "np",
              "numpy",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "bitwise_and",
              "numpy.ufunc",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "14",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "13",
              "",
              "mi"
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "  ",
              "",
              ""
            ],
            [
              "# doctest: +SKIP",
              "",
              "c1"
            ]
          ],
          "out": "12"
        },
        "type": "Code"
      },
      {
        "data": {
          "ce_status": "compiled",
          "entries": [
            [
              "np",
              "numpy",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "binary_repr",
              "numpy.binary_repr",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "12",
              "",
              "mi"
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "  ",
              "",
              ""
            ],
            [
              "# doctest: +SKIP",
              "",
              "c1"
            ]
          ],
          "out": "'1100'"
        },
        "type": "Code"
      },
      {
        "data": {
          "ce_status": "compiled",
          "entries": [
            [
              "np",
              "numpy",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "bitwise_and",
              "numpy.ufunc",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "14",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              "3",
              "",
              "mi"
            ],
            [
              "]",
              "",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "13",
              "",
              "mi"
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "  ",
              "",
              ""
            ],
            [
              "# doctest: +SKIP",
              "",
              "c1"
            ]
          ],
          "out": "array([12,  1])"
        },
        "type": "Code"
      },
      {
        "data": {
          "ce_status": "compiled",
          "entries": [
            [
              "np",
              "numpy",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "bitwise_and",
              "numpy.ufunc",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "11",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              "7",
              "",
              "mi"
            ],
            [
              "]",
              "",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "4",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              "25",
              "",
              "mi"
            ],
            [
              "]",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "  ",
              "",
              ""
            ],
            [
              "# doctest: +SKIP",
              "",
              "c1"
            ]
          ],
          "out": "array([0, 1])"
        },
        "type": "Code"
      },
      {
        "data": {
          "ce_status": "compiled",
          "entries": [
            [
              "np",
              "numpy",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "bitwise_and",
              "numpy.ufunc",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "np",
              "numpy",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "array",
              "numpy.array",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "2",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              "5",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              "255",
              "",
              "mi"
            ],
            [
              "]",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "np",
              "numpy",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "array",
              "numpy.array",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "3",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              "14",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              "16",
              "",
              "mi"
            ],
            [
              "]",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "  ",
              "",
              ""
            ],
            [
              "# doctest: +SKIP",
              "",
              "c1"
            ]
          ],
          "out": "array([ 2,  4, 16])"
        },
        "type": "Code"
      },
      {
        "data": {
          "ce_status": "compiled",
          "entries": [
            [
              "np",
              "numpy",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "bitwise_and",
              "numpy.ufunc",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "True",
              null,
              "kc"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "True",
              null,
              "kc"
            ],
            [
              "]",
              "",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "False",
              null,
              "kc"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "True",
              null,
              "kc"
            ],
            [
              "]",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "  ",
              "",
              ""
            ],
            [
              "# doctest: +SKIP",
              "",
              "c1"
            ]
          ],
          "out": "array([False,  True])"
        },
        "type": "Code"
      },
      {
        "data": {
          "inline": [
            {
              "data": {
                "value": "The "
              },
              "type": "Words"
            },
            {
              "data": {
                "value": [
                  "&"
                ]
              },
              "type": "Verbatim"
            },
            {
              "data": {
                "value": " operator can be used as a shorthand for "
              },
              "type": "Words"
            },
            {
              "data": {
                "value": [
                  "np.bitwise_and"
                ]
              },
              "type": "Verbatim"
            },
            {
              "data": {
                "value": " on ndarrays."
              },
              "type": "Words"
            }
          ],
          "inner": []
        },
        "type": "Paragraph"
      },
      {
        "data": {
          "ce_status": "compiled",
          "entries": [
            [
              "x1",
              "numpy.ndarray",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "np",
              "numpy",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "array",
              "numpy.array",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "2",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "5",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "255",
              "",
              "mi"
            ],
            [
              "]",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "  ",
              "",
              ""
            ],
            [
              "# doctest: +SKIP",
              "",
              "c1"
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "x2",
              "numpy.ndarray",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "np",
              "numpy",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "array",
              "numpy.array",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "3",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "14",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "16",
              "",
              "mi"
            ],
            [
              "]",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "  ",
              "",
              ""
            ],
            [
              "# doctest: +SKIP",
              "",
              "c1"
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "x1",
              "numpy.ndarray",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "&",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "x2",
              "numpy.ndarray",
              ""
            ],
            [
              "  ",
              "",
              ""
            ],
            [
              "# doctest: +SKIP",
              "",
              "c1"
            ]
          ],
          "out": "array([ 2,  4, 16])"
        },
        "type": "Code"
      }
    ],
    "title": null
  },
  "item_file": "/dask/array/ufunc.py",
  "item_line": null,
  "item_type": "<class 'dask.array.ufunc.ufunc'>",
  "ordered_sections": [
    "Signature",
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns",
    "See Also",
    "Examples"
  ],
  "references": null,
  "refs": [
    "binary_repr",
    "bitwise_or",
    "bitwise_xor",
    "logical_and",
    "numpy",
    "numpy.array",
    "numpy.binary_repr",
    "numpy.ndarray",
    "numpy.ufunc"
  ],
  "see_also": [
    {
      "descriptions": [],
      "name": {
        "exists": true,
        "name": "logical_and",
        "ref": "dask.array.ufunc.logical_and"
      },
      "type": null
    },
    {
      "descriptions": [],
      "name": {
        "exists": true,
        "name": "bitwise_or",
        "ref": "dask.array.ufunc.bitwise_or"
      },
      "type": null
    },
    {
      "descriptions": [],
      "name": {
        "exists": true,
        "name": "bitwise_xor",
        "ref": "dask.array.ufunc.bitwise_xor"
      },
      "type": null
    },
    {
      "descriptions": [
        {
          "inline": [
            {
              "data": {
                "value": "Return the binary representation of the input number as a string."
              },
              "type": "Words"
            }
          ],
          "inner": []
        }
      ],
      "name": {
        "exists": null,
        "name": "binary_repr",
        "ref": null
      },
      "type": null
    }
  ],
  "signature": {
    "value": "bitwise_and(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])"
  }
}