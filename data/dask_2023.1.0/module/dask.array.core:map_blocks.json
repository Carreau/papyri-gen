{
  "aliases": [
    "dask.array.map_blocks",
    "dask.array.Array.map_blocks",
    "dask.array.core.map_blocks"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Note that "
            },
            {
              "type": "inlineCode",
              "value": "map_blocks"
            },
            {
              "type": "text",
              "value": " will attempt to automatically determine the output array type by calling "
            },
            {
              "type": "inlineCode",
              "value": "func"
            },
            {
              "type": "text",
              "value": " on 0-d versions of the inputs. Please refer to the "
            },
            {
              "type": "inlineCode",
              "value": "meta"
            },
            {
              "type": "text",
              "value": " keyword argument below if you expect that the function will not succeed when operating on 0-d arrays."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Function to apply to every block in the array. If "
                    },
                    {
                      "type": "inlineCode",
                      "value": "func"
                    },
                    {
                      "type": "text",
                      "value": " accepts "
                    },
                    {
                      "type": "inlineCode",
                      "value": "block_info="
                    },
                    {
                      "type": "text",
                      "value": " or "
                    },
                    {
                      "type": "inlineCode",
                      "value": "block_id="
                    },
                    {
                      "type": "text",
                      "value": " as keyword arguments, these will be passed dictionaries containing information about input and output chunks/arrays during computation. See examples for details."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "func",
              "type": "Param",
              "type_": "callable"
            },
            {
              "desc": [],
              "param": "args",
              "type": "Param",
              "type_": "dask arrays or other objects"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The "
                    },
                    {
                      "type": "inlineCode",
                      "value": "dtype"
                    },
                    {
                      "type": "text",
                      "value": " of the output array. It is recommended to provide this. If not provided, will be inferred by applying the function to a small set of fake data."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "dtype",
              "type": "Param",
              "type_": "np.dtype, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Chunk shape of resulting blocks if the function does not preserve shape. If not provided, the resulting array is assumed to have the same block structure as the first input array."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "chunks",
              "type": "Param",
              "type_": "tuple, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Dimensions lost by the function."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "drop_axis",
              "type": "Param",
              "type_": "number or iterable, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "New dimensions created by the function. Note that these are applied after "
                    },
                    {
                      "type": "inlineCode",
                      "value": "drop_axis"
                    },
                    {
                      "type": "text",
                      "value": " (if present)."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "new_axis",
              "type": "Param",
              "type_": "number or iterable, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Whether to enforce at runtime that the dimensionality of the array produced by "
                    },
                    {
                      "type": "inlineCode",
                      "value": "func"
                    },
                    {
                      "type": "text",
                      "value": " actually matches that of the array returned by "
                    },
                    {
                      "type": "inlineCode",
                      "value": "map_blocks"
                    },
                    {
                      "type": "text",
                      "value": ". If True, this will raise an error when there is a mismatch."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "enforce_ndim",
              "type": "Param",
              "type_": "bool, default False"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The key prefix to use for the output array. If not provided, will be determined from the function name."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "token",
              "type": "Param",
              "type_": "string, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The key name to use for the output array. Note that this fully specifies the output key name, and must be unique. If not provided, will be determined by a hash of the arguments."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "name",
              "type": "Param",
              "type_": "string, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The "
                    },
                    {
                      "type": "inlineCode",
                      "value": "meta"
                    },
                    {
                      "type": "text",
                      "value": " of the output array, when specified is expected to be an array of the same type and dtype of that returned when calling "
                    },
                    {
                      "type": "inlineCode",
                      "value": ".compute()"
                    },
                    {
                      "type": "text",
                      "value": " on the array returned by this function. When not provided, "
                    },
                    {
                      "type": "inlineCode",
                      "value": "meta"
                    },
                    {
                      "type": "text",
                      "value": " will be inferred by applying the function to a small set of fake data, usually a 0-d array. It's important to ensure that "
                    },
                    {
                      "type": "inlineCode",
                      "value": "func"
                    },
                    {
                      "type": "text",
                      "value": " can successfully complete computation without raising exceptions when 0-d is passed to it, providing "
                    },
                    {
                      "type": "inlineCode",
                      "value": "meta"
                    },
                    {
                      "type": "text",
                      "value": " will be required otherwise. If the output type is known beforehand (e.g., "
                    },
                    {
                      "type": "inlineCode",
                      "value": "np.ndarray"
                    },
                    {
                      "type": "text",
                      "value": ", "
                    },
                    {
                      "type": "inlineCode",
                      "value": "cupy.ndarray"
                    },
                    {
                      "type": "text",
                      "value": "), an empty array of such type dtype can be passed, for example: "
                    },
                    {
                      "type": "inlineCode",
                      "value": "meta=np.array((), dtype=np.int32)"
                    },
                    {
                      "type": "text",
                      "value": "."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "meta",
              "type": "Param",
              "type_": "array-like, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Other keyword arguments to pass to function. Values must be constants (not dask.arrays)"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "**kwargs",
              "type": "Param",
              "type_": ""
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Map a function across all blocks of a dask array."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [
      {
        "type": "code",
        "value": "import dask.array as da\nx = da.arange(6, chunks=3)"
      },
      {
        "type": "code",
        "value": "x.map_blocks(lambda x: x * 2).compute()"
      },
      {
        "type": "text",
        "value": "The ``da.map_blocks`` function can also accept multiple arrays."
      },
      {
        "type": "code",
        "value": "d = da.arange(5, chunks=2)\ne = da.arange(5, chunks=2)"
      },
      {
        "type": "code",
        "value": "f = da.map_blocks(lambda a, b: a + b**2, d, e)\nf.compute()"
      },
      {
        "type": "text",
        "value": "If the function changes shape of the blocks then you must provide chunks\nexplicitly."
      },
      {
        "type": "code",
        "value": "y = x.map_blocks(lambda x: x[::2], chunks=((2, 2),))"
      },
      {
        "type": "text",
        "value": "You have a bit of freedom in specifying chunks.  If all of the output chunk\nsizes are the same, you can provide just that chunk size as a single tuple."
      },
      {
        "type": "code",
        "value": "a = da.arange(18, chunks=(6,))\nb = a.map_blocks(lambda x: x[:3], chunks=(3,))"
      },
      {
        "type": "text",
        "value": "If the function changes the dimension of the blocks you must specify the\ncreated or destroyed dimensions."
      },
      {
        "type": "code",
        "value": "b = a.map_blocks(lambda x: x[None, :, None], chunks=(1, 6, 1),\n                 new_axis=[0, 2])"
      },
      {
        "type": "text",
        "value": "If ``chunks`` is specified but ``new_axis`` is not, then it is inferred to\nadd the necessary number of axes on the left."
      },
      {
        "type": "text",
        "value": "Note that ``map_blocks()`` will concatenate chunks along axes specified by\nthe keyword parameter ``drop_axis`` prior to applying the function.\nThis is illustrated in the figure below:"
      },
      {
        "type": "text",
        "value": ".. image:: /images/map_blocks_drop_axis.png"
      },
      {
        "type": "text",
        "value": "Due to memory-size-constraints, it is often not advisable to use ``drop_axis``\non an axis that is chunked.  In that case, it is better not to use\n``map_blocks`` but rather\n``dask.array.reduction(..., axis=dropped_axes, concatenate=False)`` which\nmaintains a leaner memory footprint while it drops any axis."
      },
      {
        "type": "text",
        "value": "Map_blocks aligns blocks by block positions without regard to shape. In the\nfollowing example we have two arrays with the same number of blocks but\nwith different shape and chunk sizes."
      },
      {
        "type": "code",
        "value": "x = da.arange(1000, chunks=(100,))\ny = da.arange(100, chunks=(10,))"
      },
      {
        "type": "text",
        "value": "The relevant attribute to match is numblocks."
      },
      {
        "type": "code",
        "value": "x.numblocks"
      },
      {
        "type": "code",
        "value": "y.numblocks"
      },
      {
        "type": "text",
        "value": "If these match (up to broadcasting rules) then we can map arbitrary\nfunctions across blocks"
      },
      {
        "type": "code",
        "value": "def func(a, b):\n    return np.array([a.max(), b.max()])"
      },
      {
        "type": "code",
        "value": "da.map_blocks(func, x, y, chunks=(2,), dtype='i8')"
      },
      {
        "type": "code",
        "value": "_.compute()"
      },
      {
        "type": "text",
        "value": "Your block function can get information about where it is in the array by\naccepting a special ``block_info`` or ``block_id`` keyword argument.\nDuring computation, they will contain information about each of the input\nand output chunks (and dask arrays) relevant to each call of ``func``."
      },
      {
        "type": "code",
        "value": "def func(block_info=None):\n    pass"
      },
      {
        "type": "text",
        "value": "This will receive the following information:"
      },
      {
        "type": "code",
        "value": "block_info  # doctest: +SKIP"
      },
      {
        "type": "text",
        "value": "The keys to the ``block_info`` dictionary indicate which is the input and\noutput Dask array:"
      },
      {
        "type": "text",
        "value": "- **Input Dask array(s):** ``block_info[0]`` refers to the first input Dask array.\n  The dictionary key is ``0`` because that is the argument index corresponding\n  to the first input Dask array.\n  In cases where multiple Dask arrays have been passed as input to the function,\n  you can access them with the number corresponding to the input argument,\n  eg: ``block_info[1]``, ``block_info[2]``, etc.\n  (Note that if you pass multiple Dask arrays as input to map_blocks,\n  the arrays must match each other by having matching numbers of chunks,\n  along corresponding dimensions up to broadcasting rules.)\n- **Output Dask array:** ``block_info[None]`` refers to the output Dask array,\n  and contains information about the output chunks.\n  The output chunk shape and dtype may may be different than the input chunks."
      },
      {
        "type": "text",
        "value": "For each dask array, ``block_info`` describes:"
      },
      {
        "type": "text",
        "value": "- ``shape``: the shape of the full Dask array,\n- ``num-chunks``: the number of chunks of the full array in each dimension,\n- ``chunk-location``: the chunk location (for example the fourth chunk over\n  in the first dimension), and\n- ``array-location``: the array location within the full Dask array\n  (for example the slice corresponding to ``40:50``)."
      },
      {
        "type": "text",
        "value": "In addition to these, there are two extra parameters described by\n``block_info`` for the output array (in ``block_info[None]``):"
      },
      {
        "type": "text",
        "value": "- ``chunk-shape``: the output chunk shape, and\n- ``dtype``: the output dtype."
      },
      {
        "type": "text",
        "value": "These features can be combined to synthesize an array from scratch, for\nexample:"
      },
      {
        "type": "code",
        "value": "def func(block_info=None):\n    loc = block_info[None]['array-location'][0]\n    return np.arange(loc[0], loc[1])"
      },
      {
        "type": "code",
        "value": "da.map_blocks(func, chunks=((4, 4),), dtype=np.float_)"
      },
      {
        "type": "code",
        "value": "_.compute()"
      },
      {
        "type": "text",
        "value": "``block_id`` is similar to ``block_info`` but contains only the ``chunk_location``:"
      },
      {
        "type": "code",
        "value": "def func(block_id=None):\n    pass"
      },
      {
        "type": "text",
        "value": "This will receive the following information:"
      },
      {
        "type": "code",
        "value": "block_id  # doctest: +SKIP"
      },
      {
        "type": "text",
        "value": "You may specify the key name prefix of the resulting task in the graph with\nthe optional ``token`` keyword argument."
      },
      {
        "type": "code",
        "value": "x.map_blocks(lambda x: x + 1, name='increment')"
      },
      {
        "type": "text",
        "value": "For functions that may not handle 0-d arrays, it's also possible to specify\n``meta`` with an empty array matching the type of the expected result. In\nthe example below, ``func`` will result in an ``IndexError`` when computing\n``meta``:"
      },
      {
        "type": "code",
        "value": "da.map_blocks(lambda x: x[2], da.random.random(5), meta=np.array(()))"
      },
      {
        "type": "text",
        "value": "Similarly, it's possible to specify a non-NumPy array to ``meta``, and provide\na ``dtype``:"
      },
      {
        "type": "code",
        "value": "import cupy  # doctest: +SKIP\nrs = da.random.RandomState(RandomState=cupy.random.RandomState)  # doctest: +SKIP\ndt = np.float32\nda.map_blocks(lambda x: x[2], rs.random(5, dtype=dt), meta=cupy.array((), dtype=dt))  # doctest: +SKIP"
      }
    ],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/dask/array/core.py",
  "item_line": 525,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "See Also",
    "Examples"
  ],
  "references": null,
  "see_also": [
    {
      "descriptions": [
        {
          "children": [
            {
              "type": "text",
              "value": "Generalized operation with overlap between neighbors."
            }
          ],
          "type": "paragraph"
        }
      ],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "to-resolve",
          "module": "current-module",
          "path": "dask.array.map_overlap",
          "type": "RefInfo",
          "version": "current-version"
        },
        "type": "Link",
        "value": "dask.array.map_overlap"
      },
      "type": null
    },
    {
      "descriptions": [
        {
          "children": [
            {
              "type": "text",
              "value": "Generalized operation with control over block alignment."
            }
          ],
          "type": "paragraph"
        }
      ],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "module",
          "module": "dask",
          "path": "dask.array.blockwise:blockwise",
          "type": "RefInfo",
          "version": "2023.1.0"
        },
        "type": "Link",
        "value": "dask.array.blockwise"
      },
      "type": null
    }
  ],
  "signature": {
    "type": "Signature",
    "value": "(func, *args, name=None, token=None, dtype=None, chunks=None, drop_axis=None, new_axis=None, enforce_ndim=False, meta=None, **kwargs)"
  },
  "type": "DocBlob"
}