{
  "aliases": [
    "dask.array.linalg.RandomState.choice"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "This docstring was copied from numpy.random.mtrand.RandomState.choice."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Some inconsistencies with the Dask version may exist."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "children": [
                {
                  "type": "text",
                  "value": "versionadded 1.7.0"
                }
              ],
              "type": "admonitionTitle"
            }
          ],
          "kind": "note",
          "type": "admonition"
        },
        {
          "children": [
            {
              "children": [
                {
                  "type": "text",
                  "value": "note "
                }
              ],
              "type": "admonitionTitle"
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "New code should use the "
                },
                {
                  "domain": null,
                  "role": null,
                  "type": "Directive",
                  "value": "~numpy.random.Generator.choice"
                },
                {
                  "type": "text",
                  "value": " method of a "
                },
                {
                  "domain": null,
                  "role": null,
                  "type": "Directive",
                  "value": "~numpy.random.Generator"
                },
                {
                  "type": "text",
                  "value": " instance instead; please see the "
                },
                {
                  "domain": null,
                  "role": "ref",
                  "type": "Directive",
                  "value": "random-quick-start"
                },
                {
                  "type": "text",
                  "value": "."
                }
              ],
              "type": "paragraph"
            }
          ],
          "kind": "note",
          "type": "admonition"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Setting user-specified probabilities through "
            },
            {
              "type": "inlineCode",
              "value": "p"
            },
            {
              "type": "text",
              "value": " uses a more general but less efficient sampler than the default. The general sampler produces a different sample than the optimized sampler even if each element of "
            },
            {
              "type": "inlineCode",
              "value": "p"
            },
            {
              "type": "text",
              "value": " is 1 / len(a)."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Sampling random rows from a 2-D array is not possible with this function, but is possible with "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "Generator.choice"
            },
            {
              "type": "text",
              "value": " through its "
            },
            {
              "type": "inlineCode",
              "value": "axis"
            },
            {
              "type": "text",
              "value": " keyword."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "If an ndarray, a random sample is generated from its elements. If an int, the random sample is generated as if it were "
                    },
                    {
                      "type": "inlineCode",
                      "value": "np.arange(a)"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "a",
              "type": "Param",
              "type_": "1-D array-like or int"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Output shape.  If the given shape is, e.g., "
                    },
                    {
                      "type": "inlineCode",
                      "value": "(m, n, k)"
                    },
                    {
                      "type": "text",
                      "value": ", then "
                    },
                    {
                      "type": "inlineCode",
                      "value": "m * n * k"
                    },
                    {
                      "type": "text",
                      "value": " samples are drawn.  Default is None, in which case a single value is returned."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "size",
              "type": "Param",
              "type_": "int or tuple of ints, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Whether the sample is with or without replacement. Default is True, meaning that a value of "
                    },
                    {
                      "type": "inlineCode",
                      "value": "a"
                    },
                    {
                      "type": "text",
                      "value": " can be selected multiple times."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "replace",
              "type": "Param",
              "type_": "boolean, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The probabilities associated with each entry in a. If not given, the sample assumes a uniform distribution over all entries in "
                    },
                    {
                      "type": "inlineCode",
                      "value": "a"
                    },
                    {
                      "type": "text",
                      "value": "."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "p",
              "type": "Param",
              "type_": "1-D array-like, optional"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "If a is an int and less than zero, if a or p are not 1-dimensional, if a is an array-like of size 0, if p is not a vector of probabilities, if a and p have different lengths, or if replace=False and the sample size is greater than the population size"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "",
              "type": "Param",
              "type_": "ValueError"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The generated random samples"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "samples",
              "type": "Param",
              "type_": "single item or ndarray"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Generates a random sample from a given 1-D array"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [
      {
        "type": "text",
        "value": "Generate a uniform random sample from np.arange(5) of size 3:"
      },
      {
        "type": "code",
        "value": "np.random.choice(5, 3)  # doctest: +SKIP"
      },
      {
        "type": "code",
        "value": "#This is equivalent to np.random.randint(0,5,3)"
      },
      {
        "type": "text",
        "value": "Generate a non-uniform random sample from np.arange(5) of size 3:"
      },
      {
        "type": "code",
        "value": "np.random.choice(5, 3, p=[0.1, 0, 0.3, 0.6, 0])  # doctest: +SKIP"
      },
      {
        "type": "text",
        "value": "Generate a uniform random sample from np.arange(5) of size 3 without\nreplacement:"
      },
      {
        "type": "code",
        "value": "np.random.choice(5, 3, replace=False)  # doctest: +SKIP"
      },
      {
        "type": "code",
        "value": "#This is equivalent to np.random.permutation(np.arange(5))[:3]"
      },
      {
        "type": "text",
        "value": "Generate a non-uniform random sample from np.arange(5) of size\n3 without replacement:"
      },
      {
        "type": "code",
        "value": "np.random.choice(5, 3, replace=False, p=[0.1, 0, 0.3, 0.6, 0])  # doctest: +SKIP"
      },
      {
        "type": "text",
        "value": "Any of the above can be repeated with an arbitrary array-like\ninstead of just integers. For instance:"
      },
      {
        "type": "code",
        "value": "aa_milne_arr = ['pooh', 'rabbit', 'piglet', 'Christopher']  # doctest: +SKIP\nnp.random.choice(aa_milne_arr, 5, p=[0.5, 0.1, 0.1, 0.3])  # doctest: +SKIP"
      }
    ],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/dask/array/random.py",
  "item_line": 198,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns",
    "Raises",
    "See Also",
    "Notes",
    "Examples"
  ],
  "references": null,
  "see_also": [
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "module",
          "module": "dask",
          "path": "dask.array.random:RandomState.randint",
          "type": "RefInfo",
          "version": "2023.1.0"
        },
        "type": "Link",
        "value": "randint"
      },
      "type": null
    },
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "module",
          "module": "dask",
          "path": "dask.array.slicing:shuffle_slice",
          "type": "RefInfo",
          "version": "2023.1.0"
        },
        "type": "Link",
        "value": "shuffle"
      },
      "type": null
    },
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "module",
          "module": "dask",
          "path": "dask.array.random:RandomState.permutation",
          "type": "RefInfo",
          "version": "2023.1.0"
        },
        "type": "Link",
        "value": "permutation"
      },
      "type": null
    },
    {
      "descriptions": [
        {
          "children": [
            {
              "type": "text",
              "value": "which should be used in new code"
            }
          ],
          "type": "paragraph"
        }
      ],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "to-resolve",
          "module": "current-module",
          "path": "random.Generator.choice",
          "type": "RefInfo",
          "version": "current-version"
        },
        "type": "Link",
        "value": "random.Generator.choice"
      },
      "type": null
    }
  ],
  "signature": {
    "type": "Signature",
    "value": "(self, a, size=None, replace=True, p=None, chunks='auto')"
  },
  "type": "DocBlob"
}