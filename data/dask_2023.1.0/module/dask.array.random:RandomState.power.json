{
  "aliases": [
    "dask.array.linalg.RandomState.power"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "This docstring was copied from numpy.random.mtrand.RandomState.power."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Some inconsistencies with the Dask version may exist."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Also known as the power function distribution."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "children": [
                {
                  "type": "text",
                  "value": "note "
                }
              ],
              "type": "admonitionTitle"
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "New code should use the "
                },
                {
                  "domain": null,
                  "role": null,
                  "type": "Directive",
                  "value": "~numpy.random.Generator.power"
                },
                {
                  "type": "text",
                  "value": " method of a "
                },
                {
                  "domain": null,
                  "role": null,
                  "type": "Directive",
                  "value": "~numpy.random.Generator"
                },
                {
                  "type": "text",
                  "value": " instance instead; please see the "
                },
                {
                  "domain": null,
                  "role": "ref",
                  "type": "Directive",
                  "value": "random-quick-start"
                },
                {
                  "type": "text",
                  "value": "."
                }
              ],
              "type": "paragraph"
            }
          ],
          "kind": "note",
          "type": "admonition"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "The probability density function is"
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "math",
          "value": "P(x; a) = ax^{a-1}, 0 \\le x \\le 1, a>0."
        },
        {
          "children": [
            {
              "type": "text",
              "value": "The power function distribution is just the inverse of the Pareto distribution. It may also be seen as a special case of the Beta distribution."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "It is used, for example, in modeling the over-reporting of insurance claims."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Parameter of the distribution. Must be non-negative."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "a",
              "type": "Param",
              "type_": "float or array_like of floats"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Output shape.  If the given shape is, e.g., "
                    },
                    {
                      "type": "inlineCode",
                      "value": "(m, n, k)"
                    },
                    {
                      "type": "text",
                      "value": ", then "
                    },
                    {
                      "type": "inlineCode",
                      "value": "m * n * k"
                    },
                    {
                      "type": "text",
                      "value": " samples are drawn.  If size is "
                    },
                    {
                      "type": "inlineCode",
                      "value": "None"
                    },
                    {
                      "type": "text",
                      "value": " (default), a single value is returned if "
                    },
                    {
                      "type": "inlineCode",
                      "value": "a"
                    },
                    {
                      "type": "text",
                      "value": " is a scalar.  Otherwise, "
                    },
                    {
                      "type": "inlineCode",
                      "value": "np.array(a).size"
                    },
                    {
                      "type": "text",
                      "value": " samples are drawn."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "size",
              "type": "Param",
              "type_": "int or tuple of ints, optional"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "If a <= 0."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "",
              "type": "Param",
              "type_": "ValueError"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Drawn samples from the parameterized power distribution."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "out",
              "type": "Param",
              "type_": "ndarray or scalar"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Draws samples in [0, 1] from a power distribution with positive exponent a - 1."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [
      {
        "type": "text",
        "value": "Draw samples from the distribution:"
      },
      {
        "type": "code",
        "value": "a = 5. # shape  # doctest: +SKIP\nsamples = 1000  # doctest: +SKIP\ns = np.random.power(a, samples)  # doctest: +SKIP"
      },
      {
        "type": "text",
        "value": "Display the histogram of the samples, along with\nthe probability density function:"
      },
      {
        "type": "code",
        "value": "import matplotlib.pyplot as plt  # doctest: +SKIP\ncount, bins, ignored = plt.hist(s, bins=30)  # doctest: +SKIP\nx = np.linspace(0, 1, 100)  # doctest: +SKIP\ny = a*x**(a-1.)  # doctest: +SKIP\nnormed_y = samples*np.diff(bins)[0]*y  # doctest: +SKIP\nplt.plot(x, normed_y)  # doctest: +SKIP\nplt.show()  # doctest: +SKIP"
      },
      {
        "type": "text",
        "value": "Compare the power function distribution to the inverse of the Pareto."
      },
      {
        "type": "code",
        "value": "from scipy import stats # doctest: +SKIP\nrvs = np.random.power(5, 1000000)  # doctest: +SKIP\nrvsp = np.random.pareto(5, 1000000)  # doctest: +SKIP\nxx = np.linspace(0,1,100)  # doctest: +SKIP\npowpdf = stats.powerlaw.pdf(xx,5)  # doctest: +SKIP"
      },
      {
        "type": "code",
        "value": "plt.figure()  # doctest: +SKIP\nplt.hist(rvs, bins=50, density=True)  # doctest: +SKIP\nplt.plot(xx,powpdf,'r-')  # doctest: +SKIP\nplt.title('np.random.power(5)')  # doctest: +SKIP"
      },
      {
        "type": "code",
        "value": "plt.figure()  # doctest: +SKIP\nplt.hist(1./(1.+rvsp), bins=50, density=True)  # doctest: +SKIP\nplt.plot(xx,powpdf,'r-')  # doctest: +SKIP\nplt.title('inverse of 1 + np.random.pareto(5)')  # doctest: +SKIP"
      },
      {
        "type": "code",
        "value": "plt.figure()  # doctest: +SKIP\nplt.hist(1./(1.+rvsp), bins=50, density=True)  # doctest: +SKIP\nplt.plot(xx,powpdf,'r-')  # doctest: +SKIP\nplt.title('inverse of stats.pareto(5)')  # doctest: +SKIP"
      }
    ],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/dask/array/random.py",
  "item_line": 365,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns",
    "Raises",
    "See Also",
    "Notes",
    "References",
    "Examples"
  ],
  "references": null,
  "see_also": [
    {
      "descriptions": [
        {
          "children": [
            {
              "type": "text",
              "value": "which should be used for new code."
            }
          ],
          "type": "paragraph"
        }
      ],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "to-resolve",
          "module": "current-module",
          "path": "random.Generator.power",
          "type": "RefInfo",
          "version": "current-version"
        },
        "type": "Link",
        "value": "random.Generator.power"
      },
      "type": null
    }
  ],
  "signature": {
    "type": "Signature",
    "value": "(self, a, size=None, chunks='auto', **kwargs)"
  },
  "type": "DocBlob"
}