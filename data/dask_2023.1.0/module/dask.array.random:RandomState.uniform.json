{
  "aliases": [
    "dask.array.linalg.RandomState.uniform"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "This docstring was copied from numpy.random.mtrand.RandomState.uniform."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Some inconsistencies with the Dask version may exist."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Samples are uniformly distributed over the half-open interval "
            },
            {
              "type": "inlineCode",
              "value": "[low, high)"
            },
            {
              "type": "text",
              "value": " (includes low, but excludes high).  In other words, any value within the given interval is equally likely to be drawn by "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "module",
              "reference": {
                "kind": "module",
                "module": "dask",
                "path": "dask.array.random:RandomState.uniform",
                "type": "RefInfo",
                "version": "2023.1.0"
              },
              "type": "Link",
              "value": "uniform"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "children": [
                {
                  "type": "text",
                  "value": "note "
                }
              ],
              "type": "admonitionTitle"
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "New code should use the "
                },
                {
                  "domain": null,
                  "role": null,
                  "type": "Directive",
                  "value": "~numpy.random.Generator.uniform"
                },
                {
                  "type": "text",
                  "value": " method of a "
                },
                {
                  "domain": null,
                  "role": null,
                  "type": "Directive",
                  "value": "~numpy.random.Generator"
                },
                {
                  "type": "text",
                  "value": " instance instead; please see the "
                },
                {
                  "domain": null,
                  "role": "ref",
                  "type": "Directive",
                  "value": "random-quick-start"
                },
                {
                  "type": "text",
                  "value": "."
                }
              ],
              "type": "paragraph"
            }
          ],
          "kind": "note",
          "type": "admonition"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "The probability density function of the uniform distribution is"
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "math",
          "value": "p(x) = \\frac{1}{b - a}"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "anywhere within the interval "
            },
            {
              "type": "inlineCode",
              "value": "[a, b)"
            },
            {
              "type": "text",
              "value": ", and zero elsewhere."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "When "
            },
            {
              "type": "inlineCode",
              "value": "high"
            },
            {
              "type": "text",
              "value": " == "
            },
            {
              "type": "inlineCode",
              "value": "low"
            },
            {
              "type": "text",
              "value": ", values of "
            },
            {
              "type": "inlineCode",
              "value": "low"
            },
            {
              "type": "text",
              "value": " will be returned. If "
            },
            {
              "type": "inlineCode",
              "value": "high"
            },
            {
              "type": "text",
              "value": " < "
            },
            {
              "type": "inlineCode",
              "value": "low"
            },
            {
              "type": "text",
              "value": ", the results are officially undefined and may eventually raise an error, i.e. do not rely on this function to behave when passed arguments satisfying that inequality condition. The "
            },
            {
              "type": "inlineCode",
              "value": "high"
            },
            {
              "type": "text",
              "value": " limit may be included in the returned array of floats due to floating-point rounding in the equation "
            },
            {
              "type": "inlineCode",
              "value": "low + (high-low) * random_sample()"
            },
            {
              "type": "text",
              "value": ". For example:"
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": ">>> x = np.float32(5*0.99999999)  # doctest: +SKIP\n>>> x  # doctest: +SKIP\n5.0"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Lower boundary of the output interval.  All values generated will be greater than or equal to low.  The default value is 0."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "low",
              "type": "Param",
              "type_": "float or array_like of floats, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Upper boundary of the output interval.  All values generated will be less than or equal to high.  The high limit may be included in the returned array of floats due to floating-point rounding in the equation "
                    },
                    {
                      "type": "inlineCode",
                      "value": "low + (high-low) * random_sample()"
                    },
                    {
                      "type": "text",
                      "value": ".  The default value is 1.0."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "high",
              "type": "Param",
              "type_": "float or array_like of floats"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Output shape.  If the given shape is, e.g., "
                    },
                    {
                      "type": "inlineCode",
                      "value": "(m, n, k)"
                    },
                    {
                      "type": "text",
                      "value": ", then "
                    },
                    {
                      "type": "inlineCode",
                      "value": "m * n * k"
                    },
                    {
                      "type": "text",
                      "value": " samples are drawn.  If size is "
                    },
                    {
                      "type": "inlineCode",
                      "value": "None"
                    },
                    {
                      "type": "text",
                      "value": " (default), a single value is returned if "
                    },
                    {
                      "type": "inlineCode",
                      "value": "low"
                    },
                    {
                      "type": "text",
                      "value": " and "
                    },
                    {
                      "type": "inlineCode",
                      "value": "high"
                    },
                    {
                      "type": "text",
                      "value": " are both scalars. Otherwise, "
                    },
                    {
                      "type": "inlineCode",
                      "value": "np.broadcast(low, high).size"
                    },
                    {
                      "type": "text",
                      "value": " samples are drawn."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "size",
              "type": "Param",
              "type_": "int or tuple of ints, optional"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Drawn samples from the parameterized uniform distribution."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "out",
              "type": "Param",
              "type_": "ndarray or scalar"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Draw samples from a uniform distribution."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [
      {
        "type": "text",
        "value": "Draw samples from the distribution:"
      },
      {
        "type": "code",
        "value": "s = np.random.uniform(-1,0,1000)  # doctest: +SKIP"
      },
      {
        "type": "text",
        "value": "All values are within the given interval:"
      },
      {
        "type": "code",
        "value": "np.all(s >= -1)  # doctest: +SKIP"
      },
      {
        "type": "code",
        "value": "np.all(s < 0)  # doctest: +SKIP"
      },
      {
        "type": "text",
        "value": "Display the histogram of the samples, along with the\nprobability density function:"
      },
      {
        "type": "code",
        "value": "import matplotlib.pyplot as plt  # doctest: +SKIP\ncount, bins, ignored = plt.hist(s, 15, density=True)  # doctest: +SKIP\nplt.plot(bins, np.ones_like(bins), linewidth=2, color='r')  # doctest: +SKIP\nplt.show()  # doctest: +SKIP"
      }
    ],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/dask/array/random.py",
  "item_line": 421,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns",
    "See Also",
    "Notes",
    "Examples"
  ],
  "references": null,
  "see_also": [
    {
      "descriptions": [
        {
          "children": [
            {
              "type": "text",
              "value": "Discrete uniform distribution, yielding integers."
            }
          ],
          "type": "paragraph"
        }
      ],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "module",
          "module": "dask",
          "path": "dask.array.random:RandomState.randint",
          "type": "RefInfo",
          "version": "2023.1.0"
        },
        "type": "Link",
        "value": "randint"
      },
      "type": null
    },
    {
      "descriptions": [
        {
          "children": [
            {
              "type": "text",
              "value": "Discrete uniform distribution over the closed interval "
            },
            {
              "type": "inlineCode",
              "value": "[low, high]"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        }
      ],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "module",
          "module": "dask",
          "path": "dask.array.random:RandomState.random_integers",
          "type": "RefInfo",
          "version": "2023.1.0"
        },
        "type": "Link",
        "value": "random_integers"
      },
      "type": null
    },
    {
      "descriptions": [
        {
          "children": [
            {
              "type": "text",
              "value": "Floats uniformly distributed over "
            },
            {
              "type": "inlineCode",
              "value": "[0, 1)"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        }
      ],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "module",
          "module": "dask",
          "path": "dask.array.random:RandomState.random_sample",
          "type": "RefInfo",
          "version": "2023.1.0"
        },
        "type": "Link",
        "value": "random_sample"
      },
      "type": null
    },
    {
      "descriptions": [
        {
          "children": [
            {
              "type": "text",
              "value": "Alias for "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "random_sample"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        }
      ],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "module",
          "module": "dask",
          "path": "dask.array.random",
          "type": "RefInfo",
          "version": "2023.1.0"
        },
        "type": "Link",
        "value": "random"
      },
      "type": null
    },
    {
      "descriptions": [
        {
          "children": [
            {
              "type": "text",
              "value": "Convenience function that accepts dimensions as input, e.g., "
            },
            {
              "type": "inlineCode",
              "value": "rand(2,2)"
            },
            {
              "type": "text",
              "value": " would generate a 2-by-2 array of floats, uniformly distributed over "
            },
            {
              "type": "inlineCode",
              "value": "[0, 1)"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        }
      ],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "to-resolve",
          "module": "current-module",
          "path": "rand",
          "type": "RefInfo",
          "version": "current-version"
        },
        "type": "Link",
        "value": "rand"
      },
      "type": null
    },
    {
      "descriptions": [
        {
          "children": [
            {
              "type": "text",
              "value": "which should be used for new code."
            }
          ],
          "type": "paragraph"
        }
      ],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "to-resolve",
          "module": "current-module",
          "path": "random.Generator.uniform",
          "type": "RefInfo",
          "version": "current-version"
        },
        "type": "Link",
        "value": "random.Generator.uniform"
      },
      "type": null
    }
  ],
  "signature": {
    "type": "Signature",
    "value": "(self, low=0.0, high=1.0, size=None, chunks='auto', **kwargs)"
  },
  "type": "DocBlob"
}