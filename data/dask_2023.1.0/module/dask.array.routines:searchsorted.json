{
  "aliases": [
    "dask.array.searchsorted"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "This docstring was copied from numpy.searchsorted."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Some inconsistencies with the Dask version may exist."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Find the indices into a sorted array "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "a",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "a"
            },
            {
              "type": "text",
              "value": " such that, if the corresponding elements in "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "v",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "v"
            },
            {
              "type": "text",
              "value": " were inserted before the indices, the order of "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "a",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "a"
            },
            {
              "type": "text",
              "value": " would be preserved."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Assuming that "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "a",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "a"
            },
            {
              "type": "text",
              "value": " is sorted:"
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "======  ============================ "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "side",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "side"
            },
            {
              "type": "text",
              "value": "  returned index "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "i"
            },
            {
              "type": "text",
              "value": " satisfies ======  ============================ left    "
            },
            {
              "type": "inlineCode",
              "value": "a[i-1] < v <= a[i]"
            },
            {
              "type": "text",
              "value": " right   "
            },
            {
              "type": "inlineCode",
              "value": "a[i-1] <= v < a[i]"
            },
            {
              "type": "text",
              "value": " ======  ============================"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Binary search is used to find the required insertion points."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "As of NumPy 1.4.0 "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "searchsorted"
            },
            {
              "type": "text",
              "value": " works with real/complex arrays containing "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "nan"
            },
            {
              "type": "text",
              "value": " values. The enhanced sort order is documented in "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "sort"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "This function uses the same algorithm as the builtin python "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "module",
              "reference": {
                "kind": "api",
                "module": "_bisect",
                "path": "_bisect:bisect_left",
                "type": "RefInfo",
                "version": "*"
              },
              "type": "Link",
              "value": "bisect.bisect_left"
            },
            {
              "type": "text",
              "value": " ("
            },
            {
              "type": "inlineCode",
              "value": "side='left'"
            },
            {
              "type": "text",
              "value": ") and "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "module",
              "reference": {
                "kind": "api",
                "module": "_bisect",
                "path": "_bisect:bisect_right",
                "type": "RefInfo",
                "version": "*"
              },
              "type": "Link",
              "value": "bisect.bisect_right"
            },
            {
              "type": "text",
              "value": " ("
            },
            {
              "type": "inlineCode",
              "value": "side='right'"
            },
            {
              "type": "text",
              "value": ") functions, which is also vectorized in the "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "v",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "v"
            },
            {
              "type": "text",
              "value": " argument."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Input array. If "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "sorter",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "sorter"
                    },
                    {
                      "type": "text",
                      "value": " is None, then it must be sorted in ascending order, otherwise "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "sorter",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "sorter"
                    },
                    {
                      "type": "text",
                      "value": " must be an array of indices that sort it."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "a",
              "type": "Param",
              "type_": "1-D array_like"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Values to insert into "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "a",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "a"
                    },
                    {
                      "type": "text",
                      "value": "."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "v",
              "type": "Param",
              "type_": "array_like"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "If 'left', the index of the first suitable location found is given. If 'right', return the last such index.  If there is no suitable index, return either 0 or N (where N is the length of "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "a",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "a"
                    },
                    {
                      "type": "text",
                      "value": ")."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "side",
              "type": "Param",
              "type_": "{'left', 'right'}, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Optional array of integer indices that sort array a into ascending order. They are typically the result of argsort."
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "versionadded 1.7.0"
                        }
                      ],
                      "type": "admonitionTitle"
                    }
                  ],
                  "kind": "note",
                  "type": "admonition"
                }
              ],
              "param": "sorter",
              "type": "Param",
              "type_": "1-D array_like, optional"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Array of insertion points with the same shape as "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "v",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "v"
                    },
                    {
                      "type": "text",
                      "value": ", or an integer if "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "v",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "v"
                    },
                    {
                      "type": "text",
                      "value": " is a scalar."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "indices",
              "type": "Param",
              "type_": "int or array of ints"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Find indices where elements should be inserted to maintain order."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [
      {
        "type": "code",
        "value": "np.searchsorted([1,2,3,4,5], 3)  # doctest: +SKIP"
      },
      {
        "type": "code",
        "value": "np.searchsorted([1,2,3,4,5], 3, side='right')  # doctest: +SKIP"
      },
      {
        "type": "code",
        "value": "np.searchsorted([1,2,3,4,5], [-10, 10, 2, 3])  # doctest: +SKIP"
      }
    ],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/dask/array/routines.py",
  "item_line": 806,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns",
    "See Also",
    "Notes",
    "Examples"
  ],
  "references": null,
  "see_also": [
    {
      "descriptions": [
        {
          "children": [
            {
              "type": "text",
              "value": "Return a sorted copy of an array."
            }
          ],
          "type": "paragraph"
        }
      ],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "to-resolve",
          "module": "current-module",
          "path": "sort",
          "type": "RefInfo",
          "version": "current-version"
        },
        "type": "Link",
        "value": "sort"
      },
      "type": null
    },
    {
      "descriptions": [
        {
          "children": [
            {
              "type": "text",
              "value": "Produce histogram from 1-D data."
            }
          ],
          "type": "paragraph"
        }
      ],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "to-resolve",
          "module": "current-module",
          "path": "histogram",
          "type": "RefInfo",
          "version": "current-version"
        },
        "type": "Link",
        "value": "histogram"
      },
      "type": null
    }
  ],
  "signature": {
    "type": "Signature",
    "value": "(a, v, side='left', sorter=None)"
  },
  "type": "DocBlob"
}