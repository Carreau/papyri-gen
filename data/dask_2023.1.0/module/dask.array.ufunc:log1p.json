{
  "aliases": [
    "dask.array.log1p"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Some inconsistencies with the Dask version may exist."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Return the natural logarithm of one plus the input array, element-wise."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Calculates "
            },
            {
              "type": "inlineCode",
              "value": "log(1 + x)"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "For real-valued input, "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "module",
              "reference": {
                "kind": "module",
                "module": "dask",
                "path": "dask.array.ufunc:log1p",
                "type": "RefInfo",
                "version": "2023.1.0"
              },
              "type": "Link",
              "value": "log1p"
            },
            {
              "type": "text",
              "value": " is accurate also for "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "x",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "x"
            },
            {
              "type": "text",
              "value": " so small that "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "1 + x == 1"
            },
            {
              "type": "text",
              "value": " in floating-point accuracy."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Logarithm is a multivalued function: for each "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "x",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "x"
            },
            {
              "type": "text",
              "value": " there is an infinite number of "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "z"
            },
            {
              "type": "text",
              "value": " such that "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "exp(z) = 1 + x"
            },
            {
              "type": "text",
              "value": ". The convention is to return the "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "z"
            },
            {
              "type": "text",
              "value": " whose imaginary part lies in "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "[-pi, pi]"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "For real-valued input data types, "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "module",
              "reference": {
                "kind": "module",
                "module": "dask",
                "path": "dask.array.ufunc:log1p",
                "type": "RefInfo",
                "version": "2023.1.0"
              },
              "type": "Link",
              "value": "log1p"
            },
            {
              "type": "text",
              "value": " always returns real output. For each value that cannot be expressed as a real number or infinity, it yields "
            },
            {
              "type": "inlineCode",
              "value": "nan"
            },
            {
              "type": "text",
              "value": " and sets the "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "invalid"
            },
            {
              "type": "text",
              "value": " floating point error flag."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "For complex-valued input, "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "module",
              "reference": {
                "kind": "module",
                "module": "dask",
                "path": "dask.array.ufunc:log1p",
                "type": "RefInfo",
                "version": "2023.1.0"
              },
              "type": "Link",
              "value": "log1p"
            },
            {
              "type": "text",
              "value": " is a complex analytical function that has a branch cut "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "[-inf, -1]"
            },
            {
              "type": "text",
              "value": " and is continuous from above on it. "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "module",
              "reference": {
                "kind": "module",
                "module": "dask",
                "path": "dask.array.ufunc:log1p",
                "type": "RefInfo",
                "version": "2023.1.0"
              },
              "type": "Link",
              "value": "log1p"
            },
            {
              "type": "text",
              "value": " handles the floating-point negative zero as an infinitesimal negative number, conforming to the C99 standard."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Input values."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "x",
              "type": "Param",
              "type_": "array_like"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "A location into which the result is stored. If provided, it must have a shape that the inputs broadcast to. If not provided or None, a freshly-allocated array is returned. A tuple (possible only as a keyword argument) must have length equal to the number of outputs."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "out",
              "type": "Param",
              "type_": "ndarray, None, or tuple of ndarray and None, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "This condition is broadcast over the input. At locations where the condition is True, the "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "out",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "out"
                    },
                    {
                      "type": "text",
                      "value": " array will be set to the ufunc result. Elsewhere, the "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "out",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "out"
                    },
                    {
                      "type": "text",
                      "value": " array will retain its original value. Note that if an uninitialized "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "out",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "out"
                    },
                    {
                      "type": "text",
                      "value": " array is created via the default "
                    },
                    {
                      "type": "inlineCode",
                      "value": "out=None"
                    },
                    {
                      "type": "text",
                      "value": ", locations within it where the condition is False will remain uninitialized."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "where",
              "type": "Param",
              "type_": "array_like, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "For other keyword-only arguments, see the "
                    },
                    {
                      "type": "inlineCode",
                      "value": "ufunc docs <ufuncs.kwargs>"
                    },
                    {
                      "type": "text",
                      "value": "."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "**kwargs",
              "type": "Param",
              "type_": ""
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Natural logarithm of "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "1 + x"
                    },
                    {
                      "type": "text",
                      "value": ", element-wise. This is a scalar if "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "x",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "x"
                    },
                    {
                      "type": "text",
                      "value": " is a scalar."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "y",
              "type": "Param",
              "type_": "ndarray"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "This docstring was copied from numpy.log1p."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [
      {
        "type": "code",
        "value": "np.log1p(1e-99)  # doctest: +SKIP"
      },
      {
        "type": "code",
        "value": "np.log(1 + 1e-99)  # doctest: +SKIP"
      }
    ],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/dask/array/ufunc.py",
  "item_line": null,
  "item_type": "<class 'dask.array.ufunc.ufunc'>",
  "ordered_sections": [
    "Signature",
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns",
    "See Also",
    "Notes",
    "References",
    "Examples"
  ],
  "references": null,
  "see_also": [
    {
      "descriptions": [
        {
          "children": [
            {
              "type": "inlineCode",
              "value": "exp(x) - 1"
            },
            {
              "type": "text",
              "value": ", the inverse of "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "log1p"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        }
      ],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "module",
          "module": "dask",
          "path": "dask.array.ufunc:expm1",
          "type": "RefInfo",
          "version": "2023.1.0"
        },
        "type": "Link",
        "value": "expm1"
      },
      "type": null
    }
  ],
  "signature": {
    "type": "Signature",
    "value": "log1p(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])"
  },
  "type": "DocBlob"
}