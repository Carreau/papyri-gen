{
  "aliases": [
    "dask.annotate"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Annotations are metadata or soft constraints associated with tasks that dask schedulers may choose to respect: They signal intent without enforcing hard constraints. As such, they are primarily designed for use with the distributed scheduler."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Almost any object can serve as an annotation, but small Python objects are preferred, while large objects such as NumPy arrays are discouraged."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Callables supplied as an annotation should take a single "
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "key"
                }
              ],
              "type": "emphasis"
            },
            {
              "type": "text",
              "value": " argument and produce the appropriate annotation. Individual task keys in the annotated collection are supplied to the callable."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [],
              "param": "**annotations",
              "type": "Param",
              "type_": "key-value pairs"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Context Manager for setting HighLevelGraph Layer annotations."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [
      {
        "type": "text",
        "value": "All tasks within array A should have priority 100 and be retried 3 times\non failure."
      },
      {
        "type": "code",
        "value": "import dask\nimport dask.array as da\nwith dask.annotate(priority=100, retries=3):\n    A = da.ones((10000, 10000))"
      },
      {
        "type": "text",
        "value": "Prioritise tasks within Array A on flattened block ID."
      },
      {
        "type": "code",
        "value": "nblocks = (10, 10)\nwith dask.annotate(priority=lambda k: k[1]*nblocks[1] + k[2]):\n    A = da.ones((1000, 1000), chunks=(100, 100))"
      },
      {
        "type": "text",
        "value": "Annotations may be nested."
      },
      {
        "type": "code",
        "value": "with dask.annotate(priority=1):\n    with dask.annotate(retries=3):\n        A = da.ones((1000, 1000))\n    B = A + 1"
      }
    ],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/dask/base.py",
  "item_line": 54,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Examples"
  ],
  "references": null,
  "see_also": [],
  "signature": {
    "type": "Signature",
    "value": "(**annotations)"
  },
  "type": "DocBlob"
}