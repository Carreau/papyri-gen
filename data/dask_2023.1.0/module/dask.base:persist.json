{
  "aliases": [
    "dask.persist"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "This turns lazy Dask collections into Dask collections with the same metadata, but now with their results fully computed or actively computing in the background."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "For example a lazy dask.array built up from many lazy calls will now be a dask.array of the same shape, dtype, chunks, etc., but now with all of those previously lazy tasks either computed in memory as many small "
            },
            {
              "type": "inlineCode",
              "value": "numpy.array"
            },
            {
              "type": "text",
              "value": " (in the single-machine case) or asynchronously running in the background on a cluster (in the distributed case)."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "This function operates differently if a "
            },
            {
              "type": "inlineCode",
              "value": "dask.distributed.Client"
            },
            {
              "type": "text",
              "value": " exists and is connected to a distributed scheduler.  In this case this function will return as soon as the task graph has been submitted to the cluster, but before the computations have completed.  Computations will continue asynchronously in the background.  When using this function with the single machine scheduler it blocks until the computations have finished."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "When using Dask on a single machine you should ensure that the dataset fits entirely within memory."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [],
              "param": "*args: Dask collections",
              "type": "Param",
              "type_": ""
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Which scheduler to use like \"threads\", \"synchronous\" or \"processes\". If not provided, the default is to check the global settings first, and then fall back to the collection defaults."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "scheduler",
              "type": "Param",
              "type_": "string, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "By default dask traverses builtin python collections looking for dask objects passed to "
                    },
                    {
                      "type": "inlineCode",
                      "value": "persist"
                    },
                    {
                      "type": "text",
                      "value": ". For large collections this can be expensive. If none of the arguments contain any dask objects, set "
                    },
                    {
                      "type": "inlineCode",
                      "value": "traverse=False"
                    },
                    {
                      "type": "text",
                      "value": " to avoid doing this traversal."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "traverse",
              "type": "Param",
              "type_": "bool, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "If True [default], the graph is optimized before computation. Otherwise the graph is run as is. This can be useful for debugging."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "optimize_graph",
              "type": "Param",
              "type_": "bool, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Extra keywords to forward to the scheduler function."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "**kwargs",
              "type": "Param",
              "type_": ""
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [
        {
          "children": [
            {
              "desc": [],
              "param": "",
              "type": "Param",
              "type_": "New dask collections backed by in-memory data"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Persist multiple Dask collections into memory"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [
      {
        "type": "code",
        "value": "df = dd.read_csv('/path/to/*.csv')  # doctest: +SKIP\ndf = df[df.name == 'Alice']  # doctest: +SKIP\ndf['in-debt'] = df.balance < 0  # doctest: +SKIP\ndf = df.persist()  # triggers computation  # doctest: +SKIP"
      },
      {
        "type": "code",
        "value": "df.value().min()  # future computations are now fast  # doctest: +SKIP"
      },
      {
        "type": "code",
        "value": "df.value().max()  # doctest: +SKIP"
      },
      {
        "type": "code",
        "value": "from dask import persist  # use persist function on multiple collections\na, b = persist(a, b)  # doctest: +SKIP"
      }
    ],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/dask/base.py",
  "item_line": 809,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Examples",
    "Parameters",
    "Returns"
  ],
  "references": null,
  "see_also": [],
  "signature": {
    "type": "Signature",
    "value": "(*args, traverse=True, optimize_graph=True, scheduler=None, **kwargs)"
  },
  "type": "DocBlob"
}