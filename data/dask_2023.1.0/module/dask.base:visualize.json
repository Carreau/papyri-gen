{
  "aliases": [
    "dask.visualize"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Requires "
            },
            {
              "type": "inlineCode",
              "value": "graphviz"
            },
            {
              "type": "text",
              "value": " to be installed. All options that are not the dask graph(s) should be passed as keyword arguments."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "For more information on optimization see here:"
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "https://docs.dask.org/en/latest/optimize.html"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Any number of objects. If it is a dask collection (for example, a dask DataFrame, Array, Bag, or Delayed), its associated graph will be included in the output of visualize. By default, python builtin collections are also traversed to look for dask objects (for more information see the "
                    },
                    {
                      "type": "inlineCode",
                      "value": "traverse"
                    },
                    {
                      "type": "text",
                      "value": " keyword). Arguments lacking an associated graph will be ignored."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "args",
              "type": "Param",
              "type_": "object"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The name of the file to write to disk. If the provided "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "filename",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "filename"
                    },
                    {
                      "type": "text",
                      "value": " doesn't include an extension, '.png' will be used by default. If "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "filename",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "filename"
                    },
                    {
                      "type": "text",
                      "value": " is None, no file will be written, and we communicate with dot using only pipes."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "filename",
              "type": "Param",
              "type_": "str or None, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Format in which to write output file.  Default is 'png'."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "format",
              "type": "Param",
              "type_": "{'png', 'pdf', 'dot', 'svg', 'jpeg', 'jpg'}, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "By default, dask traverses builtin python collections looking for dask objects passed to "
                    },
                    {
                      "type": "inlineCode",
                      "value": "visualize"
                    },
                    {
                      "type": "text",
                      "value": ". For large collections this can be expensive. If none of the arguments contain any dask objects, set "
                    },
                    {
                      "type": "inlineCode",
                      "value": "traverse=False"
                    },
                    {
                      "type": "text",
                      "value": " to avoid doing this traversal."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "traverse",
              "type": "Param",
              "type_": "bool, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "If True, the graph is optimized before rendering.  Otherwise, the graph is displayed as is. Default is False."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "optimize_graph",
              "type": "Param",
              "type_": "bool, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Options to color nodes. colormap:"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "children": [
                        {
                          "children": [
                            {
                              "type": "text",
                              "value": "None, the default, no colors."
                            }
                          ],
                          "type": "paragraph"
                        }
                      ],
                      "spread": false,
                      "type": "listItem"
                    },
                    {
                      "children": [
                        {
                          "children": [
                            {
                              "type": "text",
                              "value": "'order', colors the nodes' border based on the order they appear in the graph."
                            }
                          ],
                          "type": "paragraph"
                        }
                      ],
                      "spread": false,
                      "type": "listItem"
                    },
                    {
                      "children": [
                        {
                          "children": [
                            {
                              "type": "text",
                              "value": "'ages', how long the data of a node is held."
                            }
                          ],
                          "type": "paragraph"
                        }
                      ],
                      "spread": false,
                      "type": "listItem"
                    },
                    {
                      "children": [
                        {
                          "children": [
                            {
                              "type": "text",
                              "value": "'freed', the number of dependencies released after running a node."
                            }
                          ],
                          "type": "paragraph"
                        }
                      ],
                      "spread": false,
                      "type": "listItem"
                    },
                    {
                      "children": [
                        {
                          "children": [
                            {
                              "type": "text",
                              "value": "'memoryincreases', how many more outputs are held after the lifetime of a node.   Large values may indicate nodes that should have run later."
                            }
                          ],
                          "type": "paragraph"
                        }
                      ],
                      "spread": false,
                      "type": "listItem"
                    },
                    {
                      "children": [
                        {
                          "children": [
                            {
                              "type": "text",
                              "value": "'memorydecreases', how many fewer outputs are held after the lifetime of a node.   Large values may indicate nodes that should have run sooner."
                            }
                          ],
                          "type": "paragraph"
                        }
                      ],
                      "spread": false,
                      "type": "listItem"
                    },
                    {
                      "children": [
                        {
                          "children": [
                            {
                              "type": "text",
                              "value": "'memorypressure', the number of data held when the node is run (circle), or   the data is released (rectangle)."
                            }
                          ],
                          "type": "paragraph"
                        }
                      ],
                      "spread": false,
                      "type": "listItem"
                    }
                  ],
                  "ordered": false,
                  "spread": false,
                  "start": 1,
                  "type": "list"
                }
              ],
              "param": "color",
              "type": "Param",
              "type_": "{None, 'order', 'ages', 'freed', 'memoryincreases', 'memorydecreases', 'memorypressure'}, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Maximum value for colormap to normalize form 0 to 1.0. Default is "
                    },
                    {
                      "type": "inlineCode",
                      "value": "None"
                    },
                    {
                      "type": "text",
                      "value": " will make it the max number of values"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "maxval",
              "type": "Param",
              "type_": "{int, float}, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Whether to collapse output boxes, which often have empty labels. Default is False."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "collapse_outputs",
              "type": "Param",
              "type_": "bool, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Whether to label output and input boxes even if the data aren't chunked. Beware: these labels can get very long. Default is False."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "verbose",
              "type": "Param",
              "type_": "bool, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The visualization engine to use. If not provided, this checks the dask config value \"visualization.engine\". If that is not set, it tries to import "
                    },
                    {
                      "type": "inlineCode",
                      "value": "graphviz"
                    },
                    {
                      "type": "text",
                      "value": " and "
                    },
                    {
                      "type": "inlineCode",
                      "value": "ipycytoscape"
                    },
                    {
                      "type": "text",
                      "value": ", using the first one to succeed."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "engine",
              "type": "Param",
              "type_": "{\"graphviz\", \"ipycytoscape\", \"cytoscape\"}, optional."
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Additional keyword arguments to forward to the visualization engine."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "**kwargs",
              "type": "Param",
              "type_": ""
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "See dask.dot.dot_graph for more information."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "result",
              "type": "Param",
              "type_": "IPython.diplay.Image, IPython.display.SVG, or None"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Visualize several dask graphs simultaneously."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [
      {
        "type": "code",
        "value": "x.visualize(filename='dask.pdf')  # doctest: +SKIP\nx.visualize(filename='dask.pdf', color='order')  # doctest: +SKIP"
      }
    ],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/dask/base.py",
  "item_line": 603,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Examples",
    "Returns",
    "See Also",
    "Notes"
  ],
  "references": null,
  "see_also": [
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "to-resolve",
          "module": "current-module",
          "path": "dask.dot.dot_graph",
          "type": "RefInfo",
          "version": "current-version"
        },
        "type": "Link",
        "value": "dask.dot.dot_graph"
      },
      "type": null
    }
  ],
  "signature": {
    "type": "Signature",
    "value": "(*args, filename='mydask', traverse=True, optimize_graph=False, maxval=None, engine: \"Literal['cytoscape', 'ipycytoscape', 'graphviz'] | None\" = None, **kwargs)"
  },
  "type": "DocBlob"
}