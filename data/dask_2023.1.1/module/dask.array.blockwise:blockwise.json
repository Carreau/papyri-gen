{
  "aliases": [
    "dask.array.blockwise"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "A broad class of blocked algorithms and patterns can be specified with a concise multi-index notation.  The "
            },
            {
              "type": "inlineCode",
              "value": "blockwise"
            },
            {
              "type": "text",
              "value": " function applies an in-memory function across multiple blocks of multiple inputs in a variety of ways. Many dask.array operations are special cases of blockwise including elementwise, broadcasting, reductions, tensordot, and transpose."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Function to apply to individual tuples of blocks"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "func",
              "type": "Param",
              "type_": "callable"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Block pattern of the output, something like 'ijk' or (1, 2, 3)"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "out_ind",
              "type": "Param",
              "type_": "iterable"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Sequence like (x, 'ij', y, 'jk', z, 'i')"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "*args",
              "type": "Param",
              "type_": "sequence of Array, index pairs"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Extra keyword arguments to pass to function"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "**kwargs",
              "type": "Param",
              "type_": "dict"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Datatype of resulting array."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "dtype",
              "type": "Param",
              "type_": "np.dtype"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "If true concatenate arrays along dummy indices, else provide lists"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "concatenate",
              "type": "Param",
              "type_": "bool, keyword only"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Dictionary mapping index to function to be applied to chunk sizes"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "adjust_chunks",
              "type": "Param",
              "type_": "dict"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "New indexes and their dimension lengths"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "new_axes",
              "type": "Param",
              "type_": "dict, keyword only"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Whether or not to align chunks along equally sized dimensions when multiple arrays are provided.  This allows for larger chunks in some arrays to be broken into smaller ones that match chunk sizes in other arrays such that they are compatible for block function mapping. If this is false, then an error will be thrown if arrays do not already have the same number of blocks in each dimension."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "align_arrays: bool",
              "type": "Param",
              "type_": ""
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Tensor operation: Generalized inner and outer products"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [
      {
        "type": "text",
        "value": "2D embarrassingly parallel operation from two arrays, x, and y."
      },
      {
        "type": "code",
        "value": "import operator, numpy as np, dask.array as da\nx = da.from_array([[1, 2],\n                   [3, 4]], chunks=(1, 2))\ny = da.from_array([[10, 20],\n                   [0, 0]])\nz = blockwise(operator.add, 'ij', x, 'ij', y, 'ij', dtype='f8')\nz.compute()"
      },
      {
        "type": "text",
        "value": "Outer product multiplying a by b, two 1-d vectors"
      },
      {
        "type": "code",
        "value": "a = da.from_array([0, 1, 2], chunks=1)\nb = da.from_array([10, 50, 100], chunks=1)\nz = blockwise(np.outer, 'ij', a, 'i', b, 'j', dtype='f8')\nz.compute()"
      },
      {
        "type": "text",
        "value": "z = x.T"
      },
      {
        "type": "code",
        "value": "z = blockwise(np.transpose, 'ji', x, 'ij', dtype=x.dtype)\nz.compute()"
      },
      {
        "type": "text",
        "value": "The transpose case above is illustrative because it does transposition\nboth on each in-memory block by calling ``np.transpose`` and on the order\nof the blocks themselves, by switching the order of the index ``ij -> ji``."
      },
      {
        "type": "text",
        "value": "We can compose these same patterns with more variables and more complex\nin-memory functions"
      },
      {
        "type": "text",
        "value": "z = X + Y.T"
      },
      {
        "type": "code",
        "value": "z = blockwise(lambda x, y: x + y.T, 'ij', x, 'ij', y, 'ji', dtype='f8')\nz.compute()"
      },
      {
        "type": "text",
        "value": "Any index, like ``i`` missing from the output index is interpreted as a\ncontraction (note that this differs from Einstein convention; repeated\nindices do not imply contraction.)  In the case of a contraction the passed\nfunction should expect an iterable of blocks on any array that holds that\nindex.  To receive arrays concatenated along contracted dimensions instead\npass ``concatenate=True``."
      },
      {
        "type": "text",
        "value": "Inner product multiplying a by b, two 1-d vectors"
      },
      {
        "type": "code",
        "value": "def sequence_dot(a_blocks, b_blocks):\n    result = 0\n    for a, b in zip(a_blocks, b_blocks):\n        result += a.dot(b)\n    return result"
      },
      {
        "type": "code",
        "value": "z = blockwise(sequence_dot, '', a, 'i', b, 'i', dtype='f8')\nz.compute()"
      },
      {
        "type": "text",
        "value": "Add new single-chunk dimensions with the ``new_axes=`` keyword, including\nthe length of the new dimension.  New dimensions will always be in a single\nchunk."
      },
      {
        "type": "code",
        "value": "def f(a):\n    return a[:, None] * np.ones((1, 5))"
      },
      {
        "type": "code",
        "value": "z = blockwise(f, 'az', a, 'a', new_axes={'z': 5}, dtype=a.dtype)"
      },
      {
        "type": "text",
        "value": "New dimensions can also be multi-chunk by specifying a tuple of chunk\nsizes.  This has limited utility as is (because the chunks are all the\nsame), but the resulting graph can be modified to achieve more useful\nresults (see ``da.map_blocks``)."
      },
      {
        "type": "code",
        "value": "z = blockwise(f, 'az', a, 'a', new_axes={'z': (5, 5)}, dtype=x.dtype)\nz.chunks"
      },
      {
        "type": "text",
        "value": "If the applied function changes the size of each chunk you can specify this\nwith a ``adjust_chunks={...}`` dictionary holding a function for each index\nthat modifies the dimension size in that index."
      },
      {
        "type": "code",
        "value": "def double(x):\n    return np.concatenate([x, x])"
      },
      {
        "type": "code",
        "value": "y = blockwise(double, 'ij', x, 'ij',\n              adjust_chunks={'i': lambda n: 2 * n}, dtype=x.dtype)\ny.chunks"
      },
      {
        "type": "text",
        "value": "Include literals by indexing with None"
      },
      {
        "type": "code",
        "value": "z = blockwise(operator.add, 'ij', x, 'ij', 1234, None, dtype=x.dtype)\nz.compute()"
      }
    ],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/dask/array/blockwise.py",
  "item_line": 12,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Examples"
  ],
  "references": null,
  "see_also": [],
  "signature": {
    "type": "Signature",
    "value": "(func, out_ind, *args, name=None, token=None, dtype=None, adjust_chunks=None, new_axes=None, align_arrays=True, concatenate=None, meta=None, **kwargs)"
  },
  "type": "DocBlob"
}