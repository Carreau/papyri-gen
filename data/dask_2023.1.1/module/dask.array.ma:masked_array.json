{
  "aliases": [
    "dask.array.ma.masked_array"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "This docstring was copied from numpy.ma.masked_array."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Some inconsistencies with the Dask version may exist."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Masked values of True exclude the corresponding element from any computation."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Construction    "
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": "x = MaskedArray(data, mask=nomask, dtype=None, copy=False, subok=True,\n                ndmin=0, fill_value=None, keep_mask=True, hard_mask=None,\n                shrink=True, order=None)"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Input data."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "data",
              "type": "Param",
              "type_": "array_like"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Mask. Must be convertible to an array of booleans with the same shape as "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "data",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "data"
                    },
                    {
                      "type": "text",
                      "value": ". True indicates a masked (i.e. invalid) data."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "mask",
              "type": "Param",
              "type_": "sequence, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Data type of the output. If "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "dtype",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "dtype"
                    },
                    {
                      "type": "text",
                      "value": " is None, the type of the data argument ("
                    },
                    {
                      "type": "inlineCode",
                      "value": "data.dtype"
                    },
                    {
                      "type": "text",
                      "value": ") is used. If "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "dtype",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "dtype"
                    },
                    {
                      "type": "text",
                      "value": " is not None and different from "
                    },
                    {
                      "type": "inlineCode",
                      "value": "data.dtype"
                    },
                    {
                      "type": "text",
                      "value": ", a copy is performed."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "dtype",
              "type": "Param",
              "type_": "dtype, optional  (Not supported in Dask)"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Whether to copy the input data (True), or to use a reference instead. Default is False."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "copy",
              "type": "Param",
              "type_": "bool, optional  (Not supported in Dask)"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Whether to return a subclass of "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "MaskedArray"
                    },
                    {
                      "type": "text",
                      "value": " if possible (True) or a plain "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "MaskedArray"
                    },
                    {
                      "type": "text",
                      "value": ". Default is True."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "subok",
              "type": "Param",
              "type_": "bool, optional  (Not supported in Dask)"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Minimum number of dimensions. Default is 0."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "ndmin",
              "type": "Param",
              "type_": "int, optional  (Not supported in Dask)"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Value used to fill in the masked values when necessary. If None, a default based on the data-type is used."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "fill_value",
              "type": "Param",
              "type_": "scalar, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Whether to combine "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "mask",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "mask"
                    },
                    {
                      "type": "text",
                      "value": " with the mask of the input data, if any (True), or to use only "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "mask",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "mask"
                    },
                    {
                      "type": "text",
                      "value": " for the output (False). Default is True."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "keep_mask",
              "type": "Param",
              "type_": "bool, optional  (Not supported in Dask)"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Whether to use a hard mask or not. With a hard mask, masked values cannot be unmasked. Default is False."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "hard_mask",
              "type": "Param",
              "type_": "bool, optional  (Not supported in Dask)"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Whether to force compression of an empty mask. Default is True."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "shrink",
              "type": "Param",
              "type_": "bool, optional  (Not supported in Dask)"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Specify the order of the array.  If order is 'C', then the array will be in C-contiguous order (last-index varies the fastest). If order is 'F', then the returned array will be in Fortran-contiguous order (first-index varies the fastest). If order is 'A' (default), then the returned array may be in any order (either C-, Fortran-contiguous, or even discontiguous), unless a copy is required, in which case it will be C-contiguous."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "order",
              "type": "Param",
              "type_": "{'C', 'F', 'A'}, optional  (Not supported in Dask)"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "An array class with possibly masked values."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [
      {
        "type": "text",
        "value": "The ``mask`` can be initialized with an array of boolean values\nwith the same shape as ``data``."
      },
      {
        "type": "code",
        "value": "data = np.arange(6).reshape((2, 3))  # doctest: +SKIP\nnp.ma.MaskedArray(data, mask=[[False, True, False],  # doctest: +SKIP\n                              [False, False, True]])"
      },
      {
        "type": "text",
        "value": "Alternatively, the ``mask`` can be initialized to homogeneous boolean\narray with the same shape as ``data`` by passing in a scalar\nboolean value:"
      },
      {
        "type": "code",
        "value": "np.ma.MaskedArray(data, mask=False)  # doctest: +SKIP"
      },
      {
        "type": "code",
        "value": "np.ma.MaskedArray(data, mask=True)  # doctest: +SKIP"
      },
      {
        "type": "text",
        "value": ".. note::\n    The recommended practice for initializing ``mask`` with a scalar\n    boolean value is to use ``True``/``False`` rather than\n    ``np.True_``/``np.False_``. The reason is :attr:`nomask`\n    is represented internally as ``np.False_``."
      },
      {
        "type": "text",
        "value": "    >>> np.False_ is np.ma.nomask  # doctest: +SKIP\n    True"
      }
    ],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/dask/array/ma.py",
  "item_line": 125,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Examples"
  ],
  "references": null,
  "see_also": [],
  "signature": {
    "type": "Signature",
    "value": "(data, mask=False, fill_value=None, **kwargs)"
  },
  "type": "DocBlob"
}