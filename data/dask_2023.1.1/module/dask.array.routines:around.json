{
  "aliases": [
    "dask.array.around"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "This docstring was copied from numpy.around."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Some inconsistencies with the Dask version may exist."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "For values exactly halfway between rounded decimal values, NumPy rounds to the nearest even value. Thus 1.5 and 2.5 round to 2.0, -0.5 and 0.5 round to 0.0, etc."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "inlineCode",
              "value": "np.around"
            },
            {
              "type": "text",
              "value": " uses a fast but sometimes inexact algorithm to round floating-point datatypes. For positive "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "decimals",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "decimals"
            },
            {
              "type": "text",
              "value": " it is equivalent to "
            },
            {
              "type": "inlineCode",
              "value": "np.true_divide(np.rint(a * 10**decimals), 10**decimals)"
            },
            {
              "type": "text",
              "value": ", which has error due to the inexact representation of decimal fractions in the IEEE floating point standard  and errors introduced when scaling by powers of ten. For instance, note the extra \"1\" in the following:"
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "code",
              "value": ">>> np.round(56294995342131.5, 3)  # doctest: +SKIP\n56294995342131.51"
            }
          ],
          "type": "blockquote"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "If your goal is to print such values with a fixed number of decimals, it is preferable to use numpy's float printing routines to limit the number of printed decimals:"
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "code",
              "value": ">>> np.format_float_positional(56294995342131.5, precision=3)  # doctest: +SKIP\n'56294995342131.5'"
            }
          ],
          "type": "blockquote"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "The float printing routines use an accurate but much more computationally demanding algorithm to compute the number of digits after the decimal point."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Alternatively, Python's builtin "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "module",
              "reference": {
                "kind": "module",
                "module": "dask",
                "path": "dask.array.core:Array.round",
                "type": "RefInfo",
                "version": "2023.1.1"
              },
              "type": "Link",
              "value": "round"
            },
            {
              "type": "text",
              "value": " function uses a more accurate but slower algorithm for 64-bit floating point values:"
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "code",
              "value": ">>> round(56294995342131.5, 3)  # doctest: +SKIP\n56294995342131.5\n>>> np.round(16.055, 2), round(16.055, 2)  # equals 16.0549999999999997  # doctest: +SKIP\n(16.06, 16.05)"
            }
          ],
          "type": "blockquote"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Input data."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "a",
              "type": "Param",
              "type_": "array_like  (Not supported in Dask)"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Number of decimal places to round to (default: 0).  If decimals is negative, it specifies the number of positions to the left of the decimal point."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "decimals",
              "type": "Param",
              "type_": "int, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Alternative output array in which to place the result. It must have the same shape as the expected output, but the type of the output values will be cast if necessary. See "
                    },
                    {
                      "type": "inlineCode",
                      "value": "ufuncs-output-type"
                    },
                    {
                      "type": "text",
                      "value": " for more details."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "out",
              "type": "Param",
              "type_": "ndarray, optional  (Not supported in Dask)"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "An array of the same type as "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "a",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "a"
                    },
                    {
                      "type": "text",
                      "value": ", containing the rounded values. Unless "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "out",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "out"
                    },
                    {
                      "type": "text",
                      "value": " was specified, a new array is created.  A reference to the result is returned."
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The real and imaginary parts of complex numbers are rounded separately.  The result of rounding a float is a float."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "rounded_array",
              "type": "Param",
              "type_": "ndarray"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Evenly round to the given number of decimals."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [
      {
        "type": "code",
        "value": "np.around([0.37, 1.64])  # doctest: +SKIP"
      },
      {
        "type": "code",
        "value": "np.around([0.37, 1.64], decimals=1)  # doctest: +SKIP"
      },
      {
        "type": "code",
        "value": "np.around([.5, 1.5, 2.5, 3.5, 4.5]) # rounds to nearest even value  # doctest: +SKIP"
      },
      {
        "type": "code",
        "value": "np.around([1,2,3,11], decimals=1) # ndarray of ints is returned  # doctest: +SKIP"
      },
      {
        "type": "code",
        "value": "np.around([1,2,3,11], decimals=-1)  # doctest: +SKIP"
      }
    ],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/dask/array/routines.py",
  "item_line": 2007,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns",
    "See Also",
    "Notes",
    "References",
    "Examples"
  ],
  "references": null,
  "see_also": [
    {
      "descriptions": [
        {
          "children": [
            {
              "type": "text",
              "value": "equivalent method"
            }
          ],
          "type": "paragraph"
        }
      ],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "to-resolve",
          "module": "current-module",
          "path": "ndarray.round",
          "type": "RefInfo",
          "version": "current-version"
        },
        "type": "Link",
        "value": "ndarray.round"
      },
      "type": null
    },
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "module",
          "module": "dask",
          "path": "dask.array.ufunc:ceil",
          "type": "RefInfo",
          "version": "2023.1.1"
        },
        "type": "Link",
        "value": "ceil"
      },
      "type": null
    },
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "to-resolve",
          "module": "current-module",
          "path": "fix",
          "type": "RefInfo",
          "version": "current-version"
        },
        "type": "Link",
        "value": "fix"
      },
      "type": null
    },
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "to-resolve",
          "module": "current-module",
          "path": "floor",
          "type": "RefInfo",
          "version": "current-version"
        },
        "type": "Link",
        "value": "floor"
      },
      "type": null
    },
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "module",
          "module": "dask",
          "path": "dask.array.ufunc:rint",
          "type": "RefInfo",
          "version": "2023.1.1"
        },
        "type": "Link",
        "value": "rint"
      },
      "type": null
    },
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "module",
          "module": "dask",
          "path": "dask.array.ufunc:trunc",
          "type": "RefInfo",
          "version": "2023.1.1"
        },
        "type": "Link",
        "value": "trunc"
      },
      "type": null
    }
  ],
  "signature": {
    "type": "Signature",
    "value": "(x, decimals=0)"
  },
  "type": "DocBlob"
}