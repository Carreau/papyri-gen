{
  "aliases": [
    "dask.array.digitize"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "This docstring was copied from numpy.digitize."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Some inconsistencies with the Dask version may exist."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "=========  =============  ============================ "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "right",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "right"
            },
            {
              "type": "text",
              "value": "    order of bins  returned index "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "i"
            },
            {
              "type": "text",
              "value": " satisfies =========  =============  ============================ "
            },
            {
              "type": "inlineCode",
              "value": "False"
            },
            {
              "type": "text",
              "value": "  increasing     "
            },
            {
              "type": "inlineCode",
              "value": "bins[i-1] <= x < bins[i]"
            },
            {
              "type": "text",
              "value": " "
            },
            {
              "type": "inlineCode",
              "value": "True"
            },
            {
              "type": "text",
              "value": "   increasing     "
            },
            {
              "type": "inlineCode",
              "value": "bins[i-1] < x <= bins[i]"
            },
            {
              "type": "text",
              "value": " "
            },
            {
              "type": "inlineCode",
              "value": "False"
            },
            {
              "type": "text",
              "value": "  decreasing     "
            },
            {
              "type": "inlineCode",
              "value": "bins[i-1] > x >= bins[i]"
            },
            {
              "type": "text",
              "value": " "
            },
            {
              "type": "inlineCode",
              "value": "True"
            },
            {
              "type": "text",
              "value": "   decreasing     "
            },
            {
              "type": "inlineCode",
              "value": "bins[i-1] >= x > bins[i]"
            },
            {
              "type": "text",
              "value": " =========  =============  ============================"
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "If values in "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "x",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "x"
            },
            {
              "type": "text",
              "value": " are beyond the bounds of "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "bins",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "bins"
            },
            {
              "type": "text",
              "value": ", 0 or "
            },
            {
              "type": "inlineCode",
              "value": "len(bins)"
            },
            {
              "type": "text",
              "value": " is returned as appropriate."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "If values in "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "x",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "x"
            },
            {
              "type": "text",
              "value": " are such that they fall outside the bin range, attempting to index "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "bins",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "bins"
            },
            {
              "type": "text",
              "value": " with the indices that "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "module",
              "reference": {
                "kind": "module",
                "module": "dask",
                "path": "dask.array.routines:digitize",
                "type": "RefInfo",
                "version": "2023.1.1"
              },
              "type": "Link",
              "value": "digitize"
            },
            {
              "type": "text",
              "value": " returns will result in an IndexError."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "children": [
                {
                  "type": "text",
                  "value": "versionadded 1.10.0"
                }
              ],
              "type": "admonitionTitle"
            }
          ],
          "kind": "note",
          "type": "admonition"
        },
        {
          "children": [
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "np.digitize"
            },
            {
              "type": "text",
              "value": " is  implemented in terms of "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "np.searchsorted"
            },
            {
              "type": "text",
              "value": ". This means that a binary search is used to bin the values, which scales much better for larger number of bins than the previous linear search. It also removes the requirement for the input array to be 1-dimensional."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "For monotonically _increasing_ "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "bins",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "bins"
            },
            {
              "type": "text",
              "value": ", the following are equivalent      "
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": "np.digitize(x, bins, right=True)\nnp.searchsorted(bins, x, side='left')"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Note that as the order of the arguments are reversed, the side must be too. The "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "searchsorted"
            },
            {
              "type": "text",
              "value": " call is marginally faster, as it does not do any monotonicity checks. Perhaps more importantly, it supports all dtypes."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Input array to be binned. Prior to NumPy 1.10.0, this array had to be 1-dimensional, but can now have any shape."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "x",
              "type": "Param",
              "type_": "array_like  (Not supported in Dask)"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Array of bins. It has to be 1-dimensional and monotonic."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "bins",
              "type": "Param",
              "type_": "array_like"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Indicating whether the intervals include the right or the left bin edge. Default behavior is (right==False) indicating that the interval does not include the right edge. The left bin end is open in this case, i.e., bins[i-1] <= x < bins[i] is the default behavior for monotonically increasing bins."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "right",
              "type": "Param",
              "type_": "bool, optional"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "If "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "bins",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "bins"
                    },
                    {
                      "type": "text",
                      "value": " is not monotonic."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "",
              "type": "Param",
              "type_": "ValueError"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "If the type of the input is complex."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "",
              "type": "Param",
              "type_": "TypeError"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Output array of indices, of same shape as "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "x",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "x"
                    },
                    {
                      "type": "text",
                      "value": "."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "indices",
              "type": "Param",
              "type_": "ndarray of ints"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Return the indices of the bins to which each value in input array belongs."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [
      {
        "type": "code",
        "value": "x = np.array([0.2, 6.4, 3.0, 1.6])  # doctest: +SKIP\nbins = np.array([0.0, 1.0, 2.5, 4.0, 10.0])  # doctest: +SKIP\ninds = np.digitize(x, bins)  # doctest: +SKIP\ninds  # doctest: +SKIP"
      },
      {
        "type": "code",
        "value": "for n in range(x.size):  # doctest: +SKIP\n  print(bins[inds[n]-1], \"<=\", x[n], \"<\", bins[inds[n]])"
      },
      {
        "type": "code",
        "value": "x = np.array([1.2, 10.0, 12.4, 15.5, 20.])  # doctest: +SKIP\nbins = np.array([0, 5, 10, 15, 20])  # doctest: +SKIP\nnp.digitize(x,bins,right=True)  # doctest: +SKIP"
      },
      {
        "type": "code",
        "value": "np.digitize(x,bins,right=False)  # doctest: +SKIP"
      }
    ],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/dask/array/routines.py",
  "item_line": 790,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns",
    "Raises",
    "See Also",
    "Notes",
    "Examples"
  ],
  "references": null,
  "see_also": [
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "to-resolve",
          "module": "current-module",
          "path": "bincount",
          "type": "RefInfo",
          "version": "current-version"
        },
        "type": "Link",
        "value": "bincount"
      },
      "type": null
    },
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "to-resolve",
          "module": "current-module",
          "path": "histogram",
          "type": "RefInfo",
          "version": "current-version"
        },
        "type": "Link",
        "value": "histogram"
      },
      "type": null
    },
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "to-resolve",
          "module": "current-module",
          "path": "unique",
          "type": "RefInfo",
          "version": "current-version"
        },
        "type": "Link",
        "value": "unique"
      },
      "type": null
    },
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "to-resolve",
          "module": "current-module",
          "path": "searchsorted",
          "type": "RefInfo",
          "version": "current-version"
        },
        "type": "Link",
        "value": "searchsorted"
      },
      "type": null
    }
  ],
  "signature": {
    "type": "Signature",
    "value": "(a, bins, right=False)"
  },
  "type": "DocBlob"
}