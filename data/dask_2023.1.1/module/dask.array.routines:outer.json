{
  "aliases": [
    "dask.array.outer"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "This docstring was copied from numpy.outer."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Some inconsistencies with the Dask version may exist."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Given two vectors, "
            },
            {
              "type": "inlineCode",
              "value": "a = [a0, a1, ..., aM]"
            },
            {
              "type": "text",
              "value": " and "
            },
            {
              "type": "inlineCode",
              "value": "b = [b0, b1, ..., bN]"
            },
            {
              "type": "text",
              "value": ", the outer product  is    "
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": "[[a0*b0  a0*b1 ... a0*bN ]\n [a1*b0    .\n [ ...          .\n [aM*b0            aM*bN ]]"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "First input vector.  Input is flattened if not already 1-dimensional."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "a",
              "type": "Param",
              "type_": "(M,) array_like"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Second input vector.  Input is flattened if not already 1-dimensional."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "b",
              "type": "Param",
              "type_": "(N,) array_like"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "A location where the result is stored"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "versionadded 1.9.0"
                        }
                      ],
                      "type": "admonitionTitle"
                    }
                  ],
                  "kind": "note",
                  "type": "admonition"
                }
              ],
              "param": "out",
              "type": "Param",
              "type_": "(M, N) ndarray, optional"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "inlineCode",
                      "value": "out[i, j] = a[i] * b[j]"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "out",
              "type": "Param",
              "type_": "(M, N) ndarray"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Compute the outer product of two vectors."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [
      {
        "type": "text",
        "value": "Make a (*very* coarse) grid for computing a Mandelbrot set:"
      },
      {
        "type": "code",
        "value": "rl = np.outer(np.ones((5,)), np.linspace(-2, 2, 5))  # doctest: +SKIP\nrl  # doctest: +SKIP"
      },
      {
        "type": "code",
        "value": "im = np.outer(1j*np.linspace(2, -2, 5), np.ones((5,)))  # doctest: +SKIP\nim  # doctest: +SKIP"
      },
      {
        "type": "code",
        "value": "grid = rl + im  # doctest: +SKIP\ngrid  # doctest: +SKIP"
      },
      {
        "type": "text",
        "value": "An example using a \"vector\" of letters:"
      },
      {
        "type": "code",
        "value": "x = np.array(['a', 'b', 'c'], dtype=object)  # doctest: +SKIP\nnp.outer(x, [1, 2, 3])  # doctest: +SKIP"
      }
    ],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/dask/array/routines.py",
  "item_line": 474,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns",
    "See Also",
    "References",
    "Examples"
  ],
  "references": null,
  "see_also": [
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "to-resolve",
          "module": "current-module",
          "path": "inner",
          "type": "RefInfo",
          "version": "current-version"
        },
        "type": "Link",
        "value": "inner"
      },
      "type": null
    },
    {
      "descriptions": [
        {
          "children": [
            {
              "type": "inlineCode",
              "value": "einsum('i,j->ij', a.ravel(), b.ravel())"
            },
            {
              "type": "text",
              "value": " is the equivalent."
            }
          ],
          "type": "paragraph"
        }
      ],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "to-resolve",
          "module": "current-module",
          "path": "einsum",
          "type": "RefInfo",
          "version": "current-version"
        },
        "type": "Link",
        "value": "einsum"
      },
      "type": null
    },
    {
      "descriptions": [
        {
          "children": [
            {
              "type": "text",
              "value": "A generalization to dimensions other than 1D and other operations. "
            },
            {
              "type": "inlineCode",
              "value": "np.multiply.outer(a.ravel(), b.ravel())"
            },
            {
              "type": "text",
              "value": " is the equivalent."
            }
          ],
          "type": "paragraph"
        }
      ],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "module",
          "module": "dask",
          "path": "dask.array.ufunc:ufunc.outer",
          "type": "RefInfo",
          "version": "2023.1.1"
        },
        "type": "Link",
        "value": "ufunc.outer"
      },
      "type": null
    },
    {
      "descriptions": [
        {
          "children": [
            {
              "type": "inlineCode",
              "value": "np.tensordot(a.ravel(), b.ravel(), axes=((), ()))"
            },
            {
              "type": "text",
              "value": " is the equivalent."
            }
          ],
          "type": "paragraph"
        }
      ],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "to-resolve",
          "module": "current-module",
          "path": "tensordot",
          "type": "RefInfo",
          "version": "current-version"
        },
        "type": "Link",
        "value": "tensordot"
      },
      "type": null
    }
  ],
  "signature": {
    "type": "Signature",
    "value": "(a, b)"
  },
  "type": "DocBlob"
}