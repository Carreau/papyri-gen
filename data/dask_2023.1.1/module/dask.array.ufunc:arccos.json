{
  "aliases": [
    "dask.array.arccos"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Some inconsistencies with the Dask version may exist."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Trigonometric inverse cosine, element-wise."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "The inverse of "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "cos"
            },
            {
              "type": "text",
              "value": " so that, if "
            },
            {
              "type": "inlineCode",
              "value": "y = cos(x)"
            },
            {
              "type": "text",
              "value": ", then "
            },
            {
              "type": "inlineCode",
              "value": "x = arccos(y)"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [
        {
          "children": [
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "arccos"
            },
            {
              "type": "text",
              "value": " is a multivalued function: for each "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "x",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "x"
            },
            {
              "type": "text",
              "value": " there are infinitely many numbers "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "z"
            },
            {
              "type": "text",
              "value": " such that "
            },
            {
              "type": "inlineCode",
              "value": "cos(z) = x"
            },
            {
              "type": "text",
              "value": ". The convention is to return the angle "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "z"
            },
            {
              "type": "text",
              "value": " whose real part lies in "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "[0, pi]"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "For real-valued input data types, "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "arccos"
            },
            {
              "type": "text",
              "value": " always returns real output. For each value that cannot be expressed as a real number or infinity, it yields "
            },
            {
              "type": "inlineCode",
              "value": "nan"
            },
            {
              "type": "text",
              "value": " and sets the "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "invalid"
            },
            {
              "type": "text",
              "value": " floating point error flag."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "For complex-valued input, "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "arccos"
            },
            {
              "type": "text",
              "value": " is a complex analytic function that has branch cuts "
            },
            {
              "type": "inlineCode",
              "value": "[-inf, -1]"
            },
            {
              "type": "text",
              "value": " and "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "[1, inf]"
            },
            {
              "type": "text",
              "value": " and is continuous from above on the former and from below on the latter."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "The inverse "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "cos"
            },
            {
              "type": "text",
              "value": " is also known as "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "acos"
            },
            {
              "type": "text",
              "value": " or cos^-1."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "x",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "x"
                    },
                    {
                      "type": "text",
                      "value": "-coordinate on the unit circle. For real arguments, the domain is [-1, 1]."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "x",
              "type": "Param",
              "type_": "array_like"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "A location into which the result is stored. If provided, it must have a shape that the inputs broadcast to. If not provided or None, a freshly-allocated array is returned. A tuple (possible only as a keyword argument) must have length equal to the number of outputs."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "out",
              "type": "Param",
              "type_": "ndarray, None, or tuple of ndarray and None, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "This condition is broadcast over the input. At locations where the condition is True, the "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "out",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "out"
                    },
                    {
                      "type": "text",
                      "value": " array will be set to the ufunc result. Elsewhere, the "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "out",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "out"
                    },
                    {
                      "type": "text",
                      "value": " array will retain its original value. Note that if an uninitialized "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "out",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "out"
                    },
                    {
                      "type": "text",
                      "value": " array is created via the default "
                    },
                    {
                      "type": "inlineCode",
                      "value": "out=None"
                    },
                    {
                      "type": "text",
                      "value": ", locations within it where the condition is False will remain uninitialized."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "where",
              "type": "Param",
              "type_": "array_like, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "For other keyword-only arguments, see the "
                    },
                    {
                      "type": "inlineCode",
                      "value": "ufunc docs <ufuncs.kwargs>"
                    },
                    {
                      "type": "text",
                      "value": "."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "**kwargs",
              "type": "Param",
              "type_": ""
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The angle of the ray intersecting the unit circle at the given "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "x",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "x"
                    },
                    {
                      "type": "text",
                      "value": "-coordinate in radians [0, pi]. This is a scalar if "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "x",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "x"
                    },
                    {
                      "type": "text",
                      "value": " is a scalar."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "angle",
              "type": "Param",
              "type_": "ndarray"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "This docstring was copied from numpy.arccos."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [
      {
        "type": "text",
        "value": "We expect the arccos of 1 to be 0, and of -1 to be pi:"
      },
      {
        "type": "code",
        "value": "np.arccos([1, -1])  # doctest: +SKIP"
      },
      {
        "type": "text",
        "value": "Plot arccos:"
      },
      {
        "type": "code",
        "value": "import matplotlib.pyplot as plt  # doctest: +SKIP\nx = np.linspace(-1, 1, num=100)  # doctest: +SKIP\nplt.plot(x, np.arccos(x))  # doctest: +SKIP\nplt.axis('tight')  # doctest: +SKIP\nplt.show()  # doctest: +SKIP"
      }
    ],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/dask/array/ufunc.py",
  "item_line": null,
  "item_type": "<class 'dask.array.ufunc.ufunc'>",
  "ordered_sections": [
    "Signature",
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns",
    "See Also",
    "Notes",
    "References",
    "Examples"
  ],
  "references": null,
  "see_also": [
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "to-resolve",
          "module": "current-module",
          "path": "cos",
          "type": "RefInfo",
          "version": "current-version"
        },
        "type": "Link",
        "value": "cos"
      },
      "type": null
    },
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "to-resolve",
          "module": "current-module",
          "path": "arctan",
          "type": "RefInfo",
          "version": "current-version"
        },
        "type": "Link",
        "value": "arctan"
      },
      "type": null
    },
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "to-resolve",
          "module": "current-module",
          "path": "arcsin",
          "type": "RefInfo",
          "version": "current-version"
        },
        "type": "Link",
        "value": "arcsin"
      },
      "type": null
    },
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "to-resolve",
          "module": "current-module",
          "path": "emath.arccos",
          "type": "RefInfo",
          "version": "current-version"
        },
        "type": "Link",
        "value": "emath.arccos"
      },
      "type": null
    }
  ],
  "signature": {
    "type": "Signature",
    "value": "arccos(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])"
  },
  "type": "DocBlob"
}