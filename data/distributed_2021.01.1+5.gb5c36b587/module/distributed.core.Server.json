{
  "_content": {
    "Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "children": [
              {
                "type": "Words",
                "data": {
                  "value": "Dask Distributed Server"
                }
              }
            ]
          }
        }
      ]
    },
    "Extended Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "children": [
              {
                "type": "Words",
                "data": {
                  "value": "Superclass for endpoints in a distributed cluster, such as Worker and Scheduler objects."
                }
              }
            ]
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "children": [
              {
                "type": "Words",
                "data": {
                  "value": "**Handlers**"
                }
              }
            ]
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "children": [
              {
                "type": "Words",
                "data": {
                  "value": "Servers define operations with a "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "handlers"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " dict mapping operation names to functions.  The first argument of a handler function will be a "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "Comm"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " for the communication established with the client.  Other arguments will receive inputs from the keys of the incoming message which will always be a dictionary."
                }
              }
            ]
          }
        },
        {
          "type": "Example",
          "data": {
            "lines": {
              "_lines": [
                {
                  "_line": ">>> def pingpong(comm):",
                  "_number": 11,
                  "_offset": 0
                },
                {
                  "_line": "...     return b'pong'",
                  "_number": 12,
                  "_offset": 0
                }
              ]
            },
            "wh": {
              "_lines": [
                {
                  "_line": "",
                  "_number": 13,
                  "_offset": 0
                }
              ]
            },
            "ind": {
              "_lines": []
            }
          }
        },
        {
          "type": "Example",
          "data": {
            "lines": {
              "_lines": [
                {
                  "_line": ">>> def add(comm, x, y):",
                  "_number": 14,
                  "_offset": 0
                },
                {
                  "_line": "...     return x + y",
                  "_number": 15,
                  "_offset": 0
                }
              ]
            },
            "wh": {
              "_lines": [
                {
                  "_line": "",
                  "_number": 16,
                  "_offset": 0
                }
              ]
            },
            "ind": {
              "_lines": []
            }
          }
        },
        {
          "type": "Example",
          "data": {
            "lines": {
              "_lines": [
                {
                  "_line": ">>> handlers = {'ping': pingpong, 'add': add}",
                  "_number": 17,
                  "_offset": 0
                },
                {
                  "_line": ">>> server = Server(handlers)  # doctest: +SKIP",
                  "_number": 18,
                  "_offset": 0
                },
                {
                  "_line": ">>> server.listen('tcp://0.0.0.0:8000')  # doctest: +SKIP",
                  "_number": 19,
                  "_offset": 0
                }
              ]
            },
            "wh": {
              "_lines": [
                {
                  "_line": "",
                  "_number": 20,
                  "_offset": 0
                }
              ]
            },
            "ind": {
              "_lines": []
            }
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "children": [
              {
                "type": "Words",
                "data": {
                  "value": "**Message Format**"
                }
              }
            ]
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "children": [
              {
                "type": "Words",
                "data": {
                  "value": "The server expects messages to be dictionaries with a special key, "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "'op'"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " that corresponds to the name of the operation, and other key-value pairs as required by the function."
                }
              }
            ]
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "children": [
              {
                "type": "Words",
                "data": {
                  "value": "So in the example above the following would be good messages."
                }
              }
            ]
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "children": [
              {
                "type": "Words",
                "data": {
                  "value": "*  "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "{'op'",
                    ":",
                    " ",
                    "'ping'}"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " *  `"
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "{'op'",
                    ":",
                    " ",
                    "'add',",
                    " ",
                    "'x'",
                    ":",
                    " ",
                    "10,",
                    " ",
                    "'y'",
                    ":",
                    " ",
                    "20}"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": "`"
                }
              }
            ]
          }
        }
      ]
    },
    "Parameters": {
      "children": []
    },
    "Returns": {
      "children": []
    },
    "Yields": {
      "children": []
    },
    "Receives": {
      "children": []
    },
    "Raises": {
      "children": []
    },
    "Warns": {
      "children": []
    },
    "Other Parameters": {
      "children": []
    },
    "Attributes": {
      "children": []
    },
    "Methods": {
      "children": []
    },
    "Notes": {
      "children": []
    },
    "Warnings": {
      "children": []
    }
  },
  "refs": [],
  "ordered_sections": [
    "Summary",
    "Extended Summary"
  ],
  "item_file": "/Users/bussonniermatthias/dev/distributed/distributed/core.py",
  "item_line": 86,
  "item_type": "<class 'type'>",
  "aliases": [
    "distributed.core.Server"
  ],
  "example_section_data": {
    "children": []
  },
  "see_also": [],
  "references": null,
  "signature": "Server(handlers, blocked_handlers=None, stream_handlers=None, connection_limit=512, deserialize=True, serializers=None, deserializers=None, connection_args=None, timeout=None, io_loop=None, **kwargs)"
}