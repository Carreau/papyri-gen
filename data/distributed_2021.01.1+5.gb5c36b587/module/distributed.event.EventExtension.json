{
  "_content": {
    "Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "children": [
              {
                "type": "Words",
                "data": {
                  "value": "An extension for the scheduler to manage Events"
                }
              }
            ]
          }
        }
      ]
    },
    "Extended Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "children": [
              {
                "type": "Words",
                "data": {
                  "value": "This adds the following routes to the scheduler"
                }
              }
            ]
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "children": [
              {
                "type": "Words",
                "data": {
                  "value": "*  event_wait *  event_set *  event_clear *  event_is_set"
                }
              }
            ]
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "children": [
              {
                "type": "Words",
                "data": {
                  "value": "In principle, the implementation logic is quite simple as we can reuse the asyncio.Event as much as possible: we keep a mapping from name to an asyncio.Event and call every function (wait, set, clear, is_set) directly on these events."
                }
              }
            ]
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "children": [
              {
                "type": "Words",
                "data": {
                  "value": "However, this would cause a memory leak: created events in the dictionary are never removed. For this, we also keep a counter for the number of waiters on a specific event. If an event is set, we need to keep track of this state so we can not remove it (the default flag is false). If it is unset but there are waiters, we can also not remove it, as those waiters would then have dangling futures. Therefore the only time we can remove the event from our dict is when the number of waiters is 0 and the event flag is cleared."
                }
              }
            ]
          }
        }
      ]
    },
    "Parameters": {
      "children": []
    },
    "Returns": {
      "children": []
    },
    "Yields": {
      "children": []
    },
    "Receives": {
      "children": []
    },
    "Raises": {
      "children": []
    },
    "Warns": {
      "children": []
    },
    "Other Parameters": {
      "children": []
    },
    "Attributes": {
      "children": []
    },
    "Methods": {
      "children": []
    },
    "Notes": {
      "children": []
    },
    "Warnings": {
      "children": []
    }
  },
  "refs": [],
  "ordered_sections": [
    "Summary",
    "Extended Summary"
  ],
  "item_file": "/Users/bussonniermatthias/dev/distributed/distributed/event.py",
  "item_line": 15,
  "item_type": "<class 'type'>",
  "aliases": [
    "distributed.event.EventExtension"
  ],
  "example_section_data": {
    "children": []
  },
  "see_also": [],
  "references": null,
  "signature": "EventExtension(scheduler)"
}