{
  "_content": {
    "Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "children": [
              {
                "type": "Words",
                "data": {
                  "value": "Publish data with Publish-Subscribe pattern"
                }
              }
            ]
          }
        }
      ]
    },
    "Extended Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "children": [
              {
                "type": "Words",
                "data": {
                  "value": "This allows clients and workers to directly communicate data between each other with a typical Publish-Subscribe pattern.  This involves two components,"
                }
              }
            ]
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "children": [
              {
                "type": "Words",
                "data": {
                  "value": "Pub objects, into which we put data:"
                }
              }
            ]
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "children": [
              {
                "type": "Words",
                "data": {
                  "value": "    >>> pub = Pub('my-topic')     >>> pub.put(123)"
                }
              }
            ]
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "children": [
              {
                "type": "Words",
                "data": {
                  "value": "And Sub objects, from which we collect data:"
                }
              }
            ]
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "children": [
              {
                "type": "Words",
                "data": {
                  "value": "    >>> sub = Sub('my-topic')     >>> sub.get()     123"
                }
              }
            ]
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "children": [
              {
                "type": "Words",
                "data": {
                  "value": "Many Pub and Sub objects can exist for the same topic.  All data sent from any Pub will be sent to all Sub objects on that topic that are currently connected.  Pub's and Sub's find each other using the scheduler, but they communicate directly with each other without coordination from the scheduler."
                }
              }
            ]
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "children": [
              {
                "type": "Words",
                "data": {
                  "value": "Pubs and Subs use the central scheduler to find each other, but not to mediate the communication.  This means that there is very little additional latency or overhead, and they are appropriate for very frequent data transfers.  For context, most data transfer first checks with the scheduler to find which workers should participate, and then does direct worker-to-worker transfers.  This checking in with the scheduler provides some stability guarantees, but also adds in a few extra network hops.  PubSub doesn't do this, and so is faster, but also can easily drop messages if Pubs or Subs disappear without notice."
                }
              }
            ]
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "children": [
              {
                "type": "Words",
                "data": {
                  "value": "When using a Pub or Sub from a Client all communications will be routed through the scheduler.  This can cause some performance degradation.  Pubs and Subs only operate at top-speed when they are both on workers."
                }
              }
            ]
          }
        }
      ]
    },
    "Parameters": {
      "children": [
        {
          "type": "Param",
          "data": {
            "param": "name: object (msgpack serializable)",
            "type_": "",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "The name of the group of Pubs and Subs on which to participate."
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "worker: Worker (optional)",
            "type_": "",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "The worker to be used for publishing data. Defaults to the value of "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": []
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": "_worker()"
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": []
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " If given, "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "client"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " must be "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "None"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": "."
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "client: Client (optional)",
            "type_": "",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Client used for communication with the scheduler. Defaults to the value of "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "get",
                          "_",
                          "client()"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ". If given, "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "worker"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " must be "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "None"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": "."
                      }
                    }
                  ]
                }
              }
            ]
          }
        }
      ]
    },
    "Returns": {
      "children": []
    },
    "Yields": {
      "children": []
    },
    "Receives": {
      "children": []
    },
    "Raises": {
      "children": []
    },
    "Warns": {
      "children": []
    },
    "Other Parameters": {
      "children": []
    },
    "Attributes": {
      "children": []
    },
    "Methods": {
      "children": []
    },
    "Notes": {
      "children": []
    },
    "Warnings": {
      "children": []
    }
  },
  "refs": [
    "Sub",
    "builtins.dict",
    "builtins.print",
    "distributed.pubsub.Pub",
    "distributed.pubsub.Pub.put"
  ],
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Examples",
    "See Also"
  ],
  "item_file": "/Users/bussonniermatthias/dev/distributed/distributed/pubsub.py",
  "item_line": 201,
  "item_type": "<class 'type'>",
  "aliases": [
    "distributed.Pub"
  ],
  "example_section_data": {
    "children": [
      {
        "type": "Code",
        "data": {
          "entries": [
            [
              "pub",
              "distributed.pubsub.Pub",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "Pub",
              "distributed.pubsub.Pub",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              "my-topic",
              "",
              "s2"
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "sub",
              null,
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "Sub",
              null,
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              "my-topic",
              "",
              "s2"
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "pub",
              "distributed.pubsub.Pub",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "put",
              "distributed.pubsub.Pub.put",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "1",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "2",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "3",
              "",
              "mi"
            ],
            [
              "]",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "sub",
              null,
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "get",
              null,
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": "[1, 2, 3]",
          "ce_status": "compiled"
        }
      },
      {
        "type": "Paragraph",
        "data": {
          "children": [
            {
              "type": "Words",
              "data": {
                "value": "You can also use sub within a for loop:"
              }
            }
          ]
        }
      },
      {
        "type": "Code",
        "data": {
          "entries": [
            [
              "for",
              null,
              "k"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "msg",
              null,
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "in",
              null,
              "ow"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "sub",
              null,
              ""
            ],
            [
              ":",
              "",
              ""
            ],
            [
              "  ",
              "",
              ""
            ],
            [
              "# doctest: +SKIP",
              "",
              "c1"
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "    ",
              "",
              ""
            ],
            [
              "print",
              "builtins.print",
              "nb"
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "msg",
              null,
              ""
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": "",
          "ce_status": "compiled"
        }
      },
      {
        "type": "Paragraph",
        "data": {
          "children": [
            {
              "type": "Words",
              "data": {
                "value": "or an async for loop"
              }
            }
          ]
        }
      },
      {
        "type": "Code",
        "data": {
          "entries": [
            [
              "async",
              null,
              "k"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "for",
              null,
              "k"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "msg",
              null,
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "in",
              null,
              "ow"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "sub",
              null,
              ""
            ],
            [
              ":",
              "",
              ""
            ],
            [
              "  ",
              "",
              ""
            ],
            [
              "# doctest: +SKIP",
              "",
              "c1"
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "    ",
              "",
              ""
            ],
            [
              "print",
              "builtins.print",
              "nb"
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "msg",
              null,
              ""
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": "",
          "ce_status": "syntax_error"
        }
      },
      {
        "type": "Paragraph",
        "data": {
          "children": [
            {
              "type": "Words",
              "data": {
                "value": "Similarly the "
              }
            },
            {
              "type": "Verbatim",
              "data": {
                "value": [
                  ".get"
                ]
              }
            },
            {
              "type": "Words",
              "data": {
                "value": " method will return an awaitable if used by an async client or within the IOLoop thread of a worker"
              }
            }
          ]
        }
      },
      {
        "type": "Code",
        "data": {
          "entries": [
            [
              "await",
              null,
              "k"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "sub",
              null,
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "get",
              null,
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "  ",
              "",
              ""
            ],
            [
              "# doctest: +SKIP",
              "",
              "c1"
            ]
          ],
          "out": "",
          "ce_status": "syntax_error"
        }
      },
      {
        "type": "Paragraph",
        "data": {
          "children": [
            {
              "type": "Words",
              "data": {
                "value": "You can see the set of connected worker subscribers by looking at the "
              }
            },
            {
              "type": "Verbatim",
              "data": {
                "value": [
                  ".subscribers"
                ]
              }
            },
            {
              "type": "Words",
              "data": {
                "value": " attribute:"
              }
            }
          ]
        }
      },
      {
        "type": "Code",
        "data": {
          "entries": [
            [
              "pub",
              "distributed.pubsub.Pub",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "subscribers",
              "builtins.dict",
              ""
            ]
          ],
          "out": "{'tcp://...': {},\n 'tcp://...': {}}",
          "ce_status": "compiled"
        }
      }
    ]
  },
  "see_also": [
    {
      "name": {
        "name": "Sub",
        "ref": null,
        "exists": null
      },
      "descriptions": [],
      "type": null
    }
  ],
  "references": null,
  "signature": "Pub(name, worker=None, client=None)"
}