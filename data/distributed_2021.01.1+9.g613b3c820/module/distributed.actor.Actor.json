{
  "_content": {
    "Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Controls an object on a remote worker"
                }
              }
            ],
            "inner": []
          }
        }
      ],
      "title": null
    },
    "Extended Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "An actor allows remote control of a stateful object living on a remote worker.  Method calls on this object trigger operations on the remote object and return ActorFutures on which we can block to get results."
                }
              }
            ],
            "inner": []
          }
        }
      ],
      "title": null
    },
    "Parameters": {
      "children": [],
      "title": null
    },
    "Returns": {
      "children": [],
      "title": null
    },
    "Yields": {
      "children": [],
      "title": null
    },
    "Receives": {
      "children": [],
      "title": null
    },
    "Raises": {
      "children": [],
      "title": null
    },
    "Warns": {
      "children": [],
      "title": null
    },
    "Other Parameters": {
      "children": [],
      "title": null
    },
    "Attributes": {
      "children": [],
      "title": null
    },
    "Methods": {
      "children": [],
      "title": null
    },
    "Notes": {
      "children": [],
      "title": null
    },
    "Warnings": {
      "children": [],
      "title": null
    }
  },
  "refs": [],
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Examples"
  ],
  "item_file": "/Users/bussonniermatthias/dev/distributed/distributed/actor.py",
  "item_line": 14,
  "item_type": "<class 'type'>",
  "aliases": [
    "distributed.Actor"
  ],
  "example_section_data": {
    "children": [
      {
        "type": "Code",
        "data": {
          "entries": [
            [
              "class",
              "",
              "k"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "Counter",
              "",
              "nc"
            ],
            [
              ":",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "    ",
              "",
              ""
            ],
            [
              "def",
              "",
              "k"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "__init__",
              "",
              "fm"
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "self",
              "",
              "bp"
            ],
            [
              ")",
              "",
              ""
            ],
            [
              ":",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "        ",
              "",
              ""
            ],
            [
              "self",
              "",
              "bp"
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "n",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "0",
              "",
              "mi"
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "    ",
              "",
              ""
            ],
            [
              "def",
              "",
              "k"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "increment",
              "",
              "nf"
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "self",
              "",
              "bp"
            ],
            [
              ")",
              "",
              ""
            ],
            [
              ":",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "        ",
              "",
              ""
            ],
            [
              "self",
              "",
              "bp"
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "n",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "+",
              "",
              "o"
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "1",
              "",
              "mi"
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "        ",
              "",
              ""
            ],
            [
              "return",
              "",
              "k"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "self",
              "",
              "bp"
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "n",
              "",
              ""
            ]
          ],
          "out": "",
          "ce_status": "compiled"
        }
      },
      {
        "type": "Code",
        "data": {
          "entries": [
            [
              "from",
              "",
              "kn"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "dask",
              "",
              "nn"
            ],
            [
              ".",
              "",
              "nn"
            ],
            [
              "distributed",
              "",
              "nn"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "import",
              "",
              "kn"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "Client",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "client",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "Client",
              "",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": "",
          "ce_status": "compiled"
        }
      },
      {
        "type": "Paragraph",
        "data": {
          "inline": [
            {
              "type": "Words",
              "data": {
                "value": "You can create an actor by submitting a class with the keyword "
              }
            },
            {
              "type": "Verbatim",
              "data": {
                "value": [
                  "actor=True"
                ]
              }
            },
            {
              "type": "Words",
              "data": {
                "value": "."
              }
            }
          ],
          "inner": []
        }
      },
      {
        "type": "Code",
        "data": {
          "entries": [
            [
              "future",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "client",
              "",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "submit",
              "",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "Counter",
              "",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "actor",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "True",
              "",
              "kc"
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "counter",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "future",
              "",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "result",
              "",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "counter",
              "",
              ""
            ]
          ],
          "out": "<Actor: Counter, key=Counter-1234abcd>",
          "ce_status": "compiled"
        }
      },
      {
        "type": "Paragraph",
        "data": {
          "inline": [
            {
              "type": "Words",
              "data": {
                "value": "Calling methods on this object immediately returns deferred "
              }
            },
            {
              "type": "Verbatim",
              "data": {
                "value": [
                  "ActorFuture"
                ]
              }
            },
            {
              "type": "Words",
              "data": {
                "value": " objects.  You can call "
              }
            },
            {
              "type": "Verbatim",
              "data": {
                "value": [
                  ".result()"
                ]
              }
            },
            {
              "type": "Words",
              "data": {
                "value": " on these objects to block and get the result of the function call."
              }
            }
          ],
          "inner": []
        }
      },
      {
        "type": "Code",
        "data": {
          "entries": [
            [
              "future",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "counter",
              "",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "increment",
              "",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "future",
              "",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "result",
              "",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": "1",
          "ce_status": "compiled"
        }
      },
      {
        "type": "Code",
        "data": {
          "entries": [
            [
              "future",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "counter",
              "",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "increment",
              "",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "future",
              "",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "result",
              "",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": "2",
          "ce_status": "compiled"
        }
      }
    ],
    "title": null
  },
  "see_also": [],
  "signature": "Actor(cls, address, key, worker=None)",
  "references": null,
  "arbitrary": []
}