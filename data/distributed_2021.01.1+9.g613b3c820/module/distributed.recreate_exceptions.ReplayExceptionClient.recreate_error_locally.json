{
  "_content": {
    "Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "For a failed calculation, perform the blamed task locally for debugging."
                }
              }
            ],
            "inner": []
          }
        }
      ],
      "title": null
    },
    "Extended Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "This operation should be performed after a future (result of "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "gather"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": ", "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "compute"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": ", etc) comes back with a status of \"error\", if the stack- trace is not informative enough to diagnose the problem. The specific task (part of the graph pointing to the future) responsible for the error will be fetched from the scheduler, together with the values of its inputs. The function will then be executed, so that "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "pdb"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " can be used for debugging."
                }
              }
            ],
            "inner": []
          }
        }
      ],
      "title": null
    },
    "Parameters": {
      "children": [
        {
          "type": "Param",
          "data": {
            "param": "future",
            "type_": "future or collection that failed",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "The same thing as was given to "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "gather"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ", but came back with an exception/stack-trace. Can also be a (persisted) dask collection containing any errored futures."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        }
      ],
      "title": null
    },
    "Returns": {
      "children": [
        {
          "type": "Param",
          "data": {
            "param": "",
            "type_": "Nothing; the function runs and should raise an exception, allowing",
            "desc": []
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "",
            "type_": "the debugger to run.",
            "desc": []
          }
        }
      ],
      "title": null
    },
    "Yields": {
      "children": [],
      "title": null
    },
    "Receives": {
      "children": [],
      "title": null
    },
    "Raises": {
      "children": [],
      "title": null
    },
    "Warns": {
      "children": [],
      "title": null
    },
    "Other Parameters": {
      "children": [],
      "title": null
    },
    "Attributes": {
      "children": [],
      "title": null
    },
    "Methods": {
      "children": [],
      "title": null
    },
    "Notes": {
      "children": [],
      "title": null
    },
    "Warnings": {
      "children": [],
      "title": null
    }
  },
  "refs": [],
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Examples",
    "Parameters",
    "Returns"
  ],
  "item_file": "/Users/bussonniermatthias/dev/distributed/distributed/recreate_exceptions.py",
  "item_line": 131,
  "item_type": "<class 'function'>",
  "aliases": [
    "distributed.recreate_exceptions.ReplayExceptionClient.recreate_error_locally"
  ],
  "example_section_data": {
    "children": [
      {
        "type": "Code",
        "data": {
          "entries": [
            [
              "future",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "c",
              "",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "submit",
              "",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "div",
              "",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "1",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "0",
              "",
              "mi"
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "         ",
              "",
              ""
            ],
            [
              "# doctest: +SKIP",
              "",
              "c1"
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "future",
              "",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "status",
              "",
              ""
            ],
            [
              "                        ",
              "",
              ""
            ],
            [
              "# doctest: +SKIP",
              "",
              "c1"
            ]
          ],
          "out": "'error'",
          "ce_status": "compiled"
        }
      },
      {
        "type": "Code",
        "data": {
          "entries": [
            [
              "c",
              "",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "recreate_error_locally",
              "",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "future",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "     ",
              "",
              ""
            ],
            [
              "# doctest: +SKIP",
              "",
              "c1"
            ]
          ],
          "out": "ZeroDivisionError: division by zero",
          "ce_status": "compiled"
        }
      },
      {
        "type": "Paragraph",
        "data": {
          "inline": [
            {
              "type": "Words",
              "data": {
                "value": "If you're in IPython you might take this opportunity to use pdb"
              }
            }
          ],
          "inner": []
        }
      },
      {
        "type": "Code",
        "data": {
          "entries": [
            [
              "%",
              "",
              "o"
            ],
            [
              "pdb",
              "",
              ""
            ],
            [
              "                                 ",
              "",
              ""
            ],
            [
              "# doctest: +SKIP",
              "",
              "c1"
            ]
          ],
          "out": "Automatic pdb calling has been turned ON",
          "ce_status": "syntax_error"
        }
      },
      {
        "type": "Code",
        "data": {
          "entries": [
            [
              "c",
              "",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "recreate_error_locally",
              "",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "future",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "     ",
              "",
              ""
            ],
            [
              "# doctest: +SKIP",
              "",
              "c1"
            ]
          ],
          "out": "ZeroDivisionError: division by zero\n      1 def div(x, y):\n----> 2     return x / y\nipdb>",
          "ce_status": "compiled"
        }
      }
    ],
    "title": null
  },
  "see_also": [],
  "signature": "recreate_error_locally(self, future)",
  "references": null,
  "arbitrary": []
}