{
  "aliases": [
    "distributed.active_memory_manager.RetireWorker"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    },
    "Extended Summary": {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "At any given time, the AMM may have registered multiple instances of this policy, one for each worker currently being retired - meaning that most of the time no instances will be registered at all. For this reason, this policy doesn't figure in the dask config ("
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "distributed.yaml"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": "). Instances are added by "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "distributed.Scheduler.retire_workers"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " and automatically remove themselves once the worker has been retired. If the AMM is disabled in the dask config, "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "~distributed.Scheduler.retire_workers"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " will start a temporary ad-hoc one."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "content": {
                    "value": "Failure condition"
                  }
                },
                "type": "Strong"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "There may not be any suitable workers to receive the tasks from the retiring worker. This happens in two use cases:"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "This is the only worker in the cluster, or"
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "All workers are either paused or being retired at the same time"
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              }
            ]
          },
          "type": "EnumeratedList"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "In either case, this policy will fail to move out all keys and set the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "no_recipients"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " boolean to True. "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "~distributed.Scheduler.retire_workers"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " will abort the retirement."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "There is a third use case, where a task fails to be replicated away for whatever reason, e.g. because its recipient is unresponsive but the Scheduler doesn't know yet. In this case we'll just wait for the next AMM iteration and try again (possibly with a different receiving worker, e.g. if the receiving worker was hung but not yet declared dead)."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "content": {
                    "value": "Retiring a worker with spilled tasks"
                  }
                },
                "type": "Strong"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "On its very first iteration, this policy suggests that other workers should fetch all unique in-memory tasks of the retiring worker. Frequently, this means that in the next few moments the retiring worker will be bombarded by "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "distributed.worker.Worker.get_data"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " calls from the rest of the cluster. This can be a problem if most of the managed memory of the worker has been spilled out, as it could send the worker above its terminate threshold. Two measures are in place in order to prevent this:"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "At every iteration, this policy drops all tasks on the retiring worker that have   already been replicated somewhere else. This makes room for further tasks to be   moved out of the spill file in order to be replicated onto another worker."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Once the worker passes the "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "pause"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " threshold,   "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "~distributed.worker.Worker.get_data"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " throttles the number of outgoing   connections to 1."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              }
            ]
          },
          "type": "BulletList"
        }
      ],
      "level": 0,
      "target": null,
      "title": null
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    },
    "Notes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    },
    "Parameters": {
      "children": [
        {
          "data": {
            "children": [
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "URI of the worker to be retired"
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "address: str",
                "type_": ""
              }
            ]
          },
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    },
    "Returns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    },
    "Summary": {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Replicate somewhere else all unique in-memory tasks on a worker, preparing for its shutdown."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    }
  },
  "example_section_data": {
    "children": [],
    "level": 0,
    "target": null,
    "title": null
  },
  "item_file": "/distributed/active_memory_manager.py",
  "item_line": 554,
  "item_type": "<class 'abc.ABCMeta'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters"
  ],
  "references": null,
  "see_also": [],
  "signature": {
    "value": null
  }
}