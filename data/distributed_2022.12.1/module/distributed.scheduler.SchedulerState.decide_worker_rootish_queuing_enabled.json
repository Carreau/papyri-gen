{
  "aliases": [
    "distributed.scheduler.SchedulerState.decide_worker_rootish_queuing_enabled"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    },
    "Extended Summary": {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Picks the least-busy worker out of the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "idle"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " workers (idle workers have fewer tasks running than threads, as set by "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "distributed.scheduler.worker-saturation"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": "). It does not consider the location of dependencies, since they'll end up on every worker anyway."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "If all workers are full, returns None, meaning the task should transition to "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "queued"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ". The scheduler will wait to send it to a worker until a thread opens up. This ensures that downstream tasks always run before new root tasks are started."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "This does not try to schedule sibling tasks on the same worker; in fact, it usually does the opposite. Even though this increases subsequent data transfer, it typically reduces overall memory use by eliminating root task overproduction."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    },
    "Notes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    },
    "Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    },
    "Returns": {
      "children": [
        {
          "data": {
            "children": [
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "The worker to assign the task to. If there are no idle workers, returns None, in which case the task should be transitioned to "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "queued"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": "."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "",
                "type_": "ws: WorkerState | None"
              }
            ]
          },
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null
    },
    "Summary": {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Pick a worker for a runnable root-ish task, if not all are busy."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    }
  },
  "example_section_data": {
    "children": [],
    "level": 0,
    "target": null,
    "title": null
  },
  "item_file": "/distributed/scheduler.py",
  "item_line": 2081,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Returns"
  ],
  "references": null,
  "see_also": [],
  "signature": {
    "value": "decide_worker_rootish_queuing_enabled(self) -> 'WorkerState | None'"
  }
}