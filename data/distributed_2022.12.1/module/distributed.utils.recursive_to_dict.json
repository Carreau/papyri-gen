{
  "aliases": [
    "distributed.core.recursive_to_dict"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    },
    "Extended Summary": {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "The following objects are supported:"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "dd": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Descended into these objects recursively. Python-specific collections are     converted to JSON-friendly variants."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "dt": {
                  "children": [
                    {
                      "data": {
                        "value": "list, tuple, set, frozenset, deque, dict, dict_keys, dict_values"
                      },
                      "type": "Words"
                    }
                  ]
                }
              },
              {
                "dd": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Call the method and dump its output"
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "dt": {
                  "children": [
                    {
                      "data": {
                        "value": "Classes that define "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "_to_dict(self, *, exclude: Container[str] = ())"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": ":"
                      },
                      "type": "Words"
                    }
                  ]
                }
              },
              {
                "dd": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Like above, but prevents nested calls (see below)"
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "dt": {
                  "children": [
                    {
                      "data": {
                        "value": "Classes that define "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "_to_dict_no_nest(self, *, exclude: Container[str] = ())"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": ":"
                      },
                      "type": "Words"
                    }
                  ]
                }
              },
              {
                "dd": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Dump the output of "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "repr()"
                            ]
                          },
                          "type": "Verbatim"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "dt": {
                  "children": [
                    {
                      "data": {
                        "value": "Other Python objects"
                      },
                      "type": "Words"
                    }
                  ]
                }
              },
              {
                "dd": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Dump the output of "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "repr()"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": ". This breaks circular references and shortens the     output."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "dt": {
                  "children": [
                    {
                      "data": {
                        "value": "Objects already encountered before, regardless of type"
                      },
                      "type": "Words"
                    }
                  ]
                }
              }
            ]
          },
          "type": "DefList"
        }
      ],
      "level": 0,
      "target": null,
      "title": null
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    },
    "Notes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    },
    "Parameters": {
      "children": [
        {
          "data": {
            "children": [
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "A list of attribute names to be excluded from the dump. This will be forwarded to the objects "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "_to_dict"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " methods and these methods are required to accept this parameter."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "exclude:",
                "type_": ""
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "If True, convert the top-level Python object to a dict of its public members"
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "members:",
                "type_": ""
              },
              {
                "desc": [],
                "param": "**``_to_dict_no_nest`` vs. ``_to_dict``**",
                "type_": ""
              },
              {
                "desc": [],
                "param": "The presence of the ``_to_dict_no_nest`` method signals ``recursive_to_dict`` to",
                "type_": ""
              },
              {
                "desc": [],
                "param": "have a mutually exclusive full dict representation with other objects that also have",
                "type_": ""
              },
              {
                "desc": [],
                "param": "the ``_to_dict_no_nest``, regardless of their class. Only the outermost object in a",
                "type_": ""
              },
              {
                "desc": [],
                "param": "nested structure has the method invoked; all others are",
                "type_": ""
              },
              {
                "desc": [],
                "param": "dumped as their string repr instead, even if they were not encountered before.",
                "type_": ""
              },
              {
                "desc": [],
                "param": "Example:",
                "type_": ""
              },
              {
                "desc": [
                  {
                    "data": {
                      "value": ">>> class Person:\n...     def __init__(self, name):\n...         self.name = name\n...         self.children = []\n...         self.pets = []\n...\n...     def _to_dict_no_nest(self, exclude=()):\n...         return recursive_to_dict(self.__dict__, exclude=exclude)\n...\n...     def __repr__(self):\n...         return self.name"
                    },
                    "type": "BlockVerbatim"
                  },
                  {
                    "data": {
                      "value": ">>> class Pet:\n...     def __init__(self, name):\n...         self.name = name\n...         self.owners = []\n...\n...     def _to_dict_no_nest(self, exclude=()):\n...         return recursive_to_dict(self.__dict__, exclude=exclude)\n...\n...     def __repr__(self):\n...         return self.name"
                    },
                    "type": "BlockVerbatim"
                  },
                  {
                    "data": {
                      "value": ">>> alice = Person(\"Alice\")\n>>> bob = Person(\"Bob\")\n>>> charlie = Pet(\"Charlie\")\n>>> alice.children.append(bob)\n>>> alice.pets.append(charlie)\n>>> bob.pets.append(charlie)\n>>> charlie.owners[:] = [alice, bob]\n>>> recursive_to_dict({\"people\": [alice, bob], \"pets\": [charlie]})\n{\n    \"people\": [\n        {\"name\": \"Alice\", \"children\": [\"Bob\"], \"pets\": [\"Charlie\"]},\n        {\"name\": \"Bob\", \"children\": [], \"pets\": [\"Charlie\"]},\n    ],\n    \"pets\": [\n        {\"name\": \"Charlie\", \"owners\": [\"Alice\", \"Bob\"]},\n    ],\n}"
                    },
                    "type": "BlockVerbatim"
                  }
                ],
                "param": ".. code-block:: python",
                "type_": ""
              },
              {
                "desc": [],
                "param": "If we changed the methods to ``_to_dict``, the output would instead be:",
                "type_": ""
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "dd": [
                            {
                              "data": {
                                "children": [
                                  {
                                    "dd": [
                                      {
                                        "data": {
                                          "children": [
                                            {
                                              "dd": [
                                                {
                                                  "data": {
                                                    "children": [
                                                      {
                                                        "data": {
                                                          "value": "\"name\": \"Alice\",             \"children\": [                 {                     \"name\": \"Bob\",                     \"children\": [],                     \"pets\": [{\"name\": \"Charlie\", \"owners\": [\"Alice\", \"Bob\"]}],                 },             ],             pets: [\"Charlie\"],"
                                                        },
                                                        "type": "Words"
                                                      }
                                                    ]
                                                  },
                                                  "type": "Paragraph"
                                                }
                                              ],
                                              "dt": {
                                                "children": [
                                                  {
                                                    "data": {
                                                      "value": "{"
                                                    },
                                                    "type": "Words"
                                                  }
                                                ]
                                              }
                                            }
                                          ]
                                        },
                                        "type": "DefList"
                                      }
                                    ],
                                    "dt": {
                                      "children": [
                                        {
                                          "data": {
                                            "value": "\"people\": ["
                                          },
                                          "type": "Words"
                                        }
                                      ]
                                    }
                                  }
                                ]
                              },
                              "type": "DefList"
                            }
                          ],
                          "dt": {
                            "children": [
                              {
                                "data": {
                                  "value": "{"
                                },
                                "type": "Words"
                              }
                            ]
                          }
                        }
                      ]
                    },
                    "type": "DefList"
                  }
                ],
                "param": ".. code-block:: python",
                "type_": ""
              },
              {
                "desc": [],
                "param": "Also notice that, if in the future someone will swap the creation of the",
                "type_": ""
              },
              {
                "desc": [],
                "param": "``children`` and ``pets`` attributes inside ``Person.__init__``, the output with",
                "type_": ""
              },
              {
                "desc": [],
                "param": "``_to_dict`` will change completely whereas the one with ``_to_dict_no_nest`` won't!",
                "type_": ""
              }
            ]
          },
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    },
    "Returns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    },
    "Summary": {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Recursively convert arbitrary Python objects to a JSON-serializable representation. This is intended for debugging purposes only."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    }
  },
  "example_section_data": {
    "children": [],
    "level": 0,
    "target": null,
    "title": null
  },
  "item_file": "/distributed/utils.py",
  "item_line": 1528,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters"
  ],
  "references": null,
  "see_also": [],
  "signature": {
    "value": "recursive_to_dict(obj: 'AnyType', *, exclude: 'Container[str]' = (), members: 'bool' = False) -> 'AnyType'"
  }
}