{
  "aliases": [
    "distributed.Client.scatter"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "This moves data from the local client process into the workers of the distributed scheduler.  Note that it is often better to submit jobs to your workers to have them load the data rather than loading data locally and then scattering it out to them."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Data to scatter out to workers.  Output type matches input type."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "data",
              "type": "Param",
              "type_": "list, dict, or object"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Optionally constrain locations of data. Specify workers as hostname/port pairs, e.g. "
                    },
                    {
                      "type": "inlineCode",
                      "value": "('127.0.0.1', 8787)"
                    },
                    {
                      "type": "text",
                      "value": "."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "workers",
              "type": "Param",
              "type_": "list of tuples (optional)"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Whether to send each data element to all workers. By default we round-robin based on number of cores."
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "note "
                        }
                      ],
                      "type": "admonitionTitle"
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "Setting this flag to True is incompatible with the Active Memory Manager's "
                        },
                        {
                          "domain": null,
                          "role": "ref",
                          "type": "Directive",
                          "value": "ReduceReplicas"
                        },
                        {
                          "type": "text",
                          "value": " policy. If you wish to use it, you must first disable the policy or disable the AMM entirely."
                        }
                      ],
                      "type": "paragraph"
                    }
                  ],
                  "kind": "note",
                  "type": "admonition"
                }
              ],
              "param": "broadcast",
              "type": "Param",
              "type_": "bool (defaults to False)"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Whether or not to connect directly to the workers, or to ask the scheduler to serve as intermediary.  This can also be set when creating the Client."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "direct",
              "type": "Param",
              "type_": "bool (defaults to automatically check)"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Whether or not to hash data to determine key. If False then this uses a random key"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "hash",
              "type": "Param",
              "type_": "bool (optional)"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Time in seconds after which to raise a "
                    },
                    {
                      "type": "inlineCode",
                      "value": "dask.distributed.TimeoutError"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "timeout",
              "type": "Param",
              "type_": "number, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "If True the client is in asynchronous mode"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "asynchronous: bool",
              "type": "Param",
              "type_": ""
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [
        {
          "children": [
            {
              "desc": [],
              "param": "",
              "type": "Param",
              "type_": "List, dict, iterator, or queue of futures matching the type of input."
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Scatter data into distributed memory"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [
      {
        "type": "code",
        "value": "c = Client('127.0.0.1:8787')  # doctest: +SKIP\nc.scatter(1) # doctest: +SKIP"
      },
      {
        "type": "code",
        "value": "c.scatter([1, 2, 3])  # doctest: +SKIP"
      },
      {
        "type": "code",
        "value": "c.scatter({'x': 1, 'y': 2, 'z': 3})  # doctest: +SKIP"
      },
      {
        "type": "text",
        "value": "Constrain location of data to subset of workers"
      },
      {
        "type": "code",
        "value": "c.scatter([1, 2, 3], workers=[('hostname', 8788)])   # doctest: +SKIP"
      },
      {
        "type": "text",
        "value": "Broadcast data to all workers"
      },
      {
        "type": "code",
        "value": "[future] = c.scatter([element], broadcast=True)  # doctest: +SKIP"
      },
      {
        "type": "text",
        "value": "Send scattered data to parallelized function using client futures\ninterface"
      },
      {
        "type": "code",
        "value": "data = c.scatter(data, broadcast=True)  # doctest: +SKIP\nres = [c.submit(func, data, i) for i in range(100)]"
      }
    ],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/distributed/client.py",
  "item_line": 2432,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns",
    "Examples",
    "See Also"
  ],
  "references": null,
  "see_also": [
    {
      "descriptions": [
        {
          "children": [
            {
              "type": "text",
              "value": "Gather data back to local process"
            }
          ],
          "type": "paragraph"
        }
      ],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "module",
          "module": "distributed",
          "path": "distributed.client:Client.gather",
          "type": "RefInfo",
          "version": "2023.1.0"
        },
        "type": "Link",
        "value": "Client.gather"
      },
      "type": null
    }
  ],
  "signature": {
    "type": "Signature",
    "value": "(self, data, workers=None, broadcast=False, direct=None, hash=True, timeout='__no_default__', asynchronous=None)"
  },
  "type": "DocBlob"
}