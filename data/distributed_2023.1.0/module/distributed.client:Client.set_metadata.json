{
  "aliases": [
    "distributed.Client.set_metadata"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "This allows you to store small amounts of data on the central scheduler process for administrative purposes.  Data should be msgpack serializable (ints, strings, lists, dicts)"
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "If the key corresponds to a task then that key will be cleaned up when the task is forgotten by the scheduler."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "If the key is a list then it will be assumed that you want to index into a nested dictionary structure using those keys.  For example if you call the following      "
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": ">>> client.set_metadata(['a', 'b', 'c'], 123)"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Then this is the same as setting"
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "code",
              "value": ">>> scheduler.task_metadata['a']['b']['c'] = 123"
            }
          ],
          "type": "blockquote"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "The lower level dictionaries will be created on demand."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Set arbitrary metadata in the scheduler"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [
      {
        "type": "code",
        "value": "client.set_metadata('x', 123)  # doctest: +SKIP\nclient.get_metadata('x')  # doctest: +SKIP"
      },
      {
        "type": "code",
        "value": "client.set_metadata(['x', 'y'], 123)  # doctest: +SKIP\nclient.get_metadata('x')  # doctest: +SKIP"
      },
      {
        "type": "code",
        "value": "client.set_metadata(['x', 'w', 'z'], 456)  # doctest: +SKIP\nclient.get_metadata('x')  # doctest: +SKIP"
      },
      {
        "type": "code",
        "value": "client.get_metadata(['x', 'w'])  # doctest: +SKIP"
      }
    ],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/distributed/client.py",
  "item_line": 4396,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Examples",
    "See Also"
  ],
  "references": null,
  "see_also": [
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "module",
          "module": "distributed",
          "path": "distributed.client:Client.get_metadata",
          "type": "RefInfo",
          "version": "2023.1.0"
        },
        "type": "Link",
        "value": "get_metadata"
      },
      "type": null
    }
  ],
  "signature": {
    "type": "Signature",
    "value": "(self, key, value)"
  },
  "type": "DocBlob"
}