{
  "aliases": [
    "distributed.client.ConnectionPool"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "This provides a connect method that mirrors the normal distributed.connect method, but provides connection sharing and tracks connection limits."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "This object provides an "
            },
            {
              "type": "inlineCode",
              "value": "rpc"
            },
            {
              "type": "text",
              "value": " like interface      "
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": ">>> rpc = ConnectionPool(limit=512)\n>>> scheduler = rpc('127.0.0.1:8786')\n>>> workers = [rpc(address) for address in ...]\n\n>>> info = await scheduler.identity()"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "It creates enough comms to satisfy concurrent connections to any particular address      "
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": ">>> a, b = await asyncio.gather(scheduler.who_has(), scheduler.has_what())"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "It reuses existing comms so that we don't have to continuously reconnect."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "It also maintains a comm limit to avoid \"too many open file handle\" issues.  Whenever this maximum is reached we clear out all idling comms. If that doesn't do the trick then we wait until one of the occupied comms closes."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The number of open comms to maintain at once"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "limit: int",
              "type": "Param",
              "type_": ""
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Whether or not to deserialize data by default or pass it through"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "deserialize: bool",
              "type": "Param",
              "type_": ""
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "A maximum sized pool of Comm objects."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/distributed/core.py",
  "item_line": 1253,
  "item_type": "<class 'type'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters"
  ],
  "references": null,
  "see_also": [],
  "signature": {
    "type": "Signature",
    "value": null
  },
  "type": "DocBlob"
}