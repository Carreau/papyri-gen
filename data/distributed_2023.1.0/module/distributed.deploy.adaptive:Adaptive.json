{
  "aliases": [
    "distributed.Adaptive"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Contains logic to dynamically resize a Dask cluster based on current use. This class needs to be paired with a system that can create and destroy Dask workers using a cluster resource manager.  Typically it is built into already existing solutions, rather than used directly by users. It is most commonly used from the "
            },
            {
              "type": "inlineCode",
              "value": ".adapt(...)"
            },
            {
              "type": "text",
              "value": " method of various Dask cluster classes."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Subclasses can override "
            },
            {
              "type": "inlineCode",
              "value": "Adaptive.target"
            },
            {
              "type": "text",
              "value": " and "
            },
            {
              "type": "inlineCode",
              "value": "Adaptive.workers_to_close"
            },
            {
              "type": "text",
              "value": " to control when the cluster should be resized. The default implementation checks if there are too many tasks per worker or too little memory available (see "
            },
            {
              "type": "inlineCode",
              "value": "distributed.Scheduler.adaptive_target"
            },
            {
              "type": "text",
              "value": "). The values for interval, min, max, wait_count and target_duration can be specified in the dask config under the distributed.adaptive key."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Must have scale and scale_down methods/coroutines"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "cluster: object",
              "type": "Param",
              "type_": ""
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Milliseconds between checks"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "interval",
              "type": "Param",
              "type_": "timedelta or str, default \"1000 ms\""
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Number of consecutive times that a worker should be suggested for removal before we remove it."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "wait_count: int, default 3",
              "type": "Param",
              "type_": ""
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Amount of time we want a computation to take. This affects how aggressively we scale up."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "target_duration: timedelta or str, default \"5s\"",
              "type": "Param",
              "type_": ""
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Function to group workers together when scaling down See Scheduler.workers_to_close for more information"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "worker_key: Callable[WorkerState]",
              "type": "Param",
              "type_": ""
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Minimum number of workers to keep around"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "minimum: int",
              "type": "Param",
              "type_": ""
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Maximum number of workers to keep around"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "maximum: int",
              "type": "Param",
              "type_": ""
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Extra parameters to pass to Scheduler.workers_to_close"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "**kwargs:",
              "type": "Param",
              "type_": ""
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Adaptively allocate workers based on scheduler load.  A superclass."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [
      {
        "type": "text",
        "value": "This is commonly used from existing Dask classes, like KubeCluster"
      },
      {
        "type": "code",
        "value": "from dask_kubernetes import KubeCluster\ncluster = KubeCluster()\ncluster.adapt(minimum=10, maximum=100)"
      },
      {
        "type": "text",
        "value": "Alternatively you can use it from your own Cluster class by subclassing\nfrom Dask's Cluster superclass"
      },
      {
        "type": "code",
        "value": "from distributed.deploy import Cluster\nclass MyCluster(Cluster):\n    def scale_up(self, n):\n        \"\"\" Bring worker count up to n \"\"\"\n    def scale_down(self, workers):\n       \"\"\" Remove worker addresses from cluster \"\"\""
      },
      {
        "type": "code",
        "value": "cluster = MyCluster()\ncluster.adapt(minimum=10, maximum=100)"
      }
    ],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/distributed/deploy/adaptive.py",
  "item_line": 18,
  "item_type": "<class 'type'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Examples",
    "Notes"
  ],
  "references": null,
  "see_also": [],
  "signature": {
    "type": "Signature",
    "value": null
  },
  "type": "DocBlob"
}