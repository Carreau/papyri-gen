{
  "aliases": [
    "distributed.Client.gather"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Accepts a future, nested container of futures, iterator, or queue. The return type will match the input type."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "This can be a possibly nested collection of Future objects. Collections can be lists, sets, or dictionaries"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "futures",
              "type": "Param",
              "type_": "Collection of futures"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Either 'raise' or 'skip' if we should raise if a future has erred or skip its inclusion in the output collection"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "errors",
              "type": "Param",
              "type_": "string"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Whether or not to connect directly to the workers, or to ask the scheduler to serve as intermediary.  This can also be set when creating the Client."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "direct",
              "type": "Param",
              "type_": "boolean"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "If True the client is in asynchronous mode"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "asynchronous: bool",
              "type": "Param",
              "type_": ""
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [
        {
          "children": [
            {
              "desc": [],
              "param": "",
              "type": "Param",
              "type_": "results: a collection of the same type as the input, but now with"
            },
            {
              "desc": [],
              "param": "",
              "type": "Param",
              "type_": "gathered results rather than futures"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Gather futures from distributed memory"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [
      {
        "type": "code",
        "value": "from operator import add  # doctest: +SKIP\nc = Client('127.0.0.1:8787')  # doctest: +SKIP\nx = c.submit(add, 1, 2)  # doctest: +SKIP\nc.gather(x)  # doctest: +SKIP"
      },
      {
        "type": "code",
        "value": "c.gather([x, [x], x])  # support lists and dicts # doctest: +SKIP"
      }
    ],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/distributed/client.py",
  "item_line": 2253,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns",
    "Examples",
    "See Also"
  ],
  "references": null,
  "see_also": [
    {
      "descriptions": [
        {
          "children": [
            {
              "type": "text",
              "value": "Send data out to cluster"
            }
          ],
          "type": "paragraph"
        }
      ],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "module",
          "module": "distributed",
          "path": "distributed.client:Client.scatter",
          "type": "RefInfo",
          "version": "2023.1.1"
        },
        "type": "Link",
        "value": "Client.scatter"
      },
      "type": null
    }
  ],
  "signature": {
    "type": "Signature",
    "value": "(self, futures, errors='raise', direct=None, asynchronous=None)"
  },
  "type": "DocBlob"
}