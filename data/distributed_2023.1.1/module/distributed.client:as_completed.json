{
  "aliases": [
    "distributed.as_completed"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "This returns an iterator that yields the input future objects in the order in which they complete.  Calling "
            },
            {
              "type": "inlineCode",
              "value": "next"
            },
            {
              "type": "text",
              "value": " on the iterator will block until the next future completes, irrespective of order."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Additionally, you can also add more futures to this object during computation with the "
            },
            {
              "type": "inlineCode",
              "value": ".add"
            },
            {
              "type": "text",
              "value": " method"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "A list of Future objects to be iterated over in the order in which they complete"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "futures: Collection of futures",
              "type": "Param",
              "type_": ""
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Whether to wait and include results of futures as well; in this case "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "as_completed"
                    },
                    {
                      "type": "text",
                      "value": " yields a tuple of (future, result)"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "with_results: bool (False)",
              "type": "Param",
              "type_": ""
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Whether we should raise when the result of a future raises an exception; only affects behavior when "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "with_results=True"
                    },
                    {
                      "type": "text",
                      "value": "."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "raise_errors: bool (True)",
              "type": "Param",
              "type_": ""
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Return futures in the order in which they complete"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [
      {
        "type": "code",
        "value": "x, y, z = client.map(inc, [1, 2, 3])  # doctest: +SKIP\nfor future in as_completed([x, y, z]):  # doctest: +SKIP\n    print(future.result())  # doctest: +SKIP"
      },
      {
        "type": "text",
        "value": "Add more futures during computation"
      },
      {
        "type": "code",
        "value": "x, y, z = client.map(inc, [1, 2, 3])  # doctest: +SKIP\nac = as_completed([x, y, z])  # doctest: +SKIP\nfor future in ac:  # doctest: +SKIP\n    print(future.result())  # doctest: +SKIP\n    if random.random() < 0.5:  # doctest: +SKIP\n        ac.add(c.submit(double, future))  # doctest: +SKIP"
      },
      {
        "type": "text",
        "value": "Optionally wait until the result has been gathered as well"
      },
      {
        "type": "code",
        "value": "ac = as_completed([x, y, z], with_results=True)  # doctest: +SKIP\nfor future, result in ac:  # doctest: +SKIP\n    print(result)  # doctest: +SKIP"
      }
    ],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/distributed/client.py",
  "item_line": 4948,
  "item_type": "<class 'type'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Examples"
  ],
  "references": null,
  "see_also": [],
  "signature": {
    "type": "Signature",
    "value": null
  },
  "type": "DocBlob"
}