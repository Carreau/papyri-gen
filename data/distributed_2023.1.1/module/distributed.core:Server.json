{
  "aliases": [
    "distributed.core.Server"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Superclass for endpoints in a distributed cluster, such as Worker and Scheduler objects."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "children": [
                {
                  "type": "text",
                  "value": "Handlers"
                }
              ],
              "type": "strong"
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Servers define operations with a "
            },
            {
              "type": "inlineCode",
              "value": "handlers"
            },
            {
              "type": "text",
              "value": " dict mapping operation names to functions.  The first argument of a handler function will be a "
            },
            {
              "type": "inlineCode",
              "value": "Comm"
            },
            {
              "type": "text",
              "value": " for the communication established with the client.  Other arguments will receive inputs from the keys of the incoming message which will always be a dictionary."
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": ">>> def pingpong(comm):\n...     return b'pong'"
        },
        {
          "type": "code",
          "value": ">>> def add(comm, x, y):\n...     return x + y"
        },
        {
          "type": "code",
          "value": ">>> handlers = {'ping': pingpong, 'add': add}\n>>> server = Server(handlers)  # doctest: +SKIP\n>>> server.listen('tcp://0.0.0.0:8000')  # doctest: +SKIP"
        },
        {
          "children": [
            {
              "children": [
                {
                  "type": "text",
                  "value": "Message Format"
                }
              ],
              "type": "strong"
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "The server expects messages to be dictionaries with a special key, "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "'op'"
            },
            {
              "type": "text",
              "value": " that corresponds to the name of the operation, and other key-value pairs as required by the function."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "So in the example above the following would be good messages."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "inlineCode",
                      "value": "{'op': 'ping'}"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "inlineCode",
                      "value": "{'op': 'add', 'x': 10, 'y': 20}"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            }
          ],
          "ordered": false,
          "spread": false,
          "start": 1,
          "type": "list"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Dask Distributed Server"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/distributed/core.py",
  "item_line": 265,
  "item_type": "<class 'type'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary"
  ],
  "references": null,
  "see_also": [],
  "signature": {
    "type": "Signature",
    "value": null
  },
  "type": "DocBlob"
}