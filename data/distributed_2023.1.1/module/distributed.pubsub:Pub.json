{
  "aliases": [
    "distributed.Pub"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "This allows clients and workers to directly communicate data between each other with a typical Publish-Subscribe pattern.  This involves two components,"
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Pub objects, into which we put data:"
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "code",
              "value": ">>> pub = Pub('my-topic')\n>>> pub.put(123)"
            }
          ],
          "type": "blockquote"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "And Sub objects, from which we collect data:"
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "code",
              "value": ">>> sub = Sub('my-topic')\n>>> sub.get()\n123"
            }
          ],
          "type": "blockquote"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Many Pub and Sub objects can exist for the same topic.  All data sent from any Pub will be sent to all Sub objects on that topic that are currently connected.  Pub's and Sub's find each other using the scheduler, but they communicate directly with each other without coordination from the scheduler."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Pubs and Subs use the central scheduler to find each other, but not to mediate the communication.  This means that there is very little additional latency or overhead, and they are appropriate for very frequent data transfers.  For context, most data transfer first checks with the scheduler to find which workers should participate, and then does direct worker-to-worker transfers.  This checking in with the scheduler provides some stability guarantees, but also adds in a few extra network hops.  PubSub doesn't do this, and so is faster, but also can easily drop messages if Pubs or Subs disappear without notice."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "When using a Pub or Sub from a Client all communications will be routed through the scheduler.  This can cause some performance degradation.  Pubs and Subs only operate at top-speed when they are both on workers."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The name of the group of Pubs and Subs on which to participate."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "name: object (msgpack serializable)",
              "type": "Param",
              "type_": ""
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The worker to be used for publishing data. Defaults to the value of "
                    },
                    {
                      "type": "inlineCode",
                      "value": "`get_worker()`"
                    },
                    {
                      "type": "text",
                      "value": ". If given, "
                    },
                    {
                      "type": "inlineCode",
                      "value": "client"
                    },
                    {
                      "type": "text",
                      "value": " must be "
                    },
                    {
                      "type": "inlineCode",
                      "value": "None"
                    },
                    {
                      "type": "text",
                      "value": "."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "worker: Worker (optional)",
              "type": "Param",
              "type_": ""
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Client used for communication with the scheduler. Defaults to the value of "
                    },
                    {
                      "type": "inlineCode",
                      "value": "get_client()"
                    },
                    {
                      "type": "text",
                      "value": ". If given, "
                    },
                    {
                      "type": "inlineCode",
                      "value": "worker"
                    },
                    {
                      "type": "text",
                      "value": " must be "
                    },
                    {
                      "type": "inlineCode",
                      "value": "None"
                    },
                    {
                      "type": "text",
                      "value": "."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "client: Client (optional)",
              "type": "Param",
              "type_": ""
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Publish data with Publish-Subscribe pattern"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [
      {
        "type": "code",
        "value": "pub = Pub('my-topic')\nsub = Sub('my-topic')\npub.put([1, 2, 3])\nsub.get()"
      },
      {
        "type": "text",
        "value": "You can also use sub within a for loop:"
      },
      {
        "type": "code",
        "value": "for msg in sub:  # doctest: +SKIP\n    print(msg)"
      },
      {
        "type": "text",
        "value": "or an async for loop"
      },
      {
        "type": "code",
        "value": "async for msg in sub:  # doctest: +SKIP\n    print(msg)"
      },
      {
        "type": "text",
        "value": "Similarly the ``.get`` method will return an awaitable if used by an async\nclient or within the IOLoop thread of a worker"
      },
      {
        "type": "code",
        "value": "await sub.get()  # doctest: +SKIP"
      },
      {
        "type": "text",
        "value": "You can see the set of connected worker subscribers by looking at the\n``.subscribers`` attribute:"
      },
      {
        "type": "code",
        "value": "pub.subscribers"
      }
    ],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/distributed/pubsub.py",
  "item_line": 201,
  "item_type": "<class 'type'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Examples",
    "See Also"
  ],
  "references": null,
  "see_also": [
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "to-resolve",
          "module": "current-module",
          "path": "Sub",
          "type": "RefInfo",
          "version": "current-version"
        },
        "type": "Link",
        "value": "Sub"
      },
      "type": null
    }
  ],
  "signature": {
    "type": "Signature",
    "value": null
  },
  "type": "DocBlob"
}