{
  "aliases": [
    "distributed.core.recursive_to_dict"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "The following objects are supported:"
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "dd": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Descended into these objects recursively. Python-specific collections are     converted to JSON-friendly variants."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "dt": {
                "children": [
                  {
                    "type": "text",
                    "value": "list, tuple, set, frozenset, deque, dict, dict_keys, dict_values"
                  }
                ],
                "type": "paragraph"
              },
              "type": "DefListItem"
            },
            {
              "dd": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Call the method and dump its output"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "dt": {
                "children": [
                  {
                    "type": "text",
                    "value": "Classes that define "
                  },
                  {
                    "type": "inlineCode",
                    "value": "_to_dict(self, *, exclude: Container[str] = ())"
                  },
                  {
                    "type": "text",
                    "value": ":"
                  }
                ],
                "type": "paragraph"
              },
              "type": "DefListItem"
            },
            {
              "dd": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Like above, but prevents nested calls (see below)"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "dt": {
                "children": [
                  {
                    "type": "text",
                    "value": "Classes that define "
                  },
                  {
                    "type": "inlineCode",
                    "value": "_to_dict_no_nest(self, *, exclude: Container[str] = ())"
                  },
                  {
                    "type": "text",
                    "value": ":"
                  }
                ],
                "type": "paragraph"
              },
              "type": "DefListItem"
            },
            {
              "dd": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Dump the output of "
                    },
                    {
                      "type": "inlineCode",
                      "value": "repr()"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "dt": {
                "children": [
                  {
                    "type": "text",
                    "value": "Other Python objects"
                  }
                ],
                "type": "paragraph"
              },
              "type": "DefListItem"
            },
            {
              "dd": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Dump the output of "
                    },
                    {
                      "type": "inlineCode",
                      "value": "repr()"
                    },
                    {
                      "type": "text",
                      "value": ". This breaks circular references and shortens the     output."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "dt": {
                "children": [
                  {
                    "type": "text",
                    "value": "Objects already encountered before, regardless of type"
                  }
                ],
                "type": "paragraph"
              },
              "type": "DefListItem"
            }
          ],
          "type": "DefList"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "A list of attribute names to be excluded from the dump. This will be forwarded to the objects "
                    },
                    {
                      "type": "inlineCode",
                      "value": "_to_dict"
                    },
                    {
                      "type": "text",
                      "value": " methods and these methods are required to accept this parameter."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "exclude:",
              "type": "Param",
              "type_": ""
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "If True, convert the top-level Python object to a dict of its public members"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "members:",
              "type": "Param",
              "type_": ""
            },
            {
              "desc": [],
              "param": "**``_to_dict_no_nest`` vs. ``_to_dict``**",
              "type": "Param",
              "type_": ""
            },
            {
              "desc": [],
              "param": "The presence of the ``_to_dict_no_nest`` method signals ``recursive_to_dict`` to",
              "type": "Param",
              "type_": ""
            },
            {
              "desc": [],
              "param": "have a mutually exclusive full dict representation with other objects that also have",
              "type": "Param",
              "type_": ""
            },
            {
              "desc": [],
              "param": "the ``_to_dict_no_nest``, regardless of their class. Only the outermost object in a",
              "type": "Param",
              "type_": ""
            },
            {
              "desc": [],
              "param": "nested structure has the method invoked; all others are",
              "type": "Param",
              "type_": ""
            },
            {
              "desc": [],
              "param": "dumped as their string repr instead, even if they were not encountered before.",
              "type": "Param",
              "type_": ""
            },
            {
              "desc": [],
              "param": "Example:",
              "type": "Param",
              "type_": ""
            },
            {
              "desc": [
                {
                  "type": "code",
                  "value": ">>> class Person:\n...     def __init__(self, name):\n...         self.name = name\n...         self.children = []\n...         self.pets = []\n...\n...     def _to_dict_no_nest(self, exclude=()):\n...         return recursive_to_dict(self.__dict__, exclude=exclude)\n...\n...     def __repr__(self):\n...         return self.name"
                },
                {
                  "type": "code",
                  "value": ">>> class Pet:\n...     def __init__(self, name):\n...         self.name = name\n...         self.owners = []\n...\n...     def _to_dict_no_nest(self, exclude=()):\n...         return recursive_to_dict(self.__dict__, exclude=exclude)\n...\n...     def __repr__(self):\n...         return self.name"
                },
                {
                  "type": "code",
                  "value": ">>> alice = Person(\"Alice\")\n>>> bob = Person(\"Bob\")\n>>> charlie = Pet(\"Charlie\")\n>>> alice.children.append(bob)\n>>> alice.pets.append(charlie)\n>>> bob.pets.append(charlie)\n>>> charlie.owners[:] = [alice, bob]\n>>> recursive_to_dict({\"people\": [alice, bob], \"pets\": [charlie]})\n{\n    \"people\": [\n        {\"name\": \"Alice\", \"children\": [\"Bob\"], \"pets\": [\"Charlie\"]},\n        {\"name\": \"Bob\", \"children\": [], \"pets\": [\"Charlie\"]},\n    ],\n    \"pets\": [\n        {\"name\": \"Charlie\", \"owners\": [\"Alice\", \"Bob\"]},\n    ],\n}"
                }
              ],
              "param": ".. code-block:: python",
              "type": "Param",
              "type_": ""
            },
            {
              "desc": [],
              "param": "If we changed the methods to ``_to_dict``, the output would instead be:",
              "type": "Param",
              "type_": ""
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "dd": [
                        {
                          "children": [
                            {
                              "dd": [
                                {
                                  "children": [
                                    {
                                      "dd": [
                                        {
                                          "children": [
                                            {
                                              "type": "text",
                                              "value": "\"name\": \"Alice\",             \"children\": [                 {                     \"name\": \"Bob\",                     \"children\": [],                     \"pets\": [{\"name\": \"Charlie\", \"owners\": [\"Alice\", \"Bob\"]}],                 },             ],             pets: [\"Charlie\"],"
                                            }
                                          ],
                                          "type": "paragraph"
                                        }
                                      ],
                                      "dt": {
                                        "children": [
                                          {
                                            "type": "text",
                                            "value": "{"
                                          }
                                        ],
                                        "type": "paragraph"
                                      },
                                      "type": "DefListItem"
                                    }
                                  ],
                                  "type": "DefList"
                                }
                              ],
                              "dt": {
                                "children": [
                                  {
                                    "type": "text",
                                    "value": "\"people\": ["
                                  }
                                ],
                                "type": "paragraph"
                              },
                              "type": "DefListItem"
                            }
                          ],
                          "type": "DefList"
                        }
                      ],
                      "dt": {
                        "children": [
                          {
                            "type": "text",
                            "value": "{"
                          }
                        ],
                        "type": "paragraph"
                      },
                      "type": "DefListItem"
                    }
                  ],
                  "type": "DefList"
                }
              ],
              "param": ".. code-block:: python",
              "type": "Param",
              "type_": ""
            },
            {
              "desc": [],
              "param": "Also notice that, if in the future someone will swap the creation of the",
              "type": "Param",
              "type_": ""
            },
            {
              "desc": [],
              "param": "``children`` and ``pets`` attributes inside ``Person.__init__``, the output with",
              "type": "Param",
              "type_": ""
            },
            {
              "desc": [],
              "param": "``_to_dict`` will change completely whereas the one with ``_to_dict_no_nest`` won't!",
              "type": "Param",
              "type_": ""
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Recursively convert arbitrary Python objects to a JSON-serializable representation. This is intended for debugging purposes only."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/distributed/utils.py",
  "item_line": 1527,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters"
  ],
  "references": null,
  "see_also": [],
  "signature": {
    "type": "Signature",
    "value": "(obj: 'AnyType', *, exclude: 'Container[str]' = (), members: 'bool' = False) -> 'AnyType'"
  },
  "type": "DocBlob"
}