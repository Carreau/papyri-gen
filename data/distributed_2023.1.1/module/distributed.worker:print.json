{
  "aliases": [
    "distributed.print"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "All arguments behave the same as those of "
            },
            {
              "type": "inlineCode",
              "value": "builtins.print()"
            },
            {
              "type": "text",
              "value": ", with the exception that the "
            },
            {
              "type": "inlineCode",
              "value": "file"
            },
            {
              "type": "text",
              "value": " keyword argument, if specified, must either be "
            },
            {
              "type": "inlineCode",
              "value": "sys.stdout"
            },
            {
              "type": "text",
              "value": " or "
            },
            {
              "type": "inlineCode",
              "value": "sys.stderr"
            },
            {
              "type": "text",
              "value": "; arbitrary file-like objects are not allowed."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "All non-keyword arguments are converted to strings using "
            },
            {
              "type": "inlineCode",
              "value": "str()"
            },
            {
              "type": "text",
              "value": " and written to the stream, separated by "
            },
            {
              "type": "inlineCode",
              "value": "sep"
            },
            {
              "type": "text",
              "value": " and followed by "
            },
            {
              "type": "inlineCode",
              "value": "end"
            },
            {
              "type": "text",
              "value": ". Both "
            },
            {
              "type": "inlineCode",
              "value": "sep"
            },
            {
              "type": "text",
              "value": " and "
            },
            {
              "type": "inlineCode",
              "value": "end"
            },
            {
              "type": "text",
              "value": " must be strings; they can also be "
            },
            {
              "type": "inlineCode",
              "value": "None"
            },
            {
              "type": "text",
              "value": ", which means to use the default values. If no objects are given, "
            },
            {
              "type": "inlineCode",
              "value": "print()"
            },
            {
              "type": "text",
              "value": " will just write "
            },
            {
              "type": "inlineCode",
              "value": "end"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "String inserted between values, default a space."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "sep",
              "type": "Param",
              "type_": "str, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "String appended after the last value, default a newline."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "end",
              "type": "Param",
              "type_": "str, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Defaults to the current sys.stdout."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "file",
              "type": "Param",
              "type_": "``sys.stdout`` or ``sys.stderr``, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Whether to forcibly flush the stream."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "flush",
              "type": "Param",
              "type_": "bool, default False"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "A drop-in replacement of the built-in "
            },
            {
              "type": "inlineCode",
              "value": "print"
            },
            {
              "type": "text",
              "value": " function for remote printing from workers to clients. If called from outside a dask worker, its arguments are passed directly to "
            },
            {
              "type": "inlineCode",
              "value": "builtins.print()"
            },
            {
              "type": "text",
              "value": ". If called by code running on a worker, then in addition to printing locally, any clients connected (possibly remotely) to the scheduler managing this worker will receive an event instructing them to print the same output to their own standard output or standard error streams. For example, the user can perform simple debugging of remote computations by including calls to this "
            },
            {
              "type": "inlineCode",
              "value": "print"
            },
            {
              "type": "text",
              "value": " function in the submitted code and inspecting the output in a local Jupyter notebook or interpreter session."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [
      {
        "type": "code",
        "value": "from dask.distributed import Client, print\nclient = distributed.Client(...)\ndef worker_function():\n    print(\"Hello from worker!\")\nclient.submit(worker_function)"
      }
    ],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/distributed/worker.py",
  "item_line": 3272,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Examples"
  ],
  "references": null,
  "see_also": [],
  "signature": {
    "type": "Signature",
    "value": "(*args, sep: 'str | None' = ' ', end: 'str | None' = '\\n', file: 'TextIO | None' = None, flush: 'bool' = False) -> 'None'"
  },
  "type": "DocBlob"
}