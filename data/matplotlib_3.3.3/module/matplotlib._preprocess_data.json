{
  "_content": {
    "Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "children": [
              {
                "type": "Words",
                "data": {
                  "value": "A decorator to add a 'data' kwarg to a function."
                }
              }
            ]
          }
        }
      ]
    },
    "Extended Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "children": [
              {
                "type": "Words",
                "data": {
                  "value": "When applied::"
                }
              }
            ]
          }
        },
        {
          "type": "BlockVerbatim",
          "data": {
            "lines": {
              "_lines": [
                {
                  "_line": "    @_preprocess_data()",
                  "_number": 2,
                  "_offset": 4
                },
                {
                  "_line": "    def func(ax, *args, **kwargs): ...",
                  "_number": 3,
                  "_offset": 4
                },
                {
                  "_line": "",
                  "_number": 4,
                  "_offset": 4
                }
              ]
            }
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "children": [
              {
                "type": "Words",
                "data": {
                  "value": "the signature is modified to "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "decorated(ax,",
                    " ",
                    "*",
                    "args,",
                    " ",
                    "data=None,",
                    " ",
                    "*",
                    "*",
                    "kwargs)"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " with the following behavior:"
                }
              }
            ]
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "children": [
              {
                "type": "Words",
                "data": {
                  "value": "- if called with "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "data=None"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": ", forward the other arguments to "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "func"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": "; - otherwise, *data* must be a mapping; for any argument passed in as a"
                }
              }
            ]
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "children": [
              {
                "type": "Words",
                "data": {
                  "value": "  string "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "name"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": ", replace the argument by "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "data[name]"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " (if this does not   throw an exception), then forward the arguments to "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "func"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": "."
                }
              }
            ]
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "children": [
              {
                "type": "Words",
                "data": {
                  "value": "In either case, any argument that is a "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "MappingView"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " is also converted to a list."
                }
              }
            ]
          }
        }
      ]
    },
    "Parameters": {
      "children": [
        {
          "type": "Param",
          "data": {
            "param": "replace_names",
            "type_": "list of str or None, default: None",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "The list of parameter names for which lookup into *data* should be attempted. If None, replacement is attempted for all arguments."
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "label_namer",
            "type_": "str, default: None",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "If set e.g. to \"namer\" (which must be a kwarg in the function's signature -- not as "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "*",
                          "*",
                          "kwargs"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": "), if the *namer* argument passed in is a (string) key of *data* and no *label* kwarg is passed, then use the (string) value of the *namer* as *label*. ::"
                      }
                    }
                  ]
                }
              },
              {
                "type": "BlockVerbatim",
                "data": {
                  "lines": {
                    "_lines": [
                      {
                        "_line": "    @_preprocess_data(label_namer=\"foo\")",
                        "_number": 5,
                        "_offset": 4
                      },
                      {
                        "_line": "    def func(foo, label=None): ...",
                        "_number": 6,
                        "_offset": 4
                      },
                      {
                        "_line": "",
                        "_number": 7,
                        "_offset": 4
                      },
                      {
                        "_line": "    func(\"key\", data={\"key\": value})",
                        "_number": 8,
                        "_offset": 4
                      },
                      {
                        "_line": "    # is equivalent to",
                        "_number": 9,
                        "_offset": 4
                      },
                      {
                        "_line": "    func.__wrapped__(value, label=\"key\")",
                        "_number": 10,
                        "_offset": 4
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      ]
    },
    "Returns": {
      "children": []
    },
    "Yields": {
      "children": []
    },
    "Receives": {
      "children": []
    },
    "Raises": {
      "children": []
    },
    "Warns": {
      "children": []
    },
    "Other Parameters": {
      "children": []
    },
    "Attributes": {
      "children": []
    },
    "Methods": {
      "children": []
    },
    "Notes": {
      "children": []
    },
    "Warnings": {
      "children": []
    }
  },
  "refs": [],
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters"
  ],
  "item_file": "/Users/bussonniermatthias/miniconda3/lib/python3.8/site-packages/matplotlib/__init__.py",
  "item_line": 1373,
  "item_type": "<class 'function'>",
  "aliases": [
    "matplotlib._preprocess_data"
  ],
  "example_section_data": {
    "children": []
  },
  "see_also": [],
  "references": null,
  "signature": "_preprocess_data(func=None, *, replace_names=None, label_namer=None)"
}