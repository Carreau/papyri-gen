{
  "_content": {
    "Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Set a property on an artist object."
                }
              }
            ],
            "inner": []
          }
        }
      ],
      "title": null
    },
    "Extended Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "matplotlib supports the use of "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "setp"
                  ],
                  "domain": null,
                  "role": "func"
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " (\"set property\") and "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "getp"
                  ],
                  "domain": null,
                  "role": "func"
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " to set and get object properties, as well as to do introspection on the object.  For example, to set the linestyle of a line to be dashed, you can do::"
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "BlockVerbatim",
          "data": {
            "lines": {
              "_lines": [
                {
                  "_line": "  >>> line, = plot([1, 2, 3])",
                  "_number": 5,
                  "_offset": 2
                },
                {
                  "_line": "  >>> setp(line, linestyle='--')",
                  "_number": 6,
                  "_offset": 2
                },
                {
                  "_line": "",
                  "_number": 7,
                  "_offset": 2
                }
              ]
            }
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "If you want to know the valid types of arguments, you can provide the name of the property you want to set without a value::"
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "BlockVerbatim",
          "data": {
            "lines": {
              "_lines": [
                {
                  "_line": "  >>> setp(line, 'linestyle')",
                  "_number": 11,
                  "_offset": 2
                },
                {
                  "_line": "      linestyle: {'-', '--', '-.', ':', '', (offset, on-off-seq), ...}",
                  "_number": 12,
                  "_offset": 2
                },
                {
                  "_line": "",
                  "_number": 13,
                  "_offset": 2
                }
              ]
            }
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "If you want to see all the properties that can be set, and their possible values, you can do::"
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "BlockVerbatim",
          "data": {
            "lines": {
              "_lines": [
                {
                  "_line": "  >>> setp(line)",
                  "_number": 17,
                  "_offset": 2
                },
                {
                  "_line": "      ... long output listing omitted",
                  "_number": 18,
                  "_offset": 2
                },
                {
                  "_line": "",
                  "_number": 19,
                  "_offset": 2
                }
              ]
            }
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "By default "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "setp"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " prints to "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "sys.stdout"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": ", but this can be modified using the *file* keyword-only argument::"
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "BlockVerbatim",
          "data": {
            "lines": {
              "_lines": [
                {
                  "_line": "  >>> with fopen('output.log') as f:",
                  "_number": 23,
                  "_offset": 2
                },
                {
                  "_line": "  >>>     setp(line, file=f)",
                  "_number": 24,
                  "_offset": 2
                },
                {
                  "_line": "",
                  "_number": 25,
                  "_offset": 2
                }
              ]
            }
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "setp"
                  ],
                  "domain": null,
                  "role": "func"
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " operates on a single instance or a iterable of instances. If you are in query mode introspecting the possible values, only the first instance in the sequence is used. When actually setting values, all the instances will be set.  e.g., suppose you have a list of two lines, the following will make both lines thicker and red::"
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "BlockVerbatim",
          "data": {
            "lines": {
              "_lines": [
                {
                  "_line": "  >>> x = arange(0, 1, 0.01)",
                  "_number": 33,
                  "_offset": 2
                },
                {
                  "_line": "  >>> y1 = sin(2*pi*x)",
                  "_number": 34,
                  "_offset": 2
                },
                {
                  "_line": "  >>> y2 = sin(4*pi*x)",
                  "_number": 35,
                  "_offset": 2
                },
                {
                  "_line": "  >>> lines = plot(x, y1, x, y2)",
                  "_number": 36,
                  "_offset": 2
                },
                {
                  "_line": "  >>> setp(lines, linewidth=2, color='r')",
                  "_number": 37,
                  "_offset": 2
                },
                {
                  "_line": "",
                  "_number": 38,
                  "_offset": 2
                }
              ]
            }
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "setp"
                  ],
                  "domain": null,
                  "role": "func"
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " works with the MATLAB style string/value pairs or with python kwargs.  For example, the following are equivalent::"
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "BlockVerbatim",
          "data": {
            "lines": {
              "_lines": [
                {
                  "_line": "  >>> setp(lines, 'linewidth', 2, 'color', 'r')  # MATLAB style",
                  "_number": 42,
                  "_offset": 2
                },
                {
                  "_line": "  >>> setp(lines, linewidth=2, color='r')        # python style",
                  "_number": 43,
                  "_offset": 2
                }
              ]
            }
          }
        }
      ],
      "title": null
    },
    "Parameters": {
      "children": [],
      "title": null
    },
    "Returns": {
      "children": [],
      "title": null
    },
    "Yields": {
      "children": [],
      "title": null
    },
    "Receives": {
      "children": [],
      "title": null
    },
    "Raises": {
      "children": [],
      "title": null
    },
    "Warns": {
      "children": [],
      "title": null
    },
    "Other Parameters": {
      "children": [],
      "title": null
    },
    "Attributes": {
      "children": [],
      "title": null
    },
    "Methods": {
      "children": [],
      "title": null
    },
    "Notes": {
      "children": [],
      "title": null
    },
    "Warnings": {
      "children": [],
      "title": null
    }
  },
  "refs": [],
  "ordered_sections": [
    "Summary",
    "Extended Summary"
  ],
  "item_file": "/Users/bussonniermatthias/miniconda3/lib/python3.8/site-packages/matplotlib/artist.py",
  "item_line": 1537,
  "item_type": "<class 'function'>",
  "aliases": [
    "matplotlib.artist.setp"
  ],
  "example_section_data": {
    "children": [],
    "title": null
  },
  "see_also": [],
  "signature": "setp(obj, *args, file=None, **kwargs)",
  "references": null,
  "arbitrary": []
}