{
  "_content": {
    "Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "children": [
              {
                "type": "Words",
                "data": {
                  "value": "Annotate the point *xy* with text *text*."
                }
              }
            ]
          }
        }
      ]
    },
    "Extended Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "children": [
              {
                "type": "Words",
                "data": {
                  "value": "In the simplest form, the text is placed at *xy*."
                }
              }
            ]
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "children": [
              {
                "type": "Words",
                "data": {
                  "value": "Optionally, the text can be displayed in another position *xytext*. An arrow pointing from the text to the annotated point *xy* can then be added by defining *arrowprops*."
                }
              }
            ]
          }
        }
      ]
    },
    "Parameters": {
      "children": [
        {
          "type": "Param",
          "data": {
            "param": "text",
            "type_": "str",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "The text of the annotation.  *s* is a deprecated synonym for this parameter."
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "xy",
            "type_": "(float, float)",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "The point *(x, y)* to annotate. The coordinate system is determined by *xycoords*."
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "xytext",
            "type_": "(float, float), default: *xy*",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "The position *(x, y)* to place the text at. The coordinate system is determined by *textcoords*."
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "xycoords",
            "type_": "str or `.Artist` or `.Transform` or callable or (float, float), default: 'data'",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "The coordinate system that *xy* is given in. The following types of values are supported:"
                      }
                    }
                  ]
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "- One of the following strings:"
                      }
                    }
                  ]
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "  =================   =============================================   Value               Description   =================   =============================================   'figure points'     Points from the lower left of the figure   'figure pixels'     Pixels from the lower left of the figure   'figure fraction'   Fraction of figure from lower left   'axes points'       Points from lower left corner of axes   'axes pixels'       Pixels from lower left corner of axes   'axes fraction'     Fraction of axes from lower left   'data'              Use the coordinate system of the object being"
                      }
                    }
                  ]
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "                      annotated (default)"
                      }
                    }
                  ]
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "  'polar'             *(theta, r)* if not native 'data' coordinates   =================   ============================================="
                      }
                    }
                  ]
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "- An "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          ".Artist"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ": *xy* is interpreted as a fraction of the artist's"
                      }
                    }
                  ]
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "  "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "~matplotlib.transforms.Bbox"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ". E.g. *(0, 0)* would be the lower   left corner of the bounding box and *(0.5, 1)* would be the   center top of the bounding box."
                      }
                    }
                  ]
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "- A "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          ".Transform"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " to transform *xy* to screen coordinates."
                      }
                    }
                  ]
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "- A function with one of the following signatures::"
                      }
                    }
                  ]
                }
              },
              {
                "type": "BlockVerbatim",
                "data": {
                  "lines": {
                    "_lines": [
                      {
                        "_line": "    def transform(renderer) -> Bbox",
                        "_number": 28,
                        "_offset": 2
                      },
                      {
                        "_line": "    def transform(renderer) -> Transform",
                        "_number": 29,
                        "_offset": 2
                      },
                      {
                        "_line": "",
                        "_number": 30,
                        "_offset": 2
                      },
                      {
                        "_line": "  where *renderer* is a `.RendererBase` subclass.",
                        "_number": 31,
                        "_offset": 2
                      },
                      {
                        "_line": "",
                        "_number": 32,
                        "_offset": 2
                      },
                      {
                        "_line": "  The result of the function is interpreted like the `.Artist` and",
                        "_number": 33,
                        "_offset": 2
                      },
                      {
                        "_line": "  `.Transform` cases above.",
                        "_number": 34,
                        "_offset": 2
                      },
                      {
                        "_line": "",
                        "_number": 35,
                        "_offset": 2
                      }
                    ]
                  }
                }
              },
              {
                "type": "DefList",
                "data": {
                  "children": [
                    {
                      "lines": {
                        "_lines": [
                          {
                            "_line": "- A tuple *(xcoords, ycoords)* specifying separate coordinate",
                            "_number": 36,
                            "_offset": 0
                          }
                        ]
                      },
                      "wh": {
                        "_lines": []
                      },
                      "ind": {
                        "_lines": [
                          {
                            "_line": "  systems for *x* and *y*. *xcoords* and *ycoords* must each be",
                            "_number": 37,
                            "_offset": 0
                          },
                          {
                            "_line": "  of one of the above described types.",
                            "_number": 38,
                            "_offset": 0
                          },
                          {
                            "_line": "",
                            "_number": 39,
                            "_offset": 0
                          }
                        ]
                      },
                      "dt": {
                        "children": [
                          {
                            "type": "Words",
                            "data": {
                              "value": "- A tuple *(xcoords, ycoords)* specifying separate coordinate"
                            }
                          }
                        ]
                      },
                      "dd": {
                        "children": [
                          {
                            "type": "Words",
                            "data": {
                              "value": "systems for *x* and *y*. *xcoords* and *ycoords* must each be of one of the above described types. "
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "See "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "plotting-guide-annotation"
                        ],
                        "domain": null,
                        "role": "ref"
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " for more details."
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "textcoords",
            "type_": "str or `.Artist` or `.Transform` or callable or (float, float), default: value of *xycoords*",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "The coordinate system that *xytext* is given in."
                      }
                    }
                  ]
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "All *xycoords* values are valid as well as the following strings:"
                      }
                    }
                  ]
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "=================   ========================================= Value               Description =================   ========================================= 'offset points'     Offset (in points) from the *xy* value 'offset pixels'     Offset (in pixels) from the *xy* value =================   ========================================="
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "arrowprops",
            "type_": "dict, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "The properties used to draw a "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          ".FancyArrowPatch"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " arrow between the positions *xy* and *xytext*."
                      }
                    }
                  ]
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "If *arrowprops* does not contain the key 'arrowstyle' the allowed keys are:"
                      }
                    }
                  ]
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "==========   ====================================================== Key          Description ==========   ====================================================== width        The width of the arrow in points headwidth    The width of the base of the arrow head in points headlength   The length of the arrow head in points shrink       Fraction of total length to shrink from both ends ?            Any key to "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "matplotlib.patches.FancyArrowPatch"
                        ],
                        "domain": null,
                        "role": "class"
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " ==========   ======================================================"
                      }
                    }
                  ]
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "If *arrowprops* contains the key 'arrowstyle' the above keys are forbidden.  The allowed values of "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "'arrowstyle'"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " are:"
                      }
                    }
                  ]
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "============   ============================================= Name           Attrs ============   ============================================= "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "'-'"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": "        None "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "'->'"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": "       head_length=0.4,head_width=0.2 "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "'-['"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": "       widthB=1.0,lengthB=0.2,angleB=None "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "'|-|'"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": "      widthA=1.0,widthB=1.0 "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "'-|>'"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": "      head_length=0.4,head_width=0.2 "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "'<-'"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": "       head_length=0.4,head_width=0.2 "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "'<->'"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": "      head_length=0.4,head_width=0.2 "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "'<|-'"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": "      head_length=0.4,head_width=0.2 "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "'<|-|>'"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": "    head_length=0.4,head_width=0.2 "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "'fancy'"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": "    head_length=0.4,head_width=0.4,tail_width=0.4 "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "'simple'"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": "   head_length=0.5,head_width=0.5,tail_width=0.2 "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "'wedge'"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": "    tail_width=0.3,shrink_factor=0.5 ============   ============================================="
                      }
                    }
                  ]
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Valid keys for "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "~matplotlib.patches.FancyArrowPatch"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " are:"
                      }
                    }
                  ]
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "===============  ================================================== Key              Description ===============  ================================================== arrowstyle       the arrow style connectionstyle  the connection style relpos           default is (0.5, 0.5) patchA           default is bounding box of the text patchB           default is None shrinkA          default is 2 points shrinkB          default is 2 points mutation_scale   default is text size (in points) mutation_aspect  default is 1. ?                any key for "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "matplotlib.patches.PathPatch"
                        ],
                        "domain": null,
                        "role": "class"
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " ===============  =================================================="
                      }
                    }
                  ]
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Defaults to None, i.e. no arrow is drawn."
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "annotation_clip",
            "type_": "bool or None, default: None",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Whether to draw the annotation when the annotation point *xy* is outside the axes area."
                      }
                    }
                  ]
                }
              },
              {
                "type": "DefList",
                "data": {
                  "children": [
                    {
                      "lines": {
                        "_lines": [
                          {
                            "_line": "- If *True*, the annotation will only be drawn when *xy* is",
                            "_number": 3,
                            "_offset": 0
                          }
                        ]
                      },
                      "wh": {
                        "_lines": []
                      },
                      "ind": {
                        "_lines": [
                          {
                            "_line": "  within the axes.",
                            "_number": 4,
                            "_offset": 0
                          }
                        ]
                      },
                      "dt": {
                        "children": [
                          {
                            "type": "Words",
                            "data": {
                              "value": "- If *True*, the annotation will only be drawn when *xy* is"
                            }
                          }
                        ]
                      },
                      "dd": {
                        "children": [
                          {
                            "type": "Words",
                            "data": {
                              "value": "within the axes."
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "- If *False*, the annotation will always be drawn. - If *None*, the annotation will only be drawn when *xy* is"
                      }
                    }
                  ]
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "  within the axes and *xycoords* is 'data'."
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "**kwargs",
            "type_": "",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Additional kwargs are passed to "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "~matplotlib.text.Text"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": "."
                      }
                    }
                  ]
                }
              }
            ]
          }
        }
      ]
    },
    "Returns": {
      "children": [
        {
          "type": "Param",
          "data": {
            "param": "",
            "type_": "`.Annotation`",
            "desc": []
          }
        }
      ]
    },
    "Yields": {
      "children": []
    },
    "Receives": {
      "children": []
    },
    "Raises": {
      "children": []
    },
    "Warns": {
      "children": []
    },
    "Other Parameters": {
      "children": []
    },
    "Attributes": {
      "children": []
    },
    "Methods": {
      "children": []
    },
    "Notes": {
      "children": []
    },
    "Warnings": {
      "children": []
    }
  },
  "refs": [
    "plotting-guide-annotation"
  ],
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns",
    "See Also"
  ],
  "item_file": "/Users/bussonniermatthias/miniconda3/lib/python3.8/site-packages/matplotlib/cbook/deprecation.py",
  "item_line": 770,
  "item_type": "<class 'function'>",
  "aliases": [
    "matplotlib.pyplot.Axes.annotate"
  ],
  "example_section_data": {
    "children": []
  },
  "see_also": [
    {
      "name": {
        "name": "plotting-guide-annotation",
        "ref": null,
        "exists": null
      },
      "descriptions": [
        {
          "children": [
            {
              "type": "Words",
              "data": {
                "value": "ref"
              }
            }
          ]
        }
      ],
      "type": null
    }
  ],
  "references": null,
  "signature": "annotate(self, text, xy, *args, **kwargs)"
}