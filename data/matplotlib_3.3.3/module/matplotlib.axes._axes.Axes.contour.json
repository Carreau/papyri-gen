{
  "_content": {
    "Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "children": [
              {
                "type": "Words",
                "data": {
                  "value": "Plot contours."
                }
              }
            ]
          }
        }
      ]
    },
    "Extended Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "children": [
              {
                "type": "Words",
                "data": {
                  "value": "Call signature::"
                }
              }
            ]
          }
        },
        {
          "type": "BlockVerbatim",
          "data": {
            "lines": {
              "_lines": [
                {
                  "_line": "    contour([X, Y,] Z, [levels], **kwargs)",
                  "_number": 2,
                  "_offset": 4
                },
                {
                  "_line": "",
                  "_number": 3,
                  "_offset": 4
                }
              ]
            }
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "children": [
              {
                "type": "Directive",
                "data": {
                  "value": [
                    ".contour"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " and "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    ".contourf"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " draw contour lines and filled contours, respectively.  Except as noted, function signatures and return values are the same for both versions."
                }
              }
            ]
          }
        }
      ]
    },
    "Parameters": {
      "children": [
        {
          "type": "Param",
          "data": {
            "param": "X, Y",
            "type_": "array-like, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "The coordinates of the values in *Z*."
                      }
                    }
                  ]
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "*X* and *Y* must both be 2-D with the same shape as *Z* (e.g. created via "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "numpy.meshgrid"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": "), or they must both be 1-D such that "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "len(X)",
                          " ",
                          "==",
                          " ",
                          "M"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " is the number of columns in *Z* and "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "len(Y)",
                          " ",
                          "==",
                          " ",
                          "N"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " is the number of rows in *Z*."
                      }
                    }
                  ]
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "If not given, they are assumed to be integer indices, i.e. "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "X",
                          " ",
                          "=",
                          " ",
                          "range(M)"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ", "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "Y",
                          " ",
                          "=",
                          " ",
                          "range(N)"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": "."
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "Z",
            "type_": "array-like(N, M)",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "The height values over which the contour is drawn."
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "levels",
            "type_": "int or array-like, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Determines the number and positions of the contour lines / regions."
                      }
                    }
                  ]
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "If an int *n*, use "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "~matplotlib.ticker.MaxNLocator"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ", which tries to automatically choose no more than *n+1* \"nice\" contour levels between *vmin* and *vmax*."
                      }
                    }
                  ]
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "If array-like, draw contour lines at the specified levels. The values must be in increasing order."
                      }
                    }
                  ]
                }
              }
            ]
          }
        }
      ]
    },
    "Returns": {
      "children": [
        {
          "type": "Param",
          "data": {
            "param": "",
            "type_": "`~.contour.QuadContourSet`",
            "desc": []
          }
        }
      ]
    },
    "Yields": {
      "children": []
    },
    "Receives": {
      "children": []
    },
    "Raises": {
      "children": []
    },
    "Warns": {
      "children": []
    },
    "Other Parameters": {
      "children": [
        {
          "type": "Param",
          "data": {
            "param": "corner_mask",
            "type_": "bool, default: :rc:`contour.corner_mask`",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Enable/disable corner masking, which only has an effect if *Z* is a masked array.  If "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "False"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ", any quad touching a masked point is masked out.  If "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "True"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ", only the triangular corners of quads nearest those points are always masked out, other triangular corners comprising three unmasked points are contoured as usual."
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "colors",
            "type_": "color string or sequence of colors, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "The colors of the levels, i.e. the lines for "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          ".contour"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " and the areas for "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          ".contourf"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": "."
                      }
                    }
                  ]
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "The sequence is cycled for the levels in ascending order. If the sequence is shorter than the number of levels, it's repeated."
                      }
                    }
                  ]
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "As a shortcut, single color strings may be used in place of one-element lists, i.e. "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "'red'"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " instead of "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "['red']"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " to color all levels with the same color. This shortcut does only work for color strings, not for other ways of specifying colors."
                      }
                    }
                  ]
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "By default (value *None*), the colormap specified by *cmap* will be used."
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "alpha",
            "type_": "float, default: 1",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "The alpha blending value, between 0 (transparent) and 1 (opaque)."
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "cmap",
            "type_": "str or `.Colormap`, default: :rc:`image.cmap`",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "A "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          ".Colormap"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " instance or registered colormap name. The colormap maps the level values to colors."
                      }
                    }
                  ]
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "If both *colors* and *cmap* are given, an error is raised."
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "norm",
            "type_": "`~matplotlib.colors.Normalize`, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "If a colormap is used, the "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          ".Normalize"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " instance scales the level values to the canonical colormap range [0, 1] for mapping to colors. If not given, the default linear scaling is used."
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "vmin, vmax",
            "type_": "float, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "If not *None*, either or both of these values will be supplied to the "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          ".Normalize"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " instance, overriding the default color scaling based on *levels*."
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "origin",
            "type_": "{*None*, 'upper', 'lower', 'image'}, default: None",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Determines the orientation and exact position of *Z* by specifying the position of "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "Z[0,",
                          " ",
                          "0]"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ".  This is only relevant, if *X*, *Y* are not given."
                      }
                    }
                  ]
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "- *None*: "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "Z[0,",
                          " ",
                          "0]"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " is at X=0, Y=0 in the lower left corner. - 'lower': "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "Z[0,",
                          " ",
                          "0]"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " is at X=0.5, Y=0.5 in the lower left corner. - 'upper': "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "Z[0,",
                          " ",
                          "0]"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " is at X=N+0.5, Y=0.5 in the upper left"
                      }
                    }
                  ]
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "  corner."
                      }
                    }
                  ]
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "- 'image': Use the value from "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "image.origin"
                        ],
                        "domain": null,
                        "role": "rc"
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": "."
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "extent",
            "type_": "(x0, x1, y0, y1), optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "If *origin* is not *None*, then *extent* is interpreted as in "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          ".imshow"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ": it gives the outer pixel boundaries. In this case, the position of Z[0, 0] is the center of the pixel, not a corner. If *origin* is *None*, then (*x0*, *y0*) is the position of Z[0, 0], and (*x1*, *y1*) is the position of Z[-1, -1]."
                      }
                    }
                  ]
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "This argument is ignored if *X* and *Y* are specified in the call to contour."
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "locator",
            "type_": "ticker.Locator subclass, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "The locator is used to determine the contour levels if they are not given explicitly via *levels*. Defaults to "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "~.ticker.MaxNLocator"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": "."
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "extend",
            "type_": "{'neither', 'both', 'min', 'max'}, default: 'neither'",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Determines the "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "contourf"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": "-coloring of values that are outside the *levels* range."
                      }
                    }
                  ]
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "If 'neither', values outside the *levels* range are not colored. If 'min', 'max' or 'both', color the values below, above or below and above the *levels* range."
                      }
                    }
                  ]
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Values below "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "min(levels)"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " and above "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "max(levels)"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " are mapped to the under/over values of the "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          ".Colormap"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ". Note that most colormaps do not have dedicated colors for these by default, so that the over and under values are the edge values of the colormap. You may want to set these values explicitly using "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          ".Colormap.set",
                          "_",
                          "under"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " and "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          ".Colormap.set",
                          "_",
                          "over"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": "."
                      }
                    }
                  ]
                }
              },
              {
                "type": "BlockDirective",
                "data": {
                  "lines": {
                    "_lines": [
                      {
                        "_line": ".. note::",
                        "_number": 14,
                        "_offset": 0
                      }
                    ]
                  },
                  "wh": {
                    "_lines": [
                      {
                        "_line": "",
                        "_number": 15,
                        "_offset": 0
                      }
                    ]
                  },
                  "ind": {
                    "_lines": [
                      {
                        "_line": "    An existing `.QuadContourSet` does not get notified if",
                        "_number": 16,
                        "_offset": 0
                      },
                      {
                        "_line": "    properties of its colormap are changed. Therefore, an explicit",
                        "_number": 17,
                        "_offset": 0
                      },
                      {
                        "_line": "    call `.QuadContourSet.changed()` is needed after modifying the",
                        "_number": 18,
                        "_offset": 0
                      },
                      {
                        "_line": "    colormap. The explicit call can be left out, if a colorbar is",
                        "_number": 19,
                        "_offset": 0
                      },
                      {
                        "_line": "    assigned to the `.QuadContourSet` because it internally calls",
                        "_number": 20,
                        "_offset": 0
                      },
                      {
                        "_line": "    `.QuadContourSet.changed()`.",
                        "_number": 21,
                        "_offset": 0
                      },
                      {
                        "_line": "",
                        "_number": 22,
                        "_offset": 0
                      }
                    ]
                  },
                  "directive_name": "note",
                  "args0": [
                    ""
                  ],
                  "inner": {
                    "children": [
                      {
                        "type": "Words",
                        "data": {
                          "value": "An existing "
                        }
                      },
                      {
                        "type": "Directive",
                        "data": {
                          "value": [
                            ".QuadContourSet"
                          ],
                          "domain": null,
                          "role": null
                        }
                      },
                      {
                        "type": "Words",
                        "data": {
                          "value": " does not get notified if properties of its colormap are changed. Therefore, an explicit call "
                        }
                      },
                      {
                        "type": "Directive",
                        "data": {
                          "value": [
                            ".QuadContourSet.changed()"
                          ],
                          "domain": null,
                          "role": null
                        }
                      },
                      {
                        "type": "Words",
                        "data": {
                          "value": " is needed after modifying the colormap. The explicit call can be left out, if a colorbar is assigned to the "
                        }
                      },
                      {
                        "type": "Directive",
                        "data": {
                          "value": [
                            ".QuadContourSet"
                          ],
                          "domain": null,
                          "role": null
                        }
                      },
                      {
                        "type": "Words",
                        "data": {
                          "value": " because it internally calls "
                        }
                      },
                      {
                        "type": "Directive",
                        "data": {
                          "value": [
                            ".QuadContourSet.changed()"
                          ],
                          "domain": null,
                          "role": null
                        }
                      },
                      {
                        "type": "Words",
                        "data": {
                          "value": ". "
                        }
                      }
                    ]
                  }
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Example::"
                      }
                    }
                  ]
                }
              },
              {
                "type": "BlockVerbatim",
                "data": {
                  "lines": {
                    "_lines": [
                      {
                        "_line": "    x = np.arange(1, 10)",
                        "_number": 25,
                        "_offset": 4
                      },
                      {
                        "_line": "    y = x.reshape(-1, 1)",
                        "_number": 26,
                        "_offset": 4
                      },
                      {
                        "_line": "    h = x * y",
                        "_number": 27,
                        "_offset": 4
                      },
                      {
                        "_line": "",
                        "_number": 28,
                        "_offset": 4
                      },
                      {
                        "_line": "    cs = plt.contourf(h, levels=[10, 30, 50],",
                        "_number": 29,
                        "_offset": 4
                      },
                      {
                        "_line": "        colors=['#808080', '#A0A0A0', '#C0C0C0'], extend='both')",
                        "_number": 30,
                        "_offset": 4
                      },
                      {
                        "_line": "    cs.cmap.set_over('red')",
                        "_number": 31,
                        "_offset": 4
                      },
                      {
                        "_line": "    cs.cmap.set_under('blue')",
                        "_number": 32,
                        "_offset": 4
                      },
                      {
                        "_line": "    cs.changed()",
                        "_number": 33,
                        "_offset": 4
                      }
                    ]
                  }
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "xunits, yunits",
            "type_": "registered units, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Override axis units by specifying an instance of a "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "matplotlib.units.ConversionInterface"
                        ],
                        "domain": null,
                        "role": "class"
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": "."
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "antialiased",
            "type_": "bool, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Enable antialiasing, overriding the defaults.  For filled contours, the default is *True*.  For line contours, it is taken from "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "lines.antialiased"
                        ],
                        "domain": null,
                        "role": "rc"
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": "."
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "nchunk",
            "type_": "int >= 0, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "If 0, no subdivision of the domain.  Specify a positive integer to divide the domain into subdomains of *nchunk* by *nchunk* quads. Chunking reduces the maximum length of polygons generated by the contouring algorithm which reduces the rendering workload passed on to the backend and also requires slightly less RAM.  It can however introduce rendering artifacts at chunk boundaries depending on the backend, the *antialiased* flag and value of *alpha*."
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "linewidths",
            "type_": "float or array-like, default: :rc:`contour.linewidth`",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "*Only applies to* "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          ".contour"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": "."
                      }
                    }
                  ]
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "The line width of the contour lines."
                      }
                    }
                  ]
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "If a number, all levels will be plotted with this linewidth."
                      }
                    }
                  ]
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "If a sequence, the levels in ascending order will be plotted with the linewidths in the order specified."
                      }
                    }
                  ]
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "If None, this falls back to "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "lines.linewidth"
                        ],
                        "domain": null,
                        "role": "rc"
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": "."
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "linestyles",
            "type_": "{*None*, 'solid', 'dashed', 'dashdot', 'dotted'}, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "*Only applies to* "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          ".contour"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": "."
                      }
                    }
                  ]
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "If *linestyles* is *None*, the default is 'solid' unless the lines are monochrome.  In that case, negative contours will take their linestyle from "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "contour.negative",
                          "_",
                          "linestyle"
                        ],
                        "domain": null,
                        "role": "rc"
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " setting."
                      }
                    }
                  ]
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "*linestyles* can also be an iterable of the above strings specifying a set of linestyles to be used. If this iterable is shorter than the number of contour levels it will be repeated as necessary."
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "hatches",
            "type_": "List[str], optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "*Only applies to* "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          ".contourf"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": "."
                      }
                    }
                  ]
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "A list of cross hatch patterns to use on the filled areas. If None, no hatching will be added to the contour. Hatching is supported in the PostScript, PDF, SVG and Agg backends only."
                      }
                    }
                  ]
                }
              }
            ]
          }
        }
      ]
    },
    "Attributes": {
      "children": []
    },
    "Methods": {
      "children": []
    },
    "Notes": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "children": [
              {
                "type": "Words",
                "data": {
                  "value": "1. "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    ".contourf"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " differs from the MATLAB version in that it does not draw"
                }
              }
            ]
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "children": [
              {
                "type": "Words",
                "data": {
                  "value": "   the polygon edges. To draw edges, add line contours with calls to    "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    ".contour"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": "."
                }
              }
            ]
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "children": [
              {
                "type": "Words",
                "data": {
                  "value": "2. "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    ".contourf"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " fills intervals that are closed at the top; that is, for"
                }
              }
            ]
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "children": [
              {
                "type": "Words",
                "data": {
                  "value": "   boundaries *z1* and *z2*, the filled region is::"
                }
              }
            ]
          }
        },
        {
          "type": "BlockVerbatim",
          "data": {
            "lines": {
              "_lines": [
                {
                  "_line": "      z1 < Z <= z2",
                  "_number": 7,
                  "_offset": 6
                },
                {
                  "_line": "",
                  "_number": 8,
                  "_offset": 6
                }
              ]
            }
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "children": [
              {
                "type": "Words",
                "data": {
                  "value": "   except for the lowest interval, which is closed on both sides (i.e.    it includes the lowest value)."
                }
              }
            ]
          }
        }
      ]
    },
    "Warnings": {
      "children": []
    }
  },
  "refs": [],
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns",
    "Other Parameters",
    "Notes"
  ],
  "item_file": "/Users/bussonniermatthias/miniconda3/lib/python3.8/site-packages/matplotlib/__init__.py",
  "item_line": 6324,
  "item_type": "<class 'function'>",
  "aliases": [
    "matplotlib.pyplot.Axes.contour"
  ],
  "example_section_data": {
    "children": []
  },
  "see_also": [],
  "references": null,
  "signature": "contour(self, *args, data=None, **kwargs)"
}