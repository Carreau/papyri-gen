{
  "_content": {
    "Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "children": [
              {
                "type": "Words",
                "data": {
                  "value": "Create a pseudocolor plot with a non-regular rectangular grid."
                }
              }
            ]
          }
        }
      ]
    },
    "Extended Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "children": [
              {
                "type": "Words",
                "data": {
                  "value": "Call signature::"
                }
              }
            ]
          }
        },
        {
          "type": "BlockVerbatim",
          "data": {
            "lines": {
              "_lines": [
                {
                  "_line": "  ax.pcolorfast([X, Y], C, /, **kwargs)",
                  "_number": 2,
                  "_offset": 2
                },
                {
                  "_line": "",
                  "_number": 3,
                  "_offset": 2
                }
              ]
            }
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "children": [
              {
                "type": "Words",
                "data": {
                  "value": "This method is similar to "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "~.Axes.pcolor"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " and "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "~.Axes.pcolormesh"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": ". It's designed to provide the fastest pcolor-type plotting with the Agg backend. To achieve this, it uses different algorithms internally depending on the complexity of the input grid (regular rectangular, non-regular rectangular or arbitrary quadrilateral)."
                }
              }
            ]
          }
        },
        {
          "type": "BlockDirective",
          "data": {
            "lines": {
              "_lines": [
                {
                  "_line": ".. warning::",
                  "_number": 10,
                  "_offset": 0
                }
              ]
            },
            "wh": {
              "_lines": [
                {
                  "_line": "",
                  "_number": 11,
                  "_offset": 0
                }
              ]
            },
            "ind": {
              "_lines": [
                {
                  "_line": "   This method is experimental. Compared to `~.Axes.pcolor` or",
                  "_number": 12,
                  "_offset": 0
                },
                {
                  "_line": "   `~.Axes.pcolormesh` it has some limitations:",
                  "_number": 13,
                  "_offset": 0
                },
                {
                  "_line": "",
                  "_number": 14,
                  "_offset": 0
                },
                {
                  "_line": "   - It supports only flat shading (no outlines)",
                  "_number": 15,
                  "_offset": 0
                },
                {
                  "_line": "   - It lacks support for log scaling of the axes.",
                  "_number": 16,
                  "_offset": 0
                },
                {
                  "_line": "   - It does not have a have a pyplot wrapper.",
                  "_number": 17,
                  "_offset": 0
                }
              ]
            },
            "directive_name": "warning",
            "args0": [
              ""
            ],
            "inner": {
              "children": [
                {
                  "type": "Words",
                  "data": {
                    "value": "This method is experimental. Compared to "
                  }
                },
                {
                  "type": "Directive",
                  "data": {
                    "value": [
                      "~.Axes.pcolor"
                    ],
                    "domain": null,
                    "role": null
                  }
                },
                {
                  "type": "Words",
                  "data": {
                    "value": " or "
                  }
                },
                {
                  "type": "Directive",
                  "data": {
                    "value": [
                      "~.Axes.pcolormesh"
                    ],
                    "domain": null,
                    "role": null
                  }
                },
                {
                  "type": "Words",
                  "data": {
                    "value": " it has some limitations:  - It supports only flat shading (no outlines) - It lacks support for log scaling of the axes. - It does not have a have a pyplot wrapper."
                  }
                }
              ]
            }
          }
        }
      ]
    },
    "Parameters": {
      "children": [
        {
          "type": "Param",
          "data": {
            "param": "C",
            "type_": "array-like(M, N)",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "The image data. Supported array shapes are:"
                      }
                    }
                  ]
                }
              },
              {
                "type": "DefList",
                "data": {
                  "children": [
                    {
                      "lines": {
                        "_lines": [
                          {
                            "_line": "- (M, N): an image with scalar data. The data is visualized",
                            "_number": 2,
                            "_offset": 0
                          }
                        ]
                      },
                      "wh": {
                        "_lines": []
                      },
                      "ind": {
                        "_lines": [
                          {
                            "_line": "  using a colormap.",
                            "_number": 3,
                            "_offset": 0
                          }
                        ]
                      },
                      "dt": {
                        "children": [
                          {
                            "type": "Words",
                            "data": {
                              "value": "- (M, N): an image with scalar data. The data is visualized"
                            }
                          }
                        ]
                      },
                      "dd": {
                        "children": [
                          {
                            "type": "Words",
                            "data": {
                              "value": "using a colormap."
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "- (M, N, 3): an image with RGB values (0-1 float or 0-255 int). - (M, N, 4): an image with RGBA values (0-1 float or 0-255 int),"
                      }
                    }
                  ]
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "  i.e. including transparency."
                      }
                    }
                  ]
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "The first two dimensions (M, N) define the rows and columns of the image."
                      }
                    }
                  ]
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "This parameter can only be passed positionally."
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "X, Y",
            "type_": "tuple or array-like, default: ``(0, N)``, ``(0, M)``",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "*X* and *Y* are used to specify the coordinates of the quadrilaterals. There are different ways to do this:"
                      }
                    }
                  ]
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "- Use tuples "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "X=(xmin,",
                          " ",
                          "xmax)"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " and "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "Y=(ymin,",
                          " ",
                          "ymax)"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " to define"
                      }
                    }
                  ]
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "  a *uniform rectangular grid*."
                      }
                    }
                  ]
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "  The tuples define the outer edges of the grid. All individual   quadrilaterals will be of the same size. This is the fastest   version."
                      }
                    }
                  ]
                }
              },
              {
                "type": "DefList",
                "data": {
                  "children": [
                    {
                      "lines": {
                        "_lines": [
                          {
                            "_line": "- Use 1D arrays *X*, *Y* to specify a *non-uniform rectangular",
                            "_number": 10,
                            "_offset": 0
                          }
                        ]
                      },
                      "wh": {
                        "_lines": []
                      },
                      "ind": {
                        "_lines": [
                          {
                            "_line": "  grid*.",
                            "_number": 11,
                            "_offset": 0
                          },
                          {
                            "_line": "",
                            "_number": 12,
                            "_offset": 0
                          },
                          {
                            "_line": "  In this case *X* and *Y* have to be monotonic 1D arrays of length",
                            "_number": 13,
                            "_offset": 0
                          },
                          {
                            "_line": "  *N+1* and *M+1*, specifying the x and y boundaries of the cells.",
                            "_number": 14,
                            "_offset": 0
                          },
                          {
                            "_line": "",
                            "_number": 15,
                            "_offset": 0
                          },
                          {
                            "_line": "  The speed is intermediate. Note: The grid is checked, and if",
                            "_number": 16,
                            "_offset": 0
                          },
                          {
                            "_line": "  found to be uniform the fast version is used.",
                            "_number": 17,
                            "_offset": 0
                          },
                          {
                            "_line": "",
                            "_number": 18,
                            "_offset": 0
                          }
                        ]
                      },
                      "dt": {
                        "children": [
                          {
                            "type": "Words",
                            "data": {
                              "value": "- Use 1D arrays *X*, *Y* to specify a *non-uniform rectangular"
                            }
                          }
                        ]
                      },
                      "dd": {
                        "children": [
                          {
                            "type": "Words",
                            "data": {
                              "value": "grid*.  In this case *X* and *Y* have to be monotonic 1D arrays of length *N+1* and *M+1*, specifying the x and y boundaries of the cells.  The speed is intermediate. Note: The grid is checked, and if found to be uniform the fast version is used. "
                            }
                          }
                        ]
                      }
                    },
                    {
                      "lines": {
                        "_lines": [
                          {
                            "_line": "- Use 2D arrays *X*, *Y* if you need an *arbitrary quadrilateral",
                            "_number": 19,
                            "_offset": 0
                          }
                        ]
                      },
                      "wh": {
                        "_lines": []
                      },
                      "ind": {
                        "_lines": [
                          {
                            "_line": "  grid* (i.e. if the quadrilaterals are not rectangular).",
                            "_number": 20,
                            "_offset": 0
                          },
                          {
                            "_line": "",
                            "_number": 21,
                            "_offset": 0
                          },
                          {
                            "_line": "  In this case *X* and *Y* are 2D arrays with shape (M + 1, N + 1),",
                            "_number": 22,
                            "_offset": 0
                          },
                          {
                            "_line": "  specifying the x and y coordinates of the corners of the colored",
                            "_number": 23,
                            "_offset": 0
                          },
                          {
                            "_line": "  quadrilaterals.",
                            "_number": 24,
                            "_offset": 0
                          },
                          {
                            "_line": "",
                            "_number": 25,
                            "_offset": 0
                          },
                          {
                            "_line": "  This is the most general, but the slowest to render.  It may",
                            "_number": 26,
                            "_offset": 0
                          },
                          {
                            "_line": "  produce faster and more compact output using ps, pdf, and",
                            "_number": 27,
                            "_offset": 0
                          },
                          {
                            "_line": "  svg backends, however.",
                            "_number": 28,
                            "_offset": 0
                          },
                          {
                            "_line": "",
                            "_number": 29,
                            "_offset": 0
                          }
                        ]
                      },
                      "dt": {
                        "children": [
                          {
                            "type": "Words",
                            "data": {
                              "value": "- Use 2D arrays *X*, *Y* if you need an *arbitrary quadrilateral"
                            }
                          }
                        ]
                      },
                      "dd": {
                        "children": [
                          {
                            "type": "Words",
                            "data": {
                              "value": "grid* (i.e. if the quadrilaterals are not rectangular).  In this case *X* and *Y* are 2D arrays with shape (M + 1, N + 1), specifying the x and y coordinates of the corners of the colored quadrilaterals.  This is the most general, but the slowest to render.  It may produce faster and more compact output using ps, pdf, and svg backends, however. "
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "These arguments can only be passed positionally."
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "cmap",
            "type_": "str or `~matplotlib.colors.Colormap`, default: :rc:`image.cmap`",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "A Colormap instance or registered colormap name. The colormap maps the *C* values to colors."
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "norm",
            "type_": "`~matplotlib.colors.Normalize`, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "The Normalize instance scales the data values to the canonical colormap range [0, 1] for mapping to colors. By default, the data range is mapped to the colorbar range using linear scaling."
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "vmin, vmax",
            "type_": "float, default: None",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "The colorbar range. If *None*, suitable min/max values are automatically chosen by the "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "~.Normalize"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " instance (defaults to the respective min/max values of *C* in case of the default linear scaling). It is deprecated to use *vmin*/*vmax* when *norm* is given."
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "alpha",
            "type_": "float, default: None",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "The alpha blending value, between 0 (transparent) and 1 (opaque)."
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "snap",
            "type_": "bool, default: False",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Whether to snap the mesh to pixel boundaries."
                      }
                    }
                  ]
                }
              }
            ]
          }
        }
      ]
    },
    "Returns": {
      "children": [
        {
          "type": "Param",
          "data": {
            "param": "",
            "type_": "`.AxesImage` or `.PcolorImage` or `.QuadMesh`",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "The return type depends on the type of grid:"
                      }
                    }
                  ]
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "- "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          ".AxesImage"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " for a regular rectangular grid. - "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          ".PcolorImage"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " for a non-regular rectangular grid. - "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          ".QuadMesh"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " for a non-rectangular grid."
                      }
                    }
                  ]
                }
              }
            ]
          }
        }
      ]
    },
    "Yields": {
      "children": []
    },
    "Receives": {
      "children": []
    },
    "Raises": {
      "children": []
    },
    "Warns": {
      "children": []
    },
    "Other Parameters": {
      "children": [
        {
          "type": "Param",
          "data": {
            "param": "**kwargs",
            "type_": "",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Supported additional parameters depend on the type of grid. See return types of *image* for further description."
                      }
                    }
                  ]
                }
              }
            ]
          }
        }
      ]
    },
    "Attributes": {
      "children": []
    },
    "Methods": {
      "children": []
    },
    "Notes": {
      "children": [
        {
          "type": "BlockDirective",
          "data": {
            "lines": {
              "_lines": [
                {
                  "_line": ".. [notes section required to get data note injection right]",
                  "_number": 0,
                  "_offset": 0
                }
              ]
            },
            "wh": {
              "_lines": [
                {
                  "_line": "",
                  "_number": 1,
                  "_offset": 0
                }
              ]
            },
            "ind": {
              "_lines": []
            },
            "directive_name": "[notes section required to get data note injection right]",
            "args0": [],
            "inner": null
          }
        },
        {
          "type": "BlockDirective",
          "data": {
            "lines": {
              "_lines": [
                {
                  "_line": ".. note::",
                  "_number": 2,
                  "_offset": 0
                }
              ]
            },
            "wh": {
              "_lines": []
            },
            "ind": {
              "_lines": [
                {
                  "_line": "    In addition to the above described arguments, this function can take",
                  "_number": 3,
                  "_offset": 0
                },
                {
                  "_line": "    a *data* keyword argument. If such a *data* argument is given,",
                  "_number": 4,
                  "_offset": 0
                },
                {
                  "_line": "    every other argument can also be string ``s``, which is",
                  "_number": 5,
                  "_offset": 0
                },
                {
                  "_line": "    interpreted as ``data[s]`` (unless this raises an exception).",
                  "_number": 6,
                  "_offset": 0
                },
                {
                  "_line": "",
                  "_number": 7,
                  "_offset": 0
                },
                {
                  "_line": "    Objects passed as **data** must support item access (``data[s]``) and",
                  "_number": 8,
                  "_offset": 0
                },
                {
                  "_line": "    membership test (``s in data``).",
                  "_number": 9,
                  "_offset": 0
                }
              ]
            },
            "directive_name": "note",
            "args0": [
              ""
            ],
            "inner": {
              "children": [
                {
                  "type": "Words",
                  "data": {
                    "value": "In addition to the above described arguments, this function can take a *data* keyword argument. If such a *data* argument is given, every other argument can also be string "
                  }
                },
                {
                  "type": "Verbatim",
                  "data": {
                    "value": [
                      "s"
                    ]
                  }
                },
                {
                  "type": "Words",
                  "data": {
                    "value": ", which is interpreted as "
                  }
                },
                {
                  "type": "Verbatim",
                  "data": {
                    "value": [
                      "data[s]"
                    ]
                  }
                },
                {
                  "type": "Words",
                  "data": {
                    "value": " (unless this raises an exception).  Objects passed as **data** must support item access ("
                  }
                },
                {
                  "type": "Verbatim",
                  "data": {
                    "value": [
                      "data[s]"
                    ]
                  }
                },
                {
                  "type": "Words",
                  "data": {
                    "value": ") and membership test ("
                  }
                },
                {
                  "type": "Verbatim",
                  "data": {
                    "value": [
                      "s",
                      " ",
                      "in",
                      " ",
                      "data"
                    ]
                  }
                },
                {
                  "type": "Words",
                  "data": {
                    "value": ")."
                  }
                }
              ]
            }
          }
        }
      ]
    },
    "Warnings": {
      "children": []
    }
  },
  "refs": [],
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns",
    "Other Parameters",
    "Notes"
  ],
  "item_file": "/Users/bussonniermatthias/miniconda3/lib/python3.8/site-packages/matplotlib/__init__.py",
  "item_line": 6133,
  "item_type": "<class 'function'>",
  "aliases": [
    "matplotlib.pyplot.Axes.pcolorfast"
  ],
  "example_section_data": {
    "children": []
  },
  "see_also": [],
  "references": null,
  "signature": "pcolorfast(self, *args, alpha=None, norm=None, cmap=None, vmin=None, vmax=None, data=None, **kwargs)"
}