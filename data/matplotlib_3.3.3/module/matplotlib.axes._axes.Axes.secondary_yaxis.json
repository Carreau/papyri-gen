{
  "_content": {
    "Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "children": [
              {
                "type": "Words",
                "data": {
                  "value": "Add a second y-axis to this axes."
                }
              }
            ]
          }
        }
      ]
    },
    "Extended Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "children": [
              {
                "type": "Words",
                "data": {
                  "value": "For example if we want to have a second scale for the data plotted on the yaxis."
                }
              }
            ]
          }
        }
      ]
    },
    "Parameters": {
      "children": [
        {
          "type": "Param",
          "data": {
            "param": "location",
            "type_": "{'top', 'bottom', 'left', 'right'} or float",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "The position to put the secondary axis.  Strings can be 'top' or 'bottom' for orientation='x' and 'right' or 'left' for orientation='y'. A float indicates the relative position on the parent axes to put the new axes, 0.0 being the bottom (or left) and 1.0 being the top (or right)."
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "functions",
            "type_": "2-tuple of func, or Transform with an inverse",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "If a 2-tuple of functions, the user specifies the transform function and its inverse.  i.e. "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "functions=(lambda",
                          " ",
                          "x",
                          ":",
                          " ",
                          "2",
                          " ",
                          "/",
                          " ",
                          "x,",
                          " ",
                          "lambda",
                          " ",
                          "x",
                          ":",
                          " ",
                          "2",
                          " ",
                          "/",
                          " ",
                          "x)"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " would be an reciprocal transform with a factor of 2."
                      }
                    }
                  ]
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "The user can also directly supply a subclass of "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          ".transforms.Transform"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " so long as it has an inverse."
                      }
                    }
                  ]
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "See "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "/gallery/subplots",
                          "_",
                          "axes",
                          "_",
                          "and",
                          "_",
                          "figures/secondary",
                          "_",
                          "axis"
                        ],
                        "domain": null,
                        "role": "doc"
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " for examples of making these conversions."
                      }
                    }
                  ]
                }
              }
            ]
          }
        }
      ]
    },
    "Returns": {
      "children": [
        {
          "type": "Param",
          "data": {
            "param": "ax",
            "type_": "axes._secondary_axes.SecondaryAxis",
            "desc": []
          }
        }
      ]
    },
    "Yields": {
      "children": []
    },
    "Receives": {
      "children": []
    },
    "Raises": {
      "children": []
    },
    "Warns": {
      "children": []
    },
    "Other Parameters": {
      "children": [
        {
          "type": "Param",
          "data": {
            "param": "**kwargs",
            "type_": "`~matplotlib.axes.Axes` properties.",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Other miscellaneous axes parameters."
                      }
                    }
                  ]
                }
              }
            ]
          }
        }
      ]
    },
    "Attributes": {
      "children": []
    },
    "Methods": {
      "children": []
    },
    "Notes": {
      "children": []
    },
    "Warnings": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "children": [
              {
                "type": "Words",
                "data": {
                  "value": "This method is experimental as of 3.1, and the API may change."
                }
              }
            ]
          }
        }
      ]
    }
  },
  "refs": [],
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Warnings",
    "Parameters",
    "Returns",
    "Other Parameters",
    "Examples"
  ],
  "item_file": "/Users/bussonniermatthias/miniconda3/lib/python3.8/site-packages/matplotlib/axes/_axes.py",
  "item_line": 670,
  "item_type": "<class 'function'>",
  "aliases": [
    "matplotlib.pyplot.Axes.secondary_yaxis"
  ],
  "example_section_data": {
    "children": [
      {
        "type": "Paragraph",
        "data": {
          "children": [
            {
              "type": "Words",
              "data": {
                "value": "Add a secondary axes that converts from radians to degrees"
              }
            }
          ]
        }
      },
      {
        "type": "BlockDirective",
        "data": {
          "lines": {
            "_lines": [
              {
                "_line": ".. plot::",
                "_number": 0,
                "_offset": 0
              }
            ]
          },
          "wh": {
            "_lines": []
          },
          "ind": {
            "_lines": []
          },
          "directive_name": "plot",
          "args0": [
            ""
          ],
          "inner": null
        }
      },
      {
        "type": "DefList",
        "data": {
          "children": [
            {
              "lines": {
                "_lines": [
                  {
                    "_line": ":: workaround numpyoc summary/ext summary bug in take2::Line.__init__",
                    "_number": 0,
                    "_offset": 0
                  }
                ]
              },
              "wh": {
                "_lines": []
              },
              "ind": {
                "_lines": [
                  {
                    "_line": "    fig, ax = plt.subplots()",
                    "_number": 0,
                    "_offset": 0
                  },
                  {
                    "_line": "    ax.plot(range(1, 360, 5), range(1, 360, 5))",
                    "_number": 1,
                    "_offset": 0
                  },
                  {
                    "_line": "    ax.set_ylabel('degrees')",
                    "_number": 2,
                    "_offset": 0
                  },
                  {
                    "_line": "    secax = ax.secondary_yaxis('right', functions=(np.deg2rad,",
                    "_number": 3,
                    "_offset": 0
                  },
                  {
                    "_line": "                                                   np.rad2deg))",
                    "_number": 4,
                    "_offset": 0
                  },
                  {
                    "_line": "    secax.set_ylabel('radians')",
                    "_number": 5,
                    "_offset": 0
                  }
                ]
              },
              "dt": {
                "children": [
                  {
                    "type": "Words",
                    "data": {
                      "value": ":: workaround numpyoc summary/ext summary bug in take2::Line.__init__"
                    }
                  }
                ]
              },
              "dd": {
                "children": [
                  {
                    "type": "Words",
                    "data": {
                      "value": "fig, ax = plt.subplots() ax.plot(range(1, 360, 5), range(1, 360, 5)) ax.set_ylabel('degrees') secax = ax.secondary_yaxis('right', functions=(np.deg2rad,                                                np.rad2deg)) secax.set_ylabel('radians')"
                    }
                  }
                ]
              }
            }
          ]
        }
      }
    ]
  },
  "see_also": [],
  "references": null,
  "signature": "secondary_yaxis(self, location, *, functions=None, **kwargs)"
}