{
  "_content": {
    "Summary": {
      "children": [
        {
          "type": "DefList",
          "data": {
            "children": [
              {
                "lines": {
                  "_lines": [
                    {
                      "_line": "A mouse event ('button_press_event',",
                      "_number": 0,
                      "_offset": 0
                    }
                  ]
                },
                "wh": {
                  "_lines": []
                },
                "ind": {
                  "_lines": [
                    {
                      "_line": "               'button_release_event',",
                      "_number": 1,
                      "_offset": 0
                    },
                    {
                      "_line": "               'scroll_event',",
                      "_number": 2,
                      "_offset": 0
                    },
                    {
                      "_line": "               'motion_notify_event').",
                      "_number": 3,
                      "_offset": 0
                    }
                  ]
                },
                "dt": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "A mouse event ('button_press_event',"
                      }
                    }
                  ]
                },
                "dd": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "'button_release_event', 'scroll_event', 'motion_notify_event')."
                      }
                    }
                  ]
                }
              }
            ]
          }
        }
      ]
    },
    "Extended Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "children": [
              {
                "type": "Words",
                "data": {
                  "value": "In addition to the "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "Event"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " and "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "LocationEvent"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " attributes, the following attributes are defined:"
                }
              }
            ]
          }
        }
      ]
    },
    "Parameters": {
      "children": []
    },
    "Returns": {
      "children": []
    },
    "Yields": {
      "children": []
    },
    "Receives": {
      "children": []
    },
    "Raises": {
      "children": []
    },
    "Warns": {
      "children": []
    },
    "Other Parameters": {
      "children": []
    },
    "Attributes": {
      "children": [
        {
          "type": "Param",
          "data": {
            "param": "button",
            "type_": "None or `MouseButton` or {'up', 'down'}",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "The button pressed. 'up' and 'down' are used for scroll events. Note that in the nbagg backend, both the middle and right clicks return RIGHT since right clicking will bring up the context menu in some browsers. Note that LEFT and RIGHT actually refer to the \"primary\" and \"secondary\" buttons, i.e. if the user inverts their left and right buttons (\"left-handed setting\") then the LEFT button will be the one physically on the right."
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "key",
            "type_": "None or str",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "The key pressed when the mouse event triggered, e.g. 'shift'. See "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "KeyEvent"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": "."
                      }
                    }
                  ]
                }
              },
              {
                "type": "BlockDirective",
                "data": {
                  "lines": {
                    "_lines": [
                      {
                        "_line": ".. warning::",
                        "_number": 3,
                        "_offset": 0
                      }
                    ]
                  },
                  "wh": {
                    "_lines": []
                  },
                  "ind": {
                    "_lines": [
                      {
                        "_line": "   This key is currently obtained from the last 'key_press_event' or",
                        "_number": 4,
                        "_offset": 0
                      },
                      {
                        "_line": "   'key_release_event' that occurred within the canvas.  Thus, if the",
                        "_number": 5,
                        "_offset": 0
                      },
                      {
                        "_line": "   last change of keyboard state occurred while the canvas did not have",
                        "_number": 6,
                        "_offset": 0
                      },
                      {
                        "_line": "   focus, this attribute will be wrong.",
                        "_number": 7,
                        "_offset": 0
                      }
                    ]
                  },
                  "directive_name": "warning",
                  "args0": [
                    ""
                  ],
                  "inner": {
                    "children": [
                      {
                        "type": "Words",
                        "data": {
                          "value": "This key is currently obtained from the last 'key_press_event' or 'key_release_event' that occurred within the canvas.  Thus, if the last change of keyboard state occurred while the canvas did not have focus, this attribute will be wrong."
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "step",
            "type_": "float",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "The number of scroll steps (positive for 'up', negative for 'down'). This applies only to 'scroll_event' and defaults to 0 otherwise."
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "dblclick",
            "type_": "bool",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Whether the event is a double-click. This applies only to 'button_press_event' and is False otherwise. In particular, it's not used in 'button_release_event'."
                      }
                    }
                  ]
                }
              }
            ]
          }
        }
      ]
    },
    "Methods": {
      "children": []
    },
    "Notes": {
      "children": []
    },
    "Warnings": {
      "children": []
    }
  },
  "refs": [],
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Attributes",
    "Examples"
  ],
  "item_file": "/Users/bussonniermatthias/miniconda3/lib/python3.8/site-packages/matplotlib/backend_bases.py",
  "item_line": 1374,
  "item_type": "<class 'type'>",
  "aliases": [
    "matplotlib.backend_bases.MouseEvent"
  ],
  "example_section_data": {
    "children": [
      {
        "type": "Paragraph",
        "data": {
          "children": [
            {
              "type": "Words",
              "data": {
                "value": "::"
              }
            }
          ]
        }
      },
      {
        "type": "DefList",
        "data": {
          "children": [
            {
              "lines": {
                "_lines": [
                  {
                    "_line": ":: workaround numpyoc summary/ext summary bug in take2::Line.__init__",
                    "_number": 0,
                    "_offset": 0
                  }
                ]
              },
              "wh": {
                "_lines": []
              },
              "ind": {
                "_lines": [
                  {
                    "_line": "    def on_press(event):",
                    "_number": 0,
                    "_offset": 0
                  },
                  {
                    "_line": "        print('you pressed', event.button, event.xdata, event.ydata)",
                    "_number": 1,
                    "_offset": 0
                  }
                ]
              },
              "dt": {
                "children": [
                  {
                    "type": "Words",
                    "data": {
                      "value": ":: workaround numpyoc summary/ext summary bug in take2::Line.__init__"
                    }
                  }
                ]
              },
              "dd": {
                "children": [
                  {
                    "type": "Words",
                    "data": {
                      "value": "def on_press(event):     print('you pressed', event.button, event.xdata, event.ydata)"
                    }
                  }
                ]
              }
            }
          ]
        }
      },
      {
        "type": "DefList",
        "data": {
          "children": [
            {
              "lines": {
                "_lines": [
                  {
                    "_line": ":: workaround numpyoc summary/ext summary bug in take2::Line.__init__",
                    "_number": 0,
                    "_offset": 0
                  }
                ]
              },
              "wh": {
                "_lines": []
              },
              "ind": {
                "_lines": [
                  {
                    "_line": "    cid = fig.canvas.mpl_connect('button_press_event', on_press)",
                    "_number": 0,
                    "_offset": 0
                  }
                ]
              },
              "dt": {
                "children": [
                  {
                    "type": "Words",
                    "data": {
                      "value": ":: workaround numpyoc summary/ext summary bug in take2::Line.__init__"
                    }
                  }
                ]
              },
              "dd": {
                "children": [
                  {
                    "type": "Words",
                    "data": {
                      "value": "cid = fig.canvas.mpl_connect('button_press_event', on_press)"
                    }
                  }
                ]
              }
            }
          ]
        }
      }
    ]
  },
  "see_also": [],
  "references": null,
  "signature": "MouseEvent(name, canvas, x, y, button=None, key=None, step=0, dblclick=False, guiEvent=None)"
}