{
  "_content": {
    "Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Create legend handles and labels for a PathCollection."
                }
              }
            ],
            "inner": []
          }
        }
      ],
      "title": null
    },
    "Extended Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Each legend handle is a "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    ".Line2D"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " representing the Path that was drawn, and each label is a string what each Path represents."
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "This is useful for obtaining a legend for a "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "~.Axes.scatter"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " plot; e.g.::"
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "BlockVerbatim",
          "data": {
            "lines": {
              "_lines": [
                {
                  "_line": "    scatter = plt.scatter([1, 2, 3],  [4, 5, 6],  c=[7, 2, 3])",
                  "_number": 6,
                  "_offset": 4
                },
                {
                  "_line": "    plt.legend(*scatter.legend_elements())",
                  "_number": 7,
                  "_offset": 4
                },
                {
                  "_line": "",
                  "_number": 8,
                  "_offset": 4
                }
              ]
            }
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "creates three legend elements, one for each color with the numerical values passed to *c* as the labels."
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Also see the "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "automatedlegendcreation"
                  ],
                  "domain": null,
                  "role": "ref"
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " example."
                }
              }
            ],
            "inner": []
          }
        }
      ],
      "title": null
    },
    "Parameters": {
      "children": [
        {
          "type": "Param",
          "data": {
            "param": "prop",
            "type_": "{\"colors\", \"sizes\"}, default: \"colors\"",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "If \"colors\", the legend handles will show the different colors of the collection. If \"sizes\", the legend will show the different sizes. To set both, use *kwargs* to directly edit the "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          ".Line2D"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " properties."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "num",
            "type_": "int, None, \"auto\" (default), array-like, or `~.ticker.Locator`,",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Target number of elements to create. If None, use all unique elements of the mappable array. If an integer, target to use *num* elements in the normed range. If *\"auto\"*, try to determine which option better suits the nature of the data. The number of created elements may slightly deviate from *num* due to a "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "~.ticker.Locator"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " being used to find useful locations. If a list or array, use exactly those elements for the legend. Finally, a "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "~.ticker.Locator"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " can be provided."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "fmt",
            "type_": "str, `~matplotlib.ticker.Formatter`, or None (default)",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "The format or formatter to use for the labels. If a string must be a valid input for a "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "~.StrMethodFormatter"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ". If None (the default), use a "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "~.ScalarFormatter"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": "."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "func",
            "type_": "function, default *lambda x: x*",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Function to calculate the labels.  Often the size (or color) argument to "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "~.Axes.scatter"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " will have been pre-processed by the user using a function "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "s",
                          " ",
                          "=",
                          " ",
                          "f(x)"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " to make the markers visible; e.g. "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "size",
                          " ",
                          "=",
                          " ",
                          "np.log10(x)"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ".  Providing the inverse of this function here allows that pre-processing to be inverted, so that the legend labels have the correct values; e.g. "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "func",
                          " ",
                          "=",
                          " ",
                          "lambda",
                          " ",
                          "x",
                          ":",
                          " ",
                          "10",
                          "*",
                          "*",
                          "x"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": "."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "**kwargs",
            "type_": "",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Allowed keyword arguments are *color* and *size*. E.g. it may be useful to set the color of the markers if *prop=\"sizes\"* is used; similarly to set the size of the markers if *prop=\"colors\"* is used. Any further parameters are passed onto the "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          ".Line2D"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " instance. This may be useful to e.g. specify a different *markeredgecolor* or *alpha* for the legend handles."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        }
      ],
      "title": null
    },
    "Returns": {
      "children": [
        {
          "type": "Param",
          "data": {
            "param": "handles",
            "type_": "list of `.Line2D`",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Visual representation of each element of the legend."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "labels",
            "type_": "list of str",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "The string labels for elements of the legend."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        }
      ],
      "title": null
    },
    "Yields": {
      "children": [],
      "title": null
    },
    "Receives": {
      "children": [],
      "title": null
    },
    "Raises": {
      "children": [],
      "title": null
    },
    "Warns": {
      "children": [],
      "title": null
    },
    "Other Parameters": {
      "children": [],
      "title": null
    },
    "Attributes": {
      "children": [],
      "title": null
    },
    "Methods": {
      "children": [],
      "title": null
    },
    "Notes": {
      "children": [],
      "title": null
    },
    "Warnings": {
      "children": [],
      "title": null
    }
  },
  "refs": [],
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns"
  ],
  "item_file": "/Users/bussonniermatthias/miniconda3/lib/python3.8/site-packages/matplotlib/collections.py",
  "item_line": 965,
  "item_type": "<class 'function'>",
  "aliases": [
    "matplotlib.collections.PathCollection.legend_elements"
  ],
  "example_section_data": {
    "children": [],
    "title": null
  },
  "see_also": [],
  "signature": "legend_elements(self, prop='colors', num='auto', fmt=None, func=<function PathCollection.<lambda> at 0x13410f4c0>, **kwargs)",
  "references": null,
  "arbitrary": []
}