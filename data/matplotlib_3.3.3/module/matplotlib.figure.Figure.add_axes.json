{
  "_content": {
    "Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "children": [
              {
                "type": "Words",
                "data": {
                  "value": "Add an axes to the figure."
                }
              }
            ]
          }
        }
      ]
    },
    "Extended Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "children": [
              {
                "type": "Words",
                "data": {
                  "value": "Call signatures::"
                }
              }
            ]
          }
        },
        {
          "type": "BlockVerbatim",
          "data": {
            "lines": {
              "_lines": [
                {
                  "_line": "    add_axes(rect, projection=None, polar=False, **kwargs)",
                  "_number": 2,
                  "_offset": 4
                },
                {
                  "_line": "    add_axes(ax)",
                  "_number": 3,
                  "_offset": 4
                }
              ]
            }
          }
        }
      ]
    },
    "Parameters": {
      "children": [
        {
          "type": "Param",
          "data": {
            "param": "rect",
            "type_": "sequence of float",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "The dimensions [left, bottom, width, height] of the new axes. All quantities are in fractions of figure width and height."
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "projection",
            "type_": "{None, 'aitoff', 'hammer', 'lambert', 'mollweide', 'polar', 'rectilinear', str}, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "The projection type of the "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "~.axes.Axes"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ". *str* is the name of a custom projection, see "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "~matplotlib.projections"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ". The default None results in a 'rectilinear' projection."
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "polar",
            "type_": "bool, default: False",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "If True, equivalent to projection='polar'."
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "sharex, sharey",
            "type_": "`~.axes.Axes`, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Share the x or y "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "~matplotlib.axis"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " with sharex and/or sharey. The axis will have the same limits, ticks, and scale as the axis of the shared axes."
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "label",
            "type_": "str",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "A label for the returned axes."
                      }
                    }
                  ]
                }
              }
            ]
          }
        }
      ]
    },
    "Returns": {
      "children": [
        {
          "type": "Param",
          "data": {
            "param": "",
            "type_": "`~.axes.Axes`, or a subclass of `~.axes.Axes`",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "The returned axes class depends on the projection used. It is "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "~.axes.Axes"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " if rectilinear projection is used and "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          ".projections.polar.PolarAxes"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " if polar projection is used."
                      }
                    }
                  ]
                }
              }
            ]
          }
        }
      ]
    },
    "Yields": {
      "children": []
    },
    "Receives": {
      "children": []
    },
    "Raises": {
      "children": []
    },
    "Warns": {
      "children": []
    },
    "Other Parameters": {
      "children": [
        {
          "type": "Param",
          "data": {
            "param": "**kwargs",
            "type_": "",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "This method also takes the keyword arguments for the returned axes class. The keyword arguments for the rectilinear axes class "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "~.axes.Axes"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " can be found in the following table but there might also be other keyword arguments if another projection is used, see the actual axes class."
                      }
                    }
                  ]
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Properties: adjustable: {'box', 'datalim'} agg_filter: a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array alpha: float or None anchor: 2-tuple of floats or {'C', 'SW', 'S', 'SE', ...} animated: bool aspect: {'auto'} or num autoscale_on: bool autoscalex_on: bool autoscaley_on: bool axes_locator: Callable[[Axes, Renderer], Bbox] axisbelow: bool or 'line' box_aspect: None, or a number clip_box: "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          ".Bbox"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " clip_on: bool clip_path: Patch or (Path, Transform) or None contains: unknown facecolor or fc: color figure: "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          ".Figure"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " frame_on: bool gid: str in_layout: bool label: object navigate: bool navigate_mode: unknown path_effects: "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          ".AbstractPathEffect"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " picker: None or bool or callable position: [left, bottom, width, height] or "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "~matplotlib.transforms.Bbox"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " prop_cycle: unknown rasterization_zorder: float or None rasterized: bool or None sketch_params: (scale: float, length: float, randomness: float) snap: bool or None title: str transform: "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          ".Transform"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " url: str visible: bool xbound: unknown xlabel: str xlim: (bottom: float, top: float) xmargin: float greater than -0.5 xscale: {\"linear\", \"log\", \"symlog\", \"logit\", ...} xticklabels: unknown xticks: unknown ybound: unknown ylabel: str ylim: (bottom: float, top: float) ymargin: float greater than -0.5 yscale: {\"linear\", \"log\", \"symlog\", \"logit\", ...} yticklabels: unknown yticks: unknown zorder: float"
                      }
                    }
                  ]
                }
              }
            ]
          }
        }
      ]
    },
    "Attributes": {
      "children": []
    },
    "Methods": {
      "children": []
    },
    "Notes": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "children": [
              {
                "type": "Words",
                "data": {
                  "value": "If the figure already has an axes with key (*args*, *kwargs*) then it will simply make that axes current and return it.  This behavior is deprecated. Meanwhile, if you do not want this behavior (i.e., you want to force the creation of a new axes), you must use a unique set of args and kwargs.  The axes *label* attribute has been exposed for this purpose: if you want two axes that are otherwise identical to be added to the figure, make sure you give them unique labels."
                }
              }
            ]
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "children": [
              {
                "type": "Words",
                "data": {
                  "value": "In rare circumstances, "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    ".add",
                    "_",
                    "axes"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " may be called with a single argument, a axes instance already created in the present figure but not in the figure's list of axes."
                }
              }
            ]
          }
        }
      ]
    },
    "Warnings": {
      "children": []
    }
  },
  "refs": [
    ".Figure.add_subplot",
    ".Figure.subplots",
    ".pyplot.axes",
    ".pyplot.subplot",
    ".pyplot.subplots"
  ],
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns",
    "Other Parameters",
    "Notes",
    "See Also",
    "Examples"
  ],
  "item_file": "/Users/bussonniermatthias/miniconda3/lib/python3.8/site-packages/matplotlib/figure.py",
  "item_line": 1118,
  "item_type": "<class 'function'>",
  "aliases": [
    "matplotlib.pyplot.Figure.add_axes"
  ],
  "example_section_data": {
    "children": [
      {
        "type": "Paragraph",
        "data": {
          "children": [
            {
              "type": "Words",
              "data": {
                "value": "Some simple examples::"
              }
            }
          ]
        }
      },
      {
        "type": "DefList",
        "data": {
          "children": [
            {
              "lines": {
                "_lines": [
                  {
                    "_line": ":: workaround numpyoc summary/ext summary bug in take2::Line.__init__",
                    "_number": 0,
                    "_offset": 0
                  }
                ]
              },
              "wh": {
                "_lines": []
              },
              "ind": {
                "_lines": [
                  {
                    "_line": "    rect = l, b, w, h",
                    "_number": 0,
                    "_offset": 0
                  },
                  {
                    "_line": "    fig = plt.figure()",
                    "_number": 1,
                    "_offset": 0
                  },
                  {
                    "_line": "    fig.add_axes(rect, label=label1)",
                    "_number": 2,
                    "_offset": 0
                  },
                  {
                    "_line": "    fig.add_axes(rect, label=label2)",
                    "_number": 3,
                    "_offset": 0
                  },
                  {
                    "_line": "    fig.add_axes(rect, frameon=False, facecolor='g')",
                    "_number": 4,
                    "_offset": 0
                  },
                  {
                    "_line": "    fig.add_axes(rect, polar=True)",
                    "_number": 5,
                    "_offset": 0
                  },
                  {
                    "_line": "    ax = fig.add_axes(rect, projection='polar')",
                    "_number": 6,
                    "_offset": 0
                  },
                  {
                    "_line": "    fig.delaxes(ax)",
                    "_number": 7,
                    "_offset": 0
                  },
                  {
                    "_line": "    fig.add_axes(ax)",
                    "_number": 8,
                    "_offset": 0
                  }
                ]
              },
              "dt": {
                "children": [
                  {
                    "type": "Words",
                    "data": {
                      "value": ":: workaround numpyoc summary/ext summary bug in take2::Line.__init__"
                    }
                  }
                ]
              },
              "dd": {
                "children": [
                  {
                    "type": "Words",
                    "data": {
                      "value": "rect = l, b, w, h fig = plt.figure() fig.add_axes(rect, label=label1) fig.add_axes(rect, label=label2) fig.add_axes(rect, frameon=False, facecolor='g') fig.add_axes(rect, polar=True) ax = fig.add_axes(rect, projection='polar') fig.delaxes(ax) fig.add_axes(ax)"
                    }
                  }
                ]
              }
            }
          ]
        }
      }
    ]
  },
  "see_also": [
    {
      "name": {
        "name": ".Figure.add_subplot",
        "ref": null,
        "exists": null
      },
      "descriptions": [],
      "type": null
    },
    {
      "name": {
        "name": ".pyplot.subplot",
        "ref": null,
        "exists": null
      },
      "descriptions": [],
      "type": null
    },
    {
      "name": {
        "name": ".pyplot.axes",
        "ref": null,
        "exists": null
      },
      "descriptions": [],
      "type": null
    },
    {
      "name": {
        "name": ".Figure.subplots",
        "ref": null,
        "exists": null
      },
      "descriptions": [],
      "type": null
    },
    {
      "name": {
        "name": ".pyplot.subplots",
        "ref": null,
        "exists": null
      },
      "descriptions": [],
      "type": null
    }
  ],
  "references": null,
  "signature": "add_axes(self, *args, **kwargs)"
}