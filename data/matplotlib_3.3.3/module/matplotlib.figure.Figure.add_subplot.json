{
  "_content": {
    "Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "children": [
              {
                "type": "Words",
                "data": {
                  "value": "Add an "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "~.axes.Axes"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " to the figure as part of a subplot arrangement."
                }
              }
            ]
          }
        }
      ]
    },
    "Extended Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "children": [
              {
                "type": "Words",
                "data": {
                  "value": "Call signatures::"
                }
              }
            ]
          }
        },
        {
          "type": "BlockVerbatim",
          "data": {
            "lines": {
              "_lines": [
                {
                  "_line": "   add_subplot(nrows, ncols, index, **kwargs)",
                  "_number": 2,
                  "_offset": 3
                },
                {
                  "_line": "   add_subplot(pos, **kwargs)",
                  "_number": 3,
                  "_offset": 3
                },
                {
                  "_line": "   add_subplot(ax)",
                  "_number": 4,
                  "_offset": 3
                },
                {
                  "_line": "   add_subplot()",
                  "_number": 5,
                  "_offset": 3
                }
              ]
            }
          }
        }
      ]
    },
    "Parameters": {
      "children": [
        {
          "type": "Param",
          "data": {
            "param": "*args",
            "type_": "int, (int, int, *index*), or `.SubplotSpec`, default: (1, 1, 1)",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "The position of the subplot described by one of"
                      }
                    }
                  ]
                }
              },
              {
                "type": "DefList",
                "data": {
                  "children": [
                    {
                      "lines": {
                        "_lines": [
                          {
                            "_line": "- Three integers (*nrows*, *ncols*, *index*). The subplot will",
                            "_number": 2,
                            "_offset": 0
                          }
                        ]
                      },
                      "wh": {
                        "_lines": []
                      },
                      "ind": {
                        "_lines": [
                          {
                            "_line": "  take the *index* position on a grid with *nrows* rows and",
                            "_number": 3,
                            "_offset": 0
                          },
                          {
                            "_line": "  *ncols* columns. *index* starts at 1 in the upper left corner",
                            "_number": 4,
                            "_offset": 0
                          },
                          {
                            "_line": "  and increases to the right.  *index* can also be a two-tuple",
                            "_number": 5,
                            "_offset": 0
                          },
                          {
                            "_line": "  specifying the (*first*, *last*) indices (1-based, and including",
                            "_number": 6,
                            "_offset": 0
                          },
                          {
                            "_line": "  *last*) of the subplot, e.g., ``fig.add_subplot(3, 1, (1, 2))``",
                            "_number": 7,
                            "_offset": 0
                          },
                          {
                            "_line": "  makes a subplot that spans the upper 2/3 of the figure.",
                            "_number": 8,
                            "_offset": 0
                          }
                        ]
                      },
                      "dt": {
                        "children": [
                          {
                            "type": "Words",
                            "data": {
                              "value": "- Three integers (*nrows*, *ncols*, *index*). The subplot will"
                            }
                          }
                        ]
                      },
                      "dd": {
                        "children": [
                          {
                            "type": "Words",
                            "data": {
                              "value": "take the *index* position on a grid with *nrows* rows and *ncols* columns. *index* starts at 1 in the upper left corner and increases to the right.  *index* can also be a two-tuple specifying the (*first*, *last*) indices (1-based, and including *last*) of the subplot, e.g., "
                            }
                          },
                          {
                            "type": "Verbatim",
                            "data": {
                              "value": [
                                "fig.add",
                                "_",
                                "subplot(3,",
                                " ",
                                "1,",
                                " ",
                                "(1,",
                                " ",
                                "2))"
                              ]
                            }
                          },
                          {
                            "type": "Words",
                            "data": {
                              "value": " makes a subplot that spans the upper 2/3 of the figure."
                            }
                          }
                        ]
                      }
                    },
                    {
                      "lines": {
                        "_lines": [
                          {
                            "_line": "- A 3-digit integer. The digits are interpreted as if given",
                            "_number": 9,
                            "_offset": 0
                          }
                        ]
                      },
                      "wh": {
                        "_lines": []
                      },
                      "ind": {
                        "_lines": [
                          {
                            "_line": "  separately as three single-digit integers, i.e.",
                            "_number": 10,
                            "_offset": 0
                          },
                          {
                            "_line": "  ``fig.add_subplot(235)`` is the same as",
                            "_number": 11,
                            "_offset": 0
                          },
                          {
                            "_line": "  ``fig.add_subplot(2, 3, 5)``. Note that this can only be used",
                            "_number": 12,
                            "_offset": 0
                          },
                          {
                            "_line": "  if there are no more than 9 subplots.",
                            "_number": 13,
                            "_offset": 0
                          }
                        ]
                      },
                      "dt": {
                        "children": [
                          {
                            "type": "Words",
                            "data": {
                              "value": "- A 3-digit integer. The digits are interpreted as if given"
                            }
                          }
                        ]
                      },
                      "dd": {
                        "children": [
                          {
                            "type": "Words",
                            "data": {
                              "value": "separately as three single-digit integers, i.e. "
                            }
                          },
                          {
                            "type": "Verbatim",
                            "data": {
                              "value": [
                                "fig.add",
                                "_",
                                "subplot(235)"
                              ]
                            }
                          },
                          {
                            "type": "Words",
                            "data": {
                              "value": " is the same as "
                            }
                          },
                          {
                            "type": "Verbatim",
                            "data": {
                              "value": [
                                "fig.add",
                                "_",
                                "subplot(2,",
                                " ",
                                "3,",
                                " ",
                                "5)"
                              ]
                            }
                          },
                          {
                            "type": "Words",
                            "data": {
                              "value": ". Note that this can only be used if there are no more than 9 subplots."
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "- A "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          ".SubplotSpec"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": "."
                      }
                    }
                  ]
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "In rare circumstances, "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          ".add",
                          "_",
                          "subplot"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " may be called with a single argument, a subplot axes instance already created in the present figure but not in the figure's list of axes."
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "projection",
            "type_": "{None, 'aitoff', 'hammer', 'lambert', 'mollweide', 'polar', 'rectilinear', str}, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "The projection type of the subplot ("
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "~.axes.Axes"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": "). *str* is the name of a custom projection, see "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "~matplotlib.projections"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ". The default None results in a 'rectilinear' projection."
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "polar",
            "type_": "bool, default: False",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "If True, equivalent to projection='polar'."
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "sharex, sharey",
            "type_": "`~.axes.Axes`, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Share the x or y "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "~matplotlib.axis"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " with sharex and/or sharey. The axis will have the same limits, ticks, and scale as the axis of the shared axes."
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "label",
            "type_": "str",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "A label for the returned axes."
                      }
                    }
                  ]
                }
              }
            ]
          }
        }
      ]
    },
    "Returns": {
      "children": [
        {
          "type": "Param",
          "data": {
            "param": "",
            "type_": "`.axes.SubplotBase`, or another subclass of `~.axes.Axes`",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "The axes of the subplot. The returned axes base class depends on the projection used. It is "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "~.axes.Axes"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " if rectilinear projection is used and "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          ".projections.polar.PolarAxes"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " if polar projection is used. The returned axes is then a subplot subclass of the base class."
                      }
                    }
                  ]
                }
              }
            ]
          }
        }
      ]
    },
    "Yields": {
      "children": []
    },
    "Receives": {
      "children": []
    },
    "Raises": {
      "children": []
    },
    "Warns": {
      "children": []
    },
    "Other Parameters": {
      "children": [
        {
          "type": "Param",
          "data": {
            "param": "**kwargs",
            "type_": "",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "This method also takes the keyword arguments for the returned axes base class; except for the *figure* argument. The keyword arguments for the rectilinear base class "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "~.axes.Axes"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " can be found in the following table but there might also be other keyword arguments if another projection is used."
                      }
                    }
                  ]
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Properties: adjustable: {'box', 'datalim'} agg_filter: a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array alpha: float or None anchor: 2-tuple of floats or {'C', 'SW', 'S', 'SE', ...} animated: bool aspect: {'auto'} or num autoscale_on: bool autoscalex_on: bool autoscaley_on: bool axes_locator: Callable[[Axes, Renderer], Bbox] axisbelow: bool or 'line' box_aspect: None, or a number clip_box: "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          ".Bbox"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " clip_on: bool clip_path: Patch or (Path, Transform) or None contains: unknown facecolor or fc: color figure: "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          ".Figure"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " frame_on: bool gid: str in_layout: bool label: object navigate: bool navigate_mode: unknown path_effects: "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          ".AbstractPathEffect"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " picker: None or bool or callable position: [left, bottom, width, height] or "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "~matplotlib.transforms.Bbox"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " prop_cycle: unknown rasterization_zorder: float or None rasterized: bool or None sketch_params: (scale: float, length: float, randomness: float) snap: bool or None title: str transform: "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          ".Transform"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " url: str visible: bool xbound: unknown xlabel: str xlim: (bottom: float, top: float) xmargin: float greater than -0.5 xscale: {\"linear\", \"log\", \"symlog\", \"logit\", ...} xticklabels: unknown xticks: unknown ybound: unknown ylabel: str ylim: (bottom: float, top: float) ymargin: float greater than -0.5 yscale: {\"linear\", \"log\", \"symlog\", \"logit\", ...} yticklabels: unknown yticks: unknown zorder: float"
                      }
                    }
                  ]
                }
              }
            ]
          }
        }
      ]
    },
    "Attributes": {
      "children": []
    },
    "Methods": {
      "children": []
    },
    "Notes": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "children": [
              {
                "type": "Words",
                "data": {
                  "value": "If the figure already has a subplot with key (*args*, *kwargs*) then it will simply make that subplot current and return it.  This behavior is deprecated. Meanwhile, if you do not want this behavior (i.e., you want to force the creation of a new subplot), you must use a unique set of args and kwargs.  The axes *label* attribute has been exposed for this purpose: if you want two subplots that are otherwise identical to be added to the figure, make sure you give them unique labels."
                }
              }
            ]
          }
        }
      ]
    },
    "Warnings": {
      "children": []
    }
  },
  "refs": [
    ".Figure.add_axes",
    ".Figure.subplots",
    ".pyplot.axes",
    ".pyplot.subplot",
    ".pyplot.subplots"
  ],
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns",
    "Other Parameters",
    "Notes",
    "See Also",
    "Examples"
  ],
  "item_file": "/Users/bussonniermatthias/miniconda3/lib/python3.8/site-packages/matplotlib/figure.py",
  "item_line": 1254,
  "item_type": "<class 'function'>",
  "aliases": [
    "matplotlib.pyplot.Figure.add_subplot"
  ],
  "example_section_data": {
    "children": [
      {
        "type": "Paragraph",
        "data": {
          "children": [
            {
              "type": "Words",
              "data": {
                "value": "::"
              }
            }
          ]
        }
      },
      {
        "type": "DefList",
        "data": {
          "children": [
            {
              "lines": {
                "_lines": [
                  {
                    "_line": ":: workaround numpyoc summary/ext summary bug in take2::Line.__init__",
                    "_number": 0,
                    "_offset": 0
                  }
                ]
              },
              "wh": {
                "_lines": []
              },
              "ind": {
                "_lines": [
                  {
                    "_line": "    fig = plt.figure()",
                    "_number": 0,
                    "_offset": 0
                  }
                ]
              },
              "dt": {
                "children": [
                  {
                    "type": "Words",
                    "data": {
                      "value": ":: workaround numpyoc summary/ext summary bug in take2::Line.__init__"
                    }
                  }
                ]
              },
              "dd": {
                "children": [
                  {
                    "type": "Words",
                    "data": {
                      "value": "fig = plt.figure()"
                    }
                  }
                ]
              }
            }
          ]
        }
      },
      {
        "type": "DefList",
        "data": {
          "children": [
            {
              "lines": {
                "_lines": [
                  {
                    "_line": ":: workaround numpyoc summary/ext summary bug in take2::Line.__init__",
                    "_number": 0,
                    "_offset": 0
                  }
                ]
              },
              "wh": {
                "_lines": []
              },
              "ind": {
                "_lines": [
                  {
                    "_line": "    fig.add_subplot(231)",
                    "_number": 0,
                    "_offset": 0
                  },
                  {
                    "_line": "    ax1 = fig.add_subplot(2, 3, 1)  # equivalent but more general",
                    "_number": 1,
                    "_offset": 0
                  }
                ]
              },
              "dt": {
                "children": [
                  {
                    "type": "Words",
                    "data": {
                      "value": ":: workaround numpyoc summary/ext summary bug in take2::Line.__init__"
                    }
                  }
                ]
              },
              "dd": {
                "children": [
                  {
                    "type": "Words",
                    "data": {
                      "value": "fig.add_subplot(231) ax1 = fig.add_subplot(2, 3, 1)  # equivalent but more general"
                    }
                  }
                ]
              }
            }
          ]
        }
      },
      {
        "type": "DefList",
        "data": {
          "children": [
            {
              "lines": {
                "_lines": [
                  {
                    "_line": ":: workaround numpyoc summary/ext summary bug in take2::Line.__init__",
                    "_number": 0,
                    "_offset": 0
                  }
                ]
              },
              "wh": {
                "_lines": []
              },
              "ind": {
                "_lines": [
                  {
                    "_line": "    fig.add_subplot(232, frameon=False)  # subplot with no frame",
                    "_number": 0,
                    "_offset": 0
                  },
                  {
                    "_line": "    fig.add_subplot(233, projection='polar')  # polar subplot",
                    "_number": 1,
                    "_offset": 0
                  },
                  {
                    "_line": "    fig.add_subplot(234, sharex=ax1)  # subplot sharing x-axis with ax1",
                    "_number": 2,
                    "_offset": 0
                  },
                  {
                    "_line": "    fig.add_subplot(235, facecolor=\"red\")  # red subplot",
                    "_number": 3,
                    "_offset": 0
                  }
                ]
              },
              "dt": {
                "children": [
                  {
                    "type": "Words",
                    "data": {
                      "value": ":: workaround numpyoc summary/ext summary bug in take2::Line.__init__"
                    }
                  }
                ]
              },
              "dd": {
                "children": [
                  {
                    "type": "Words",
                    "data": {
                      "value": "fig.add_subplot(232, frameon=False)  # subplot with no frame fig.add_subplot(233, projection='polar')  # polar subplot fig.add_subplot(234, sharex=ax1)  # subplot sharing x-axis with ax1 fig.add_subplot(235, facecolor=\"red\")  # red subplot"
                    }
                  }
                ]
              }
            }
          ]
        }
      },
      {
        "type": "DefList",
        "data": {
          "children": [
            {
              "lines": {
                "_lines": [
                  {
                    "_line": ":: workaround numpyoc summary/ext summary bug in take2::Line.__init__",
                    "_number": 0,
                    "_offset": 0
                  }
                ]
              },
              "wh": {
                "_lines": []
              },
              "ind": {
                "_lines": [
                  {
                    "_line": "    ax1.remove()  # delete ax1 from the figure",
                    "_number": 0,
                    "_offset": 0
                  },
                  {
                    "_line": "    fig.add_subplot(ax1)  # add ax1 back to the figure",
                    "_number": 1,
                    "_offset": 0
                  }
                ]
              },
              "dt": {
                "children": [
                  {
                    "type": "Words",
                    "data": {
                      "value": ":: workaround numpyoc summary/ext summary bug in take2::Line.__init__"
                    }
                  }
                ]
              },
              "dd": {
                "children": [
                  {
                    "type": "Words",
                    "data": {
                      "value": "ax1.remove()  # delete ax1 from the figure fig.add_subplot(ax1)  # add ax1 back to the figure"
                    }
                  }
                ]
              }
            }
          ]
        }
      }
    ]
  },
  "see_also": [
    {
      "name": {
        "name": ".Figure.add_axes",
        "ref": null,
        "exists": null
      },
      "descriptions": [],
      "type": null
    },
    {
      "name": {
        "name": ".pyplot.subplot",
        "ref": null,
        "exists": null
      },
      "descriptions": [],
      "type": null
    },
    {
      "name": {
        "name": ".pyplot.axes",
        "ref": null,
        "exists": null
      },
      "descriptions": [],
      "type": null
    },
    {
      "name": {
        "name": ".Figure.subplots",
        "ref": null,
        "exists": null
      },
      "descriptions": [],
      "type": null
    },
    {
      "name": {
        "name": ".pyplot.subplots",
        "ref": null,
        "exists": null
      },
      "descriptions": [],
      "type": null
    }
  ],
  "references": null,
  "signature": "add_subplot(self, *args, **kwargs)"
}