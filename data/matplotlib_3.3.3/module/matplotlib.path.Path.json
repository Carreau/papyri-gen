{
  "_content": {
    "Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "A series of possibly disconnected, possibly closed, line and curve segments."
                }
              }
            ],
            "inner": []
          }
        }
      ],
      "title": null
    },
    "Extended Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "The underlying storage is made up of two parallel numpy arrays:"
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "- *vertices*: an Nx2 float array of vertices - *codes*: an N-length uint8 array of vertex types, or None"
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "These two arrays always have the same length in the first dimension.  For example, to represent a cubic curve, you must provide three vertices as well as three codes "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "CURVE3"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": "."
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "The code types are:"
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "- "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "STOP"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": "   :  1 vertex (ignored)"
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "    A marker for the end of the entire path (currently not required and     ignored)"
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "- "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "MOVETO"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " :  1 vertex"
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "    Pick up the pen and move to the given vertex."
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "- "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "LINETO"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " :  1 vertex"
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "    Draw a line from the current position to the given vertex."
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "- "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "CURVE3"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " :  1 control point, 1 endpoint"
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "    Draw a quadratic Bezier curve from the current position, with the given     control point, to the given end point."
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "- "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "CURVE4"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " :  2 control points, 1 endpoint"
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "    Draw a cubic Bezier curve from the current position, with the given     control points, to the given end point."
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "- "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "CLOSEPOLY"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " : 1 vertex (ignored)"
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "    Draw a line segment to the start point of the current polyline."
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "If *codes* is None, it is interpreted as a "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "MOVETO"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " followed by a series of "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "LINETO"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": "."
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Users of Path objects should not access the vertices and codes arrays directly.  Instead, they should use "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "iter",
                    "_",
                    "segments"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " or "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "cleaned"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " to get the vertex/code pairs.  This helps, in particular, to consistently handle the case of *codes* being None."
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Some behavior of Path objects can be controlled by rcParams. See the rcParams whose keys start with 'path.'."
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "BlockDirective",
          "data": {
            "lines": {
              "_lines": [
                {
                  "_line": ".. note::",
                  "_number": 43,
                  "_offset": 0
                }
              ]
            },
            "wh": {
              "_lines": [
                {
                  "_line": "",
                  "_number": 44,
                  "_offset": 0
                }
              ]
            },
            "ind": {
              "_lines": [
                {
                  "_line": "    The vertices and codes arrays should be treated as",
                  "_number": 45,
                  "_offset": 0
                },
                {
                  "_line": "    immutable -- there are a number of optimizations and assumptions",
                  "_number": 46,
                  "_offset": 0
                },
                {
                  "_line": "    made up front in the constructor that will not change when the",
                  "_number": 47,
                  "_offset": 0
                },
                {
                  "_line": "    data changes.",
                  "_number": 48,
                  "_offset": 0
                }
              ]
            },
            "directive_name": "note",
            "args0": [
              ""
            ],
            "inner": {
              "inline": [
                {
                  "type": "Words",
                  "data": {
                    "value": "The vertices and codes arrays should be treated as immutable -- there are a number of optimizations and assumptions made up front in the constructor that will not change when the data changes."
                  }
                }
              ],
              "inner": []
            }
          }
        }
      ],
      "title": null
    },
    "Parameters": {
      "children": [],
      "title": null
    },
    "Returns": {
      "children": [],
      "title": null
    },
    "Yields": {
      "children": [],
      "title": null
    },
    "Receives": {
      "children": [],
      "title": null
    },
    "Raises": {
      "children": [],
      "title": null
    },
    "Warns": {
      "children": [],
      "title": null
    },
    "Other Parameters": {
      "children": [],
      "title": null
    },
    "Attributes": {
      "children": [],
      "title": null
    },
    "Methods": {
      "children": [],
      "title": null
    },
    "Notes": {
      "children": [],
      "title": null
    },
    "Warnings": {
      "children": [],
      "title": null
    }
  },
  "refs": [],
  "ordered_sections": [
    "Summary",
    "Extended Summary"
  ],
  "item_file": "/Users/bussonniermatthias/miniconda3/lib/python3.8/site-packages/matplotlib/path.py",
  "item_line": 23,
  "item_type": "<class 'type'>",
  "aliases": [
    "matplotlib.artist.Path"
  ],
  "example_section_data": {
    "children": [],
    "title": null
  },
  "see_also": [],
  "signature": "Path(vertices, codes=None, _interpolation_steps=1, closed=False, readonly=False)",
  "references": null,
  "arbitrary": []
}