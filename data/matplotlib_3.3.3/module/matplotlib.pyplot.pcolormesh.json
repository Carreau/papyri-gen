{
  "_content": {
    "Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Create a pseudocolor plot with a non-regular rectangular grid."
                }
              }
            ],
            "inner": []
          }
        }
      ],
      "title": null
    },
    "Extended Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Call signature::"
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "BlockVerbatim",
          "data": {
            "lines": {
              "_lines": [
                {
                  "_line": "    pcolormesh([X, Y,] C, **kwargs)",
                  "_number": 2,
                  "_offset": 4
                },
                {
                  "_line": "",
                  "_number": 3,
                  "_offset": 4
                }
              ]
            }
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "*X* and *Y* can be used to specify the corners of the quadrilaterals."
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "BlockDirective",
          "data": {
            "lines": {
              "_lines": [
                {
                  "_line": ".. hint::",
                  "_number": 6,
                  "_offset": 0
                }
              ]
            },
            "wh": {
              "_lines": [
                {
                  "_line": "",
                  "_number": 7,
                  "_offset": 0
                }
              ]
            },
            "ind": {
              "_lines": [
                {
                  "_line": "   `~.Axes.pcolormesh` is similar to `~.Axes.pcolor`. It is much faster",
                  "_number": 8,
                  "_offset": 0
                },
                {
                  "_line": "   and preferred in most cases. For a detailed discussion on the",
                  "_number": 9,
                  "_offset": 0
                },
                {
                  "_line": "   differences see :ref:`Differences between pcolor() and pcolormesh()",
                  "_number": 10,
                  "_offset": 0
                },
                {
                  "_line": "   <differences-pcolor-pcolormesh>`.",
                  "_number": 11,
                  "_offset": 0
                }
              ]
            },
            "directive_name": "hint",
            "args0": [
              ""
            ],
            "inner": {
              "inline": [
                {
                  "type": "Directive",
                  "data": {
                    "value": [
                      "~.Axes.pcolormesh"
                    ],
                    "domain": null,
                    "role": null
                  }
                },
                {
                  "type": "Words",
                  "data": {
                    "value": " is similar to "
                  }
                },
                {
                  "type": "Directive",
                  "data": {
                    "value": [
                      "~.Axes.pcolor"
                    ],
                    "domain": null,
                    "role": null
                  }
                },
                {
                  "type": "Words",
                  "data": {
                    "value": ". It is much faster and preferred in most cases. For a detailed discussion on the differences see "
                  }
                },
                {
                  "type": "Directive",
                  "data": {
                    "value": [
                      "Differences",
                      " ",
                      "between",
                      " ",
                      "pcolor()",
                      " ",
                      "and",
                      " ",
                      "pcolormesh()",
                      " ",
                      "<differences-pcolor-pcolormesh>"
                    ],
                    "domain": null,
                    "role": "ref"
                  }
                },
                {
                  "type": "Words",
                  "data": {
                    "value": "."
                  }
                }
              ],
              "inner": []
            }
          }
        }
      ],
      "title": null
    },
    "Parameters": {
      "children": [
        {
          "type": "Param",
          "data": {
            "param": "C",
            "type_": "array-like",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "A scalar 2-D array. The values will be color-mapped."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "X, Y",
            "type_": "array-like, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "The coordinates of the corners of quadrilaterals of a pcolormesh::"
                      }
                    }
                  ],
                  "inner": []
                }
              },
              {
                "type": "BlockVerbatim",
                "data": {
                  "lines": {
                    "_lines": [
                      {
                        "_line": "    (X[i+1, j], Y[i+1, j])       (X[i+1, j+1], Y[i+1, j+1])",
                        "_number": 2,
                        "_offset": 4
                      },
                      {
                        "_line": "                          +-----+",
                        "_number": 3,
                        "_offset": 4
                      },
                      {
                        "_line": "                          |     |",
                        "_number": 4,
                        "_offset": 4
                      },
                      {
                        "_line": "                          +-----+",
                        "_number": 5,
                        "_offset": 4
                      },
                      {
                        "_line": "        (X[i, j], Y[i, j])       (X[i, j+1], Y[i, j+1])",
                        "_number": 6,
                        "_offset": 4
                      },
                      {
                        "_line": "",
                        "_number": 7,
                        "_offset": 4
                      }
                    ]
                  }
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Note that the column index corresponds to the x-coordinate, and the row index corresponds to y. For details, see the "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "Notes",
                          " ",
                          "<axes-pcolormesh-grid-orientation>"
                        ],
                        "domain": null,
                        "role": "ref"
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " section below."
                      }
                    }
                  ],
                  "inner": []
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "If "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "shading='flat'"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " the dimensions of *X* and *Y* should be one greater than those of *C*, and the quadrilateral is colored due to the value at "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "C[i,",
                          " ",
                          "j]"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ".  If *X*, *Y* and *C* have equal dimensions, a warning will be raised and the last row and column of *C* will be ignored."
                      }
                    }
                  ],
                  "inner": []
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "If "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "shading='nearest'"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " or "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "'gouraud'"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ", the dimensions of *X* and *Y* should be the same as those of *C* (if not, a ValueError will be raised).  For "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "'nearest'"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " the color "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "C[i,",
                          " ",
                          "j]"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " is centered on "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "(X[i,",
                          " ",
                          "j],",
                          " ",
                          "Y[i,",
                          " ",
                          "j])"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ".  For "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "'gouraud'"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ", a smooth interpolation is caried out between the quadrilateral corners."
                      }
                    }
                  ],
                  "inner": []
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "If *X* and/or *Y* are 1-D arrays or column vectors they will be expanded as needed into the appropriate 2-D arrays, making a rectangular grid."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "cmap",
            "type_": "str or `~matplotlib.colors.Colormap`, default: :rc:`image.cmap`",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "A Colormap instance or registered colormap name. The colormap maps the *C* values to colors."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "norm",
            "type_": "`~matplotlib.colors.Normalize`, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "The Normalize instance scales the data values to the canonical colormap range [0, 1] for mapping to colors. By default, the data range is mapped to the colorbar range using linear scaling."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "vmin, vmax",
            "type_": "float, default: None",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "The colorbar range. If *None*, suitable min/max values are automatically chosen by the "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "~.Normalize"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " instance (defaults to the respective min/max values of *C* in case of the default linear scaling). It is deprecated to use *vmin*/*vmax* when *norm* is given."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "edgecolors",
            "type_": "{'none', None, 'face', color, color sequence}, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "The color of the edges. Defaults to 'none'. Possible values:"
                      }
                    }
                  ],
                  "inner": []
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "- 'none' or '': No edge. - *None*"
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "patch.edgecolor"
                        ],
                        "domain": " ",
                        "role": "rc"
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " will be used. Note that currently"
                      }
                    }
                  ],
                  "inner": []
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "  "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "patch.force",
                          "_",
                          "edgecolor"
                        ],
                        "domain": null,
                        "role": "rc"
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " has to be True for this to work."
                      }
                    }
                  ],
                  "inner": []
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "- 'face': Use the adjacent face color. - A color or sequence of colors will set the edge color."
                      }
                    }
                  ],
                  "inner": []
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "The singular form *edgecolor* works as an alias."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "alpha",
            "type_": "float, default: None",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "The alpha blending value, between 0 (transparent) and 1 (opaque)."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "shading",
            "type_": "{'flat', 'nearest', 'gouraud', 'auto'}, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "The fill style for the quadrilateral; defaults to 'flat' or "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "pcolor.shading"
                        ],
                        "domain": null,
                        "role": "rc"
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ". Possible values:"
                      }
                    }
                  ],
                  "inner": []
                }
              },
              {
                "type": "DefList",
                "data": {
                  "children": [
                    {
                      "lines": {
                        "_lines": [
                          {
                            "_line": "- 'flat': A solid color is used for each quad. The color of the",
                            "_number": 3,
                            "_offset": 0
                          }
                        ]
                      },
                      "wh": {
                        "_lines": []
                      },
                      "ind": {
                        "_lines": [
                          {
                            "_line": "  quad (i, j), (i+1, j), (i, j+1), (i+1, j+1) is given by",
                            "_number": 4,
                            "_offset": 2
                          },
                          {
                            "_line": "  ``C[i, j]``. The dimensions of *X* and *Y* should be",
                            "_number": 5,
                            "_offset": 2
                          },
                          {
                            "_line": "  one greater than those of *C*; if they are the same as *C*,",
                            "_number": 6,
                            "_offset": 2
                          },
                          {
                            "_line": "  then a deprecation warning is raised, and the last row",
                            "_number": 7,
                            "_offset": 2
                          },
                          {
                            "_line": "  and column of *C* are dropped.",
                            "_number": 8,
                            "_offset": 2
                          }
                        ]
                      },
                      "dt": {
                        "inline": [
                          {
                            "type": "Words",
                            "data": {
                              "value": "- 'flat': A solid color is used for each quad. The color of the"
                            }
                          }
                        ],
                        "inner": []
                      },
                      "dd": [
                        {
                          "type": "Paragraph",
                          "data": {
                            "inline": [
                              {
                                "type": "Words",
                                "data": {
                                  "value": "quad (i, j), (i+1, j), (i, j+1), (i+1, j+1) is given by "
                                }
                              },
                              {
                                "type": "Verbatim",
                                "data": {
                                  "value": [
                                    "C[i,",
                                    " ",
                                    "j]"
                                  ]
                                }
                              },
                              {
                                "type": "Words",
                                "data": {
                                  "value": ". The dimensions of *X* and *Y* should be one greater than those of *C*; if they are the same as *C*, then a deprecation warning is raised, and the last row and column of *C* are dropped."
                                }
                              }
                            ],
                            "inner": []
                          }
                        }
                      ]
                    },
                    {
                      "lines": {
                        "_lines": [
                          {
                            "_line": "- 'nearest': Each grid point will have a color centered on it,",
                            "_number": 9,
                            "_offset": 0
                          }
                        ]
                      },
                      "wh": {
                        "_lines": []
                      },
                      "ind": {
                        "_lines": [
                          {
                            "_line": "  extending halfway between the adjacent grid centers.  The",
                            "_number": 10,
                            "_offset": 2
                          },
                          {
                            "_line": "  dimensions of *X* and *Y* must be the same as *C*.",
                            "_number": 11,
                            "_offset": 2
                          }
                        ]
                      },
                      "dt": {
                        "inline": [
                          {
                            "type": "Words",
                            "data": {
                              "value": "- 'nearest': Each grid point will have a color centered on it,"
                            }
                          }
                        ],
                        "inner": []
                      },
                      "dd": [
                        {
                          "type": "Paragraph",
                          "data": {
                            "inline": [
                              {
                                "type": "Words",
                                "data": {
                                  "value": "extending halfway between the adjacent grid centers.  The dimensions of *X* and *Y* must be the same as *C*."
                                }
                              }
                            ],
                            "inner": []
                          }
                        }
                      ]
                    },
                    {
                      "lines": {
                        "_lines": [
                          {
                            "_line": "- 'gouraud': Each quad will be Gouraud shaded: The color of the",
                            "_number": 12,
                            "_offset": 0
                          }
                        ]
                      },
                      "wh": {
                        "_lines": []
                      },
                      "ind": {
                        "_lines": [
                          {
                            "_line": "  corners (i', j') are given by ``C[i', j']``. The color values of",
                            "_number": 13,
                            "_offset": 2
                          },
                          {
                            "_line": "  the area in between is interpolated from the corner values.",
                            "_number": 14,
                            "_offset": 2
                          },
                          {
                            "_line": "  The dimensions of *X* and *Y* must be the same as *C*. When",
                            "_number": 15,
                            "_offset": 2
                          },
                          {
                            "_line": "  Gouraud shading is used, *edgecolors* is ignored.",
                            "_number": 16,
                            "_offset": 2
                          }
                        ]
                      },
                      "dt": {
                        "inline": [
                          {
                            "type": "Words",
                            "data": {
                              "value": "- 'gouraud': Each quad will be Gouraud shaded: The color of the"
                            }
                          }
                        ],
                        "inner": []
                      },
                      "dd": [
                        {
                          "type": "Paragraph",
                          "data": {
                            "inline": [
                              {
                                "type": "Words",
                                "data": {
                                  "value": "corners (i', j') are given by "
                                }
                              },
                              {
                                "type": "Verbatim",
                                "data": {
                                  "value": [
                                    "C[i',",
                                    " ",
                                    "j']"
                                  ]
                                }
                              },
                              {
                                "type": "Words",
                                "data": {
                                  "value": ". The color values of the area in between is interpolated from the corner values. The dimensions of *X* and *Y* must be the same as *C*. When Gouraud shading is used, *edgecolors* is ignored."
                                }
                              }
                            ],
                            "inner": []
                          }
                        }
                      ]
                    },
                    {
                      "lines": {
                        "_lines": [
                          {
                            "_line": "- 'auto': Choose 'flat' if dimensions of *X* and *Y* are one",
                            "_number": 17,
                            "_offset": 0
                          }
                        ]
                      },
                      "wh": {
                        "_lines": []
                      },
                      "ind": {
                        "_lines": [
                          {
                            "_line": "  larger than *C*.  Choose 'nearest' if dimensions are the same.",
                            "_number": 18,
                            "_offset": 2
                          },
                          {
                            "_line": "",
                            "_number": 19,
                            "_offset": 2
                          }
                        ]
                      },
                      "dt": {
                        "inline": [
                          {
                            "type": "Words",
                            "data": {
                              "value": "- 'auto': Choose 'flat' if dimensions of *X* and *Y* are one"
                            }
                          }
                        ],
                        "inner": []
                      },
                      "dd": [
                        {
                          "type": "Paragraph",
                          "data": {
                            "inline": [
                              {
                                "type": "Words",
                                "data": {
                                  "value": "larger than *C*.  Choose 'nearest' if dimensions are the same. "
                                }
                              }
                            ],
                            "inner": []
                          }
                        }
                      ]
                    }
                  ]
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "See "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "/gallery/images",
                          "_",
                          "contours",
                          "_",
                          "and",
                          "_",
                          "fields/pcolormesh",
                          "_",
                          "grids"
                        ],
                        "domain": null,
                        "role": "doc"
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " for more description."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "snap",
            "type_": "bool, default: False",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Whether to snap the mesh to pixel boundaries."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        }
      ],
      "title": null
    },
    "Returns": {
      "children": [
        {
          "type": "Param",
          "data": {
            "param": "",
            "type_": "`matplotlib.collections.QuadMesh`",
            "desc": []
          }
        }
      ],
      "title": null
    },
    "Yields": {
      "children": [],
      "title": null
    },
    "Receives": {
      "children": [],
      "title": null
    },
    "Raises": {
      "children": [],
      "title": null
    },
    "Warns": {
      "children": [],
      "title": null
    },
    "Other Parameters": {
      "children": [
        {
          "type": "Param",
          "data": {
            "param": "**kwargs",
            "type_": "",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Additionally, the following arguments are allowed. They are passed along to the "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "~matplotlib.collections.QuadMesh"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " constructor:"
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "Properties:",
            "type_": "",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "agg_filter: a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array alpha: float or None animated: bool antialiased or aa or antialiaseds: bool or list of bools array: ndarray capstyle: {'butt', 'round', 'projecting'} clim: (vmin: float, vmax: float) clip_box: "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          ".Bbox"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " clip_on: bool clip_path: Patch or (Path, Transform) or None cmap: "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          ".Colormap"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " or str or None color: color or list of rgba tuples contains: unknown edgecolor or ec or edgecolors: color or list of colors or 'face' facecolor or facecolors or fc: color or list of colors figure: "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          ".Figure"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " gid: str hatch: {'/', '\\\\', '|', '-', '+', 'x', 'o', 'O', '.', '*'} in_layout: bool joinstyle: {'miter', 'round', 'bevel'} label: object linestyle or dashes or linestyles or ls: str or tuple or list thereof linewidth or linewidths or lw: float or list of floats norm: "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          ".Normalize"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " or None offset_position: unknown offsets: array-like (N, 2) or (2,) path_effects: "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          ".AbstractPathEffect"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " picker: None or bool or callable pickradius: unknown rasterized: bool or None sketch_params: (scale: float, length: float, randomness: float) snap: bool or None transform: "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          ".Transform"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " url: str urls: list of str or None visible: bool zorder: float"
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        }
      ],
      "title": null
    },
    "Attributes": {
      "children": [],
      "title": null
    },
    "Methods": {
      "children": [],
      "title": null
    },
    "Notes": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "**Masked arrays**"
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "*C* may be a masked array. If "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "C[i,",
                    " ",
                    "j]"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " is masked, the corresponding quadrilateral will be transparent. Masking of *X* and *Y* is not supported. Use "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "~.Axes.pcolor"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " if you need this functionality."
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": ".. _axes-pcolormesh-grid-orientation:"
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "**Grid orientation**"
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "The grid orientation follows the standard matrix convention: An array *C* with shape (nrows, ncolumns) is plotted with the column number as *X* and the row number as *Y*."
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": ".. _differences-pcolor-pcolormesh:"
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "**Differences between pcolor() and pcolormesh()**"
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Both methods are used to create a pseudocolor plot of a 2-D array using quadrilaterals."
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "The main difference lies in the created object and internal data handling: While "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "~.Axes.pcolor"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " returns a "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    ".PolyCollection"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": ", "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "~.Axes.pcolormesh"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " returns a "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    ".QuadMesh"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": ". The latter is more specialized for the given purpose and thus is faster. It should almost always be preferred."
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "There is also a slight difference in the handling of masked arrays. Both "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "~.Axes.pcolor"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " and "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "~.Axes.pcolormesh"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " support masked arrays for *C*. However, only "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "~.Axes.pcolor"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " supports masked arrays for *X* and *Y*. The reason lies in the internal handling of the masked values. "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "~.Axes.pcolor"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " leaves out the respective polygons from the PolyCollection. "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "~.Axes.pcolormesh"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " sets the facecolor of the masked elements to transparent. You can see the difference when using edgecolors. While all edges are drawn irrespective of masking in a QuadMesh, the edge between two adjacent masked quadrilaterals in "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "~.Axes.pcolor"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " is not drawn as the corresponding polygons do not exist in the PolyCollection."
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Another difference is the support of Gouraud shading in "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "~.Axes.pcolormesh"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": ", which is not available with "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "~.Axes.pcolor"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": "."
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "BlockDirective",
          "data": {
            "lines": {
              "_lines": [
                {
                  "_line": ".. note::",
                  "_number": 42,
                  "_offset": 0
                }
              ]
            },
            "wh": {
              "_lines": []
            },
            "ind": {
              "_lines": [
                {
                  "_line": "    In addition to the above described arguments, this function can take",
                  "_number": 43,
                  "_offset": 0
                },
                {
                  "_line": "    a *data* keyword argument. If such a *data* argument is given,",
                  "_number": 44,
                  "_offset": 0
                },
                {
                  "_line": "    every other argument can also be string ``s``, which is",
                  "_number": 45,
                  "_offset": 0
                },
                {
                  "_line": "    interpreted as ``data[s]`` (unless this raises an exception).",
                  "_number": 46,
                  "_offset": 0
                },
                {
                  "_line": "",
                  "_number": 47,
                  "_offset": 0
                },
                {
                  "_line": "    Objects passed as **data** must support item access (``data[s]``) and",
                  "_number": 48,
                  "_offset": 0
                },
                {
                  "_line": "    membership test (``s in data``).",
                  "_number": 49,
                  "_offset": 0
                }
              ]
            },
            "directive_name": "note",
            "args0": [
              ""
            ],
            "inner": {
              "inline": [
                {
                  "type": "Words",
                  "data": {
                    "value": "In addition to the above described arguments, this function can take a *data* keyword argument. If such a *data* argument is given, every other argument can also be string "
                  }
                },
                {
                  "type": "Verbatim",
                  "data": {
                    "value": [
                      "s"
                    ]
                  }
                },
                {
                  "type": "Words",
                  "data": {
                    "value": ", which is interpreted as "
                  }
                },
                {
                  "type": "Verbatim",
                  "data": {
                    "value": [
                      "data[s]"
                    ]
                  }
                },
                {
                  "type": "Words",
                  "data": {
                    "value": " (unless this raises an exception).  Objects passed as **data** must support item access ("
                  }
                },
                {
                  "type": "Verbatim",
                  "data": {
                    "value": [
                      "data[s]"
                    ]
                  }
                },
                {
                  "type": "Words",
                  "data": {
                    "value": ") and membership test ("
                  }
                },
                {
                  "type": "Verbatim",
                  "data": {
                    "value": [
                      "s",
                      " ",
                      "in",
                      " ",
                      "data"
                    ]
                  }
                },
                {
                  "type": "Words",
                  "data": {
                    "value": ")."
                  }
                }
              ],
              "inner": []
            }
          }
        }
      ],
      "title": null
    },
    "Warnings": {
      "children": [],
      "title": null
    }
  },
  "refs": [
    "imshow",
    "pcolor"
  ],
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns",
    "Other Parameters",
    "See Also",
    "Notes"
  ],
  "item_file": "/Users/bussonniermatthias/miniconda3/lib/python3.8/site-packages/matplotlib/pyplot.py",
  "item_line": 2796,
  "item_type": "<class 'function'>",
  "aliases": [
    "matplotlib.pyplot.pcolormesh"
  ],
  "example_section_data": {
    "children": [],
    "title": null
  },
  "see_also": [
    {
      "name": {
        "name": "pcolor",
        "ref": null,
        "exists": null
      },
      "descriptions": [
        {
          "inline": [
            {
              "type": "Words",
              "data": {
                "value": "An alternative implementation with slightly different features. For a detailed discussion on the differences see "
              }
            },
            {
              "type": "Directive",
              "data": {
                "value": [
                  "Differences",
                  " ",
                  "between",
                  " ",
                  "pcolor()",
                  " ",
                  "and",
                  " ",
                  "pcolormesh()",
                  " ",
                  "<differences-pcolor-pcolormesh>"
                ],
                "domain": null,
                "role": "ref"
              }
            },
            {
              "type": "Words",
              "data": {
                "value": "."
              }
            }
          ],
          "inner": []
        }
      ],
      "type": null
    },
    {
      "name": {
        "name": "imshow",
        "ref": null,
        "exists": null
      },
      "descriptions": [
        {
          "inline": [
            {
              "type": "Words",
              "data": {
                "value": "If *X* and *Y* are each equidistant, "
              }
            },
            {
              "type": "Directive",
              "data": {
                "value": [
                  "~.Axes.imshow"
                ],
                "domain": null,
                "role": null
              }
            },
            {
              "type": "Words",
              "data": {
                "value": " can be a faster alternative."
              }
            }
          ],
          "inner": []
        }
      ],
      "type": null
    }
  ],
  "signature": "pcolormesh(*args, alpha=None, norm=None, cmap=None, vmin=None, vmax=None, shading=None, antialiased=False, data=None, **kwargs)",
  "references": null,
  "arbitrary": []
}