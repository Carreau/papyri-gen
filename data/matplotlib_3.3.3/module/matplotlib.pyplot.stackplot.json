{
  "_content": {
    "Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Draw a stacked area plot."
                }
              }
            ],
            "inner": []
          }
        }
      ],
      "title": null
    },
    "Extended Summary": {
      "children": [],
      "title": null
    },
    "Parameters": {
      "children": [
        {
          "type": "Param",
          "data": {
            "param": "x",
            "type_": "1d array of dimension N",
            "desc": []
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "y",
            "type_": "2d array (dimension MxN), or sequence of 1d arrays (each dimension 1xN)",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "The data is assumed to be unstacked. Each of the following calls is legal::"
                      }
                    }
                  ],
                  "inner": []
                }
              },
              {
                "type": "BlockVerbatim",
                "data": {
                  "lines": {
                    "_lines": [
                      {
                        "_line": "    stackplot(x, y)               # where y is MxN",
                        "_number": 3,
                        "_offset": 4
                      },
                      {
                        "_line": "    stackplot(x, y1, y2, y3, y4)  # where y1, y2, y3, y4, are all 1xNm",
                        "_number": 4,
                        "_offset": 4
                      }
                    ]
                  }
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "baseline",
            "type_": "{'zero', 'sym', 'wiggle', 'weighted_wiggle'}",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Method used to calculate the baseline:"
                      }
                    }
                  ],
                  "inner": []
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "- "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "'zero'"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ": Constant zero baseline, i.e. a simple stacked plot. - "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "'sym'"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ":  Symmetric around zero and is sometimes called"
                      }
                    }
                  ],
                  "inner": []
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "  'ThemeRiver'."
                      }
                    }
                  ],
                  "inner": []
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "- "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "'wiggle'"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ": Minimizes the sum of the squared slopes. - "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "'weighted",
                          "_",
                          "wiggle'"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ": Does the same but weights to account for"
                      }
                    }
                  ],
                  "inner": []
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "  size of each layer. It is also called 'Streamgraph'-layout. More   details can be found at http://leebyron.com/streamgraph/."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "labels",
            "type_": "Length N sequence of strings",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Labels to assign to each data series."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "colors",
            "type_": "Length N sequence of colors",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "A list or tuple of colors. These will be cycled through and used to colour the stacked areas."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "**kwargs",
            "type_": "",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "All other keyword arguments are passed to "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          ".Axes.fill",
                          "_",
                          "between"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": "."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        }
      ],
      "title": null
    },
    "Returns": {
      "children": [
        {
          "type": "Param",
          "data": {
            "param": "",
            "type_": "list of `.PolyCollection`",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "A list of "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          ".PolyCollection"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " instances, one for each element in the stacked area plot."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        }
      ],
      "title": null
    },
    "Yields": {
      "children": [],
      "title": null
    },
    "Receives": {
      "children": [],
      "title": null
    },
    "Raises": {
      "children": [],
      "title": null
    },
    "Warns": {
      "children": [],
      "title": null
    },
    "Other Parameters": {
      "children": [],
      "title": null
    },
    "Attributes": {
      "children": [],
      "title": null
    },
    "Methods": {
      "children": [],
      "title": null
    },
    "Notes": {
      "children": [
        {
          "type": "BlockDirective",
          "data": {
            "lines": {
              "_lines": [
                {
                  "_line": ".. note::",
                  "_number": 0,
                  "_offset": 0
                }
              ]
            },
            "wh": {
              "_lines": []
            },
            "ind": {
              "_lines": [
                {
                  "_line": "    In addition to the above described arguments, this function can take",
                  "_number": 1,
                  "_offset": 0
                },
                {
                  "_line": "    a *data* keyword argument. If such a *data* argument is given,",
                  "_number": 2,
                  "_offset": 0
                },
                {
                  "_line": "    every other argument can also be string ``s``, which is",
                  "_number": 3,
                  "_offset": 0
                },
                {
                  "_line": "    interpreted as ``data[s]`` (unless this raises an exception).",
                  "_number": 4,
                  "_offset": 0
                },
                {
                  "_line": "",
                  "_number": 5,
                  "_offset": 0
                },
                {
                  "_line": "    Objects passed as **data** must support item access (``data[s]``) and",
                  "_number": 6,
                  "_offset": 0
                },
                {
                  "_line": "    membership test (``s in data``).",
                  "_number": 7,
                  "_offset": 0
                }
              ]
            },
            "directive_name": "note",
            "args0": [
              ""
            ],
            "inner": {
              "inline": [
                {
                  "type": "Words",
                  "data": {
                    "value": "In addition to the above described arguments, this function can take a *data* keyword argument. If such a *data* argument is given, every other argument can also be string "
                  }
                },
                {
                  "type": "Verbatim",
                  "data": {
                    "value": [
                      "s"
                    ]
                  }
                },
                {
                  "type": "Words",
                  "data": {
                    "value": ", which is interpreted as "
                  }
                },
                {
                  "type": "Verbatim",
                  "data": {
                    "value": [
                      "data[s]"
                    ]
                  }
                },
                {
                  "type": "Words",
                  "data": {
                    "value": " (unless this raises an exception).  Objects passed as **data** must support item access ("
                  }
                },
                {
                  "type": "Verbatim",
                  "data": {
                    "value": [
                      "data[s]"
                    ]
                  }
                },
                {
                  "type": "Words",
                  "data": {
                    "value": ") and membership test ("
                  }
                },
                {
                  "type": "Verbatim",
                  "data": {
                    "value": [
                      "s",
                      " ",
                      "in",
                      " ",
                      "data"
                    ]
                  }
                },
                {
                  "type": "Words",
                  "data": {
                    "value": ")."
                  }
                }
              ],
              "inner": []
            }
          }
        }
      ],
      "title": null
    },
    "Warnings": {
      "children": [],
      "title": null
    }
  },
  "refs": [],
  "ordered_sections": [
    "Summary",
    "Parameters",
    "Returns",
    "Notes"
  ],
  "item_file": "/Users/bussonniermatthias/miniconda3/lib/python3.8/site-packages/matplotlib/pyplot.py",
  "item_line": 2942,
  "item_type": "<class 'function'>",
  "aliases": [
    "matplotlib.pyplot.stackplot"
  ],
  "example_section_data": {
    "children": [],
    "title": null
  },
  "see_also": [],
  "signature": "stackplot(x, *args, labels=(), colors=None, baseline='zero', data=None, **kwargs)",
  "references": null,
  "arbitrary": []
}