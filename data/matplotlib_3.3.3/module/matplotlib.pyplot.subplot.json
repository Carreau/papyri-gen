{
  "_content": {
    "Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Add a subplot to the current figure."
                }
              }
            ],
            "inner": []
          }
        }
      ],
      "title": null
    },
    "Extended Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Wrapper of "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    ".Figure.add",
                    "_",
                    "subplot"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " with a difference in behavior explained in the notes section."
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Call signatures::"
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "BlockVerbatim",
          "data": {
            "lines": {
              "_lines": [
                {
                  "_line": "   subplot(nrows, ncols, index, **kwargs)",
                  "_number": 5,
                  "_offset": 3
                },
                {
                  "_line": "   subplot(pos, **kwargs)",
                  "_number": 6,
                  "_offset": 3
                },
                {
                  "_line": "   subplot(**kwargs)",
                  "_number": 7,
                  "_offset": 3
                },
                {
                  "_line": "   subplot(ax)",
                  "_number": 8,
                  "_offset": 3
                }
              ]
            }
          }
        }
      ],
      "title": null
    },
    "Parameters": {
      "children": [
        {
          "type": "Param",
          "data": {
            "param": "*args",
            "type_": "int, (int, int, *index*), or `.SubplotSpec`, default: (1, 1, 1)",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "The position of the subplot described by one of"
                      }
                    }
                  ],
                  "inner": []
                }
              },
              {
                "type": "DefList",
                "data": {
                  "children": [
                    {
                      "lines": {
                        "_lines": [
                          {
                            "_line": "- Three integers (*nrows*, *ncols*, *index*). The subplot will take the",
                            "_number": 2,
                            "_offset": 0
                          }
                        ]
                      },
                      "wh": {
                        "_lines": []
                      },
                      "ind": {
                        "_lines": [
                          {
                            "_line": "  *index* position on a grid with *nrows* rows and *ncols* columns.",
                            "_number": 3,
                            "_offset": 2
                          },
                          {
                            "_line": "  *index* starts at 1 in the upper left corner and increases to the",
                            "_number": 4,
                            "_offset": 2
                          },
                          {
                            "_line": "  right. *index* can also be a two-tuple specifying the (*first*,",
                            "_number": 5,
                            "_offset": 2
                          },
                          {
                            "_line": "  *last*) indices (1-based, and including *last*) of the subplot, e.g.,",
                            "_number": 6,
                            "_offset": 2
                          },
                          {
                            "_line": "  ``fig.add_subplot(3, 1, (1, 2))`` makes a subplot that spans the",
                            "_number": 7,
                            "_offset": 2
                          },
                          {
                            "_line": "  upper 2/3 of the figure.",
                            "_number": 8,
                            "_offset": 2
                          }
                        ]
                      },
                      "dt": {
                        "inline": [
                          {
                            "type": "Words",
                            "data": {
                              "value": "- Three integers (*nrows*, *ncols*, *index*). The subplot will take the"
                            }
                          }
                        ],
                        "inner": []
                      },
                      "dd": [
                        {
                          "type": "Paragraph",
                          "data": {
                            "inline": [
                              {
                                "type": "Words",
                                "data": {
                                  "value": "*index* position on a grid with *nrows* rows and *ncols* columns. *index* starts at 1 in the upper left corner and increases to the right. *index* can also be a two-tuple specifying the (*first*, *last*) indices (1-based, and including *last*) of the subplot, e.g., "
                                }
                              },
                              {
                                "type": "Verbatim",
                                "data": {
                                  "value": [
                                    "fig.add",
                                    "_",
                                    "subplot(3,",
                                    " ",
                                    "1,",
                                    " ",
                                    "(1,",
                                    " ",
                                    "2))"
                                  ]
                                }
                              },
                              {
                                "type": "Words",
                                "data": {
                                  "value": " makes a subplot that spans the upper 2/3 of the figure."
                                }
                              }
                            ],
                            "inner": []
                          }
                        }
                      ]
                    },
                    {
                      "lines": {
                        "_lines": [
                          {
                            "_line": "- A 3-digit integer. The digits are interpreted as if given separately",
                            "_number": 9,
                            "_offset": 0
                          }
                        ]
                      },
                      "wh": {
                        "_lines": []
                      },
                      "ind": {
                        "_lines": [
                          {
                            "_line": "  as three single-digit integers, i.e. ``fig.add_subplot(235)`` is the",
                            "_number": 10,
                            "_offset": 2
                          },
                          {
                            "_line": "  same as ``fig.add_subplot(2, 3, 5)``. Note that this can only be used",
                            "_number": 11,
                            "_offset": 2
                          },
                          {
                            "_line": "  if there are no more than 9 subplots.",
                            "_number": 12,
                            "_offset": 2
                          }
                        ]
                      },
                      "dt": {
                        "inline": [
                          {
                            "type": "Words",
                            "data": {
                              "value": "- A 3-digit integer. The digits are interpreted as if given separately"
                            }
                          }
                        ],
                        "inner": []
                      },
                      "dd": [
                        {
                          "type": "Paragraph",
                          "data": {
                            "inline": [
                              {
                                "type": "Words",
                                "data": {
                                  "value": "as three single-digit integers, i.e. "
                                }
                              },
                              {
                                "type": "Verbatim",
                                "data": {
                                  "value": [
                                    "fig.add",
                                    "_",
                                    "subplot(235)"
                                  ]
                                }
                              },
                              {
                                "type": "Words",
                                "data": {
                                  "value": " is the same as "
                                }
                              },
                              {
                                "type": "Verbatim",
                                "data": {
                                  "value": [
                                    "fig.add",
                                    "_",
                                    "subplot(2,",
                                    " ",
                                    "3,",
                                    " ",
                                    "5)"
                                  ]
                                }
                              },
                              {
                                "type": "Words",
                                "data": {
                                  "value": ". Note that this can only be used if there are no more than 9 subplots."
                                }
                              }
                            ],
                            "inner": []
                          }
                        }
                      ]
                    }
                  ]
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "- A "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          ".SubplotSpec"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": "."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "projection",
            "type_": "{None, 'aitoff', 'hammer', 'lambert', 'mollweide', 'polar', 'rectilinear', str}, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "The projection type of the subplot ("
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "~.axes.Axes"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": "). *str* is the name of a custom projection, see "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "~matplotlib.projections"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ". The default None results in a 'rectilinear' projection."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "polar",
            "type_": "bool, default: False",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "If True, equivalent to projection='polar'."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "sharex, sharey",
            "type_": "`~.axes.Axes`, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Share the x or y "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "~matplotlib.axis"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " with sharex and/or sharey. The axis will have the same limits, ticks, and scale as the axis of the shared axes."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "label",
            "type_": "str",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "A label for the returned axes."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        }
      ],
      "title": null
    },
    "Returns": {
      "children": [
        {
          "type": "Param",
          "data": {
            "param": "",
            "type_": "`.axes.SubplotBase`, or another subclass of `~.axes.Axes`",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "The axes of the subplot. The returned axes base class depends on the projection used. It is "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "~.axes.Axes"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " if rectilinear projection is used and "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          ".projections.polar.PolarAxes"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " if polar projection is used. The returned axes is then a subplot subclass of the base class."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        }
      ],
      "title": null
    },
    "Yields": {
      "children": [],
      "title": null
    },
    "Receives": {
      "children": [],
      "title": null
    },
    "Raises": {
      "children": [],
      "title": null
    },
    "Warns": {
      "children": [],
      "title": null
    },
    "Other Parameters": {
      "children": [
        {
          "type": "Param",
          "data": {
            "param": "**kwargs",
            "type_": "",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "This method also takes the keyword arguments for the returned axes base class; except for the *figure* argument. The keyword arguments for the rectilinear base class "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "~.axes.Axes"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " can be found in the following table but there might also be other keyword arguments if another projection is used."
                      }
                    }
                  ],
                  "inner": []
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Properties: adjustable: {'box', 'datalim'} agg_filter: a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array alpha: float or None anchor: 2-tuple of floats or {'C', 'SW', 'S', 'SE', ...} animated: bool aspect: {'auto'} or num autoscale_on: bool autoscalex_on: bool autoscaley_on: bool axes_locator: Callable[[Axes, Renderer], Bbox] axisbelow: bool or 'line' box_aspect: None, or a number clip_box: "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          ".Bbox"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " clip_on: bool clip_path: Patch or (Path, Transform) or None contains: unknown facecolor or fc: color figure: "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          ".Figure"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " frame_on: bool gid: str in_layout: bool label: object navigate: bool navigate_mode: unknown path_effects: "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          ".AbstractPathEffect"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " picker: None or bool or callable position: [left, bottom, width, height] or "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "~matplotlib.transforms.Bbox"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " prop_cycle: unknown rasterization_zorder: float or None rasterized: bool or None sketch_params: (scale: float, length: float, randomness: float) snap: bool or None title: str transform: "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          ".Transform"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " url: str visible: bool xbound: unknown xlabel: str xlim: (bottom: float, top: float) xmargin: float greater than -0.5 xscale: {\"linear\", \"log\", \"symlog\", \"logit\", ...} xticklabels: unknown xticks: unknown ybound: unknown ylabel: str ylim: (bottom: float, top: float) ymargin: float greater than -0.5 yscale: {\"linear\", \"log\", \"symlog\", \"logit\", ...} yticklabels: unknown yticks: unknown zorder: float"
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        }
      ],
      "title": null
    },
    "Attributes": {
      "children": [],
      "title": null
    },
    "Methods": {
      "children": [],
      "title": null
    },
    "Notes": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Creating a subplot will delete any pre-existing subplot that overlaps with it beyond sharing a boundary::"
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "BlockVerbatim",
          "data": {
            "lines": {
              "_lines": [
                {
                  "_line": "    import matplotlib.pyplot as plt",
                  "_number": 3,
                  "_offset": 4
                },
                {
                  "_line": "    # plot a line, implicitly creating a subplot(111)",
                  "_number": 4,
                  "_offset": 4
                },
                {
                  "_line": "    plt.plot([1, 2, 3])",
                  "_number": 5,
                  "_offset": 4
                },
                {
                  "_line": "    # now create a subplot which represents the top plot of a grid",
                  "_number": 6,
                  "_offset": 4
                },
                {
                  "_line": "    # with 2 rows and 1 column. Since this subplot will overlap the",
                  "_number": 7,
                  "_offset": 4
                },
                {
                  "_line": "    # first, the plot (and its axes) previously created, will be removed",
                  "_number": 8,
                  "_offset": 4
                },
                {
                  "_line": "    plt.subplot(211)",
                  "_number": 9,
                  "_offset": 4
                },
                {
                  "_line": "",
                  "_number": 10,
                  "_offset": 4
                }
              ]
            }
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "If you do not want this behavior, use the "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    ".Figure.add",
                    "_",
                    "subplot"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " method or the "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    ".pyplot.axes"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " function instead."
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "If the figure already has a subplot with key (*args*, *kwargs*) then it will simply make that subplot current and return it.  This behavior is deprecated. Meanwhile, if you do not want this behavior (i.e., you want to force the creation of a new subplot), you must use a unique set of args and kwargs.  The axes *label* attribute has been exposed for this purpose: if you want two subplots that are otherwise identical to be added to the figure, make sure you give them unique labels."
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "In rare circumstances, "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    ".add",
                    "_",
                    "subplot"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " may be called with a single argument, a subplot axes instance already created in the present figure but not in the figure's list of axes."
                }
              }
            ],
            "inner": []
          }
        }
      ],
      "title": null
    },
    "Warnings": {
      "children": [],
      "title": null
    }
  },
  "refs": [
    ".Figure.add_subplot",
    ".Figure.subplots",
    ".pyplot.axes",
    ".pyplot.subplots"
  ],
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns",
    "Other Parameters",
    "Notes",
    "See Also",
    "Examples"
  ],
  "item_file": "/Users/bussonniermatthias/miniconda3/lib/python3.8/site-packages/matplotlib/pyplot.py",
  "item_line": 990,
  "item_type": "<class 'function'>",
  "aliases": [
    "matplotlib.pyplot.subplot"
  ],
  "example_section_data": {
    "children": [
      {
        "type": "Paragraph",
        "data": {
          "inline": [
            {
              "type": "Words",
              "data": {
                "value": "::"
              }
            }
          ],
          "inner": []
        }
      },
      {
        "type": "DefList",
        "data": {
          "children": [
            {
              "lines": {
                "_lines": [
                  {
                    "_line": ":: workaround numpyoc summary/ext summary bug in take2::Line.__init__",
                    "_number": 0,
                    "_offset": 0
                  }
                ]
              },
              "wh": {
                "_lines": []
              },
              "ind": {
                "_lines": [
                  {
                    "_line": "    plt.subplot(221)",
                    "_number": 0,
                    "_offset": 4
                  }
                ]
              },
              "dt": {
                "inline": [
                  {
                    "type": "Words",
                    "data": {
                      "value": ":: workaround numpyoc summary/ext summary bug in take2::Line.__init__"
                    }
                  }
                ],
                "inner": []
              },
              "dd": [
                {
                  "type": "Paragraph",
                  "data": {
                    "inline": [
                      {
                        "type": "Words",
                        "data": {
                          "value": "plt.subplot(221)"
                        }
                      }
                    ],
                    "inner": []
                  }
                }
              ]
            }
          ]
        }
      },
      {
        "type": "DefList",
        "data": {
          "children": [
            {
              "lines": {
                "_lines": [
                  {
                    "_line": ":: workaround numpyoc summary/ext summary bug in take2::Line.__init__",
                    "_number": 0,
                    "_offset": 0
                  }
                ]
              },
              "wh": {
                "_lines": []
              },
              "ind": {
                "_lines": [
                  {
                    "_line": "    # equivalent but more general",
                    "_number": 0,
                    "_offset": 4
                  },
                  {
                    "_line": "    ax1=plt.subplot(2, 2, 1)",
                    "_number": 1,
                    "_offset": 4
                  }
                ]
              },
              "dt": {
                "inline": [
                  {
                    "type": "Words",
                    "data": {
                      "value": ":: workaround numpyoc summary/ext summary bug in take2::Line.__init__"
                    }
                  }
                ],
                "inner": []
              },
              "dd": [
                {
                  "type": "Paragraph",
                  "data": {
                    "inline": [
                      {
                        "type": "Words",
                        "data": {
                          "value": "# equivalent but more general ax1=plt.subplot(2, 2, 1)"
                        }
                      }
                    ],
                    "inner": []
                  }
                }
              ]
            }
          ]
        }
      },
      {
        "type": "DefList",
        "data": {
          "children": [
            {
              "lines": {
                "_lines": [
                  {
                    "_line": ":: workaround numpyoc summary/ext summary bug in take2::Line.__init__",
                    "_number": 0,
                    "_offset": 0
                  }
                ]
              },
              "wh": {
                "_lines": []
              },
              "ind": {
                "_lines": [
                  {
                    "_line": "    # add a subplot with no frame",
                    "_number": 0,
                    "_offset": 4
                  },
                  {
                    "_line": "    ax2=plt.subplot(222, frameon=False)",
                    "_number": 1,
                    "_offset": 4
                  }
                ]
              },
              "dt": {
                "inline": [
                  {
                    "type": "Words",
                    "data": {
                      "value": ":: workaround numpyoc summary/ext summary bug in take2::Line.__init__"
                    }
                  }
                ],
                "inner": []
              },
              "dd": [
                {
                  "type": "Paragraph",
                  "data": {
                    "inline": [
                      {
                        "type": "Words",
                        "data": {
                          "value": "# add a subplot with no frame ax2=plt.subplot(222, frameon=False)"
                        }
                      }
                    ],
                    "inner": []
                  }
                }
              ]
            }
          ]
        }
      },
      {
        "type": "DefList",
        "data": {
          "children": [
            {
              "lines": {
                "_lines": [
                  {
                    "_line": ":: workaround numpyoc summary/ext summary bug in take2::Line.__init__",
                    "_number": 0,
                    "_offset": 0
                  }
                ]
              },
              "wh": {
                "_lines": []
              },
              "ind": {
                "_lines": [
                  {
                    "_line": "    # add a polar subplot",
                    "_number": 0,
                    "_offset": 4
                  },
                  {
                    "_line": "    plt.subplot(223, projection='polar')",
                    "_number": 1,
                    "_offset": 4
                  }
                ]
              },
              "dt": {
                "inline": [
                  {
                    "type": "Words",
                    "data": {
                      "value": ":: workaround numpyoc summary/ext summary bug in take2::Line.__init__"
                    }
                  }
                ],
                "inner": []
              },
              "dd": [
                {
                  "type": "Paragraph",
                  "data": {
                    "inline": [
                      {
                        "type": "Words",
                        "data": {
                          "value": "# add a polar subplot plt.subplot(223, projection='polar')"
                        }
                      }
                    ],
                    "inner": []
                  }
                }
              ]
            }
          ]
        }
      },
      {
        "type": "DefList",
        "data": {
          "children": [
            {
              "lines": {
                "_lines": [
                  {
                    "_line": ":: workaround numpyoc summary/ext summary bug in take2::Line.__init__",
                    "_number": 0,
                    "_offset": 0
                  }
                ]
              },
              "wh": {
                "_lines": []
              },
              "ind": {
                "_lines": [
                  {
                    "_line": "    # add a red subplot that shares the x-axis with ax1",
                    "_number": 0,
                    "_offset": 4
                  },
                  {
                    "_line": "    plt.subplot(224, sharex=ax1, facecolor='red')",
                    "_number": 1,
                    "_offset": 4
                  }
                ]
              },
              "dt": {
                "inline": [
                  {
                    "type": "Words",
                    "data": {
                      "value": ":: workaround numpyoc summary/ext summary bug in take2::Line.__init__"
                    }
                  }
                ],
                "inner": []
              },
              "dd": [
                {
                  "type": "Paragraph",
                  "data": {
                    "inline": [
                      {
                        "type": "Words",
                        "data": {
                          "value": "# add a red subplot that shares the x-axis with ax1 plt.subplot(224, sharex=ax1, facecolor='red')"
                        }
                      }
                    ],
                    "inner": []
                  }
                }
              ]
            }
          ]
        }
      },
      {
        "type": "DefList",
        "data": {
          "children": [
            {
              "lines": {
                "_lines": [
                  {
                    "_line": ":: workaround numpyoc summary/ext summary bug in take2::Line.__init__",
                    "_number": 0,
                    "_offset": 0
                  }
                ]
              },
              "wh": {
                "_lines": []
              },
              "ind": {
                "_lines": [
                  {
                    "_line": "    # delete ax2 from the figure",
                    "_number": 0,
                    "_offset": 4
                  },
                  {
                    "_line": "    plt.delaxes(ax2)",
                    "_number": 1,
                    "_offset": 4
                  }
                ]
              },
              "dt": {
                "inline": [
                  {
                    "type": "Words",
                    "data": {
                      "value": ":: workaround numpyoc summary/ext summary bug in take2::Line.__init__"
                    }
                  }
                ],
                "inner": []
              },
              "dd": [
                {
                  "type": "Paragraph",
                  "data": {
                    "inline": [
                      {
                        "type": "Words",
                        "data": {
                          "value": "# delete ax2 from the figure plt.delaxes(ax2)"
                        }
                      }
                    ],
                    "inner": []
                  }
                }
              ]
            }
          ]
        }
      },
      {
        "type": "DefList",
        "data": {
          "children": [
            {
              "lines": {
                "_lines": [
                  {
                    "_line": ":: workaround numpyoc summary/ext summary bug in take2::Line.__init__",
                    "_number": 0,
                    "_offset": 0
                  }
                ]
              },
              "wh": {
                "_lines": []
              },
              "ind": {
                "_lines": [
                  {
                    "_line": "    # add ax2 to the figure again",
                    "_number": 0,
                    "_offset": 4
                  },
                  {
                    "_line": "    plt.subplot(ax2)",
                    "_number": 1,
                    "_offset": 4
                  }
                ]
              },
              "dt": {
                "inline": [
                  {
                    "type": "Words",
                    "data": {
                      "value": ":: workaround numpyoc summary/ext summary bug in take2::Line.__init__"
                    }
                  }
                ],
                "inner": []
              },
              "dd": [
                {
                  "type": "Paragraph",
                  "data": {
                    "inline": [
                      {
                        "type": "Words",
                        "data": {
                          "value": "# add ax2 to the figure again plt.subplot(ax2)"
                        }
                      }
                    ],
                    "inner": []
                  }
                }
              ]
            }
          ]
        }
      }
    ],
    "title": null
  },
  "see_also": [
    {
      "name": {
        "name": ".Figure.add_subplot",
        "ref": null,
        "exists": null
      },
      "descriptions": [],
      "type": null
    },
    {
      "name": {
        "name": ".pyplot.subplots",
        "ref": null,
        "exists": null
      },
      "descriptions": [],
      "type": null
    },
    {
      "name": {
        "name": ".pyplot.axes",
        "ref": null,
        "exists": null
      },
      "descriptions": [],
      "type": null
    },
    {
      "name": {
        "name": ".Figure.subplots",
        "ref": null,
        "exists": null
      },
      "descriptions": [],
      "type": null
    }
  ],
  "signature": "subplot(*args, **kwargs)",
  "references": null,
  "arbitrary": []
}