{
  "_content": {
    "Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "2nd-order Runge-Kutta algorithm with adaptive step size."
                }
              }
            ],
            "inner": []
          }
        }
      ],
      "title": null
    },
    "Extended Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "This method is also referred to as the improved Euler's method, or Heun's method. This method is favored over higher-order methods because:"
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "DefList",
          "data": {
            "children": [
              {
                "lines": {
                  "_lines": [
                    {
                      "_line": "1. To get decent looking trajectories and to sample every mask cell",
                      "_number": 3,
                      "_offset": 0
                    }
                  ]
                },
                "wh": {
                  "_lines": []
                },
                "ind": {
                  "_lines": [
                    {
                      "_line": "   on the trajectory we need a small timestep, so a lower order",
                      "_number": 4,
                      "_offset": 3
                    },
                    {
                      "_line": "   solver doesn't hurt us unless the data is *very* high resolution.",
                      "_number": 5,
                      "_offset": 3
                    },
                    {
                      "_line": "   In fact, for cases where the user inputs",
                      "_number": 6,
                      "_offset": 3
                    },
                    {
                      "_line": "   data smaller or of similar grid size to the mask grid, the higher",
                      "_number": 7,
                      "_offset": 3
                    },
                    {
                      "_line": "   order corrections are negligible because of the very fast linear",
                      "_number": 8,
                      "_offset": 3
                    },
                    {
                      "_line": "   interpolation used in `interpgrid`.",
                      "_number": 9,
                      "_offset": 3
                    },
                    {
                      "_line": "",
                      "_number": 10,
                      "_offset": 3
                    }
                  ]
                },
                "dt": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "1. To get decent looking trajectories and to sample every mask cell"
                      }
                    }
                  ],
                  "inner": []
                },
                "dd": [
                  {
                    "type": "Paragraph",
                    "data": {
                      "inline": [
                        {
                          "type": "Words",
                          "data": {
                            "value": "on the trajectory we need a small timestep, so a lower order solver doesn't hurt us unless the data is *very* high resolution. In fact, for cases where the user inputs data smaller or of similar grid size to the mask grid, the higher order corrections are negligible because of the very fast linear interpolation used in "
                          }
                        },
                        {
                          "type": "Directive",
                          "data": {
                            "value": [
                              "interpgrid"
                            ],
                            "domain": null,
                            "role": null
                          }
                        },
                        {
                          "type": "Words",
                          "data": {
                            "value": ". "
                          }
                        }
                      ],
                      "inner": []
                    }
                  }
                ]
              },
              {
                "lines": {
                  "_lines": [
                    {
                      "_line": "2. For high resolution input data (i.e. beyond the mask",
                      "_number": 11,
                      "_offset": 0
                    }
                  ]
                },
                "wh": {
                  "_lines": []
                },
                "ind": {
                  "_lines": [
                    {
                      "_line": "   resolution), we must reduce the timestep. Therefore, an adaptive",
                      "_number": 12,
                      "_offset": 3
                    },
                    {
                      "_line": "   timestep is more suited to the problem as this would be very hard",
                      "_number": 13,
                      "_offset": 3
                    },
                    {
                      "_line": "   to judge automatically otherwise.",
                      "_number": 14,
                      "_offset": 3
                    },
                    {
                      "_line": "",
                      "_number": 15,
                      "_offset": 3
                    }
                  ]
                },
                "dt": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "2. For high resolution input data (i.e. beyond the mask"
                      }
                    }
                  ],
                  "inner": []
                },
                "dd": [
                  {
                    "type": "Paragraph",
                    "data": {
                      "inline": [
                        {
                          "type": "Words",
                          "data": {
                            "value": "resolution), we must reduce the timestep. Therefore, an adaptive timestep is more suited to the problem as this would be very hard to judge automatically otherwise. "
                          }
                        }
                      ],
                      "inner": []
                    }
                  }
                ]
              }
            ]
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "This integrator is about 1.5 - 2x as fast as both the RK4 and RK45 solvers in most setups on my machine. I would recommend removing the other two to keep things simple."
                }
              }
            ],
            "inner": []
          }
        }
      ],
      "title": null
    },
    "Parameters": {
      "children": [],
      "title": null
    },
    "Returns": {
      "children": [],
      "title": null
    },
    "Yields": {
      "children": [],
      "title": null
    },
    "Receives": {
      "children": [],
      "title": null
    },
    "Raises": {
      "children": [],
      "title": null
    },
    "Warns": {
      "children": [],
      "title": null
    },
    "Other Parameters": {
      "children": [],
      "title": null
    },
    "Attributes": {
      "children": [],
      "title": null
    },
    "Methods": {
      "children": [],
      "title": null
    },
    "Notes": {
      "children": [],
      "title": null
    },
    "Warnings": {
      "children": [],
      "title": null
    }
  },
  "refs": [],
  "ordered_sections": [
    "Summary",
    "Extended Summary"
  ],
  "item_file": "/Users/bussonniermatthias/miniconda3/lib/python3.8/site-packages/matplotlib/streamplot.py",
  "item_line": 499,
  "item_type": "<class 'function'>",
  "aliases": [
    "matplotlib.streamplot._integrate_rk12"
  ],
  "example_section_data": {
    "children": [],
    "title": null
  },
  "see_also": [],
  "signature": "_integrate_rk12(x0, y0, dmap, f, maxlength)",
  "references": null,
  "arbitrary": []
}