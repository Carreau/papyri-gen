{
  "_content": {
    "Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "children": [
              {
                "type": "Words",
                "data": {
                  "value": "Compose *self* with the inverse of *other*, cancelling identical terms if any::"
                }
              }
            ]
          }
        }
      ]
    },
    "Extended Summary": {
      "children": [
        {
          "type": "DefList",
          "data": {
            "children": [
              {
                "lines": {
                  "_lines": [
                    {
                      "_line": ":: workaround numpyoc summary/ext summary bug in take2::Line.__init__",
                      "_number": 0,
                      "_offset": 0
                    }
                  ]
                },
                "wh": {
                  "_lines": []
                },
                "ind": {
                  "_lines": [
                    {
                      "_line": "    # In general:",
                      "_number": 0,
                      "_offset": 0
                    },
                    {
                      "_line": "    A - B == A + B.inverted()",
                      "_number": 1,
                      "_offset": 0
                    },
                    {
                      "_line": "    # (but see note regarding frozen transforms below).",
                      "_number": 2,
                      "_offset": 0
                    },
                    {
                      "_line": "",
                      "_number": 3,
                      "_offset": 0
                    },
                    {
                      "_line": "    # If A \"ends with\" B (i.e. A == A' + B for some A') we can cancel",
                      "_number": 4,
                      "_offset": 0
                    },
                    {
                      "_line": "    # out B:",
                      "_number": 5,
                      "_offset": 0
                    },
                    {
                      "_line": "    (A' + B) - B == A'",
                      "_number": 6,
                      "_offset": 0
                    },
                    {
                      "_line": "",
                      "_number": 7,
                      "_offset": 0
                    },
                    {
                      "_line": "    # Likewise, if B \"starts with\" A (B = A + B'), we can cancel out A:",
                      "_number": 8,
                      "_offset": 0
                    },
                    {
                      "_line": "    A - (A + B') == B'.inverted() == B'^-1",
                      "_number": 9,
                      "_offset": 0
                    },
                    {
                      "_line": "",
                      "_number": 10,
                      "_offset": 0
                    }
                  ]
                },
                "dt": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": ":: workaround numpyoc summary/ext summary bug in take2::Line.__init__"
                      }
                    }
                  ]
                },
                "dd": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "# In general: A - B == A + B.inverted() # (but see note regarding frozen transforms below).  # If A \"ends with\" B (i.e. A == A' + B for some A') we can cancel # out B: (A' + B) - B == A'  # Likewise, if B \"starts with\" A (B = A + B'), we can cancel out A: A - (A + B') == B'.inverted() == B'^-1 "
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "children": [
              {
                "type": "Words",
                "data": {
                  "value": "Cancellation (rather than naively returning "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "A",
                    " ",
                    "+",
                    " ",
                    "B.inverted()"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": ") is important for multiple reasons:"
                }
              }
            ]
          }
        },
        {
          "type": "DefList",
          "data": {
            "children": [
              {
                "lines": {
                  "_lines": [
                    {
                      "_line": "- It avoids floating-point inaccuracies when computing the inverse of",
                      "_number": 14,
                      "_offset": 0
                    }
                  ]
                },
                "wh": {
                  "_lines": []
                },
                "ind": {
                  "_lines": [
                    {
                      "_line": "  B: ``B - B`` is guaranteed to cancel out exactly (resulting in the",
                      "_number": 15,
                      "_offset": 0
                    },
                    {
                      "_line": "  identity transform), whereas ``B + B.inverted()`` may differ by a",
                      "_number": 16,
                      "_offset": 0
                    },
                    {
                      "_line": "  small epsilon.",
                      "_number": 17,
                      "_offset": 0
                    }
                  ]
                },
                "dt": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "- It avoids floating-point inaccuracies when computing the inverse of"
                      }
                    }
                  ]
                },
                "dd": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "B: "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "B",
                          " ",
                          "-",
                          " ",
                          "B"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " is guaranteed to cancel out exactly (resulting in the identity transform), whereas "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "B",
                          " ",
                          "+",
                          " ",
                          "B.inverted()"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " may differ by a small epsilon."
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "children": [
              {
                "type": "Words",
                "data": {
                  "value": "- "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "B.inverted()"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " always returns a frozen transform: if one computes"
                }
              }
            ]
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "children": [
              {
                "type": "Words",
                "data": {
                  "value": "  "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "A",
                    " ",
                    "+",
                    " ",
                    "B",
                    " ",
                    "+",
                    " ",
                    "B.inverted()"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " and later mutates "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "B"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": ", then   "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "B.inverted()"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " won't be updated and the last two terms won't cancel   out anymore; on the other hand, "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "A",
                    " ",
                    "+",
                    " ",
                    "B",
                    " ",
                    "-",
                    " ",
                    "B"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " will always be equal to   "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "A"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " even if "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "B"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " is mutated."
                }
              }
            ]
          }
        }
      ]
    },
    "Parameters": {
      "children": []
    },
    "Returns": {
      "children": []
    },
    "Yields": {
      "children": []
    },
    "Receives": {
      "children": []
    },
    "Raises": {
      "children": []
    },
    "Warns": {
      "children": []
    },
    "Other Parameters": {
      "children": []
    },
    "Attributes": {
      "children": []
    },
    "Methods": {
      "children": []
    },
    "Notes": {
      "children": []
    },
    "Warnings": {
      "children": []
    }
  },
  "refs": [],
  "ordered_sections": [
    "Summary",
    "Extended Summary"
  ],
  "item_file": "/Users/bussonniermatthias/miniconda3/lib/python3.8/site-packages/matplotlib/transforms.py",
  "item_line": 1345,
  "item_type": "<class 'function'>",
  "aliases": [
    "matplotlib.artist.Transform.__sub__"
  ],
  "example_section_data": {
    "children": []
  },
  "see_also": [],
  "references": null,
  "signature": "__sub__(self, other)"
}