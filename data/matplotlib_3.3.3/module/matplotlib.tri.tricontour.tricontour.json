{
  "_content": {
    "Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "children": [
              {
                "type": "Words",
                "data": {
                  "value": "Draw contour lines on an unstructured triangular grid."
                }
              }
            ]
          }
        }
      ]
    },
    "Extended Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "children": [
              {
                "type": "Words",
                "data": {
                  "value": "The triangulation can be specified in one of two ways; either ::"
                }
              }
            ]
          }
        },
        {
          "type": "BlockVerbatim",
          "data": {
            "lines": {
              "_lines": [
                {
                  "_line": "    tricontour(triangulation, ...)",
                  "_number": 2,
                  "_offset": 4
                },
                {
                  "_line": "",
                  "_number": 3,
                  "_offset": 4
                }
              ]
            }
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "children": [
              {
                "type": "Words",
                "data": {
                  "value": "where *triangulation* is a "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    ".Triangulation"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " object, or ::"
                }
              }
            ]
          }
        },
        {
          "type": "BlockVerbatim",
          "data": {
            "lines": {
              "_lines": [
                {
                  "_line": "    tricontour(x, y, ...)",
                  "_number": 6,
                  "_offset": 4
                },
                {
                  "_line": "    tricontour(x, y, triangles, ...)",
                  "_number": 7,
                  "_offset": 4
                },
                {
                  "_line": "    tricontour(x, y, triangles=triangles, ...)",
                  "_number": 8,
                  "_offset": 4
                },
                {
                  "_line": "    tricontour(x, y, mask=mask, ...)",
                  "_number": 9,
                  "_offset": 4
                },
                {
                  "_line": "    tricontour(x, y, triangles, mask=mask, ...)",
                  "_number": 10,
                  "_offset": 4
                },
                {
                  "_line": "",
                  "_number": 11,
                  "_offset": 4
                }
              ]
            }
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "children": [
              {
                "type": "Words",
                "data": {
                  "value": "in which case a "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    ".Triangulation"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " object will be created.  See that class' docstring for an explanation of these cases."
                }
              }
            ]
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "children": [
              {
                "type": "Words",
                "data": {
                  "value": "The remaining arguments may be::"
                }
              }
            ]
          }
        },
        {
          "type": "BlockVerbatim",
          "data": {
            "lines": {
              "_lines": [
                {
                  "_line": "    tricontour(..., Z)",
                  "_number": 17,
                  "_offset": 4
                },
                {
                  "_line": "",
                  "_number": 18,
                  "_offset": 4
                }
              ]
            }
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "children": [
              {
                "type": "Words",
                "data": {
                  "value": "where *Z* is the array of values to contour, one per point in the triangulation.  The level values are chosen automatically."
                }
              }
            ]
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "children": [
              {
                "type": "Words",
                "data": {
                  "value": "::"
                }
              }
            ]
          }
        },
        {
          "type": "BlockVerbatim",
          "data": {
            "lines": {
              "_lines": [
                {
                  "_line": "    tricontour(..., Z, levels)",
                  "_number": 24,
                  "_offset": 4
                },
                {
                  "_line": "",
                  "_number": 25,
                  "_offset": 4
                }
              ]
            }
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "children": [
              {
                "type": "Words",
                "data": {
                  "value": "contour up to *levels+1* automatically chosen contour levels (*levels* intervals)."
                }
              }
            ]
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "children": [
              {
                "type": "Words",
                "data": {
                  "value": "::"
                }
              }
            ]
          }
        },
        {
          "type": "BlockVerbatim",
          "data": {
            "lines": {
              "_lines": [
                {
                  "_line": "    tricontour(..., Z, levels)",
                  "_number": 31,
                  "_offset": 4
                },
                {
                  "_line": "",
                  "_number": 32,
                  "_offset": 4
                }
              ]
            }
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "children": [
              {
                "type": "Words",
                "data": {
                  "value": "draw contour lines at the values specified in sequence *levels*, which must be in increasing order."
                }
              }
            ]
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "children": [
              {
                "type": "Words",
                "data": {
                  "value": "::"
                }
              }
            ]
          }
        },
        {
          "type": "BlockVerbatim",
          "data": {
            "lines": {
              "_lines": [
                {
                  "_line": "    tricontour(Z, **kwargs)",
                  "_number": 38,
                  "_offset": 4
                },
                {
                  "_line": "",
                  "_number": 39,
                  "_offset": 4
                }
              ]
            }
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "children": [
              {
                "type": "Words",
                "data": {
                  "value": "Use keyword arguments to control colors, linewidth, origin, cmap ... see below for more details."
                }
              }
            ]
          }
        }
      ]
    },
    "Parameters": {
      "children": [
        {
          "type": "Param",
          "data": {
            "param": "triangulation",
            "type_": "`.Triangulation`, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "The unstructured triangular grid."
                      }
                    }
                  ]
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "If specified, then *x*, *y*, *triangles*, and *mask* are not accepted."
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "x, y",
            "type_": "array-like, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "The coordinates of the values in *Z*."
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "triangles",
            "type_": "int array-like of shape (ntri, 3), optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "For each triangle, the indices of the three points that make up the triangle, ordered in an anticlockwise manner.  If not specified, the Delaunay triangulation is calculated."
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "mask",
            "type_": "bool array-like of shape (ntri), optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Which triangles are masked out."
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "Z",
            "type_": "array-like(N, M)",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "The height values over which the contour is drawn."
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "levels",
            "type_": "int or array-like, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Determines the number and positions of the contour lines / regions."
                      }
                    }
                  ]
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "If an int *n*, use "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "~matplotlib.ticker.MaxNLocator"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ", which tries to automatically choose no more than *n+1* \"nice\" contour levels between *vmin* and *vmax*."
                      }
                    }
                  ]
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "If array-like, draw contour lines at the specified levels.  The values must be in increasing order."
                      }
                    }
                  ]
                }
              }
            ]
          }
        }
      ]
    },
    "Returns": {
      "children": [
        {
          "type": "Param",
          "data": {
            "param": "",
            "type_": "`~matplotlib.tri.TriContourSet`",
            "desc": []
          }
        }
      ]
    },
    "Yields": {
      "children": []
    },
    "Receives": {
      "children": []
    },
    "Raises": {
      "children": []
    },
    "Warns": {
      "children": []
    },
    "Other Parameters": {
      "children": [
        {
          "type": "Param",
          "data": {
            "param": "colors",
            "type_": "color string or sequence of colors, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "The colors of the levels, i.e., the contour lines."
                      }
                    }
                  ]
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "The sequence is cycled for the levels in ascending order. If the sequence is shorter than the number of levels, it's repeated."
                      }
                    }
                  ]
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "As a shortcut, single color strings may be used in place of one-element lists, i.e. "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "'red'"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " instead of "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "['red']"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " to color all levels with the same color. This shortcut does only work for color strings, not for other ways of specifying colors."
                      }
                    }
                  ]
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "By default (value *None*), the colormap specified by *cmap* will be used."
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "alpha",
            "type_": "float, default: 1",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "The alpha blending value, between 0 (transparent) and 1 (opaque)."
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "cmap",
            "type_": "str or `.Colormap`, default: :rc:`image.cmap`",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "A "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          ".Colormap"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " instance or registered colormap name. The colormap maps the level values to colors."
                      }
                    }
                  ]
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "If both *colors* and *cmap* are given, an error is raised."
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "norm",
            "type_": "`~matplotlib.colors.Normalize`, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "If a colormap is used, the "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          ".Normalize"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " instance scales the level values to the canonical colormap range [0, 1] for mapping to colors. If not given, the default linear scaling is used."
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "origin",
            "type_": "{*None*, 'upper', 'lower', 'image'}, default: None",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Determines the orientation and exact position of *Z* by specifying the position of "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "Z[0,",
                          " ",
                          "0]"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ".  This is only relevant, if *X*, *Y* are not given."
                      }
                    }
                  ]
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "- *None*: "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "Z[0,",
                          " ",
                          "0]"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " is at X=0, Y=0 in the lower left corner. - 'lower': "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "Z[0,",
                          " ",
                          "0]"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " is at X=0.5, Y=0.5 in the lower left corner. - 'upper': "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "Z[0,",
                          " ",
                          "0]"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " is at X=N+0.5, Y=0.5 in the upper left corner. - 'image': Use the value from "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "image.origin"
                        ],
                        "domain": null,
                        "role": "rc"
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": "."
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "extent",
            "type_": "(x0, x1, y0, y1), optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "If *origin* is not *None*, then *extent* is interpreted as in "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          ".imshow"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ": it gives the outer pixel boundaries. In this case, the position of Z[0, 0] is the center of the pixel, not a corner. If *origin* is *None*, then (*x0*, *y0*) is the position of Z[0, 0], and (*x1*, *y1*) is the position of Z[-1, -1]."
                      }
                    }
                  ]
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "This argument is ignored if *X* and *Y* are specified in the call to contour."
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "locator",
            "type_": "ticker.Locator subclass, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "The locator is used to determine the contour levels if they are not given explicitly via *levels*. Defaults to "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "~.ticker.MaxNLocator"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": "."
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "extend",
            "type_": "{'neither', 'both', 'min', 'max'}, default: 'neither'",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Determines the "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "tricontour"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": "-coloring of values that are outside the *levels* range."
                      }
                    }
                  ]
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "If 'neither', values outside the *levels* range are not colored.  If 'min', 'max' or 'both', color the values below, above or below and above the *levels* range."
                      }
                    }
                  ]
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Values below "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "min(levels)"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " and above "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "max(levels)"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " are mapped to the under/over values of the "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          ".Colormap"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ". Note that most colormaps do not have dedicated colors for these by default, so that the over and under values are the edge values of the colormap.  You may want to set these values explicitly using "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          ".Colormap.set",
                          "_",
                          "under"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " and "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          ".Colormap.set",
                          "_",
                          "over"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": "."
                      }
                    }
                  ]
                }
              },
              {
                "type": "BlockDirective",
                "data": {
                  "lines": {
                    "_lines": [
                      {
                        "_line": ".. note::",
                        "_number": 13,
                        "_offset": 0
                      }
                    ]
                  },
                  "wh": {
                    "_lines": [
                      {
                        "_line": "",
                        "_number": 14,
                        "_offset": 0
                      }
                    ]
                  },
                  "ind": {
                    "_lines": [
                      {
                        "_line": "    An existing `.TriContourSet` does not get notified if properties of its",
                        "_number": 15,
                        "_offset": 0
                      },
                      {
                        "_line": "    colormap are changed. Therefore, an explicit call to",
                        "_number": 16,
                        "_offset": 0
                      },
                      {
                        "_line": "    `.ContourSet.changed()` is needed after modifying the colormap. The",
                        "_number": 17,
                        "_offset": 0
                      },
                      {
                        "_line": "    explicit call can be left out, if a colorbar is assigned to the",
                        "_number": 18,
                        "_offset": 0
                      },
                      {
                        "_line": "    `.TriContourSet` because it internally calls `.ContourSet.changed()`.",
                        "_number": 19,
                        "_offset": 0
                      }
                    ]
                  },
                  "directive_name": "note",
                  "args0": [
                    ""
                  ],
                  "inner": {
                    "children": [
                      {
                        "type": "Words",
                        "data": {
                          "value": "An existing "
                        }
                      },
                      {
                        "type": "Directive",
                        "data": {
                          "value": [
                            ".TriContourSet"
                          ],
                          "domain": null,
                          "role": null
                        }
                      },
                      {
                        "type": "Words",
                        "data": {
                          "value": " does not get notified if properties of its colormap are changed. Therefore, an explicit call to "
                        }
                      },
                      {
                        "type": "Directive",
                        "data": {
                          "value": [
                            ".ContourSet.changed()"
                          ],
                          "domain": null,
                          "role": null
                        }
                      },
                      {
                        "type": "Words",
                        "data": {
                          "value": " is needed after modifying the colormap. The explicit call can be left out, if a colorbar is assigned to the "
                        }
                      },
                      {
                        "type": "Directive",
                        "data": {
                          "value": [
                            ".TriContourSet"
                          ],
                          "domain": null,
                          "role": null
                        }
                      },
                      {
                        "type": "Words",
                        "data": {
                          "value": " because it internally calls "
                        }
                      },
                      {
                        "type": "Directive",
                        "data": {
                          "value": [
                            ".ContourSet.changed()"
                          ],
                          "domain": null,
                          "role": null
                        }
                      },
                      {
                        "type": "Words",
                        "data": {
                          "value": "."
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "xunits, yunits",
            "type_": "registered units, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Override axis units by specifying an instance of a "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "matplotlib.units.ConversionInterface"
                        ],
                        "domain": null,
                        "role": "class"
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": "."
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "linewidths",
            "type_": "float or array-like, default: :rc:`contour.linewidth`",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "The line width of the contour lines."
                      }
                    }
                  ]
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "If a number, all levels will be plotted with this linewidth."
                      }
                    }
                  ]
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "If a sequence, the levels in ascending order will be plotted with the linewidths in the order specified."
                      }
                    }
                  ]
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "If None, this falls back to "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "lines.linewidth"
                        ],
                        "domain": null,
                        "role": "rc"
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": "."
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "linestyles",
            "type_": "{*None*, 'solid', 'dashed', 'dashdot', 'dotted'}, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "If *linestyles* is *None*, the default is 'solid' unless the lines are monochrome.  In that case, negative contours will take their linestyle from "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "contour.negative",
                          "_",
                          "linestyle"
                        ],
                        "domain": null,
                        "role": "rc"
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " setting."
                      }
                    }
                  ]
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "*linestyles* can also be an iterable of the above strings specifying a set of linestyles to be used. If this iterable is shorter than the number of contour levels it will be repeated as necessary."
                      }
                    }
                  ]
                }
              }
            ]
          }
        }
      ]
    },
    "Attributes": {
      "children": []
    },
    "Methods": {
      "children": []
    },
    "Notes": {
      "children": []
    },
    "Warnings": {
      "children": []
    }
  },
  "refs": [],
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns",
    "Other Parameters"
  ],
  "item_file": "/Users/bussonniermatthias/miniconda3/lib/python3.8/site-packages/matplotlib/tri/tricontour.py",
  "item_line": 272,
  "item_type": "<class 'function'>",
  "aliases": [
    "matplotlib.tri.tricontour"
  ],
  "example_section_data": {
    "children": []
  },
  "see_also": [],
  "references": null,
  "signature": "tricontour(ax, *args, **kwargs)"
}