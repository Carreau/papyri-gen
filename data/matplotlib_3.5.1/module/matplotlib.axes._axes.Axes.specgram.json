{
  "_content": {
    "Attributes": {
      "children": [],
      "title": null
    },
    "Extended Summary": {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Compute and plot a spectrogram of data in "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "x"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": ".  Data are split into "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "NFFT"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": " length segments and the spectrum of each section is computed.  The windowing function "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "window"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": " is applied to each segment, and the amount of overlap of each segment is specified with "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "noverlap"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": ". The spectrogram is plotted as a colormap (using imshow)."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": null
    },
    "Methods": {
      "children": [],
      "title": null
    },
    "Notes": {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "The parameters "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "detrend"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": " and "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "scale_by_freq"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": " do only apply when "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "mode"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": " is set to 'psd'."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": null
    },
    "Other Parameters": {
      "children": [],
      "title": null
    },
    "Parameters": {
      "children": [
        {
          "data": {
            "children": [
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Array or sequence containing the data."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "x",
                "type_": "1-D array or sequence"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "The sampling frequency (samples per time unit).  It is used to calculate the Fourier frequencies, "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": {
                              "value": "freqs"
                            }
                          },
                          "type": "Emph"
                        },
                        {
                          "data": {
                            "value": ", in cycles per time unit."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "Fs",
                "type_": "float, default: 2"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "A function or a vector of length "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": {
                              "value": "NFFT"
                            }
                          },
                          "type": "Emph"
                        },
                        {
                          "data": {
                            "value": ".  To create window vectors see "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "exists": true,
                            "kind": "module",
                            "reference": {
                              "kind": "module",
                              "module": "matplotlib",
                              "path": "matplotlib.mlab.window_hanning",
                              "version": "3.5.1"
                            },
                            "value": ".window_hanning"
                          },
                          "type": "Link"
                        },
                        {
                          "data": {
                            "value": ", "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "exists": true,
                            "kind": "module",
                            "reference": {
                              "kind": "module",
                              "module": "matplotlib",
                              "path": "matplotlib.mlab.window_none",
                              "version": "3.5.1"
                            },
                            "value": ".window_none"
                          },
                          "type": "Link"
                        },
                        {
                          "data": {
                            "value": ", "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "exists": true,
                            "kind": "module",
                            "reference": {
                              "kind": "api",
                              "module": "numpy",
                              "path": "numpy.blackman",
                              "version": "*"
                            },
                            "value": "numpy.blackman"
                          },
                          "type": "Link"
                        },
                        {
                          "data": {
                            "value": ", "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "exists": true,
                            "kind": "module",
                            "reference": {
                              "kind": "api",
                              "module": "numpy",
                              "path": "numpy.hamming",
                              "version": "*"
                            },
                            "value": "numpy.hamming"
                          },
                          "type": "Link"
                        },
                        {
                          "data": {
                            "value": ", "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "exists": true,
                            "kind": "module",
                            "reference": {
                              "kind": "api",
                              "module": "numpy",
                              "path": "numpy.bartlett",
                              "version": "*"
                            },
                            "value": "numpy.bartlett"
                          },
                          "type": "Link"
                        },
                        {
                          "data": {
                            "value": ", "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "exists": true,
                            "kind": "module",
                            "reference": {
                              "kind": "api",
                              "module": "scipy",
                              "path": "scipy.signal",
                              "version": "*"
                            },
                            "value": "scipy.signal"
                          },
                          "type": "Link"
                        },
                        {
                          "data": {
                            "value": ", "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "exists": true,
                            "kind": "module",
                            "reference": {
                              "kind": "api",
                              "module": "scipy",
                              "path": "scipy.signal.windows._windows.get_window",
                              "version": "*"
                            },
                            "value": "scipy.signal.get_window"
                          },
                          "type": "Link"
                        },
                        {
                          "data": {
                            "value": ", etc.  If a function is passed as the argument, it must take a data segment as an argument and return the windowed version of the segment."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "window",
                "type_": "callable or ndarray, default: `.window_hanning`"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Which sides of the spectrum to return. 'default' is one-sided for real data and two-sided for complex data. 'onesided' forces the return of a one-sided spectrum, while 'twosided' forces two-sided."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "sides",
                "type_": "{'default', 'onesided', 'twosided'}, optional"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "The number of points to which the data segment is padded when performing the FFT.  This can be different from "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": {
                              "value": "NFFT"
                            }
                          },
                          "type": "Emph"
                        },
                        {
                          "data": {
                            "value": ", which specifies the number of data points used.  While not increasing the actual resolution of the spectrum (the minimum distance between resolvable peaks), this can give more points in the plot, allowing for more detail. This corresponds to the "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": {
                              "value": "n"
                            }
                          },
                          "type": "Emph"
                        },
                        {
                          "data": {
                            "value": " parameter in the call to fft(). The default is None, which sets "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": {
                              "value": "pad_to"
                            }
                          },
                          "type": "Emph"
                        },
                        {
                          "data": {
                            "value": " equal to "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": {
                              "value": "NFFT"
                            }
                          },
                          "type": "Emph"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "pad_to",
                "type_": "int, optional"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "The number of data points used in each block for the FFT.  A power 2 is most efficient.  This should "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": {
                              "value": "NOT"
                            }
                          },
                          "type": "Emph"
                        },
                        {
                          "data": {
                            "value": " be used to get zero padding, or the scaling of the result will be incorrect; use "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": {
                              "value": "pad_to"
                            }
                          },
                          "type": "Emph"
                        },
                        {
                          "data": {
                            "value": " for this instead."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "NFFT",
                "type_": "int, default: 256"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "The function applied to each segment before fft-ing, designed to remove the mean or linear trend.  Unlike in MATLAB, where the "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": {
                              "value": "detrend"
                            }
                          },
                          "type": "Emph"
                        },
                        {
                          "data": {
                            "value": " parameter is a vector, in Matplotlib it is a function.  The "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "~matplotlib.mlab"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " module defines "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "exists": true,
                            "kind": "module",
                            "reference": {
                              "kind": "module",
                              "module": "matplotlib",
                              "path": "matplotlib.mlab.detrend_none",
                              "version": "3.5.1"
                            },
                            "value": ".detrend_none"
                          },
                          "type": "Link"
                        },
                        {
                          "data": {
                            "value": ", "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "exists": true,
                            "kind": "module",
                            "reference": {
                              "kind": "module",
                              "module": "matplotlib",
                              "path": "matplotlib.mlab.detrend_mean",
                              "version": "3.5.1"
                            },
                            "value": ".detrend_mean"
                          },
                          "type": "Link"
                        },
                        {
                          "data": {
                            "value": ", and "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "exists": true,
                            "kind": "module",
                            "reference": {
                              "kind": "module",
                              "module": "matplotlib",
                              "path": "matplotlib.mlab.detrend_linear",
                              "version": "3.5.1"
                            },
                            "value": ".detrend_linear"
                          },
                          "type": "Link"
                        },
                        {
                          "data": {
                            "value": ", but you can use a custom function as well.  You can also use a string to choose one of the functions: 'none' calls "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "exists": true,
                            "kind": "module",
                            "reference": {
                              "kind": "module",
                              "module": "matplotlib",
                              "path": "matplotlib.mlab.detrend_none",
                              "version": "3.5.1"
                            },
                            "value": ".detrend_none"
                          },
                          "type": "Link"
                        },
                        {
                          "data": {
                            "value": ". 'mean' calls "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "exists": true,
                            "kind": "module",
                            "reference": {
                              "kind": "module",
                              "module": "matplotlib",
                              "path": "matplotlib.mlab.detrend_mean",
                              "version": "3.5.1"
                            },
                            "value": ".detrend_mean"
                          },
                          "type": "Link"
                        },
                        {
                          "data": {
                            "value": ". 'linear' calls "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "exists": true,
                            "kind": "module",
                            "reference": {
                              "kind": "module",
                              "module": "matplotlib",
                              "path": "matplotlib.mlab.detrend_linear",
                              "version": "3.5.1"
                            },
                            "value": ".detrend_linear"
                          },
                          "type": "Link"
                        },
                        {
                          "data": {
                            "value": "."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "detrend",
                "type_": "{'none', 'mean', 'linear'} or callable, default: 'none'"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Whether the resulting density values should be scaled by the scaling frequency, which gives density in units of Hz^-1.  This allows for integration over the returned frequency values.  The default is True for MATLAB compatibility."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "scale_by_freq",
                "type_": "bool, default: True"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "What sort of spectrum to use.  Default is 'psd', which takes the power spectral density.  'magnitude' returns the magnitude spectrum.  'angle' returns the phase spectrum without unwrapping. 'phase' returns the phase spectrum with unwrapping."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "mode",
                "type_": "{'default', 'psd', 'magnitude', 'angle', 'phase'}"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "The number of points of overlap between blocks."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "noverlap",
                "type_": "int, default: 128"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "The scaling of the values in the "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": {
                              "value": "spec"
                            }
                          },
                          "type": "Emph"
                        },
                        {
                          "data": {
                            "value": ".  'linear' is no scaling. 'dB' returns the values in dB scale.  When "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": {
                              "value": "mode"
                            }
                          },
                          "type": "Emph"
                        },
                        {
                          "data": {
                            "value": " is 'psd', this is dB power (10 * log10).  Otherwise this is dB amplitude (20 * log10). 'default' is 'dB' if "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": {
                              "value": "mode"
                            }
                          },
                          "type": "Emph"
                        },
                        {
                          "data": {
                            "value": " is 'psd' or 'magnitude' and 'linear' otherwise.  This must be 'linear' if "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": {
                              "value": "mode"
                            }
                          },
                          "type": "Emph"
                        },
                        {
                          "data": {
                            "value": " is 'angle' or 'phase'."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "scale",
                "type_": "{'default', 'linear', 'dB'}"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "The center frequency of "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": {
                              "value": "x"
                            }
                          },
                          "type": "Emph"
                        },
                        {
                          "data": {
                            "value": ", which offsets the x extents of the plot to reflect the frequency range used when a signal is acquired and then filtered and downsampled to baseband."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "Fc",
                "type_": "int, default: 0"
              },
              {
                "desc": [],
                "param": "cmap",
                "type_": "`.Colormap`, default: :rc:`image.cmap`"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "The image extent along the x-axis. The default sets "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": {
                              "value": "xmin"
                            }
                          },
                          "type": "Emph"
                        },
                        {
                          "data": {
                            "value": " to the left border of the first bin ("
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": {
                              "value": "spectrum"
                            }
                          },
                          "type": "Emph"
                        },
                        {
                          "data": {
                            "value": " column) and "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": {
                              "value": "xmax"
                            }
                          },
                          "type": "Emph"
                        },
                        {
                          "data": {
                            "value": " to the right border of the last bin. Note that for "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": {
                              "value": "noverlap>0"
                            }
                          },
                          "type": "Emph"
                        },
                        {
                          "data": {
                            "value": " the width of the bins is smaller than those of the segments."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "xextent",
                "type_": "*None* or (xmin, xmax)"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "If given, the following parameters also accept a string "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "s"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": ", which is interpreted as "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "data[s]"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " (unless this raises an exception):"
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  },
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": {
                              "value": "x"
                            }
                          },
                          "type": "Emph"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "data",
                "type_": "indexable object, optional"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Additional keyword arguments are passed on to "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "domain": null,
                            "role": null,
                            "value": "~.axes.Axes.imshow"
                          },
                          "type": "Directive"
                        },
                        {
                          "data": {
                            "value": " which makes the specgram image. The origin keyword argument is not supported."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "**kwargs",
                "type_": ""
              }
            ]
          },
          "type": "Parameters"
        }
      ],
      "title": null
    },
    "Raises": {
      "children": [],
      "title": null
    },
    "Receives": {
      "children": [],
      "title": null
    },
    "Returns": {
      "children": [
        {
          "data": {
            "children": [
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Columns are the periodograms of successive segments."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "spectrum",
                "type_": "2D array"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "The frequencies corresponding to the rows in "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": {
                              "value": "spectrum"
                            }
                          },
                          "type": "Emph"
                        },
                        {
                          "data": {
                            "value": "."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "freqs",
                "type_": "1-D array"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "The times corresponding to midpoints of segments (i.e., the columns in "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": {
                              "value": "spectrum"
                            }
                          },
                          "type": "Emph"
                        },
                        {
                          "data": {
                            "value": ")."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "t",
                "type_": "1-D array"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "The image created by imshow containing the spectrogram."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "im",
                "type_": "`.AxesImage`"
              }
            ]
          },
          "type": "Parameters"
        }
      ],
      "title": null
    },
    "Summary": {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Plot a spectrogram."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": null
    },
    "Warnings": {
      "children": [],
      "title": null
    },
    "Warns": {
      "children": [],
      "title": null
    },
    "Yields": {
      "children": [],
      "title": null
    }
  },
  "aliases": [
    "matplotlib.pyplot.Axes.specgram"
  ],
  "arbitrary": [],
  "example_section_data": {
    "children": [],
    "title": null
  },
  "item_file": "/matplotlib/axes/_axes.py",
  "item_line": 7495,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns",
    "See Also",
    "Notes"
  ],
  "references": null,
  "refs": [
    "angle_spectrum",
    "magnitude_spectrum",
    "phase_spectrum",
    "psd"
  ],
  "see_also": [
    {
      "descriptions": [
        {
          "children": [
            {
              "data": {
                "value": "Differs in the default overlap; in returning the mean of the segment periodograms; in not returning times; and in generating a line plot instead of colormap."
              },
              "type": "Words"
            }
          ]
        }
      ],
      "name": {
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "module",
          "module": "matplotlib",
          "path": "matplotlib.axes._axes.Axes.psd",
          "version": "3.5.1"
        },
        "value": "psd"
      },
      "type": null
    },
    {
      "descriptions": [
        {
          "children": [
            {
              "data": {
                "value": "A single spectrum, similar to having a single segment when "
              },
              "type": "Words"
            },
            {
              "data": {
                "value": {
                  "value": "mode"
                }
              },
              "type": "Emph"
            },
            {
              "data": {
                "value": " is 'magnitude'. Plots a line instead of a colormap."
              },
              "type": "Words"
            }
          ]
        }
      ],
      "name": {
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "module",
          "module": "matplotlib",
          "path": "matplotlib.axes._axes.Axes.magnitude_spectrum",
          "version": "3.5.1"
        },
        "value": "magnitude_spectrum"
      },
      "type": null
    },
    {
      "descriptions": [
        {
          "children": [
            {
              "data": {
                "value": "A single spectrum, similar to having a single segment when "
              },
              "type": "Words"
            },
            {
              "data": {
                "value": {
                  "value": "mode"
                }
              },
              "type": "Emph"
            },
            {
              "data": {
                "value": " is 'angle'. Plots a line instead of a colormap."
              },
              "type": "Words"
            }
          ]
        }
      ],
      "name": {
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "module",
          "module": "matplotlib",
          "path": "matplotlib.axes._axes.Axes.angle_spectrum",
          "version": "3.5.1"
        },
        "value": "angle_spectrum"
      },
      "type": null
    },
    {
      "descriptions": [
        {
          "children": [
            {
              "data": {
                "value": "A single spectrum, similar to having a single segment when "
              },
              "type": "Words"
            },
            {
              "data": {
                "value": {
                  "value": "mode"
                }
              },
              "type": "Emph"
            },
            {
              "data": {
                "value": " is 'phase'. Plots a line instead of a colormap."
              },
              "type": "Words"
            }
          ]
        }
      ],
      "name": {
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "module",
          "module": "matplotlib",
          "path": "matplotlib.axes._axes.Axes.phase_spectrum",
          "version": "3.5.1"
        },
        "value": "phase_spectrum"
      },
      "type": null
    }
  ],
  "signature": {
    "value": "specgram(self, x, NFFT=None, Fs=None, Fc=None, detrend=None, window=None, noverlap=None, cmap=None, xextent=None, pad_to=None, sides=None, scale_by_freq=None, mode=None, scale=None, vmin=None, vmax=None, *, data=None, **kwargs)"
  }
}