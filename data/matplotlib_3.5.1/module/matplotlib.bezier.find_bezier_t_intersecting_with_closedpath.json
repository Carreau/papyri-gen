{
  "_content": {
    "Attributes": {
      "children": [],
      "title": null
    },
    "Extended Summary": {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "The intersection point "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "t"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": " is approximated by two parameters "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "t0"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "t1"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": " such that "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "t0"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": " <= "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "t"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": " <= "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "t1"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": "."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Search starts from "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "t0"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": " and "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "t1"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": " and uses a simple bisecting algorithm therefore one of the end points must be inside the path while the other doesn't. The search stops when the distance of the points parametrized by "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "t0"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": " and "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "t1"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": " gets smaller than the given "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "tolerance"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": "."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": null
    },
    "Methods": {
      "children": [],
      "title": null
    },
    "Notes": {
      "children": [],
      "title": null
    },
    "Other Parameters": {
      "children": [],
      "title": null
    },
    "Parameters": {
      "children": [
        {
          "data": {
            "children": [
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "A function returning x, y coordinates of the Bezier at parameter "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": {
                              "value": "t"
                            }
                          },
                          "type": "Emph"
                        },
                        {
                          "data": {
                            "value": ". It must have the signature::      "
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  },
                  {
                    "data": {
                      "value": "bezier_point_at_t(t: float) -> tuple[float, float]"
                    },
                    "type": "BlockVerbatim"
                  }
                ],
                "param": "bezier_point_at_t",
                "type_": "callable"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "A function returning True if a given point (x, y) is inside the closed path. It must have the signature::      "
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  },
                  {
                    "data": {
                      "value": "inside_closedpath(point: tuple[float, float]) -> bool"
                    },
                    "type": "BlockVerbatim"
                  }
                ],
                "param": "inside_closedpath",
                "type_": "callable"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Start parameters for the search."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "t0, t1",
                "type_": "float"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Maximal allowed distance between the final points."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "tolerance",
                "type_": "float"
              }
            ]
          },
          "type": "Parameters"
        }
      ],
      "title": null
    },
    "Raises": {
      "children": [],
      "title": null
    },
    "Receives": {
      "children": [],
      "title": null
    },
    "Returns": {
      "children": [
        {
          "data": {
            "children": [
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "The Bezier path parameters."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "t0, t1",
                "type_": "float"
              }
            ]
          },
          "type": "Parameters"
        }
      ],
      "title": null
    },
    "Summary": {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Find the intersection of the Bezier curve with a closed path."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": null
    },
    "Warnings": {
      "children": [],
      "title": null
    },
    "Warns": {
      "children": [],
      "title": null
    },
    "Yields": {
      "children": [],
      "title": null
    }
  },
  "aliases": [
    "matplotlib.bezier.find_bezier_t_intersecting_with_closedpath"
  ],
  "arbitrary": [],
  "example_section_data": {
    "children": [],
    "title": null
  },
  "item_file": "/matplotlib/bezier.py",
  "item_line": 113,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns"
  ],
  "references": null,
  "refs": [],
  "see_also": [],
  "signature": {
    "value": "find_bezier_t_intersecting_with_closedpath(bezier_point_at_t, inside_closedpath, t0=0.0, t1=1.0, tolerance=0.01)"
  }
}