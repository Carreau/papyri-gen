{
  "_content": {
    "Attributes": {
      "children": [],
      "title": null
    },
    "Extended Summary": {
      "children": [],
      "title": null
    },
    "Methods": {
      "children": [],
      "title": null
    },
    "Notes": {
      "children": [],
      "title": null
    },
    "Other Parameters": {
      "children": [],
      "title": null
    },
    "Parameters": {
      "children": [
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Edge color for each patch making up the collection. The special value 'face' can be passed to make the edgecolor match the facecolor."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "edgecolors",
            "type_": "color or list of colors, default: :rc:`patch.edgecolor`"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Face color for each patch making up the collection."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "facecolors",
            "type_": "color or list of colors, default: :rc:`patch.facecolor`"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Line width for each patch making up the collection."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "linewidths",
            "type_": "float or list of floats, default: :rc:`patch.linewidth`"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Valid strings are ['solid', 'dashed', 'dashdot', 'dotted', '-', '--', '-.', '']. Dash tuples should be of the form::      "
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              },
              {
                "data": {
                  "value": "(offset, onoffseq),"
                },
                "type": "BlockVerbatim"
              },
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "where "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": {
                          "value": "onoffseq"
                        }
                      },
                      "type": "Emph"
                    },
                    {
                      "data": {
                        "value": " is an even length tuple of on and off ink lengths in points. For examples, see "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "/gallery/lines_bars_and_markers/linestyles"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": "."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "linestyles",
            "type_": "str or tuple or list thereof, default: 'solid'"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Style to use for capping lines for all paths in the collection. Allowed values are {'butt', 'projecting', 'round'}."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "capstyle",
            "type_": "`.CapStyle`-like, default: :rc:`patch.capstyle`"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Style to use for joining lines for all paths in the collection. Allowed values are {'miter', 'round', 'bevel'}."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "joinstyle",
            "type_": "`.JoinStyle`-like, default: :rc:`patch.joinstyle`"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Whether each patch in the collection should be drawn with antialiasing."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "antialiaseds",
            "type_": "bool or list of bool, default: :rc:`patch.antialiased`"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "A vector by which to translate each patch after rendering (default is no translation). The translation is performed in screen (pixel) coordinates (i.e. after the Artist's transform is applied)."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "offsets",
            "type_": "(float, float) or list thereof, default: (0, 0)"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "A single transform which will be applied to each "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": {
                          "value": "offsets"
                        }
                      },
                      "type": "Emph"
                    },
                    {
                      "data": {
                        "value": " vector before it is used."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "transOffset",
            "type_": "`~.transforms.Transform`, default: `.IdentityTransform`"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Forwarded to "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "module",
                        "reference": {
                          "kind": "module",
                          "module": "matplotlib",
                          "path": "matplotlib.cm.ScalarMappable",
                          "version": "3.5.1"
                        },
                        "value": ".ScalarMappable"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": ". The default of "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "None"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " means that the first draw call will set "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "vmin"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " and "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "vmax"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " using the minimum and maximum values of the data."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "norm",
            "type_": "`~.colors.Normalize`, optional"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Forwarded to "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "module",
                        "reference": {
                          "kind": "module",
                          "module": "matplotlib",
                          "path": "matplotlib.cm.ScalarMappable",
                          "version": "3.5.1"
                        },
                        "value": ".ScalarMappable"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": ". The default of "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "None"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " will result in "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "image.cmap"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " being used."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "cmap",
            "type_": "`~.colors.Colormap`, optional"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Hatching pattern to use in filled paths, if any. Valid strings are ['/', '\\', '|', '-', '+', 'x', 'o', 'O', '.', '*']. See "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "/gallery/shapes_and_collections/hatch_style_reference"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " for the meaning of each hatch type."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "hatch",
            "type_": "str, optional"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "If "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "pickradius <= 0"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": ", then "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "module",
                        "reference": {
                          "kind": "module",
                          "module": "matplotlib",
                          "path": "matplotlib.collections.Collection.contains",
                          "version": "3.5.1"
                        },
                        "value": ".Collection.contains"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": " will return "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "True"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " whenever the test point is inside of one of the polygons formed by the control points of a Path in the Collection. On the other hand, if it is greater than 0, then we instead check if the test point is contained in a stroke of width "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "2*pickradius"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " following any of the Paths in the Collection."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "pickradius",
            "type_": "float, default: 5.0"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "A URL for each patch to link to once drawn. Currently only works for the SVG backend. See "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "/gallery/misc/hyperlinks_sgskip"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " for examples."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "urls",
            "type_": "list of str, default: None"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "The drawing order, shared by all Patches in the Collection. See "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "/gallery/misc/zorder_demo"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " for all defaults and examples."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "zorder",
            "type_": "float, default: 1"
          },
          "type": "Param"
        }
      ],
      "title": null
    },
    "Raises": {
      "children": [],
      "title": null
    },
    "Receives": {
      "children": [],
      "title": null
    },
    "Returns": {
      "children": [],
      "title": null
    },
    "Summary": {
      "children": [],
      "title": null
    },
    "Warnings": {
      "children": [],
      "title": null
    },
    "Warns": {
      "children": [],
      "title": null
    },
    "Yields": {
      "children": [],
      "title": null
    }
  },
  "aliases": [
    "matplotlib.collections.Collection.__init__"
  ],
  "arbitrary": [],
  "example_section_data": {
    "children": [],
    "title": null
  },
  "item_file": "/matplotlib/collections.py",
  "item_line": 77,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Parameters"
  ],
  "references": null,
  "refs": [],
  "see_also": [],
  "signature": {
    "value": "__init__(self, edgecolors=None, facecolors=None, linewidths=None, linestyles='solid', capstyle=None, joinstyle=None, antialiaseds=None, offsets=None, transOffset=None, norm=None, cmap=None, pickradius=5.0, hatch=None, urls=None, *, zorder=1, **kwargs)"
  }
}