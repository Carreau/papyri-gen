{
  "aliases": [
    "matplotlib.collections.QuadMesh"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "title": null
    },
    "Extended Summary": {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "A quadrilateral mesh is a grid of M by N adjacent qudrilaterals that are defined via a (M+1, N+1) grid of vertices. The quadrilateral (m, n) is defined by the vertices :             "
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": "(m+1, n) ----------- (m+1, n+1)\n   /                   /\n  /                 /\n /               /\n n) -------- (m, n+1)"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "The mesh need not be regular and the polygons need not be convex."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "level": 0,
      "title": null
    },
    "Methods": {
      "children": [],
      "level": 0,
      "title": null
    },
    "Notes": {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Unlike other "
                },
                "type": "Words"
              },
              {
                "data": {
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "module",
                    "module": "matplotlib",
                    "path": "matplotlib.collections.Collection",
                    "version": "3.5.1"
                  },
                  "value": ".Collection"
                },
                "type": "Link"
              },
              {
                "data": {
                  "value": "\\s, the default "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "pickradius"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": " of "
                },
                "type": "Words"
              },
              {
                "data": {
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "module",
                    "module": "matplotlib",
                    "path": "matplotlib.collections.QuadMesh",
                    "version": "3.5.1"
                  },
                  "value": ".QuadMesh"
                },
                "type": "Link"
              },
              {
                "data": {
                  "value": " is 0, i.e. "
                },
                "type": "Words"
              },
              {
                "data": {
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "module",
                    "module": "matplotlib",
                    "path": "matplotlib.artist.Artist.contains",
                    "version": "3.5.1"
                  },
                  "value": "~.Artist.contains"
                },
                "type": "Link"
              },
              {
                "data": {
                  "value": " checks whether the test point is within any of the mesh quadrilaterals."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "There exists a deprecated API version "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "QuadMesh(M, N, coords)"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", where the dimensions are given explicitly and "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "coords"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " is a (M*N, 2) array-like. This has been deprecated in Matplotlib 3.5. The following describes the semantics of this deprecated API."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "A quadrilateral mesh consists of a grid of vertices. The dimensions of this array are ("
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "meshWidth"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": " + 1, "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "meshHeight"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": " + 1). Each vertex in the mesh has a different set of \"mesh coordinates\" representing its position in the topology of the mesh. For any values ("
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "m"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "n"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": ") such that 0 <= "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "m"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": " <= "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "meshWidth"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": " and 0 <= "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "n"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": " <= "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "meshHeight"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": ", the vertices at mesh coordinates ("
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "m"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "n"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": "), ("
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "m"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "n"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": " + 1), ("
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "m"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": " + 1, "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "n"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": " + 1), and ("
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "m"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": " + 1, "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "n"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": ") form one of the quadrilaterals in the mesh. There are thus ("
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "meshWidth"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": " * "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "meshHeight"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": ") quadrilaterals in the mesh.  The mesh need not be regular and the polygons need not be convex."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "A quadrilateral mesh is represented by a (2 x (("
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "meshWidth"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": " + 1) * ("
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "meshHeight"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": " + 1))) numpy array "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "coordinates"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": ", where each row is the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "x"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": " and "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "y"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": " coordinates of one of the vertices.  To define the function that maps from a data point to its corresponding color, use the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "set_cmap"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " method.  Each of these arrays is indexed in row-major order by the mesh coordinates of the vertex (or the mesh coordinates of the lower left vertex, in the case of the colors)."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "For example, the first entry in "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "coordinates"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": " is the coordinates of the vertex at mesh coordinates (0, 0), then the one at (0, 1), then at (0, 2) .. (0, meshWidth), (1, 0), (1, 1), and so on."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "level": 0,
      "title": null
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "title": null
    },
    "Parameters": {
      "children": [
        {
          "data": {
            "children": [
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "The vertices. "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "coordinates[m, n]"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " specifies the (x, y) coordinates of vertex (m, n)."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "coordinates",
                "type_": "(M+1, N+1, 2) array-like"
              },
              {
                "desc": [],
                "param": "antialiased",
                "type_": "bool, default: True"
              },
              {
                "desc": [],
                "param": "shading",
                "type_": "{'flat', 'gouraud'}, default: 'flat'"
              }
            ]
          },
          "type": "Parameters"
        }
      ],
      "level": 0,
      "title": null
    },
    "Raises": {
      "children": [],
      "level": 0,
      "title": null
    },
    "Receives": {
      "children": [],
      "level": 0,
      "title": null
    },
    "Returns": {
      "children": [],
      "level": 0,
      "title": null
    },
    "Summary": {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Class for the efficient drawing of a quadrilateral mesh."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "level": 0,
      "title": null
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "title": null
    },
    "Warns": {
      "children": [],
      "level": 0,
      "title": null
    },
    "Yields": {
      "children": [],
      "level": 0,
      "title": null
    }
  },
  "example_section_data": {
    "children": [],
    "level": 0,
    "title": null
  },
  "item_file": "/matplotlib/collections.py",
  "item_line": 1922,
  "item_type": "<class 'type'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Notes"
  ],
  "references": null,
  "see_also": [],
  "signature": {
    "value": null
  }
}