{
  "_content": {
    "Attributes": {
      "children": [],
      "title": null
    },
    "Extended Summary": {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "After ::      "
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": "@make_norm_from_scale(scale_cls)\nclass norm_cls(Normalize):\n    ..."
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": {
                    "value": "norm_cls"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": " is filled with methods so that normalization computations are forwarded to "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "scale_cls"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": " (i.e., "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "scale_cls"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": " is the scale that would be used for the colorbar of a mappable normalized with "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "norm_cls"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": ")."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "If "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "init"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": " is not passed, then the constructor signature of "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "norm_cls"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": " will be "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "norm_cls(vmin=None, vmax=None, clip=False)"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": "; these three parameters will be forwarded to the base class ("
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "Normalize.__init__"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": "), and a "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "scale_cls"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": " object will be initialized with no arguments (other than a dummy axis)."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "If the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "scale_cls"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": " constructor takes additional parameters, then "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "init"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": " should be passed to "
                },
                "type": "Words"
              },
              {
                "data": {
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "module",
                    "module": "matplotlib",
                    "path": "matplotlib.colors.make_norm_from_scale",
                    "version": "3.5.1"
                  },
                  "value": "make_norm_from_scale"
                },
                "type": "Link"
              },
              {
                "data": {
                  "value": ".  It is a callable which is "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "only"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": " used for its signature.  First, this signature will become the signature of "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "norm_cls"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": ".  Second, the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "norm_cls"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": " constructor will bind the parameters passed to it using this signature, extract the bound "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "vmin"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "vmax"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": ", and "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "clip"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": " values, pass those to "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "Normalize.__init__"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", and forward the remaining bound values (including any defaults defined by the signature) to the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "scale_cls"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": " constructor."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": null
    },
    "Methods": {
      "children": [],
      "title": null
    },
    "Notes": {
      "children": [],
      "title": null
    },
    "Other Parameters": {
      "children": [],
      "title": null
    },
    "Parameters": {
      "children": [],
      "title": null
    },
    "Raises": {
      "children": [],
      "title": null
    },
    "Receives": {
      "children": [],
      "title": null
    },
    "Returns": {
      "children": [],
      "title": null
    },
    "Summary": {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Decorator for building a "
                },
                "type": "Words"
              },
              {
                "data": {
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "module",
                    "module": "matplotlib",
                    "path": "matplotlib.colors.Normalize",
                    "version": "3.5.1"
                  },
                  "value": ".Normalize"
                },
                "type": "Link"
              },
              {
                "data": {
                  "value": " subclass from a "
                },
                "type": "Words"
              },
              {
                "data": {
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "module",
                    "module": "matplotlib",
                    "path": "matplotlib.scale.ScaleBase",
                    "version": "3.5.1"
                  },
                  "value": "~.scale.ScaleBase"
                },
                "type": "Link"
              },
              {
                "data": {
                  "value": " subclass."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": null
    },
    "Warnings": {
      "children": [],
      "title": null
    },
    "Warns": {
      "children": [],
      "title": null
    },
    "Yields": {
      "children": [],
      "title": null
    }
  },
  "aliases": [
    "matplotlib.colors.make_norm_from_scale"
  ],
  "arbitrary": [],
  "example_section_data": {
    "children": [],
    "title": null
  },
  "item_file": "/matplotlib/colors.py",
  "item_line": 1479,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary"
  ],
  "references": null,
  "refs": [],
  "see_also": [],
  "signature": {
    "value": "make_norm_from_scale(scale_cls, base_norm_cls=None, *, init=None)"
  }
}