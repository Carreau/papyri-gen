{
  "aliases": [
    "matplotlib.transforms.Path.contains_point"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    },
    "Extended Summary": {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "The path is always treated as closed; i.e. if the last code is not CLOSEPOLY an implicit segment connecting the last vertex to the first vertex is assumed."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    },
    "Notes": {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "The current algorithm has some limitations:"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "The result is undefined for points exactly at the boundary   (i.e. at the path shifted by "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": {
                              "value": "radius/2"
                            }
                          },
                          "type": "Emph"
                        },
                        {
                          "data": {
                            "value": ")."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "The result is undefined if there is no enclosed area, i.e. all   vertices are on a straight line."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "If bounding lines start to cross each other due to "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": {
                              "value": "radius"
                            }
                          },
                          "type": "Emph"
                        },
                        {
                          "data": {
                            "value": " shift,   the result is not guaranteed to be correct."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              }
            ]
          },
          "type": "BulletList"
        }
      ],
      "level": 0,
      "target": null,
      "title": null
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    },
    "Parameters": {
      "children": [
        {
          "data": {
            "children": [
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "The point (x, y) to check."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "point",
                "type_": "(float, float)"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "If not "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "None"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": ", "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": {
                              "value": "point"
                            }
                          },
                          "type": "Emph"
                        },
                        {
                          "data": {
                            "value": " will be compared to "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "self"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " transformed by "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": {
                              "value": "transform"
                            }
                          },
                          "type": "Emph"
                        },
                        {
                          "data": {
                            "value": "; i.e. for a correct check, "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": {
                              "value": "transform"
                            }
                          },
                          "type": "Emph"
                        },
                        {
                          "data": {
                            "value": " should transform the path into the coordinate system of "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": {
                              "value": "point"
                            }
                          },
                          "type": "Emph"
                        },
                        {
                          "data": {
                            "value": "."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "transform",
                "type_": "`matplotlib.transforms.Transform`, optional"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Add an additional margin on the path in coordinates of "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": {
                              "value": "point"
                            }
                          },
                          "type": "Emph"
                        },
                        {
                          "data": {
                            "value": ". The path is extended tangentially by "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": {
                              "value": "radius/2"
                            }
                          },
                          "type": "Emph"
                        },
                        {
                          "data": {
                            "value": "; i.e. if you would draw the path with a linewidth of "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": {
                              "value": "radius"
                            }
                          },
                          "type": "Emph"
                        },
                        {
                          "data": {
                            "value": ", all points on the line would still be considered to be contained in the area. Conversely, negative values shrink the area: Points on the imaginary line will be considered outside the area."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "radius",
                "type_": "float, default: 0"
              }
            ]
          },
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    },
    "Returns": {
      "children": [
        {
          "data": {
            "children": [
              {
                "desc": [],
                "param": "",
                "type_": "bool"
              }
            ]
          },
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null
    },
    "Summary": {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Return whether the area enclosed by the path contains the given point."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    }
  },
  "example_section_data": {
    "children": [],
    "level": 0,
    "target": null,
    "title": null
  },
  "item_file": "/matplotlib/path.py",
  "item_line": 491,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns",
    "Notes"
  ],
  "references": null,
  "see_also": [],
  "signature": {
    "value": "contains_point(self, point, transform=None, radius=0.0)"
  }
}