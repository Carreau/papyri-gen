{
  "_content": {
    "Attributes": {
      "children": [],
      "title": null
    },
    "Extended Summary": {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Call signatures::      "
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": "plt.axes()\nplt.axes(rect, projection=None, polar=False, **kwargs)\nplt.axes(ax)"
          },
          "type": "BlockVerbatim"
        }
      ],
      "title": null
    },
    "Methods": {
      "children": [],
      "title": null
    },
    "Notes": {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "If the figure already has a axes with key ("
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "args"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "kwargs"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": ") then it will simply make that axes current and return it.  This behavior is deprecated. Meanwhile, if you do not want this behavior (i.e., you want to force the creation of a new axes), you must use a unique set of args and kwargs.  The axes "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "label"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": " attribute has been exposed for this purpose: if you want two axes that are otherwise identical to be added to the figure, make sure you give them unique labels."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": null
    },
    "Other Parameters": {
      "children": [
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "This method also takes the keyword arguments for the returned axes class. The keyword arguments for the rectilinear axes class "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "domain": null,
                        "role": null,
                        "value": "~.axes.Axes"
                      },
                      "type": "Directive"
                    },
                    {
                      "data": {
                        "value": " can be found in the following table but there might also be other keyword arguments if another projection is used, see the actual axes class."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              },
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Properties: adjustable: {'box', 'datalim'} agg_filter: a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array alpha: scalar or None anchor: (float, float) or {'C', 'SW', 'S', 'SE', 'E', 'NE', ...} animated: bool aspect: {'auto', 'equal'} or float autoscale_on: bool autoscalex_on: bool autoscaley_on: bool axes_locator: Callable[[Axes, Renderer], Bbox] axisbelow: bool or 'line' box_aspect: float or None clip_box: "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "module",
                        "reference": {
                          "kind": "module",
                          "module": "matplotlib",
                          "path": "matplotlib.transforms.Bbox",
                          "version": "3.5.1"
                        },
                        "value": ".Bbox"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": " clip_on: bool clip_path: Patch or (Path, Transform) or None facecolor or fc: color figure: "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "module",
                        "reference": {
                          "kind": "module",
                          "module": "matplotlib",
                          "path": "matplotlib.figure.Figure",
                          "version": "3.5.1"
                        },
                        "value": ".Figure"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": " frame_on: bool gid: str in_layout: bool label: object navigate: bool navigate_mode: unknown path_effects: "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "module",
                        "reference": {
                          "kind": "module",
                          "module": "matplotlib",
                          "path": "matplotlib.patheffects.AbstractPathEffect",
                          "version": "3.5.1"
                        },
                        "value": ".AbstractPathEffect"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": " picker: None or bool or float or callable position: [left, bottom, width, height] or "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "module",
                        "reference": {
                          "kind": "module",
                          "module": "matplotlib",
                          "path": "matplotlib.transforms.Bbox",
                          "version": "3.5.1"
                        },
                        "value": "~matplotlib.transforms.Bbox"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": " prop_cycle: unknown rasterization_zorder: float or None rasterized: bool sketch_params: (scale: float, length: float, randomness: float) snap: bool or None title: str transform: "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "module",
                        "reference": {
                          "kind": "module",
                          "module": "matplotlib",
                          "path": "matplotlib.transforms.Transform",
                          "version": "3.5.1"
                        },
                        "value": ".Transform"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": " url: str visible: bool xbound: unknown xlabel: str xlim: (bottom: float, top: float) xmargin: float greater than -0.5 xscale: {\"linear\", \"log\", \"symlog\", \"logit\", ...} or "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "module",
                        "reference": {
                          "kind": "module",
                          "module": "matplotlib",
                          "path": "matplotlib.scale.ScaleBase",
                          "version": "3.5.1"
                        },
                        "value": ".ScaleBase"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": " xticklabels: unknown xticks: unknown ybound: unknown ylabel: str ylim: (bottom: float, top: float) ymargin: float greater than -0.5 yscale: {\"linear\", \"log\", \"symlog\", \"logit\", ...} or "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "module",
                        "reference": {
                          "kind": "module",
                          "module": "matplotlib",
                          "path": "matplotlib.scale.ScaleBase",
                          "version": "3.5.1"
                        },
                        "value": ".ScaleBase"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": " yticklabels: unknown yticks: unknown zorder: float"
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "**kwargs",
            "type_": ""
          },
          "type": "Param"
        }
      ],
      "title": null
    },
    "Parameters": {
      "children": [
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "The exact behavior of this function depends on the type:"
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              },
              {
                "data": {
                  "children": [
                    {
                      "value": [
                        {
                          "data": {
                            "inline": [
                              {
                                "data": {
                                  "value": {
                                    "value": "None"
                                  }
                                },
                                "type": "Emph"
                              },
                              {
                                "data": {
                                  "value": ": A new full window axes is added using   "
                                },
                                "type": "Words"
                              },
                              {
                                "data": {
                                  "value": [
                                    "subplot(**kwargs)"
                                  ]
                                },
                                "type": "Verbatim"
                              },
                              {
                                "data": {
                                  "value": "."
                                },
                                "type": "Words"
                              }
                            ],
                            "inner": []
                          },
                          "type": "Paragraph"
                        }
                      ]
                    },
                    {
                      "value": [
                        {
                          "data": {
                            "inline": [
                              {
                                "data": {
                                  "value": "4-tuple of floats "
                                },
                                "type": "Words"
                              },
                              {
                                "data": {
                                  "value": {
                                    "value": "rect"
                                  }
                                },
                                "type": "Emph"
                              },
                              {
                                "data": {
                                  "value": " = "
                                },
                                "type": "Words"
                              },
                              {
                                "data": {
                                  "value": [
                                    "[left, bottom, width, height]"
                                  ]
                                },
                                "type": "Verbatim"
                              },
                              {
                                "data": {
                                  "value": ".   A new axes is added with dimensions "
                                },
                                "type": "Words"
                              },
                              {
                                "data": {
                                  "value": {
                                    "value": "rect"
                                  }
                                },
                                "type": "Emph"
                              },
                              {
                                "data": {
                                  "value": " in normalized   (0, 1) units using "
                                },
                                "type": "Words"
                              },
                              {
                                "data": {
                                  "domain": null,
                                  "role": null,
                                  "value": "~.Figure.add_axes"
                                },
                                "type": "Directive"
                              },
                              {
                                "data": {
                                  "value": " on the current figure."
                                },
                                "type": "Words"
                              }
                            ],
                            "inner": []
                          },
                          "type": "Paragraph"
                        }
                      ]
                    }
                  ]
                },
                "type": "BulletList"
              }
            ],
            "param": "arg",
            "type_": "None or 4-tuple"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "The projection type of the "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "domain": null,
                        "role": null,
                        "value": "~.axes.Axes"
                      },
                      "type": "Directive"
                    },
                    {
                      "data": {
                        "value": ". "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": {
                          "value": "str"
                        }
                      },
                      "type": "Emph"
                    },
                    {
                      "data": {
                        "value": " is the name of a custom projection, see "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "module",
                        "reference": {
                          "kind": "module",
                          "module": "matplotlib",
                          "path": "matplotlib.projections",
                          "version": "3.5.1"
                        },
                        "value": "~matplotlib.projections"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": ". The default None results in a 'rectilinear' projection."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "projection",
            "type_": "{None, 'aitoff', 'hammer', 'lambert', 'mollweide', 'polar', 'rectilinear', str}, optional"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "If True, equivalent to projection='polar'."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "polar",
            "type_": "bool, default: False"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Share the x or y "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "module",
                        "reference": {
                          "kind": "module",
                          "module": "matplotlib",
                          "path": "matplotlib.axis",
                          "version": "3.5.1"
                        },
                        "value": "~matplotlib.axis"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": " with sharex and/or sharey. The axis will have the same limits, ticks, and scale as the axis of the shared axes."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "sharex, sharey",
            "type_": "`~.axes.Axes`, optional"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "A label for the returned axes."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "label",
            "type_": "str"
          },
          "type": "Param"
        }
      ],
      "title": null
    },
    "Raises": {
      "children": [],
      "title": null
    },
    "Receives": {
      "children": [],
      "title": null
    },
    "Returns": {
      "children": [
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "The returned axes class depends on the projection used. It is "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "domain": null,
                        "role": null,
                        "value": "~.axes.Axes"
                      },
                      "type": "Directive"
                    },
                    {
                      "data": {
                        "value": " if rectilinear projection is used and "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "module",
                        "reference": {
                          "kind": "module",
                          "module": "matplotlib",
                          "path": "matplotlib.projections.polar.PolarAxes",
                          "version": "3.5.1"
                        },
                        "value": ".projections.polar.PolarAxes"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": " if polar projection is used."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "",
            "type_": "`~.axes.Axes`, or a subclass of `~.axes.Axes`"
          },
          "type": "Param"
        }
      ],
      "title": null
    },
    "Summary": {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Add an axes to the current figure and make it the current axes."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": null
    },
    "Warnings": {
      "children": [],
      "title": null
    },
    "Warns": {
      "children": [],
      "title": null
    },
    "Yields": {
      "children": [],
      "title": null
    }
  },
  "aliases": [
    "matplotlib.pyplot.axes"
  ],
  "arbitrary": [],
  "example_section_data": {
    "children": [
      {
        "data": {
          "value": [
            "# Creating a new full window axes",
            "plt.axes()"
          ]
        },
        "type": "BlockQuote"
      },
      {
        "data": {
          "value": [
            "# Creating a new axes with specified dimensions and some kwargs",
            "plt.axes((left, bottom, width, height), facecolor='w')"
          ]
        },
        "type": "BlockQuote"
      }
    ],
    "title": null
  },
  "item_file": "/matplotlib/pyplot.py",
  "item_line": 974,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns",
    "Other Parameters",
    "Notes",
    "See Also",
    "Examples"
  ],
  "references": null,
  "refs": [
    ".Figure.add_axes",
    ".Figure.add_subplot",
    ".Figure.subplots",
    ".pyplot.subplot",
    ".pyplot.subplots"
  ],
  "see_also": [
    {
      "descriptions": [],
      "name": {
        "exists": null,
        "name": ".Figure.add_axes",
        "ref": null
      },
      "type": null
    },
    {
      "descriptions": [],
      "name": {
        "exists": true,
        "name": ".pyplot.subplot",
        "ref": "matplotlib.pyplot.subplot"
      },
      "type": null
    },
    {
      "descriptions": [],
      "name": {
        "exists": null,
        "name": ".Figure.add_subplot",
        "ref": null
      },
      "type": null
    },
    {
      "descriptions": [],
      "name": {
        "exists": null,
        "name": ".Figure.subplots",
        "ref": null
      },
      "type": null
    },
    {
      "descriptions": [],
      "name": {
        "exists": true,
        "name": ".pyplot.subplots",
        "ref": "matplotlib.pyplot.subplots"
      },
      "type": null
    }
  ],
  "signature": {
    "value": "axes(arg=None, **kwargs)"
  }
}