{
  "_content": {
    "Attributes": {
      "children": [],
      "title": null
    },
    "Extended Summary": {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Plot the coherence between "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "x"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": " and "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "y"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": ".  Coherence is the normalized cross spectral density:"
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": "C_ { xy} = \\frac { |P_ { xy}|^2} { P_ { xx}P_ { yy}} "
          },
          "type": "BlockMath"
        }
      ],
      "title": null
    },
    "Methods": {
      "children": [],
      "title": null
    },
    "Notes": {
      "children": [],
      "title": null
    },
    "Other Parameters": {
      "children": [
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "If given, the following parameters also accept a string "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "s"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": ", which is interpreted as "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "data[s]"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " (unless this raises an exception):"
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              },
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": {
                          "value": "x"
                        }
                      },
                      "type": "Emph"
                    },
                    {
                      "data": {
                        "value": ", "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": {
                          "value": "y"
                        }
                      },
                      "type": "Emph"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "data",
            "type_": "indexable object, optional"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Keyword arguments control the "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "module",
                        "reference": {
                          "kind": "module",
                          "module": "matplotlib",
                          "path": "matplotlib.lines.Line2D",
                          "version": "3.5.1"
                        },
                        "value": ".Line2D"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": " properties:"
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              },
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Properties: agg_filter: a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array alpha: scalar or None animated: bool antialiased or aa: bool clip_box: "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "module",
                        "reference": {
                          "kind": "module",
                          "module": "matplotlib",
                          "path": "matplotlib.transforms.Bbox",
                          "version": "3.5.1"
                        },
                        "value": ".Bbox"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": " clip_on: bool clip_path: Patch or (Path, Transform) or None color or c: color dash_capstyle: "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "module",
                        "reference": {
                          "kind": "module",
                          "module": "matplotlib",
                          "path": "matplotlib._enums.CapStyle",
                          "version": "3.5.1"
                        },
                        "value": ".CapStyle"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": " or {'butt', 'projecting', 'round'} dash_joinstyle: "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "module",
                        "reference": {
                          "kind": "module",
                          "module": "matplotlib",
                          "path": "matplotlib._enums.JoinStyle",
                          "version": "3.5.1"
                        },
                        "value": ".JoinStyle"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": " or {'miter', 'round', 'bevel'} dashes: sequence of floats (on/off ink in points) or (None, None) data: (2, N) array or two 1D arrays drawstyle or ds: {'default', 'steps', 'steps-pre', 'steps-mid', 'steps-post'}, default: 'default' figure: "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "module",
                        "reference": {
                          "kind": "module",
                          "module": "matplotlib",
                          "path": "matplotlib.figure.Figure",
                          "version": "3.5.1"
                        },
                        "value": ".Figure"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": " fillstyle: {'full', 'left', 'right', 'bottom', 'top', 'none'} gid: str in_layout: bool label: object linestyle or ls: {'-', '--', '-.', ':', '', (offset, on-off-seq), ...} linewidth or lw: float marker: marker style string, "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "module",
                        "reference": {
                          "kind": "module",
                          "module": "matplotlib",
                          "path": "matplotlib.path.Path",
                          "version": "3.5.1"
                        },
                        "value": "~.path.Path"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": " or "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "module",
                        "reference": {
                          "kind": "module",
                          "module": "matplotlib",
                          "path": "matplotlib.markers.MarkerStyle",
                          "version": "3.5.1"
                        },
                        "value": "~.markers.MarkerStyle"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": " markeredgecolor or mec: color markeredgewidth or mew: float markerfacecolor or mfc: color markerfacecoloralt or mfcalt: color markersize or ms: float markevery: None or int or (int, int) or slice or list[int] or float or (float, float) or list[bool] path_effects: "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "module",
                        "reference": {
                          "kind": "module",
                          "module": "matplotlib",
                          "path": "matplotlib.patheffects.AbstractPathEffect",
                          "version": "3.5.1"
                        },
                        "value": ".AbstractPathEffect"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": " picker: float or callable[[Artist, Event], tuple[bool, dict]] pickradius: float rasterized: bool sketch_params: (scale: float, length: float, randomness: float) snap: bool or None solid_capstyle: "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "module",
                        "reference": {
                          "kind": "module",
                          "module": "matplotlib",
                          "path": "matplotlib._enums.CapStyle",
                          "version": "3.5.1"
                        },
                        "value": ".CapStyle"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": " or {'butt', 'projecting', 'round'} solid_joinstyle: "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "module",
                        "reference": {
                          "kind": "module",
                          "module": "matplotlib",
                          "path": "matplotlib._enums.JoinStyle",
                          "version": "3.5.1"
                        },
                        "value": ".JoinStyle"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": " or {'miter', 'round', 'bevel'} transform: unknown url: str visible: bool xdata: 1D array ydata: 1D array zorder: float"
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "**kwargs",
            "type_": ""
          },
          "type": "Param"
        }
      ],
      "title": null
    },
    "Parameters": {
      "children": [
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "The sampling frequency (samples per time unit).  It is used to calculate the Fourier frequencies, "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": {
                          "value": "freqs"
                        }
                      },
                      "type": "Emph"
                    },
                    {
                      "data": {
                        "value": ", in cycles per time unit."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "Fs",
            "type_": "float, default: 2"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "A function or a vector of length "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": {
                          "value": "NFFT"
                        }
                      },
                      "type": "Emph"
                    },
                    {
                      "data": {
                        "value": ".  To create window vectors see "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "module",
                        "reference": {
                          "kind": "module",
                          "module": "matplotlib",
                          "path": "matplotlib.mlab.window_hanning",
                          "version": "3.5.1"
                        },
                        "value": ".window_hanning"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": ", "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "module",
                        "reference": {
                          "kind": "module",
                          "module": "matplotlib",
                          "path": "matplotlib.mlab.window_none",
                          "version": "3.5.1"
                        },
                        "value": ".window_none"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": ", "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "module",
                        "reference": {
                          "kind": "api",
                          "module": "numpy",
                          "path": "numpy.blackman",
                          "version": "*"
                        },
                        "value": "numpy.blackman"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": ", "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "module",
                        "reference": {
                          "kind": "api",
                          "module": "numpy",
                          "path": "numpy.hamming",
                          "version": "*"
                        },
                        "value": "numpy.hamming"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": ", "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "module",
                        "reference": {
                          "kind": "api",
                          "module": "numpy",
                          "path": "numpy.bartlett",
                          "version": "*"
                        },
                        "value": "numpy.bartlett"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": ", "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "module",
                        "reference": {
                          "kind": "api",
                          "module": "scipy",
                          "path": "scipy.signal",
                          "version": "*"
                        },
                        "value": "scipy.signal"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": ", "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "module",
                        "reference": {
                          "kind": "api",
                          "module": "scipy",
                          "path": "scipy.signal.windows._windows.get_window",
                          "version": "*"
                        },
                        "value": "scipy.signal.get_window"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": ", etc.  If a function is passed as the argument, it must take a data segment as an argument and return the windowed version of the segment."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "window",
            "type_": "callable or ndarray, default: `.window_hanning`"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Which sides of the spectrum to return. 'default' is one-sided for real data and two-sided for complex data. 'onesided' forces the return of a one-sided spectrum, while 'twosided' forces two-sided."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "sides",
            "type_": "{'default', 'onesided', 'twosided'}, optional"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "The number of points to which the data segment is padded when performing the FFT.  This can be different from "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": {
                          "value": "NFFT"
                        }
                      },
                      "type": "Emph"
                    },
                    {
                      "data": {
                        "value": ", which specifies the number of data points used.  While not increasing the actual resolution of the spectrum (the minimum distance between resolvable peaks), this can give more points in the plot, allowing for more detail. This corresponds to the "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": {
                          "value": "n"
                        }
                      },
                      "type": "Emph"
                    },
                    {
                      "data": {
                        "value": " parameter in the call to fft(). The default is None, which sets "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": {
                          "value": "pad_to"
                        }
                      },
                      "type": "Emph"
                    },
                    {
                      "data": {
                        "value": " equal to "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": {
                          "value": "NFFT"
                        }
                      },
                      "type": "Emph"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "pad_to",
            "type_": "int, optional"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "The number of data points used in each block for the FFT.  A power 2 is most efficient.  This should "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": {
                          "value": "NOT"
                        }
                      },
                      "type": "Emph"
                    },
                    {
                      "data": {
                        "value": " be used to get zero padding, or the scaling of the result will be incorrect; use "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": {
                          "value": "pad_to"
                        }
                      },
                      "type": "Emph"
                    },
                    {
                      "data": {
                        "value": " for this instead."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "NFFT",
            "type_": "int, default: 256"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "The function applied to each segment before fft-ing, designed to remove the mean or linear trend.  Unlike in MATLAB, where the "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": {
                          "value": "detrend"
                        }
                      },
                      "type": "Emph"
                    },
                    {
                      "data": {
                        "value": " parameter is a vector, in Matplotlib it is a function.  The "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "~matplotlib.mlab"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " module defines "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "module",
                        "reference": {
                          "kind": "module",
                          "module": "matplotlib",
                          "path": "matplotlib.mlab.detrend_none",
                          "version": "3.5.1"
                        },
                        "value": ".detrend_none"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": ", "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "module",
                        "reference": {
                          "kind": "module",
                          "module": "matplotlib",
                          "path": "matplotlib.mlab.detrend_mean",
                          "version": "3.5.1"
                        },
                        "value": ".detrend_mean"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": ", and "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "module",
                        "reference": {
                          "kind": "module",
                          "module": "matplotlib",
                          "path": "matplotlib.mlab.detrend_linear",
                          "version": "3.5.1"
                        },
                        "value": ".detrend_linear"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": ", but you can use a custom function as well.  You can also use a string to choose one of the functions: 'none' calls "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "module",
                        "reference": {
                          "kind": "module",
                          "module": "matplotlib",
                          "path": "matplotlib.mlab.detrend_none",
                          "version": "3.5.1"
                        },
                        "value": ".detrend_none"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": ". 'mean' calls "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "module",
                        "reference": {
                          "kind": "module",
                          "module": "matplotlib",
                          "path": "matplotlib.mlab.detrend_mean",
                          "version": "3.5.1"
                        },
                        "value": ".detrend_mean"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": ". 'linear' calls "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "module",
                        "reference": {
                          "kind": "module",
                          "module": "matplotlib",
                          "path": "matplotlib.mlab.detrend_linear",
                          "version": "3.5.1"
                        },
                        "value": ".detrend_linear"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": "."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "detrend",
            "type_": "{'none', 'mean', 'linear'} or callable, default: 'none'"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Whether the resulting density values should be scaled by the scaling frequency, which gives density in units of Hz^-1.  This allows for integration over the returned frequency values.  The default is True for MATLAB compatibility."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "scale_by_freq",
            "type_": "bool, default: True"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "The number of points of overlap between blocks."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "noverlap",
            "type_": "int, default: 0 (no overlap)"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "The center frequency of "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": {
                          "value": "x"
                        }
                      },
                      "type": "Emph"
                    },
                    {
                      "data": {
                        "value": ", which offsets the x extents of the plot to reflect the frequency range used when a signal is acquired and then filtered and downsampled to baseband."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "Fc",
            "type_": "int, default: 0"
          },
          "type": "Param"
        }
      ],
      "title": null
    },
    "Raises": {
      "children": [],
      "title": null
    },
    "Receives": {
      "children": [],
      "title": null
    },
    "Returns": {
      "children": [
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "The coherence vector."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "Cxy",
            "type_": "1-D array"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "The frequencies for the elements in "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": {
                          "value": "Cxy"
                        }
                      },
                      "type": "Emph"
                    },
                    {
                      "data": {
                        "value": "."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "freqs",
            "type_": "1-D array"
          },
          "type": "Param"
        }
      ],
      "title": null
    },
    "Summary": {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Plot the coherence between "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "x"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": " and "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "y"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": "."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": null
    },
    "Warnings": {
      "children": [],
      "title": null
    },
    "Warns": {
      "children": [],
      "title": null
    },
    "Yields": {
      "children": [],
      "title": null
    }
  },
  "aliases": [
    "matplotlib.pyplot.cohere"
  ],
  "arbitrary": [],
  "example_section_data": {
    "children": [],
    "title": null
  },
  "item_file": "/matplotlib/pyplot.py",
  "item_line": 2457,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns",
    "Other Parameters",
    "References"
  ],
  "references": null,
  "refs": [],
  "see_also": [],
  "signature": {
    "value": "cohere(x, y, NFFT=256, Fs=2, Fc=0, detrend=<function detrend_none at 0x0000000>, window=<function window_hanning at 0x0000000>, noverlap=0, pad_to=None, sides='default', scale_by_freq=None, *, data=None, **kwargs)"
  }
}