{
  "_content": {
    "Attributes": {
      "children": [],
      "title": null
    },
    "Extended Summary": {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "This is a wrapper of "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": ".Figure.add_subplot"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " which provides additional behavior when working with the implicit API (see the notes section)."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Call signatures::     "
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": "subplot(nrows, ncols, index, **kwargs)\nsubplot(pos, **kwargs)\nsubplot(**kwargs)\nsubplot(ax)"
          },
          "type": "BlockVerbatim"
        }
      ],
      "title": null
    },
    "Methods": {
      "children": [],
      "title": null
    },
    "Notes": {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Creating a new Axes will delete any pre-existing Axes that overlaps with it beyond sharing a boundary::      "
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": "import matplotlib.pyplot as plt\n# plot a line, implicitly creating a subplot(111)\nplt.plot([1, 2, 3])\n# now create a subplot which represents the top plot of a grid\n# with 2 rows and 1 column. Since this subplot will overlap the\n# first, the plot (and its axes) previously created, will be removed\nplt.subplot(211)"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "If you do not want this behavior, use the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": ".Figure.add_subplot"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " method or the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "module",
                    "module": "matplotlib",
                    "path": "matplotlib.pyplot.axes",
                    "version": "3.5.1"
                  },
                  "value": ".pyplot.axes"
                },
                "type": "Link"
              },
              {
                "data": {
                  "value": " function instead."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "If no "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "kwargs"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": " are passed and there exists an Axes in the location specified by "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "args"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": " then that Axes will be returned rather than a new Axes being created."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "If "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "kwargs"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": " are passed and there exists an Axes in the location specified by "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "args"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": ", the projection type is the same, and the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "kwargs"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": " match with the existing Axes, then the existing Axes is returned.  Otherwise a new Axes is created with the specified parameters.  We save a reference to the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "kwargs"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": " which we use for this comparison.  If any of the values in "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "kwargs"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": " are mutable we will not detect the case where they are mutated. In these cases we suggest using "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": ".Figure.add_subplot"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " and the explicit Axes API rather than the implicit pyplot API."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": null
    },
    "Other Parameters": {
      "children": [
        {
          "data": {
            "children": [
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "This method also takes the keyword arguments for the returned axes base class; except for the "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": {
                              "value": "figure"
                            }
                          },
                          "type": "Emph"
                        },
                        {
                          "data": {
                            "value": " argument. The keyword arguments for the rectilinear base class "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "domain": null,
                            "role": null,
                            "value": "~.axes.Axes"
                          },
                          "type": "Directive"
                        },
                        {
                          "data": {
                            "value": " can be found in the following table but there might also be other keyword arguments if another projection is used."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  },
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Properties: adjustable: {'box', 'datalim'} agg_filter: a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array alpha: scalar or None anchor: (float, float) or {'C', 'SW', 'S', 'SE', 'E', 'NE', ...} animated: bool aspect: {'auto', 'equal'} or float autoscale_on: bool autoscalex_on: bool autoscaley_on: bool axes_locator: Callable[[Axes, Renderer], Bbox] axisbelow: bool or 'line' box_aspect: float or None clip_box: "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "exists": true,
                            "kind": "module",
                            "reference": {
                              "kind": "module",
                              "module": "matplotlib",
                              "path": "matplotlib.transforms.Bbox",
                              "version": "3.5.1"
                            },
                            "value": ".Bbox"
                          },
                          "type": "Link"
                        },
                        {
                          "data": {
                            "value": " clip_on: bool clip_path: Patch or (Path, Transform) or None facecolor or fc: color figure: "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "exists": true,
                            "kind": "module",
                            "reference": {
                              "kind": "module",
                              "module": "matplotlib",
                              "path": "matplotlib.figure.Figure",
                              "version": "3.5.1"
                            },
                            "value": ".Figure"
                          },
                          "type": "Link"
                        },
                        {
                          "data": {
                            "value": " frame_on: bool gid: str in_layout: bool label: object navigate: bool navigate_mode: unknown path_effects: "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "exists": true,
                            "kind": "module",
                            "reference": {
                              "kind": "module",
                              "module": "matplotlib",
                              "path": "matplotlib.patheffects.AbstractPathEffect",
                              "version": "3.5.1"
                            },
                            "value": ".AbstractPathEffect"
                          },
                          "type": "Link"
                        },
                        {
                          "data": {
                            "value": " picker: None or bool or float or callable position: [left, bottom, width, height] or "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "exists": true,
                            "kind": "module",
                            "reference": {
                              "kind": "module",
                              "module": "matplotlib",
                              "path": "matplotlib.transforms.Bbox",
                              "version": "3.5.1"
                            },
                            "value": "~matplotlib.transforms.Bbox"
                          },
                          "type": "Link"
                        },
                        {
                          "data": {
                            "value": " prop_cycle: unknown rasterization_zorder: float or None rasterized: bool sketch_params: (scale: float, length: float, randomness: float) snap: bool or None title: str transform: "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "exists": true,
                            "kind": "module",
                            "reference": {
                              "kind": "module",
                              "module": "matplotlib",
                              "path": "matplotlib.transforms.Transform",
                              "version": "3.5.1"
                            },
                            "value": ".Transform"
                          },
                          "type": "Link"
                        },
                        {
                          "data": {
                            "value": " url: str visible: bool xbound: unknown xlabel: str xlim: (bottom: float, top: float) xmargin: float greater than -0.5 xscale: {\"linear\", \"log\", \"symlog\", \"logit\", ...} or "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "exists": true,
                            "kind": "module",
                            "reference": {
                              "kind": "module",
                              "module": "matplotlib",
                              "path": "matplotlib.scale.ScaleBase",
                              "version": "3.5.1"
                            },
                            "value": ".ScaleBase"
                          },
                          "type": "Link"
                        },
                        {
                          "data": {
                            "value": " xticklabels: unknown xticks: unknown ybound: unknown ylabel: str ylim: (bottom: float, top: float) ymargin: float greater than -0.5 yscale: {\"linear\", \"log\", \"symlog\", \"logit\", ...} or "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "exists": true,
                            "kind": "module",
                            "reference": {
                              "kind": "module",
                              "module": "matplotlib",
                              "path": "matplotlib.scale.ScaleBase",
                              "version": "3.5.1"
                            },
                            "value": ".ScaleBase"
                          },
                          "type": "Link"
                        },
                        {
                          "data": {
                            "value": " yticklabels: unknown yticks: unknown zorder: float"
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "**kwargs",
                "type_": ""
              }
            ]
          },
          "type": "Parameters"
        }
      ],
      "title": null
    },
    "Parameters": {
      "children": [
        {
          "data": {
            "children": [
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "The position of the subplot described by one of"
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  },
                  {
                    "data": {
                      "children": [
                        {
                          "children": [
                            {
                              "data": {
                                "children": [
                                  {
                                    "data": {
                                      "value": "Three integers ("
                                    },
                                    "type": "Words"
                                  },
                                  {
                                    "data": {
                                      "value": {
                                        "value": "nrows"
                                      }
                                    },
                                    "type": "Emph"
                                  },
                                  {
                                    "data": {
                                      "value": ", "
                                    },
                                    "type": "Words"
                                  },
                                  {
                                    "data": {
                                      "value": {
                                        "value": "ncols"
                                      }
                                    },
                                    "type": "Emph"
                                  },
                                  {
                                    "data": {
                                      "value": ", "
                                    },
                                    "type": "Words"
                                  },
                                  {
                                    "data": {
                                      "value": {
                                        "value": "index"
                                      }
                                    },
                                    "type": "Emph"
                                  },
                                  {
                                    "data": {
                                      "value": "). The subplot will take the   "
                                    },
                                    "type": "Words"
                                  },
                                  {
                                    "data": {
                                      "value": {
                                        "value": "index"
                                      }
                                    },
                                    "type": "Emph"
                                  },
                                  {
                                    "data": {
                                      "value": " position on a grid with "
                                    },
                                    "type": "Words"
                                  },
                                  {
                                    "data": {
                                      "value": {
                                        "value": "nrows"
                                      }
                                    },
                                    "type": "Emph"
                                  },
                                  {
                                    "data": {
                                      "value": " rows and "
                                    },
                                    "type": "Words"
                                  },
                                  {
                                    "data": {
                                      "value": {
                                        "value": "ncols"
                                      }
                                    },
                                    "type": "Emph"
                                  },
                                  {
                                    "data": {
                                      "value": " columns.   "
                                    },
                                    "type": "Words"
                                  },
                                  {
                                    "data": {
                                      "value": {
                                        "value": "index"
                                      }
                                    },
                                    "type": "Emph"
                                  },
                                  {
                                    "data": {
                                      "value": " starts at 1 in the upper left corner and increases to the   right. "
                                    },
                                    "type": "Words"
                                  },
                                  {
                                    "data": {
                                      "value": {
                                        "value": "index"
                                      }
                                    },
                                    "type": "Emph"
                                  },
                                  {
                                    "data": {
                                      "value": " can also be a two-tuple specifying the ("
                                    },
                                    "type": "Words"
                                  },
                                  {
                                    "data": {
                                      "value": {
                                        "value": "first"
                                      }
                                    },
                                    "type": "Emph"
                                  },
                                  {
                                    "data": {
                                      "value": ",   "
                                    },
                                    "type": "Words"
                                  },
                                  {
                                    "data": {
                                      "value": {
                                        "value": "last"
                                      }
                                    },
                                    "type": "Emph"
                                  },
                                  {
                                    "data": {
                                      "value": ") indices (1-based, and including "
                                    },
                                    "type": "Words"
                                  },
                                  {
                                    "data": {
                                      "value": {
                                        "value": "last"
                                      }
                                    },
                                    "type": "Emph"
                                  },
                                  {
                                    "data": {
                                      "value": ") of the subplot, e.g.,   "
                                    },
                                    "type": "Words"
                                  },
                                  {
                                    "data": {
                                      "value": [
                                        "fig.add_subplot(3, 1, (1, 2))"
                                      ]
                                    },
                                    "type": "Verbatim"
                                  },
                                  {
                                    "data": {
                                      "value": " makes a subplot that spans the   upper 2/3 of the figure."
                                    },
                                    "type": "Words"
                                  }
                                ]
                              },
                              "type": "Paragraph"
                            }
                          ]
                        },
                        {
                          "children": [
                            {
                              "data": {
                                "children": [
                                  {
                                    "data": {
                                      "value": "A 3-digit integer. The digits are interpreted as if given separately   as three single-digit integers, i.e. "
                                    },
                                    "type": "Words"
                                  },
                                  {
                                    "data": {
                                      "value": [
                                        "fig.add_subplot(235)"
                                      ]
                                    },
                                    "type": "Verbatim"
                                  },
                                  {
                                    "data": {
                                      "value": " is the   same as "
                                    },
                                    "type": "Words"
                                  },
                                  {
                                    "data": {
                                      "value": [
                                        "fig.add_subplot(2, 3, 5)"
                                      ]
                                    },
                                    "type": "Verbatim"
                                  },
                                  {
                                    "data": {
                                      "value": ". Note that this can only be used   if there are no more than 9 subplots."
                                    },
                                    "type": "Words"
                                  }
                                ]
                              },
                              "type": "Paragraph"
                            }
                          ]
                        },
                        {
                          "children": [
                            {
                              "data": {
                                "children": [
                                  {
                                    "data": {
                                      "value": "A "
                                    },
                                    "type": "Words"
                                  },
                                  {
                                    "data": {
                                      "exists": true,
                                      "kind": "module",
                                      "reference": {
                                        "kind": "module",
                                        "module": "matplotlib",
                                        "path": "matplotlib.gridspec.SubplotSpec",
                                        "version": "3.5.1"
                                      },
                                      "value": ".SubplotSpec"
                                    },
                                    "type": "Link"
                                  },
                                  {
                                    "data": {
                                      "value": "."
                                    },
                                    "type": "Words"
                                  }
                                ]
                              },
                              "type": "Paragraph"
                            }
                          ]
                        }
                      ]
                    },
                    "type": "BulletList"
                  }
                ],
                "param": "*args",
                "type_": "int, (int, int, *index*), or `.SubplotSpec`, default: (1, 1, 1)"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "The projection type of the subplot ("
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "domain": null,
                            "role": null,
                            "value": "~.axes.Axes"
                          },
                          "type": "Directive"
                        },
                        {
                          "data": {
                            "value": "). "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": {
                              "value": "str"
                            }
                          },
                          "type": "Emph"
                        },
                        {
                          "data": {
                            "value": " is the name of a custom projection, see "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "exists": true,
                            "kind": "module",
                            "reference": {
                              "kind": "module",
                              "module": "matplotlib",
                              "path": "matplotlib.projections",
                              "version": "3.5.1"
                            },
                            "value": "~matplotlib.projections"
                          },
                          "type": "Link"
                        },
                        {
                          "data": {
                            "value": ". The default None results in a 'rectilinear' projection."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "projection",
                "type_": "{None, 'aitoff', 'hammer', 'lambert', 'mollweide', 'polar', 'rectilinear', str}, optional"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "If True, equivalent to projection='polar'."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "polar",
                "type_": "bool, default: False"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Share the x or y "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "exists": true,
                            "kind": "module",
                            "reference": {
                              "kind": "module",
                              "module": "matplotlib",
                              "path": "matplotlib.axis",
                              "version": "3.5.1"
                            },
                            "value": "~matplotlib.axis"
                          },
                          "type": "Link"
                        },
                        {
                          "data": {
                            "value": " with sharex and/or sharey. The axis will have the same limits, ticks, and scale as the axis of the shared axes."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "sharex, sharey",
                "type_": "`~.axes.Axes`, optional"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "A label for the returned axes."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "label",
                "type_": "str"
              }
            ]
          },
          "type": "Parameters"
        }
      ],
      "title": null
    },
    "Raises": {
      "children": [],
      "title": null
    },
    "Receives": {
      "children": [],
      "title": null
    },
    "Returns": {
      "children": [
        {
          "data": {
            "children": [
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "The axes of the subplot. The returned axes base class depends on the projection used. It is "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "domain": null,
                            "role": null,
                            "value": "~.axes.Axes"
                          },
                          "type": "Directive"
                        },
                        {
                          "data": {
                            "value": " if rectilinear projection is used and "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "exists": true,
                            "kind": "module",
                            "reference": {
                              "kind": "module",
                              "module": "matplotlib",
                              "path": "matplotlib.projections.polar.PolarAxes",
                              "version": "3.5.1"
                            },
                            "value": ".projections.polar.PolarAxes"
                          },
                          "type": "Link"
                        },
                        {
                          "data": {
                            "value": " if polar projection is used. The returned axes is then a subplot subclass of the base class."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "",
                "type_": "`.axes.SubplotBase`, or another subclass of `~.axes.Axes`"
              }
            ]
          },
          "type": "Parameters"
        }
      ],
      "title": null
    },
    "Summary": {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Add an Axes to the current figure or retrieve an existing Axes."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": null
    },
    "Warnings": {
      "children": [],
      "title": null
    },
    "Warns": {
      "children": [],
      "title": null
    },
    "Yields": {
      "children": [],
      "title": null
    }
  },
  "aliases": [
    "matplotlib.pyplot.subplot"
  ],
  "arbitrary": [],
  "example_section_data": {
    "children": [
      {
        "data": {
          "value": [
            "plt.subplot(221)"
          ]
        },
        "type": "BlockQuote"
      },
      {
        "data": {
          "value": [
            "# equivalent but more general",
            "ax1 = plt.subplot(2, 2, 1)"
          ]
        },
        "type": "BlockQuote"
      },
      {
        "data": {
          "value": [
            "# add a subplot with no frame",
            "ax2 = plt.subplot(222, frameon=False)"
          ]
        },
        "type": "BlockQuote"
      },
      {
        "data": {
          "value": [
            "# add a polar subplot",
            "plt.subplot(223, projection='polar')"
          ]
        },
        "type": "BlockQuote"
      },
      {
        "data": {
          "value": [
            "# add a red subplot that shares the x-axis with ax1",
            "plt.subplot(224, sharex=ax1, facecolor='red')"
          ]
        },
        "type": "BlockQuote"
      },
      {
        "data": {
          "value": [
            "# delete ax2 from the figure",
            "plt.delaxes(ax2)"
          ]
        },
        "type": "BlockQuote"
      },
      {
        "data": {
          "value": [
            "# add ax2 to the figure again",
            "plt.subplot(ax2)"
          ]
        },
        "type": "BlockQuote"
      },
      {
        "data": {
          "value": [
            "# make the first axes \"current\" again",
            "plt.subplot(221)"
          ]
        },
        "type": "BlockQuote"
      }
    ],
    "title": null
  },
  "item_file": "/matplotlib/pyplot.py",
  "item_line": 1097,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns",
    "Other Parameters",
    "Notes",
    "See Also",
    "Examples"
  ],
  "references": null,
  "refs": [
    ".Figure.add_subplot",
    ".Figure.subplots",
    ".pyplot.axes",
    ".pyplot.subplots"
  ],
  "see_also": [
    {
      "descriptions": [],
      "name": {
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "to-resolve",
          "module": "current-module",
          "path": ".Figure.add_subplot",
          "version": "current-version"
        },
        "value": ".Figure.add_subplot"
      },
      "type": null
    },
    {
      "descriptions": [],
      "name": {
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "module",
          "module": "matplotlib",
          "path": "matplotlib.pyplot.subplots",
          "version": "3.5.1"
        },
        "value": ".pyplot.subplots"
      },
      "type": null
    },
    {
      "descriptions": [],
      "name": {
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "module",
          "module": "matplotlib",
          "path": "matplotlib.pyplot.axes",
          "version": "3.5.1"
        },
        "value": ".pyplot.axes"
      },
      "type": null
    },
    {
      "descriptions": [],
      "name": {
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "to-resolve",
          "module": "current-module",
          "path": ".Figure.subplots",
          "version": "current-version"
        },
        "value": ".Figure.subplots"
      },
      "type": null
    }
  ],
  "signature": {
    "value": "subplot(*args, **kwargs)"
  }
}