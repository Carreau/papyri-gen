{
  "aliases": [
    "matplotlib.sankey.Sankey.add"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    },
    "Extended Summary": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    },
    "Notes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    },
    "Other Parameters": {
      "children": [
        {
          "data": {
            "children": [
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Additional keyword arguments set "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "anchor": null,
                            "exists": true,
                            "kind": "module",
                            "reference": {
                              "kind": "module",
                              "module": "matplotlib",
                              "path": "matplotlib.patches.PathPatch",
                              "version": "3.5.1"
                            },
                            "value": "matplotlib.patches.PathPatch"
                          },
                          "type": "Link"
                        },
                        {
                          "data": {
                            "value": " properties, listed below.  For example, one may want to use "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "fill=False"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " or "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "label=\"A legend entry\""
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": "."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "**kwargs",
                "type_": ""
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "agg_filter: a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array alpha: unknown animated: bool antialiased or aa: bool or None capstyle: "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "anchor": null,
                            "exists": true,
                            "kind": "module",
                            "reference": {
                              "kind": "module",
                              "module": "matplotlib",
                              "path": "matplotlib._enums.CapStyle",
                              "version": "3.5.1"
                            },
                            "value": ".CapStyle"
                          },
                          "type": "Link"
                        },
                        {
                          "data": {
                            "value": " or {'butt', 'projecting', 'round'} clip_box: "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "anchor": null,
                            "exists": true,
                            "kind": "module",
                            "reference": {
                              "kind": "module",
                              "module": "matplotlib",
                              "path": "matplotlib.transforms.Bbox",
                              "version": "3.5.1"
                            },
                            "value": ".Bbox"
                          },
                          "type": "Link"
                        },
                        {
                          "data": {
                            "value": " clip_on: bool clip_path: Patch or (Path, Transform) or None color: color edgecolor or ec: color or None facecolor or fc: color or None figure: "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "anchor": null,
                            "exists": true,
                            "kind": "module",
                            "reference": {
                              "kind": "module",
                              "module": "matplotlib",
                              "path": "matplotlib.figure.Figure",
                              "version": "3.5.1"
                            },
                            "value": ".Figure"
                          },
                          "type": "Link"
                        },
                        {
                          "data": {
                            "value": " fill: bool gid: str hatch: {'/', '\\\\', '|', '-', '+', 'x', 'o', 'O', '.', '*'} in_layout: bool joinstyle: "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "anchor": null,
                            "exists": true,
                            "kind": "module",
                            "reference": {
                              "kind": "module",
                              "module": "matplotlib",
                              "path": "matplotlib._enums.JoinStyle",
                              "version": "3.5.1"
                            },
                            "value": ".JoinStyle"
                          },
                          "type": "Link"
                        },
                        {
                          "data": {
                            "value": " or {'miter', 'round', 'bevel'} label: object linestyle or ls: {'-', '--', '-.', ':', '', (offset, on-off-seq), ...} linewidth or lw: float or None path_effects: "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "anchor": null,
                            "exists": true,
                            "kind": "module",
                            "reference": {
                              "kind": "module",
                              "module": "matplotlib",
                              "path": "matplotlib.patheffects.AbstractPathEffect",
                              "version": "3.5.1"
                            },
                            "value": ".AbstractPathEffect"
                          },
                          "type": "Link"
                        },
                        {
                          "data": {
                            "value": " picker: None or bool or float or callable rasterized: bool sketch_params: (scale: float, length: float, randomness: float) snap: bool or None transform: "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "anchor": null,
                            "exists": true,
                            "kind": "module",
                            "reference": {
                              "kind": "module",
                              "module": "matplotlib",
                              "path": "matplotlib.transforms.Transform",
                              "version": "3.5.1"
                            },
                            "value": ".Transform"
                          },
                          "type": "Link"
                        },
                        {
                          "data": {
                            "value": " url: str visible: bool zorder: float"
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "Properties:",
                "type_": ""
              }
            ]
          },
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null
    },
    "Parameters": {
      "children": [
        {
          "data": {
            "children": [
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Label to be placed at the center of the diagram. Note that "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": {
                              "value": "label"
                            }
                          },
                          "type": "Emph"
                        },
                        {
                          "data": {
                            "value": " (not "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": {
                              "value": "patchlabel"
                            }
                          },
                          "type": "Emph"
                        },
                        {
                          "data": {
                            "value": ") can be passed as keyword argument to create an entry in the legend."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "patchlabel",
                "type_": "str"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Array of flow values.  By convention, inputs are positive and outputs are negative."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  },
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Flows are placed along the top of the diagram from the inside out in order of their index within "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": {
                              "value": "flows"
                            }
                          },
                          "type": "Emph"
                        },
                        {
                          "data": {
                            "value": ".  They are placed along the sides of the diagram from the top down and along the bottom from the outside in."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  },
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "If the sum of the inputs and outputs is nonzero, the discrepancy will appear as a cubic Bezier curve along the top and bottom edges of the trunk."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "flows",
                "type_": "list of float"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "List of orientations of the flows (or a single orientation to be used for all flows).  Valid values are 0 (inputs from the left, outputs to the right), 1 (from and to the top) or -1 (from and to the bottom)."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "orientations",
                "type_": "list of {-1, 0, 1}"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "List of labels for the flows (or a single label to be used for all flows).  Each label may be "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": {
                              "value": "None"
                            }
                          },
                          "type": "Emph"
                        },
                        {
                          "data": {
                            "value": " (no label), or a labeling string. If an entry is a (possibly empty) string, then the quantity for the corresponding flow will be shown below the string.  However, if the "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": {
                              "value": "unit"
                            }
                          },
                          "type": "Emph"
                        },
                        {
                          "data": {
                            "value": " of the main diagram is None, then quantities are never shown, regardless of the value of this argument."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "labels",
                "type_": "list of (str or None)"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Length between the bases of the input and output groups (in data-space units)."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "trunklength",
                "type_": "float"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "List of lengths of the vertical arrows before break-in or after break-away.  If a single value is given, then it will be applied to the first (inside) paths on the top and bottom, and the length of all other arrows will be justified accordingly.  The "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": {
                              "value": "pathlengths"
                            }
                          },
                          "type": "Emph"
                        },
                        {
                          "data": {
                            "value": " are not applied to the horizontal inputs and outputs."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "pathlengths",
                "type_": "list of float"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Index of the prior diagram to which this diagram should be connected."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "prior",
                "type_": "int"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "A (prior, this) tuple indexing the flow of the prior diagram and the flow of this diagram which should be connected.  If this is the first diagram or "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": {
                              "value": "prior"
                            }
                          },
                          "type": "Emph"
                        },
                        {
                          "data": {
                            "value": " is "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": {
                              "value": "None"
                            }
                          },
                          "type": "Emph"
                        },
                        {
                          "data": {
                            "value": ", "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": {
                              "value": "connect"
                            }
                          },
                          "type": "Emph"
                        },
                        {
                          "data": {
                            "value": " will be ignored."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "connect",
                "type_": "(int, int)"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Angle of rotation of the diagram in degrees.  The interpretation of the "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": {
                              "value": "orientations"
                            }
                          },
                          "type": "Emph"
                        },
                        {
                          "data": {
                            "value": " argument will be rotated accordingly (e.g., if "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": {
                              "value": "rotation"
                            }
                          },
                          "type": "Emph"
                        },
                        {
                          "data": {
                            "value": " == 90, an "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": {
                              "value": "orientations"
                            }
                          },
                          "type": "Emph"
                        },
                        {
                          "data": {
                            "value": " entry of 1 means to/from the left).  "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": {
                              "value": "rotation"
                            }
                          },
                          "type": "Emph"
                        },
                        {
                          "data": {
                            "value": " is ignored if this diagram is connected to an existing one (using "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": {
                              "value": "prior"
                            }
                          },
                          "type": "Emph"
                        },
                        {
                          "data": {
                            "value": " and "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": {
                              "value": "connect"
                            }
                          },
                          "type": "Emph"
                        },
                        {
                          "data": {
                            "value": ")."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "rotation",
                "type_": "float"
              }
            ]
          },
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    },
    "Returns": {
      "children": [
        {
          "data": {
            "children": [
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "The current "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "anchor": null,
                            "exists": true,
                            "kind": "module",
                            "reference": {
                              "kind": "module",
                              "module": "matplotlib",
                              "path": "matplotlib.sankey.Sankey",
                              "version": "3.5.1"
                            },
                            "value": ".Sankey"
                          },
                          "type": "Link"
                        },
                        {
                          "data": {
                            "value": " instance."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "",
                "type_": "Sankey"
              }
            ]
          },
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null
    },
    "Summary": {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Add a simple Sankey diagram with flows at the same hierarchical level."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    }
  },
  "example_section_data": {
    "children": [],
    "level": 0,
    "target": null,
    "title": null
  },
  "item_file": "/matplotlib/sankey.py",
  "item_line": 354,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Parameters",
    "Returns",
    "Other Parameters",
    "See Also"
  ],
  "references": null,
  "see_also": [
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "module",
          "module": "matplotlib",
          "path": "matplotlib.sankey.Sankey.finish",
          "version": "3.5.1"
        },
        "value": "Sankey.finish"
      },
      "type": null
    }
  ],
  "signature": {
    "value": "add(self, patchlabel='', flows=None, orientations=None, labels='', trunklength=1.0, pathlengths=0.25, prior=None, connect=(0, 0), rotation=0, **kwargs)"
  }
}