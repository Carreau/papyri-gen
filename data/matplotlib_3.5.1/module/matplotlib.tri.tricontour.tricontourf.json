{
  "_content": {
    "Attributes": {
      "children": [],
      "title": null
    },
    "Extended Summary": {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "The triangulation can be specified in one of two ways; either ::      "
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": "tricontourf(triangulation, ...)"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "where "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "triangulation"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": " is a "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": ".Triangulation"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " object, or ::      "
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": "tricontourf(x, y, ...)\ntricontourf(x, y, triangles, ...)\ntricontourf(x, y, triangles=triangles, ...)\ntricontourf(x, y, mask=mask, ...)\ntricontourf(x, y, triangles, mask=mask, ...)"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "in which case a "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": ".Triangulation"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " object will be created.  See that class' docstring for an explanation of these cases."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "The remaining arguments may be::      "
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": "tricontourf(..., Z)"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "where "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "Z"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": " is the array of values to contour, one per point in the triangulation.  The level values are chosen automatically."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": "tricontourf(..., Z, levels)"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "contour up to "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "levels+1"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": " automatically chosen contour levels ("
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "levels"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": " intervals)."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": "tricontourf(..., Z, levels)"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "draw contour regions at the values specified in sequence "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "levels"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": ", which must be in increasing order."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": "tricontourf(Z, **kwargs)"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Use keyword arguments to control colors, linewidth, origin, cmap ... see below for more details."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": null
    },
    "Methods": {
      "children": [],
      "title": null
    },
    "Notes": {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": ".tricontourf"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " fills intervals that are closed at the top; that is, for boundaries "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "z1"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": " and "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "z2"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": ", the filled region is::      "
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": "z1 < Z <= z2"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "except for the lowest interval, which is closed on both sides (i.e. it includes the lowest value)."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": null
    },
    "Other Parameters": {
      "children": [
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "The colors of the levels, i.e., the contour regions."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              },
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "The sequence is cycled for the levels in ascending order. If the sequence is shorter than the number of levels, it's repeated."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              },
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "As a shortcut, single color strings may be used in place of one-element lists, i.e. "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "'red'"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " instead of "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "['red']"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " to color all levels with the same color. This shortcut does only work for color strings, not for other ways of specifying colors."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              },
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "By default (value "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": {
                          "value": "None"
                        }
                      },
                      "type": "Emph"
                    },
                    {
                      "data": {
                        "value": "), the colormap specified by "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": {
                          "value": "cmap"
                        }
                      },
                      "type": "Emph"
                    },
                    {
                      "data": {
                        "value": " will be used."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "colors",
            "type_": "color string or sequence of colors, optional"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "The alpha blending value, between 0 (transparent) and 1 (opaque)."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "alpha",
            "type_": "float, default: 1"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "A "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "module",
                        "reference": {
                          "kind": "module",
                          "module": "matplotlib",
                          "path": "matplotlib.colors.Colormap",
                          "version": "3.5.1"
                        },
                        "value": ".Colormap"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": " instance or registered colormap name. The colormap maps the level values to colors."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              },
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "If both "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": {
                          "value": "colors"
                        }
                      },
                      "type": "Emph"
                    },
                    {
                      "data": {
                        "value": " and "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": {
                          "value": "cmap"
                        }
                      },
                      "type": "Emph"
                    },
                    {
                      "data": {
                        "value": " are given, an error is raised."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "cmap",
            "type_": "str or `.Colormap`, default: :rc:`image.cmap`"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "If a colormap is used, the "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "module",
                        "reference": {
                          "kind": "module",
                          "module": "matplotlib",
                          "path": "matplotlib.colors.Normalize",
                          "version": "3.5.1"
                        },
                        "value": ".Normalize"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": " instance scales the level values to the canonical colormap range [0, 1] for mapping to colors. If not given, the default linear scaling is used."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "norm",
            "type_": "`~matplotlib.colors.Normalize`, optional"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "If not "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": {
                          "value": "None"
                        }
                      },
                      "type": "Emph"
                    },
                    {
                      "data": {
                        "value": ", either or both of these values will be supplied to the "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "module",
                        "reference": {
                          "kind": "module",
                          "module": "matplotlib",
                          "path": "matplotlib.colors.Normalize",
                          "version": "3.5.1"
                        },
                        "value": ".Normalize"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": " instance, overriding the default color scaling based on "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": {
                          "value": "levels"
                        }
                      },
                      "type": "Emph"
                    },
                    {
                      "data": {
                        "value": "."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "vmin, vmax",
            "type_": "float, optional"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Determines the orientation and exact position of "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": {
                          "value": "Z"
                        }
                      },
                      "type": "Emph"
                    },
                    {
                      "data": {
                        "value": " by specifying the position of "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "Z[0, 0]"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": ".  This is only relevant, if "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": {
                          "value": "X"
                        }
                      },
                      "type": "Emph"
                    },
                    {
                      "data": {
                        "value": ", "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": {
                          "value": "Y"
                        }
                      },
                      "type": "Emph"
                    },
                    {
                      "data": {
                        "value": " are not given."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              },
              {
                "data": {
                  "children": [
                    {
                      "value": [
                        {
                          "data": {
                            "inline": [
                              {
                                "data": {
                                  "value": {
                                    "value": "None"
                                  }
                                },
                                "type": "Emph"
                              },
                              {
                                "data": {
                                  "value": ": "
                                },
                                "type": "Words"
                              },
                              {
                                "data": {
                                  "value": [
                                    "Z[0, 0]"
                                  ]
                                },
                                "type": "Verbatim"
                              },
                              {
                                "data": {
                                  "value": " is at X=0, Y=0 in the lower left corner."
                                },
                                "type": "Words"
                              }
                            ],
                            "inner": []
                          },
                          "type": "Paragraph"
                        }
                      ]
                    },
                    {
                      "value": [
                        {
                          "data": {
                            "inline": [
                              {
                                "data": {
                                  "value": "'lower': "
                                },
                                "type": "Words"
                              },
                              {
                                "data": {
                                  "value": [
                                    "Z[0, 0]"
                                  ]
                                },
                                "type": "Verbatim"
                              },
                              {
                                "data": {
                                  "value": " is at X=0.5, Y=0.5 in the lower left corner."
                                },
                                "type": "Words"
                              }
                            ],
                            "inner": []
                          },
                          "type": "Paragraph"
                        }
                      ]
                    },
                    {
                      "value": [
                        {
                          "data": {
                            "inline": [
                              {
                                "data": {
                                  "value": "'upper': "
                                },
                                "type": "Words"
                              },
                              {
                                "data": {
                                  "value": [
                                    "Z[0, 0]"
                                  ]
                                },
                                "type": "Verbatim"
                              },
                              {
                                "data": {
                                  "value": " is at X=N+0.5, Y=0.5 in the upper left corner."
                                },
                                "type": "Words"
                              }
                            ],
                            "inner": []
                          },
                          "type": "Paragraph"
                        }
                      ]
                    },
                    {
                      "value": [
                        {
                          "data": {
                            "inline": [
                              {
                                "data": {
                                  "value": "'image': Use the value from "
                                },
                                "type": "Words"
                              },
                              {
                                "data": {
                                  "value": [
                                    "image.origin"
                                  ]
                                },
                                "type": "Verbatim"
                              },
                              {
                                "data": {
                                  "value": "."
                                },
                                "type": "Words"
                              }
                            ],
                            "inner": []
                          },
                          "type": "Paragraph"
                        }
                      ]
                    }
                  ]
                },
                "type": "BulletList"
              }
            ],
            "param": "origin",
            "type_": "{*None*, 'upper', 'lower', 'image'}, default: None"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "If "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": {
                          "value": "origin"
                        }
                      },
                      "type": "Emph"
                    },
                    {
                      "data": {
                        "value": " is not "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": {
                          "value": "None"
                        }
                      },
                      "type": "Emph"
                    },
                    {
                      "data": {
                        "value": ", then "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": {
                          "value": "extent"
                        }
                      },
                      "type": "Emph"
                    },
                    {
                      "data": {
                        "value": " is interpreted as in "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "domain": null,
                        "role": null,
                        "value": ".imshow"
                      },
                      "type": "Directive"
                    },
                    {
                      "data": {
                        "value": ": it gives the outer pixel boundaries. In this case, the position of Z[0, 0] is the center of the pixel, not a corner. If "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": {
                          "value": "origin"
                        }
                      },
                      "type": "Emph"
                    },
                    {
                      "data": {
                        "value": " is "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": {
                          "value": "None"
                        }
                      },
                      "type": "Emph"
                    },
                    {
                      "data": {
                        "value": ", then ("
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": {
                          "value": "x0"
                        }
                      },
                      "type": "Emph"
                    },
                    {
                      "data": {
                        "value": ", "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": {
                          "value": "y0"
                        }
                      },
                      "type": "Emph"
                    },
                    {
                      "data": {
                        "value": ") is the position of Z[0, 0], and ("
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": {
                          "value": "x1"
                        }
                      },
                      "type": "Emph"
                    },
                    {
                      "data": {
                        "value": ", "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": {
                          "value": "y1"
                        }
                      },
                      "type": "Emph"
                    },
                    {
                      "data": {
                        "value": ") is the position of Z[-1, -1]."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              },
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "This argument is ignored if "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": {
                          "value": "X"
                        }
                      },
                      "type": "Emph"
                    },
                    {
                      "data": {
                        "value": " and "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": {
                          "value": "Y"
                        }
                      },
                      "type": "Emph"
                    },
                    {
                      "data": {
                        "value": " are specified in the call to contour."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "extent",
            "type_": "(x0, x1, y0, y1), optional"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "The locator is used to determine the contour levels if they are not given explicitly via "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": {
                          "value": "levels"
                        }
                      },
                      "type": "Emph"
                    },
                    {
                      "data": {
                        "value": ". Defaults to "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "module",
                        "reference": {
                          "kind": "module",
                          "module": "matplotlib",
                          "path": "matplotlib.ticker.MaxNLocator",
                          "version": "3.5.1"
                        },
                        "value": "~.ticker.MaxNLocator"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": "."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "locator",
            "type_": "ticker.Locator subclass, optional"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Determines the "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "tricontourf"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": "-coloring of values that are outside the "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": {
                          "value": "levels"
                        }
                      },
                      "type": "Emph"
                    },
                    {
                      "data": {
                        "value": " range."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              },
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "If 'neither', values outside the "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": {
                          "value": "levels"
                        }
                      },
                      "type": "Emph"
                    },
                    {
                      "data": {
                        "value": " range are not colored.  If 'min', 'max' or 'both', color the values below, above or below and above the "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": {
                          "value": "levels"
                        }
                      },
                      "type": "Emph"
                    },
                    {
                      "data": {
                        "value": " range."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              },
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Values below "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "min(levels)"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " and above "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "max(levels)"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " are mapped to the under/over values of the "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "module",
                        "reference": {
                          "kind": "module",
                          "module": "matplotlib",
                          "path": "matplotlib.colors.Colormap",
                          "version": "3.5.1"
                        },
                        "value": ".Colormap"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": ". Note that most colormaps do not have dedicated colors for these by default, so that the over and under values are the edge values of the colormap.  You may want to set these values explicitly using "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "module",
                        "reference": {
                          "kind": "module",
                          "module": "matplotlib",
                          "path": "matplotlib.colors.Colormap.set_under",
                          "version": "3.5.1"
                        },
                        "value": ".Colormap.set_under"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": " and "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "module",
                        "reference": {
                          "kind": "module",
                          "module": "matplotlib",
                          "path": "matplotlib.colors.Colormap.set_over",
                          "version": "3.5.1"
                        },
                        "value": ".Colormap.set_over"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": "."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              },
              {
                "data": {
                  "children": [
                    {
                      "inline": [
                        {
                          "data": {
                            "value": "An existing `.TriContourSet` does not get notified if properties of its colormap are changed. Therefore, an explicit call to `.ContourSet.changed ( )` is needed after modifying the colormap. The explicit call can be left out, if a colorbar is assigned to the `.TriContourSet` because it internally calls `.ContourSet.changed ( )`. "
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    }
                  ],
                  "kind": "note",
                  "title": ""
                },
                "type": "Admonition"
              }
            ],
            "param": "extend",
            "type_": "{'neither', 'both', 'min', 'max'}, default: 'neither'"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Override axis units by specifying an instance of a "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "matplotlib.units.ConversionInterface"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": "."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "xunits, yunits",
            "type_": "registered units, optional"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Enable antialiasing, overriding the defaults.  For filled contours, the default is "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": {
                          "value": "True"
                        }
                      },
                      "type": "Emph"
                    },
                    {
                      "data": {
                        "value": ".  For line contours, it is taken from "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "lines.antialiased"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": "."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "antialiased",
            "type_": "bool, optional"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "A list of cross hatch patterns to use on the filled areas. If None, no hatching will be added to the contour. Hatching is supported in the PostScript, PDF, SVG and Agg backends only."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "hatches",
            "type_": "list[str], optional"
          },
          "type": "Param"
        }
      ],
      "title": null
    },
    "Parameters": {
      "children": [
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "The unstructured triangular grid."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              },
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "If specified, then "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": {
                          "value": "x"
                        }
                      },
                      "type": "Emph"
                    },
                    {
                      "data": {
                        "value": ", "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": {
                          "value": "y"
                        }
                      },
                      "type": "Emph"
                    },
                    {
                      "data": {
                        "value": ", "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": {
                          "value": "triangles"
                        }
                      },
                      "type": "Emph"
                    },
                    {
                      "data": {
                        "value": ", and "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": {
                          "value": "mask"
                        }
                      },
                      "type": "Emph"
                    },
                    {
                      "data": {
                        "value": " are not accepted."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "triangulation",
            "type_": "`.Triangulation`, optional"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "The coordinates of the values in "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": {
                          "value": "Z"
                        }
                      },
                      "type": "Emph"
                    },
                    {
                      "data": {
                        "value": "."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "x, y",
            "type_": "array-like, optional"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "For each triangle, the indices of the three points that make up the triangle, ordered in an anticlockwise manner.  If not specified, the Delaunay triangulation is calculated."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "triangles",
            "type_": "(ntri, 3) array-like of int, optional"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Which triangles are masked out."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "mask",
            "type_": "(ntri,) array-like of bool, optional"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "The height values over which the contour is drawn."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "Z",
            "type_": "2D array-like"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Determines the number and positions of the contour lines / regions."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              },
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "If an int "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": {
                          "value": "n"
                        }
                      },
                      "type": "Emph"
                    },
                    {
                      "data": {
                        "value": ", use "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "module",
                        "reference": {
                          "kind": "module",
                          "module": "matplotlib",
                          "path": "matplotlib.ticker.MaxNLocator",
                          "version": "3.5.1"
                        },
                        "value": "~matplotlib.ticker.MaxNLocator"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": ", which tries to automatically choose no more than "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": {
                          "value": "n+1"
                        }
                      },
                      "type": "Emph"
                    },
                    {
                      "data": {
                        "value": " \"nice\" contour levels between "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": {
                          "value": "vmin"
                        }
                      },
                      "type": "Emph"
                    },
                    {
                      "data": {
                        "value": " and "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": {
                          "value": "vmax"
                        }
                      },
                      "type": "Emph"
                    },
                    {
                      "data": {
                        "value": "."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              },
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "If array-like, draw contour lines at the specified levels.  The values must be in increasing order."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "levels",
            "type_": "int or array-like, optional"
          },
          "type": "Param"
        }
      ],
      "title": null
    },
    "Raises": {
      "children": [],
      "title": null
    },
    "Receives": {
      "children": [],
      "title": null
    },
    "Returns": {
      "children": [
        {
          "data": {
            "desc": [],
            "param": "",
            "type_": "`~matplotlib.tri.TriContourSet`"
          },
          "type": "Param"
        }
      ],
      "title": null
    },
    "Summary": {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Draw contour regions on an unstructured triangular grid."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": null
    },
    "Warnings": {
      "children": [],
      "title": null
    },
    "Warns": {
      "children": [],
      "title": null
    },
    "Yields": {
      "children": [],
      "title": null
    }
  },
  "aliases": [
    "matplotlib.tri.tricontourf"
  ],
  "arbitrary": [],
  "example_section_data": {
    "children": [],
    "title": null
  },
  "item_file": "/matplotlib/tri/tricontour.py",
  "item_line": 284,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns",
    "Other Parameters",
    "Notes"
  ],
  "references": null,
  "refs": [],
  "see_also": [],
  "signature": {
    "value": "tricontourf(ax, *args, **kwargs)"
  }
}