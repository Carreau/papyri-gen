{
  "aliases": [
    "matplotlib._api.select_matching_signature"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    },
    "Extended Summary": {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": {
                    "value": "funcs"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": " is a list of functions which should not raise any exception (other than "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "TypeError"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " if the arguments passed do not match their signature)."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "anchor": null,
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "module",
                    "module": "matplotlib",
                    "path": "matplotlib._api.select_matching_signature",
                    "version": "3.6.2"
                  },
                  "value": "select_matching_signature"
                },
                "type": "Link"
              },
              {
                "data": {
                  "value": " tries to call each of the functions in "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "funcs"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": " with "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "*args, **kwargs"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " (in the order in which they are given).  Calls that fail with a "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "TypeError"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " are silently skipped.  As soon as a call succeeds, "
                },
                "type": "Words"
              },
              {
                "data": {
                  "anchor": null,
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "module",
                    "module": "matplotlib",
                    "path": "matplotlib._api.select_matching_signature",
                    "version": "3.6.2"
                  },
                  "value": "select_matching_signature"
                },
                "type": "Link"
              },
              {
                "data": {
                  "value": " returns its return value.  If no function accepts "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "*args, **kwargs"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", then the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "TypeError"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " raised by the last failing call is re-raised."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Callers should normally make sure that any "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "*args, **kwargs"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " can only bind a single "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "func"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": " (to avoid any ambiguity), although this is not checked by "
                },
                "type": "Words"
              },
              {
                "data": {
                  "anchor": null,
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "module",
                    "module": "matplotlib",
                    "path": "matplotlib._api.select_matching_signature",
                    "version": "3.6.2"
                  },
                  "value": "select_matching_signature"
                },
                "type": "Link"
              },
              {
                "data": {
                  "value": "."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    },
    "Notes": {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "anchor": null,
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "module",
                    "module": "matplotlib",
                    "path": "matplotlib._api.select_matching_signature",
                    "version": "3.6.2"
                  },
                  "value": "select_matching_signature"
                },
                "type": "Link"
              },
              {
                "data": {
                  "value": " is intended to help implementing signature-overloaded functions.  In general, such functions should be avoided, except for back-compatibility concerns.  A typical use pattern is ::"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "children": [
                    {
                      "dd": [
                        {
                          "data": {
                            "children": [
                              {
                                "dd": [
                                  {
                                    "data": {
                                      "children": [
                                        {
                                          "data": {
                                            "value": "[lambda old1, old2: locals(), lambda new: locals()],             *args, **kwargs)"
                                          },
                                          "type": "Words"
                                        }
                                      ]
                                    },
                                    "type": "Paragraph"
                                  }
                                ],
                                "dt": {
                                  "children": [
                                    {
                                      "data": {
                                        "value": "params = select_matching_signature("
                                      },
                                      "type": "Words"
                                    }
                                  ]
                                }
                              },
                              {
                                "dd": [
                                  {
                                    "data": {
                                      "children": [
                                        {
                                          "data": {
                                            "value": "warn_deprecated(...)             old1, old2 = params.values()  # note that locals() is ordered."
                                          },
                                          "type": "Words"
                                        }
                                      ]
                                    },
                                    "type": "Paragraph"
                                  }
                                ],
                                "dt": {
                                  "children": [
                                    {
                                      "data": {
                                        "value": "if \"old1\" in params:"
                                      },
                                      "type": "Words"
                                    }
                                  ]
                                }
                              },
                              {
                                "dd": [
                                  {
                                    "data": {
                                      "children": [
                                        {
                                          "data": {
                                            "value": "new, = params.values()"
                                          },
                                          "type": "Words"
                                        }
                                      ]
                                    },
                                    "type": "Paragraph"
                                  }
                                ],
                                "dt": {
                                  "children": [
                                    {
                                      "data": {
                                        "value": "else:"
                                      },
                                      "type": "Words"
                                    }
                                  ]
                                }
                              }
                            ]
                          },
                          "type": "DefList"
                        }
                      ],
                      "dt": {
                        "children": [
                          {
                            "data": {
                              "value": "def my_func(*args, **kwargs):"
                            },
                            "type": "Words"
                          }
                        ]
                      }
                    }
                  ]
                },
                "type": "DefList"
              }
            ]
          },
          "type": "BlockQuote"
        }
      ],
      "level": 0,
      "target": null,
      "title": null
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    },
    "Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    },
    "Returns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    },
    "Summary": {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Select and call the function that accepts "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "*args, **kwargs"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": "."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    }
  },
  "example_section_data": {
    "children": [],
    "level": 0,
    "target": null,
    "title": null
  },
  "item_file": "/matplotlib/_api/__init__.py",
  "item_line": 285,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Notes"
  ],
  "references": null,
  "see_also": [],
  "signature": {
    "value": "select_matching_signature(funcs, *args, **kwargs)"
  }
}