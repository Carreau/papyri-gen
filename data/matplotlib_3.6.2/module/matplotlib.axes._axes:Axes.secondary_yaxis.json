{
  "aliases": [
    "matplotlib.pyplot.Axes.secondary_yaxis"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "For example if we want to have a second scale for the data plotted on the yaxis."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Other miscellaneous axes parameters."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "**kwargs",
              "type": "Param",
              "type_": "`~matplotlib.axes.Axes` properties."
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The position to put the secondary axis.  Strings can be 'top' or 'bottom' for orientation='x' and 'right' or 'left' for orientation='y'. A float indicates the relative position on the parent axes to put the new axes, 0.0 being the bottom (or left) and 1.0 being the top (or right)."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "location",
              "type": "Param",
              "type_": "{'top', 'bottom', 'left', 'right'} or float"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "If a 2-tuple of functions, the user specifies the transform function and its inverse.  i.e. "
                    },
                    {
                      "type": "inlineCode",
                      "value": "functions=(lambda x: 2 / x, lambda x: 2 / x)"
                    },
                    {
                      "type": "text",
                      "value": " would be an reciprocal transform with a factor of 2. Both functions must accept numpy arrays as input."
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The user can also directly supply a subclass of "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": ".transforms.Transform"
                    },
                    {
                      "type": "text",
                      "value": " so long as it has an inverse."
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "See "
                    },
                    {
                      "type": "inlineCode",
                      "value": "/gallery/subplots_axes_and_figures/secondary_axis"
                    },
                    {
                      "type": "text",
                      "value": " for examples of making these conversions."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "functions",
              "type": "Param",
              "type_": "2-tuple of func, or Transform with an inverse"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [
        {
          "children": [
            {
              "desc": [],
              "param": "ax",
              "type": "Param",
              "type_": "axes._secondary_axes.SecondaryAxis"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Add a second y-axis to this Axes."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "This method is experimental as of 3.1, and the API may change."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [
      {
        "type": "text",
        "value": "Add a secondary Axes that converts from radians to degrees"
      },
      {
        "type": "text",
        "value": ".. plot::"
      },
      {
        "type": "text",
        "value": "    fig, ax = plt.subplots()\n    ax.plot(range(1, 360, 5), range(1, 360, 5))\n    ax.set_ylabel('degrees')\n    secax = ax.secondary_yaxis('right', functions=(np.deg2rad,\n                                                   np.rad2deg))\n    secax.set_ylabel('radians')"
      }
    ],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/matplotlib/axes/_axes.py",
  "item_line": 583,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Warnings",
    "Parameters",
    "Returns",
    "Other Parameters",
    "Examples"
  ],
  "references": null,
  "see_also": [],
  "signature": {
    "type": "Signature",
    "value": "(self, location, *, functions=None, **kwargs)"
  },
  "type": "DocBlob"
}