{
  "aliases": [
    "matplotlib.backend_bases.MouseEvent"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [
        {
          "data": {
            "children": [
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "The button pressed. 'up' and 'down' are used for scroll events."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  },
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Note that LEFT and RIGHT actually refer to the \"primary\" and \"secondary\" buttons, i.e. if the user inverts their left and right buttons (\"left-handed setting\") then the LEFT button will be the one physically on the right."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  },
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "If this is unset, "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": {
                              "value": "name"
                            }
                          },
                          "type": "Emph"
                        },
                        {
                          "data": {
                            "value": " is \"scroll_event\", and "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": {
                              "value": "step"
                            }
                          },
                          "type": "Emph"
                        },
                        {
                          "data": {
                            "value": " is nonzero, then this will be set to \"up\" or \"down\" depending on the sign of "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": {
                              "value": "step"
                            }
                          },
                          "type": "Emph"
                        },
                        {
                          "data": {
                            "value": "."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "button",
                "type_": "None or `MouseButton` or {'up', 'down'}"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "The key pressed when the mouse event triggered, e.g. 'shift'. See "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "anchor": null,
                            "exists": true,
                            "kind": "module",
                            "reference": {
                              "kind": "module",
                              "module": "matplotlib",
                              "path": "matplotlib.backend_bases.KeyEvent",
                              "version": "3.6.2"
                            },
                            "value": "KeyEvent"
                          },
                          "type": "Link"
                        },
                        {
                          "data": {
                            "value": "."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  },
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "children": [
                              {
                                "data": {
                                  "value": "This key is currently obtained from the last 'key_press_event' or 'key_release_event' that occurred within the canvas.  Thus, if the last change of keyboard state occurred while the canvas did not have focus, this attribute will be wrong."
                                },
                                "type": "Words"
                              }
                            ]
                          },
                          "type": "Paragraph"
                        }
                      ],
                      "kind": "warning",
                      "title": ""
                    },
                    "type": "Admonition"
                  }
                ],
                "param": "key",
                "type_": "None or str"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "The number of scroll steps (positive for 'up', negative for 'down'). This applies only to 'scroll_event' and defaults to 0 otherwise."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "step",
                "type_": "float"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Whether the event is a double-click. This applies only to 'button_press_event' and is False otherwise. In particular, it's not used in 'button_release_event'."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "dblclick",
                "type_": "bool"
              }
            ]
          },
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null
    },
    "Extended Summary": {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "A MouseEvent has a number of special attributes in addition to those defined by the parent "
                },
                "type": "Words"
              },
              {
                "data": {
                  "anchor": null,
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "module",
                    "module": "matplotlib",
                    "path": "matplotlib.backend_bases.Event",
                    "version": "3.6.2"
                  },
                  "value": "Event"
                },
                "type": "Link"
              },
              {
                "data": {
                  "value": " and "
                },
                "type": "Words"
              },
              {
                "data": {
                  "anchor": null,
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "module",
                    "module": "matplotlib",
                    "path": "matplotlib.backend_bases.LocationEvent",
                    "version": "3.6.2"
                  },
                  "value": "LocationEvent"
                },
                "type": "Link"
              },
              {
                "data": {
                  "value": " classes."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    },
    "Notes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    },
    "Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    },
    "Returns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    },
    "Summary": {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "A mouse event ('button_press_event', 'button_release_event', 'scroll_event', 'motion_notify_event')."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    }
  },
  "example_section_data": {
    "children": [
      {
        "data": {
          "children": [
            {
              "data": {
                "children": [
                  {
                    "dd": [
                      {
                        "data": {
                          "children": [
                            {
                              "data": {
                                "value": "print('you pressed', event.button, event.xdata, event.ydata)"
                              },
                              "type": "Words"
                            }
                          ]
                        },
                        "type": "Paragraph"
                      }
                    ],
                    "dt": {
                      "children": [
                        {
                          "data": {
                            "value": "def on_press(event):"
                          },
                          "type": "Words"
                        }
                      ]
                    }
                  }
                ]
              },
              "type": "DefList"
            }
          ]
        },
        "type": "BlockQuote"
      },
      {
        "data": {
          "children": [
            {
              "data": {
                "children": [
                  {
                    "data": {
                      "value": "cid = fig.canvas.mpl_connect('button_press_event', on_press)"
                    },
                    "type": "Words"
                  }
                ]
              },
              "type": "Paragraph"
            }
          ]
        },
        "type": "BlockQuote"
      }
    ],
    "level": 0,
    "target": null,
    "title": null
  },
  "item_file": "/matplotlib/backend_bases.py",
  "item_line": 1342,
  "item_type": "<class 'type'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Attributes",
    "Examples"
  ],
  "references": null,
  "see_also": [],
  "signature": {
    "value": null
  }
}