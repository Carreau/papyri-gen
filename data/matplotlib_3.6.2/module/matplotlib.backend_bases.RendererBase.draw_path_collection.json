{
  "aliases": [
    "matplotlib.backend_bases.RendererBase.draw_path_collection"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    },
    "Extended Summary": {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Each path is first transformed by the corresponding entry in "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "all_transforms"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": " (a list of (3, 3) matrices) and then by "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "master_transform"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": ".  They are then translated by the corresponding entry in "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "offsets"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": ", which has been first transformed by "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "offset_trans"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": "."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": {
                    "value": "facecolors"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "edgecolors"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "linewidths"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "linestyles"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": ", and "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "antialiased"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": " are lists that set the corresponding properties."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": {
                    "value": "offset_position"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": " is unused now, but the argument is kept for backwards compatibility."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "The base (fallback) implementation makes multiple calls to "
                },
                "type": "Words"
              },
              {
                "data": {
                  "anchor": null,
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "module",
                    "module": "matplotlib",
                    "path": "matplotlib.backend_bases.RendererBase.draw_path",
                    "version": "3.6.2"
                  },
                  "value": "draw_path"
                },
                "type": "Link"
              },
              {
                "data": {
                  "value": ". Backends may want to override this in order to render each set of path data only once, and then reference that path multiple times with the different offsets, colors, styles etc.  The generator methods "
                },
                "type": "Words"
              },
              {
                "data": {
                  "anchor": null,
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "module",
                    "module": "matplotlib",
                    "path": "matplotlib.backend_bases.RendererBase._iter_collection_raw_paths",
                    "version": "3.6.2"
                  },
                  "value": "_iter_collection_raw_paths"
                },
                "type": "Link"
              },
              {
                "data": {
                  "value": " and "
                },
                "type": "Words"
              },
              {
                "data": {
                  "anchor": null,
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "module",
                    "module": "matplotlib",
                    "path": "matplotlib.backend_bases.RendererBase._iter_collection",
                    "version": "3.6.2"
                  },
                  "value": "_iter_collection"
                },
                "type": "Link"
              },
              {
                "data": {
                  "value": " are provided to help with (and standardize) the implementation across backends.  It is highly recommended to use those generators, so that changes to the behavior of "
                },
                "type": "Words"
              },
              {
                "data": {
                  "anchor": null,
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "module",
                    "module": "matplotlib",
                    "path": "matplotlib.backend_bases.RendererBase.draw_path_collection",
                    "version": "3.6.2"
                  },
                  "value": "draw_path_collection"
                },
                "type": "Link"
              },
              {
                "data": {
                  "value": " can be made globally."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    },
    "Notes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    },
    "Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    },
    "Returns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    },
    "Summary": {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Draw a collection of "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "paths"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": "."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    }
  },
  "example_section_data": {
    "children": [],
    "level": 0,
    "target": null,
    "title": null
  },
  "item_file": "/matplotlib/backend_bases.py",
  "item_line": 223,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary"
  ],
  "references": null,
  "see_also": [],
  "signature": {
    "value": "draw_path_collection(self, gc, master_transform, paths, all_transforms, offsets, offset_trans, facecolors, edgecolors, linewidths, linestyles, antialiaseds, urls, offset_position)"
  }
}