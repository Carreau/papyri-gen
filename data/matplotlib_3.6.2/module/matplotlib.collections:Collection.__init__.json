{
  "aliases": [
    "matplotlib.collections.Collection.__init__"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Edge color for each patch making up the collection. The special value 'face' can be passed to make the edgecolor match the facecolor."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "edgecolors",
              "type": "Param",
              "type_": "color or list of colors, default: :rc:`patch.edgecolor`"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Face color for each patch making up the collection."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "facecolors",
              "type": "Param",
              "type_": "color or list of colors, default: :rc:`patch.facecolor`"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Line width for each patch making up the collection."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "linewidths",
              "type": "Param",
              "type_": "float or list of floats, default: :rc:`patch.linewidth`"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Valid strings are ['solid', 'dashed', 'dashdot', 'dotted', '-', '--', '-.', '']. Dash tuples should be of the form      "
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "type": "code",
                  "value": "(offset, onoffseq),"
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "where "
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "onoffseq"
                        }
                      ],
                      "type": "emphasis"
                    },
                    {
                      "type": "text",
                      "value": " is an even length tuple of on and off ink lengths in points. For examples, see "
                    },
                    {
                      "type": "inlineCode",
                      "value": "/gallery/lines_bars_and_markers/linestyles"
                    },
                    {
                      "type": "text",
                      "value": "."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "linestyles",
              "type": "Param",
              "type_": "str or tuple or list thereof, default: 'solid'"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Style to use for capping lines for all paths in the collection. Allowed values are {'butt', 'projecting', 'round'}."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "capstyle",
              "type": "Param",
              "type_": "`.CapStyle`-like, default: :rc:`patch.capstyle`"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Style to use for joining lines for all paths in the collection. Allowed values are {'miter', 'round', 'bevel'}."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "joinstyle",
              "type": "Param",
              "type_": "`.JoinStyle`-like, default: :rc:`patch.joinstyle`"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Whether each patch in the collection should be drawn with antialiasing."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "antialiaseds",
              "type": "Param",
              "type_": "bool or list of bool, default: :rc:`patch.antialiased`"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "A vector by which to translate each patch after rendering (default is no translation). The translation is performed in screen (pixel) coordinates (i.e. after the Artist's transform is applied)."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "offsets",
              "type": "Param",
              "type_": "(float, float) or list thereof, default: (0, 0)"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "A single transform which will be applied to each "
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "offsets"
                        }
                      ],
                      "type": "emphasis"
                    },
                    {
                      "type": "text",
                      "value": " vector before it is used."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "offset_transform",
              "type": "Param",
              "type_": "`~.Transform`, default: `.IdentityTransform`"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Data normalization and colormapping parameters. See "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": ".ScalarMappable"
                    },
                    {
                      "type": "text",
                      "value": " for a detailed description."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "cmap, norm",
              "type": "Param",
              "type_": ""
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Hatching pattern to use in filled paths, if any. Valid strings are ['/', '\\', '|', '-', '+', 'x', 'o', 'O', '.', '*']. See "
                    },
                    {
                      "type": "inlineCode",
                      "value": "/gallery/shapes_and_collections/hatch_style_reference"
                    },
                    {
                      "type": "text",
                      "value": " for the meaning of each hatch type."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "hatch",
              "type": "Param",
              "type_": "str, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "If "
                    },
                    {
                      "type": "inlineCode",
                      "value": "pickradius <= 0"
                    },
                    {
                      "type": "text",
                      "value": ", then "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": ".Collection.contains"
                    },
                    {
                      "type": "text",
                      "value": " will return "
                    },
                    {
                      "type": "inlineCode",
                      "value": "True"
                    },
                    {
                      "type": "text",
                      "value": " whenever the test point is inside of one of the polygons formed by the control points of a Path in the Collection. On the other hand, if it is greater than 0, then we instead check if the test point is contained in a stroke of width "
                    },
                    {
                      "type": "inlineCode",
                      "value": "2*pickradius"
                    },
                    {
                      "type": "text",
                      "value": " following any of the Paths in the Collection."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "pickradius",
              "type": "Param",
              "type_": "float, default: 5.0"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "A URL for each patch to link to once drawn. Currently only works for the SVG backend. See "
                    },
                    {
                      "type": "inlineCode",
                      "value": "/gallery/misc/hyperlinks_sgskip"
                    },
                    {
                      "type": "text",
                      "value": " for examples."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "urls",
              "type": "Param",
              "type_": "list of str, default: None"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The drawing order, shared by all Patches in the Collection. See "
                    },
                    {
                      "type": "inlineCode",
                      "value": "/gallery/misc/zorder_demo"
                    },
                    {
                      "type": "text",
                      "value": " for all defaults and examples."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "zorder",
              "type": "Param",
              "type_": "float, default: 1"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/matplotlib/collections.py",
  "item_line": 77,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Parameters"
  ],
  "references": null,
  "see_also": [],
  "signature": {
    "type": "Signature",
    "value": "(self, *, edgecolors=None, facecolors=None, linewidths=None, linestyles='solid', capstyle=None, joinstyle=None, antialiaseds=None, offsets=None, offset_transform=None, norm=None, cmap=None, pickradius=5.0, hatch=None, urls=None, zorder=1, **kwargs)"
  },
  "type": "DocBlob"
}