{
  "aliases": [
    "matplotlib.pyplot.contourf"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    },
    "Extended Summary": {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Call signature:      "
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": "contourf([X, Y,] Z, [levels], **kwargs)"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": ".contour"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " and "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": ".contourf"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " draw contour lines and filled contours, respectively.  Except as noted, function signatures and return values are the same for both versions."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    },
    "Notes": {
      "children": [
        {
          "data": {
            "children": [
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "domain": null,
                            "role": null,
                            "value": ".contourf"
                          },
                          "type": "Directive"
                        },
                        {
                          "data": {
                            "value": " differs from the MATLAB version in that it does not draw    the polygon edges. To draw edges, add line contours with calls to    "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "domain": null,
                            "role": null,
                            "value": ".contour"
                          },
                          "type": "Directive"
                        },
                        {
                          "data": {
                            "value": "."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "domain": null,
                            "role": null,
                            "value": ".contourf"
                          },
                          "type": "Directive"
                        },
                        {
                          "data": {
                            "value": " fills intervals that are closed at the top; that is, for    boundaries "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": {
                              "value": "z1"
                            }
                          },
                          "type": "Emph"
                        },
                        {
                          "data": {
                            "value": " and "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": {
                              "value": "z2"
                            }
                          },
                          "type": "Emph"
                        },
                        {
                          "data": {
                            "value": ", the filled region is:        "
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  },
                  {
                    "data": {
                      "value": "z1 < Z <= z2"
                    },
                    "type": "BlockVerbatim"
                  },
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "except for the lowest interval, which is closed on both sides (i.e.    it includes the lowest value)."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "domain": null,
                            "role": null,
                            "value": ".contour"
                          },
                          "type": "Directive"
                        },
                        {
                          "data": {
                            "value": " and "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "domain": null,
                            "role": null,
                            "value": ".contourf"
                          },
                          "type": "Directive"
                        },
                        {
                          "data": {
                            "value": " use a "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "target": "https://en.wikipedia.org/wiki/Marching_squares",
                            "value": "marching squares"
                          },
                          "type": "ExternalLink"
                        },
                        {
                          "data": {
                            "value": " algorithm to    compute contour locations.  More information can be found in    "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "target": "https://contourpy.readthedocs.io",
                            "value": "ContourPy documentation"
                          },
                          "type": "ExternalLink"
                        },
                        {
                          "data": {
                            "value": "."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              }
            ]
          },
          "type": "EnumeratedList"
        }
      ],
      "level": 0,
      "target": null,
      "title": null
    },
    "Other Parameters": {
      "children": [
        {
          "data": {
            "children": [
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Enable/disable corner masking, which only has an effect if "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": {
                              "value": "Z"
                            }
                          },
                          "type": "Emph"
                        },
                        {
                          "data": {
                            "value": " is a masked array.  If "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "False"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": ", any quad touching a masked point is masked out.  If "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "True"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": ", only the triangular corners of quads nearest those points are always masked out, other triangular corners comprising three unmasked points are contoured as usual."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "corner_mask",
                "type_": "bool, default: :rc:`contour.corner_mask`"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "The colors of the levels, i.e. the lines for "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "domain": null,
                            "role": null,
                            "value": ".contour"
                          },
                          "type": "Directive"
                        },
                        {
                          "data": {
                            "value": " and the areas for "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "domain": null,
                            "role": null,
                            "value": ".contourf"
                          },
                          "type": "Directive"
                        },
                        {
                          "data": {
                            "value": "."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  },
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "The sequence is cycled for the levels in ascending order. If the sequence is shorter than the number of levels, it's repeated."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  },
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "As a shortcut, single color strings may be used in place of one-element lists, i.e. "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "'red'"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " instead of "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "['red']"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " to color all levels with the same color. This shortcut does only work for color strings, not for other ways of specifying colors."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  },
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "By default (value "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": {
                              "value": "None"
                            }
                          },
                          "type": "Emph"
                        },
                        {
                          "data": {
                            "value": "), the colormap specified by "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": {
                              "value": "cmap"
                            }
                          },
                          "type": "Emph"
                        },
                        {
                          "data": {
                            "value": " will be used."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "colors",
                "type_": "color string or sequence of colors, optional"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "The alpha blending value, between 0 (transparent) and 1 (opaque)."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "alpha",
                "type_": "float, default: 1"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "The Colormap instance or registered colormap name used to map scalar data to colors."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  },
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "This parameter is ignored if "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": {
                              "value": "colors"
                            }
                          },
                          "type": "Emph"
                        },
                        {
                          "data": {
                            "value": " is set."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "cmap",
                "type_": "str or `~matplotlib.colors.Colormap`, default: :rc:`image.cmap`"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "The normalization method used to scale scalar data to the [0, 1] range before mapping to colors using "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": {
                              "value": "cmap"
                            }
                          },
                          "type": "Emph"
                        },
                        {
                          "data": {
                            "value": ". By default, a linear scaling is used, mapping the lowest value to 0 and the highest to 1."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  },
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "If given, this can be one of the following:"
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  },
                  {
                    "data": {
                      "children": [
                        {
                          "children": [
                            {
                              "data": {
                                "children": [
                                  {
                                    "data": {
                                      "value": "An instance of "
                                    },
                                    "type": "Words"
                                  },
                                  {
                                    "data": {
                                      "anchor": null,
                                      "exists": true,
                                      "kind": "module",
                                      "reference": {
                                        "kind": "module",
                                        "module": "matplotlib",
                                        "path": "matplotlib.colors.Normalize",
                                        "version": "3.6.2"
                                      },
                                      "value": ".Normalize"
                                    },
                                    "type": "Link"
                                  },
                                  {
                                    "data": {
                                      "value": " or one of its subclasses   (see "
                                    },
                                    "type": "Words"
                                  },
                                  {
                                    "data": {
                                      "value": [
                                        "/tutorials/colors/colormapnorms"
                                      ]
                                    },
                                    "type": "Verbatim"
                                  },
                                  {
                                    "data": {
                                      "value": ")."
                                    },
                                    "type": "Words"
                                  }
                                ]
                              },
                              "type": "Paragraph"
                            }
                          ]
                        },
                        {
                          "children": [
                            {
                              "data": {
                                "children": [
                                  {
                                    "data": {
                                      "value": "A scale name, i.e. one of \"linear\", \"log\", \"symlog\", \"logit\", etc.  For a   list of available scales, call "
                                    },
                                    "type": "Words"
                                  },
                                  {
                                    "data": {
                                      "anchor": null,
                                      "exists": true,
                                      "kind": "module",
                                      "reference": {
                                        "kind": "api",
                                        "module": "matplotlib",
                                        "path": "matplotlib.scale.get_scale_names",
                                        "version": "*"
                                      },
                                      "value": "matplotlib.scale.get_scale_names()"
                                    },
                                    "type": "Link"
                                  },
                                  {
                                    "data": {
                                      "value": ".   In that case, a suitable "
                                    },
                                    "type": "Words"
                                  },
                                  {
                                    "data": {
                                      "anchor": null,
                                      "exists": true,
                                      "kind": "module",
                                      "reference": {
                                        "kind": "module",
                                        "module": "matplotlib",
                                        "path": "matplotlib.colors.Normalize",
                                        "version": "3.6.2"
                                      },
                                      "value": ".Normalize"
                                    },
                                    "type": "Link"
                                  },
                                  {
                                    "data": {
                                      "value": " subclass is dynamically generated   and instantiated."
                                    },
                                    "type": "Words"
                                  }
                                ]
                              },
                              "type": "Paragraph"
                            }
                          ]
                        }
                      ]
                    },
                    "type": "BulletList"
                  },
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "This parameter is ignored if "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": {
                              "value": "colors"
                            }
                          },
                          "type": "Emph"
                        },
                        {
                          "data": {
                            "value": " is set."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "norm",
                "type_": "str or `~matplotlib.colors.Normalize`, optional"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "When using scalar data and no explicit "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": {
                              "value": "norm"
                            }
                          },
                          "type": "Emph"
                        },
                        {
                          "data": {
                            "value": ", "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": {
                              "value": "vmin"
                            }
                          },
                          "type": "Emph"
                        },
                        {
                          "data": {
                            "value": " and "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": {
                              "value": "vmax"
                            }
                          },
                          "type": "Emph"
                        },
                        {
                          "data": {
                            "value": " define the data range that the colormap covers. By default, the colormap covers the complete value range of the supplied data. It is an error to use "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": {
                              "value": "vmin"
                            }
                          },
                          "type": "Emph"
                        },
                        {
                          "data": {
                            "value": "/"
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": {
                              "value": "vmax"
                            }
                          },
                          "type": "Emph"
                        },
                        {
                          "data": {
                            "value": " when a "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": {
                              "value": "norm"
                            }
                          },
                          "type": "Emph"
                        },
                        {
                          "data": {
                            "value": " instance is given (but using a "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "domain": null,
                            "role": null,
                            "value": "str"
                          },
                          "type": "Directive"
                        },
                        {
                          "data": {
                            "value": " "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": {
                              "value": "norm"
                            }
                          },
                          "type": "Emph"
                        },
                        {
                          "data": {
                            "value": " name together with "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": {
                              "value": "vmin"
                            }
                          },
                          "type": "Emph"
                        },
                        {
                          "data": {
                            "value": "/"
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": {
                              "value": "vmax"
                            }
                          },
                          "type": "Emph"
                        },
                        {
                          "data": {
                            "value": " is acceptable)."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  },
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "If "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": {
                              "value": "vmin"
                            }
                          },
                          "type": "Emph"
                        },
                        {
                          "data": {
                            "value": " or "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": {
                              "value": "vmax"
                            }
                          },
                          "type": "Emph"
                        },
                        {
                          "data": {
                            "value": " are not given, the default color scaling is based on "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": {
                              "value": "levels"
                            }
                          },
                          "type": "Emph"
                        },
                        {
                          "data": {
                            "value": "."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  },
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "This parameter is ignored if "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": {
                              "value": "colors"
                            }
                          },
                          "type": "Emph"
                        },
                        {
                          "data": {
                            "value": " is set."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "vmin, vmax",
                "type_": "float, optional"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Determines the orientation and exact position of "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": {
                              "value": "Z"
                            }
                          },
                          "type": "Emph"
                        },
                        {
                          "data": {
                            "value": " by specifying the position of "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "Z[0, 0]"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": ".  This is only relevant, if "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": {
                              "value": "X"
                            }
                          },
                          "type": "Emph"
                        },
                        {
                          "data": {
                            "value": ", "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": {
                              "value": "Y"
                            }
                          },
                          "type": "Emph"
                        },
                        {
                          "data": {
                            "value": " are not given."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  },
                  {
                    "data": {
                      "children": [
                        {
                          "children": [
                            {
                              "data": {
                                "children": [
                                  {
                                    "data": {
                                      "value": {
                                        "value": "None"
                                      }
                                    },
                                    "type": "Emph"
                                  },
                                  {
                                    "data": {
                                      "value": ": "
                                    },
                                    "type": "Words"
                                  },
                                  {
                                    "data": {
                                      "value": [
                                        "Z[0, 0]"
                                      ]
                                    },
                                    "type": "Verbatim"
                                  },
                                  {
                                    "data": {
                                      "value": " is at X=0, Y=0 in the lower left corner."
                                    },
                                    "type": "Words"
                                  }
                                ]
                              },
                              "type": "Paragraph"
                            }
                          ]
                        },
                        {
                          "children": [
                            {
                              "data": {
                                "children": [
                                  {
                                    "data": {
                                      "value": "'lower': "
                                    },
                                    "type": "Words"
                                  },
                                  {
                                    "data": {
                                      "value": [
                                        "Z[0, 0]"
                                      ]
                                    },
                                    "type": "Verbatim"
                                  },
                                  {
                                    "data": {
                                      "value": " is at X=0.5, Y=0.5 in the lower left corner."
                                    },
                                    "type": "Words"
                                  }
                                ]
                              },
                              "type": "Paragraph"
                            }
                          ]
                        },
                        {
                          "children": [
                            {
                              "data": {
                                "children": [
                                  {
                                    "data": {
                                      "value": "'upper': "
                                    },
                                    "type": "Words"
                                  },
                                  {
                                    "data": {
                                      "value": [
                                        "Z[0, 0]"
                                      ]
                                    },
                                    "type": "Verbatim"
                                  },
                                  {
                                    "data": {
                                      "value": " is at X=N+0.5, Y=0.5 in the upper left   corner."
                                    },
                                    "type": "Words"
                                  }
                                ]
                              },
                              "type": "Paragraph"
                            }
                          ]
                        },
                        {
                          "children": [
                            {
                              "data": {
                                "children": [
                                  {
                                    "data": {
                                      "value": "'image': Use the value from "
                                    },
                                    "type": "Words"
                                  },
                                  {
                                    "data": {
                                      "value": [
                                        "image.origin"
                                      ]
                                    },
                                    "type": "Verbatim"
                                  },
                                  {
                                    "data": {
                                      "value": "."
                                    },
                                    "type": "Words"
                                  }
                                ]
                              },
                              "type": "Paragraph"
                            }
                          ]
                        }
                      ]
                    },
                    "type": "BulletList"
                  }
                ],
                "param": "origin",
                "type_": "{*None*, 'upper', 'lower', 'image'}, default: None"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "If "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": {
                              "value": "origin"
                            }
                          },
                          "type": "Emph"
                        },
                        {
                          "data": {
                            "value": " is not "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": {
                              "value": "None"
                            }
                          },
                          "type": "Emph"
                        },
                        {
                          "data": {
                            "value": ", then "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": {
                              "value": "extent"
                            }
                          },
                          "type": "Emph"
                        },
                        {
                          "data": {
                            "value": " is interpreted as in "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "domain": null,
                            "role": null,
                            "value": ".imshow"
                          },
                          "type": "Directive"
                        },
                        {
                          "data": {
                            "value": ": it gives the outer pixel boundaries. In this case, the position of Z[0, 0] is the center of the pixel, not a corner. If "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": {
                              "value": "origin"
                            }
                          },
                          "type": "Emph"
                        },
                        {
                          "data": {
                            "value": " is "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": {
                              "value": "None"
                            }
                          },
                          "type": "Emph"
                        },
                        {
                          "data": {
                            "value": ", then ("
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": {
                              "value": "x0"
                            }
                          },
                          "type": "Emph"
                        },
                        {
                          "data": {
                            "value": ", "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": {
                              "value": "y0"
                            }
                          },
                          "type": "Emph"
                        },
                        {
                          "data": {
                            "value": ") is the position of Z[0, 0], and ("
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": {
                              "value": "x1"
                            }
                          },
                          "type": "Emph"
                        },
                        {
                          "data": {
                            "value": ", "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": {
                              "value": "y1"
                            }
                          },
                          "type": "Emph"
                        },
                        {
                          "data": {
                            "value": ") is the position of Z[-1, -1]."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  },
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "This argument is ignored if "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": {
                              "value": "X"
                            }
                          },
                          "type": "Emph"
                        },
                        {
                          "data": {
                            "value": " and "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": {
                              "value": "Y"
                            }
                          },
                          "type": "Emph"
                        },
                        {
                          "data": {
                            "value": " are specified in the call to contour."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "extent",
                "type_": "(x0, x1, y0, y1), optional"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "The locator is used to determine the contour levels if they are not given explicitly via "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": {
                              "value": "levels"
                            }
                          },
                          "type": "Emph"
                        },
                        {
                          "data": {
                            "value": ". Defaults to "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "anchor": null,
                            "exists": true,
                            "kind": "module",
                            "reference": {
                              "kind": "module",
                              "module": "matplotlib",
                              "path": "matplotlib.ticker.MaxNLocator",
                              "version": "3.6.2"
                            },
                            "value": "~.ticker.MaxNLocator"
                          },
                          "type": "Link"
                        },
                        {
                          "data": {
                            "value": "."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "locator",
                "type_": "ticker.Locator subclass, optional"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Determines the "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "contourf"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": "-coloring of values that are outside the "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": {
                              "value": "levels"
                            }
                          },
                          "type": "Emph"
                        },
                        {
                          "data": {
                            "value": " range."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  },
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "If 'neither', values outside the "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": {
                              "value": "levels"
                            }
                          },
                          "type": "Emph"
                        },
                        {
                          "data": {
                            "value": " range are not colored. If 'min', 'max' or 'both', color the values below, above or below and above the "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": {
                              "value": "levels"
                            }
                          },
                          "type": "Emph"
                        },
                        {
                          "data": {
                            "value": " range."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  },
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Values below "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "min(levels)"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " and above "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "max(levels)"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " are mapped to the under/over values of the "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "anchor": null,
                            "exists": true,
                            "kind": "module",
                            "reference": {
                              "kind": "module",
                              "module": "matplotlib",
                              "path": "matplotlib.colors.Colormap",
                              "version": "3.6.2"
                            },
                            "value": ".Colormap"
                          },
                          "type": "Link"
                        },
                        {
                          "data": {
                            "value": ". Note that most colormaps do not have dedicated colors for these by default, so that the over and under values are the edge values of the colormap. You may want to set these values explicitly using "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "anchor": null,
                            "exists": true,
                            "kind": "module",
                            "reference": {
                              "kind": "module",
                              "module": "matplotlib",
                              "path": "matplotlib.colors.Colormap.set_under",
                              "version": "3.6.2"
                            },
                            "value": ".Colormap.set_under"
                          },
                          "type": "Link"
                        },
                        {
                          "data": {
                            "value": " and "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "anchor": null,
                            "exists": true,
                            "kind": "module",
                            "reference": {
                              "kind": "module",
                              "module": "matplotlib",
                              "path": "matplotlib.colors.Colormap.set_over",
                              "version": "3.6.2"
                            },
                            "value": ".Colormap.set_over"
                          },
                          "type": "Link"
                        },
                        {
                          "data": {
                            "value": "."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  },
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "children": [
                              {
                                "data": {
                                  "value": "An existing "
                                },
                                "type": "Words"
                              },
                              {
                                "data": {
                                  "domain": null,
                                  "role": null,
                                  "value": ".QuadContourSet"
                                },
                                "type": "Directive"
                              },
                              {
                                "data": {
                                  "value": " does not get notified if properties of its colormap are changed. Therefore, an explicit call "
                                },
                                "type": "Words"
                              },
                              {
                                "data": {
                                  "domain": null,
                                  "role": null,
                                  "value": ".QuadContourSet.changed()"
                                },
                                "type": "Directive"
                              },
                              {
                                "data": {
                                  "value": " is needed after modifying the colormap. The explicit call can be left out, if a colorbar is assigned to the "
                                },
                                "type": "Words"
                              },
                              {
                                "data": {
                                  "domain": null,
                                  "role": null,
                                  "value": ".QuadContourSet"
                                },
                                "type": "Directive"
                              },
                              {
                                "data": {
                                  "value": " because it internally calls "
                                },
                                "type": "Words"
                              },
                              {
                                "data": {
                                  "domain": null,
                                  "role": null,
                                  "value": ".QuadContourSet.changed()"
                                },
                                "type": "Directive"
                              },
                              {
                                "data": {
                                  "value": "."
                                },
                                "type": "Words"
                              }
                            ]
                          },
                          "type": "Paragraph"
                        }
                      ],
                      "kind": "note",
                      "title": ""
                    },
                    "type": "Admonition"
                  },
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Example:      "
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  },
                  {
                    "data": {
                      "value": "x = np.arange(1, 10)\ny = x.reshape(-1, 1)\nh = x * y\n\ncs = plt.contourf(h, levels=[10, 30, 50],\n    colors=['#808080', '#A0A0A0', '#C0C0C0'], extend='both')\ncs.cmap.set_over('red')\ncs.cmap.set_under('blue')\ncs.changed()"
                    },
                    "type": "BlockVerbatim"
                  }
                ],
                "param": "extend",
                "type_": "{'neither', 'both', 'min', 'max'}, default: 'neither'"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Override axis units by specifying an instance of a "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "matplotlib.units.ConversionInterface"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": "."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "xunits, yunits",
                "type_": "registered units, optional"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Enable antialiasing, overriding the defaults.  For filled contours, the default is "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": {
                              "value": "True"
                            }
                          },
                          "type": "Emph"
                        },
                        {
                          "data": {
                            "value": ".  For line contours, it is taken from "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "lines.antialiased"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": "."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "antialiased",
                "type_": "bool, optional"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "If 0, no subdivision of the domain.  Specify a positive integer to divide the domain into subdomains of "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": {
                              "value": "nchunk"
                            }
                          },
                          "type": "Emph"
                        },
                        {
                          "data": {
                            "value": " by "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": {
                              "value": "nchunk"
                            }
                          },
                          "type": "Emph"
                        },
                        {
                          "data": {
                            "value": " quads. Chunking reduces the maximum length of polygons generated by the contouring algorithm which reduces the rendering workload passed on to the backend and also requires slightly less RAM.  It can however introduce rendering artifacts at chunk boundaries depending on the backend, the "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": {
                              "value": "antialiased"
                            }
                          },
                          "type": "Emph"
                        },
                        {
                          "data": {
                            "value": " flag and value of "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": {
                              "value": "alpha"
                            }
                          },
                          "type": "Emph"
                        },
                        {
                          "data": {
                            "value": "."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "nchunk",
                "type_": "int >= 0, optional"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": {
                              "value": "Only applies to"
                            }
                          },
                          "type": "Emph"
                        },
                        {
                          "data": {
                            "value": " "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "domain": null,
                            "role": null,
                            "value": ".contour"
                          },
                          "type": "Directive"
                        },
                        {
                          "data": {
                            "value": "."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  },
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "The line width of the contour lines."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  },
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "If a number, all levels will be plotted with this linewidth."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  },
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "If a sequence, the levels in ascending order will be plotted with the linewidths in the order specified."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  },
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "If None, this falls back to "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "lines.linewidth"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": "."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "linewidths",
                "type_": "float or array-like, default: :rc:`contour.linewidth`"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": {
                              "value": "Only applies to"
                            }
                          },
                          "type": "Emph"
                        },
                        {
                          "data": {
                            "value": " "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "domain": null,
                            "role": null,
                            "value": ".contour"
                          },
                          "type": "Directive"
                        },
                        {
                          "data": {
                            "value": "."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  },
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "If "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": {
                              "value": "linestyles"
                            }
                          },
                          "type": "Emph"
                        },
                        {
                          "data": {
                            "value": " is "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": {
                              "value": "None"
                            }
                          },
                          "type": "Emph"
                        },
                        {
                          "data": {
                            "value": ", the default is 'solid' unless the lines are monochrome. In that case, negative contours will instead take their linestyle from the "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": {
                              "value": "negative_linestyles"
                            }
                          },
                          "type": "Emph"
                        },
                        {
                          "data": {
                            "value": " argument."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  },
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": {
                              "value": "linestyles"
                            }
                          },
                          "type": "Emph"
                        },
                        {
                          "data": {
                            "value": " can also be an iterable of the above strings specifying a set of linestyles to be used. If this iterable is shorter than the number of contour levels it will be repeated as necessary."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "linestyles",
                "type_": "{*None*, 'solid', 'dashed', 'dashdot', 'dotted'}, optional"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": {
                              "value": "Only applies to"
                            }
                          },
                          "type": "Emph"
                        },
                        {
                          "data": {
                            "value": " "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "domain": null,
                            "role": null,
                            "value": ".contour"
                          },
                          "type": "Directive"
                        },
                        {
                          "data": {
                            "value": "."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  },
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "If "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": {
                              "value": "linestyles"
                            }
                          },
                          "type": "Emph"
                        },
                        {
                          "data": {
                            "value": " is "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": {
                              "value": "None"
                            }
                          },
                          "type": "Emph"
                        },
                        {
                          "data": {
                            "value": " and the lines are monochrome, this argument specifies the line style for negative contours."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  },
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "If "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": {
                              "value": "negative_linestyles"
                            }
                          },
                          "type": "Emph"
                        },
                        {
                          "data": {
                            "value": " is "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": {
                              "value": "None"
                            }
                          },
                          "type": "Emph"
                        },
                        {
                          "data": {
                            "value": ", the default is taken from "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "contour.negative_linestyles"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": "."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  },
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": {
                              "value": "negative_linestyles"
                            }
                          },
                          "type": "Emph"
                        },
                        {
                          "data": {
                            "value": " can also be an iterable of the above strings specifying a set of linestyles to be used. If this iterable is shorter than the number of contour levels it will be repeated as necessary."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "negative_linestyles",
                "type_": "{*None*, 'solid', 'dashed', 'dashdot', 'dotted'},                        optional"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": {
                              "value": "Only applies to"
                            }
                          },
                          "type": "Emph"
                        },
                        {
                          "data": {
                            "value": " "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "domain": null,
                            "role": null,
                            "value": ".contourf"
                          },
                          "type": "Directive"
                        },
                        {
                          "data": {
                            "value": "."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  },
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "A list of cross hatch patterns to use on the filled areas. If None, no hatching will be added to the contour. Hatching is supported in the PostScript, PDF, SVG and Agg backends only."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "hatches",
                "type_": "list[str], optional"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Which contouring algorithm to use to calculate the contour lines and polygons. The algorithms are implemented in "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "target": "https://github.com/contourpy/contourpy",
                            "value": "ContourPy"
                          },
                          "type": "ExternalLink"
                        },
                        {
                          "data": {
                            "value": ", consult the "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "target": "https://contourpy.readthedocs.io",
                            "value": "ContourPy documentation"
                          },
                          "type": "ExternalLink"
                        },
                        {
                          "data": {
                            "value": " for further information."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  },
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "The default is taken from "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "contour.algorithm"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": "."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "algorithm",
                "type_": "{'mpl2005', 'mpl2014', 'serial', 'threaded'}, optional"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "If given, all parameters also accept a string "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "s"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": ", which is interpreted as "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "data[s]"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " (unless this raises an exception)."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "data",
                "type_": "indexable object, optional"
              }
            ]
          },
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null
    },
    "Parameters": {
      "children": [
        {
          "data": {
            "children": [
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "The coordinates of the values in "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": {
                              "value": "Z"
                            }
                          },
                          "type": "Emph"
                        },
                        {
                          "data": {
                            "value": "."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  },
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": {
                              "value": "X"
                            }
                          },
                          "type": "Emph"
                        },
                        {
                          "data": {
                            "value": " and "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": {
                              "value": "Y"
                            }
                          },
                          "type": "Emph"
                        },
                        {
                          "data": {
                            "value": " must both be 2D with the same shape as "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": {
                              "value": "Z"
                            }
                          },
                          "type": "Emph"
                        },
                        {
                          "data": {
                            "value": " (e.g. created via "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "anchor": null,
                            "exists": true,
                            "kind": "module",
                            "reference": {
                              "kind": "api",
                              "module": "numpy",
                              "path": "numpy.meshgrid",
                              "version": "*"
                            },
                            "value": "numpy.meshgrid"
                          },
                          "type": "Link"
                        },
                        {
                          "data": {
                            "value": "), or they must both be 1-D such that "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "len(X) == N"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " is the number of columns in "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": {
                              "value": "Z"
                            }
                          },
                          "type": "Emph"
                        },
                        {
                          "data": {
                            "value": " and "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "len(Y) == M"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " is the number of rows in "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": {
                              "value": "Z"
                            }
                          },
                          "type": "Emph"
                        },
                        {
                          "data": {
                            "value": "."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  },
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": {
                              "value": "X"
                            }
                          },
                          "type": "Emph"
                        },
                        {
                          "data": {
                            "value": " and "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": {
                              "value": "Y"
                            }
                          },
                          "type": "Emph"
                        },
                        {
                          "data": {
                            "value": " must both be ordered monotonically."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  },
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "If not given, they are assumed to be integer indices, i.e. "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "X = range(N)"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": ", "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "Y = range(M)"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": "."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "X, Y",
                "type_": "array-like, optional"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "The height values over which the contour is drawn.  Color-mapping is controlled by "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": {
                              "value": "cmap"
                            }
                          },
                          "type": "Emph"
                        },
                        {
                          "data": {
                            "value": ", "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": {
                              "value": "norm"
                            }
                          },
                          "type": "Emph"
                        },
                        {
                          "data": {
                            "value": ", "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": {
                              "value": "vmin"
                            }
                          },
                          "type": "Emph"
                        },
                        {
                          "data": {
                            "value": ", and "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": {
                              "value": "vmax"
                            }
                          },
                          "type": "Emph"
                        },
                        {
                          "data": {
                            "value": "."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "Z",
                "type_": "(M, N) array-like"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Determines the number and positions of the contour lines / regions."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  },
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "If an int "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": {
                              "value": "n"
                            }
                          },
                          "type": "Emph"
                        },
                        {
                          "data": {
                            "value": ", use "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "anchor": null,
                            "exists": true,
                            "kind": "module",
                            "reference": {
                              "kind": "module",
                              "module": "matplotlib",
                              "path": "matplotlib.ticker.MaxNLocator",
                              "version": "3.6.2"
                            },
                            "value": "~matplotlib.ticker.MaxNLocator"
                          },
                          "type": "Link"
                        },
                        {
                          "data": {
                            "value": ", which tries to automatically choose no more than "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": {
                              "value": "n+1"
                            }
                          },
                          "type": "Emph"
                        },
                        {
                          "data": {
                            "value": " \"nice\" contour levels between minimum and maximum numeric values of "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": {
                              "value": "Z"
                            }
                          },
                          "type": "Emph"
                        },
                        {
                          "data": {
                            "value": "."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  },
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "If array-like, draw contour lines at the specified levels. The values must be in increasing order."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "levels",
                "type_": "int or array-like, optional"
              }
            ]
          },
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    },
    "Returns": {
      "children": [
        {
          "data": {
            "children": [
              {
                "desc": [],
                "param": "",
                "type_": "`~.contour.QuadContourSet`"
              }
            ]
          },
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null
    },
    "Summary": {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Plot filled contours."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    }
  },
  "example_section_data": {
    "children": [],
    "level": 0,
    "target": null,
    "title": null
  },
  "item_file": "/matplotlib/pyplot.py",
  "item_line": 2463,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns",
    "Other Parameters",
    "Notes"
  ],
  "references": null,
  "see_also": [],
  "signature": {
    "value": "contourf(*args, data=None, **kwargs)"
  }
}