{
  "aliases": [
    "matplotlib.tri.tricontourf"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Call signatures      "
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": "tricontourf(triangulation, z, [levels], ...)\ntricontourf(x, y, z, [levels], *, [triangles=triangles], [mask=mask], ...)"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "The triangular grid can be specified either by passing a "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": ".Triangulation"
            },
            {
              "type": "text",
              "value": " object as the first parameter, or by passing the points "
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "x"
                }
              ],
              "type": "emphasis"
            },
            {
              "type": "text",
              "value": ", "
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "y"
                }
              ],
              "type": "emphasis"
            },
            {
              "type": "text",
              "value": " and optionally the "
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "triangles"
                }
              ],
              "type": "emphasis"
            },
            {
              "type": "text",
              "value": " and a "
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "mask"
                }
              ],
              "type": "emphasis"
            },
            {
              "type": "text",
              "value": ". See "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": ".Triangulation"
            },
            {
              "type": "text",
              "value": " for an explanation of these parameters. If neither of "
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "triangulation"
                }
              ],
              "type": "emphasis"
            },
            {
              "type": "text",
              "value": " or "
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "triangles"
                }
              ],
              "type": "emphasis"
            },
            {
              "type": "text",
              "value": " are given, the triangulation is calculated on the fly."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "It is possible to pass "
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "triangles"
                }
              ],
              "type": "emphasis"
            },
            {
              "type": "text",
              "value": " positionally, i.e. "
            },
            {
              "type": "inlineCode",
              "value": "tricontourf(x, y, triangles, z, ...)"
            },
            {
              "type": "text",
              "value": ". However, this is discouraged. For more clarity, pass "
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "triangles"
                }
              ],
              "type": "emphasis"
            },
            {
              "type": "text",
              "value": " via keyword argument."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [
        {
          "children": [
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": ".tricontourf"
            },
            {
              "type": "text",
              "value": " fills intervals that are closed at the top; that is, for boundaries "
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "z1"
                }
              ],
              "type": "emphasis"
            },
            {
              "type": "text",
              "value": " and "
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "z2"
                }
              ],
              "type": "emphasis"
            },
            {
              "type": "text",
              "value": ", the filled region is      "
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": "z1 < Z <= z2"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "except for the lowest interval, which is closed on both sides (i.e. it includes the lowest value)."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The colors of the levels, i.e., the contour regions."
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The sequence is cycled for the levels in ascending order. If the sequence is shorter than the number of levels, it is repeated."
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "As a shortcut, single color strings may be used in place of one-element lists, i.e. "
                    },
                    {
                      "type": "inlineCode",
                      "value": "'red'"
                    },
                    {
                      "type": "text",
                      "value": " instead of "
                    },
                    {
                      "type": "inlineCode",
                      "value": "['red']"
                    },
                    {
                      "type": "text",
                      "value": " to color all levels with the same color. This shortcut does only work for color strings, not for other ways of specifying colors."
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "By default (value "
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "None"
                        }
                      ],
                      "type": "emphasis"
                    },
                    {
                      "type": "text",
                      "value": "), the colormap specified by "
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "cmap"
                        }
                      ],
                      "type": "emphasis"
                    },
                    {
                      "type": "text",
                      "value": " will be used."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "colors",
              "type": "Param",
              "type_": "color string or sequence of colors, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The alpha blending value, between 0 (transparent) and 1 (opaque)."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "alpha",
              "type": "Param",
              "type_": "float, default: 1"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The Colormap instance or registered colormap name used to map scalar data to colors."
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "This parameter is ignored if "
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "colors"
                        }
                      ],
                      "type": "emphasis"
                    },
                    {
                      "type": "text",
                      "value": " is set."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "cmap",
              "type": "Param",
              "type_": "str or `~matplotlib.colors.Colormap`, default: :rc:`image.cmap`"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The normalization method used to scale scalar data to the [0, 1] range before mapping to colors using "
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "cmap"
                        }
                      ],
                      "type": "emphasis"
                    },
                    {
                      "type": "text",
                      "value": ". By default, a linear scaling is used, mapping the lowest value to 0 and the highest to 1."
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "If given, this can be one of the following:"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "children": [
                        {
                          "children": [
                            {
                              "type": "text",
                              "value": "An instance of "
                            },
                            {
                              "domain": null,
                              "role": null,
                              "type": "Directive",
                              "value": ".Normalize"
                            },
                            {
                              "type": "text",
                              "value": " or one of its subclasses   (see "
                            },
                            {
                              "type": "inlineCode",
                              "value": "/tutorials/colors/colormapnorms"
                            },
                            {
                              "type": "text",
                              "value": ")."
                            }
                          ],
                          "type": "paragraph"
                        }
                      ],
                      "spread": false,
                      "type": "listItem"
                    },
                    {
                      "children": [
                        {
                          "children": [
                            {
                              "type": "text",
                              "value": "A scale name, i.e. one of \"linear\", \"log\", \"symlog\", \"logit\", etc.  For a   list of available scales, call "
                            },
                            {
                              "anchor": null,
                              "exists": true,
                              "kind": "module",
                              "reference": {
                                "kind": "api",
                                "module": "matplotlib.scale",
                                "path": "matplotlib.scale:get_scale_names",
                                "type": "RefInfo",
                                "version": "*"
                              },
                              "type": "Link",
                              "value": "matplotlib.scale.get_scale_names()"
                            },
                            {
                              "type": "text",
                              "value": ".   In that case, a suitable "
                            },
                            {
                              "domain": null,
                              "role": null,
                              "type": "Directive",
                              "value": ".Normalize"
                            },
                            {
                              "type": "text",
                              "value": " subclass is dynamically generated   and instantiated."
                            }
                          ],
                          "type": "paragraph"
                        }
                      ],
                      "spread": false,
                      "type": "listItem"
                    }
                  ],
                  "ordered": false,
                  "spread": false,
                  "start": 1,
                  "type": "list"
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "This parameter is ignored if "
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "colors"
                        }
                      ],
                      "type": "emphasis"
                    },
                    {
                      "type": "text",
                      "value": " is set."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "norm",
              "type": "Param",
              "type_": "str or `~matplotlib.colors.Normalize`, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "When using scalar data and no explicit "
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "norm"
                        }
                      ],
                      "type": "emphasis"
                    },
                    {
                      "type": "text",
                      "value": ", "
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "vmin"
                        }
                      ],
                      "type": "emphasis"
                    },
                    {
                      "type": "text",
                      "value": " and "
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "vmax"
                        }
                      ],
                      "type": "emphasis"
                    },
                    {
                      "type": "text",
                      "value": " define the data range that the colormap covers. By default, the colormap covers the complete value range of the supplied data. It is an error to use "
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "vmin"
                        }
                      ],
                      "type": "emphasis"
                    },
                    {
                      "type": "text",
                      "value": "/"
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "vmax"
                        }
                      ],
                      "type": "emphasis"
                    },
                    {
                      "type": "text",
                      "value": " when a "
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "norm"
                        }
                      ],
                      "type": "emphasis"
                    },
                    {
                      "type": "text",
                      "value": " instance is given (but using a "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "str"
                    },
                    {
                      "type": "text",
                      "value": " "
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "norm"
                        }
                      ],
                      "type": "emphasis"
                    },
                    {
                      "type": "text",
                      "value": " name together with "
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "vmin"
                        }
                      ],
                      "type": "emphasis"
                    },
                    {
                      "type": "text",
                      "value": "/"
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "vmax"
                        }
                      ],
                      "type": "emphasis"
                    },
                    {
                      "type": "text",
                      "value": " is acceptable)."
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "If "
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "vmin"
                        }
                      ],
                      "type": "emphasis"
                    },
                    {
                      "type": "text",
                      "value": " or "
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "vmax"
                        }
                      ],
                      "type": "emphasis"
                    },
                    {
                      "type": "text",
                      "value": " are not given, the default color scaling is based on "
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "levels"
                        }
                      ],
                      "type": "emphasis"
                    },
                    {
                      "type": "text",
                      "value": "."
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "This parameter is ignored if "
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "colors"
                        }
                      ],
                      "type": "emphasis"
                    },
                    {
                      "type": "text",
                      "value": " is set."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "vmin, vmax",
              "type": "Param",
              "type_": "float, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Determines the orientation and exact position of "
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "z"
                        }
                      ],
                      "type": "emphasis"
                    },
                    {
                      "type": "text",
                      "value": " by specifying the position of "
                    },
                    {
                      "type": "inlineCode",
                      "value": "z[0, 0]"
                    },
                    {
                      "type": "text",
                      "value": ".  This is only relevant, if "
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "X"
                        }
                      ],
                      "type": "emphasis"
                    },
                    {
                      "type": "text",
                      "value": ", "
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "Y"
                        }
                      ],
                      "type": "emphasis"
                    },
                    {
                      "type": "text",
                      "value": " are not given."
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "children": [
                        {
                          "children": [
                            {
                              "children": [
                                {
                                  "type": "text",
                                  "value": "None"
                                }
                              ],
                              "type": "emphasis"
                            },
                            {
                              "type": "text",
                              "value": ": "
                            },
                            {
                              "type": "inlineCode",
                              "value": "z[0, 0]"
                            },
                            {
                              "type": "text",
                              "value": " is at X=0, Y=0 in the lower left corner."
                            }
                          ],
                          "type": "paragraph"
                        }
                      ],
                      "spread": false,
                      "type": "listItem"
                    },
                    {
                      "children": [
                        {
                          "children": [
                            {
                              "type": "text",
                              "value": "'lower': "
                            },
                            {
                              "type": "inlineCode",
                              "value": "z[0, 0]"
                            },
                            {
                              "type": "text",
                              "value": " is at X=0.5, Y=0.5 in the lower left corner."
                            }
                          ],
                          "type": "paragraph"
                        }
                      ],
                      "spread": false,
                      "type": "listItem"
                    },
                    {
                      "children": [
                        {
                          "children": [
                            {
                              "type": "text",
                              "value": "'upper': "
                            },
                            {
                              "type": "inlineCode",
                              "value": "z[0, 0]"
                            },
                            {
                              "type": "text",
                              "value": " is at X=N+0.5, Y=0.5 in the upper left corner."
                            }
                          ],
                          "type": "paragraph"
                        }
                      ],
                      "spread": false,
                      "type": "listItem"
                    },
                    {
                      "children": [
                        {
                          "children": [
                            {
                              "type": "text",
                              "value": "'image': Use the value from "
                            },
                            {
                              "type": "inlineCode",
                              "value": "image.origin"
                            },
                            {
                              "type": "text",
                              "value": "."
                            }
                          ],
                          "type": "paragraph"
                        }
                      ],
                      "spread": false,
                      "type": "listItem"
                    }
                  ],
                  "ordered": false,
                  "spread": false,
                  "start": 1,
                  "type": "list"
                }
              ],
              "param": "origin",
              "type": "Param",
              "type_": "{*None*, 'upper', 'lower', 'image'}, default: None"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "If "
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "origin"
                        }
                      ],
                      "type": "emphasis"
                    },
                    {
                      "type": "text",
                      "value": " is not "
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "None"
                        }
                      ],
                      "type": "emphasis"
                    },
                    {
                      "type": "text",
                      "value": ", then "
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "extent"
                        }
                      ],
                      "type": "emphasis"
                    },
                    {
                      "type": "text",
                      "value": " is interpreted as in "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "module",
                      "reference": {
                        "kind": "module",
                        "module": "matplotlib",
                        "path": "matplotlib.axes._axes:Axes.imshow",
                        "type": "RefInfo",
                        "version": "3.6.2"
                      },
                      "type": "Link",
                      "value": ".imshow"
                    },
                    {
                      "type": "text",
                      "value": ": it gives the outer pixel boundaries. In this case, the position of z[0, 0] is the center of the pixel, not a corner. If "
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "origin"
                        }
                      ],
                      "type": "emphasis"
                    },
                    {
                      "type": "text",
                      "value": " is "
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "None"
                        }
                      ],
                      "type": "emphasis"
                    },
                    {
                      "type": "text",
                      "value": ", then ("
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "x0"
                        }
                      ],
                      "type": "emphasis"
                    },
                    {
                      "type": "text",
                      "value": ", "
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "y0"
                        }
                      ],
                      "type": "emphasis"
                    },
                    {
                      "type": "text",
                      "value": ") is the position of z[0, 0], and ("
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "x1"
                        }
                      ],
                      "type": "emphasis"
                    },
                    {
                      "type": "text",
                      "value": ", "
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "y1"
                        }
                      ],
                      "type": "emphasis"
                    },
                    {
                      "type": "text",
                      "value": ") is the position of z[-1, -1]."
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "This argument is ignored if "
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "X"
                        }
                      ],
                      "type": "emphasis"
                    },
                    {
                      "type": "text",
                      "value": " and "
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "Y"
                        }
                      ],
                      "type": "emphasis"
                    },
                    {
                      "type": "text",
                      "value": " are specified in the call to contour."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "extent",
              "type": "Param",
              "type_": "(x0, x1, y0, y1), optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The locator is used to determine the contour levels if they are not given explicitly via "
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "levels"
                        }
                      ],
                      "type": "emphasis"
                    },
                    {
                      "type": "text",
                      "value": ". Defaults to "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "~.ticker.MaxNLocator"
                    },
                    {
                      "type": "text",
                      "value": "."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "locator",
              "type": "Param",
              "type_": "ticker.Locator subclass, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Determines the "
                    },
                    {
                      "type": "inlineCode",
                      "value": "tricontourf"
                    },
                    {
                      "type": "text",
                      "value": "-coloring of values that are outside the "
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "levels"
                        }
                      ],
                      "type": "emphasis"
                    },
                    {
                      "type": "text",
                      "value": " range."
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "If 'neither', values outside the "
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "levels"
                        }
                      ],
                      "type": "emphasis"
                    },
                    {
                      "type": "text",
                      "value": " range are not colored.  If 'min', 'max' or 'both', color the values below, above or below and above the "
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "levels"
                        }
                      ],
                      "type": "emphasis"
                    },
                    {
                      "type": "text",
                      "value": " range."
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Values below "
                    },
                    {
                      "type": "inlineCode",
                      "value": "min(levels)"
                    },
                    {
                      "type": "text",
                      "value": " and above "
                    },
                    {
                      "type": "inlineCode",
                      "value": "max(levels)"
                    },
                    {
                      "type": "text",
                      "value": " are mapped to the under/over values of the "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": ".Colormap"
                    },
                    {
                      "type": "text",
                      "value": ". Note that most colormaps do not have dedicated colors for these by default, so that the over and under values are the edge values of the colormap.  You may want to set these values explicitly using "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": ".Colormap.set_under"
                    },
                    {
                      "type": "text",
                      "value": " and "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": ".Colormap.set_over"
                    },
                    {
                      "type": "text",
                      "value": "."
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "note "
                        }
                      ],
                      "type": "admonitionTitle"
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "An existing "
                        },
                        {
                          "domain": null,
                          "role": null,
                          "type": "Directive",
                          "value": ".TriContourSet"
                        },
                        {
                          "type": "text",
                          "value": " does not get notified if properties of its colormap are changed. Therefore, an explicit call to "
                        },
                        {
                          "domain": null,
                          "role": null,
                          "type": "Directive",
                          "value": ".ContourSet.changed()"
                        },
                        {
                          "type": "text",
                          "value": " is needed after modifying the colormap. The explicit call can be left out, if a colorbar is assigned to the "
                        },
                        {
                          "domain": null,
                          "role": null,
                          "type": "Directive",
                          "value": ".TriContourSet"
                        },
                        {
                          "type": "text",
                          "value": " because it internally calls "
                        },
                        {
                          "domain": null,
                          "role": null,
                          "type": "Directive",
                          "value": ".ContourSet.changed()"
                        },
                        {
                          "type": "text",
                          "value": "."
                        }
                      ],
                      "type": "paragraph"
                    }
                  ],
                  "kind": "note",
                  "type": "admonition"
                }
              ],
              "param": "extend",
              "type": "Param",
              "type_": "{'neither', 'both', 'min', 'max'}, default: 'neither'"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Override axis units by specifying an instance of a "
                    },
                    {
                      "type": "inlineCode",
                      "value": "matplotlib.units.ConversionInterface"
                    },
                    {
                      "type": "text",
                      "value": "."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "xunits, yunits",
              "type": "Param",
              "type_": "registered units, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Enable antialiasing, overriding the defaults.  For filled contours, the default is "
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "True"
                        }
                      ],
                      "type": "emphasis"
                    },
                    {
                      "type": "text",
                      "value": ".  For line contours, it is taken from "
                    },
                    {
                      "type": "inlineCode",
                      "value": "lines.antialiased"
                    },
                    {
                      "type": "text",
                      "value": "."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "antialiased",
              "type": "Param",
              "type_": "bool, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "A list of cross hatch patterns to use on the filled areas. If None, no hatching will be added to the contour. Hatching is supported in the PostScript, PDF, SVG and Agg backends only."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "hatches",
              "type": "Param",
              "type_": "list[str], optional"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "An already created triangular grid."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "triangulation",
              "type": "Param",
              "type_": "`.Triangulation`, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Parameters defining the triangular grid. See "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": ".Triangulation"
                    },
                    {
                      "type": "text",
                      "value": ". This is mutually exclusive with specifying "
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "triangulation"
                        }
                      ],
                      "type": "emphasis"
                    },
                    {
                      "type": "text",
                      "value": "."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "x, y, triangles, mask",
              "type": "Param",
              "type_": ""
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The height values over which the contour is drawn.  Color-mapping is controlled by "
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "cmap"
                        }
                      ],
                      "type": "emphasis"
                    },
                    {
                      "type": "text",
                      "value": ", "
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "norm"
                        }
                      ],
                      "type": "emphasis"
                    },
                    {
                      "type": "text",
                      "value": ", "
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "vmin"
                        }
                      ],
                      "type": "emphasis"
                    },
                    {
                      "type": "text",
                      "value": ", and "
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "vmax"
                        }
                      ],
                      "type": "emphasis"
                    },
                    {
                      "type": "text",
                      "value": "."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "z",
              "type": "Param",
              "type_": "array-like"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Determines the number and positions of the contour lines / regions."
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "If an int "
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "n"
                        }
                      ],
                      "type": "emphasis"
                    },
                    {
                      "type": "text",
                      "value": ", use "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "module",
                      "reference": {
                        "kind": "api",
                        "module": "matplotlib.ticker",
                        "path": "matplotlib.ticker:MaxNLocator",
                        "type": "RefInfo",
                        "version": "*"
                      },
                      "type": "Link",
                      "value": "MaxNLocator"
                    },
                    {
                      "type": "text",
                      "value": ", which tries to automatically choose no more than "
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "n+1"
                        }
                      ],
                      "type": "emphasis"
                    },
                    {
                      "type": "text",
                      "value": " \"nice\" contour levels between between minimum and maximum numeric values of "
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "Z"
                        }
                      ],
                      "type": "emphasis"
                    },
                    {
                      "type": "text",
                      "value": "."
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "If array-like, draw contour lines at the specified levels.  The values must be in increasing order."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "levels",
              "type": "Param",
              "type_": "int or array-like, optional"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [
        {
          "children": [
            {
              "desc": [],
              "param": "",
              "type": "Param",
              "type_": "`~matplotlib.tri.TriContourSet`"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Draw contour regions on an unstructured triangular grid."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/matplotlib/tri/tricontour.py",
  "item_line": 244,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns",
    "Other Parameters",
    "Notes"
  ],
  "references": null,
  "see_also": [],
  "signature": {
    "type": "Signature",
    "value": "(ax, *args, **kwargs)"
  },
  "type": "DocBlob"
}