{
  "aliases": [
    "matplotlib.tri.CubicTriInterpolator"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    },
    "Extended Summary": {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "In one-dimension - on a segment - a cubic interpolating function is defined by the values of the function and its derivative at both ends. This is almost the same in 2D inside a triangle, except that the values of the function and its 2 derivatives have to be defined at each triangle node."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "The CubicTriInterpolator takes the value of the function at each node - provided by the user - and internally computes the value of the derivatives, resulting in a smooth interpolation. (As a special feature, the user can also impose the value of the derivatives at each node, but this is not supposed to be the common usage.)"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null
    },
    "Methods": {
      "children": [
        {
          "data": {
            "children": [
              {
                "desc": [],
                "param": "`__call__` (x, y)",
                "type_": "Returns interpolated values at (x, y) points."
              },
              {
                "desc": [],
                "param": "`gradient` (x, y)",
                "type_": "Returns interpolated derivatives at (x, y) points."
              }
            ]
          },
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null
    },
    "Notes": {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "This note is a bit technical and details how the cubic interpolation is computed."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "The interpolation is based on a Clough-Tocher subdivision scheme of the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "triangulation"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": " mesh (to make it clearer, each triangle of the grid will be divided in 3 child-triangles, and on each child triangle the interpolated function is a cubic polynomial of the 2 coordinates). This technique originates from FEM (Finite Element Method) analysis; the element used is a reduced Hsieh-Clough-Tocher (HCT) element. Its shape functions are described in . The assembled function is guaranteed to be C1-smooth, i.e. it is continuous and its first derivatives are also continuous (this is easy to show inside the triangles but is also true when crossing the edges)."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "In the default case ("
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "kind"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": " ='min_E'), the interpolant minimizes a curvature energy on the functional space generated by the HCT element shape functions - with imposed values but arbitrary derivatives at each node. The minimized functional is the integral of the so-called total curvature (implementation based on an algorithm from  - PCG sparse solver):"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "E(z) = \\frac{1}{2} \\int_{\\Omega} \\left(\n        \\left( \\frac{\\partial^2{z}}{\\partial{x}^2} \\right)^2 +\n        \\left( \\frac{\\partial^2{z}}{\\partial{y}^2} \\right)^2 +\n        2\\left( \\frac{\\partial^2{z}}{\\partial{y}\\partial{x}} \\right)^2\n    \\right) dx\\,dy"
                },
                "type": "BlockMath"
              }
            ]
          },
          "type": "BlockQuote"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "If the case "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "kind"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": " ='geom' is chosen by the user, a simple geometric approximation is used (weighted average of the triangle normal vectors), which could improve speed on very large grids."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    },
    "Parameters": {
      "children": [
        {
          "data": {
            "children": [
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "The triangulation to interpolate over."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "triangulation",
                "type_": "`~matplotlib.tri.Triangulation`"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Array of values, defined at grid points, to interpolate between."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "z",
                "type_": "(npoints,) array-like"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Choice of the smoothing algorithm, in order to compute the interpolant derivatives (defaults to 'min_E'):"
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  },
                  {
                    "data": {
                      "children": [
                        {
                          "children": [
                            {
                              "data": {
                                "children": [
                                  {
                                    "data": {
                                      "value": "if 'min_E': (default) The derivatives at each node is computed   to minimize a bending energy."
                                    },
                                    "type": "Words"
                                  }
                                ]
                              },
                              "type": "Paragraph"
                            }
                          ]
                        },
                        {
                          "children": [
                            {
                              "data": {
                                "children": [
                                  {
                                    "data": {
                                      "value": "if 'geom': The derivatives at each node is computed as a   weighted average of relevant triangle normals. To be used for   speed optimization (large grids)."
                                    },
                                    "type": "Words"
                                  }
                                ]
                              },
                              "type": "Paragraph"
                            }
                          ]
                        },
                        {
                          "children": [
                            {
                              "data": {
                                "children": [
                                  {
                                    "data": {
                                      "value": "if 'user': The user provides the argument "
                                    },
                                    "type": "Words"
                                  },
                                  {
                                    "data": {
                                      "value": {
                                        "value": "dz"
                                      }
                                    },
                                    "type": "Emph"
                                  },
                                  {
                                    "data": {
                                      "value": ", no computation   is hence needed."
                                    },
                                    "type": "Words"
                                  }
                                ]
                              },
                              "type": "Paragraph"
                            }
                          ]
                        }
                      ]
                    },
                    "type": "BulletList"
                  }
                ],
                "param": "kind",
                "type_": "{'min_E', 'geom', 'user'}, optional"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "If not specified, the Triangulation's default TriFinder will be used by calling "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "anchor": null,
                            "exists": true,
                            "kind": "module",
                            "reference": {
                              "kind": "module",
                              "module": "matplotlib",
                              "path": "matplotlib.tri.triangulation.Triangulation.get_trifinder",
                              "version": "3.6.2"
                            },
                            "value": ".Triangulation.get_trifinder"
                          },
                          "type": "Link"
                        },
                        {
                          "data": {
                            "value": "."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "trifinder",
                "type_": "`~matplotlib.tri.TriFinder`, optional"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Used only if  "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": {
                              "value": "kind"
                            }
                          },
                          "type": "Emph"
                        },
                        {
                          "data": {
                            "value": " ='user'. In this case "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": {
                              "value": "dz"
                            }
                          },
                          "type": "Emph"
                        },
                        {
                          "data": {
                            "value": " must be provided as (dzdx, dzdy) where dzdx, dzdy are arrays of the same shape as "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": {
                              "value": "z"
                            }
                          },
                          "type": "Emph"
                        },
                        {
                          "data": {
                            "value": " and are the interpolant first derivatives at the "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": {
                              "value": "triangulation"
                            }
                          },
                          "type": "Emph"
                        },
                        {
                          "data": {
                            "value": " points."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "dz",
                "type_": "tuple of array-likes (dzdx, dzdy), optional"
              }
            ]
          },
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    },
    "Returns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    },
    "Summary": {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Cubic interpolator on a triangular grid."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    }
  },
  "example_section_data": {
    "children": [],
    "level": 0,
    "target": null,
    "title": null
  },
  "item_file": "/matplotlib/tri/triinterpolate.py",
  "item_line": 286,
  "item_type": "<class 'type'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Methods",
    "Notes",
    "References"
  ],
  "references": null,
  "see_also": [],
  "signature": {
    "value": null
  }
}