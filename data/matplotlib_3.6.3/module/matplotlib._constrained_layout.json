{
  "aliases": [
    "matplotlib._constrained_layout"
  ],
  "arbitrary": [
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Adjust subplot layouts so that there are no overlapping axes or axes decorations.  All axes decorations are dealt with (labels, ticks, titles, ticklabels) and some dependent artists are also dealt with (colorbar, suptitle)."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Layout is done via "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "module",
              "reference": {
                "kind": "module",
                "module": "matplotlib",
                "path": "matplotlib.gridspec",
                "type": "RefInfo",
                "version": "3.6.3"
              },
              "type": "Link",
              "value": "~matplotlib.gridspec"
            },
            {
              "type": "text",
              "value": ", with one constraint per gridspec, so it is possible to have overlapping axes if the gridspecs overlap (i.e. using "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "module",
              "reference": {
                "kind": "api",
                "module": "matplotlib",
                "path": "matplotlib.gridspec:GridSpecFromSubplotSpec",
                "type": "RefInfo",
                "version": "*"
              },
              "type": "Link",
              "value": "GridSpecFromSubplotSpec"
            },
            {
              "type": "text",
              "value": ").  Axes placed using "
            },
            {
              "type": "inlineCode",
              "value": "figure.subplots()"
            },
            {
              "type": "text",
              "value": " or "
            },
            {
              "type": "inlineCode",
              "value": "figure.add_subplots()"
            },
            {
              "type": "text",
              "value": " will participate in the layout.  Axes manually placed via "
            },
            {
              "type": "inlineCode",
              "value": "figure.add_axes()"
            },
            {
              "type": "text",
              "value": " will not."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "See Tutorial: "
            },
            {
              "type": "inlineCode",
              "value": "/tutorials/intermediate/constrainedlayout_guide"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "First, a figure has a gridspec that divides the figure into nrows and ncols, with heights and widths set by "
            },
            {
              "type": "inlineCode",
              "value": "height_ratios"
            },
            {
              "type": "text",
              "value": " and "
            },
            {
              "type": "inlineCode",
              "value": "width_ratios"
            },
            {
              "type": "text",
              "value": ", often just set to 1 for an equal grid."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Subplotspecs that are derived from this gridspec can contain either a "
            },
            {
              "type": "inlineCode",
              "value": "SubPanel"
            },
            {
              "type": "text",
              "value": ", a "
            },
            {
              "type": "inlineCode",
              "value": "GridSpecFromSubplotSpec"
            },
            {
              "type": "text",
              "value": ", or an "
            },
            {
              "type": "inlineCode",
              "value": "Axes"
            },
            {
              "type": "text",
              "value": ".  The "
            },
            {
              "type": "inlineCode",
              "value": "SubPanel"
            },
            {
              "type": "text",
              "value": " and "
            },
            {
              "type": "inlineCode",
              "value": "GridSpecFromSubplotSpec"
            },
            {
              "type": "text",
              "value": " are dealt with recursively and each contain an analogous layout."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Each "
            },
            {
              "type": "inlineCode",
              "value": "GridSpec"
            },
            {
              "type": "text",
              "value": " has a "
            },
            {
              "type": "inlineCode",
              "value": "_layoutgrid"
            },
            {
              "type": "text",
              "value": " attached to it.  The "
            },
            {
              "type": "inlineCode",
              "value": "_layoutgrid"
            },
            {
              "type": "text",
              "value": " has the same logical layout as the "
            },
            {
              "type": "inlineCode",
              "value": "GridSpec"
            },
            {
              "type": "text",
              "value": ".   Each row of the grid spec has a top and bottom \"margin\" and each column has a left and right \"margin\". The \"inner\" height of each row is constrained to be the same (or as modified by "
            },
            {
              "type": "inlineCode",
              "value": "height_ratio"
            },
            {
              "type": "text",
              "value": "), and the \"inner\" width of each column is constrained to be the same (as modified by "
            },
            {
              "type": "inlineCode",
              "value": "width_ratio"
            },
            {
              "type": "text",
              "value": "), where \"inner\" is the width or height of each column/row minus the size of the margins."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Then the size of the margins for each row and column are determined as the max width of the decorators on each axes that has decorators in that margin. For instance, a normal axes would have a left margin that includes the left ticklabels, and the ylabel if it exists.  The right margin may include a colorbar, the bottom margin the xaxis decorations, and the top margin the title."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "With these constraints, the solver then finds appropriate bounds for the columns and rows.  It's possible that the margins take up the whole figure, in which case the algorithm is not applied and a warning is raised."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "See the tutorial doc:`/tutorials/intermediate/constrainedlayout_guide` for more discussion of the algorithm with examples."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": "General idea:",
      "type": "Section"
    }
  ],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "To remove in the future \u2013\u2013 matplotlib._constrained_layout"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/matplotlib/_constrained_layout.py",
  "item_line": 0,
  "item_type": "<class 'module'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary"
  ],
  "references": null,
  "see_also": [],
  "signature": {
    "type": "Signature",
    "value": null
  },
  "type": "DocBlob"
}