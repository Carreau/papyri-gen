{
  "aliases": [
    "matplotlib.pyplot.Axes.csd"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "The cross spectral density "
            },
            {
              "type": "inlineMath",
              "value": "P_{xy}"
            },
            {
              "type": "text",
              "value": " by Welch's average periodogram method.  The vectors "
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "x"
                }
              ],
              "type": "emphasis"
            },
            {
              "type": "text",
              "value": " and "
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "y"
                }
              ],
              "type": "emphasis"
            },
            {
              "type": "text",
              "value": " are divided into "
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "NFFT"
                }
              ],
              "type": "emphasis"
            },
            {
              "type": "text",
              "value": " length segments.  Each segment is detrended by function "
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "detrend"
                }
              ],
              "type": "emphasis"
            },
            {
              "type": "text",
              "value": " and windowed by function "
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "window"
                }
              ],
              "type": "emphasis"
            },
            {
              "type": "text",
              "value": ".  "
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "noverlap"
                }
              ],
              "type": "emphasis"
            },
            {
              "type": "text",
              "value": " gives the length of the overlap between segments.  The product of the direct FFTs of "
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "x"
                }
              ],
              "type": "emphasis"
            },
            {
              "type": "text",
              "value": " and "
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "y"
                }
              ],
              "type": "emphasis"
            },
            {
              "type": "text",
              "value": " are averaged over each segment to compute "
            },
            {
              "type": "inlineMath",
              "value": "P_{xy}"
            },
            {
              "type": "text",
              "value": ", with a scaling to correct for power loss due to windowing."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "If len("
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "x"
                }
              ],
              "type": "emphasis"
            },
            {
              "type": "text",
              "value": ") < "
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "NFFT"
                }
              ],
              "type": "emphasis"
            },
            {
              "type": "text",
              "value": " or len("
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "y"
                }
              ],
              "type": "emphasis"
            },
            {
              "type": "text",
              "value": ") < "
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "NFFT"
                }
              ],
              "type": "emphasis"
            },
            {
              "type": "text",
              "value": ", they will be zero padded to "
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "NFFT"
                }
              ],
              "type": "emphasis"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "For plotting, the power is plotted as "
            },
            {
              "type": "inlineMath",
              "value": "10 \\log_{10}(P_{xy})"
            },
            {
              "type": "text",
              "value": " for decibels, though "
            },
            {
              "type": "inlineMath",
              "value": "P_{xy}"
            },
            {
              "type": "text",
              "value": " itself is returned."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "If given, the following parameters also accept a string "
                    },
                    {
                      "type": "inlineCode",
                      "value": "s"
                    },
                    {
                      "type": "text",
                      "value": ", which is interpreted as "
                    },
                    {
                      "type": "inlineCode",
                      "value": "data[s]"
                    },
                    {
                      "type": "text",
                      "value": " (unless this raises an exception):"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "x"
                        }
                      ],
                      "type": "emphasis"
                    },
                    {
                      "type": "text",
                      "value": ", "
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "y"
                        }
                      ],
                      "type": "emphasis"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "data",
              "type": "Param",
              "type_": "indexable object, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Keyword arguments control the "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": ".Line2D"
                    },
                    {
                      "type": "text",
                      "value": " properties:"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Properties: agg_filter: a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array and two offsets from the bottom left corner of the image alpha: scalar or None animated: bool antialiased or aa: bool clip_box: "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": ".Bbox"
                    },
                    {
                      "type": "text",
                      "value": " clip_on: bool clip_path: Patch or (Path, Transform) or None color or c: color dash_capstyle: "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": ".CapStyle"
                    },
                    {
                      "type": "text",
                      "value": " or {'butt', 'projecting', 'round'} dash_joinstyle: "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": ".JoinStyle"
                    },
                    {
                      "type": "text",
                      "value": " or {'miter', 'round', 'bevel'} dashes: sequence of floats (on/off ink in points) or (None, None) data: (2, N) array or two 1D arrays drawstyle or ds: {'default', 'steps', 'steps-pre', 'steps-mid', 'steps-post'}, default: 'default' figure: "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": ".Figure"
                    },
                    {
                      "type": "text",
                      "value": " fillstyle: {'full', 'left', 'right', 'bottom', 'top', 'none'} gapcolor: color or None gid: str in_layout: bool label: object linestyle or ls: {'-', '--', '-.', ':', '', (offset, on-off-seq), ...} linewidth or lw: float marker: marker style string, "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "~.path.Path"
                    },
                    {
                      "type": "text",
                      "value": " or "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "~.markers.MarkerStyle"
                    },
                    {
                      "type": "text",
                      "value": " markeredgecolor or mec: color markeredgewidth or mew: float markerfacecolor or mfc: color markerfacecoloralt or mfcalt: color markersize or ms: float markevery: None or int or (int, int) or slice or list[int] or float or (float, float) or list[bool] mouseover: bool path_effects: "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": ".AbstractPathEffect"
                    },
                    {
                      "type": "text",
                      "value": " picker: float or callable[[Artist, Event], tuple[bool, dict]] pickradius: unknown rasterized: bool sketch_params: (scale: float, length: float, randomness: float) snap: bool or None solid_capstyle: "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": ".CapStyle"
                    },
                    {
                      "type": "text",
                      "value": " or {'butt', 'projecting', 'round'} solid_joinstyle: "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": ".JoinStyle"
                    },
                    {
                      "type": "text",
                      "value": " or {'miter', 'round', 'bevel'} transform: unknown url: str visible: bool xdata: 1D array ydata: 1D array zorder: float"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "**kwargs",
              "type": "Param",
              "type_": ""
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Arrays or sequences containing the data."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "x, y",
              "type": "Param",
              "type_": "1-D arrays or sequences"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The sampling frequency (samples per time unit).  It is used to calculate the Fourier frequencies, "
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "freqs"
                        }
                      ],
                      "type": "emphasis"
                    },
                    {
                      "type": "text",
                      "value": ", in cycles per time unit."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "Fs",
              "type": "Param",
              "type_": "float, default: 2"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "A function or a vector of length "
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "NFFT"
                        }
                      ],
                      "type": "emphasis"
                    },
                    {
                      "type": "text",
                      "value": ".  To create window vectors see "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": ".window_hanning"
                    },
                    {
                      "type": "text",
                      "value": ", "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": ".window_none"
                    },
                    {
                      "type": "text",
                      "value": ", "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "module",
                      "reference": {
                        "kind": "api",
                        "module": "numpy:blackman",
                        "path": "numpy:blackman",
                        "type": "RefInfo",
                        "version": "*"
                      },
                      "type": "Link",
                      "value": "numpy.blackman"
                    },
                    {
                      "type": "text",
                      "value": ", "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "module",
                      "reference": {
                        "kind": "api",
                        "module": "numpy:hamming",
                        "path": "numpy:hamming",
                        "type": "RefInfo",
                        "version": "*"
                      },
                      "type": "Link",
                      "value": "numpy.hamming"
                    },
                    {
                      "type": "text",
                      "value": ", "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "module",
                      "reference": {
                        "kind": "api",
                        "module": "numpy:bartlett",
                        "path": "numpy:bartlett",
                        "type": "RefInfo",
                        "version": "*"
                      },
                      "type": "Link",
                      "value": "numpy.bartlett"
                    },
                    {
                      "type": "text",
                      "value": ", "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "module",
                      "reference": {
                        "kind": "api",
                        "module": "scipy",
                        "path": "scipy.signal",
                        "type": "RefInfo",
                        "version": "*"
                      },
                      "type": "Link",
                      "value": "scipy.signal"
                    },
                    {
                      "type": "text",
                      "value": ", "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "module",
                      "reference": {
                        "kind": "api",
                        "module": "scipy",
                        "path": "scipy.signal.windows._windows:get_window",
                        "type": "RefInfo",
                        "version": "*"
                      },
                      "type": "Link",
                      "value": "scipy.signal.get_window"
                    },
                    {
                      "type": "text",
                      "value": ", etc.  If a function is passed as the argument, it must take a data segment as an argument and return the windowed version of the segment."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "window",
              "type": "Param",
              "type_": "callable or ndarray, default: `.window_hanning`"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Which sides of the spectrum to return. 'default' is one-sided for real data and two-sided for complex data. 'onesided' forces the return of a one-sided spectrum, while 'twosided' forces two-sided."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "sides",
              "type": "Param",
              "type_": "{'default', 'onesided', 'twosided'}, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The number of points to which the data segment is padded when performing the FFT.  This can be different from "
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "NFFT"
                        }
                      ],
                      "type": "emphasis"
                    },
                    {
                      "type": "text",
                      "value": ", which specifies the number of data points used.  While not increasing the actual resolution of the spectrum (the minimum distance between resolvable peaks), this can give more points in the plot, allowing for more detail. This corresponds to the "
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "n"
                        }
                      ],
                      "type": "emphasis"
                    },
                    {
                      "type": "text",
                      "value": " parameter in the call to "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "module",
                      "reference": {
                        "kind": "api",
                        "module": "numpy",
                        "path": "numpy.fft:fft",
                        "type": "RefInfo",
                        "version": "*"
                      },
                      "type": "Link",
                      "value": "fft"
                    },
                    {
                      "type": "text",
                      "value": ". The default is None, which sets "
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "pad_to"
                        }
                      ],
                      "type": "emphasis"
                    },
                    {
                      "type": "text",
                      "value": " equal to "
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "NFFT"
                        }
                      ],
                      "type": "emphasis"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "pad_to",
              "type": "Param",
              "type_": "int, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The number of data points used in each block for the FFT.  A power 2 is most efficient.  This should "
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "NOT"
                        }
                      ],
                      "type": "emphasis"
                    },
                    {
                      "type": "text",
                      "value": " be used to get zero padding, or the scaling of the result will be incorrect; use "
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "pad_to"
                        }
                      ],
                      "type": "emphasis"
                    },
                    {
                      "type": "text",
                      "value": " for this instead."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "NFFT",
              "type": "Param",
              "type_": "int, default: 256"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The function applied to each segment before fft-ing, designed to remove the mean or linear trend.  Unlike in MATLAB, where the "
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "detrend"
                        }
                      ],
                      "type": "emphasis"
                    },
                    {
                      "type": "text",
                      "value": " parameter is a vector, in Matplotlib it is a function.  The "
                    },
                    {
                      "type": "inlineCode",
                      "value": "~matplotlib.mlab"
                    },
                    {
                      "type": "text",
                      "value": " module defines "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": ".detrend_none"
                    },
                    {
                      "type": "text",
                      "value": ", "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": ".detrend_mean"
                    },
                    {
                      "type": "text",
                      "value": ", and "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": ".detrend_linear"
                    },
                    {
                      "type": "text",
                      "value": ", but you can use a custom function as well.  You can also use a string to choose one of the functions: 'none' calls "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": ".detrend_none"
                    },
                    {
                      "type": "text",
                      "value": ". 'mean' calls "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": ".detrend_mean"
                    },
                    {
                      "type": "text",
                      "value": ". 'linear' calls "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": ".detrend_linear"
                    },
                    {
                      "type": "text",
                      "value": "."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "detrend",
              "type": "Param",
              "type_": "{'none', 'mean', 'linear'} or callable, default: 'none'"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Whether the resulting density values should be scaled by the scaling frequency, which gives density in units of 1/Hz.  This allows for integration over the returned frequency values.  The default is True for MATLAB compatibility."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "scale_by_freq",
              "type": "Param",
              "type_": "bool, default: True"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The number of points of overlap between segments."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "noverlap",
              "type": "Param",
              "type_": "int, default: 0 (no overlap)"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The center frequency of "
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "x"
                        }
                      ],
                      "type": "emphasis"
                    },
                    {
                      "type": "text",
                      "value": ", which offsets the x extents of the plot to reflect the frequency range used when a signal is acquired and then filtered and downsampled to baseband."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "Fc",
              "type": "Param",
              "type_": "int, default: 0"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Whether to include the line object plotted in the returned values."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "return_line",
              "type": "Param",
              "type_": "bool, default: False"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The values for the cross spectrum "
                    },
                    {
                      "type": "inlineMath",
                      "value": "P_{xy}"
                    },
                    {
                      "type": "text",
                      "value": " before scaling (complex valued)."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "Pxy",
              "type": "Param",
              "type_": "1-D array"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The frequencies corresponding to the elements in "
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "Pxy"
                        }
                      ],
                      "type": "emphasis"
                    },
                    {
                      "type": "text",
                      "value": "."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "freqs",
              "type": "Param",
              "type_": "1-D array"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The line created by this function. Only returned if "
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "return_line"
                        }
                      ],
                      "type": "emphasis"
                    },
                    {
                      "type": "text",
                      "value": " is True."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "line",
              "type": "Param",
              "type_": "`~matplotlib.lines.Line2D`"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Plot the cross-spectral density."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/matplotlib/axes/_axes.py",
  "item_line": 7205,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns",
    "Other Parameters",
    "See Also",
    "Notes",
    "References"
  ],
  "references": null,
  "see_also": [
    {
      "descriptions": [
        {
          "children": [
            {
              "type": "text",
              "value": "is equivalent to setting "
            },
            {
              "type": "inlineCode",
              "value": "y = x"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        }
      ],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "module",
          "module": "matplotlib",
          "path": "matplotlib.axes._axes:Axes.psd",
          "type": "RefInfo",
          "version": "3.6.3"
        },
        "type": "Link",
        "value": "psd"
      },
      "type": null
    }
  ],
  "signature": {
    "type": "Signature",
    "value": "(self, x, y, NFFT=None, Fs=None, Fc=None, detrend=None, window=None, noverlap=None, pad_to=None, sides=None, scale_by_freq=None, return_line=None, *, data=None, **kwargs)"
  },
  "type": "DocBlob"
}