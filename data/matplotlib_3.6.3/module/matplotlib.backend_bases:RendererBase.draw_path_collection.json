{
  "aliases": [
    "matplotlib.backend_bases.RendererBase.draw_path_collection"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Each path is first transformed by the corresponding entry in "
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "all_transforms"
                }
              ],
              "type": "emphasis"
            },
            {
              "type": "text",
              "value": " (a list of (3, 3) matrices) and then by "
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "master_transform"
                }
              ],
              "type": "emphasis"
            },
            {
              "type": "text",
              "value": ".  They are then translated by the corresponding entry in "
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "offsets"
                }
              ],
              "type": "emphasis"
            },
            {
              "type": "text",
              "value": ", which has been first transformed by "
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "offset_trans"
                }
              ],
              "type": "emphasis"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "children": [
                {
                  "type": "text",
                  "value": "facecolors"
                }
              ],
              "type": "emphasis"
            },
            {
              "type": "text",
              "value": ", "
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "edgecolors"
                }
              ],
              "type": "emphasis"
            },
            {
              "type": "text",
              "value": ", "
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "linewidths"
                }
              ],
              "type": "emphasis"
            },
            {
              "type": "text",
              "value": ", "
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "linestyles"
                }
              ],
              "type": "emphasis"
            },
            {
              "type": "text",
              "value": ", and "
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "antialiased"
                }
              ],
              "type": "emphasis"
            },
            {
              "type": "text",
              "value": " are lists that set the corresponding properties."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "children": [
                {
                  "type": "text",
                  "value": "offset_position"
                }
              ],
              "type": "emphasis"
            },
            {
              "type": "text",
              "value": " is unused now, but the argument is kept for backwards compatibility."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "The base (fallback) implementation makes multiple calls to "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "module",
              "reference": {
                "kind": "module",
                "module": "matplotlib",
                "path": "matplotlib.backend_bases:RendererBase.draw_path",
                "type": "RefInfo",
                "version": "3.6.3"
              },
              "type": "Link",
              "value": "draw_path"
            },
            {
              "type": "text",
              "value": ". Backends may want to override this in order to render each set of path data only once, and then reference that path multiple times with the different offsets, colors, styles etc.  The generator methods "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "module",
              "reference": {
                "kind": "module",
                "module": "matplotlib",
                "path": "matplotlib.backend_bases:RendererBase._iter_collection_raw_paths",
                "type": "RefInfo",
                "version": "3.6.3"
              },
              "type": "Link",
              "value": "_iter_collection_raw_paths"
            },
            {
              "type": "text",
              "value": " and "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "module",
              "reference": {
                "kind": "module",
                "module": "matplotlib",
                "path": "matplotlib.backend_bases:RendererBase._iter_collection",
                "type": "RefInfo",
                "version": "3.6.3"
              },
              "type": "Link",
              "value": "_iter_collection"
            },
            {
              "type": "text",
              "value": " are provided to help with (and standardize) the implementation across backends.  It is highly recommended to use those generators, so that changes to the behavior of "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "module",
              "reference": {
                "kind": "module",
                "module": "matplotlib",
                "path": "matplotlib.backend_bases:RendererBase.draw_path_collection",
                "type": "RefInfo",
                "version": "3.6.3"
              },
              "type": "Link",
              "value": "draw_path_collection"
            },
            {
              "type": "text",
              "value": " can be made globally."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Draw a collection of "
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "paths"
                }
              ],
              "type": "emphasis"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/matplotlib/backend_bases.py",
  "item_line": 223,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary"
  ],
  "references": null,
  "see_also": [],
  "signature": {
    "type": "Signature",
    "value": "(self, gc, master_transform, paths, all_transforms, offsets, offset_trans, facecolors, edgecolors, linewidths, linestyles, antialiaseds, urls, offset_position)"
  },
  "type": "DocBlob"
}