{
  "aliases": [
    "matplotlib.pyplot.broken_barh"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "A rectangle is drawn for each element of "
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "xranges"
                }
              ],
              "type": "emphasis"
            },
            {
              "type": "text",
              "value": ". All rectangles have the same vertical position and size defined by "
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "yrange"
                }
              ],
              "type": "emphasis"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "This is a convenience function for instantiating a "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": ".BrokenBarHCollection"
            },
            {
              "type": "text",
              "value": ", adding it to the Axes and autoscaling the view."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "If given, all parameters also accept a string "
                    },
                    {
                      "type": "inlineCode",
                      "value": "s"
                    },
                    {
                      "type": "text",
                      "value": ", which is interpreted as "
                    },
                    {
                      "type": "inlineCode",
                      "value": "data[s]"
                    },
                    {
                      "type": "text",
                      "value": " (unless this raises an exception)."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "data",
              "type": "Param",
              "type_": "indexable object, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Each "
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "kwarg"
                        }
                      ],
                      "type": "emphasis"
                    },
                    {
                      "type": "text",
                      "value": " can be either a single argument applying to all rectangles, e.g.      "
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "type": "code",
                  "value": "facecolors='black'"
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "or a sequence of arguments over which is cycled, e.g.      "
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "type": "code",
                  "value": "facecolors=('black', 'blue')"
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "would create interleaving black and blue rectangles."
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Supported keywords:"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Properties: agg_filter: a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array and two offsets from the bottom left corner of the image alpha: array-like or scalar or None animated: bool antialiased or aa or antialiaseds: bool or list of bools array: array-like or None capstyle: "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": ".CapStyle"
                    },
                    {
                      "type": "text",
                      "value": " or {'butt', 'projecting', 'round'} clim: (vmin: float, vmax: float) clip_box: "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": ".Bbox"
                    },
                    {
                      "type": "text",
                      "value": " clip_on: bool clip_path: Patch or (Path, Transform) or None cmap: "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": ".Colormap"
                    },
                    {
                      "type": "text",
                      "value": " or str or None color: color or list of RGBA tuples edgecolor or ec or edgecolors: color or list of colors or 'face' facecolor or facecolors or fc: color or list of colors figure: "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": ".Figure"
                    },
                    {
                      "type": "text",
                      "value": " gid: str hatch: {'/', '\\\\', '|', '-', '+', 'x', 'o', 'O', '.', '*'} in_layout: bool joinstyle: "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": ".JoinStyle"
                    },
                    {
                      "type": "text",
                      "value": " or {'miter', 'round', 'bevel'} label: object linestyle or dashes or linestyles or ls: str or tuple or list thereof linewidth or linewidths or lw: float or list of floats mouseover: bool norm: "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": ".Normalize"
                    },
                    {
                      "type": "text",
                      "value": " or str or None offset_transform or transOffset: unknown offsets: (N, 2) or (2,) array-like path_effects: "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": ".AbstractPathEffect"
                    },
                    {
                      "type": "text",
                      "value": " paths: list of array-like picker: None or bool or float or callable pickradius: unknown rasterized: bool sizes: ndarray or None sketch_params: (scale: float, length: float, randomness: float) snap: bool or None transform: "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": ".Transform"
                    },
                    {
                      "type": "text",
                      "value": " url: str urls: list of str or None verts: list of array-like verts_and_codes: unknown visible: bool zorder: float"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "**kwargs",
              "type": "Param",
              "type_": "`.BrokenBarHCollection` properties"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The x-positions and extends of the rectangles. For each tuple ("
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "xmin"
                        }
                      ],
                      "type": "emphasis"
                    },
                    {
                      "type": "text",
                      "value": ", "
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "xwidth"
                        }
                      ],
                      "type": "emphasis"
                    },
                    {
                      "type": "text",
                      "value": ") a rectangle is drawn from "
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "xmin"
                        }
                      ],
                      "type": "emphasis"
                    },
                    {
                      "type": "text",
                      "value": " to "
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "xmin"
                        }
                      ],
                      "type": "emphasis"
                    },
                    {
                      "type": "text",
                      "value": " + "
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "xwidth"
                        }
                      ],
                      "type": "emphasis"
                    },
                    {
                      "type": "text",
                      "value": "."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "xranges",
              "type": "Param",
              "type_": "sequence of tuples (*xmin*, *xwidth*)"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The y-position and extend for all the rectangles."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "yrange",
              "type": "Param",
              "type_": "(*ymin*, *yheight*)"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [
        {
          "children": [
            {
              "desc": [],
              "param": "",
              "type": "Param",
              "type_": "`~.collections.BrokenBarHCollection`"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Plot a horizontal sequence of rectangles."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/matplotlib/pyplot.py",
  "item_line": 2434,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns",
    "Other Parameters"
  ],
  "references": null,
  "see_also": [],
  "signature": {
    "type": "Signature",
    "value": "(xranges, yrange, *, data=None, **kwargs)"
  },
  "type": "DocBlob"
}