{
  "aliases": [
    "matplotlib.pyplot.subplot_mosaic"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "This is a helper function to build complex GridSpec layouts visually."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "children": [
                {
                  "type": "text",
                  "value": "note "
                }
              ],
              "type": "admonitionTitle"
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "This API is provisional and may be revised in the future based on early user feedback."
                }
              ],
              "type": "paragraph"
            }
          ],
          "kind": "note",
          "type": "admonition"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "See "
            },
            {
              "type": "inlineCode",
              "value": "/tutorials/provisional/mosaic"
            },
            {
              "type": "text",
              "value": " for an example and full API documentation"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "A visual layout of how you want your Axes to be arranged labeled as strings.  For example      "
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "type": "code",
                  "value": "x = [['A panel', 'A panel', 'edge'],\n     ['C panel', '.',       'edge']]"
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "produces 4 axes:"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "children": [
                        {
                          "children": [
                            {
                              "type": "text",
                              "value": "'A panel' which is 1 row high and spans the first two columns"
                            }
                          ],
                          "type": "paragraph"
                        }
                      ],
                      "spread": false,
                      "type": "listItem"
                    },
                    {
                      "children": [
                        {
                          "children": [
                            {
                              "type": "text",
                              "value": "'edge' which is 2 rows high and is on the right edge"
                            }
                          ],
                          "type": "paragraph"
                        }
                      ],
                      "spread": false,
                      "type": "listItem"
                    },
                    {
                      "children": [
                        {
                          "children": [
                            {
                              "type": "text",
                              "value": "'C panel' which in 1 row and 1 column wide in the bottom left"
                            }
                          ],
                          "type": "paragraph"
                        }
                      ],
                      "spread": false,
                      "type": "listItem"
                    },
                    {
                      "children": [
                        {
                          "children": [
                            {
                              "type": "text",
                              "value": "a blank space 1 row and 1 column wide in the bottom center"
                            }
                          ],
                          "type": "paragraph"
                        }
                      ],
                      "spread": false,
                      "type": "listItem"
                    }
                  ],
                  "ordered": false,
                  "spread": false,
                  "start": 1,
                  "type": "list"
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Any of the entries in the layout can be a list of lists of the same form to create nested layouts."
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "If input is a str, then it must be of the form     "
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "type": "code",
                  "value": "'''\nAAE\nC.E\n'''"
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "where each character is a column and each line is a row. This only allows only single character Axes labels and does not allow nesting but is very terse."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "mosaic",
              "type": "Param",
              "type_": "list of list of {hashable or nested} or str"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "If True, the x-axis ("
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "sharex"
                        }
                      ],
                      "type": "emphasis"
                    },
                    {
                      "type": "text",
                      "value": ") or y-axis ("
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "sharey"
                        }
                      ],
                      "type": "emphasis"
                    },
                    {
                      "type": "text",
                      "value": ") will be shared among all subplots.  In that case, tick label visibility and axis units behave as for "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "subplots"
                    },
                    {
                      "type": "text",
                      "value": ".  If False, each subplot's x- or y-axis will be independent."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "sharex, sharey",
              "type": "Param",
              "type_": "bool, default: False"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Defines the relative widths of the columns. Each column gets a relative width of "
                    },
                    {
                      "type": "inlineCode",
                      "value": "width_ratios[i] / sum(width_ratios)"
                    },
                    {
                      "type": "text",
                      "value": ". If not given, all columns will have the same width.  Convenience for "
                    },
                    {
                      "type": "inlineCode",
                      "value": "gridspec_kw={'width_ratios': [...]}"
                    },
                    {
                      "type": "text",
                      "value": "."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "width_ratios",
              "type": "Param",
              "type_": "array-like of length *ncols*, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Defines the relative heights of the rows. Each row gets a relative height of "
                    },
                    {
                      "type": "inlineCode",
                      "value": "height_ratios[i] / sum(height_ratios)"
                    },
                    {
                      "type": "text",
                      "value": ". If not given, all rows will have the same height. Convenience for "
                    },
                    {
                      "type": "inlineCode",
                      "value": "gridspec_kw={'height_ratios': [...]}"
                    },
                    {
                      "type": "text",
                      "value": "."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "height_ratios",
              "type": "Param",
              "type_": "array-like of length *nrows*, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Entry in the layout to mean \"leave this space empty\".  Defaults to "
                    },
                    {
                      "type": "inlineCode",
                      "value": "'.'"
                    },
                    {
                      "type": "text",
                      "value": ". Note, if "
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "layout"
                        }
                      ],
                      "type": "emphasis"
                    },
                    {
                      "type": "text",
                      "value": " is a string, it is processed via "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "module",
                      "reference": {
                        "kind": "api",
                        "module": "inspect:cleandoc",
                        "path": "inspect:cleandoc",
                        "type": "RefInfo",
                        "version": "*"
                      },
                      "type": "Link",
                      "value": "inspect.cleandoc"
                    },
                    {
                      "type": "text",
                      "value": " to remove leading white space, which may interfere with using white-space as the empty sentinel."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "empty_sentinel",
              "type": "Param",
              "type_": "object, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Dictionary with keywords passed to the "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": ".Figure.add_subplot"
                    },
                    {
                      "type": "text",
                      "value": " call used to create each subplot."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "subplot_kw",
              "type": "Param",
              "type_": "dict, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Dictionary with keywords passed to the "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": ".GridSpec"
                    },
                    {
                      "type": "text",
                      "value": " constructor used to create the grid the subplots are placed on."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "gridspec_kw",
              "type": "Param",
              "type_": "dict, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "All additional keyword arguments are passed to the "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": ".pyplot.figure"
                    },
                    {
                      "type": "text",
                      "value": " call."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "**fig_kw",
              "type": "Param",
              "type_": ""
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The new figure"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "fig",
              "type": "Param",
              "type_": "`.Figure`"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "A dictionary mapping the labels to the Axes objects.  The order of the axes is left-to-right and top-to-bottom of their position in the total layout."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "",
              "type": "Param",
              "type_": "dict[label, Axes]"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Build a layout of Axes based on ASCII art or nested lists."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/matplotlib/pyplot.py",
  "item_line": 1458,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns"
  ],
  "references": null,
  "see_also": [],
  "signature": {
    "type": "Signature",
    "value": "(mosaic, *, sharex=False, sharey=False, width_ratios=None, height_ratios=None, empty_sentinel='.', subplot_kw=None, gridspec_kw=None, **fig_kw)"
  },
  "type": "DocBlob"
}