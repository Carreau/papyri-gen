{
  "_content": {
    "Attributes": {
      "children": [],
      "title": null
    },
    "Extended Summary": {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "A "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "k"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": "-component is a maximal subgraph of a graph G that has, at least, node connectivity "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "k"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": ": we need to remove at least "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "k"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " nodes to break it into more components. "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "k"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": "-components have an inherent hierarchical structure because they are nested in terms of connectivity: a connected graph can contain several 2-components, each of which can contain one or more 3-components, and so forth."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "This implementation is based on the fast heuristics to approximate the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "k"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": "-component structure of a graph . Which, in turn, it is based on a fast approximation algorithm for finding good lower bounds of the number of node independent paths between two nodes ."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": null
    },
    "Methods": {
      "children": [],
      "title": null
    },
    "Notes": {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "The logic of the approximation algorithm for computing the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "k"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": "-component structure  is based on repeatedly applying simple and fast algorithms for "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "k"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": "-cores and biconnected components in order to narrow down the number of pairs of nodes over which we have to compute White and Newman's approximation algorithm for finding node independent paths . More formally, this algorithm is based on Whitney's theorem, which states an inclusion relation among node connectivity, edge connectivity, and minimum degree for any graph G. This theorem implies that every "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "k"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": "-component is nested inside a "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "k"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": "-edge-component, which in turn, is contained in a "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "k"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": "-core. Thus, this algorithm computes node independent paths among pairs of nodes in each biconnected part of each "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "k"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": "-core, and repeats this procedure for each "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "k"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " from 3 to the maximal core number of a node in the input graph."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Because, in practice, many nodes of the core of level "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "k"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " inside a bicomponent actually are part of a component of level k, the auxiliary graph needed for the algorithm is likely to be very dense. Thus, we use a complement graph data structure (see "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "AntiGraph"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": ") to save memory. AntiGraph only stores information of the edges that are "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "not"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": " present in the actual auxiliary graph. When applying algorithms to this complement graph data structure, it behaves as if it were the dense version."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": null
    },
    "Other Parameters": {
      "children": [],
      "title": null
    },
    "Parameters": {
      "children": [
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Undirected graph"
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "G",
            "type_": "NetworkX graph"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Density relaxation threshold. Default value 0.95"
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "min_density",
            "type_": "Float"
          },
          "type": "Param"
        }
      ],
      "title": null
    },
    "Raises": {
      "children": [
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "If G is directed."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "",
            "type_": "NetworkXNotImplemented"
          },
          "type": "Param"
        }
      ],
      "title": null
    },
    "Receives": {
      "children": [],
      "title": null
    },
    "Returns": {
      "children": [
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Dictionary with connectivity level "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "domain": null,
                        "role": null,
                        "value": "k"
                      },
                      "type": "Directive"
                    },
                    {
                      "data": {
                        "value": " as key and a list of sets of nodes that form a k-component of level "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "domain": null,
                        "role": null,
                        "value": "k"
                      },
                      "type": "Directive"
                    },
                    {
                      "data": {
                        "value": " as values."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "k_components",
            "type_": "dict"
          },
          "type": "Param"
        }
      ],
      "title": null
    },
    "Summary": {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Returns the approximate k-component structure of a graph G."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": null
    },
    "Warnings": {
      "children": [],
      "title": null
    },
    "Warns": {
      "children": [],
      "title": null
    },
    "Yields": {
      "children": [],
      "title": null
    }
  },
  "aliases": [
    "networkx.approximation.k_components"
  ],
  "arbitrary": [],
  "example_section_data": {
    "children": [
      {
        "data": {
          "ce_status": "execed",
          "entries": [
            [
              "# Petersen graph has 10 nodes and it is triconnected, thus all",
              "",
              "c1"
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "# nodes are in a single component on all three connectivity levels",
              "",
              "c1"
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "from",
              null,
              "kn"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "networkx",
              "networkx",
              "nn"
            ],
            [
              ".",
              "",
              "nn"
            ],
            [
              "algorithms",
              "networkx.algorithms",
              "nn"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "import",
              null,
              "kn"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "approximation",
              "networkx.algorithms.approximation",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "as",
              null,
              "k"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "apxa",
              "networkx.algorithms.approximation",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "G",
              "typing.Generator",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "nx",
              "networkx",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "petersen_graph",
              "networkx.generators.small.petersen_graph",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "k_components",
              "typing.Generator",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "apxa",
              "networkx.algorithms.approximation",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "k_components",
              null,
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "G",
              "typing.Generator",
              ""
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": ""
        },
        "type": "Code"
      }
    ],
    "title": null
  },
  "item_file": "networkx/algorithms/approximation/kcomponents.py",
  "item_line": 17,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns",
    "Raises",
    "Examples",
    "Notes",
    "See Also",
    "References"
  ],
  "references": null,
  "refs": [
    "k_components",
    "networkx",
    "networkx.algorithms",
    "networkx.algorithms.approximation",
    "networkx.generators.small.petersen_graph",
    "typing.Generator"
  ],
  "see_also": [
    {
      "descriptions": [],
      "name": {
        "exists": true,
        "name": "k_components",
        "ref": "networkx.algorithms.approximation.kcomponents.k_components"
      },
      "type": null
    }
  ],
  "signature": {
    "value": "k_components(G, min_density=0.95)"
  }
}