{
  "_content": {
    "Attributes": {
      "children": [],
      "title": null
    },
    "Extended Summary": {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Betweenness centrality of a node "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "v"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " is the sum of the fraction of all-pairs shortest paths that pass through "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "v"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": "."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Values of betweenness are normalized by the maximum possible value which for bipartite graphs is limited by the relative size of the two node sets ."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Let "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "n"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " be the number of nodes in the node set "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "U"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " and "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "m"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " be the number of nodes in the node set "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "V"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": ", then nodes in "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "U"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " are normalized by dividing by"
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": "\\frac { 1} { 2} [ m^2 ( s + 1)^2 + m ( s + 1) ( 2t - s - 1) - t ( 2s - t + 3)] , "
          },
          "type": "BlockMath"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "where"
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": "s = ( n - 1) \\div m , t = ( n - 1) \\mod m , "
          },
          "type": "BlockMath"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "and nodes in "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "V"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " are normalized by dividing by"
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": "\\frac { 1} { 2} [ n^2 ( p + 1)^2 + n ( p + 1) ( 2r - p - 1) - r ( 2p - r + 3)] , "
          },
          "type": "BlockMath"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "where,"
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": "p = ( m - 1) \\div n , r = ( m - 1) \\mod n . "
          },
          "type": "BlockMath"
        }
      ],
      "title": null
    },
    "Methods": {
      "children": [],
      "title": null
    },
    "Notes": {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "The nodes input parameter must contain all nodes in one bipartite node set, but the dictionary returned contains all nodes from both node sets. See "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "bipartite documentation <networkx.algorithms.bipartite>"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " for further details on how bipartite graphs are handled in NetworkX."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": null
    },
    "Other Parameters": {
      "children": [],
      "title": null
    },
    "Parameters": {
      "children": [
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "A bipartite graph"
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "G",
            "type_": "graph"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Container with all nodes in one bipartite node set."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "nodes",
            "type_": "list or container"
          },
          "type": "Param"
        }
      ],
      "title": null
    },
    "Raises": {
      "children": [],
      "title": null
    },
    "Receives": {
      "children": [],
      "title": null
    },
    "Returns": {
      "children": [
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Dictionary keyed by node with bipartite betweenness centrality as the value."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "betweenness",
            "type_": "dictionary"
          },
          "type": "Param"
        }
      ],
      "title": null
    },
    "Summary": {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Compute betweenness centrality for nodes in a bipartite network."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": null
    },
    "Warnings": {
      "children": [],
      "title": null
    },
    "Warns": {
      "children": [],
      "title": null
    },
    "Yields": {
      "children": [],
      "title": null
    }
  },
  "aliases": [
    "networkx.bipartite.betweenness_centrality"
  ],
  "arbitrary": [],
  "example_section_data": {
    "children": [],
    "title": null
  },
  "item_file": "networkx/algorithms/bipartite/centrality.py",
  "item_line": 73,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns",
    "See Also",
    "Notes",
    "References"
  ],
  "references": null,
  "refs": [
    "closeness_centrality",
    "degree_centrality",
    "~networkx.algorithms.bipartite.basic.is_bipartite",
    "~networkx.algorithms.bipartite.basic.sets"
  ],
  "see_also": [
    {
      "descriptions": [],
      "name": {
        "exists": true,
        "name": "degree_centrality",
        "ref": "networkx.algorithms.bipartite.centrality.degree_centrality"
      },
      "type": null
    },
    {
      "descriptions": [],
      "name": {
        "exists": true,
        "name": "closeness_centrality",
        "ref": "networkx.algorithms.bipartite.centrality.closeness_centrality"
      },
      "type": null
    },
    {
      "descriptions": [
        {
          "inline": [
            {
              "data": {
                "value": "func"
              },
              "type": "Words"
            }
          ],
          "inner": []
        }
      ],
      "name": {
        "exists": true,
        "name": "~networkx.algorithms.bipartite.basic.sets",
        "ref": "networkx.algorithms.bipartite.basic.sets"
      },
      "type": null
    },
    {
      "descriptions": [
        {
          "inline": [
            {
              "data": {
                "value": "func"
              },
              "type": "Words"
            }
          ],
          "inner": []
        }
      ],
      "name": {
        "exists": true,
        "name": "~networkx.algorithms.bipartite.basic.is_bipartite",
        "ref": "networkx.algorithms.bipartite.basic.is_bipartite"
      },
      "type": null
    }
  ],
  "signature": {
    "value": "betweenness_centrality(G, nodes)"
  }
}