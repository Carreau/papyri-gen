{
  "_content": {
    "Attributes": {
      "children": [],
      "title": null
    },
    "Extended Summary": {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "If you don't care about the particular implementation of the maximum matching algorithm, simply use the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "maximum_matching"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ". If you do care, you can import one of the named maximum matching algorithms directly."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "For example, to find a maximum matching in the complete bipartite graph with two vertices on the left and three vertices on the right:"
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": ">>> G = nx.complete_bipartite_graph(2, 3)\n>>> left, right = nx.bipartite.sets(G)\n>>> list(left)\n[0, 1]\n>>> list(right)\n[2, 3, 4]\n>>> nx.bipartite.maximum_matching(G)\n{0: 2, 1: 3, 2: 0, 3: 1}"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "The dictionary returned by "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "maximum_matching"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " includes a mapping for vertices in both the left and right vertex sets."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Similarly, "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "minimum_weight_full_matching"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " produces, for a complete weighted bipartite graph, a matching whose cardinality is the cardinality of the smaller of the two partitions, and for which the sum of the weights of the edges included in the matching is minimal."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": null
    },
    "Methods": {
      "children": [],
      "title": null
    },
    "Notes": {
      "children": [],
      "title": null
    },
    "Other Parameters": {
      "children": [],
      "title": null
    },
    "Parameters": {
      "children": [],
      "title": null
    },
    "Raises": {
      "children": [],
      "title": null
    },
    "Receives": {
      "children": [],
      "title": null
    },
    "Returns": {
      "children": [],
      "title": null
    },
    "Summary": {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Provides functions for computing maximum cardinality matchings and minimum weight full matchings in a bipartite graph."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": null
    },
    "Warnings": {
      "children": [],
      "title": null
    },
    "Warns": {
      "children": [],
      "title": null
    },
    "Yields": {
      "children": [],
      "title": null
    }
  },
  "aliases": [
    "networkx.bipartite.matching"
  ],
  "arbitrary": [
    {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Provides functions for computing maximum cardinality matchings and minimum weight full matchings in a bipartite graph."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "If you don't care about the particular implementation of the maximum matching algorithm, simply use the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "maximum_matching"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ". If you do care, you can import one of the named maximum matching algorithms directly."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "For example, to find a maximum matching in the complete bipartite graph with two vertices on the left and three vertices on the right:"
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": ">>> G = nx.complete_bipartite_graph(2, 3)\n>>> left, right = nx.bipartite.sets(G)\n>>> list(left)\n[0, 1]\n>>> list(right)\n[2, 3, 4]\n>>> nx.bipartite.maximum_matching(G)\n{0: 2, 1: 3, 2: 0, 3: 1}"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "The dictionary returned by "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "maximum_matching"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " includes a mapping for vertices in both the left and right vertex sets."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Similarly, "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "minimum_weight_full_matching"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " produces, for a complete weighted bipartite graph, a matching whose cardinality is the cardinality of the smaller of the two partitions, and for which the sum of the weights of the edges included in the matching is minimal."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": null
    }
  ],
  "example_section_data": {
    "children": [],
    "title": null
  },
  "item_file": "networkx/algorithms/bipartite/matching.py",
  "item_line": 0,
  "item_type": "<class 'module'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary"
  ],
  "references": null,
  "refs": [],
  "see_also": [],
  "signature": {
    "value": null
  }
}