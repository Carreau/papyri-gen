{
  "_content": {
    "Attributes": {
      "children": [],
      "title": null
    },
    "Extended Summary": {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Let "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": "G = ((U, V), E)"
                },
                "type": "Math"
              },
              {
                "data": {
                  "value": " be a weighted bipartite graph with real weights "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": "w : E \\to \\mathbb{R}"
                },
                "type": "Math"
              },
              {
                "data": {
                  "value": ". This function then produces a matching "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": "M \\subseteq E"
                },
                "type": "Math"
              },
              {
                "data": {
                  "value": " with cardinality"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": "\\lvert M \\rvert = \\min(\\lvert U \\rvert, \\lvert V \\rvert),"
          },
          "type": "BlockMath"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "which minimizes the sum of the weights of the edges included in the matching, "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": "\\sum_{e \\in M} w(e)"
                },
                "type": "Math"
              },
              {
                "data": {
                  "value": ", or raises an error if no such matching exists."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "When "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": "\\lvert U \\rvert = \\lvert V \\rvert"
                },
                "type": "Math"
              },
              {
                "data": {
                  "value": ", this is commonly referred to as a perfect matching; here, since we allow "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": "\\lvert U \\rvert"
                },
                "type": "Math"
              },
              {
                "data": {
                  "value": " and "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": "\\lvert V \\rvert"
                },
                "type": "Math"
              },
              {
                "data": {
                  "value": " to differ, we follow Karp  and refer to the matching as "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "full"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": "."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": null
    },
    "Methods": {
      "children": [],
      "title": null
    },
    "Notes": {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "The problem of determining a minimum weight full matching is also known as the rectangular linear assignment problem. This implementation defers the calculation of the assignment to SciPy."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": null
    },
    "Other Parameters": {
      "children": [],
      "title": null
    },
    "Parameters": {
      "children": [
        {
          "data": {
            "children": [
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Undirected bipartite graph"
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "G",
                "type_": "NetworkX graph"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Container with all nodes in one bipartite node set. If not supplied it will be computed."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "top_nodes",
                "type_": "container"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "The edge data key used to provide each value in the matrix."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "weight",
                "type_": "string, optional (default='weight')"
              }
            ]
          },
          "type": "Parameters"
        }
      ],
      "title": null
    },
    "Raises": {
      "children": [
        {
          "data": {
            "children": [
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Raised if no full matching exists."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "",
                "type_": "ValueError"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Raised if SciPy is not available."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "",
                "type_": "ImportError"
              }
            ]
          },
          "type": "Parameters"
        }
      ],
      "title": null
    },
    "Receives": {
      "children": [],
      "title": null
    },
    "Returns": {
      "children": [
        {
          "data": {
            "children": [
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "The matching is returned as a dictionary, "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "domain": null,
                            "role": null,
                            "value": "matches"
                          },
                          "type": "Directive"
                        },
                        {
                          "data": {
                            "value": ", such that "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "matches[v] == w"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " if node "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "domain": null,
                            "role": null,
                            "value": "v"
                          },
                          "type": "Directive"
                        },
                        {
                          "data": {
                            "value": " is matched to node "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "exists": true,
                            "kind": "local",
                            "reference": {
                              "kind": "local",
                              "module": null,
                              "path": "w",
                              "version": null
                            },
                            "value": "w"
                          },
                          "type": "Link"
                        },
                        {
                          "data": {
                            "value": ". Unmatched nodes do not occur as a key in "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "domain": null,
                            "role": null,
                            "value": "matches"
                          },
                          "type": "Directive"
                        },
                        {
                          "data": {
                            "value": "."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "matches",
                "type_": "dictionary"
              }
            ]
          },
          "type": "Parameters"
        }
      ],
      "title": null
    },
    "Summary": {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Returns a minimum weight full matching of the bipartite graph "
                },
                "type": "Words"
              },
              {
                "data": {
                  "exists": true,
                  "kind": "local",
                  "reference": {
                    "kind": "local",
                    "module": null,
                    "path": "G",
                    "version": null
                  },
                  "value": "G"
                },
                "type": "Link"
              },
              {
                "data": {
                  "value": "."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": null
    },
    "Warnings": {
      "children": [],
      "title": null
    },
    "Warns": {
      "children": [],
      "title": null
    },
    "Yields": {
      "children": [],
      "title": null
    }
  },
  "aliases": [
    "networkx.bipartite.minimum_weight_full_matching"
  ],
  "arbitrary": [],
  "example_section_data": {
    "children": [],
    "title": null
  },
  "item_file": "networkx/algorithms/bipartite/matching.py",
  "item_line": 495,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns",
    "Raises",
    "Notes",
    "References"
  ],
  "references": null,
  "see_also": [],
  "signature": {
    "value": "minimum_weight_full_matching(G, top_nodes=None, weight='weight')"
  }
}