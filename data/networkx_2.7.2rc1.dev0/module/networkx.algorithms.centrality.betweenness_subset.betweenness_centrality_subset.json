{
  "_content": {
    "Attributes": {
      "children": [],
      "title": null
    },
    "Extended Summary": {
      "children": [
        {
          "data": {
            "value": "c_B(v) =\\sum_{s\\in S, t \\in T} \\frac{\\sigma(s, t|v)}{\\sigma(s, t)}"
          },
          "type": "BlockMath"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "where $S$ is the set of sources, $T$ is the set of targets, $\\sigma(s, t)$ is the number of shortest $(s, t)$-paths, and $\\sigma(s, t|v)$ is the number of those paths passing through some  node $v$ other than $s, t$. If $s = t$, $\\sigma(s, t) = 1$, and if $v \\in {s, t}$, $\\sigma(s, t|v) = 0$ ."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": null
    },
    "Methods": {
      "children": [],
      "title": null
    },
    "Notes": {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "The basic algorithm is from ."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "For weighted graphs the edge weights must be greater than zero. Zero edge weights can produce an infinite number of equal length paths between pairs of nodes."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "The normalization might seem a little strange but it is designed to make betweenness_centrality(G) be the same as betweenness_centrality_subset(G,sources=G.nodes(),targets=G.nodes())."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "The total number of paths between source and target is counted differently for directed and undirected graphs. Directed paths are easy to count. Undirected paths are tricky: should a path from \"u\" to \"v\" count as 1 undirected path or as 2 directed paths?"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "For betweenness_centrality we report the number of undirected paths when G is undirected."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "For betweenness_centrality_subset the reporting is different. If the source and target subsets are the same, then we want to count undirected paths. But if the source and target subsets differ -- for example, if sources is {0} and targets is {1}, then we are only counting the paths in one direction. They are undirected paths but we are counting them in a directed way. To count them as undirected paths, each should count as half a path."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": null
    },
    "Other Parameters": {
      "children": [],
      "title": null
    },
    "Parameters": {
      "children": [
        {
          "data": {
            "children": [
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "A NetworkX graph."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "G",
                "type_": "graph"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Nodes to use as sources for shortest paths in betweenness"
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "sources: list of nodes",
                "type_": ""
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Nodes to use as targets for shortest paths in betweenness"
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "targets: list of nodes",
                "type_": ""
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "If True the betweenness values are normalized by $2/((n-1)(n-2))$ for graphs, and $1/((n-1)(n-2))$ for directed graphs where $n$ is the number of nodes in G."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "normalized",
                "type_": "bool, optional"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "If None, all edge weights are considered equal. Otherwise holds the name of the edge attribute used as weight. Weights are used to calculate weighted shortest paths, so they are interpreted as distances."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "weight",
                "type_": "None or string, optional (default=None)"
              }
            ]
          },
          "type": "Parameters"
        }
      ],
      "title": null
    },
    "Raises": {
      "children": [],
      "title": null
    },
    "Receives": {
      "children": [],
      "title": null
    },
    "Returns": {
      "children": [
        {
          "data": {
            "children": [
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Dictionary of nodes with betweenness centrality as the value."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "nodes",
                "type_": "dictionary"
              }
            ]
          },
          "type": "Parameters"
        }
      ],
      "title": null
    },
    "Summary": {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Compute betweenness centrality for a subset of nodes."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": null
    },
    "Warnings": {
      "children": [],
      "title": null
    },
    "Warns": {
      "children": [],
      "title": null
    },
    "Yields": {
      "children": [],
      "title": null
    }
  },
  "aliases": [
    "networkx.betweenness_centrality_subset"
  ],
  "arbitrary": [],
  "example_section_data": {
    "children": [],
    "title": null
  },
  "item_file": "networkx/algorithms/centrality/betweenness_subset.py",
  "item_line": 17,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns",
    "See Also",
    "Notes",
    "References"
  ],
  "references": null,
  "refs": [
    "edge_betweenness_centrality",
    "load_centrality"
  ],
  "see_also": [
    {
      "descriptions": [],
      "name": {
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "module",
          "module": "networkx",
          "path": "networkx.algorithms.centrality.betweenness.edge_betweenness_centrality",
          "version": "2.7.2rc1.dev0"
        },
        "value": "edge_betweenness_centrality"
      },
      "type": null
    },
    {
      "descriptions": [],
      "name": {
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "module",
          "module": "networkx",
          "path": "networkx.algorithms.centrality.load.edge_load_centrality",
          "version": "2.7.2rc1.dev0"
        },
        "value": "load_centrality"
      },
      "type": null
    }
  ],
  "signature": {
    "value": "betweenness_centrality_subset(G, sources, targets, normalized=False, weight=None)"
  }
}