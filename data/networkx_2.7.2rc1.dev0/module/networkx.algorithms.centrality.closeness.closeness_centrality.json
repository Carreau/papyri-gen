{
  "_content": {
    "Attributes": {
      "children": [],
      "title": null
    },
    "Extended Summary": {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Closeness centrality  of a node "
                },
                "type": "Words"
              },
              {
                "data": {
                  "exists": true,
                  "kind": "local",
                  "reference": {
                    "kind": "local",
                    "module": null,
                    "path": "u",
                    "version": null
                  },
                  "value": "u"
                },
                "type": "Link"
              },
              {
                "data": {
                  "value": " is the reciprocal of the average shortest path distance to "
                },
                "type": "Words"
              },
              {
                "data": {
                  "exists": true,
                  "kind": "local",
                  "reference": {
                    "kind": "local",
                    "module": null,
                    "path": "u",
                    "version": null
                  },
                  "value": "u"
                },
                "type": "Link"
              },
              {
                "data": {
                  "value": " over all "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "n-1"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " reachable nodes."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": "C(u) = \\frac{n - 1}{\\sum_{v=1}^{n-1} d(v, u)},"
          },
          "type": "BlockMath"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "where "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "d(v, u)"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " is the shortest-path distance between "
                },
                "type": "Words"
              },
              {
                "data": {
                  "exists": true,
                  "kind": "local",
                  "reference": {
                    "kind": "local",
                    "module": null,
                    "path": "v",
                    "version": null
                  },
                  "value": "v"
                },
                "type": "Link"
              },
              {
                "data": {
                  "value": " and "
                },
                "type": "Words"
              },
              {
                "data": {
                  "exists": true,
                  "kind": "local",
                  "reference": {
                    "kind": "local",
                    "module": null,
                    "path": "u",
                    "version": null
                  },
                  "value": "u"
                },
                "type": "Link"
              },
              {
                "data": {
                  "value": ", and "
                },
                "type": "Words"
              },
              {
                "data": {
                  "exists": true,
                  "kind": "local",
                  "reference": {
                    "kind": "local",
                    "module": null,
                    "path": "n",
                    "version": null
                  },
                  "value": "n"
                },
                "type": "Link"
              },
              {
                "data": {
                  "value": " is the number of nodes that can reach "
                },
                "type": "Words"
              },
              {
                "data": {
                  "exists": true,
                  "kind": "local",
                  "reference": {
                    "kind": "local",
                    "module": null,
                    "path": "u",
                    "version": null
                  },
                  "value": "u"
                },
                "type": "Link"
              },
              {
                "data": {
                  "value": ". Notice that the closeness distance function computes the incoming distance to "
                },
                "type": "Words"
              },
              {
                "data": {
                  "exists": true,
                  "kind": "local",
                  "reference": {
                    "kind": "local",
                    "module": null,
                    "path": "u",
                    "version": null
                  },
                  "value": "u"
                },
                "type": "Link"
              },
              {
                "data": {
                  "value": " for directed graphs. To use outward distance, act on "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "G.reverse()"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": "."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Notice that higher values of closeness indicate higher centrality."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Wasserman and Faust propose an improved formula for graphs with more than one connected component. The result is \"a ratio of the fraction of actors in the group who are reachable, to the average distance\" from the reachable actors . You might think this scale factor is inverted but it is not. As is, nodes from small components receive a smaller closeness value. Letting "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "N"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " denote the number of nodes in the graph,"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": "C_{WF}(u) = \\frac{n-1}{N-1} \\frac{n - 1}{\\sum_{v=1}^{n-1} d(v, u)},"
          },
          "type": "BlockMath"
        }
      ],
      "title": null
    },
    "Methods": {
      "children": [],
      "title": null
    },
    "Notes": {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "The closeness centrality is normalized to "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "(n-1)/(|G|-1)"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " where "
                },
                "type": "Words"
              },
              {
                "data": {
                  "exists": true,
                  "kind": "local",
                  "reference": {
                    "kind": "local",
                    "module": null,
                    "path": "n",
                    "version": null
                  },
                  "value": "n"
                },
                "type": "Link"
              },
              {
                "data": {
                  "value": " is the number of nodes in the connected part of graph containing the node.  If the graph is not completely connected, this algorithm computes the closeness centrality for each connected part separately scaled by that parts size."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "If the 'distance' keyword is set to an edge attribute key then the shortest-path length will be computed using Dijkstra's algorithm with that edge attribute as the edge weight."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "The closeness centrality uses "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "inward"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": " distance to a node, not outward. If you want to use outword distances apply the function to "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "G.reverse()"
                },
                "type": "Directive"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "In NetworkX 2.2 and earlier a bug caused Dijkstra's algorithm to use the outward distance rather than the inward distance. If you use a 'distance' keyword and a DiGraph, your results will change between v2.2 and v2.3."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": null
    },
    "Other Parameters": {
      "children": [],
      "title": null
    },
    "Parameters": {
      "children": [
        {
          "data": {
            "children": [
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "A NetworkX graph"
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "G",
                "type_": "graph"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Return only the value for node u"
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "u",
                "type_": "node, optional"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Use the specified edge attribute as the edge distance in shortest path calculations"
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "distance",
                "type_": "edge attribute key, optional (default=None)"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "If True, scale by the fraction of nodes reachable. This gives the Wasserman and Faust improved formula. For single component graphs it is the same as the original formula."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "wf_improved",
                "type_": "bool, optional (default=True)"
              }
            ]
          },
          "type": "Parameters"
        }
      ],
      "title": null
    },
    "Raises": {
      "children": [],
      "title": null
    },
    "Receives": {
      "children": [],
      "title": null
    },
    "Returns": {
      "children": [
        {
          "data": {
            "children": [
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Dictionary of nodes with closeness centrality as the value."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "nodes",
                "type_": "dictionary"
              }
            ]
          },
          "type": "Parameters"
        }
      ],
      "title": null
    },
    "Summary": {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Compute closeness centrality for nodes."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": null
    },
    "Warnings": {
      "children": [],
      "title": null
    },
    "Warns": {
      "children": [],
      "title": null
    },
    "Yields": {
      "children": [],
      "title": null
    }
  },
  "aliases": [
    "networkx.closeness_centrality"
  ],
  "arbitrary": [],
  "example_section_data": {
    "children": [],
    "title": null
  },
  "item_file": "networkx/algorithms/centrality/closeness.py",
  "item_line": 12,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns",
    "See Also",
    "Notes",
    "References"
  ],
  "references": null,
  "refs": [
    "betweenness_centrality",
    "degree_centrality",
    "eigenvector_centrality",
    "incremental_closeness_centrality",
    "load_centrality"
  ],
  "see_also": [
    {
      "descriptions": [],
      "name": {
        "exists": null,
        "name": "betweenness_centrality",
        "ref": null
      },
      "type": null
    },
    {
      "descriptions": [],
      "name": {
        "exists": true,
        "name": "load_centrality",
        "ref": "networkx.algorithms.centrality.load.edge_load_centrality"
      },
      "type": null
    },
    {
      "descriptions": [],
      "name": {
        "exists": true,
        "name": "eigenvector_centrality",
        "ref": "networkx.algorithms.centrality.eigenvector.eigenvector_centrality"
      },
      "type": null
    },
    {
      "descriptions": [],
      "name": {
        "exists": null,
        "name": "degree_centrality",
        "ref": null
      },
      "type": null
    },
    {
      "descriptions": [],
      "name": {
        "exists": true,
        "name": "incremental_closeness_centrality",
        "ref": "networkx.algorithms.centrality.closeness.incremental_closeness_centrality"
      },
      "type": null
    }
  ],
  "signature": {
    "value": "closeness_centrality(G, u=None, distance=None, wf_improved=True)"
  }
}