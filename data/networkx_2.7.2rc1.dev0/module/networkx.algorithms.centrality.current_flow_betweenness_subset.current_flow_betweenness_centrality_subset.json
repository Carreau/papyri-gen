{
  "_content": {
    "Attributes": {
      "children": [],
      "title": null
    },
    "Extended Summary": {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Current-flow betweenness centrality uses an electrical current model for information spreading in contrast to betweenness centrality which uses shortest paths."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Current-flow betweenness centrality is also known as random-walk betweenness centrality ."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": null
    },
    "Methods": {
      "children": [],
      "title": null
    },
    "Notes": {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Current-flow betweenness can be computed in $O(I(n-1)+mn \\log n)$ time , where $I(n-1)$ is the time needed to compute the inverse Laplacian.  For a full matrix this is $O(n^3)$ but using sparse methods you can achieve $O(nm{\\sqrt k})$ where $k$ is the Laplacian matrix condition number."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "The space required is $O(nw)$ where $w$ is the width of the sparse Laplacian matrix.  Worse case is $w=n$ for $O(n^2)$."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "If the edges have a 'weight' attribute they will be used as weights in this algorithm.  Unspecified weights are set to 1."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": null
    },
    "Other Parameters": {
      "children": [],
      "title": null
    },
    "Parameters": {
      "children": [
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "A NetworkX graph"
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "G",
            "type_": "graph"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Nodes to use as sources for current"
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "sources: list of nodes",
            "type_": ""
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Nodes to use as sinks for current"
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "targets: list of nodes",
            "type_": ""
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "If True the betweenness values are normalized by b=b/(n-1)(n-2) where n is the number of nodes in G."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "normalized",
            "type_": "bool, optional (default=True)"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Key for edge data used as the edge weight. If None, then use 1 as each edge weight. The weight reflects the capacity or the strength of the edge."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "weight",
            "type_": "string or None, optional (default=None)"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Default data type for internal matrices. Set to np.float32 for lower memory consumption."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "dtype: data type (float)",
            "type_": ""
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Type of linear solver to use for computing the flow matrix. Options are \"full\" (uses most memory), \"lu\" (recommended), and \"cg\" (uses least memory)."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "solver: string (default='lu')",
            "type_": ""
          },
          "type": "Param"
        }
      ],
      "title": null
    },
    "Raises": {
      "children": [],
      "title": null
    },
    "Receives": {
      "children": [],
      "title": null
    },
    "Returns": {
      "children": [
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Dictionary of nodes with betweenness centrality as the value."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "nodes",
            "type_": "dictionary"
          },
          "type": "Param"
        }
      ],
      "title": null
    },
    "Summary": {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Compute current-flow betweenness centrality for subsets of nodes."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": null
    },
    "Warnings": {
      "children": [],
      "title": null
    },
    "Warns": {
      "children": [],
      "title": null
    },
    "Yields": {
      "children": [],
      "title": null
    }
  },
  "aliases": [
    "networkx.current_flow_betweenness_centrality_subset"
  ],
  "arbitrary": [],
  "example_section_data": {
    "children": [],
    "title": null
  },
  "item_file": "networkx/algorithms/centrality/current_flow_betweenness_subset.py",
  "item_line": 12,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns",
    "See Also",
    "Notes",
    "References"
  ],
  "references": null,
  "refs": [
    "approximate_current_flow_betweenness_centrality",
    "betweenness_centrality",
    "edge_betweenness_centrality",
    "edge_current_flow_betweenness_centrality"
  ],
  "see_also": [
    {
      "descriptions": [],
      "name": {
        "exists": true,
        "name": "approximate_current_flow_betweenness_centrality",
        "ref": "networkx.algorithms.centrality.current_flow_betweenness.approximate_current_flow_betweenness_centrality"
      },
      "type": null
    },
    {
      "descriptions": [],
      "name": {
        "exists": null,
        "name": "betweenness_centrality",
        "ref": null
      },
      "type": null
    },
    {
      "descriptions": [],
      "name": {
        "exists": true,
        "name": "edge_betweenness_centrality",
        "ref": "networkx.algorithms.centrality.betweenness.edge_betweenness_centrality"
      },
      "type": null
    },
    {
      "descriptions": [],
      "name": {
        "exists": true,
        "name": "edge_current_flow_betweenness_centrality",
        "ref": "networkx.algorithms.centrality.current_flow_betweenness.edge_current_flow_betweenness_centrality"
      },
      "type": null
    }
  ],
  "signature": {
    "value": "current_flow_betweenness_centrality_subset(G, sources, targets, normalized=True, weight=None, dtype=<class 'float'>, solver='lu')"
  }
}