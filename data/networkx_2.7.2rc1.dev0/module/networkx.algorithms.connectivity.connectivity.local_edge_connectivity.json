{
  "_content": {
    "Attributes": {
      "children": [],
      "title": null
    },
    "Extended Summary": {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Local edge connectivity for two nodes s and t is the minimum number of edges that must be removed to disconnect them."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "This is a flow based implementation of edge connectivity. We compute the maximum flow on an auxiliary digraph build from the original network (see below for details). This is equal to the local edge connectivity because the value of a maximum s-t-flow is equal to the capacity of a minimum s-t-cut (Ford and Fulkerson theorem)  ."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": null
    },
    "Methods": {
      "children": [],
      "title": null
    },
    "Notes": {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "This is a flow based implementation of edge connectivity. We compute the maximum flow using, by default, the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "edmonds_karp"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " algorithm on an auxiliary digraph build from the original input graph:"
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "If the input graph is undirected, we replace each edge ("
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "u"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": ",`v`) with two reciprocal arcs ("
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "u"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "v"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": ") and ("
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "v"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "u"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": ") and then we set the attribute 'capacity' for each arc to 1. If the input graph is directed we simply add the 'capacity' attribute. This is an implementation of algorithm 1 in ."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "The maximum flow in the auxiliary network is equal to the local edge connectivity because the value of a maximum s-t-flow is equal to the capacity of a minimum s-t-cut (Ford and Fulkerson theorem)."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": null
    },
    "Other Parameters": {
      "children": [],
      "title": null
    },
    "Parameters": {
      "children": [
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Undirected or directed graph"
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "G",
            "type_": "NetworkX graph"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Source node"
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "s",
            "type_": "node"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Target node"
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "t",
            "type_": "node"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "A function for computing the maximum flow among a pair of nodes. The function has to accept at least three parameters: a Digraph, a source node, and a target node. And return a residual network that follows NetworkX conventions (see "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "maximum_flow"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " for details). If flow_func is None, the default maximum flow function ("
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "edmonds_karp"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": ") is used. See below for details. The choice of the default function may change from version to version and should not be relied on. Default value: None."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "flow_func",
            "type_": "function"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Auxiliary digraph for computing flow based edge connectivity. If provided it will be reused instead of recreated. Default value: None."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "auxiliary",
            "type_": "NetworkX DiGraph"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Residual network to compute maximum flow. If provided it will be reused instead of recreated. Default value: None."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "residual",
            "type_": "NetworkX DiGraph"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "If specified, the maximum flow algorithm will terminate when the flow value reaches or exceeds the cutoff. This is only for the algorithms that support the cutoff parameter: "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "edmonds_karp"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " and "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "shortest_augmenting_path"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": ". Other algorithms will ignore this parameter. Default value: None."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "cutoff",
            "type_": "integer, float"
          },
          "type": "Param"
        }
      ],
      "title": null
    },
    "Raises": {
      "children": [],
      "title": null
    },
    "Receives": {
      "children": [],
      "title": null
    },
    "Returns": {
      "children": [
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "local edge connectivity for nodes s and t."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "K",
            "type_": "integer"
          },
          "type": "Param"
        }
      ],
      "title": null
    },
    "Summary": {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Returns local edge connectivity for nodes s and t in G."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": null
    },
    "Warnings": {
      "children": [],
      "title": null
    },
    "Warns": {
      "children": [],
      "title": null
    },
    "Yields": {
      "children": [],
      "title": null
    }
  },
  "aliases": [
    "networkx.connectivity.local_edge_connectivity"
  ],
  "arbitrary": [],
  "example_section_data": {
    "children": [
      {
        "data": {
          "inline": [
            {
              "data": {
                "value": "This function is not imported in the base NetworkX namespace, so you have to explicitly import it from the connectivity package:"
              },
              "type": "Words"
            }
          ],
          "inner": []
        },
        "type": "Paragraph"
      },
      {
        "data": {
          "ce_status": "execed",
          "entries": [
            [
              "from",
              null,
              "kn"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "networkx",
              "networkx",
              "nn"
            ],
            [
              ".",
              "",
              "nn"
            ],
            [
              "algorithms",
              "networkx.algorithms",
              "nn"
            ],
            [
              ".",
              "",
              "nn"
            ],
            [
              "connectivity",
              "networkx.algorithms.connectivity",
              "nn"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "import",
              null,
              "kn"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "local_edge_connectivity",
              "networkx.algorithms.connectivity.connectivity.local_edge_connectivity",
              ""
            ]
          ],
          "out": ""
        },
        "type": "Code"
      },
      {
        "data": {
          "inline": [
            {
              "data": {
                "value": "We use in this example the platonic icosahedral graph, which has edge connectivity 5."
              },
              "type": "Words"
            }
          ],
          "inner": []
        },
        "type": "Paragraph"
      },
      {
        "data": {
          "ce_status": "execed",
          "entries": [
            [
              "G",
              "typing.Generator",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "nx",
              "networkx",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "icosahedral_graph",
              "networkx.generators.small.icosahedral_graph",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "local_edge_connectivity",
              "networkx.algorithms.connectivity.connectivity.local_edge_connectivity",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "G",
              "typing.Generator",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "0",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "6",
              "",
              "mi"
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": "5"
        },
        "type": "Code"
      },
      {
        "data": {
          "inline": [
            {
              "data": {
                "value": "If you need to compute local connectivity on several pairs of nodes in the same graph, it is recommended that you reuse the data structures that NetworkX uses in the computation: the auxiliary digraph for edge connectivity, and the residual network for the underlying maximum flow computation."
              },
              "type": "Words"
            }
          ],
          "inner": []
        },
        "type": "Paragraph"
      },
      {
        "data": {
          "inline": [
            {
              "data": {
                "value": "Example of how to compute local edge connectivity among all pairs of nodes of the platonic icosahedral graph reusing the data structures."
              },
              "type": "Words"
            }
          ],
          "inner": []
        },
        "type": "Paragraph"
      },
      {
        "data": {
          "ce_status": "execed",
          "entries": [
            [
              "import",
              null,
              "kn"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "itertools",
              "itertools",
              "nn"
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "# You also have to explicitly import the function for",
              "",
              "c1"
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "# building the auxiliary digraph from the connectivity package",
              "",
              "c1"
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "from",
              null,
              "kn"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "networkx",
              "networkx",
              "nn"
            ],
            [
              ".",
              "",
              "nn"
            ],
            [
              "algorithms",
              "networkx.algorithms",
              "nn"
            ],
            [
              ".",
              "",
              "nn"
            ],
            [
              "connectivity",
              "networkx.algorithms.connectivity",
              "nn"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "import",
              null,
              "kn"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "build_auxiliary_edge_connectivity",
              "networkx.algorithms.connectivity.utils.build_auxiliary_edge_connectivity",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "H",
              "networkx.classes.digraph.DiGraph",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "build_auxiliary_edge_connectivity",
              "networkx.algorithms.connectivity.utils.build_auxiliary_edge_connectivity",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "G",
              "typing.Generator",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "# And the function for building the residual network from the",
              "",
              "c1"
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "# flow package",
              "",
              "c1"
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "from",
              null,
              "kn"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "networkx",
              "networkx",
              "nn"
            ],
            [
              ".",
              "",
              "nn"
            ],
            [
              "algorithms",
              "networkx.algorithms",
              "nn"
            ],
            [
              ".",
              "",
              "nn"
            ],
            [
              "flow",
              "networkx.algorithms.flow",
              "nn"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "import",
              null,
              "kn"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "build_residual_network",
              "networkx.algorithms.flow.utils.build_residual_network",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "# Note that the auxiliary digraph has an edge attribute named capacity",
              "",
              "c1"
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "R",
              "networkx.classes.digraph.DiGraph",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "build_residual_network",
              "networkx.algorithms.flow.utils.build_residual_network",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "H",
              "networkx.classes.digraph.DiGraph",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              "capacity",
              null,
              "s2"
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "result",
              "builtins.dict",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "dict",
              "builtins.dict",
              "nb"
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "fromkeys",
              "builtins.classmethod.__get__",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "G",
              "typing.Generator",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "dict",
              "builtins.dict",
              "nb"
            ],
            [
              "(",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "# Reuse the auxiliary digraph and the residual network by passing them",
              "",
              "c1"
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "# as parameters",
              "",
              "c1"
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "for",
              null,
              "k"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "u",
              null,
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "v",
              null,
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "in",
              null,
              "ow"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "itertools",
              "itertools",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "combinations",
              "itertools.combinations",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "G",
              "typing.Generator",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "2",
              "",
              "mi"
            ],
            [
              ")",
              "",
              ""
            ],
            [
              ":",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "    ",
              "",
              ""
            ],
            [
              "k",
              null,
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "local_edge_connectivity",
              "networkx.algorithms.connectivity.connectivity.local_edge_connectivity",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "G",
              "typing.Generator",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "u",
              "builtins.int",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "v",
              "builtins.int",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "auxiliary",
              null,
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "H",
              "networkx.classes.digraph.DiGraph",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "residual",
              null,
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "R",
              "networkx.classes.digraph.DiGraph",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "    ",
              "",
              ""
            ],
            [
              "result",
              "builtins.dict",
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "u",
              "builtins.int",
              ""
            ],
            [
              "]",
              "",
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "v",
              "builtins.int",
              ""
            ],
            [
              "]",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "k",
              "builtins.int",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "all",
              "builtins.all",
              "nb"
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "result",
              "builtins.dict",
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "u",
              null,
              ""
            ],
            [
              "]",
              "",
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "v",
              null,
              ""
            ],
            [
              "]",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "==",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "5",
              "",
              "mi"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "for",
              null,
              "k"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "u",
              null,
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "v",
              null,
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "in",
              null,
              "ow"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "itertools",
              "itertools",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "combinations",
              "itertools.combinations",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "G",
              "typing.Generator",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "2",
              "",
              "mi"
            ],
            [
              ")",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": "True"
        },
        "type": "Code"
      },
      {
        "data": {
          "inline": [
            {
              "data": {
                "value": "You can also use alternative flow algorithms for computing edge connectivity. For instance, in dense networks the algorithm "
              },
              "type": "Words"
            },
            {
              "data": {
                "value": [
                  "shortest_augmenting_path"
                ]
              },
              "type": "Verbatim"
            },
            {
              "data": {
                "value": " will usually perform better than the default "
              },
              "type": "Words"
            },
            {
              "data": {
                "value": [
                  "edmonds_karp"
                ]
              },
              "type": "Verbatim"
            },
            {
              "data": {
                "value": " which is faster for sparse networks with highly skewed degree distributions. Alternative flow functions have to be explicitly imported from the flow package."
              },
              "type": "Words"
            }
          ],
          "inner": []
        },
        "type": "Paragraph"
      },
      {
        "data": {
          "ce_status": "execed",
          "entries": [
            [
              "from",
              null,
              "kn"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "networkx",
              "networkx",
              "nn"
            ],
            [
              ".",
              "",
              "nn"
            ],
            [
              "algorithms",
              "networkx.algorithms",
              "nn"
            ],
            [
              ".",
              "",
              "nn"
            ],
            [
              "flow",
              "networkx.algorithms.flow",
              "nn"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "import",
              null,
              "kn"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "shortest_augmenting_path",
              "networkx.algorithms.flow.shortestaugmentingpath.shortest_augmenting_path",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "local_edge_connectivity",
              "networkx.algorithms.connectivity.connectivity.local_edge_connectivity",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "G",
              "typing.Generator",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "0",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "6",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "flow_func",
              null,
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "shortest_augmenting_path",
              "networkx.algorithms.flow.shortestaugmentingpath.shortest_augmenting_path",
              ""
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": "5"
        },
        "type": "Code"
      }
    ],
    "title": null
  },
  "item_file": "networkx/algorithms/connectivity/connectivity.py",
  "item_line": 487,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns",
    "Examples",
    "Notes",
    "See Also",
    "References"
  ],
  "references": null,
  "refs": [
    "builtins.all",
    "builtins.classmethod.__get__",
    "builtins.dict",
    "builtins.int",
    "edge_connectivity",
    "edmonds_karp",
    "itertools",
    "itertools.combinations",
    "local_node_connectivity",
    "maximum_flow",
    "networkx",
    "networkx.algorithms",
    "networkx.algorithms.connectivity",
    "networkx.algorithms.connectivity.connectivity.local_edge_connectivity",
    "networkx.algorithms.connectivity.utils.build_auxiliary_edge_connectivity",
    "networkx.algorithms.flow",
    "networkx.algorithms.flow.shortestaugmentingpath.shortest_augmenting_path",
    "networkx.algorithms.flow.utils.build_residual_network",
    "networkx.classes.digraph.DiGraph",
    "networkx.generators.small.icosahedral_graph",
    "node_connectivity",
    "preflow_push",
    "shortest_augmenting_path",
    "typing.Generator"
  ],
  "see_also": [
    {
      "descriptions": [
        {
          "inline": [
            {
              "data": {
                "value": "meth"
              },
              "type": "Words"
            }
          ],
          "inner": []
        }
      ],
      "name": {
        "exists": true,
        "name": "edge_connectivity",
        "ref": "networkx.algorithms.connectivity.connectivity.edge_connectivity"
      },
      "type": null
    },
    {
      "descriptions": [
        {
          "inline": [
            {
              "data": {
                "value": "meth"
              },
              "type": "Words"
            }
          ],
          "inner": []
        }
      ],
      "name": {
        "exists": true,
        "name": "local_node_connectivity",
        "ref": "networkx.algorithms.connectivity.connectivity.local_node_connectivity"
      },
      "type": null
    },
    {
      "descriptions": [
        {
          "inline": [
            {
              "data": {
                "value": "meth"
              },
              "type": "Words"
            }
          ],
          "inner": []
        }
      ],
      "name": {
        "exists": true,
        "name": "node_connectivity",
        "ref": "networkx.algorithms.connectivity.connectivity.node_connectivity"
      },
      "type": null
    },
    {
      "descriptions": [
        {
          "inline": [
            {
              "data": {
                "value": "meth"
              },
              "type": "Words"
            }
          ],
          "inner": []
        }
      ],
      "name": {
        "exists": true,
        "name": "maximum_flow",
        "ref": "networkx.algorithms.flow.maxflow.maximum_flow"
      },
      "type": null
    },
    {
      "descriptions": [
        {
          "inline": [
            {
              "data": {
                "value": "meth"
              },
              "type": "Words"
            }
          ],
          "inner": []
        }
      ],
      "name": {
        "exists": true,
        "name": "edmonds_karp",
        "ref": "networkx.algorithms.flow.edmondskarp.edmonds_karp"
      },
      "type": null
    },
    {
      "descriptions": [
        {
          "inline": [
            {
              "data": {
                "value": "meth"
              },
              "type": "Words"
            }
          ],
          "inner": []
        }
      ],
      "name": {
        "exists": true,
        "name": "preflow_push",
        "ref": "networkx.algorithms.flow.preflowpush.preflow_push"
      },
      "type": null
    },
    {
      "descriptions": [
        {
          "inline": [
            {
              "data": {
                "value": "meth"
              },
              "type": "Words"
            }
          ],
          "inner": []
        }
      ],
      "name": {
        "exists": true,
        "name": "shortest_augmenting_path",
        "ref": "networkx.algorithms.flow.shortestaugmentingpath.shortest_augmenting_path"
      },
      "type": null
    }
  ],
  "signature": {
    "value": "local_edge_connectivity(G, s, t, flow_func=None, auxiliary=None, residual=None, cutoff=None)"
  }
}