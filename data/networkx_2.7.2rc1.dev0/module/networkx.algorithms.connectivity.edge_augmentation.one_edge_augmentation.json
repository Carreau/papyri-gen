{
  "_content": {
    "Attributes": {
      "children": [],
      "title": null
    },
    "Extended Summary": {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Equivalent to "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "k_edge_augmentation"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " when k=1. Adding the resulting edges to G will make it 1-edge-connected. The solution is optimal for both weighted and non-weighted variants."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": null
    },
    "Methods": {
      "children": [],
      "title": null
    },
    "Notes": {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Uses either "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "unconstrained_one_edge_augmentation"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " or "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "weighted_one_edge_augmentation"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " depending on whether "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "avail"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " is specified. Both algorithms are based on finding a minimum spanning tree. As such both algorithms find optimal solutions and run in linear time."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": null
    },
    "Other Parameters": {
      "children": [],
      "title": null
    },
    "Parameters": {
      "children": [
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "An undirected graph."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "G",
            "type_": "NetworkX graph"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "For more details, see "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "k_edge_augmentation"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": "."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "avail",
            "type_": "dict or a set of 2 or 3 tuples"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "key to use to find weights if "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "avail"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " is a set of 3-tuples. For more details, see "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "k_edge_augmentation"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": "."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "weight",
            "type_": "string"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "If partial is True and no feasible k-edge-augmentation exists, then the augmenting edges minimize the number of connected components."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "partial",
            "type_": "boolean"
          },
          "type": "Param"
        }
      ],
      "title": null
    },
    "Raises": {
      "children": [
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "If partial is False and no one-edge-augmentation exists."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "",
            "type_": "NetworkXUnfeasible"
          },
          "type": "Param"
        }
      ],
      "title": null
    },
    "Receives": {
      "children": [],
      "title": null
    },
    "Returns": {
      "children": [],
      "title": null
    },
    "Summary": {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Finds minimum weight set of edges to connect G."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": null
    },
    "Warnings": {
      "children": [],
      "title": null
    },
    "Warns": {
      "children": [],
      "title": null
    },
    "Yields": {
      "children": [
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Edges in the one-augmentation of G"
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "edge",
            "type_": "tuple"
          },
          "type": "Param"
        }
      ],
      "title": null
    }
  },
  "aliases": [
    "networkx.connectivity.edge_augmentation.one_edge_augmentation"
  ],
  "arbitrary": [],
  "example_section_data": {
    "children": [],
    "title": null
  },
  "item_file": "networkx/algorithms/connectivity/edge_augmentation.py",
  "item_line": 383,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Yields",
    "Raises",
    "Notes",
    "See Also"
  ],
  "references": null,
  "refs": [
    "k_edge_augmentation"
  ],
  "see_also": [
    {
      "descriptions": [
        {
          "inline": [
            {
              "data": {
                "value": "func"
              },
              "type": "Words"
            }
          ],
          "inner": []
        }
      ],
      "name": {
        "exists": true,
        "name": "k_edge_augmentation",
        "ref": "networkx.algorithms.connectivity.edge_augmentation.k_edge_augmentation"
      },
      "type": null
    }
  ],
  "signature": {
    "value": "one_edge_augmentation(G, avail=None, weight=None, partial=False)"
  }
}