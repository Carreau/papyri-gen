{
  "_content": {
    "Attributes": {
      "children": [],
      "title": null
    },
    "Extended Summary": {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "A smallest edge cover can be found in polynomial time by finding a maximum matching and extending it greedily so that all nodes are covered."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": null
    },
    "Methods": {
      "children": [],
      "title": null
    },
    "Notes": {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "An edge cover of a graph is a set of edges such that every node of the graph is incident to at least one edge of the set. The minimum edge cover is an edge covering of smallest cardinality."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Due to its implementation, the worst-case running time of this algorithm is bounded by the worst-case running time of the function "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "matching_algorithm"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": "."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Minimum edge cover for bipartite graph can also be found using the function present in "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "networkx.algorithms.bipartite.covering"
                  ]
                },
                "type": "Verbatim"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": null
    },
    "Other Parameters": {
      "children": [],
      "title": null
    },
    "Parameters": {
      "children": [
        {
          "data": {
            "children": [
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "An undirected bipartite graph."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "G",
                "type_": "NetworkX graph"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "A function that returns a maximum cardinality matching in a given bipartite graph. The function must take one input, the graph "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "G"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": ", and return a dictionary mapping each node to its mate. If not specified, "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "~networkx.algorithms.bipartite.matching.hopcroft_karp_matching"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " will be used. Other possibilities include "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "~networkx.algorithms.bipartite.matching.eppstein_matching"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": ", or matching algorithms in the "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "networkx.algorithms.matching"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " module."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "matching_algorithm",
                "type_": "function"
              }
            ]
          },
          "type": "Parameters"
        }
      ],
      "title": null
    },
    "Raises": {
      "children": [],
      "title": null
    },
    "Receives": {
      "children": [],
      "title": null
    },
    "Returns": {
      "children": [
        {
          "data": {
            "children": [
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "It contains all the edges of minimum edge cover in form of tuples. It contains both the edges "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "domain": null,
                            "role": null,
                            "value": "(u, v)"
                          },
                          "type": "Directive"
                        },
                        {
                          "data": {
                            "value": " and "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "domain": null,
                            "role": null,
                            "value": "(v, u)"
                          },
                          "type": "Directive"
                        },
                        {
                          "data": {
                            "value": " for given nodes "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "domain": null,
                            "role": null,
                            "value": "u"
                          },
                          "type": "Directive"
                        },
                        {
                          "data": {
                            "value": " and "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "exists": true,
                            "kind": "local",
                            "reference": {
                              "kind": "local",
                              "module": null,
                              "path": "v",
                              "version": null
                            },
                            "value": "v"
                          },
                          "type": "Link"
                        },
                        {
                          "data": {
                            "value": " among the edges of minimum edge cover."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "min_cover",
                "type_": "set"
              }
            ]
          },
          "type": "Parameters"
        }
      ],
      "title": null
    },
    "Summary": {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Returns a set of edges which constitutes the minimum edge cover of the graph."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": null
    },
    "Warnings": {
      "children": [],
      "title": null
    },
    "Warns": {
      "children": [],
      "title": null
    },
    "Yields": {
      "children": [],
      "title": null
    }
  },
  "aliases": [
    "networkx.min_edge_cover"
  ],
  "arbitrary": [],
  "example_section_data": {
    "children": [],
    "title": null
  },
  "item_file": "networkx/algorithms/covering.py",
  "item_line": 12,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns",
    "Notes"
  ],
  "references": null,
  "refs": [],
  "see_also": [],
  "signature": {
    "value": "min_edge_cover(G, matching_algorithm=None)"
  }
}