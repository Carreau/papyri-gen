{
  "_content": {
    "Attributes": {
      "children": [
        {
          "data": {
            "desc": [],
            "param": "graph: networkx.Graph",
            "type_": ""
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [],
            "param": "subgraph: networkx.Graph",
            "type_": ""
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "The function called to see if two nodes should be considered equal. It's signature looks like this: "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "f(graph1: networkx.Graph, node1, graph2: networkx.Graph, node2) -> bool"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": ". "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "domain": null,
                        "role": null,
                        "value": "node1"
                      },
                      "type": "Directive"
                    },
                    {
                      "data": {
                        "value": " is a node in "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "domain": null,
                        "role": null,
                        "value": "graph1"
                      },
                      "type": "Directive"
                    },
                    {
                      "data": {
                        "value": ", and "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "domain": null,
                        "role": null,
                        "value": "node2"
                      },
                      "type": "Directive"
                    },
                    {
                      "data": {
                        "value": " a node in "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "domain": null,
                        "role": null,
                        "value": "graph2"
                      },
                      "type": "Directive"
                    },
                    {
                      "data": {
                        "value": ". Constructed from the argument "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "domain": null,
                        "role": null,
                        "value": "node_match"
                      },
                      "type": "Directive"
                    },
                    {
                      "data": {
                        "value": "."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "node_equality: collections.abc.Callable",
            "type_": ""
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "The function called to see if two edges should be considered equal. It's signature looks like this: "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "f(graph1: networkx.Graph, edge1, graph2: networkx.Graph, edge2) -> bool"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": ". "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "domain": null,
                        "role": null,
                        "value": "edge1"
                      },
                      "type": "Directive"
                    },
                    {
                      "data": {
                        "value": " is an edge in "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "domain": null,
                        "role": null,
                        "value": "graph1"
                      },
                      "type": "Directive"
                    },
                    {
                      "data": {
                        "value": ", and "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "domain": null,
                        "role": null,
                        "value": "edge2"
                      },
                      "type": "Directive"
                    },
                    {
                      "data": {
                        "value": " an edge in "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "domain": null,
                        "role": null,
                        "value": "graph2"
                      },
                      "type": "Directive"
                    },
                    {
                      "data": {
                        "value": ". Constructed from the argument "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "domain": null,
                        "role": null,
                        "value": "edge_match"
                      },
                      "type": "Directive"
                    },
                    {
                      "data": {
                        "value": "."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "edge_equality: collections.abc.Callable",
            "type_": ""
          },
          "type": "Param"
        }
      ],
      "title": null
    },
    "Extended Summary": {
      "children": [],
      "title": null
    },
    "Methods": {
      "children": [],
      "title": null
    },
    "Notes": {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "The implementation imposes additional conditions compared to the VF2 algorithm on the graphs provided and the comparison functions ("
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "node_equality"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " and "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "edge_equality"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": "):"
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": [
              "- Node keys in both graphs must be orderable as well as hashable.",
              "- Equality must be transitive: if A is equal to B, and B is equal to C,",
              "  then A must be equal to C."
            ]
          },
          "type": "BlockQuote"
        }
      ],
      "title": null
    },
    "Other Parameters": {
      "children": [],
      "title": null
    },
    "Parameters": {
      "children": [],
      "title": null
    },
    "Raises": {
      "children": [],
      "title": null
    },
    "Receives": {
      "children": [],
      "title": null
    },
    "Returns": {
      "children": [],
      "title": null
    },
    "Summary": {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Implements the ISMAGS subgraph matching algorith.  ISMAGS stands for \"Index-based Subgraph Matching Algorithm with General Symmetries\". As the name implies, it is symmetry aware and will only generate non-symmetric isomorphisms."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": null
    },
    "Warnings": {
      "children": [],
      "title": null
    },
    "Warns": {
      "children": [],
      "title": null
    },
    "Yields": {
      "children": [],
      "title": null
    }
  },
  "aliases": [
    "networkx.isomorphism.ISMAGS"
  ],
  "arbitrary": [],
  "example_section_data": {
    "children": [],
    "title": null
  },
  "item_file": "networkx/algorithms/isomorphism/ismags.py",
  "item_line": 227,
  "item_type": "<class 'type'>",
  "ordered_sections": [
    "Summary",
    "Notes",
    "Attributes",
    "References"
  ],
  "references": null,
  "refs": [],
  "see_also": [],
  "signature": {
    "value": null
  }
}