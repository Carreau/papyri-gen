{
  "_content": {
    "Attributes": {
      "children": [],
      "title": null
    },
    "Extended Summary": {
      "children": [],
      "title": null
    },
    "Methods": {
      "children": [],
      "title": null
    },
    "Notes": {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Only defined on non-null directed acyclic graphs."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Uses the $O(n^3)$ ancestor-list algorithm from: M. A. Bender, M. Farach-Colton, G. Pemmasani, S. Skiena, P. Sumazin. \"Lowest common ancestors in trees and directed acyclic graphs.\" Journal of Algorithms, 57(2): 75-94, 2005."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": null
    },
    "Other Parameters": {
      "children": [],
      "title": null
    },
    "Parameters": {
      "children": [
        {
          "data": {
            "desc": [],
            "param": "G",
            "type_": "NetworkX directed graph"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "The pairs of nodes of interest. If None, will find the LCA of all pairs of nodes."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "pairs",
            "type_": "iterable of pairs of nodes, optional (default: all pairs)"
          },
          "type": "Param"
        }
      ],
      "title": null
    },
    "Raises": {
      "children": [],
      "title": null
    },
    "Receives": {
      "children": [],
      "title": null
    },
    "Returns": {
      "children": [
        {
          "data": {
            "desc": [],
            "param": "",
            "type_": "An iterator over ((node1, node2), lca) where (node1, node2) are"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [],
            "param": "",
            "type_": "the pairs specified and lca is a lowest common ancestor of the pair."
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [],
            "param": "",
            "type_": "Note that for the default of all pairs in G, we consider"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [],
            "param": "",
            "type_": "unordered pairs, e.g. you will not get both (b, a) and (a, b)."
          },
          "type": "Param"
        }
      ],
      "title": null
    },
    "Summary": {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Compute the lowest common ancestor for pairs of nodes."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": null
    },
    "Warnings": {
      "children": [],
      "title": null
    },
    "Warns": {
      "children": [],
      "title": null
    },
    "Yields": {
      "children": [],
      "title": null
    }
  },
  "aliases": [
    "networkx.all_pairs_lowest_common_ancestor"
  ],
  "arbitrary": [],
  "example_section_data": {
    "children": [],
    "title": null
  },
  "item_file": "networkx/algorithms/lowest_common_ancestors.py",
  "item_line": 153,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Parameters",
    "Returns",
    "Notes",
    "See Also"
  ],
  "references": null,
  "refs": [
    "lowest_common_ancestor",
    "tree_all_pairs_lowest_common_ancestor"
  ],
  "see_also": [
    {
      "descriptions": [],
      "name": {
        "exists": true,
        "name": "tree_all_pairs_lowest_common_ancestor",
        "ref": "networkx.algorithms.lowest_common_ancestors.tree_all_pairs_lowest_common_ancestor"
      },
      "type": null
    },
    {
      "descriptions": [],
      "name": {
        "exists": true,
        "name": "lowest_common_ancestor",
        "ref": "networkx.algorithms.lowest_common_ancestors.lowest_common_ancestor"
      },
      "type": null
    }
  ],
  "signature": {
    "value": "all_pairs_lowest_common_ancestor(G, pairs=None)"
  }
}