{
  "_content": {
    "Attributes": {
      "children": [],
      "title": null
    },
    "Extended Summary": {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "The equivalence classes, or blocks, consist of objects from "
                },
                "type": "Words"
              },
              {
                "data": {
                  "exists": true,
                  "kind": "local",
                  "reference": {
                    "kind": "local",
                    "module": null,
                    "path": "iterable",
                    "version": null
                  },
                  "value": "iterable"
                },
                "type": "Link"
              },
              {
                "data": {
                  "value": " which are all equivalent. They are defined to be equivalent if the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "exists": true,
                  "kind": "local",
                  "reference": {
                    "kind": "local",
                    "module": null,
                    "path": "relation",
                    "version": null
                  },
                  "value": "relation"
                },
                "type": "Link"
              },
              {
                "data": {
                  "value": " function returns "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "True"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " when passed any two objects from that class, and "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "False"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " otherwise. To define an equivalence relation the function must be reflexive, symmetric and transitive."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": null
    },
    "Methods": {
      "children": [],
      "title": null
    },
    "Notes": {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "This function does not check that "
                },
                "type": "Words"
              },
              {
                "data": {
                  "exists": true,
                  "kind": "local",
                  "reference": {
                    "kind": "local",
                    "module": null,
                    "path": "relation",
                    "version": null
                  },
                  "value": "relation"
                },
                "type": "Link"
              },
              {
                "data": {
                  "value": " represents an equivalence relation. You can check that your equivalence classes provide a partition using "
                },
                "type": "Words"
              },
              {
                "data": {
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "module",
                    "module": "networkx",
                    "path": "networkx.algorithms.community.community_utils.is_partition",
                    "version": "2.7.2rc1.dev0"
                  },
                  "value": "is_partition"
                },
                "type": "Link"
              },
              {
                "data": {
                  "value": "."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": null
    },
    "Other Parameters": {
      "children": [],
      "title": null
    },
    "Parameters": {
      "children": [
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "An iterable of elements/nodes."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "iterable",
            "type_": "list, tuple, or set"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "A Boolean-valued function that implements an equivalence relation (reflexive, symmetric, transitive binary relation) on the elements of "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "local",
                        "reference": {
                          "kind": "local",
                          "module": null,
                          "path": "iterable",
                          "version": null
                        },
                        "value": "iterable"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": " - it must take two elements and return "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "True"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " if they are related, or "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "False"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " if not."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "relation",
            "type_": "function"
          },
          "type": "Param"
        }
      ],
      "title": null
    },
    "Raises": {
      "children": [],
      "title": null
    },
    "Receives": {
      "children": [],
      "title": null
    },
    "Returns": {
      "children": [
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "A set of frozensets representing the partition induced by the equivalence relation function "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "local",
                        "reference": {
                          "kind": "local",
                          "module": null,
                          "path": "relation",
                          "version": null
                        },
                        "value": "relation"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": " on the elements of "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "local",
                        "reference": {
                          "kind": "local",
                          "module": null,
                          "path": "iterable",
                          "version": null
                        },
                        "value": "iterable"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": ". Each member set in the return set represents an equivalence class, or block, of the partition."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              },
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Duplicate elements will be ignored so it makes the most sense for "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "local",
                        "reference": {
                          "kind": "local",
                          "module": null,
                          "path": "iterable",
                          "version": null
                        },
                        "value": "iterable"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": " to be a "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "set"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": "."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "",
            "type_": "set of frozensets"
          },
          "type": "Param"
        }
      ],
      "title": null
    },
    "Summary": {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Returns equivalence classes of "
                },
                "type": "Words"
              },
              {
                "data": {
                  "exists": true,
                  "kind": "local",
                  "reference": {
                    "kind": "local",
                    "module": null,
                    "path": "relation",
                    "version": null
                  },
                  "value": "relation"
                },
                "type": "Link"
              },
              {
                "data": {
                  "value": " when applied to "
                },
                "type": "Words"
              },
              {
                "data": {
                  "exists": true,
                  "kind": "local",
                  "reference": {
                    "kind": "local",
                    "module": null,
                    "path": "iterable",
                    "version": null
                  },
                  "value": "iterable"
                },
                "type": "Link"
              },
              {
                "data": {
                  "value": "."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": null
    },
    "Warnings": {
      "children": [],
      "title": null
    },
    "Warns": {
      "children": [],
      "title": null
    },
    "Yields": {
      "children": [],
      "title": null
    }
  },
  "aliases": [
    "networkx.equivalence_classes"
  ],
  "arbitrary": [],
  "example_section_data": {
    "children": [
      {
        "data": {
          "inline": [
            {
              "data": {
                "value": "Let "
              },
              "type": "Words"
            },
            {
              "data": {
                "domain": null,
                "role": null,
                "value": "X"
              },
              "type": "Directive"
            },
            {
              "data": {
                "value": " be the set of integers from "
              },
              "type": "Words"
            },
            {
              "data": {
                "domain": null,
                "role": null,
                "value": "0"
              },
              "type": "Directive"
            },
            {
              "data": {
                "value": " to "
              },
              "type": "Words"
            },
            {
              "data": {
                "domain": null,
                "role": null,
                "value": "9"
              },
              "type": "Directive"
            },
            {
              "data": {
                "value": ", and consider an equivalence relation "
              },
              "type": "Words"
            },
            {
              "data": {
                "domain": null,
                "role": null,
                "value": "R"
              },
              "type": "Directive"
            },
            {
              "data": {
                "value": " on "
              },
              "type": "Words"
            },
            {
              "data": {
                "domain": null,
                "role": null,
                "value": "X"
              },
              "type": "Directive"
            },
            {
              "data": {
                "value": " of congruence modulo "
              },
              "type": "Words"
            },
            {
              "data": {
                "exists": true,
                "kind": "module",
                "reference": {
                  "kind": "module",
                  "module": "networkx",
                  "path": "networkx.generators.degree_seq.DegreeSequenceRandomGraph.phase3",
                  "version": "2.7.2rc1.dev0"
                },
                "value": "3"
              },
              "type": "Link"
            },
            {
              "data": {
                "value": ": this means that two integers "
              },
              "type": "Words"
            },
            {
              "data": {
                "domain": null,
                "role": null,
                "value": "x"
              },
              "type": "Directive"
            },
            {
              "data": {
                "value": " and "
              },
              "type": "Words"
            },
            {
              "data": {
                "domain": null,
                "role": null,
                "value": "y"
              },
              "type": "Directive"
            },
            {
              "data": {
                "value": " in "
              },
              "type": "Words"
            },
            {
              "data": {
                "domain": null,
                "role": null,
                "value": "X"
              },
              "type": "Directive"
            },
            {
              "data": {
                "value": " are equivalent under "
              },
              "type": "Words"
            },
            {
              "data": {
                "domain": null,
                "role": null,
                "value": "R"
              },
              "type": "Directive"
            },
            {
              "data": {
                "value": " if they leave the same remainder when divided by "
              },
              "type": "Words"
            },
            {
              "data": {
                "exists": true,
                "kind": "module",
                "reference": {
                  "kind": "module",
                  "module": "networkx",
                  "path": "networkx.generators.degree_seq.DegreeSequenceRandomGraph.phase3",
                  "version": "2.7.2rc1.dev0"
                },
                "value": "3"
              },
              "type": "Link"
            },
            {
              "data": {
                "value": ", i.e. "
              },
              "type": "Words"
            },
            {
              "data": {
                "domain": null,
                "role": null,
                "value": "(x - y) mod 3 = 0"
              },
              "type": "Directive"
            },
            {
              "data": {
                "value": "."
              },
              "type": "Words"
            }
          ],
          "inner": []
        },
        "type": "Paragraph"
      },
      {
        "data": {
          "inline": [
            {
              "data": {
                "value": "The equivalence classes of this relation are "
              },
              "type": "Words"
            },
            {
              "data": {
                "domain": null,
                "role": null,
                "value": "{0, 3, 6, 9}"
              },
              "type": "Directive"
            },
            {
              "data": {
                "value": ", "
              },
              "type": "Words"
            },
            {
              "data": {
                "domain": null,
                "role": null,
                "value": "{1, 4, 7}"
              },
              "type": "Directive"
            },
            {
              "data": {
                "value": ", "
              },
              "type": "Words"
            },
            {
              "data": {
                "domain": null,
                "role": null,
                "value": "{2, 5, 8}"
              },
              "type": "Directive"
            },
            {
              "data": {
                "value": ": "
              },
              "type": "Words"
            },
            {
              "data": {
                "domain": null,
                "role": null,
                "value": "0"
              },
              "type": "Directive"
            },
            {
              "data": {
                "value": ", "
              },
              "type": "Words"
            },
            {
              "data": {
                "exists": true,
                "kind": "module",
                "reference": {
                  "kind": "module",
                  "module": "networkx",
                  "path": "networkx.generators.degree_seq.DegreeSequenceRandomGraph.phase3",
                  "version": "2.7.2rc1.dev0"
                },
                "value": "3"
              },
              "type": "Link"
            },
            {
              "data": {
                "value": ", "
              },
              "type": "Words"
            },
            {
              "data": {
                "domain": null,
                "role": null,
                "value": "6"
              },
              "type": "Directive"
            },
            {
              "data": {
                "value": ", "
              },
              "type": "Words"
            },
            {
              "data": {
                "domain": null,
                "role": null,
                "value": "9"
              },
              "type": "Directive"
            },
            {
              "data": {
                "value": " are all divisible by "
              },
              "type": "Words"
            },
            {
              "data": {
                "exists": true,
                "kind": "module",
                "reference": {
                  "kind": "module",
                  "module": "networkx",
                  "path": "networkx.generators.degree_seq.DegreeSequenceRandomGraph.phase3",
                  "version": "2.7.2rc1.dev0"
                },
                "value": "3"
              },
              "type": "Link"
            },
            {
              "data": {
                "value": " and leave zero remainder; "
              },
              "type": "Words"
            },
            {
              "data": {
                "domain": null,
                "role": null,
                "value": "1"
              },
              "type": "Directive"
            },
            {
              "data": {
                "value": ", "
              },
              "type": "Words"
            },
            {
              "data": {
                "domain": null,
                "role": null,
                "value": "4"
              },
              "type": "Directive"
            },
            {
              "data": {
                "value": ", "
              },
              "type": "Words"
            },
            {
              "data": {
                "domain": null,
                "role": null,
                "value": "7"
              },
              "type": "Directive"
            },
            {
              "data": {
                "value": " leave remainder "
              },
              "type": "Words"
            },
            {
              "data": {
                "domain": null,
                "role": null,
                "value": "1"
              },
              "type": "Directive"
            },
            {
              "data": {
                "value": "; while "
              },
              "type": "Words"
            },
            {
              "data": {
                "domain": null,
                "role": null,
                "value": "2"
              },
              "type": "Directive"
            },
            {
              "data": {
                "value": ", "
              },
              "type": "Words"
            },
            {
              "data": {
                "domain": null,
                "role": null,
                "value": "5"
              },
              "type": "Directive"
            },
            {
              "data": {
                "value": " and "
              },
              "type": "Words"
            },
            {
              "data": {
                "domain": null,
                "role": null,
                "value": "8"
              },
              "type": "Directive"
            },
            {
              "data": {
                "value": " leave remainder "
              },
              "type": "Words"
            },
            {
              "data": {
                "domain": null,
                "role": null,
                "value": "2"
              },
              "type": "Directive"
            },
            {
              "data": {
                "value": ". We can see this by calling "
              },
              "type": "Words"
            },
            {
              "data": {
                "exists": true,
                "kind": "module",
                "reference": {
                  "kind": "module",
                  "module": "networkx",
                  "path": "networkx.algorithms.minors.contraction.equivalence_classes",
                  "version": "2.7.2rc1.dev0"
                },
                "value": "equivalence_classes"
              },
              "type": "Link"
            },
            {
              "data": {
                "value": " with "
              },
              "type": "Words"
            },
            {
              "data": {
                "domain": null,
                "role": null,
                "value": "X"
              },
              "type": "Directive"
            },
            {
              "data": {
                "value": " and a function implementation of "
              },
              "type": "Words"
            },
            {
              "data": {
                "domain": null,
                "role": null,
                "value": "R"
              },
              "type": "Directive"
            },
            {
              "data": {
                "value": "."
              },
              "type": "Words"
            }
          ],
          "inner": []
        },
        "type": "Paragraph"
      },
      {
        "data": {
          "ce_status": "execed",
          "entries": [
            [
              "X",
              "builtins.set",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "set",
              "builtins.set",
              "nb"
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "range",
              "builtins.range",
              "nb"
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "10",
              "",
              "mi"
            ],
            [
              ")",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "def",
              null,
              "k"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "mod3",
              "__main__.mod3",
              "nf"
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "x",
              null,
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "y",
              null,
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              ":",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "return",
              null,
              "k"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "x",
              null,
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "-",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "y",
              null,
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "%",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "3",
              "",
              "mi"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "==",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "0",
              "",
              "mi"
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "equivalence_classes",
              "networkx.algorithms.minors.contraction.equivalence_classes",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "X",
              "builtins.set",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "mod3",
              "__main__.mod3",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "    ",
              "",
              ""
            ],
            [
              "# doctest: +SKIP",
              "",
              "c1"
            ]
          ],
          "out": "{frozenset({1, 4, 7}), frozenset({8, 2, 5}), frozenset({0, 9, 3, 6})}"
        },
        "type": "Code"
      }
    ],
    "title": null
  },
  "item_file": "networkx/algorithms/minors/contraction.py",
  "item_line": 23,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns",
    "Notes",
    "Examples"
  ],
  "references": null,
  "refs": [
    "__main__.mod3",
    "builtins.range",
    "builtins.set",
    "networkx.algorithms.minors.contraction.equivalence_classes"
  ],
  "see_also": [],
  "signature": {
    "value": "equivalence_classes(iterable, relation)"
  }
}