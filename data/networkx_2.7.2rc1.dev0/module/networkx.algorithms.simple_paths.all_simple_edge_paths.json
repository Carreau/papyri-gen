{
  "_content": {
    "Attributes": {
      "children": [],
      "title": null
    },
    "Extended Summary": {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "A simple path is a path with no repeated nodes."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": null
    },
    "Methods": {
      "children": [],
      "title": null
    },
    "Notes": {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "This algorithm uses a modified depth-first search to generate the paths .  A single path can be found in $O(V+E)$ time but the number of simple paths in a graph can be very large, e.g. $O(n!)$ in the complete graph of order $n$."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": null
    },
    "Other Parameters": {
      "children": [],
      "title": null
    },
    "Parameters": {
      "children": [
        {
          "data": {
            "desc": [],
            "param": "G",
            "type_": "NetworkX graph"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Starting node for path"
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "source",
            "type_": "node"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Single node or iterable of nodes at which to end path"
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "target",
            "type_": "nodes"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Depth to stop the search. Only paths of length <= cutoff are returned."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "cutoff",
            "type_": "integer, optional"
          },
          "type": "Param"
        }
      ],
      "title": null
    },
    "Raises": {
      "children": [],
      "title": null
    },
    "Receives": {
      "children": [],
      "title": null
    },
    "Returns": {
      "children": [
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "A generator that produces lists of simple paths.  If there are no paths between the source and target within the given cutoff the generator produces no output. For multigraphs, the list of edges have elements of the form "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "domain": null,
                        "role": null,
                        "value": "(u,v,k)"
                      },
                      "type": "Directive"
                    },
                    {
                      "data": {
                        "value": ". Where "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "domain": null,
                        "role": null,
                        "value": "k"
                      },
                      "type": "Directive"
                    },
                    {
                      "data": {
                        "value": " corresponds to the edge key."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "",
            "type_": "path_generator: generator"
          },
          "type": "Param"
        }
      ],
      "title": null
    },
    "Summary": {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Generate lists of edges for all simple paths in G from source to target."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": null
    },
    "Warnings": {
      "children": [],
      "title": null
    },
    "Warns": {
      "children": [],
      "title": null
    },
    "Yields": {
      "children": [],
      "title": null
    }
  },
  "aliases": [
    "networkx.all_simple_edge_paths"
  ],
  "arbitrary": [],
  "example_section_data": {
    "children": [
      {
        "data": {
          "value": [
            ">>> g = nx.Graph([(1, 2), (2, 4), (1, 3), (3, 4)])",
            ">>> for path in sorted(nx.all_simple_edge_paths(g, 1, 4)):",
            "...     print(path)",
            "[(1, 2), (2, 4)]",
            "[(1, 3), (3, 4)]"
          ]
        },
        "type": "BlockQuote"
      },
      {
        "data": {
          "value": [
            ">>> mg = nx.MultiGraph()",
            ">>> mg.add_edge(1, 2, key=\"k0\")",
            "'k0'",
            ">>> mg.add_edge(1, 2, key=\"k1\")",
            "'k1'",
            ">>> mg.add_edge(2, 3, key=\"k0\")",
            "'k0'",
            ">>> for path in sorted(nx.all_simple_edge_paths(mg, 1, 3)):",
            "...     print(path)",
            "[(1, 2, 'k0'), (2, 3, 'k0')]",
            "[(1, 2, 'k1'), (2, 3, 'k0')]"
          ]
        },
        "type": "BlockQuote"
      }
    ],
    "title": null
  },
  "item_file": "networkx/algorithms/simple_paths.py",
  "item_line": 304,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns",
    "Examples",
    "Notes",
    "References",
    "See Also"
  ],
  "references": null,
  "refs": [
    "all_shortest_paths",
    "all_simple_paths",
    "shortest_path"
  ],
  "see_also": [
    {
      "descriptions": [],
      "name": {
        "exists": true,
        "name": "all_shortest_paths",
        "ref": "networkx.algorithms.shortest_paths.generic.all_shortest_paths"
      },
      "type": null
    },
    {
      "descriptions": [],
      "name": {
        "exists": true,
        "name": "shortest_path",
        "ref": "networkx.algorithms.shortest_paths.generic.shortest_path"
      },
      "type": null
    },
    {
      "descriptions": [],
      "name": {
        "exists": true,
        "name": "all_simple_paths",
        "ref": "networkx.algorithms.simple_paths.all_simple_paths"
      },
      "type": null
    }
  ],
  "signature": {
    "value": "all_simple_edge_paths(G, source, target, cutoff=None)"
  }
}