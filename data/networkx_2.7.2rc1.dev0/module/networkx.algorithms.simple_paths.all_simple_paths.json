{
  "_content": {
    "Attributes": {
      "children": [],
      "title": null
    },
    "Extended Summary": {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "A simple path is a path with no repeated nodes."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": null
    },
    "Methods": {
      "children": [],
      "title": null
    },
    "Notes": {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "This algorithm uses a modified depth-first search to generate the paths .  A single path can be found in $O(V+E)$ time but the number of simple paths in a graph can be very large, e.g. $O(n!)$ in the complete graph of order $n$."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "This function does not check that a path exists between "
                },
                "type": "Words"
              },
              {
                "data": {
                  "exists": true,
                  "kind": "local",
                  "reference": {
                    "kind": "local",
                    "module": null,
                    "path": "source",
                    "version": null
                  },
                  "value": "source"
                },
                "type": "Link"
              },
              {
                "data": {
                  "value": " and "
                },
                "type": "Words"
              },
              {
                "data": {
                  "exists": true,
                  "kind": "local",
                  "reference": {
                    "kind": "local",
                    "module": null,
                    "path": "target",
                    "version": null
                  },
                  "value": "target"
                },
                "type": "Link"
              },
              {
                "data": {
                  "value": ". For large graphs, this may result in very long runtimes. Consider using "
                },
                "type": "Words"
              },
              {
                "data": {
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "module",
                    "module": "networkx",
                    "path": "networkx.algorithms.shortest_paths.generic.has_path",
                    "version": "2.7.2rc1.dev0"
                  },
                  "value": "has_path"
                },
                "type": "Link"
              },
              {
                "data": {
                  "value": " to check that a path exists between "
                },
                "type": "Words"
              },
              {
                "data": {
                  "exists": true,
                  "kind": "local",
                  "reference": {
                    "kind": "local",
                    "module": null,
                    "path": "source",
                    "version": null
                  },
                  "value": "source"
                },
                "type": "Link"
              },
              {
                "data": {
                  "value": " and "
                },
                "type": "Words"
              },
              {
                "data": {
                  "exists": true,
                  "kind": "local",
                  "reference": {
                    "kind": "local",
                    "module": null,
                    "path": "target",
                    "version": null
                  },
                  "value": "target"
                },
                "type": "Link"
              },
              {
                "data": {
                  "value": " before calling this function on large graphs."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": null
    },
    "Other Parameters": {
      "children": [],
      "title": null
    },
    "Parameters": {
      "children": [
        {
          "data": {
            "desc": [],
            "param": "G",
            "type_": "NetworkX graph"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Starting node for path"
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "source",
            "type_": "node"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Single node or iterable of nodes at which to end path"
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "target",
            "type_": "nodes"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Depth to stop the search. Only paths of length <= cutoff are returned."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "cutoff",
            "type_": "integer, optional"
          },
          "type": "Param"
        }
      ],
      "title": null
    },
    "Raises": {
      "children": [],
      "title": null
    },
    "Receives": {
      "children": [],
      "title": null
    },
    "Returns": {
      "children": [
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "A generator that produces lists of simple paths.  If there are no paths between the source and target within the given cutoff the generator produces no output."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "",
            "type_": "path_generator: generator"
          },
          "type": "Param"
        }
      ],
      "title": null
    },
    "Summary": {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Generate all simple paths in the graph G from source to target."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": null
    },
    "Warnings": {
      "children": [],
      "title": null
    },
    "Warns": {
      "children": [],
      "title": null
    },
    "Yields": {
      "children": [],
      "title": null
    }
  },
  "aliases": [
    "networkx.all_simple_paths"
  ],
  "arbitrary": [],
  "example_section_data": {
    "children": [
      {
        "data": {
          "value": [
            ">>> G = nx.complete_graph(4)",
            ">>> for path in nx.all_simple_paths(G, source=0, target=3):",
            "...     print(path)",
            "...",
            "[0, 1, 2, 3]",
            "[0, 1, 3]",
            "[0, 2, 1, 3]",
            "[0, 2, 3]",
            "[0, 3]"
          ]
        },
        "type": "BlockQuote"
      },
      {
        "data": {
          "value": [
            ">>> paths = nx.all_simple_paths(G, source=0, target=3, cutoff=2)",
            ">>> print(list(paths))",
            "[[0, 1, 3], [0, 2, 3], [0, 3]]"
          ]
        },
        "type": "BlockQuote"
      },
      {
        "data": {
          "value": [
            ">>> paths = nx.all_simple_paths(G, source=0, target=3)",
            ">>> for path in map(nx.utils.pairwise, paths):",
            "...     print(list(path))",
            "[(0, 1), (1, 2), (2, 3)]",
            "[(0, 1), (1, 3)]",
            "[(0, 2), (2, 1), (1, 3)]",
            "[(0, 2), (2, 3)]",
            "[(0, 3)]"
          ]
        },
        "type": "BlockQuote"
      },
      {
        "data": {
          "value": [
            ">>> G = nx.complete_graph(4)",
            ">>> for path in nx.all_simple_paths(G, source=0, target=[3, 2]):",
            "...     print(path)",
            "...",
            "[0, 1, 2]",
            "[0, 1, 2, 3]",
            "[0, 1, 3]",
            "[0, 1, 3, 2]",
            "[0, 2]",
            "[0, 2, 1, 3]",
            "[0, 2, 3]",
            "[0, 3]",
            "[0, 3, 1, 2]",
            "[0, 3, 2]"
          ]
        },
        "type": "BlockQuote"
      },
      {
        "data": {
          "value": [
            ">>> from itertools import chain",
            ">>> from itertools import product",
            ">>> from itertools import starmap",
            ">>> from functools import partial",
            ">>>",
            ">>> chaini = chain.from_iterable",
            ">>>",
            ">>> G = nx.DiGraph([(0, 1), (1, 2), (0, 3), (3, 2)])",
            ">>> roots = (v for v, d in G.in_degree() if d == 0)",
            ">>> leaves = (v for v, d in G.out_degree() if d == 0)",
            ">>> all_paths = partial(nx.all_simple_paths, G)",
            ">>> list(chaini(starmap(all_paths, product(roots, leaves))))",
            "[[0, 1, 2], [0, 3, 2]]"
          ]
        },
        "type": "BlockQuote"
      },
      {
        "data": {
          "value": [
            ">>> G = nx.DiGraph([(0, 1), (1, 2), (0, 3), (3, 2)])",
            ">>> roots = (v for v, d in G.in_degree() if d == 0)",
            ">>> leaves = (v for v, d in G.out_degree() if d == 0)",
            ">>> all_paths = []",
            ">>> for root in roots:",
            "...     for leaf in leaves:",
            "...         paths = nx.all_simple_paths(G, root, leaf)",
            "...         all_paths.extend(paths)",
            ">>> all_paths",
            "[[0, 1, 2], [0, 3, 2]]"
          ]
        },
        "type": "BlockQuote"
      },
      {
        "data": {
          "value": [
            ">>> G = nx.DiGraph([(0, 1), (2, 1), (1, 3), (1, 4)])",
            ">>> roots = (v for v, d in G.in_degree() if d == 0)",
            ">>> leaves = [v for v, d in G.out_degree() if d == 0]",
            ">>> all_paths = []",
            ">>> for root in roots:",
            "...     paths = nx.all_simple_paths(G, root, leaves)",
            "...     all_paths.extend(paths)",
            ">>> all_paths",
            "[[0, 1, 3], [0, 1, 4], [2, 1, 3], [2, 1, 4]]"
          ]
        },
        "type": "BlockQuote"
      }
    ],
    "title": null
  },
  "item_file": "networkx/algorithms/simple_paths.py",
  "item_line": 84,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns",
    "Examples",
    "Notes",
    "References",
    "See Also"
  ],
  "references": null,
  "refs": [
    "all_shortest_paths",
    "has_path",
    "shortest_path"
  ],
  "see_also": [
    {
      "descriptions": [],
      "name": {
        "exists": true,
        "name": "all_shortest_paths",
        "ref": "networkx.algorithms.shortest_paths.generic.all_shortest_paths"
      },
      "type": null
    },
    {
      "descriptions": [],
      "name": {
        "exists": true,
        "name": "shortest_path",
        "ref": "networkx.algorithms.shortest_paths.generic.shortest_path"
      },
      "type": null
    },
    {
      "descriptions": [],
      "name": {
        "exists": true,
        "name": "has_path",
        "ref": "networkx.algorithms.shortest_paths.generic.has_path"
      },
      "type": null
    }
  ],
  "signature": {
    "value": "all_simple_paths(G, source, target, cutoff=None)"
  }
}