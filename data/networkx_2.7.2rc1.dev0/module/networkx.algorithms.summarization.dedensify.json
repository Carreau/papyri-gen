{
  "_content": {
    "Attributes": {
      "children": [],
      "title": null
    },
    "Extended Summary": {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Reduces the number of edges to high-degree nodes by adding compressor nodes that summarize multiple edges of the same type to high-degree nodes (nodes with a degree greater than a given threshold).  Dedensification also has the added benefit of reducing the number of edges around high-degree nodes. The implementation currently supports graphs with a single edge type."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": null
    },
    "Methods": {
      "children": [],
      "title": null
    },
    "Notes": {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "According to the algorithm in , removes edges in a graph by compressing/decompressing the neighborhoods around high degree nodes by adding compressor nodes that summarize multiple edges of the same type to high-degree nodes.  Dedensification will only add a compressor node when doing so will reduce the total number of edges in the given graph. This implementation currently supports graphs with a single edge type."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": null
    },
    "Other Parameters": {
      "children": [],
      "title": null
    },
    "Parameters": {
      "children": [
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "A networkx graph"
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "G: graph",
            "type_": ""
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Minimum degree threshold of a node to be considered a high degree node. The threshold must be greater than or equal to 2."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "threshold: int",
            "type_": ""
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "An optional prefix for denoting compressor nodes"
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "prefix: str or None, optional (default: None)",
            "type_": ""
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Indicates if dedensification should be done inplace"
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "copy: bool, optional (default: True)",
            "type_": ""
          },
          "type": "Param"
        }
      ],
      "title": null
    },
    "Raises": {
      "children": [],
      "title": null
    },
    "Receives": {
      "children": [],
      "title": null
    },
    "Returns": {
      "children": [
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "2-tuple of the dedensified graph and set of compressor nodes"
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "dedensified networkx graph",
            "type_": "(graph, set)"
          },
          "type": "Param"
        }
      ],
      "title": null
    },
    "Summary": {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Compresses neighborhoods around high-degree nodes"
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": null
    },
    "Warnings": {
      "children": [],
      "title": null
    },
    "Warns": {
      "children": [],
      "title": null
    },
    "Yields": {
      "children": [],
      "title": null
    }
  },
  "aliases": [
    "networkx.dedensify"
  ],
  "arbitrary": [],
  "example_section_data": {
    "children": [
      {
        "data": {
          "value": [
            ">>> original_graph = nx.DiGraph()",
            ">>> original_graph.add_nodes_from(",
            "...     [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"A\", \"B\", \"C\"]",
            "... )",
            ">>> original_graph.add_edges_from(",
            "...     [",
            "...         (\"1\", \"C\"), (\"1\", \"B\"),",
            "...         (\"2\", \"C\"), (\"2\", \"B\"), (\"2\", \"A\"),",
            "...         (\"3\", \"B\"), (\"3\", \"A\"), (\"3\", \"6\"),",
            "...         (\"4\", \"C\"), (\"4\", \"B\"), (\"4\", \"A\"),",
            "...         (\"5\", \"B\"), (\"5\", \"A\"),",
            "...         (\"6\", \"5\"),",
            "...         (\"A\", \"6\")",
            "...     ]",
            "... )",
            ">>> c_graph, c_nodes = nx.dedensify(original_graph, threshold=2)",
            ">>> original_graph.number_of_edges()",
            "15",
            ">>> c_graph.number_of_edges()",
            "14"
          ]
        },
        "type": "BlockQuote"
      },
      {
        "data": {
          "value": [
            ">>> original_graph = nx.DiGraph()",
            ">>> original_graph.add_nodes_from(",
            "...     [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"A\", \"B\", \"C\"]",
            "... )",
            ">>> original_graph.add_edges_from(",
            "...     [",
            "...         (\"1\", \"C\"), (\"1\", \"B\"),",
            "...         (\"2\", \"C\"), (\"2\", \"B\"), (\"2\", \"A\"),",
            "...         (\"3\", \"B\"), (\"3\", \"A\"), (\"3\", \"6\"),",
            "...         (\"4\", \"C\"), (\"4\", \"B\"), (\"4\", \"A\"),",
            "...         (\"5\", \"B\"), (\"5\", \"A\"),",
            "...         (\"6\", \"5\"),",
            "...         (\"A\", \"6\")",
            "...     ]",
            "... )",
            ">>> c_graph, c_nodes = nx.dedensify(original_graph, threshold=2)",
            ">>> # re-densifies the compressed graph into the original graph",
            ">>> for c_node in c_nodes:",
            "...     all_neighbors = set(nx.all_neighbors(c_graph, c_node))",
            "...     out_neighbors = set(c_graph.neighbors(c_node))",
            "...     for out_neighbor in out_neighbors:",
            "...         c_graph.remove_edge(c_node, out_neighbor)",
            "...     in_neighbors = all_neighbors - out_neighbors",
            "...     for in_neighbor in in_neighbors:",
            "...         c_graph.remove_edge(in_neighbor, c_node)",
            "...         for out_neighbor in out_neighbors:",
            "...             c_graph.add_edge(in_neighbor, out_neighbor)",
            "...     c_graph.remove_node(c_node)",
            "...",
            ">>> nx.is_isomorphic(original_graph, c_graph)",
            "True"
          ]
        },
        "type": "BlockQuote"
      }
    ],
    "title": null
  },
  "item_file": "networkx/algorithms/summarization.py",
  "item_line": 68,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns",
    "Notes",
    "Examples",
    "References"
  ],
  "references": null,
  "refs": [],
  "see_also": [],
  "signature": {
    "value": "dedensify(G, threshold, prefix=None, copy=True)"
  }
}