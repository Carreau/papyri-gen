{
  "_content": {
    "Attributes": {
      "children": [],
      "title": null
    },
    "Extended Summary": {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "The beam search is a generalized breadth-first search in which only the \"best\" "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "w"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": " neighbors of the current node are enqueued, where "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "w"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": " is the beam width and \"best\" is an application-specific heuristic. In general, a beam search with a small beam width might not visit each node in the graph."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": null
    },
    "Methods": {
      "children": [],
      "title": null
    },
    "Notes": {
      "children": [],
      "title": null
    },
    "Other Parameters": {
      "children": [],
      "title": null
    },
    "Parameters": {
      "children": [
        {
          "data": {
            "desc": [],
            "param": "G",
            "type_": "NetworkX graph"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Starting node for the breadth-first search; this function iterates over only those edges in the component reachable from this node."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "source",
            "type_": "node"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "A function that takes a node of the graph as input and returns a real number indicating how \"good\" it is. A higher value means it is more likely to be visited sooner during the search. When visiting a new node, only the "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "local",
                        "reference": {
                          "kind": "local",
                          "module": null,
                          "path": "width",
                          "version": null
                        },
                        "value": "width"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": " neighbors with the highest "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "local",
                        "reference": {
                          "kind": "local",
                          "module": null,
                          "path": "value",
                          "version": null
                        },
                        "value": "value"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": " are enqueued (in decreasing order of "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "local",
                        "reference": {
                          "kind": "local",
                          "module": null,
                          "path": "value",
                          "version": null
                        },
                        "value": "value"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": ")."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "value",
            "type_": "function"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "The beam width for the search. This is the number of neighbors (ordered by "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "local",
                        "reference": {
                          "kind": "local",
                          "module": null,
                          "path": "value",
                          "version": null
                        },
                        "value": "value"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": ") to enqueue when visiting each new node."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "width",
            "type_": "int (default = None)"
          },
          "type": "Param"
        }
      ],
      "title": null
    },
    "Raises": {
      "children": [],
      "title": null
    },
    "Receives": {
      "children": [],
      "title": null
    },
    "Returns": {
      "children": [],
      "title": null
    },
    "Summary": {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Iterates over edges in a beam search."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": null
    },
    "Warnings": {
      "children": [],
      "title": null
    },
    "Warns": {
      "children": [],
      "title": null
    },
    "Yields": {
      "children": [
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Edges in the beam search starting from "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "local",
                        "reference": {
                          "kind": "local",
                          "module": null,
                          "path": "source",
                          "version": null
                        },
                        "value": "source"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": ", given as a pair of nodes."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "",
            "type_": "edge"
          },
          "type": "Param"
        }
      ],
      "title": null
    }
  },
  "aliases": [
    "networkx.bfs_beam_edges"
  ],
  "arbitrary": [],
  "example_section_data": {
    "children": [
      {
        "data": {
          "inline": [
            {
              "data": {
                "value": "To give nodes with, for example, a higher centrality precedence during the search, set the "
              },
              "type": "Words"
            },
            {
              "data": {
                "exists": true,
                "kind": "local",
                "reference": {
                  "kind": "local",
                  "module": null,
                  "path": "value",
                  "version": null
                },
                "value": "value"
              },
              "type": "Link"
            },
            {
              "data": {
                "value": " function to return the centrality value of the node:"
              },
              "type": "Words"
            }
          ],
          "inner": []
        },
        "type": "Paragraph"
      },
      {
        "data": {
          "ce_status": "execed",
          "entries": [
            [
              "G",
              "networkx.classes.graph.Graph",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "nx",
              "networkx",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "karate_club_graph",
              "networkx.generators.social.karate_club_graph",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "centrality",
              "builtins.dict",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "nx",
              "networkx",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "eigenvector_centrality",
              "networkx.algorithms.centrality.eigenvector.eigenvector_centrality",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "G",
              "networkx.classes.graph.Graph",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "source",
              "builtins.int",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "0",
              "",
              "mi"
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "width",
              "builtins.int",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "5",
              "",
              "mi"
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "for",
              null,
              "k"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "u",
              "builtins.int",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "v",
              null,
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "in",
              null,
              "ow"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "nx",
              "networkx",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "bfs_beam_edges",
              "networkx.algorithms.traversal.beamsearch.bfs_beam_edges",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "G",
              "networkx.classes.graph.Graph",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "source",
              "builtins.int",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "centrality",
              "builtins.dict",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "get",
              "typing.Mapping.get",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "width",
              "builtins.int",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              ":",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "    ",
              "",
              ""
            ],
            [
              "print",
              "builtins.print",
              "nb"
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "u",
              "builtins.int",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "v",
              "builtins.int",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": "...\n(0, 2)\n(0, 1)\n(0, 8)\n(0, 13)\n(0, 3)\n(2, 32)\n(1, 30)\n(8, 33)\n(3, 7)\n(32, 31)\n(31, 28)\n(31, 25)\n(25, 23)\n(25, 24)\n(23, 29)\n(23, 27)\n(29, 26)"
        },
        "type": "Code"
      }
    ],
    "title": null
  },
  "item_file": "networkx/algorithms/traversal/beamsearch.py",
  "item_line": 8,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Yields",
    "Examples"
  ],
  "references": null,
  "refs": [
    "builtins.dict",
    "builtins.int",
    "builtins.print",
    "networkx",
    "networkx.algorithms.centrality.eigenvector.eigenvector_centrality",
    "networkx.algorithms.traversal.beamsearch.bfs_beam_edges",
    "networkx.classes.graph.Graph",
    "networkx.generators.social.karate_club_graph",
    "typing.Mapping.get"
  ],
  "see_also": [],
  "signature": {
    "value": "bfs_beam_edges(G, source, value, width=None)"
  }
}