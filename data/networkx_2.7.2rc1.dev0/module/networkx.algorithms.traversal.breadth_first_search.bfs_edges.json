{
  "_content": {
    "Attributes": {
      "children": [],
      "title": null
    },
    "Extended Summary": {
      "children": [],
      "title": null
    },
    "Methods": {
      "children": [],
      "title": null
    },
    "Notes": {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "The naming of this function is very similar to "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "~networkx.algorithms.traversal.edgebfs.edge_bfs"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ". The difference is that "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "edge_bfs"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " yields edges even if they extend back to an already explored node while this generator yields the edges of the tree that results from a breadth-first-search (BFS) so no edges are reported if they extend to already explored nodes. That means "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "edge_bfs"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " reports all edges while "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "bfs_edges"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " only reports those traversed by a node-based BFS. Yet another description is that "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "bfs_edges"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " reports the edges traversed during BFS while "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "edge_bfs"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " reports all edges in the order they are explored."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Based on the breadth-first search implementation in PADS  by D. Eppstein, July 2004; with modifications to allow depth limits as described in ."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": null
    },
    "Other Parameters": {
      "children": [],
      "title": null
    },
    "Parameters": {
      "children": [
        {
          "data": {
            "desc": [],
            "param": "G",
            "type_": "NetworkX graph"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Specify starting node for breadth-first search; this function iterates over only those edges in the component reachable from this node."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "source",
            "type_": "node"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "If True traverse a directed graph in the reverse direction"
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "reverse",
            "type_": "bool, optional"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Specify the maximum search depth"
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "depth_limit",
            "type_": "int, optional(default=len(G))"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "A function that takes the list of neighbors of given node as input, and returns an "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": {
                          "value": "iterator"
                        }
                      },
                      "type": "Emph"
                    },
                    {
                      "data": {
                        "value": " over these neighbors but with custom ordering."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "sort_neighbors",
            "type_": "function"
          },
          "type": "Param"
        }
      ],
      "title": null
    },
    "Raises": {
      "children": [],
      "title": null
    },
    "Receives": {
      "children": [],
      "title": null
    },
    "Returns": {
      "children": [],
      "title": null
    },
    "Summary": {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Iterate over edges in a breadth-first-search starting at source."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": null
    },
    "Warnings": {
      "children": [],
      "title": null
    },
    "Warns": {
      "children": [],
      "title": null
    },
    "Yields": {
      "children": [
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Yields edges resulting from the breadth-first search."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "",
            "type_": "edge: 2-tuple of nodes"
          },
          "type": "Param"
        }
      ],
      "title": null
    }
  },
  "aliases": [
    "networkx.bfs_edges"
  ],
  "arbitrary": [],
  "example_section_data": {
    "children": [
      {
        "data": {
          "value": [
            ">>> G = nx.path_graph(3)",
            ">>> list(nx.bfs_edges(G, 0))",
            "[(0, 1), (1, 2)]",
            ">>> list(nx.bfs_edges(G, source=0, depth_limit=1))",
            "[(0, 1)]"
          ]
        },
        "type": "BlockQuote"
      },
      {
        "data": {
          "value": [
            ">>> G = nx.path_graph(3)",
            ">>> root = 2",
            ">>> edges = nx.bfs_edges(G, root)",
            ">>> nodes = [root] + [v for u, v in edges]",
            ">>> nodes",
            "[2, 1, 0]"
          ]
        },
        "type": "BlockQuote"
      }
    ],
    "title": null
  },
  "item_file": "networkx/algorithms/traversal/breadth_first_search.py",
  "item_line": 89,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Parameters",
    "Yields",
    "Examples",
    "Notes",
    "References",
    "See Also"
  ],
  "references": null,
  "refs": [
    "bfs_tree",
    "~networkx.algorithms.traversal.depth_first_search.dfs_edges",
    "~networkx.algorithms.traversal.edgebfs.edge_bfs"
  ],
  "see_also": [
    {
      "descriptions": [],
      "name": {
        "exists": true,
        "name": "bfs_tree",
        "ref": "networkx.algorithms.traversal.breadth_first_search.bfs_tree"
      },
      "type": null
    },
    {
      "descriptions": [
        {
          "inline": [
            {
              "data": {
                "value": "func"
              },
              "type": "Words"
            }
          ],
          "inner": []
        }
      ],
      "name": {
        "exists": true,
        "name": "~networkx.algorithms.traversal.depth_first_search.dfs_edges",
        "ref": "networkx.algorithms.traversal.depth_first_search.dfs_edges"
      },
      "type": null
    },
    {
      "descriptions": [
        {
          "inline": [
            {
              "data": {
                "value": "func"
              },
              "type": "Words"
            }
          ],
          "inner": []
        }
      ],
      "name": {
        "exists": true,
        "name": "~networkx.algorithms.traversal.edgebfs.edge_bfs",
        "ref": "networkx.algorithms.traversal.edgebfs.edge_bfs"
      },
      "type": null
    }
  ],
  "signature": {
    "value": "bfs_edges(G, source, reverse=False, depth_limit=None, sort_neighbors=None)"
  }
}