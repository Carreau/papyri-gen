{
  "_content": {
    "Attributes": {
      "children": [],
      "title": null
    },
    "Extended Summary": {
      "children": [],
      "title": null
    },
    "Methods": {
      "children": [],
      "title": null
    },
    "Notes": {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "If a source is not specified then a source is chosen arbitrarily and repeatedly until all components in the graph are searched."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "The implementation of this function is adapted from David Eppstein's depth-first search function in "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "PADS"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": ", with modifications to allow depth limits based on the Wikipedia article \""
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "Depth-limited search"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": "\"."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "placeholder": "target",
            "value": ".. _PADS: http://www.ics.uci.edu/~eppstein/PADS"
          },
          "type": "Unimplemented"
        },
        {
          "data": {
            "placeholder": "target",
            "value": ".. _Depth-limited search: https://en.wikipedia.org/wiki/Depth-limited_search"
          },
          "type": "Unimplemented"
        }
      ],
      "title": null
    },
    "Other Parameters": {
      "children": [],
      "title": null
    },
    "Parameters": {
      "children": [
        {
          "data": {
            "desc": [],
            "param": "G",
            "type_": "NetworkX graph"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Specify starting node for depth-first search and return edges in the component reachable from source."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "source",
            "type_": "node, optional"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Specify the maximum search depth."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "depth_limit",
            "type_": "int, optional (default=len(G))"
          },
          "type": "Param"
        }
      ],
      "title": null
    },
    "Raises": {
      "children": [],
      "title": null
    },
    "Receives": {
      "children": [],
      "title": null
    },
    "Returns": {
      "children": [
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "A generator of triples of the form ("
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": {
                          "value": "u"
                        }
                      },
                      "type": "Emph"
                    },
                    {
                      "data": {
                        "value": ", "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": {
                          "value": "v"
                        }
                      },
                      "type": "Emph"
                    },
                    {
                      "data": {
                        "value": ", "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": {
                          "value": "d"
                        }
                      },
                      "type": "Emph"
                    },
                    {
                      "data": {
                        "value": "), where ("
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": {
                          "value": "u"
                        }
                      },
                      "type": "Emph"
                    },
                    {
                      "data": {
                        "value": ", "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": {
                          "value": "v"
                        }
                      },
                      "type": "Emph"
                    },
                    {
                      "data": {
                        "value": ") is the edge being explored in the depth-first search and "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": {
                          "value": "d"
                        }
                      },
                      "type": "Emph"
                    },
                    {
                      "data": {
                        "value": " is one of the strings 'forward', 'nontree', or 'reverse'. A 'forward' edge is one in which "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": {
                          "value": "u"
                        }
                      },
                      "type": "Emph"
                    },
                    {
                      "data": {
                        "value": " has been visited but "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": {
                          "value": "v"
                        }
                      },
                      "type": "Emph"
                    },
                    {
                      "data": {
                        "value": " has not. A 'nontree' edge is one in which both "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": {
                          "value": "u"
                        }
                      },
                      "type": "Emph"
                    },
                    {
                      "data": {
                        "value": " and "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": {
                          "value": "v"
                        }
                      },
                      "type": "Emph"
                    },
                    {
                      "data": {
                        "value": " have been visited but the edge is not in the DFS tree. A 'reverse' edge is on in which both "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": {
                          "value": "u"
                        }
                      },
                      "type": "Emph"
                    },
                    {
                      "data": {
                        "value": " and "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": {
                          "value": "v"
                        }
                      },
                      "type": "Emph"
                    },
                    {
                      "data": {
                        "value": " have been visited and the edge is in the DFS tree."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "",
            "type_": "edges: generator"
          },
          "type": "Param"
        }
      ],
      "title": null
    },
    "Summary": {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Iterate over edges in a depth-first-search (DFS) labeled by type."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": null
    },
    "Warnings": {
      "children": [],
      "title": null
    },
    "Warns": {
      "children": [],
      "title": null
    },
    "Yields": {
      "children": [],
      "title": null
    }
  },
  "aliases": [
    "networkx.dfs_labeled_edges"
  ],
  "arbitrary": [],
  "example_section_data": {
    "children": [
      {
        "data": {
          "value": [
            ">>> from pprint import pprint",
            ">>>",
            ">>> G = nx.DiGraph([(0, 1), (1, 2), (2, 1)])",
            ">>> pprint(list(nx.dfs_labeled_edges(G, source=0)))",
            "[(0, 0, 'forward'),",
            " (0, 1, 'forward'),",
            " (1, 2, 'forward'),",
            " (2, 1, 'nontree'),",
            " (1, 2, 'reverse'),",
            " (0, 1, 'reverse'),",
            " (0, 0, 'reverse')]"
          ]
        },
        "type": "BlockQuote"
      }
    ],
    "title": null
  },
  "item_file": "networkx/algorithms/traversal/depth_first_search.py",
  "item_line": 347,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Parameters",
    "Returns",
    "Examples",
    "Notes",
    "See Also"
  ],
  "references": null,
  "refs": [
    "dfs_edges",
    "dfs_postorder_nodes",
    "dfs_preorder_nodes"
  ],
  "see_also": [
    {
      "descriptions": [],
      "name": {
        "exists": true,
        "name": "dfs_edges",
        "ref": "networkx.algorithms.traversal.depth_first_search.dfs_edges"
      },
      "type": null
    },
    {
      "descriptions": [],
      "name": {
        "exists": true,
        "name": "dfs_preorder_nodes",
        "ref": "networkx.algorithms.traversal.depth_first_search.dfs_preorder_nodes"
      },
      "type": null
    },
    {
      "descriptions": [],
      "name": {
        "exists": true,
        "name": "dfs_postorder_nodes",
        "ref": "networkx.algorithms.traversal.depth_first_search.dfs_postorder_nodes"
      },
      "type": null
    }
  ],
  "signature": {
    "value": "dfs_labeled_edges(G, source=None, depth_limit=None)"
  }
}