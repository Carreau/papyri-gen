{
  "_content": {
    "Attributes": {
      "children": [],
      "title": null
    },
    "Extended Summary": {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Yield the edges of G in a breadth-first-search order continuing until all edges are generated."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": null
    },
    "Methods": {
      "children": [],
      "title": null
    },
    "Notes": {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "The goal of this function is to visit edges. It differs from the more familiar breadth-first-search of nodes, as provided by "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "networkx.algorithms.traversal.breadth_first_search.bfs_edges"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", in that it does not stop once every node has been visited. In a directed graph with edges [(0, 1), (1, 2), (2, 1)], the edge (2, 1) would not be visited if not for the functionality provided by this function."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "The naming of this function is very similar to bfs_edges. The difference is that 'edge_bfs' yields edges even if they extend back to an already explored node while 'bfs_edges' yields the edges of the tree that results from a breadth-first-search (BFS) so no edges are reported if they extend to already explored nodes. That means 'edge_bfs' reports all edges while 'bfs_edges' only report those traversed by a node-based BFS. Yet another description is that 'bfs_edges' reports the edges traversed during BFS while 'edge_bfs' reports all edges in the order they are explored."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": null
    },
    "Other Parameters": {
      "children": [],
      "title": null
    },
    "Parameters": {
      "children": [
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "A directed/undirected graph/multigraph."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "G",
            "type_": "graph"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "The node from which the traversal begins. If None, then a source is chosen arbitrarily and repeatedly until all edges from each node in the graph are searched."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "source",
            "type_": "node, list of nodes"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "For directed graphs and directed multigraphs, edge traversals need not respect the original orientation of the edges. When set to 'reverse' every edge is traversed in the reverse direction. When set to 'ignore', every edge is treated as undirected. When set to 'original', every edge is treated as directed. In all three cases, the yielded edge tuples add a last entry to indicate the direction in which that edge was traversed. If orientation is None, the yielded edge has no direction indicated. The direction is respected, but not reported."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "orientation",
            "type_": "None | 'original' | 'reverse' | 'ignore' (default: None)"
          },
          "type": "Param"
        }
      ],
      "title": null
    },
    "Raises": {
      "children": [],
      "title": null
    },
    "Receives": {
      "children": [],
      "title": null
    },
    "Returns": {
      "children": [],
      "title": null
    },
    "Summary": {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "A directed, breadth-first-search of edges in "
                },
                "type": "Words"
              },
              {
                "data": {
                  "exists": true,
                  "kind": "local",
                  "reference": {
                    "kind": "local",
                    "module": null,
                    "path": "G",
                    "version": null
                  },
                  "value": "G"
                },
                "type": "Link"
              },
              {
                "data": {
                  "value": ", beginning at "
                },
                "type": "Words"
              },
              {
                "data": {
                  "exists": true,
                  "kind": "local",
                  "reference": {
                    "kind": "local",
                    "module": null,
                    "path": "source",
                    "version": null
                  },
                  "value": "source"
                },
                "type": "Link"
              },
              {
                "data": {
                  "value": "."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": null
    },
    "Warnings": {
      "children": [],
      "title": null
    },
    "Warns": {
      "children": [],
      "title": null
    },
    "Yields": {
      "children": [
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "A directed edge indicating the path taken by the breadth-first-search. For graphs, "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "local",
                        "reference": {
                          "kind": "local",
                          "module": null,
                          "path": "edge",
                          "version": null
                        },
                        "value": "edge"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": " is of the form "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "domain": null,
                        "role": null,
                        "value": "(u, v)"
                      },
                      "type": "Directive"
                    },
                    {
                      "data": {
                        "value": " where "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "domain": null,
                        "role": null,
                        "value": "u"
                      },
                      "type": "Directive"
                    },
                    {
                      "data": {
                        "value": " and "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "domain": null,
                        "role": null,
                        "value": "v"
                      },
                      "type": "Directive"
                    },
                    {
                      "data": {
                        "value": " are the tail and head of the edge as determined by the traversal. For multigraphs, "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "local",
                        "reference": {
                          "kind": "local",
                          "module": null,
                          "path": "edge",
                          "version": null
                        },
                        "value": "edge"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": " is of the form "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "domain": null,
                        "role": null,
                        "value": "(u, v, key)"
                      },
                      "type": "Directive"
                    },
                    {
                      "data": {
                        "value": ", where "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "domain": null,
                        "role": null,
                        "value": "key"
                      },
                      "type": "Directive"
                    },
                    {
                      "data": {
                        "value": " is the key of the edge. When the graph is directed, then "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "domain": null,
                        "role": null,
                        "value": "u"
                      },
                      "type": "Directive"
                    },
                    {
                      "data": {
                        "value": " and "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "domain": null,
                        "role": null,
                        "value": "v"
                      },
                      "type": "Directive"
                    },
                    {
                      "data": {
                        "value": " are always in the order of the actual directed edge. If orientation is not None then the edge tuple is extended to include the direction of traversal ('forward' or 'reverse') on that edge."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "edge",
            "type_": "directed edge"
          },
          "type": "Param"
        }
      ],
      "title": null
    }
  },
  "aliases": [
    "networkx.edge_bfs"
  ],
  "arbitrary": [],
  "example_section_data": {
    "children": [
      {
        "data": {
          "ce_status": "execed",
          "entries": [
            [
              "nodes",
              "builtins.list",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "0",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "1",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "2",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "3",
              "",
              "mi"
            ],
            [
              "]",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "edges",
              "builtins.list",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "0",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "1",
              "",
              "mi"
            ],
            [
              ")",
              "",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "1",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "0",
              "",
              "mi"
            ],
            [
              ")",
              "",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "1",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "0",
              "",
              "mi"
            ],
            [
              ")",
              "",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "2",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "0",
              "",
              "mi"
            ],
            [
              ")",
              "",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "2",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "1",
              "",
              "mi"
            ],
            [
              ")",
              "",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "3",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "1",
              "",
              "mi"
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "]",
              "",
              ""
            ]
          ],
          "out": ""
        },
        "type": "Code"
      },
      {
        "data": {
          "ce_status": "execed",
          "entries": [
            [
              "list",
              "builtins.list",
              "nb"
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "nx",
              "networkx",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "edge_bfs",
              "networkx.algorithms.traversal.edgebfs.edge_bfs",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "nx",
              "networkx",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "Graph",
              "networkx.classes.graph.Graph",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "edges",
              "builtins.list",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "nodes",
              "builtins.list",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": "[(0, 1), (0, 2), (1, 2), (1, 3)]"
        },
        "type": "Code"
      },
      {
        "data": {
          "ce_status": "execed",
          "entries": [
            [
              "list",
              "builtins.list",
              "nb"
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "nx",
              "networkx",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "edge_bfs",
              "networkx.algorithms.traversal.edgebfs.edge_bfs",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "nx",
              "networkx",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "DiGraph",
              "networkx.classes.digraph.DiGraph",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "edges",
              "builtins.list",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "nodes",
              "builtins.list",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": "[(0, 1), (1, 0), (2, 0), (2, 1), (3, 1)]"
        },
        "type": "Code"
      },
      {
        "data": {
          "ce_status": "execed",
          "entries": [
            [
              "list",
              "builtins.list",
              "nb"
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "nx",
              "networkx",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "edge_bfs",
              "networkx.algorithms.traversal.edgebfs.edge_bfs",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "nx",
              "networkx",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "MultiGraph",
              "networkx.classes.multigraph.MultiGraph",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "edges",
              "builtins.list",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "nodes",
              "builtins.list",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": "[(0, 1, 0), (0, 1, 1), (0, 1, 2), (0, 2, 0), (1, 2, 0), (1, 3, 0)]"
        },
        "type": "Code"
      },
      {
        "data": {
          "ce_status": "execed",
          "entries": [
            [
              "list",
              "builtins.list",
              "nb"
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "nx",
              "networkx",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "edge_bfs",
              "networkx.algorithms.traversal.edgebfs.edge_bfs",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "nx",
              "networkx",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "MultiDiGraph",
              "networkx.classes.multidigraph.MultiDiGraph",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "edges",
              "builtins.list",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "nodes",
              "builtins.list",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": "[(0, 1, 0), (1, 0, 0), (1, 0, 1), (2, 0, 0), (2, 1, 0), (3, 1, 0)]"
        },
        "type": "Code"
      },
      {
        "data": {
          "ce_status": "execed",
          "entries": [
            [
              "list",
              "builtins.list",
              "nb"
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "nx",
              "networkx",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "edge_bfs",
              "networkx.algorithms.traversal.edgebfs.edge_bfs",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "nx",
              "networkx",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "DiGraph",
              "networkx.classes.digraph.DiGraph",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "edges",
              "builtins.list",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "nodes",
              "builtins.list",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "orientation",
              null,
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              "ignore",
              null,
              "s2"
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              ")",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": "[(0, 1, 'forward'), (1, 0, 'reverse'), (2, 0, 'reverse'), (2, 1, 'reverse'), (3, 1, 'reverse')]"
        },
        "type": "Code"
      },
      {
        "data": {
          "ce_status": "execed",
          "entries": [
            [
              "list",
              "builtins.list",
              "nb"
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "nx",
              "networkx",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "edge_bfs",
              "networkx.algorithms.traversal.edgebfs.edge_bfs",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "nx",
              "networkx",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "MultiDiGraph",
              "networkx.classes.multidigraph.MultiDiGraph",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "edges",
              "builtins.list",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "nodes",
              "builtins.list",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "orientation",
              null,
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              "ignore",
              null,
              "s2"
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              ")",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": "[(0, 1, 0, 'forward'), (1, 0, 0, 'reverse'), (1, 0, 1, 'reverse'), (2, 0, 0, 'reverse'), (2, 1, 0, 'reverse'), (3, 1, 0, 'reverse')]"
        },
        "type": "Code"
      }
    ],
    "title": null
  },
  "item_file": "networkx/algorithms/traversal/edgebfs.py",
  "item_line": 18,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Yields",
    "Examples",
    "Notes",
    "See Also"
  ],
  "references": null,
  "refs": [
    "bfs_edges",
    "bfs_tree",
    "builtins.list",
    "edge_dfs",
    "networkx",
    "networkx.algorithms.traversal.edgebfs.edge_bfs",
    "networkx.classes.digraph.DiGraph",
    "networkx.classes.graph.Graph",
    "networkx.classes.multidigraph.MultiDiGraph",
    "networkx.classes.multigraph.MultiGraph"
  ],
  "see_also": [
    {
      "descriptions": [],
      "name": {
        "exists": true,
        "name": "bfs_edges",
        "ref": "networkx.algorithms.traversal.breadth_first_search.bfs_edges"
      },
      "type": null
    },
    {
      "descriptions": [],
      "name": {
        "exists": true,
        "name": "bfs_tree",
        "ref": "networkx.algorithms.traversal.breadth_first_search.bfs_tree"
      },
      "type": null
    },
    {
      "descriptions": [],
      "name": {
        "exists": true,
        "name": "edge_dfs",
        "ref": "networkx.algorithms.traversal.edgedfs.edge_dfs"
      },
      "type": null
    }
  ],
  "signature": {
    "value": "edge_bfs(G, source=None, orientation=None)"
  }
}