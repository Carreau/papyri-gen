{
  "_content": {
    "Attributes": {
      "children": [],
      "title": null
    },
    "Extended Summary": {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "The nested tuple representation of a tree is defined recursively. The tree with one node and no edges is represented by the empty tuple, "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "()"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ". A tree with "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "k"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " subtrees is represented by a tuple of length "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "k"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " in which each element is the nested tuple representation of a subtree."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": null
    },
    "Methods": {
      "children": [],
      "title": null
    },
    "Notes": {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "This function is "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "not"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": " the inverse of "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "from_nested_tuple"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": "; the only guarantee is that the rooted trees are isomorphic."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": null
    },
    "Other Parameters": {
      "children": [],
      "title": null
    },
    "Parameters": {
      "children": [
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "An undirected graph object representing a tree."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "T",
            "type_": "NetworkX graph"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "The node in "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "T"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " to interpret as the root of the tree."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "root",
            "type_": "node"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "If "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "True"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": ", each tuple is sorted so that the function returns a canonical form for rooted trees. This means \"lighter\" subtrees will appear as nested tuples before \"heavier\" subtrees. In this way, each isomorphic rooted tree has the same nested tuple representation."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "canonical_form",
            "type_": "bool"
          },
          "type": "Param"
        }
      ],
      "title": null
    },
    "Raises": {
      "children": [],
      "title": null
    },
    "Receives": {
      "children": [],
      "title": null
    },
    "Returns": {
      "children": [
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "A nested tuple representation of the tree."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "",
            "type_": "tuple"
          },
          "type": "Param"
        }
      ],
      "title": null
    },
    "Summary": {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Returns a nested tuple representation of the given tree."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": null
    },
    "Warnings": {
      "children": [],
      "title": null
    },
    "Warns": {
      "children": [],
      "title": null
    },
    "Yields": {
      "children": [],
      "title": null
    }
  },
  "aliases": [
    "networkx.to_nested_tuple"
  ],
  "arbitrary": [],
  "example_section_data": {
    "children": [
      {
        "data": {
          "value": [
            ">>> T = nx.Graph()",
            ">>> T.add_edges_from([(0, 1), (0, 2), (0, 3)])",
            ">>> T.add_edges_from([(1, 4), (1, 5)])",
            ">>> T.add_edges_from([(3, 6), (3, 7)])",
            ">>> root = 0",
            ">>> nx.to_nested_tuple(T, root)",
            "(((), ()), (), ((), ()))"
          ]
        },
        "type": "BlockQuote"
      },
      {
        "data": {
          "value": [
            ">>> nx.to_nested_tuple(T, root, canonical_form=True)",
            "((), ((), ()), ((), ()))"
          ]
        },
        "type": "BlockQuote"
      },
      {
        "data": {
          "value": [
            ">>> T = nx.path_graph(4)",
            ">>> root = 0",
            ">>> nx.to_nested_tuple(T, root)",
            "((((),),),)"
          ]
        },
        "type": "BlockQuote"
      }
    ],
    "title": null
  },
  "item_file": "networkx/algorithms/tree/coding.py",
  "item_line": 34,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns",
    "Notes",
    "See Also",
    "Examples"
  ],
  "references": null,
  "refs": [
    "from_nested_tuple",
    "to_prufer_sequence"
  ],
  "see_also": [
    {
      "descriptions": [],
      "name": {
        "exists": true,
        "name": "from_nested_tuple",
        "ref": "networkx.algorithms.tree.coding.from_nested_tuple"
      },
      "type": null
    },
    {
      "descriptions": [],
      "name": {
        "exists": true,
        "name": "to_prufer_sequence",
        "ref": "networkx.algorithms.tree.coding.to_prufer_sequence"
      },
      "type": null
    }
  ],
  "signature": {
    "value": "to_nested_tuple(T, root, canonical_form=False)"
  }
}