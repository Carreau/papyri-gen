{
  "_content": {
    "Attributes": {
      "children": [],
      "title": null
    },
    "Extended Summary": {
      "children": [],
      "title": null
    },
    "Methods": {
      "children": [],
      "title": null
    },
    "Notes": {
      "children": [],
      "title": null
    },
    "Other Parameters": {
      "children": [],
      "title": null
    },
    "Parameters": {
      "children": [
        {
          "data": {
            "children": [
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "The graph holding the tree of interest."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "G",
                "type_": "NetworkX Graph"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Find the minimum (True) or maximum (False) spanning tree."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "minimum",
                "type_": "bool (default: True)"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "The name of the edge attribute holding the edge weights."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "weight",
                "type_": "string (default: 'weight')"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "If "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "exists": true,
                            "kind": "local",
                            "reference": {
                              "kind": "local",
                              "module": null,
                              "path": "G",
                              "version": null
                            },
                            "value": "G"
                          },
                          "type": "Link"
                        },
                        {
                          "data": {
                            "value": " is a multigraph, "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "exists": true,
                            "kind": "module",
                            "reference": {
                              "kind": "module",
                              "module": "networkx",
                              "path": "networkx.readwrite.graphml.GraphMLReader.find_graphml_keys",
                              "version": "2.7.2rc1.dev0"
                            },
                            "value": "keys"
                          },
                          "type": "Link"
                        },
                        {
                          "data": {
                            "value": " controls whether edge keys ar yielded. Otherwise "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "exists": true,
                            "kind": "module",
                            "reference": {
                              "kind": "module",
                              "module": "networkx",
                              "path": "networkx.readwrite.graphml.GraphMLReader.find_graphml_keys",
                              "version": "2.7.2rc1.dev0"
                            },
                            "value": "keys"
                          },
                          "type": "Link"
                        },
                        {
                          "data": {
                            "value": " is ignored."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "keys",
                "type_": "bool (default: True)"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Flag for whether to yield edge attribute dicts. If True, yield edges "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "domain": null,
                            "role": null,
                            "value": "(u, v, d)"
                          },
                          "type": "Directive"
                        },
                        {
                          "data": {
                            "value": ", where "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "exists": true,
                            "kind": "local",
                            "reference": {
                              "kind": "local",
                              "module": null,
                              "path": "d",
                              "version": null
                            },
                            "value": "d"
                          },
                          "type": "Link"
                        },
                        {
                          "data": {
                            "value": " is the attribute dict. If False, yield edges "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "domain": null,
                            "role": null,
                            "value": "(u, v)"
                          },
                          "type": "Directive"
                        },
                        {
                          "data": {
                            "value": "."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "data",
                "type_": "bool (default: True)"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "If a NaN is found as an edge weight normally an exception is raised. If "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "domain": null,
                            "role": null,
                            "value": "ignore_nan is True"
                          },
                          "type": "Directive"
                        },
                        {
                          "data": {
                            "value": " then that edge is ignored instead."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "ignore_nan",
                "type_": "bool (default: False)"
              }
            ]
          },
          "type": "Parameters"
        }
      ],
      "title": null
    },
    "Raises": {
      "children": [],
      "title": null
    },
    "Receives": {
      "children": [],
      "title": null
    },
    "Returns": {
      "children": [],
      "title": null
    },
    "Summary": {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Iterate over edges of Prim's algorithm min/max spanning tree."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": null
    },
    "Warnings": {
      "children": [],
      "title": null
    },
    "Warns": {
      "children": [],
      "title": null
    },
    "Yields": {
      "children": [],
      "title": null
    }
  },
  "aliases": [
    "networkx.tree.mst.prim_mst_edges"
  ],
  "arbitrary": [],
  "example_section_data": {
    "children": [],
    "title": null
  },
  "item_file": "networkx/algorithms/tree/mst.py",
  "item_line": 249,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Parameters"
  ],
  "references": null,
  "refs": [],
  "see_also": [],
  "signature": {
    "value": "prim_mst_edges(G, minimum, weight='weight', keys=True, data=True, ignore_nan=False)"
  }
}