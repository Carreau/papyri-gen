{
  "_content": {
    "Attributes": {
      "children": [],
      "title": null
    },
    "Extended Summary": {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "module",
                    "module": "networkx",
                    "path": "networkx.classes.graphviews.subgraph_view",
                    "version": "2.7.2rc1.dev0"
                  },
                  "value": "subgraph_view"
                },
                "type": "Link"
              },
              {
                "data": {
                  "value": " provides a read-only view of the input graph that excludes nodes and edges based on the outcome of two filter functions "
                },
                "type": "Words"
              },
              {
                "data": {
                  "exists": true,
                  "kind": "local",
                  "reference": {
                    "kind": "local",
                    "module": null,
                    "path": "filter_node",
                    "version": null
                  },
                  "value": "filter_node"
                },
                "type": "Link"
              },
              {
                "data": {
                  "value": " and "
                },
                "type": "Words"
              },
              {
                "data": {
                  "exists": true,
                  "kind": "local",
                  "reference": {
                    "kind": "local",
                    "module": null,
                    "path": "filter_edge",
                    "version": null
                  },
                  "value": "filter_edge"
                },
                "type": "Link"
              },
              {
                "data": {
                  "value": "."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "The "
                },
                "type": "Words"
              },
              {
                "data": {
                  "exists": true,
                  "kind": "local",
                  "reference": {
                    "kind": "local",
                    "module": null,
                    "path": "filter_node",
                    "version": null
                  },
                  "value": "filter_node"
                },
                "type": "Link"
              },
              {
                "data": {
                  "value": " function takes one argument --- the node --- and returns "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "True"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " if the node should be included in the subgraph, and "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "False"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " if it should not be included."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "The "
                },
                "type": "Words"
              },
              {
                "data": {
                  "exists": true,
                  "kind": "local",
                  "reference": {
                    "kind": "local",
                    "module": null,
                    "path": "filter_edge",
                    "version": null
                  },
                  "value": "filter_edge"
                },
                "type": "Link"
              },
              {
                "data": {
                  "value": " function takes two (or three arguments if "
                },
                "type": "Words"
              },
              {
                "data": {
                  "exists": true,
                  "kind": "local",
                  "reference": {
                    "kind": "local",
                    "module": null,
                    "path": "G",
                    "version": null
                  },
                  "value": "G"
                },
                "type": "Link"
              },
              {
                "data": {
                  "value": " is a multi-graph) --- the nodes describing an edge, plus the edge-key if parallel edges are possible --- and returns "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "True"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " if the edge should be included in the subgraph, and "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "False"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " if it should not be included."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Both node and edge filter functions are called on graph elements as they are queried, meaning there is no up-front cost to creating the view."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": null
    },
    "Methods": {
      "children": [],
      "title": null
    },
    "Notes": {
      "children": [],
      "title": null
    },
    "Other Parameters": {
      "children": [],
      "title": null
    },
    "Parameters": {
      "children": [
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "A directed/undirected graph/multigraph"
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "G",
            "type_": "networkx.Graph"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "A function taking a node as input, which returns "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "True"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " if the node should appear in the view."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "filter_node",
            "type_": "callable, optional"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "A function taking as input the two nodes describing an edge (plus the edge-key if "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "local",
                        "reference": {
                          "kind": "local",
                          "module": null,
                          "path": "G",
                          "version": null
                        },
                        "value": "G"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": " is a multi-graph), which returns "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "True"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " if the edge should appear in the view."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "filter_edge",
            "type_": "callable, optional"
          },
          "type": "Param"
        }
      ],
      "title": null
    },
    "Raises": {
      "children": [],
      "title": null
    },
    "Receives": {
      "children": [],
      "title": null
    },
    "Returns": {
      "children": [
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "A read-only graph view of the input graph."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "graph",
            "type_": "networkx.Graph"
          },
          "type": "Param"
        }
      ],
      "title": null
    },
    "Summary": {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "View of "
                },
                "type": "Words"
              },
              {
                "data": {
                  "exists": true,
                  "kind": "local",
                  "reference": {
                    "kind": "local",
                    "module": null,
                    "path": "G",
                    "version": null
                  },
                  "value": "G"
                },
                "type": "Link"
              },
              {
                "data": {
                  "value": " applying a filter on nodes and edges."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": null
    },
    "Warnings": {
      "children": [],
      "title": null
    },
    "Warns": {
      "children": [],
      "title": null
    },
    "Yields": {
      "children": [],
      "title": null
    }
  },
  "aliases": [
    "networkx.subgraph_view"
  ],
  "arbitrary": [],
  "example_section_data": {
    "children": [
      {
        "data": {
          "ce_status": "execed",
          "entries": [
            [
              "G",
              "typing.Generator",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "nx",
              "networkx",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "path_graph",
              "networkx.generators.classic.path_graph",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "6",
              "",
              "mi"
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": ""
        },
        "type": "Code"
      },
      {
        "data": {
          "inline": [
            {
              "data": {
                "value": "Filter functions operate on the node, and return "
              },
              "type": "Words"
            },
            {
              "data": {
                "value": [
                  "True"
                ]
              },
              "type": "Verbatim"
            },
            {
              "data": {
                "value": " if the node should appear in the view:"
              },
              "type": "Words"
            }
          ],
          "inner": []
        },
        "type": "Paragraph"
      },
      {
        "data": {
          "ce_status": "execed",
          "entries": [
            [
              "def",
              null,
              "k"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "filter_node",
              "__main__.filter_node",
              "nf"
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "n1",
              null,
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              ":",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "    ",
              "",
              ""
            ],
            [
              "return",
              null,
              "k"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "n1",
              null,
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "!=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "5",
              "",
              "mi"
            ]
          ],
          "out": "..."
        },
        "type": "Code"
      },
      {
        "data": {
          "ce_status": "execed",
          "entries": [
            [
              "view",
              "networkx.classes.graph.Graph",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "nx",
              "networkx",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "subgraph_view",
              "networkx.classes.graphviews.subgraph_view",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "G",
              "typing.Generator",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "filter_node",
              "__main__.filter_node",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "filter_node",
              "__main__.filter_node",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "view",
              "networkx.classes.graph.Graph",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "nodes",
              "networkx.classes.reportviews.NodeView",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": "NodeView((0, 1, 2, 3, 4))"
        },
        "type": "Code"
      },
      {
        "data": {
          "inline": [
            {
              "data": {
                "value": "We can use a closure pattern to filter graph elements based on additional data --- for example, filtering on edge data attached to the graph:"
              },
              "type": "Words"
            }
          ],
          "inner": []
        },
        "type": "Paragraph"
      },
      {
        "data": {
          "ce_status": "execed",
          "entries": [
            [
              "G",
              "typing.Generator",
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "3",
              "",
              "mi"
            ],
            [
              "]",
              "",
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "4",
              "",
              "mi"
            ],
            [
              "]",
              "",
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              "cross_me",
              null,
              "s2"
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              "]",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "False",
              null,
              "kc"
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "def",
              null,
              "k"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "filter_edge",
              "__main__.filter_edge",
              "nf"
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "n1",
              null,
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "n2",
              null,
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              ":",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "    ",
              "",
              ""
            ],
            [
              "return",
              null,
              "k"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "G",
              "typing.Generator",
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "n1",
              null,
              ""
            ],
            [
              "]",
              "",
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "n2",
              null,
              ""
            ],
            [
              "]",
              "",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "get",
              null,
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              "cross_me",
              null,
              "s2"
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "True",
              null,
              "kc"
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": "..."
        },
        "type": "Code"
      },
      {
        "data": {
          "ce_status": "execed",
          "entries": [
            [
              "view",
              "networkx.classes.graph.Graph",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "nx",
              "networkx",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "subgraph_view",
              "networkx.classes.graphviews.subgraph_view",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "G",
              "typing.Generator",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "filter_edge",
              "__main__.filter_edge",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "filter_edge",
              "__main__.filter_edge",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "view",
              "networkx.classes.graph.Graph",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "edges",
              "networkx.classes.reportviews.EdgeView",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": "EdgeView([(0, 1), (1, 2), (2, 3), (4, 5)])"
        },
        "type": "Code"
      },
      {
        "data": {
          "ce_status": "execed",
          "entries": [
            [
              "view",
              "networkx.classes.graph.Graph",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "nx",
              "networkx",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "subgraph_view",
              "networkx.classes.graphviews.subgraph_view",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "G",
              "typing.Generator",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "filter_node",
              "__main__.filter_node",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "filter_node",
              "__main__.filter_node",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "filter_edge",
              "__main__.filter_edge",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "filter_edge",
              "__main__.filter_edge",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "view",
              "networkx.classes.graph.Graph",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "nodes",
              "networkx.classes.reportviews.NodeView",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": "NodeView((0, 1, 2, 3, 4))"
        },
        "type": "Code"
      },
      {
        "data": {
          "ce_status": "execed",
          "entries": [
            [
              "view",
              "networkx.classes.graph.Graph",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "edges",
              "networkx.classes.reportviews.EdgeView",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": "EdgeView([(0, 1), (1, 2), (2, 3)])"
        },
        "type": "Code"
      }
    ],
    "title": null
  },
  "item_file": "networkx/classes/graphviews.py",
  "item_line": 75,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns",
    "Examples"
  ],
  "references": null,
  "refs": [
    "__main__.filter_edge",
    "__main__.filter_node",
    "networkx",
    "networkx.classes.graph.Graph",
    "networkx.classes.graphviews.subgraph_view",
    "networkx.classes.reportviews.EdgeView",
    "networkx.classes.reportviews.NodeView",
    "networkx.generators.classic.path_graph",
    "typing.Generator"
  ],
  "see_also": [],
  "signature": {
    "value": "subgraph_view(G, filter_node=<function no_filter at 0x0000000>, filter_edge=<function no_filter at 0x0000000>)"
  }
}