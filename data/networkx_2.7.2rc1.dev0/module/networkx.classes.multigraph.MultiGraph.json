{
  "_content": {
    "Attributes": {
      "children": [],
      "title": null
    },
    "Extended Summary": {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Multiedges are multiple edges between two nodes.  Each edge can hold optional data or attributes."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "A MultiGraph holds undirected edges.  Self loops are allowed."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Nodes can be arbitrary (hashable) Python objects with optional key/value attributes. By convention "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "None"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " is not used as a node."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Edges are represented as links between nodes with optional key/value attributes, in a MultiGraph each edge has a key to distinguish between multiple edges that have the same source and destination nodes."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": null
    },
    "Methods": {
      "children": [],
      "title": null
    },
    "Notes": {
      "children": [],
      "title": null
    },
    "Other Parameters": {
      "children": [],
      "title": null
    },
    "Parameters": {
      "children": [
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Data to initialize graph. If None (default) an empty graph is created.  The data can be any format that is supported by the to_networkx_graph() function, currently including edge list, dict of dicts, dict of lists, NetworkX graph, 2D NumPy array, SciPy sparse matrix, or PyGraphviz graph."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "incoming_graph_data",
            "type_": "input graph (optional, default: None)"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Note: Only used when "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "local",
                        "reference": {
                          "kind": "local",
                          "module": null,
                          "path": "incoming_graph_data",
                          "version": null
                        },
                        "value": "incoming_graph_data"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": " is a dict. If True, "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "local",
                        "reference": {
                          "kind": "local",
                          "module": null,
                          "path": "incoming_graph_data",
                          "version": null
                        },
                        "value": "incoming_graph_data"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": " is assumed to be a dict-of-dict-of-dict-of-dict structure keyed by node to neighbor to edge keys to edge data for multi-edges. A NetworkXError is raised if this is not the case. If False, "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "to_networkx_graph"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " is used to try to determine the dict's graph data structure as either a dict-of-dict-of-dict keyed by node to neighbor to edge data, or a dict-of-iterable keyed by node to neighbors. If None, the treatment for True is tried, but if it fails, the treatment for False is tried."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "multigraph_input",
            "type_": "bool or None (default None)"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Attributes to add to graph as key=value pairs."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "attr",
            "type_": "keyword arguments, optional (default= no attributes)"
          },
          "type": "Param"
        }
      ],
      "title": null
    },
    "Raises": {
      "children": [],
      "title": null
    },
    "Receives": {
      "children": [],
      "title": null
    },
    "Returns": {
      "children": [],
      "title": null
    },
    "Summary": {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "An undirected graph class that can store multiedges."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": null
    },
    "Warnings": {
      "children": [],
      "title": null
    },
    "Warns": {
      "children": [],
      "title": null
    },
    "Yields": {
      "children": [],
      "title": null
    }
  },
  "aliases": [
    "networkx.MultiGraph"
  ],
  "arbitrary": [],
  "example_section_data": {
    "children": [
      {
        "data": {
          "inline": [
            {
              "data": {
                "value": "Create an empty graph structure (a \"null graph\") with no nodes and no edges."
              },
              "type": "Words"
            }
          ],
          "inner": []
        },
        "type": "Paragraph"
      },
      {
        "data": {
          "ce_status": "execed",
          "entries": [
            [
              "G",
              "networkx.classes.multigraph.MultiGraph",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "nx",
              "networkx",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "MultiGraph",
              "networkx.classes.multigraph.MultiGraph",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": ""
        },
        "type": "Code"
      },
      {
        "data": {
          "inline": [
            {
              "data": {
                "value": "G can be grown in several ways."
              },
              "type": "Words"
            }
          ],
          "inner": []
        },
        "type": "Paragraph"
      },
      {
        "data": {
          "inline": [
            {
              "data": {
                "content": {
                  "value": "Nodes:"
                }
              },
              "type": "Strong"
            }
          ],
          "inner": []
        },
        "type": "Paragraph"
      },
      {
        "data": {
          "inline": [
            {
              "data": {
                "value": "Add one node at a time:"
              },
              "type": "Words"
            }
          ],
          "inner": []
        },
        "type": "Paragraph"
      },
      {
        "data": {
          "ce_status": "execed",
          "entries": [
            [
              "G",
              "networkx.classes.multigraph.MultiGraph",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "add_node",
              "networkx.classes.graph.Graph.add_node",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "1",
              "",
              "mi"
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": ""
        },
        "type": "Code"
      },
      {
        "data": {
          "inline": [
            {
              "data": {
                "value": "Add the nodes from any container (a list, dict, set or even the lines from a file or the nodes from another graph)."
              },
              "type": "Words"
            }
          ],
          "inner": []
        },
        "type": "Paragraph"
      },
      {
        "data": {
          "ce_status": "execed",
          "entries": [
            [
              "G",
              "networkx.classes.multigraph.MultiGraph",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "add_nodes_from",
              "networkx.classes.graph.Graph.add_nodes_from",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "2",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "3",
              "",
              "mi"
            ],
            [
              "]",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "G",
              "networkx.classes.multigraph.MultiGraph",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "add_nodes_from",
              "networkx.classes.graph.Graph.add_nodes_from",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "range",
              "builtins.range",
              "nb"
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "100",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "110",
              "",
              "mi"
            ],
            [
              ")",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "H",
              "typing.Generator",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "nx",
              "networkx",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "path_graph",
              "networkx.generators.classic.path_graph",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "10",
              "",
              "mi"
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "G",
              "networkx.classes.multigraph.MultiGraph",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "add_nodes_from",
              "networkx.classes.graph.Graph.add_nodes_from",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "H",
              "typing.Generator",
              ""
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": ""
        },
        "type": "Code"
      },
      {
        "data": {
          "inline": [
            {
              "data": {
                "value": "In addition to strings and integers any hashable Python object (except None) can represent a node, e.g. a customized node object, or even another Graph."
              },
              "type": "Words"
            }
          ],
          "inner": []
        },
        "type": "Paragraph"
      },
      {
        "data": {
          "ce_status": "execed",
          "entries": [
            [
              "G",
              "networkx.classes.multigraph.MultiGraph",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "add_node",
              "networkx.classes.graph.Graph.add_node",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "H",
              "typing.Generator",
              ""
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": ""
        },
        "type": "Code"
      },
      {
        "data": {
          "inline": [
            {
              "data": {
                "content": {
                  "value": "Edges:"
                }
              },
              "type": "Strong"
            }
          ],
          "inner": []
        },
        "type": "Paragraph"
      },
      {
        "data": {
          "inline": [
            {
              "data": {
                "value": "G can also be grown by adding edges."
              },
              "type": "Words"
            }
          ],
          "inner": []
        },
        "type": "Paragraph"
      },
      {
        "data": {
          "inline": [
            {
              "data": {
                "value": "Add one edge,"
              },
              "type": "Words"
            }
          ],
          "inner": []
        },
        "type": "Paragraph"
      },
      {
        "data": {
          "ce_status": "execed",
          "entries": [
            [
              "key",
              "builtins.int",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "G",
              "networkx.classes.multigraph.MultiGraph",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "add_edge",
              "networkx.classes.multigraph.MultiGraph.add_edge",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "1",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "2",
              "",
              "mi"
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": ""
        },
        "type": "Code"
      },
      {
        "data": {
          "inline": [
            {
              "data": {
                "value": "a list of edges,"
              },
              "type": "Words"
            }
          ],
          "inner": []
        },
        "type": "Paragraph"
      },
      {
        "data": {
          "ce_status": "execed",
          "entries": [
            [
              "keys",
              "builtins.list",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "G",
              "networkx.classes.multigraph.MultiGraph",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "add_edges_from",
              "networkx.classes.multigraph.MultiGraph.add_edges_from",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "1",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "2",
              "",
              "mi"
            ],
            [
              ")",
              "",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "1",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "3",
              "",
              "mi"
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "]",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": ""
        },
        "type": "Code"
      },
      {
        "data": {
          "inline": [
            {
              "data": {
                "value": "or a collection of edges,"
              },
              "type": "Words"
            }
          ],
          "inner": []
        },
        "type": "Paragraph"
      },
      {
        "data": {
          "ce_status": "execed",
          "entries": [
            [
              "keys",
              "builtins.list",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "G",
              "networkx.classes.multigraph.MultiGraph",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "add_edges_from",
              "networkx.classes.multigraph.MultiGraph.add_edges_from",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "H",
              "typing.Generator",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "edges",
              null,
              ""
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": ""
        },
        "type": "Code"
      },
      {
        "data": {
          "inline": [
            {
              "data": {
                "value": "If some edges connect nodes not yet in the graph, the nodes are added automatically.  If an edge already exists, an additional edge is created and stored using a key to identify the edge. By default the key is the lowest unused integer."
              },
              "type": "Words"
            }
          ],
          "inner": []
        },
        "type": "Paragraph"
      },
      {
        "data": {
          "ce_status": "execed",
          "entries": [
            [
              "keys",
              "builtins.list",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "G",
              "networkx.classes.multigraph.MultiGraph",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "add_edges_from",
              "networkx.classes.multigraph.MultiGraph.add_edges_from",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "4",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "5",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "{",
              "",
              ""
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              "route",
              null,
              "s2"
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              ":",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "28",
              "",
              "mi"
            ],
            [
              "}",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "4",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "5",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "{",
              "",
              ""
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              "route",
              null,
              "s2"
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              ":",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "37",
              "",
              "mi"
            ],
            [
              "}",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "]",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "G",
              "networkx.classes.multigraph.MultiGraph",
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "4",
              "",
              "mi"
            ],
            [
              "]",
              "",
              ""
            ]
          ],
          "out": "AdjacencyView({3: {0: {}}, 5: {0: {}, 1: {'route': 28}, 2: {'route': 37}}})"
        },
        "type": "Code"
      },
      {
        "data": {
          "inline": [
            {
              "data": {
                "content": {
                  "value": "Attributes:"
                }
              },
              "type": "Strong"
            }
          ],
          "inner": []
        },
        "type": "Paragraph"
      },
      {
        "data": {
          "inline": [
            {
              "data": {
                "value": "Each graph, node, and edge can hold key/value attribute pairs in an associated attribute dictionary (the keys must be hashable). By default these are empty, but can be added or changed using add_edge, add_node or direct manipulation of the attribute dictionaries named graph, node and edge respectively."
              },
              "type": "Words"
            }
          ],
          "inner": []
        },
        "type": "Paragraph"
      },
      {
        "data": {
          "ce_status": "execed",
          "entries": [
            [
              "G",
              "networkx.classes.multigraph.MultiGraph",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "nx",
              "networkx",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "MultiGraph",
              "networkx.classes.multigraph.MultiGraph",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "day",
              null,
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              "Friday",
              null,
              "s2"
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "G",
              "networkx.classes.multigraph.MultiGraph",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "graph",
              null,
              ""
            ]
          ],
          "out": "{'day': 'Friday'}"
        },
        "type": "Code"
      },
      {
        "data": {
          "inline": [
            {
              "data": {
                "value": "Add node attributes using add_node(), add_nodes_from() or G.nodes"
              },
              "type": "Words"
            }
          ],
          "inner": []
        },
        "type": "Paragraph"
      },
      {
        "data": {
          "ce_status": "execed",
          "entries": [
            [
              "G",
              "networkx.classes.multigraph.MultiGraph",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "add_node",
              "networkx.classes.graph.Graph.add_node",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "1",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "time",
              null,
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              "5pm",
              "",
              "s2"
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "G",
              "networkx.classes.multigraph.MultiGraph",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "add_nodes_from",
              "networkx.classes.graph.Graph.add_nodes_from",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "3",
              "",
              "mi"
            ],
            [
              "]",
              "",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "time",
              null,
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              "2pm",
              "",
              "s2"
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "G",
              "networkx.classes.multigraph.MultiGraph",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "nodes",
              "networkx.classes.reportviews.NodeView",
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "1",
              "",
              "mi"
            ],
            [
              "]",
              "",
              ""
            ]
          ],
          "out": "{'time': '5pm'}"
        },
        "type": "Code"
      },
      {
        "data": {
          "ce_status": "execed",
          "entries": [
            [
              "G",
              "networkx.classes.multigraph.MultiGraph",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "nodes",
              "networkx.classes.reportviews.NodeView",
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "1",
              "",
              "mi"
            ],
            [
              "]",
              "",
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              "room",
              null,
              "s2"
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              "]",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "714",
              "",
              "mi"
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "del",
              null,
              "k"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "G",
              "networkx.classes.multigraph.MultiGraph",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "nodes",
              "networkx.classes.reportviews.NodeView",
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "1",
              "",
              "mi"
            ],
            [
              "]",
              "",
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              "room",
              null,
              "s2"
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              "]",
              "",
              ""
            ],
            [
              "  ",
              "",
              ""
            ],
            [
              "# remove attribute",
              "",
              "c1"
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "list",
              "builtins.list",
              "nb"
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "G",
              "networkx.classes.multigraph.MultiGraph",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "nodes",
              "networkx.classes.reportviews.NodeView",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "data",
              null,
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "True",
              null,
              "kc"
            ],
            [
              ")",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": "[(1, {'time': '5pm'}), (3, {'time': '2pm'})]"
        },
        "type": "Code"
      },
      {
        "data": {
          "inline": [
            {
              "data": {
                "value": "Add edge attributes using add_edge(), add_edges_from(), subscript notation, or G.edges."
              },
              "type": "Words"
            }
          ],
          "inner": []
        },
        "type": "Paragraph"
      },
      {
        "data": {
          "ce_status": "execed",
          "entries": [
            [
              "key",
              "builtins.int",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "G",
              "networkx.classes.multigraph.MultiGraph",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "add_edge",
              "networkx.classes.multigraph.MultiGraph.add_edge",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "1",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "2",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "weight",
              null,
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "4.7",
              "",
              "mf"
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "keys",
              "builtins.list",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "G",
              "networkx.classes.multigraph.MultiGraph",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "add_edges_from",
              "networkx.classes.multigraph.MultiGraph.add_edges_from",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "3",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "4",
              "",
              "mi"
            ],
            [
              ")",
              "",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "4",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "5",
              "",
              "mi"
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "]",
              "",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "color",
              null,
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              "red",
              null,
              "s2"
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "keys",
              "builtins.list",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "G",
              "networkx.classes.multigraph.MultiGraph",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "add_edges_from",
              "networkx.classes.multigraph.MultiGraph.add_edges_from",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "1",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "2",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "{",
              "",
              ""
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              "color",
              null,
              "s2"
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              ":",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              "blue",
              null,
              "s2"
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              "}",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "2",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "3",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "{",
              "",
              ""
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              "weight",
              null,
              "s2"
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              ":",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "8",
              "",
              "mi"
            ],
            [
              "}",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "]",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "G",
              "networkx.classes.multigraph.MultiGraph",
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "1",
              "",
              "mi"
            ],
            [
              "]",
              "",
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "2",
              "",
              "mi"
            ],
            [
              "]",
              "",
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "0",
              "",
              "mi"
            ],
            [
              "]",
              "",
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              "weight",
              null,
              "s2"
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              "]",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "4.7",
              "",
              "mf"
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "G",
              "networkx.classes.multigraph.MultiGraph",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "edges",
              "networkx.classes.reportviews.MultiEdgeView",
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "1",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "2",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "0",
              "",
              "mi"
            ],
            [
              "]",
              "",
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              "weight",
              null,
              "s2"
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              "]",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "4",
              "",
              "mi"
            ]
          ],
          "out": ""
        },
        "type": "Code"
      },
      {
        "data": {
          "inline": [
            {
              "data": {
                "value": "Warning: we protect the graph data structure by making "
              },
              "type": "Words"
            },
            {
              "data": {
                "domain": null,
                "role": null,
                "value": "G.edges[1,\n2, 0]"
              },
              "type": "Directive"
            },
            {
              "data": {
                "value": " a read-only dict-like structure. However, you can assign to attributes in e.g. "
              },
              "type": "Words"
            },
            {
              "data": {
                "domain": null,
                "role": null,
                "value": "G.edges[1, 2, 0]"
              },
              "type": "Directive"
            },
            {
              "data": {
                "value": ". Thus, use 2 sets of brackets to add/change data attributes: "
              },
              "type": "Words"
            },
            {
              "data": {
                "domain": null,
                "role": null,
                "value": "G.edges[1, 2, 0]['weight'] = 4"
              },
              "type": "Directive"
            },
            {
              "data": {
                "value": "."
              },
              "type": "Words"
            }
          ],
          "inner": []
        },
        "type": "Paragraph"
      },
      {
        "data": {
          "inline": [
            {
              "data": {
                "content": {
                  "value": "Shortcuts:"
                }
              },
              "type": "Strong"
            }
          ],
          "inner": []
        },
        "type": "Paragraph"
      },
      {
        "data": {
          "inline": [
            {
              "data": {
                "value": "Many common graph features allow python syntax to speed reporting."
              },
              "type": "Words"
            }
          ],
          "inner": []
        },
        "type": "Paragraph"
      },
      {
        "data": {
          "ce_status": "execed",
          "entries": [
            [
              "1",
              "",
              "mi"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "in",
              null,
              "ow"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "G",
              "networkx.classes.multigraph.MultiGraph",
              ""
            ],
            [
              "  ",
              "",
              ""
            ],
            [
              "# check if node in graph",
              "",
              "c1"
            ]
          ],
          "out": "True"
        },
        "type": "Code"
      },
      {
        "data": {
          "ce_status": "execed",
          "entries": [
            [
              "[",
              "",
              ""
            ],
            [
              "n",
              null,
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "for",
              null,
              "k"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "n",
              null,
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "in",
              null,
              "ow"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "G",
              "networkx.classes.multigraph.MultiGraph",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "if",
              null,
              "k"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "n",
              null,
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "<",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "3",
              "",
              "mi"
            ],
            [
              "]",
              "",
              ""
            ],
            [
              "  ",
              "",
              ""
            ],
            [
              "# iterate through nodes",
              "",
              "c1"
            ]
          ],
          "out": "[1, 2]"
        },
        "type": "Code"
      },
      {
        "data": {
          "ce_status": "execed",
          "entries": [
            [
              "len",
              "builtins.len",
              "nb"
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "G",
              "networkx.classes.multigraph.MultiGraph",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "  ",
              "",
              ""
            ],
            [
              "# number of nodes in graph",
              "",
              "c1"
            ]
          ],
          "out": "5"
        },
        "type": "Code"
      },
      {
        "data": {
          "ce_status": "execed",
          "entries": [
            [
              "G",
              "networkx.classes.multigraph.MultiGraph",
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "1",
              "",
              "mi"
            ],
            [
              "]",
              "",
              ""
            ],
            [
              "  ",
              "",
              ""
            ],
            [
              "# adjacency dict-like view mapping neighbor -> edge key -> edge attributes",
              "",
              "c1"
            ]
          ],
          "out": "AdjacencyView({2: {0: {'weight': 4}, 1: {'color': 'blue'}}})"
        },
        "type": "Code"
      },
      {
        "data": {
          "inline": [
            {
              "data": {
                "value": "Often the best way to traverse all edges of a graph is via the neighbors. The neighbors are reported as an adjacency-dict "
              },
              "type": "Words"
            },
            {
              "data": {
                "domain": null,
                "role": null,
                "value": "G.adj"
              },
              "type": "Directive"
            },
            {
              "data": {
                "value": " or "
              },
              "type": "Words"
            },
            {
              "data": {
                "domain": null,
                "role": null,
                "value": "G.adjacency()"
              },
              "type": "Directive"
            },
            {
              "data": {
                "value": "."
              },
              "type": "Words"
            }
          ],
          "inner": []
        },
        "type": "Paragraph"
      },
      {
        "data": {
          "ce_status": "execed",
          "entries": [
            [
              "for",
              null,
              "k"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "n",
              null,
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "nbrsdict",
              null,
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "in",
              null,
              "ow"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "G",
              "networkx.classes.multigraph.MultiGraph",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "adjacency",
              "networkx.classes.graph.Graph.adjacency",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              ":",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "    ",
              "",
              ""
            ],
            [
              "for",
              null,
              "k"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "nbr",
              null,
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "keydict",
              null,
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "in",
              null,
              "ow"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "nbrsdict",
              "builtins.dict",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "items",
              "builtins.dict.items",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              ":",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "        ",
              "",
              ""
            ],
            [
              "for",
              null,
              "k"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "key",
              null,
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "eattr",
              null,
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "in",
              null,
              "ow"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "keydict",
              "builtins.dict",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "items",
              "builtins.dict.items",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              ":",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "            ",
              "",
              ""
            ],
            [
              "if",
              null,
              "k"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              "weight",
              null,
              "s2"
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "in",
              null,
              "ow"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "eattr",
              "builtins.dict",
              ""
            ],
            [
              ":",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "                ",
              "",
              ""
            ],
            [
              "# Do something useful with the edges",
              "",
              "c1"
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "                ",
              "",
              ""
            ],
            [
              "pass",
              null,
              "k"
            ]
          ],
          "out": ""
        },
        "type": "Code"
      },
      {
        "data": {
          "inline": [
            {
              "data": {
                "value": "But the edges() method is often more convenient:"
              },
              "type": "Words"
            }
          ],
          "inner": []
        },
        "type": "Paragraph"
      },
      {
        "data": {
          "ce_status": "execed",
          "entries": [
            [
              "for",
              null,
              "k"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "u",
              "builtins.NoneType",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "v",
              null,
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "keys",
              null,
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "weight",
              null,
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "in",
              null,
              "ow"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "G",
              "networkx.classes.multigraph.MultiGraph",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "edges",
              "networkx.classes.reportviews.MultiEdgeView",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "data",
              null,
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              "weight",
              null,
              "s2"
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "keys",
              "builtins.int",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "True",
              null,
              "kc"
            ],
            [
              ")",
              "",
              ""
            ],
            [
              ":",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "    ",
              "",
              ""
            ],
            [
              "if",
              null,
              "k"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "weight",
              "builtins.NoneType",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "is",
              null,
              "ow"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "not",
              null,
              "ow"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "None",
              null,
              "kc"
            ],
            [
              ":",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "        ",
              "",
              ""
            ],
            [
              "# Do something useful with the edges",
              "",
              "c1"
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "        ",
              "",
              ""
            ],
            [
              "pass",
              null,
              "k"
            ]
          ],
          "out": ""
        },
        "type": "Code"
      },
      {
        "data": {
          "inline": [
            {
              "data": {
                "content": {
                  "value": "Reporting:"
                }
              },
              "type": "Strong"
            }
          ],
          "inner": []
        },
        "type": "Paragraph"
      },
      {
        "data": {
          "inline": [
            {
              "data": {
                "value": "Simple graph information is obtained using methods and object-attributes. Reporting usually provides views instead of containers to reduce memory usage. The views update as the graph is updated similarly to dict-views. The objects "
              },
              "type": "Words"
            },
            {
              "data": {
                "exists": true,
                "kind": "module",
                "reference": {
                  "kind": "module",
                  "module": "networkx",
                  "path": "networkx.classes.function.nodes",
                  "version": "2.7.2rc1.dev0"
                },
                "value": "nodes"
              },
              "type": "Link"
            },
            {
              "data": {
                "value": ", "
              },
              "type": "Words"
            },
            {
              "data": {
                "exists": true,
                "kind": "module",
                "reference": {
                  "kind": "module",
                  "module": "networkx",
                  "path": "networkx.classes.function.edges",
                  "version": "2.7.2rc1.dev0"
                },
                "value": "edges"
              },
              "type": "Link"
            },
            {
              "data": {
                "value": " and "
              },
              "type": "Words"
            },
            {
              "data": {
                "domain": null,
                "role": null,
                "value": "adj"
              },
              "type": "Directive"
            },
            {
              "data": {
                "value": " provide access to data attributes via lookup (e.g. "
              },
              "type": "Words"
            },
            {
              "data": {
                "domain": null,
                "role": null,
                "value": "nodes[n]"
              },
              "type": "Directive"
            },
            {
              "data": {
                "value": ", "
              },
              "type": "Words"
            },
            {
              "data": {
                "domain": null,
                "role": null,
                "value": "edges[u, v, k]"
              },
              "type": "Directive"
            },
            {
              "data": {
                "value": ", "
              },
              "type": "Words"
            },
            {
              "data": {
                "domain": null,
                "role": null,
                "value": "adj[u][v]"
              },
              "type": "Directive"
            },
            {
              "data": {
                "value": ") and iteration (e.g. "
              },
              "type": "Words"
            },
            {
              "data": {
                "domain": null,
                "role": null,
                "value": "nodes.items()"
              },
              "type": "Directive"
            },
            {
              "data": {
                "value": ", "
              },
              "type": "Words"
            },
            {
              "data": {
                "domain": null,
                "role": null,
                "value": "nodes.data('color')"
              },
              "type": "Directive"
            },
            {
              "data": {
                "value": ", "
              },
              "type": "Words"
            },
            {
              "data": {
                "domain": null,
                "role": null,
                "value": "nodes.data('color', default='blue')"
              },
              "type": "Directive"
            },
            {
              "data": {
                "value": " and similarly for "
              },
              "type": "Words"
            },
            {
              "data": {
                "exists": true,
                "kind": "module",
                "reference": {
                  "kind": "module",
                  "module": "networkx",
                  "path": "networkx.classes.function.edges",
                  "version": "2.7.2rc1.dev0"
                },
                "value": "edges"
              },
              "type": "Link"
            },
            {
              "data": {
                "value": ") Views exist for "
              },
              "type": "Words"
            },
            {
              "data": {
                "exists": true,
                "kind": "module",
                "reference": {
                  "kind": "module",
                  "module": "networkx",
                  "path": "networkx.classes.function.nodes",
                  "version": "2.7.2rc1.dev0"
                },
                "value": "nodes"
              },
              "type": "Link"
            },
            {
              "data": {
                "value": ", "
              },
              "type": "Words"
            },
            {
              "data": {
                "exists": true,
                "kind": "module",
                "reference": {
                  "kind": "module",
                  "module": "networkx",
                  "path": "networkx.classes.function.edges",
                  "version": "2.7.2rc1.dev0"
                },
                "value": "edges"
              },
              "type": "Link"
            },
            {
              "data": {
                "value": ", "
              },
              "type": "Words"
            },
            {
              "data": {
                "domain": null,
                "role": null,
                "value": "neighbors()"
              },
              "type": "Directive"
            },
            {
              "data": {
                "value": "/"
              },
              "type": "Words"
            },
            {
              "data": {
                "domain": null,
                "role": null,
                "value": "adj"
              },
              "type": "Directive"
            },
            {
              "data": {
                "value": " and "
              },
              "type": "Words"
            },
            {
              "data": {
                "exists": true,
                "kind": "module",
                "reference": {
                  "kind": "module",
                  "module": "networkx",
                  "path": "networkx.classes.function.degree",
                  "version": "2.7.2rc1.dev0"
                },
                "value": "degree"
              },
              "type": "Link"
            },
            {
              "data": {
                "value": "."
              },
              "type": "Words"
            }
          ],
          "inner": []
        },
        "type": "Paragraph"
      },
      {
        "data": {
          "inline": [
            {
              "data": {
                "value": "For details on these and other miscellaneous methods, see below."
              },
              "type": "Words"
            }
          ],
          "inner": []
        },
        "type": "Paragraph"
      },
      {
        "data": {
          "inline": [
            {
              "data": {
                "content": {
                  "value": "Subclasses (Advanced):"
                }
              },
              "type": "Strong"
            }
          ],
          "inner": []
        },
        "type": "Paragraph"
      },
      {
        "data": {
          "inline": [
            {
              "data": {
                "value": "The MultiGraph class uses a dict-of-dict-of-dict-of-dict data structure. The outer dict (node_dict) holds adjacency information keyed by node. The next dict (adjlist_dict) represents the adjacency information and holds edge_key dicts keyed by neighbor. The edge_key dict holds each edge_attr dict keyed by edge key. The inner dict (edge_attr_dict) represents the edge data and holds edge attribute values keyed by attribute names."
              },
              "type": "Words"
            }
          ],
          "inner": []
        },
        "type": "Paragraph"
      },
      {
        "data": {
          "inline": [
            {
              "data": {
                "value": "Each of these four dicts in the dict-of-dict-of-dict-of-dict structure can be replaced by a user defined dict-like object. In general, the dict-like features should be maintained but extra features can be added. To replace one of the dicts create a new graph class by changing the class(!) variable holding the factory for that dict-like structure. The variable names are node_dict_factory, node_attr_dict_factory, adjlist_inner_dict_factory, adjlist_outer_dict_factory, edge_key_dict_factory, edge_attr_dict_factory and graph_attr_dict_factory."
              },
              "type": "Words"
            }
          ],
          "inner": []
        },
        "type": "Paragraph"
      },
      {
        "data": {
          "children": [
            {
              "dd": [
                {
                  "data": {
                    "inline": [
                      {
                        "data": {
                          "value": "node_dict_factory"
                        },
                        "type": "Words"
                      }
                    ],
                    "inner": []
                  },
                  "type": "Paragraph"
                }
              ],
              "dt": {
                "inline": [
                  {
                    "data": {
                      "value": "node_dict_factory"
                    },
                    "type": "Words"
                  }
                ],
                "inner": []
              }
            }
          ]
        },
        "type": "DefList"
      },
      {
        "data": {
          "children": [
            {
              "dd": [
                {
                  "data": {
                    "inline": [
                      {
                        "data": {
                          "value": "Factory function to be used to create the node attribute     dict which holds attribute values keyed by attribute name.     It should require no arguments and return a dict-like object"
                        },
                        "type": "Words"
                      }
                    ],
                    "inner": []
                  },
                  "type": "Paragraph"
                }
              ],
              "dt": {
                "inline": [
                  {
                    "data": {
                      "value": "node_attr_dict_factory: function, (default: dict)"
                    },
                    "type": "Words"
                  }
                ],
                "inner": []
              }
            }
          ]
        },
        "type": "DefList"
      },
      {
        "data": {
          "children": [
            {
              "dd": [
                {
                  "data": {
                    "inline": [
                      {
                        "data": {
                          "value": "adjlist_outer_dict_factory"
                        },
                        "type": "Words"
                      }
                    ],
                    "inner": []
                  },
                  "type": "Paragraph"
                }
              ],
              "dt": {
                "inline": [
                  {
                    "data": {
                      "value": "adjlist_outer_dict_factory"
                    },
                    "type": "Words"
                  }
                ],
                "inner": []
              }
            }
          ]
        },
        "type": "DefList"
      },
      {
        "data": {
          "children": [
            {
              "dd": [
                {
                  "data": {
                    "inline": [
                      {
                        "data": {
                          "value": "adjlist_inner_dict_factory"
                        },
                        "type": "Words"
                      }
                    ],
                    "inner": []
                  },
                  "type": "Paragraph"
                }
              ],
              "dt": {
                "inline": [
                  {
                    "data": {
                      "value": "adjlist_inner_dict_factory"
                    },
                    "type": "Words"
                  }
                ],
                "inner": []
              }
            }
          ]
        },
        "type": "DefList"
      },
      {
        "data": {
          "children": [
            {
              "dd": [
                {
                  "data": {
                    "inline": [
                      {
                        "data": {
                          "value": "edge_key_dict_factory"
                        },
                        "type": "Words"
                      }
                    ],
                    "inner": []
                  },
                  "type": "Paragraph"
                }
              ],
              "dt": {
                "inline": [
                  {
                    "data": {
                      "value": "edge_key_dict_factory"
                    },
                    "type": "Words"
                  }
                ],
                "inner": []
              }
            }
          ]
        },
        "type": "DefList"
      },
      {
        "data": {
          "children": [
            {
              "dd": [
                {
                  "data": {
                    "inline": [
                      {
                        "data": {
                          "value": "edge_attr_dict_factory"
                        },
                        "type": "Words"
                      }
                    ],
                    "inner": []
                  },
                  "type": "Paragraph"
                }
              ],
              "dt": {
                "inline": [
                  {
                    "data": {
                      "value": "edge_attr_dict_factory"
                    },
                    "type": "Words"
                  }
                ],
                "inner": []
              }
            }
          ]
        },
        "type": "DefList"
      },
      {
        "data": {
          "children": [
            {
              "dd": [
                {
                  "data": {
                    "inline": [
                      {
                        "data": {
                          "value": "graph_attr_dict_factory"
                        },
                        "type": "Words"
                      }
                    ],
                    "inner": []
                  },
                  "type": "Paragraph"
                }
              ],
              "dt": {
                "inline": [
                  {
                    "data": {
                      "value": "graph_attr_dict_factory"
                    },
                    "type": "Words"
                  }
                ],
                "inner": []
              }
            }
          ]
        },
        "type": "DefList"
      },
      {
        "data": {
          "inline": [
            {
              "data": {
                "value": "Typically, if your extension doesn't impact the data structure all methods will inherited without issue except: "
              },
              "type": "Words"
            },
            {
              "data": {
                "domain": null,
                "role": null,
                "value": "to_directed/to_undirected"
              },
              "type": "Directive"
            },
            {
              "data": {
                "value": ". By default these methods create a DiGraph/Graph class and you probably want them to create your extension of a DiGraph/Graph. To facilitate this we define two class variables that you can set in your subclass."
              },
              "type": "Words"
            }
          ],
          "inner": []
        },
        "type": "Paragraph"
      },
      {
        "data": {
          "children": [
            {
              "dd": [
                {
                  "data": {
                    "inline": [
                      {
                        "data": {
                          "value": "to_directed_class"
                        },
                        "type": "Words"
                      }
                    ],
                    "inner": []
                  },
                  "type": "Paragraph"
                }
              ],
              "dt": {
                "inline": [
                  {
                    "data": {
                      "value": "to_directed_class"
                    },
                    "type": "Words"
                  }
                ],
                "inner": []
              }
            }
          ]
        },
        "type": "DefList"
      },
      {
        "data": {
          "children": [
            {
              "dd": [
                {
                  "data": {
                    "inline": [
                      {
                        "data": {
                          "value": "to_undirected_class"
                        },
                        "type": "Words"
                      }
                    ],
                    "inner": []
                  },
                  "type": "Paragraph"
                }
              ],
              "dt": {
                "inline": [
                  {
                    "data": {
                      "value": "to_undirected_class"
                    },
                    "type": "Words"
                  }
                ],
                "inner": []
              }
            }
          ]
        },
        "type": "DefList"
      },
      {
        "data": {
          "inline": [
            {
              "data": {
                "value": "Please see "
              },
              "type": "Words"
            },
            {
              "data": {
                "value": [
                  "~networkx.classes.ordered"
                ]
              },
              "type": "Verbatim"
            },
            {
              "data": {
                "value": " for examples of creating graph subclasses by overwriting the base class "
              },
              "type": "Words"
            },
            {
              "data": {
                "domain": null,
                "role": null,
                "value": "dict"
              },
              "type": "Directive"
            },
            {
              "data": {
                "value": " with a dictionary-like object."
              },
              "type": "Words"
            }
          ],
          "inner": []
        },
        "type": "Paragraph"
      }
    ],
    "title": null
  },
  "item_file": "networkx/classes/multigraph.py",
  "item_line": 14,
  "item_type": "<class 'type'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "See Also",
    "Examples"
  ],
  "references": null,
  "refs": [
    "DiGraph",
    "Graph",
    "MultiDiGraph",
    "OrderedMultiGraph",
    "builtins.NoneType",
    "builtins.dict",
    "builtins.dict.items",
    "builtins.int",
    "builtins.len",
    "builtins.list",
    "builtins.range",
    "networkx",
    "networkx.classes.graph.Graph.add_node",
    "networkx.classes.graph.Graph.add_nodes_from",
    "networkx.classes.graph.Graph.adjacency",
    "networkx.classes.multigraph.MultiGraph",
    "networkx.classes.multigraph.MultiGraph.add_edge",
    "networkx.classes.multigraph.MultiGraph.add_edges_from",
    "networkx.classes.reportviews.MultiEdgeView",
    "networkx.classes.reportviews.NodeView",
    "networkx.generators.classic.path_graph",
    "typing.Generator"
  ],
  "see_also": [
    {
      "descriptions": [],
      "name": {
        "exists": true,
        "name": "Graph",
        "ref": "networkx.classes.graph.Graph"
      },
      "type": null
    },
    {
      "descriptions": [],
      "name": {
        "exists": true,
        "name": "DiGraph",
        "ref": "networkx.classes.digraph.DiGraph"
      },
      "type": null
    },
    {
      "descriptions": [],
      "name": {
        "exists": true,
        "name": "MultiDiGraph",
        "ref": "networkx.classes.multidigraph.MultiDiGraph"
      },
      "type": null
    },
    {
      "descriptions": [],
      "name": {
        "exists": true,
        "name": "OrderedMultiGraph",
        "ref": "networkx.classes.ordered.OrderedMultiGraph"
      },
      "type": null
    }
  ],
  "signature": {
    "value": null
  }
}