{
  "_content": {
    "Attributes": {
      "children": [],
      "title": null
    },
    "Extended Summary": {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "children": [
                    {
                      "data": {
                        "value": "The ordered variants of graph classes in this module are deprecated and    will be removed in version 3.0."
                      },
                      "type": "Words"
                    }
                  ]
                },
                "type": "Paragraph"
              }
            ]
          },
          "type": "BlockQuote"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Consistently ordered variants of the default base classes. Note that if you are using Python 3.6+, you shouldn't need these classes because the dicts in Python 3.6+ are ordered. Note also that there are many differing expectations for the word \"ordered\" and that these classes may not provide the order you expect. The intent here is to give a consistent order not a particular order."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "The Ordered (Di/Multi/MultiDi) Graphs give a consistent order for reporting of nodes and edges.  The order of node reporting agrees with node adding, but for edges, the order is not necessarily the order that the edges were added."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "In general, you should use the default (i.e., unordered) graph classes. However, there are times (e.g., when testing) when you may need the order preserved."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Special care is required when using subgraphs of the Ordered classes. The order of nodes in the subclass is not necessarily the same order as the original class.  In general it is probably better to avoid using subgraphs and replace with code similar to:"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "argument": "python",
            "content": "# instead of SG = G.subgraph(ordered_nodes)\nSG = nx.OrderedGraph()\nSG.add_nodes_from(ordered_nodes)\nSG.add_edges_from((u, v) for (u, v) in G.edges() if u in SG if v in SG)",
            "name": "code-block",
            "options": []
          },
          "type": "BlockDirective"
        }
      ],
      "title": null
    },
    "Methods": {
      "children": [],
      "title": null
    },
    "Notes": {
      "children": [],
      "title": null
    },
    "Other Parameters": {
      "children": [],
      "title": null
    },
    "Parameters": {
      "children": [],
      "title": null
    },
    "Raises": {
      "children": [],
      "title": null
    },
    "Receives": {
      "children": [],
      "title": null
    },
    "Returns": {
      "children": [],
      "title": null
    },
    "Summary": {
      "children": [
        {
          "data": {
            "children": [],
            "kind": "deprecated",
            "title": "2.6"
          },
          "type": "Admonition"
        }
      ],
      "title": null
    },
    "Warnings": {
      "children": [],
      "title": null
    },
    "Warns": {
      "children": [],
      "title": null
    },
    "Yields": {
      "children": [],
      "title": null
    }
  },
  "aliases": [
    "networkx.ordered"
  ],
  "arbitrary": [
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "children": [
                    {
                      "data": {
                        "value": "The ordered variants of graph classes in this module are deprecated and will be removed in version 3.0."
                      },
                      "type": "Words"
                    }
                  ]
                },
                "type": "Paragraph"
              }
            ],
            "kind": "deprecated",
            "title": "2.6"
          },
          "type": "Admonition"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Consistently ordered variants of the default base classes. Note that if you are using Python 3.6+, you shouldn't need these classes because the dicts in Python 3.6+ are ordered. Note also that there are many differing expectations for the word \"ordered\" and that these classes may not provide the order you expect. The intent here is to give a consistent order not a particular order."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "The Ordered (Di/Multi/MultiDi) Graphs give a consistent order for reporting of nodes and edges.  The order of node reporting agrees with node adding, but for edges, the order is not necessarily the order that the edges were added."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "In general, you should use the default (i.e., unordered) graph classes. However, there are times (e.g., when testing) when you may need the order preserved."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Special care is required when using subgraphs of the Ordered classes. The order of nodes in the subclass is not necessarily the same order as the original class.  In general it is probably better to avoid using subgraphs and replace with code similar to:"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "argument": "python",
            "content": "# instead of SG = G.subgraph(ordered_nodes)\nSG = nx.OrderedGraph()\nSG.add_nodes_from(ordered_nodes)\nSG.add_edges_from((u, v) for (u, v) in G.edges() if u in SG if v in SG)",
            "name": "code-block",
            "options": []
          },
          "type": "BlockDirective"
        }
      ],
      "title": null
    }
  ],
  "example_section_data": {
    "children": [],
    "title": null
  },
  "item_file": "networkx/classes/ordered.py",
  "item_line": 0,
  "item_type": "<class 'module'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary"
  ],
  "references": null,
  "see_also": [],
  "signature": {
    "value": null
  }
}