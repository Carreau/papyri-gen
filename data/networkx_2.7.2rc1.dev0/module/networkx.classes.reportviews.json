{
  "_content": {
    "Attributes": {
      "children": [],
      "title": null
    },
    "Extended Summary": {
      "children": [],
      "title": null
    },
    "Methods": {
      "children": [],
      "title": null
    },
    "Notes": {
      "children": [],
      "title": null
    },
    "Other Parameters": {
      "children": [],
      "title": null
    },
    "Parameters": {
      "children": [],
      "title": null
    },
    "Raises": {
      "children": [],
      "title": null
    },
    "Receives": {
      "children": [],
      "title": null
    },
    "Returns": {
      "children": [],
      "title": null
    },
    "Summary": {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "To remove in the future \u2013\u2013 networkx.classes.reportviews"
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": null
    },
    "Warnings": {
      "children": [],
      "title": null
    },
    "Warns": {
      "children": [],
      "title": null
    },
    "Yields": {
      "children": [],
      "title": null
    }
  },
  "aliases": [
    "networkx.reportviews"
  ],
  "arbitrary": [
    {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "View Classes provide node, edge and degree \"views\" of a graph."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Views for nodes, edges and degree are provided for all base graph classes. A view means a read-only object that is quick to create, automatically updated when the graph changes, and provides basic access like "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "n in V"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "for n in V"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "V[n]"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " and sometimes set operations."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "The views are read-only iterable containers that are updated as the graph is updated. As with dicts, the graph should not be updated while iterating through the view. Views can be iterated multiple times."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Edge and Node views also allow data attribute lookup. The resulting attribute dict is writable as "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "G.edges[3, 4]['color']='red'"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " Degree views allow lookup of degree values for single nodes. Weighted degree is supported with the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "weight"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " argument."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": null
    },
    {
      "children": [
        {
          "data": {
            "value": [
              "`V = G.nodes` (or `V = G.nodes()`) allows `len(V)`, `n in V`, set",
              "operations e.g. \"G.nodes & H.nodes\", and `dd = G.nodes[n]`, where",
              "`dd` is the node data dict. Iteration is over the nodes by default."
            ]
          },
          "type": "BlockQuote"
        }
      ],
      "title": "NodeView"
    },
    {
      "children": [
        {
          "data": {
            "value": [
              "To iterate over (node, data) pairs, use arguments to `G.nodes()`",
              "to create a DataView e.g. `DV = G.nodes(data='color', default='red')`.",
              "The DataView iterates as `for n, color in DV` and allows",
              "`(n, 'red') in DV`. Using `DV = G.nodes(data=True)`, the DataViews",
              "use the full datadict in writeable form also allowing contain testing as",
              "`(n, {'color': 'red'}) in VD`. DataViews allow set operations when",
              "data attributes are hashable."
            ]
          },
          "type": "BlockQuote"
        }
      ],
      "title": "NodeDataView"
    },
    {
      "children": [
        {
          "data": {
            "value": [
              "`V = G.degree` allows iteration over (node, degree) pairs as well",
              "as lookup: `deg=V[n]`. There are many flavors of DegreeView",
              "for In/Out/Directed/Multi. For Directed Graphs, `G.degree`",
              "counts both in and out going edges. `G.out_degree` and",
              "`G.in_degree` count only specific directions.",
              "Weighted degree using edge data attributes is provide via",
              "`V = G.degree(weight='attr_name')` where any string with the",
              "attribute name can be used. `weight=None` is the default.",
              "No set operations are implemented for degrees, use NodeView.",
              "",
              "The argument `nbunch` restricts iteration to nodes in nbunch.",
              "The DegreeView can still lookup any node even if nbunch is specified."
            ]
          },
          "type": "BlockQuote"
        }
      ],
      "title": "DegreeView"
    },
    {
      "children": [
        {
          "data": {
            "value": [
              "`V = G.edges` or `V = G.edges()` allows iteration over edges as well as",
              "`e in V`, set operations and edge data lookup `dd = G.edges[2, 3]`.",
              "Iteration is over 2-tuples `(u, v)` for Graph/DiGraph. For multigraphs",
              "edges 3-tuples `(u, v, key)` are the default but 2-tuples can be obtained",
              "via `V = G.edges(keys=False)`.",
              "",
              "Set operations for directed graphs treat the edges as a set of 2-tuples.",
              "For undirected graphs, 2-tuples are not a unique representation of edges.",
              "So long as the set being compared to contains unique representations",
              "of its edges, the set operations will act as expected. If the other",
              "set contains both `(0, 1)` and `(1, 0)` however, the result of set",
              "operations may contain both representations of the same edge."
            ]
          },
          "type": "BlockQuote"
        }
      ],
      "title": "EdgeView"
    },
    {
      "children": [
        {
          "data": {
            "value": [
              "Edge data can be reported using an EdgeDataView typically created",
              "by calling an EdgeView: `DV = G.edges(data='weight', default=1)`.",
              "The EdgeDataView allows iteration over edge tuples, membership checking",
              "but no set operations.",
              "",
              "Iteration depends on `data` and `default` and for multigraph `keys`",
              "If `data is False` (the default) then iterate over 2-tuples `(u, v)`.",
              "If `data is True` iterate over 3-tuples `(u, v, datadict)`.",
              "Otherwise iterate over `(u, v, datadict.get(data, default))`.",
              "For Multigraphs, if `keys is True`, replace `u, v` with `u, v, key`",
              "to create 3-tuples and 4-tuples.",
              "",
              "The argument `nbunch` restricts edges to those incident to nodes in nbunch."
            ]
          },
          "type": "BlockQuote"
        }
      ],
      "title": "EdgeDataView"
    }
  ],
  "example_section_data": {
    "children": [],
    "title": null
  },
  "item_file": "networkx/classes/reportviews.py",
  "item_line": 0,
  "item_type": "<class 'module'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary"
  ],
  "references": null,
  "refs": [],
  "see_also": [],
  "signature": {
    "value": null
  }
}