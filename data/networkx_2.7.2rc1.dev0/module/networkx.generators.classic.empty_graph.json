{
  "_content": {
    "Attributes": {
      "children": [],
      "title": null
    },
    "Extended Summary": {
      "children": [],
      "title": null
    },
    "Methods": {
      "children": [],
      "title": null
    },
    "Notes": {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "The variable create_using should be a Graph Constructor or a \"graph\"-like object. Constructors, e.g. "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "nx.Graph"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " or "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "nx.MultiGraph"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " will be used to create the returned graph. \"graph\"-like objects will be cleared (nodes and edges will be removed) and refitted as an empty \"graph\" with nodes specified in n. This capability is useful for specifying the class-nature of the resulting empty \"graph\" (i.e. Graph, DiGraph, MyWeirdGraphClass, etc.)."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "The variable create_using has three main uses: Firstly, the variable create_using can be used to create an empty digraph, multigraph, etc.  For example,"
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": ">>> n = 10\n>>> G = nx.empty_graph(n, create_using=nx.DiGraph)"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "will create an empty digraph on n nodes."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Secondly, one can pass an existing graph (digraph, multigraph, etc.) via create_using. For example, if G is an existing graph (resp. digraph, multigraph, etc.), then empty_graph(n, create_using=G) will empty G (i.e. delete all nodes and edges using G.clear()) and then add n nodes and zero edges, and return the modified graph."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Thirdly, when constructing your home-grown graph creation function you can use empty_graph to construct the graph by passing a user defined create_using to empty_graph. In this case, if you want the default constructor to be other than nx.Graph, specify "
                },
                "type": "Words"
              },
              {
                "data": {
                  "exists": true,
                  "kind": "local",
                  "reference": {
                    "kind": "local",
                    "module": null,
                    "path": "default",
                    "version": null
                  },
                  "value": "default"
                },
                "type": "Link"
              },
              {
                "data": {
                  "value": "."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": ">>> def mygraph(n, create_using=None):\n...     G = nx.empty_graph(n, create_using, nx.MultiGraph)\n...     G.add_edges_from([(0, 1), (0, 1)])\n...     return G\n>>> G = mygraph(3)\n>>> G.is_multigraph()\nTrue\n>>> G = mygraph(3, nx.Graph)\n>>> G.is_multigraph()\nFalse"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "See also create_empty_copy(G)."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": null
    },
    "Other Parameters": {
      "children": [],
      "title": null
    },
    "Parameters": {
      "children": [
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "If n is an integer, nodes are from "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "domain": null,
                        "role": null,
                        "value": "range(n)"
                      },
                      "type": "Directive"
                    },
                    {
                      "data": {
                        "value": ". If n is a container of nodes, those nodes appear in the graph."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "n",
            "type_": "int or iterable container of nodes (default = 0)"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Indicator of type of graph to return. If a Graph-type instance, then clear and use it. If None, use the "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "local",
                        "reference": {
                          "kind": "local",
                          "module": null,
                          "path": "default",
                          "version": null
                        },
                        "value": "default"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": " constructor. If a constructor, call it to create an empty graph."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "create_using",
            "type_": "Graph Instance, Constructor or None"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "The constructor to use if create_using is None. If None, then nx.Graph is used. This is used when passing an unknown "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "local",
                        "reference": {
                          "kind": "local",
                          "module": null,
                          "path": "create_using",
                          "version": null
                        },
                        "value": "create_using"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": " value through your home-grown function to "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "module",
                        "reference": {
                          "kind": "module",
                          "module": "networkx",
                          "path": "networkx.generators.classic.empty_graph",
                          "version": "2.7.2rc1.dev0"
                        },
                        "value": "empty_graph"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": " and you want a default constructor other than nx.Graph."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "default",
            "type_": "Graph constructor (optional, default = nx.Graph)"
          },
          "type": "Param"
        }
      ],
      "title": null
    },
    "Raises": {
      "children": [],
      "title": null
    },
    "Receives": {
      "children": [],
      "title": null
    },
    "Returns": {
      "children": [],
      "title": null
    },
    "Summary": {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Returns the empty graph with n nodes and zero edges."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": null
    },
    "Warnings": {
      "children": [],
      "title": null
    },
    "Warns": {
      "children": [],
      "title": null
    },
    "Yields": {
      "children": [],
      "title": null
    }
  },
  "aliases": [
    "networkx.empty_graph"
  ],
  "arbitrary": [],
  "example_section_data": {
    "children": [
      {
        "data": {
          "ce_status": "execed",
          "entries": [
            [
              "G",
              "builtins.NoneType",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "nx",
              "networkx",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "empty_graph",
              "networkx.generators.classic.empty_graph",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "10",
              "",
              "mi"
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "G",
              "builtins.NoneType",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "number_of_nodes",
              "networkx.classes.graph.Graph.number_of_nodes",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": "10"
        },
        "type": "Code"
      },
      {
        "data": {
          "ce_status": "execed",
          "entries": [
            [
              "G",
              "builtins.NoneType",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "number_of_edges",
              "networkx.classes.graph.Graph.number_of_edges",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": "0"
        },
        "type": "Code"
      },
      {
        "data": {
          "ce_status": "execed",
          "entries": [
            [
              "G",
              "builtins.NoneType",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "nx",
              "networkx",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "empty_graph",
              "networkx.generators.classic.empty_graph",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              "ABC",
              null,
              "s2"
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "G",
              "builtins.NoneType",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "number_of_nodes",
              "networkx.classes.graph.Graph.number_of_nodes",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": "3"
        },
        "type": "Code"
      },
      {
        "data": {
          "ce_status": "execed",
          "entries": [
            [
              "sorted",
              "builtins.sorted",
              "nb"
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "G",
              "builtins.NoneType",
              ""
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": "['A', 'B', 'C']"
        },
        "type": "Code"
      }
    ],
    "title": null
  },
  "item_file": "networkx/generators/classic.py",
  "item_line": 405,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Parameters",
    "Examples",
    "Notes"
  ],
  "references": null,
  "refs": [
    "builtins.NoneType",
    "builtins.sorted",
    "networkx",
    "networkx.classes.graph.Graph.number_of_edges",
    "networkx.classes.graph.Graph.number_of_nodes",
    "networkx.generators.classic.empty_graph"
  ],
  "see_also": [],
  "signature": {
    "value": "empty_graph(n=0, create_using=None, default=<class 'networkx.classes.graph.Graph'>)"
  }
}