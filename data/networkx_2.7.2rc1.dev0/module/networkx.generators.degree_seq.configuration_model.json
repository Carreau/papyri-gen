{
  "_content": {
    "Attributes": {
      "children": [],
      "title": null
    },
    "Extended Summary": {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "The configuration model generates a random pseudograph (graph with parallel edges and self loops) by randomly assigning edges to match the given degree sequence."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": null
    },
    "Methods": {
      "children": [],
      "title": null
    },
    "Notes": {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "As described by Newman ."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "A non-graphical degree sequence (not realizable by some simple graph) is allowed since this function returns graphs with self loops and parallel edges.  An exception is raised if the degree sequence does not have an even sum."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "This configuration model construction process can lead to duplicate edges and loops.  You can remove the self-loops and parallel edges (see below) which will likely result in a graph that doesn't have the exact degree sequence specified."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "The density of self-loops and parallel edges tends to decrease as the number of nodes increases. However, typically the number of self-loops will approach a Poisson distribution with a nonzero mean, and similarly for the number of parallel edges.  Consider a node with "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "k"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": " stubs. The probability of being joined to another stub of the same node is basically ("
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "k"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": " - "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "1"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": ") / "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "N"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": ", where "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "k"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": " is the degree and "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "N"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": " is the number of nodes. So the probability of a self-loop scales like "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "c"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": " / "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "N"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": " for some constant "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "c"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": ". As "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "N"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": " grows, this means we expect "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "c"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": " self-loops. Similarly for parallel edges."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": null
    },
    "Other Parameters": {
      "children": [],
      "title": null
    },
    "Parameters": {
      "children": [
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Each list entry corresponds to the degree of a node."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "deg_sequence",
            "type_": "list of nonnegative integers"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Graph type to create. If graph instance, then cleared before populated."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "create_using",
            "type_": "NetworkX graph constructor, optional (default MultiGraph)"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Indicator of random number generation state. See "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "Randomness<randomness>"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": "."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "seed",
            "type_": "integer, random_state, or None (default)"
          },
          "type": "Param"
        }
      ],
      "title": null
    },
    "Raises": {
      "children": [
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "If the degree sequence does not have an even sum."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "",
            "type_": "NetworkXError"
          },
          "type": "Param"
        }
      ],
      "title": null
    },
    "Receives": {
      "children": [],
      "title": null
    },
    "Returns": {
      "children": [
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "A graph with the specified degree sequence. Nodes are labeled starting at 0 with an index corresponding to the position in deg_sequence."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "G",
            "type_": "MultiGraph"
          },
          "type": "Param"
        }
      ],
      "title": null
    },
    "Summary": {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Returns a random graph with the given degree sequence."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": null
    },
    "Warnings": {
      "children": [],
      "title": null
    },
    "Warns": {
      "children": [],
      "title": null
    },
    "Yields": {
      "children": [],
      "title": null
    }
  },
  "aliases": [
    "networkx.configuration_model"
  ],
  "arbitrary": [],
  "example_section_data": {
    "children": [
      {
        "data": {
          "inline": [
            {
              "data": {
                "value": "You can create a degree sequence following a particular distribution by using the one of the distribution functions in "
              },
              "type": "Words"
            },
            {
              "data": {
                "value": [
                  "~networkx.utils.random_sequence"
                ]
              },
              "type": "Verbatim"
            },
            {
              "data": {
                "value": " (or one of your own). For example, to create an undirected multigraph on one hundred nodes with degree sequence chosen from the power law distribution:"
              },
              "type": "Words"
            }
          ],
          "inner": []
        },
        "type": "Paragraph"
      },
      {
        "data": {
          "ce_status": "execed",
          "entries": [
            [
              "sequence",
              "builtins.list",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "nx",
              "networkx",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "random_powerlaw_tree_sequence",
              "networkx.generators.random_graphs.random_powerlaw_tree_sequence",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "100",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "tries",
              null,
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "5000",
              "",
              "mi"
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "G",
              "typing.Generator",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "nx",
              "networkx",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "configuration_model",
              "networkx.generators.degree_seq.configuration_model",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "sequence",
              "builtins.list",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "len",
              "builtins.len",
              "nb"
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "G",
              "typing.Generator",
              ""
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": "100"
        },
        "type": "Code"
      },
      {
        "data": {
          "ce_status": "execed",
          "entries": [
            [
              "actual_degrees",
              "builtins.list",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "d",
              null,
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "for",
              null,
              "k"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "v",
              null,
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "d",
              null,
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "in",
              null,
              "ow"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "G",
              "typing.Generator",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "degree",
              null,
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "]",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "actual_degrees",
              "builtins.list",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "==",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "sequence",
              "builtins.list",
              ""
            ]
          ],
          "out": "True"
        },
        "type": "Code"
      },
      {
        "data": {
          "inline": [
            {
              "data": {
                "value": "The returned graph is a multigraph, which may have parallel edges. To remove any parallel edges from the returned graph:"
              },
              "type": "Words"
            }
          ],
          "inner": []
        },
        "type": "Paragraph"
      },
      {
        "data": {
          "ce_status": "execed",
          "entries": [
            [
              "G",
              "networkx.classes.graph.Graph",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "nx",
              "networkx",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "Graph",
              "networkx.classes.graph.Graph",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "G",
              "typing.Generator",
              ""
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": ""
        },
        "type": "Code"
      },
      {
        "data": {
          "inline": [
            {
              "data": {
                "value": "Similarly, to remove self-loops:"
              },
              "type": "Words"
            }
          ],
          "inner": []
        },
        "type": "Paragraph"
      },
      {
        "data": {
          "ce_status": "execed",
          "entries": [
            [
              "G",
              "networkx.classes.graph.Graph",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "remove_edges_from",
              "networkx.classes.graph.Graph.remove_edges_from",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "nx",
              "networkx",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "selfloop_edges",
              "networkx.classes.function.selfloop_edges",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "G",
              "networkx.classes.graph.Graph",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": ""
        },
        "type": "Code"
      }
    ],
    "title": null
  },
  "item_file": "networkx/generators/degree_seq.py",
  "item_line": 128,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns",
    "Raises",
    "See Also",
    "Notes",
    "References",
    "Examples"
  ],
  "references": null,
  "refs": [
    "builtins.len",
    "builtins.list",
    "is_graphical",
    "networkx",
    "networkx.classes.function.selfloop_edges",
    "networkx.classes.graph.Graph",
    "networkx.classes.graph.Graph.remove_edges_from",
    "networkx.generators.degree_seq.configuration_model",
    "networkx.generators.random_graphs.random_powerlaw_tree_sequence",
    "typing.Generator"
  ],
  "see_also": [
    {
      "descriptions": [],
      "name": {
        "exists": null,
        "name": "is_graphical",
        "ref": null
      },
      "type": null
    }
  ],
  "signature": {
    "value": "configuration_model(deg_sequence, create_using=None, seed=None)"
  }
}