{
  "_content": {
    "Attributes": {
      "children": [],
      "title": null
    },
    "Extended Summary": {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "The thresholded random geometric graph [1] model places "
                },
                "type": "Words"
              },
              {
                "data": {
                  "exists": true,
                  "kind": "local",
                  "reference": {
                    "kind": "local",
                    "module": null,
                    "path": "n",
                    "version": null
                  },
                  "value": "n"
                },
                "type": "Link"
              },
              {
                "data": {
                  "value": " nodes uniformly at random in the unit cube of dimensions "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "dim"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": ". Each node "
                },
                "type": "Words"
              },
              {
                "data": {
                  "exists": true,
                  "kind": "local",
                  "reference": {
                    "kind": "local",
                    "module": null,
                    "path": "u",
                    "version": null
                  },
                  "value": "u"
                },
                "type": "Link"
              },
              {
                "data": {
                  "value": " is assigned a weight "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": "w_u"
                },
                "type": "Math"
              },
              {
                "data": {
                  "value": ". Two nodes "
                },
                "type": "Words"
              },
              {
                "data": {
                  "exists": true,
                  "kind": "local",
                  "reference": {
                    "kind": "local",
                    "module": null,
                    "path": "u",
                    "version": null
                  },
                  "value": "u"
                },
                "type": "Link"
              },
              {
                "data": {
                  "value": " and "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "v"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " are joined by an edge if they are within the maximum connection distance, "
                },
                "type": "Words"
              },
              {
                "data": {
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "module",
                    "module": "networkx",
                    "path": "networkx.algorithms.distance_measures.radius",
                    "version": "2.7.2rc1.dev0"
                  },
                  "value": "radius"
                },
                "type": "Link"
              },
              {
                "data": {
                  "value": " computed by the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "exists": true,
                  "kind": "local",
                  "reference": {
                    "kind": "local",
                    "module": null,
                    "path": "p",
                    "version": null
                  },
                  "value": "p"
                },
                "type": "Link"
              },
              {
                "data": {
                  "value": "-Minkowski distance and the summation of weights "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": "w_u"
                },
                "type": "Math"
              },
              {
                "data": {
                  "value": " + "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": "w_v"
                },
                "type": "Math"
              },
              {
                "data": {
                  "value": " is greater than or equal to the threshold parameter "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "theta"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": "."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Edges within "
                },
                "type": "Words"
              },
              {
                "data": {
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "module",
                    "module": "networkx",
                    "path": "networkx.algorithms.distance_measures.radius",
                    "version": "2.7.2rc1.dev0"
                  },
                  "value": "radius"
                },
                "type": "Link"
              },
              {
                "data": {
                  "value": " of each other are determined using a KDTree when SciPy is available. This reduces the time complexity from "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": "O(n^2)"
                },
                "type": "Math"
              },
              {
                "data": {
                  "value": " to "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": "O(n)"
                },
                "type": "Math"
              },
              {
                "data": {
                  "value": "."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": null
    },
    "Methods": {
      "children": [],
      "title": null
    },
    "Notes": {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "This uses a "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "k"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": "-d tree to build the graph."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "The "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "pos"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " keyword argument can be used to specify node positions so you can create an arbitrary distribution and domain for positions."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "For example, to use a 2D Gaussian distribution of node positions with mean (0, 0) and standard deviation 2"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "If weights are not specified they are assigned to nodes by drawing randomly from the exponential distribution with rate parameter "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": "\\lambda=1"
                },
                "type": "Math"
              },
              {
                "data": {
                  "value": ". To specify weights from a different distribution, use the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "weight"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " keyword argument::  "
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": "::"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "value": ">>> import random\n>>> import math\n>>> n = 50\n>>> pos = {i: (random.gauss(0, 2), random.gauss(0, 2)) for i in range(n)}\n>>> w = {i: random.expovariate(5.0) for i in range(n)}\n>>> G = nx.thresholded_random_geometric_graph(n, 0.2, 0.1, 2, pos, w)"
          },
          "type": "BlockVerbatim"
        }
      ],
      "title": null
    },
    "Other Parameters": {
      "children": [],
      "title": null
    },
    "Parameters": {
      "children": [
        {
          "data": {
            "children": [
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Number of nodes or iterable of nodes"
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "n",
                "type_": "int or iterable"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Distance threshold value"
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "radius: float",
                "type_": ""
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Threshold value"
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "theta: float",
                "type_": ""
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Dimension of graph"
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "dim",
                "type_": "int, optional"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "A dictionary keyed by node with node positions as values."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "pos",
                "type_": "dict, optional"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Node weights as a dictionary of numbers keyed by node."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "weight",
                "type_": "dict, optional"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Which Minkowski distance metric to use.  "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "exists": true,
                            "kind": "local",
                            "reference": {
                              "kind": "local",
                              "module": null,
                              "path": "p",
                              "version": null
                            },
                            "value": "p"
                          },
                          "type": "Link"
                        },
                        {
                          "data": {
                            "value": " has to meet the condition "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "1 <= p <= infinity"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": "."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  },
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "If this argument is not specified, the "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": "L^2"
                          },
                          "type": "Math"
                        },
                        {
                          "data": {
                            "value": " metric (the Euclidean distance metric), p = 2 is used."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  },
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "This should not be confused with the "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "exists": true,
                            "kind": "local",
                            "reference": {
                              "kind": "local",
                              "module": null,
                              "path": "p",
                              "version": null
                            },
                            "value": "p"
                          },
                          "type": "Link"
                        },
                        {
                          "data": {
                            "value": " of an Erd\u0151s-R\u00e9nyi random graph, which represents probability."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "p",
                "type_": "float, optional (default 2)"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Indicator of random number generation state. See "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "Randomness<randomness>"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": "."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "seed",
                "type_": "integer, random_state, or None (default)"
              }
            ]
          },
          "type": "Parameters"
        }
      ],
      "title": null
    },
    "Raises": {
      "children": [],
      "title": null
    },
    "Receives": {
      "children": [],
      "title": null
    },
    "Returns": {
      "children": [
        {
          "data": {
            "children": [
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "A thresholded random geographic graph, undirected and without self-loops."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  },
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Each node has a node attribute "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "'pos'"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " that stores the position of that node in Euclidean space as provided by the "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "pos"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " keyword argument or, if "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "pos"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " was not provided, as generated by this function. Similarly, each node has a nodethre attribute "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "'weight'"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " that stores the weight of that node as provided or as generated."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "",
                "type_": "Graph"
              }
            ]
          },
          "type": "Parameters"
        }
      ],
      "title": null
    },
    "Summary": {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Returns a thresholded random geometric graph in the unit cube."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": null
    },
    "Warnings": {
      "children": [],
      "title": null
    },
    "Warns": {
      "children": [],
      "title": null
    },
    "Yields": {
      "children": [],
      "title": null
    }
  },
  "aliases": [
    "networkx.thresholded_random_geometric_graph"
  ],
  "arbitrary": [],
  "example_section_data": {
    "children": [
      {
        "data": {
          "children": [
            {
              "data": {
                "value": "Default Graph:"
              },
              "type": "Words"
            }
          ]
        },
        "type": "Paragraph"
      },
      {
        "data": {
          "children": [
            {
              "data": {
                "value": "G = nx.thresholded_random_geometric_graph(50, 0.2, 0.1)"
              },
              "type": "Words"
            }
          ]
        },
        "type": "Paragraph"
      },
      {
        "data": {
          "children": [
            {
              "data": {
                "value": "Custom Graph:"
              },
              "type": "Words"
            }
          ]
        },
        "type": "Paragraph"
      },
      {
        "data": {
          "children": [
            {
              "data": {
                "value": "Create a thresholded random geometric graph on 50 uniformly distributed nodes where nodes are joined by an edge if their sum weights drawn from a exponential distribution with rate = 5 are >= theta = 0.1 and their Euclidean distance is at most 0.2."
              },
              "type": "Words"
            }
          ]
        },
        "type": "Paragraph"
      }
    ],
    "title": null
  },
  "item_file": "networkx/generators/geometric.py",
  "item_line": 679,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns",
    "Examples",
    "Notes",
    "References"
  ],
  "references": null,
  "refs": [],
  "see_also": [],
  "signature": {
    "value": "thresholded_random_geometric_graph(n, radius, theta, dim=2, pos=None, weight=None, p=2, seed=None)"
  }
}