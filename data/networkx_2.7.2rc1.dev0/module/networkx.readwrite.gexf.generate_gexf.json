{
  "_content": {
    "Attributes": {
      "children": [],
      "title": null
    },
    "Extended Summary": {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "\"GEXF (Graph Exchange XML Format) is a language for describing complex networks structures, their associated data and dynamics\" ."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": null
    },
    "Methods": {
      "children": [],
      "title": null
    },
    "Notes": {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "This implementation does not support mixed graphs (directed and undirected edges together)."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "The node id attribute is set to be the string of the node label. If you want to specify an id use set it as node data, e.g. node['a']['id']=1 to set the id of node 'a' to 1."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": null
    },
    "Other Parameters": {
      "children": [],
      "title": null
    },
    "Parameters": {
      "children": [
        {
          "data": {
            "desc": [],
            "param": "G",
            "type_": "graph"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [],
            "param": "A NetworkX graph",
            "type_": ""
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [],
            "param": "encoding",
            "type_": "string (optional, default: 'utf-8')"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [],
            "param": "Encoding for text data.",
            "type_": ""
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [],
            "param": "prettyprint",
            "type_": "bool (optional, default: True)"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [],
            "param": "If True use line breaks and indenting in output XML.",
            "type_": ""
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [],
            "param": "version",
            "type_": "string (default: 1.2draft)"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [],
            "param": "Version of GEFX File Format (see http://gexf.net/schema.html)",
            "type_": ""
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [],
            "param": "Supported values: \"1.1draft\", \"1.2draft\"",
            "type_": ""
          },
          "type": "Param"
        }
      ],
      "title": null
    },
    "Raises": {
      "children": [],
      "title": null
    },
    "Receives": {
      "children": [],
      "title": null
    },
    "Returns": {
      "children": [],
      "title": null
    },
    "Summary": {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Generate lines of GEXF format representation of G."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": null
    },
    "Warnings": {
      "children": [],
      "title": null
    },
    "Warns": {
      "children": [],
      "title": null
    },
    "Yields": {
      "children": [],
      "title": null
    }
  },
  "aliases": [
    "networkx.generate_gexf"
  ],
  "arbitrary": [],
  "example_section_data": {
    "children": [
      {
        "data": {
          "ce_status": "execed",
          "entries": [
            [
              "G",
              "typing.Generator",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "nx",
              "networkx",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "path_graph",
              "networkx.generators.classic.path_graph",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "4",
              "",
              "mi"
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "linefeed",
              "builtins.str",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "chr",
              "builtins.chr",
              "nb"
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "10",
              "",
              "mi"
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "  ",
              "",
              ""
            ],
            [
              "# linefeed=",
              "",
              "c1"
            ]
          ],
          "out": ""
        },
        "type": "Code"
      },
      {
        "data": {
          "ce_status": "execed",
          "entries": [
            [
              "s",
              "builtins.str",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "linefeed",
              "builtins.str",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "join",
              "builtins.str.join",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "nx",
              "networkx",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "generate_gexf",
              "networkx.readwrite.gexf.generate_gexf",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "G",
              "typing.Generator",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "for",
              null,
              "k"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "line",
              "builtins.str",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "in",
              null,
              "ow"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "nx",
              "networkx",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "generate_gexf",
              "networkx.readwrite.gexf.generate_gexf",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "G",
              "typing.Generator",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              ":",
              "",
              ""
            ],
            [
              "  ",
              "",
              ""
            ],
            [
              "# doctest: +SKIP",
              "",
              "c1"
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "    ",
              "",
              ""
            ],
            [
              "print",
              "builtins.print",
              "nb"
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "line",
              "builtins.str",
              ""
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": ""
        },
        "type": "Code"
      }
    ],
    "title": null
  },
  "item_file": "networkx/readwrite/gexf.py",
  "item_line": 91,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Examples",
    "Notes",
    "References"
  ],
  "references": null,
  "refs": [
    "builtins.chr",
    "builtins.print",
    "builtins.str",
    "builtins.str.join",
    "networkx",
    "networkx.generators.classic.path_graph",
    "networkx.readwrite.gexf.generate_gexf",
    "typing.Generator"
  ],
  "see_also": [],
  "signature": {
    "value": "generate_gexf(G, encoding='utf-8', prettyprint=True, version='1.2draft')"
  }
}