{
  "_content": {
    "Attributes": {
      "children": [],
      "title": null
    },
    "Extended Summary": {
      "children": [],
      "title": null
    },
    "Methods": {
      "children": [],
      "title": null
    },
    "Notes": {
      "children": [],
      "title": null
    },
    "Other Parameters": {
      "children": [],
      "title": null
    },
    "Parameters": {
      "children": [
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Graph to represent (must be a tree, forest, or the empty graph)"
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "graph",
            "type_": "nx.DiGraph | nx.Graph"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "If True will use the \"label\" attribute of a node to display if it exists otherwise it will use the node value itself. Defaults to True."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "with_labels",
            "type_": "bool"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Mainly relevant for undirected forests, specifies which nodes to list first. If unspecified the root nodes of each tree will be used for directed forests; for undirected forests this defaults to the nodes with the smallest degree."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "sources",
            "type_": "List"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Function to use to write to, if None new lines are appended to a list and returned. If set to the "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "module",
                        "reference": {
                          "kind": "module",
                          "module": "networkx",
                          "path": "networkx.algorithms.similarity.debug_print",
                          "version": "2.7.2rc1.dev0"
                        },
                        "value": "print"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": " function, lines will be written to stdout as they are generated. If specified, this function will return None. Defaults to None."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "write",
            "type_": "callable"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "If True only ASCII characters are used to construct the visualization"
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "ascii_only",
            "type_": "Boolean"
          },
          "type": "Param"
        }
      ],
      "title": null
    },
    "Raises": {
      "children": [],
      "title": null
    },
    "Receives": {
      "children": [],
      "title": null
    },
    "Returns": {
      "children": [
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "utf8 representation of the tree / forest"
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "str | None",
            "type_": ""
          },
          "type": "Param"
        }
      ],
      "title": null
    },
    "Summary": {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Creates a nice utf8 representation of a directed forest"
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": null
    },
    "Warnings": {
      "children": [],
      "title": null
    },
    "Warns": {
      "children": [],
      "title": null
    },
    "Yields": {
      "children": [],
      "title": null
    }
  },
  "aliases": [
    "networkx.forest_str"
  ],
  "arbitrary": [],
  "example_section_data": {
    "children": [
      {
        "data": {
          "ce_status": "execed",
          "entries": [
            [
              "graph",
              "typing.Generator",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "nx",
              "networkx",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "balanced_tree",
              "networkx.generators.classic.balanced_tree",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "r",
              null,
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "2",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "h",
              null,
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "3",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "create_using",
              null,
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "nx",
              "networkx",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "DiGraph",
              "networkx.classes.digraph.DiGraph",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "print",
              "builtins.print",
              "nb"
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "nx",
              "networkx",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "forest_str",
              "networkx.readwrite.text.forest_str",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "graph",
              "typing.Generator",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": "\u2559\u2500\u2500 0\n    \u251c\u2500\u257c 1\n    \u2502\u00a0\u00a0 \u251c\u2500\u257c 3\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u257c 7\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u257c 8\n    \u2502\u00a0\u00a0 \u2514\u2500\u257c 4\n    \u2502\u00a0\u00a0     \u251c\u2500\u257c 9\n    \u2502\u00a0\u00a0     \u2514\u2500\u257c 10\n    \u2514\u2500\u257c 2\n        \u251c\u2500\u257c 5\n        \u2502\u00a0\u00a0 \u251c\u2500\u257c 11\n        \u2502\u00a0\u00a0 \u2514\u2500\u257c 12\n        \u2514\u2500\u257c 6\n            \u251c\u2500\u257c 13\n            \u2514\u2500\u257c 14"
        },
        "type": "Code"
      },
      {
        "data": {
          "ce_status": "execed",
          "entries": [
            [
              "graph",
              "typing.Generator",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "nx",
              "networkx",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "balanced_tree",
              "networkx.generators.classic.balanced_tree",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "r",
              null,
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "1",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "h",
              null,
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "2",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "create_using",
              null,
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "nx",
              "networkx",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "Graph",
              "networkx.classes.graph.Graph",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "print",
              "builtins.print",
              "nb"
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "nx",
              "networkx",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "forest_str",
              "networkx.readwrite.text.forest_str",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "graph",
              "typing.Generator",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": "\u2559\u2500\u2500 0\n    \u2514\u2500\u2500 1\n        \u2514\u2500\u2500 2"
        },
        "type": "Code"
      },
      {
        "data": {
          "ce_status": "execed",
          "entries": [
            [
              "print",
              "builtins.print",
              "nb"
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "nx",
              "networkx",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "forest_str",
              "networkx.readwrite.text.forest_str",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "graph",
              "typing.Generator",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "ascii_only",
              null,
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "True",
              null,
              "kc"
            ],
            [
              ")",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": "+-- 0\n    L-- 1\n        L-- 2"
        },
        "type": "Code"
      }
    ],
    "title": null
  },
  "item_file": "networkx/readwrite/text.py",
  "item_line": 8,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Parameters",
    "Returns",
    "Examples"
  ],
  "references": null,
  "refs": [
    "builtins.print",
    "networkx",
    "networkx.classes.digraph.DiGraph",
    "networkx.classes.graph.Graph",
    "networkx.generators.classic.balanced_tree",
    "networkx.readwrite.text.forest_str",
    "typing.Generator"
  ],
  "see_also": [],
  "signature": {
    "value": "forest_str(graph, with_labels=True, sources=None, write=None, ascii_only=False)"
  }
}