{
  "_content": {
    "Attributes": {
      "children": [],
      "title": null
    },
    "Extended Summary": {
      "children": [],
      "title": null
    },
    "Methods": {
      "children": [],
      "title": null
    },
    "Notes": {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Note that this decorator solves the problem when a path argument is specified as a string, but it does not handle the situation when the function wants to accept a default of None (and then handle it)."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Here is an example of how to handle this case::    "
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": "@open_file(\"path\")\ndef some_function(arg1, arg2, path=None):\n   if path is None:\n       fobj = tempfile.NamedTemporaryFile(delete=False)\n   else:\n       # `path` could have been a string or file object or something\n       # similar. In any event, the decorator has given us a file object\n       # and it will close it for us, if it should.\n       fobj = path\n\n   try:\n       fobj.write(\"blah\")\n   finally:\n       if path is None:\n           fobj.close()"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Normally, we'd want to use \"with\" to ensure that fobj gets closed. However, the decorator will make "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "path"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " a file object for us, and using \"with\" would undesirably close that file object. Instead, we use a try block, as shown above. When we exit the function, fobj will be closed, if it should be, by the decorator."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": null
    },
    "Other Parameters": {
      "children": [],
      "title": null
    },
    "Parameters": {
      "children": [
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Name or index of the argument that is a path."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "path_arg",
            "type_": "string or int"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "String for opening mode."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "mode",
            "type_": "str"
          },
          "type": "Param"
        }
      ],
      "title": null
    },
    "Raises": {
      "children": [],
      "title": null
    },
    "Receives": {
      "children": [],
      "title": null
    },
    "Returns": {
      "children": [
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Function which cleanly executes the io."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "_open_file",
            "type_": "function"
          },
          "type": "Param"
        }
      ],
      "title": null
    },
    "Summary": {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Decorator to ensure clean opening and closing of files."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": null
    },
    "Warnings": {
      "children": [],
      "title": null
    },
    "Warns": {
      "children": [],
      "title": null
    },
    "Yields": {
      "children": [],
      "title": null
    }
  },
  "aliases": [
    "networkx.adjlist.open_file"
  ],
  "arbitrary": [],
  "example_section_data": {
    "children": [
      {
        "data": {
          "value": [
            "@open_file(0,\"r\")",
            "def read_function(pathname):",
            "    pass"
          ]
        },
        "type": "BlockQuote"
      },
      {
        "data": {
          "value": [
            "@open_file(1,\"w\")",
            "def write_function(G, pathname):",
            "    pass"
          ]
        },
        "type": "BlockQuote"
      },
      {
        "data": {
          "value": [
            "@open_file(1,\"w\")",
            "def write_function(G, pathname=\"graph.dot\"):",
            "    pass"
          ]
        },
        "type": "BlockQuote"
      },
      {
        "data": {
          "value": [
            "@open_file(\"pathname\",\"w\")",
            "def write_function(G, pathname=\"graph.dot\"):",
            "    pass"
          ]
        },
        "type": "BlockQuote"
      },
      {
        "data": {
          "value": [
            "@open_file(\"path\", \"w+\")",
            "def another_function(arg, **kwargs):",
            "    path = kwargs[\"path\"]",
            "    pass"
          ]
        },
        "type": "BlockQuote"
      }
    ],
    "title": null
  },
  "item_file": "networkx/utils/decorators.py",
  "item_line": 103,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Parameters",
    "Returns",
    "Examples",
    "Notes"
  ],
  "references": null,
  "refs": [],
  "see_also": [],
  "signature": {
    "value": "open_file(path_arg, mode='r')"
  }
}