{
  "aliases": [
    "networkx.utils.mapped_queue._HeapElement"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "title": null
    },
    "Extended Summary": {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "The idea is that using a 2-tuple (priority, element) works for sorting, but not for dict lookup because priorities are often floating point values so round-off can mess up equality."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "So, we need inequalities to look at the priority (for sorting) and equality (and hash) to look at the element to enable updates to the priority."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Unfortunately, this class can be tricky to work with if you forget that "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "__lt__"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " compares the priority while "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "__eq__"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " compares the element. In "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "greedy_modularity_communities()"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " the following code is used to check that two _HeapElements differ in either element or priority:"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "children": [
                    {
                      "data": {
                        "value": "if d_oldmax != row_max or d_oldmax.priority != row_max.priority:"
                      },
                      "type": "Words"
                    }
                  ]
                },
                "type": "Paragraph"
              }
            ]
          },
          "type": "BlockQuote"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "If the priorities are the same, this implementation uses the element as a tiebreaker. This provides compatibility with older systems that use tuples to combine priority and elements."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": null
    },
    "Methods": {
      "children": [],
      "title": null
    },
    "Notes": {
      "children": [],
      "title": null
    },
    "Other Parameters": {
      "children": [],
      "title": null
    },
    "Parameters": {
      "children": [],
      "title": null
    },
    "Raises": {
      "children": [],
      "title": null
    },
    "Receives": {
      "children": [],
      "title": null
    },
    "Returns": {
      "children": [],
      "title": null
    },
    "Summary": {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "This proxy class separates the heap element from its priority."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": null
    },
    "Warnings": {
      "children": [],
      "title": null
    },
    "Warns": {
      "children": [],
      "title": null
    },
    "Yields": {
      "children": [],
      "title": null
    }
  },
  "example_section_data": {
    "children": [],
    "title": null
  },
  "item_file": "networkx/utils/mapped_queue.py",
  "item_line": 9,
  "item_type": "<class 'type'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary"
  ],
  "references": null,
  "see_also": [],
  "signature": {
    "value": null
  }
}