{
  "aliases": [
    "networkx.all_simple_paths"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    },
    "Extended Summary": {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "A simple path is a path with no repeated nodes."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    },
    "Notes": {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "This algorithm uses a modified depth-first search to generate the paths .  A single path can be found in $O(V+E)$ time but the number of simple paths in a graph can be very large, e.g. $O(n!)$ in the complete graph of order $n$."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "This function does not check that a path exists between "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "source"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " and "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "target"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": ". For large graphs, this may result in very long runtimes. Consider using "
                },
                "type": "Words"
              },
              {
                "data": {
                  "anchor": null,
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "module",
                    "module": "networkx",
                    "path": "networkx.algorithms.shortest_paths.generic.has_path",
                    "version": "2.8.2"
                  },
                  "value": "has_path"
                },
                "type": "Link"
              },
              {
                "data": {
                  "value": " to check that a path exists between "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "source"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " and "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "target"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " before calling this function on large graphs."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    },
    "Parameters": {
      "children": [
        {
          "data": {
            "children": [
              {
                "desc": [],
                "param": "G",
                "type_": "NetworkX graph"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Starting node for path"
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "source",
                "type_": "node"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Single node or iterable of nodes at which to end path"
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "target",
                "type_": "nodes"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Depth to stop the search. Only paths of length <= cutoff are returned."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "cutoff",
                "type_": "integer, optional"
              }
            ]
          },
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    },
    "Returns": {
      "children": [
        {
          "data": {
            "children": [
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "A generator that produces lists of simple paths.  If there are no paths between the source and target within the given cutoff the generator produces no output."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "",
                "type_": "path_generator: generator"
              }
            ]
          },
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null
    },
    "Summary": {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Generate all simple paths in the graph G from source to target."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    }
  },
  "example_section_data": {
    "children": [
      {
        "data": {
          "children": [
            {
              "data": {
                "value": ">>> G = nx.complete_graph(4)\n>>> for path in nx.all_simple_paths(G, source=0, target=3):\n...     print(path)\n...\n[0, 1, 2, 3]\n[0, 1, 3]\n[0, 2, 1, 3]\n[0, 2, 3]\n[0, 3]"
              },
              "type": "BlockVerbatim"
            }
          ]
        },
        "type": "BlockQuote"
      },
      {
        "data": {
          "children": [
            {
              "data": {
                "value": ">>> paths = nx.all_simple_paths(G, source=0, target=3, cutoff=2)\n>>> print(list(paths))\n[[0, 1, 3], [0, 2, 3], [0, 3]]"
              },
              "type": "BlockVerbatim"
            }
          ]
        },
        "type": "BlockQuote"
      },
      {
        "data": {
          "children": [
            {
              "data": {
                "value": ">>> paths = nx.all_simple_paths(G, source=0, target=3)\n>>> for path in map(nx.utils.pairwise, paths):\n...     print(list(path))\n[(0, 1), (1, 2), (2, 3)]\n[(0, 1), (1, 3)]\n[(0, 2), (2, 1), (1, 3)]\n[(0, 2), (2, 3)]\n[(0, 3)]"
              },
              "type": "BlockVerbatim"
            }
          ]
        },
        "type": "BlockQuote"
      },
      {
        "data": {
          "children": [
            {
              "data": {
                "value": ">>> G = nx.complete_graph(4)\n>>> for path in nx.all_simple_paths(G, source=0, target=[3, 2]):\n...     print(path)\n...\n[0, 1, 2]\n[0, 1, 2, 3]\n[0, 1, 3]\n[0, 1, 3, 2]\n[0, 2]\n[0, 2, 1, 3]\n[0, 2, 3]\n[0, 3]\n[0, 3, 1, 2]\n[0, 3, 2]"
              },
              "type": "BlockVerbatim"
            }
          ]
        },
        "type": "BlockQuote"
      },
      {
        "data": {
          "children": [
            {
              "data": {
                "value": ">>> from itertools import chain\n>>> from itertools import product\n>>> from itertools import starmap\n>>> from functools import partial\n>>>\n>>> chaini = chain.from_iterable\n>>>\n>>> G = nx.DiGraph([(0, 1), (1, 2), (0, 3), (3, 2)])\n>>> roots = (v for v, d in G.in_degree() if d == 0)\n>>> leaves = (v for v, d in G.out_degree() if d == 0)\n>>> all_paths = partial(nx.all_simple_paths, G)\n>>> list(chaini(starmap(all_paths, product(roots, leaves))))\n[[0, 1, 2], [0, 3, 2]]"
              },
              "type": "BlockVerbatim"
            }
          ]
        },
        "type": "BlockQuote"
      },
      {
        "data": {
          "children": [
            {
              "data": {
                "value": ">>> G = nx.DiGraph([(0, 1), (1, 2), (0, 3), (3, 2)])\n>>> roots = (v for v, d in G.in_degree() if d == 0)\n>>> leaves = (v for v, d in G.out_degree() if d == 0)\n>>> all_paths = []\n>>> for root in roots:\n...     for leaf in leaves:\n...         paths = nx.all_simple_paths(G, root, leaf)\n...         all_paths.extend(paths)\n>>> all_paths\n[[0, 1, 2], [0, 3, 2]]"
              },
              "type": "BlockVerbatim"
            }
          ]
        },
        "type": "BlockQuote"
      },
      {
        "data": {
          "children": [
            {
              "data": {
                "value": ">>> G = nx.DiGraph([(0, 1), (2, 1), (1, 3), (1, 4)])\n>>> roots = (v for v, d in G.in_degree() if d == 0)\n>>> leaves = [v for v, d in G.out_degree() if d == 0]\n>>> all_paths = []\n>>> for root in roots:\n...     paths = nx.all_simple_paths(G, root, leaves)\n...     all_paths.extend(paths)\n>>> all_paths\n[[0, 1, 3], [0, 1, 4], [2, 1, 3], [2, 1, 4]]"
              },
              "type": "BlockVerbatim"
            }
          ]
        },
        "type": "BlockQuote"
      }
    ],
    "level": 0,
    "target": null,
    "title": null
  },
  "item_file": "/networkx/algorithms/simple_paths.py",
  "item_line": 84,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns",
    "Examples",
    "Notes",
    "References",
    "See Also"
  ],
  "references": null,
  "see_also": [
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "module",
          "module": "networkx",
          "path": "networkx.algorithms.shortest_paths.generic.all_shortest_paths",
          "version": "2.8.2"
        },
        "value": "all_shortest_paths"
      },
      "type": null
    },
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "module",
          "module": "networkx",
          "path": "networkx.algorithms.shortest_paths.generic.shortest_path",
          "version": "2.8.2"
        },
        "value": "shortest_path"
      },
      "type": null
    },
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "module",
          "module": "networkx",
          "path": "networkx.algorithms.shortest_paths.generic.has_path",
          "version": "2.8.2"
        },
        "value": "has_path"
      },
      "type": null
    }
  ],
  "signature": {
    "value": "all_simple_paths(G, source, target, cutoff=None)"
  }
}