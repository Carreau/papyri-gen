{
  "aliases": [
    "networkx.isomorphism.ISMAGS.analyze_symmetry"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    },
    "Extended Summary": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    },
    "Notes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    },
    "Parameters": {
      "children": [
        {
          "data": {
            "children": [
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "The graph whose symmetry should be analyzed."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "graph",
                "type_": "networkx.Graph"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "A list of sets containining node keys. Node keys in the same set are considered equivalent. Every node key in "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "anchor": null,
                            "exists": true,
                            "kind": "local",
                            "reference": {
                              "kind": "local",
                              "module": null,
                              "path": "graph",
                              "version": null
                            },
                            "value": "graph"
                          },
                          "type": "Link"
                        },
                        {
                          "data": {
                            "value": " should be in exactly one of the sets. If all nodes are equivalent, this should be "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "[set(graph.nodes)]"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": "."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "node_partitions",
                "type_": "list of sets"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "A dict mapping every edge in "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "anchor": null,
                            "exists": true,
                            "kind": "local",
                            "reference": {
                              "kind": "local",
                              "module": null,
                              "path": "graph",
                              "version": null
                            },
                            "value": "graph"
                          },
                          "type": "Link"
                        },
                        {
                          "data": {
                            "value": " to its corresponding color. Edges with the same color are considered equivalent. If all edges are equivalent, this should be "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "{e: 0 for e in graph.edges}"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": "."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "edge_colors",
                "type_": "dict mapping edges to their colors"
              }
            ]
          },
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    },
    "Returns": {
      "children": [
        {
          "data": {
            "children": [
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "The found permutations. This is a set of frozensets of pairs of node keys which can be exchanged without changing "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "subgraph"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": "."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "",
                "type_": "set[frozenset]"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "The found co-sets. The co-sets is a dictionary of "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "{node key: set of node keys}"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": ". Every key-value pair describes which "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "values"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " can be interchanged without changing nodes less than "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "key"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": "."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "",
                "type_": "dict[collections.abc.Hashable, set[collections.abc.Hashable]]"
              }
            ]
          },
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null
    },
    "Summary": {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Find a minimal set of permutations and corresponding co-sets that describe the symmetry of "
                },
                "type": "Words"
              },
              {
                "data": {
                  "anchor": null,
                  "exists": true,
                  "kind": "local",
                  "reference": {
                    "kind": "local",
                    "module": null,
                    "path": "graph",
                    "version": null
                  },
                  "value": "graph"
                },
                "type": "Link"
              },
              {
                "data": {
                  "value": ", given the node and edge equalities given by "
                },
                "type": "Words"
              },
              {
                "data": {
                  "anchor": null,
                  "exists": true,
                  "kind": "local",
                  "reference": {
                    "kind": "local",
                    "module": null,
                    "path": "node_partitions",
                    "version": null
                  },
                  "value": "node_partitions"
                },
                "type": "Link"
              },
              {
                "data": {
                  "value": " and "
                },
                "type": "Words"
              },
              {
                "data": {
                  "anchor": null,
                  "exists": true,
                  "kind": "local",
                  "reference": {
                    "kind": "local",
                    "module": null,
                    "path": "edge_colors",
                    "version": null
                  },
                  "value": "edge_colors"
                },
                "type": "Link"
              },
              {
                "data": {
                  "value": ", respectively."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    }
  },
  "example_section_data": {
    "children": [],
    "level": 0,
    "target": null,
    "title": null
  },
  "item_file": "/networkx/algorithms/isomorphism/ismags.py",
  "item_line": 579,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Parameters",
    "Returns"
  ],
  "references": null,
  "see_also": [],
  "signature": {
    "value": "analyze_symmetry(self, graph, node_partitions, edge_colors)"
  }
}