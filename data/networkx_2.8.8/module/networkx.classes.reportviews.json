{
  "aliases": [
    "networkx.reportviews"
  ],
  "arbitrary": [
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "View Classes provide node, edge and degree \"views\" of a graph."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Views for nodes, edges and degree are provided for all base graph classes. A view means a read-only object that is quick to create, automatically updated when the graph changes, and provides basic access like "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "n in V"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "for n in V"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "V[n]"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " and sometimes set operations."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "The views are read-only iterable containers that are updated as the graph is updated. As with dicts, the graph should not be updated while iterating through the view. Views can be iterated multiple times."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Edge and Node views also allow data attribute lookup. The resulting attribute dict is writable as "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "G.edges[3, 4]['color']='red'"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " Degree views allow lookup of degree values for single nodes. Weighted degree is supported with the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "weight"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " argument."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "children": [
                    {
                      "data": {
                        "domain": null,
                        "role": null,
                        "value": "V = G.nodes"
                      },
                      "type": "Directive"
                    },
                    {
                      "data": {
                        "value": " (or "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "domain": null,
                        "role": null,
                        "value": "V = G.nodes()"
                      },
                      "type": "Directive"
                    },
                    {
                      "data": {
                        "value": ") allows "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "domain": null,
                        "role": null,
                        "value": "len(V)"
                      },
                      "type": "Directive"
                    },
                    {
                      "data": {
                        "value": ", "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "domain": null,
                        "role": null,
                        "value": "n in V"
                      },
                      "type": "Directive"
                    },
                    {
                      "data": {
                        "value": ", set     operations e.g. \"G.nodes & H.nodes\", and "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "domain": null,
                        "role": null,
                        "value": "dd = G.nodes[n]"
                      },
                      "type": "Directive"
                    },
                    {
                      "data": {
                        "value": ", where     "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "domain": null,
                        "role": null,
                        "value": "dd"
                      },
                      "type": "Directive"
                    },
                    {
                      "data": {
                        "value": " is the node data dict. Iteration is over the nodes by default."
                      },
                      "type": "Words"
                    }
                  ]
                },
                "type": "Paragraph"
              }
            ]
          },
          "type": "BlockQuote"
        }
      ],
      "level": 0,
      "target": null,
      "title": "NodeView"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "children": [
                    {
                      "data": {
                        "value": "To iterate over (node, data) pairs, use arguments to "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "domain": null,
                        "role": null,
                        "value": "G.nodes()"
                      },
                      "type": "Directive"
                    },
                    {
                      "data": {
                        "value": "     to create a DataView e.g. "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "domain": null,
                        "role": null,
                        "value": "DV = G.nodes(data='color', default='red')"
                      },
                      "type": "Directive"
                    },
                    {
                      "data": {
                        "value": ".     The DataView iterates as "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "domain": null,
                        "role": null,
                        "value": "for n, color in DV"
                      },
                      "type": "Directive"
                    },
                    {
                      "data": {
                        "value": " and allows     "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "domain": null,
                        "role": null,
                        "value": "(n, 'red') in DV"
                      },
                      "type": "Directive"
                    },
                    {
                      "data": {
                        "value": ". Using "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "domain": null,
                        "role": null,
                        "value": "DV = G.nodes(data=True)"
                      },
                      "type": "Directive"
                    },
                    {
                      "data": {
                        "value": ", the DataViews     use the full datadict in writeable form also allowing contain testing as     "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "domain": null,
                        "role": null,
                        "value": "(n, {'color': 'red'}) in VD"
                      },
                      "type": "Directive"
                    },
                    {
                      "data": {
                        "value": ". DataViews allow set operations when     data attributes are hashable."
                      },
                      "type": "Words"
                    }
                  ]
                },
                "type": "Paragraph"
              }
            ]
          },
          "type": "BlockQuote"
        }
      ],
      "level": 0,
      "target": null,
      "title": "NodeDataView"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "children": [
                    {
                      "data": {
                        "domain": null,
                        "role": null,
                        "value": "V = G.degree"
                      },
                      "type": "Directive"
                    },
                    {
                      "data": {
                        "value": " allows iteration over (node, degree) pairs as well     as lookup: "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "domain": null,
                        "role": null,
                        "value": "deg=V[n]"
                      },
                      "type": "Directive"
                    },
                    {
                      "data": {
                        "value": ". There are many flavors of DegreeView     for In/Out/Directed/Multi. For Directed Graphs, "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "domain": null,
                        "role": null,
                        "value": "G.degree"
                      },
                      "type": "Directive"
                    },
                    {
                      "data": {
                        "value": "     counts both in and out going edges. "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "domain": null,
                        "role": null,
                        "value": "G.out_degree"
                      },
                      "type": "Directive"
                    },
                    {
                      "data": {
                        "value": " and     "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "domain": null,
                        "role": null,
                        "value": "G.in_degree"
                      },
                      "type": "Directive"
                    },
                    {
                      "data": {
                        "value": " count only specific directions.     Weighted degree using edge data attributes is provide via     "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "domain": null,
                        "role": null,
                        "value": "V = G.degree(weight='attr_name')"
                      },
                      "type": "Directive"
                    },
                    {
                      "data": {
                        "value": " where any string with the     attribute name can be used. "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "domain": null,
                        "role": null,
                        "value": "weight=None"
                      },
                      "type": "Directive"
                    },
                    {
                      "data": {
                        "value": " is the default.     No set operations are implemented for degrees, use NodeView."
                      },
                      "type": "Words"
                    }
                  ]
                },
                "type": "Paragraph"
              },
              {
                "data": {
                  "children": [
                    {
                      "data": {
                        "value": "The argument "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "anchor": null,
                        "exists": true,
                        "kind": "module",
                        "reference": {
                          "kind": "module",
                          "module": "networkx",
                          "path": "networkx.classes.graph.Graph.nbunch_iter",
                          "version": "2.8.8"
                        },
                        "value": "nbunch"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": " restricts iteration to nodes in nbunch.     The DegreeView can still lookup any node even if nbunch is specified."
                      },
                      "type": "Words"
                    }
                  ]
                },
                "type": "Paragraph"
              }
            ]
          },
          "type": "BlockQuote"
        }
      ],
      "level": 0,
      "target": null,
      "title": "DegreeView"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "children": [
                    {
                      "data": {
                        "domain": null,
                        "role": null,
                        "value": "V = G.edges"
                      },
                      "type": "Directive"
                    },
                    {
                      "data": {
                        "value": " or "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "domain": null,
                        "role": null,
                        "value": "V = G.edges()"
                      },
                      "type": "Directive"
                    },
                    {
                      "data": {
                        "value": " allows iteration over edges as well as     "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "domain": null,
                        "role": null,
                        "value": "e in V"
                      },
                      "type": "Directive"
                    },
                    {
                      "data": {
                        "value": ", set operations and edge data lookup "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "domain": null,
                        "role": null,
                        "value": "dd = G.edges[2, 3]"
                      },
                      "type": "Directive"
                    },
                    {
                      "data": {
                        "value": ".     Iteration is over 2-tuples "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "domain": null,
                        "role": null,
                        "value": "(u, v)"
                      },
                      "type": "Directive"
                    },
                    {
                      "data": {
                        "value": " for Graph/DiGraph. For multigraphs     edges 3-tuples "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "domain": null,
                        "role": null,
                        "value": "(u, v, key)"
                      },
                      "type": "Directive"
                    },
                    {
                      "data": {
                        "value": " are the default but 2-tuples can be obtained     via "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "domain": null,
                        "role": null,
                        "value": "V = G.edges(keys=False)"
                      },
                      "type": "Directive"
                    },
                    {
                      "data": {
                        "value": "."
                      },
                      "type": "Words"
                    }
                  ]
                },
                "type": "Paragraph"
              },
              {
                "data": {
                  "children": [
                    {
                      "data": {
                        "value": "Set operations for directed graphs treat the edges as a set of 2-tuples.     For undirected graphs, 2-tuples are not a unique representation of edges.     So long as the set being compared to contains unique representations     of its edges, the set operations will act as expected. If the other     set contains both "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "domain": null,
                        "role": null,
                        "value": "(0, 1)"
                      },
                      "type": "Directive"
                    },
                    {
                      "data": {
                        "value": " and "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "domain": null,
                        "role": null,
                        "value": "(1, 0)"
                      },
                      "type": "Directive"
                    },
                    {
                      "data": {
                        "value": " however, the result of set     operations may contain both representations of the same edge."
                      },
                      "type": "Words"
                    }
                  ]
                },
                "type": "Paragraph"
              }
            ]
          },
          "type": "BlockQuote"
        }
      ],
      "level": 0,
      "target": null,
      "title": "EdgeView"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "children": [
                    {
                      "data": {
                        "value": "Edge data can be reported using an EdgeDataView typically created     by calling an EdgeView: "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "domain": null,
                        "role": null,
                        "value": "DV = G.edges(data='weight', default=1)"
                      },
                      "type": "Directive"
                    },
                    {
                      "data": {
                        "value": ".     The EdgeDataView allows iteration over edge tuples, membership checking     but no set operations."
                      },
                      "type": "Words"
                    }
                  ]
                },
                "type": "Paragraph"
              },
              {
                "data": {
                  "children": [
                    {
                      "data": {
                        "value": "Iteration depends on "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "domain": null,
                        "role": null,
                        "value": "data"
                      },
                      "type": "Directive"
                    },
                    {
                      "data": {
                        "value": " and "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "anchor": null,
                        "exists": true,
                        "kind": "module",
                        "reference": {
                          "kind": "module",
                          "module": "networkx",
                          "path": "networkx.utils.misc.default_opener",
                          "version": "2.8.8"
                        },
                        "value": "default"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": " and for multigraph "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "anchor": null,
                        "exists": true,
                        "kind": "module",
                        "reference": {
                          "kind": "module",
                          "module": "networkx",
                          "path": "networkx.readwrite.graphml.GraphMLReader.find_graphml_keys",
                          "version": "2.8.8"
                        },
                        "value": "keys"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": "     If "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "domain": null,
                        "role": null,
                        "value": "data is False"
                      },
                      "type": "Directive"
                    },
                    {
                      "data": {
                        "value": " (the default) then iterate over 2-tuples "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "domain": null,
                        "role": null,
                        "value": "(u, v)"
                      },
                      "type": "Directive"
                    },
                    {
                      "data": {
                        "value": ".     If "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "domain": null,
                        "role": null,
                        "value": "data is True"
                      },
                      "type": "Directive"
                    },
                    {
                      "data": {
                        "value": " iterate over 3-tuples "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "domain": null,
                        "role": null,
                        "value": "(u, v, datadict)"
                      },
                      "type": "Directive"
                    },
                    {
                      "data": {
                        "value": ".     Otherwise iterate over "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "domain": null,
                        "role": null,
                        "value": "(u, v, datadict.get(data, default))"
                      },
                      "type": "Directive"
                    },
                    {
                      "data": {
                        "value": ".     For Multigraphs, if "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "domain": null,
                        "role": null,
                        "value": "keys is True"
                      },
                      "type": "Directive"
                    },
                    {
                      "data": {
                        "value": ", replace "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "domain": null,
                        "role": null,
                        "value": "u, v"
                      },
                      "type": "Directive"
                    },
                    {
                      "data": {
                        "value": " with "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "domain": null,
                        "role": null,
                        "value": "u, v, key"
                      },
                      "type": "Directive"
                    },
                    {
                      "data": {
                        "value": "     to create 3-tuples and 4-tuples."
                      },
                      "type": "Words"
                    }
                  ]
                },
                "type": "Paragraph"
              },
              {
                "data": {
                  "children": [
                    {
                      "data": {
                        "value": "The argument "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "anchor": null,
                        "exists": true,
                        "kind": "module",
                        "reference": {
                          "kind": "module",
                          "module": "networkx",
                          "path": "networkx.classes.graph.Graph.nbunch_iter",
                          "version": "2.8.8"
                        },
                        "value": "nbunch"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": " restricts edges to those incident to nodes in nbunch."
                      },
                      "type": "Words"
                    }
                  ]
                },
                "type": "Paragraph"
              }
            ]
          },
          "type": "BlockQuote"
        }
      ],
      "level": 0,
      "target": null,
      "title": "EdgeDataView"
    }
  ],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    },
    "Extended Summary": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    },
    "Notes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    },
    "Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    },
    "Returns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    },
    "Summary": {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "To remove in the future \u2013\u2013 networkx.classes.reportviews"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    }
  },
  "example_section_data": {
    "children": [],
    "level": 0,
    "target": null,
    "title": null
  },
  "item_file": "/networkx/classes/reportviews.py",
  "item_line": 0,
  "item_type": "<class 'module'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary"
  ],
  "references": null,
  "see_also": [],
  "signature": {
    "value": null
  }
}