{
  "aliases": [
    "networkx.degree_mixing_matrix"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Definitions of degree mixing matrix vary on whether the matrix should include rows for degree values that don't arise. Here we do not include such empty-rows. But you can force them to appear by inputting a "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "mapping",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "mapping"
            },
            {
              "type": "text",
              "value": " that includes those values. See examples."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "NetworkX graph object."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "G",
              "type": "Param",
              "type_": "graph"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The degree type for source node (directed graphs only)."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "x: string ('in','out')",
              "type": "Param",
              "type_": ""
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The degree type for target node (directed graphs only)."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "y: string ('in','out')",
              "type": "Param",
              "type_": ""
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Build the matrix using only nodes in container. The default is all nodes."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "nodes: list or iterable (optional)",
              "type": "Param",
              "type_": ""
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The edge attribute that holds the numerical value used as a weight.  If None, then each edge has weight 1. The degree is the sum of the edge weights adjacent to the node."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "weight: string or None, optional (default=None)",
              "type": "Param",
              "type_": ""
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Return counts if False or probabilities if True."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "normalized",
              "type": "Param",
              "type_": "bool (default=True)"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Mapping from node degree to integer index in matrix. If not specified, an arbitrary ordering will be used."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "mapping",
              "type": "Param",
              "type_": "dictionary, optional"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Counts, or joint probability, of occurrence of node degree."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "",
              "type": "Param",
              "type_": "m: numpy array"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Returns mixing matrix for attribute."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [
      {
        "type": "code",
        "value": "G = nx.star_graph(3)\nmix_mat = nx.degree_mixing_matrix(G)\nmix_mat[0, 1]  # mixing from node degree 1 to node degree 3"
      },
      {
        "type": "text",
        "value": "If you want every possible degree to appear as a row, even if no nodes\nhave that degree, use `mapping` as follows,"
      },
      {
        "type": "code",
        "value": "max_degree = max(deg for n, deg in G.degree)\nmapping = {x: x for x in range(max_degree + 1)} # identity mapping\nmix_mat = nx.degree_mixing_matrix(G, mapping=mapping)\nmix_mat[3, 1]  # mixing from node degree 3 to node degree 1"
      }
    ],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/networkx/algorithms/assortativity/mixing.py",
  "item_line": 144,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Parameters",
    "Returns",
    "Notes",
    "Examples"
  ],
  "references": null,
  "see_also": [],
  "signature": {
    "type": "Signature",
    "value": "(G, x='out', y='in', weight=None, nodes=None, normalized=True, mapping=None)"
  },
  "type": "DocBlob"
}