{
  "aliases": [
    "networkx.bipartite.betweenness_centrality"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Betweenness centrality of a node "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "v"
            },
            {
              "type": "text",
              "value": " is the sum of the fraction of all-pairs shortest paths that pass through "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "v"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Values of betweenness are normalized by the maximum possible value which for bipartite graphs is limited by the relative size of the two node sets ."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Let "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "n"
            },
            {
              "type": "text",
              "value": " be the number of nodes in the node set "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "U"
            },
            {
              "type": "text",
              "value": " and "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "m"
            },
            {
              "type": "text",
              "value": " be the number of nodes in the node set "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "V"
            },
            {
              "type": "text",
              "value": ", then nodes in "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "U"
            },
            {
              "type": "text",
              "value": " are normalized by dividing by"
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "math",
          "value": "\\frac{1}{2} [m^2 (s + 1)^2 + m (s + 1)(2t - s - 1) - t (2s - t + 3)] ,"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "where"
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "math",
          "value": "s = (n - 1) \\div m , t = (n - 1) \\mod m ,"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "and nodes in "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "V"
            },
            {
              "type": "text",
              "value": " are normalized by dividing by"
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "math",
          "value": "\\frac{1}{2} [n^2 (p + 1)^2 + n (p + 1)(2r - p - 1) - r (2p - r + 3)] ,"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "where,"
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "math",
          "value": "p = (m - 1) \\div n , r = (m - 1) \\mod n ."
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "The nodes input parameter must contain all nodes in one bipartite node set, but the dictionary returned contains all nodes from both node sets. See "
            },
            {
              "type": "inlineCode",
              "value": "bipartite documentation <networkx.algorithms.bipartite>"
            },
            {
              "type": "text",
              "value": " for further details on how bipartite graphs are handled in NetworkX."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "A bipartite graph"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "G",
              "type": "Param",
              "type_": "graph"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Container with all nodes in one bipartite node set."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "nodes",
              "type": "Param",
              "type_": "list or container"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Dictionary keyed by node with bipartite betweenness centrality as the value."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "betweenness",
              "type": "Param",
              "type_": "dictionary"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Compute betweenness centrality for nodes in a bipartite network."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/networkx/algorithms/bipartite/centrality.py",
  "item_line": 73,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns",
    "See Also",
    "Notes",
    "References"
  ],
  "references": null,
  "see_also": [
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "to-resolve",
          "module": "current-module",
          "path": "degree_centrality",
          "type": "RefInfo",
          "version": "current-version"
        },
        "type": "Link",
        "value": "degree_centrality"
      },
      "type": null
    },
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "to-resolve",
          "module": "current-module",
          "path": "closeness_centrality",
          "type": "RefInfo",
          "version": "current-version"
        },
        "type": "Link",
        "value": "closeness_centrality"
      },
      "type": null
    },
    {
      "descriptions": [
        {
          "children": [
            {
              "type": "text",
              "value": "func"
            }
          ],
          "type": "paragraph"
        }
      ],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "to-resolve",
          "module": "current-module",
          "path": "~networkx.algorithms.bipartite.basic.sets",
          "type": "RefInfo",
          "version": "current-version"
        },
        "type": "Link",
        "value": "~networkx.algorithms.bipartite.basic.sets"
      },
      "type": null
    },
    {
      "descriptions": [
        {
          "children": [
            {
              "type": "text",
              "value": "func"
            }
          ],
          "type": "paragraph"
        }
      ],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "to-resolve",
          "module": "current-module",
          "path": "~networkx.algorithms.bipartite.basic.is_bipartite",
          "type": "RefInfo",
          "version": "current-version"
        },
        "type": "Link",
        "value": "~networkx.algorithms.bipartite.basic.is_bipartite"
      },
      "type": null
    }
  ],
  "signature": {
    "type": "Signature",
    "value": "(G, nodes)"
  },
  "type": "DocBlob"
}