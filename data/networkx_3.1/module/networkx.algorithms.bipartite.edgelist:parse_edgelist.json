{
  "aliases": [
    "networkx.bipartite.parse_edgelist"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Input data in edgelist format"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "lines",
              "type": "Param",
              "type_": "list or iterator of strings"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Marker for comment lines"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "comments",
              "type": "Param",
              "type_": "string, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Separator for node labels"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "delimiter",
              "type": "Param",
              "type_": "string, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Use given NetworkX graph for holding nodes or edges."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "create_using: NetworkX graph container, optional",
              "type": "Param",
              "type_": ""
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Convert nodes to this type."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "nodetype",
              "type": "Param",
              "type_": "Python type, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "If False generate no edge data or if True use a dictionary representation of edge data or a list tuples specifying dictionary key names and types for edge data."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "data",
              "type": "Param",
              "type_": "bool or list of (label,type) tuples"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The bipartite graph corresponding to lines"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "",
              "type": "Param",
              "type_": "G: NetworkX Graph"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Parse lines of an edge list representation of a bipartite graph."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [
      {
        "type": "text",
        "value": "Edgelist with no data:"
      },
      {
        "type": "code",
        "value": "from networkx.algorithms import bipartite\nlines = [\"1 2\", \"2 3\", \"3 4\"]\nG = bipartite.parse_edgelist(lines, nodetype=int)\nsorted(G.nodes())"
      },
      {
        "type": "code",
        "value": "sorted(G.nodes(data=True))"
      },
      {
        "type": "code",
        "value": "sorted(G.edges())"
      },
      {
        "type": "text",
        "value": "Edgelist with data in Python dictionary representation:"
      },
      {
        "type": "code",
        "value": "lines = [\"1 2 {'weight':3}\", \"2 3 {'weight':27}\", \"3 4 {'weight':3.0}\"]\nG = bipartite.parse_edgelist(lines, nodetype=int)\nsorted(G.nodes())"
      },
      {
        "type": "code",
        "value": "sorted(G.edges(data=True))"
      },
      {
        "type": "text",
        "value": "Edgelist with data in a list:"
      },
      {
        "type": "code",
        "value": "lines = [\"1 2 3\", \"2 3 27\", \"3 4 3.0\"]\nG = bipartite.parse_edgelist(lines, nodetype=int, data=((\"weight\", float),))\nsorted(G.nodes())"
      },
      {
        "type": "code",
        "value": "sorted(G.edges(data=True))"
      }
    ],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/networkx/algorithms/bipartite/edgelist.py",
  "item_line": 149,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Parameters",
    "Returns",
    "Examples",
    "See Also"
  ],
  "references": null,
  "see_also": [],
  "signature": {
    "type": "Signature",
    "value": "(lines, comments='#', delimiter=None, create_using=None, nodetype=None, data=True)"
  },
  "type": "DocBlob"
}