{
  "aliases": [
    "networkx.bipartite.write_edgelist"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "A NetworkX bipartite graph"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "G",
              "type": "Param",
              "type_": "Graph"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "File or filename to write. If a file is provided, it must be opened in 'wb' mode. Filenames ending in .gz or .bz2 will be compressed."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "path",
              "type": "Param",
              "type_": "file or string"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The character used to indicate the start of a comment"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "comments",
              "type": "Param",
              "type_": "string, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The string used to separate values.  The default is whitespace."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "delimiter",
              "type": "Param",
              "type_": "string, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "If False write no edge data. If True write a string representation of the edge data dictionary.. If a list (or other iterable) is provided, write the  keys specified in the list."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "data",
              "type": "Param",
              "type_": "bool or list, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Specify which encoding to use when writing file."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "encoding: string, optional",
              "type": "Param",
              "type_": ""
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Write a bipartite graph as a list of edges."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [
      {
        "type": "code",
        "value": "G = nx.path_graph(4)\nG.add_nodes_from([0, 2], bipartite=0)\nG.add_nodes_from([1, 3], bipartite=1)\nnx.write_edgelist(G, \"test.edgelist\")\nfh = open(\"test.edgelist\", \"wb\")\nnx.write_edgelist(G, fh)\nnx.write_edgelist(G, \"test.edgelist.gz\")\nnx.write_edgelist(G, \"test.edgelist.gz\", data=False)"
      },
      {
        "type": "code",
        "value": "G = nx.Graph()\nG.add_edge(1, 2, weight=7, color=\"red\")\nnx.write_edgelist(G, \"test.edgelist\", data=False)\nnx.write_edgelist(G, \"test.edgelist\", data=[\"color\"])\nnx.write_edgelist(G, \"test.edgelist\", data=[\"color\", \"weight\"])"
      }
    ],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/networkx/algorithms/bipartite/edgelist.py",
  "item_line": 31,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Parameters",
    "Examples",
    "See Also"
  ],
  "references": null,
  "see_also": [
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "to-resolve",
          "module": "current-module",
          "path": "write_edgelist",
          "type": "RefInfo",
          "version": "current-version"
        },
        "type": "Link",
        "value": "write_edgelist"
      },
      "type": null
    },
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "to-resolve",
          "module": "current-module",
          "path": "generate_edgelist",
          "type": "RefInfo",
          "version": "current-version"
        },
        "type": "Link",
        "value": "generate_edgelist"
      },
      "type": null
    }
  ],
  "signature": {
    "type": "Signature",
    "value": "(G, path, comments='#', delimiter=' ', data=True, encoding='utf-8')"
  },
  "type": "DocBlob"
}