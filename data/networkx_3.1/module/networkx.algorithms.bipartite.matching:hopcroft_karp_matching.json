{
  "aliases": [
    "networkx.bipartite.hopcroft_karp_matching"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "A matching is a set of edges that do not share any nodes. A maximum cardinality matching is a matching with the most edges possible. It is not always unique. Finding a matching in a bipartite graph can be treated as a networkx flow problem."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "The functions "
            },
            {
              "type": "inlineCode",
              "value": "hopcroft_karp_matching"
            },
            {
              "type": "text",
              "value": " and "
            },
            {
              "type": "inlineCode",
              "value": "maximum_matching"
            },
            {
              "type": "text",
              "value": " are aliases of the same function."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "This function is implemented with the "
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "Hopcroft--Karp matching algorithm"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://en.wikipedia.org/wiki/Hopcroft%E2%80%93Karp_algorithm"
            },
            {
              "type": "text",
              "value": " for bipartite graphs."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "See "
            },
            {
              "type": "inlineCode",
              "value": "bipartite documentation <networkx.algorithms.bipartite>"
            },
            {
              "type": "text",
              "value": " for further details on how bipartite graphs are handled in NetworkX."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Undirected bipartite graph"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "G",
              "type": "Param",
              "type_": "NetworkX graph"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Container with all nodes in one bipartite node set. If not supplied it will be computed. But if more than one solution exists an exception will be raised."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "top_nodes",
              "type": "Param",
              "type_": "container of nodes"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Raised if the input bipartite graph is disconnected and no container with all nodes in one bipartite set is provided. When determining the nodes in each bipartite set more than one valid solution is possible if the input graph is disconnected."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "",
              "type": "Param",
              "type_": "AmbiguousSolution"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The matching is returned as a dictionary, "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "matches",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "matches"
                    },
                    {
                      "type": "text",
                      "value": ", such that "
                    },
                    {
                      "type": "inlineCode",
                      "value": "matches[v] == w"
                    },
                    {
                      "type": "text",
                      "value": " if node "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "v"
                    },
                    {
                      "type": "text",
                      "value": " is matched to node "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "w"
                    },
                    {
                      "type": "text",
                      "value": ". Unmatched nodes do not occur as a key in "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "matches",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "matches"
                    },
                    {
                      "type": "text",
                      "value": "."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "matches",
              "type": "Param",
              "type_": "dictionary"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Returns the maximum cardinality matching of the bipartite graph "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "G",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "G"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/networkx/algorithms/bipartite/matching.py",
  "item_line": 57,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns",
    "Raises",
    "Notes",
    "See Also",
    "References"
  ],
  "references": null,
  "see_also": [
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "to-resolve",
          "module": "current-module",
          "path": "maximum_matching",
          "type": "RefInfo",
          "version": "current-version"
        },
        "type": "Link",
        "value": "maximum_matching"
      },
      "type": null
    },
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "module",
          "module": "networkx",
          "path": "networkx.algorithms.bipartite.matching:hopcroft_karp_matching",
          "type": "RefInfo",
          "version": "3.1"
        },
        "type": "Link",
        "value": "hopcroft_karp_matching"
      },
      "type": null
    },
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "module",
          "module": "networkx",
          "path": "networkx.algorithms.bipartite.matching:eppstein_matching",
          "type": "RefInfo",
          "version": "3.1"
        },
        "type": "Link",
        "value": "eppstein_matching"
      },
      "type": null
    }
  ],
  "signature": {
    "type": "Signature",
    "value": "(G, top_nodes=None)"
  },
  "type": "DocBlob"
}