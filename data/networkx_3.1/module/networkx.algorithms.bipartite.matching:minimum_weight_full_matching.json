{
  "aliases": [
    "networkx.bipartite.minimum_weight_full_matching"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Let "
            },
            {
              "type": "inlineMath",
              "value": "G = ((U, V), E)"
            },
            {
              "type": "text",
              "value": " be a weighted bipartite graph with real weights "
            },
            {
              "type": "inlineMath",
              "value": "w : E \\to \\mathbb{R}"
            },
            {
              "type": "text",
              "value": ". This function then produces a matching "
            },
            {
              "type": "inlineMath",
              "value": "M \\subseteq E"
            },
            {
              "type": "text",
              "value": " with cardinality"
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "math",
          "value": "\\lvert M \\rvert = \\min(\\lvert U \\rvert, \\lvert V \\rvert),"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "which minimizes the sum of the weights of the edges included in the matching, "
            },
            {
              "type": "inlineMath",
              "value": "\\sum_{e \\in M} w(e)"
            },
            {
              "type": "text",
              "value": ", or raises an error if no such matching exists."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "When "
            },
            {
              "type": "inlineMath",
              "value": "\\lvert U \\rvert = \\lvert V \\rvert"
            },
            {
              "type": "text",
              "value": ", this is commonly referred to as a perfect matching; here, since we allow "
            },
            {
              "type": "inlineMath",
              "value": "\\lvert U \\rvert"
            },
            {
              "type": "text",
              "value": " and "
            },
            {
              "type": "inlineMath",
              "value": "\\lvert V \\rvert"
            },
            {
              "type": "text",
              "value": " to differ, we follow Karp  and refer to the matching as "
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "full"
                }
              ],
              "type": "emphasis"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "The problem of determining a minimum weight full matching is also known as the rectangular linear assignment problem. This implementation defers the calculation of the assignment to SciPy."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Undirected bipartite graph"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "G",
              "type": "Param",
              "type_": "NetworkX graph"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Container with all nodes in one bipartite node set. If not supplied it will be computed."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "top_nodes",
              "type": "Param",
              "type_": "container"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The edge data key used to provide each value in the matrix."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "weight",
              "type": "Param",
              "type_": "string, optional (default='weight')"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Raised if no full matching exists."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "",
              "type": "Param",
              "type_": "ValueError"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Raised if SciPy is not available."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "",
              "type": "Param",
              "type_": "ImportError"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The matching is returned as a dictionary, "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "matches",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "matches"
                    },
                    {
                      "type": "text",
                      "value": ", such that "
                    },
                    {
                      "type": "inlineCode",
                      "value": "matches[v] == w"
                    },
                    {
                      "type": "text",
                      "value": " if node "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "v"
                    },
                    {
                      "type": "text",
                      "value": " is matched to node "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "w"
                    },
                    {
                      "type": "text",
                      "value": ". Unmatched nodes do not occur as a key in "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "matches",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "matches"
                    },
                    {
                      "type": "text",
                      "value": "."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "matches",
              "type": "Param",
              "type_": "dictionary"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Returns a minimum weight full matching of the bipartite graph "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "G",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "G"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/networkx/algorithms/bipartite/matching.py",
  "item_line": 501,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns",
    "Raises",
    "Notes",
    "References"
  ],
  "references": null,
  "see_also": [],
  "signature": {
    "type": "Signature",
    "value": "(G, top_nodes=None, weight='weight')"
  },
  "type": "DocBlob"
}