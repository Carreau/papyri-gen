{
  "aliases": [
    "networkx.projected_graph"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Returns the graph G that is the projection of the bipartite graph B onto the specified nodes. They retain their attributes and are connected in G if they have a common neighbor in B."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "No attempt is made to verify that the input graph B is bipartite. Returns a simple graph that is the projection of the bipartite graph B onto the set of nodes given in list nodes.  If multigraph=True then a multigraph is returned with an edge for every shared neighbor."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Directed graphs are allowed as input.  The output will also then be a directed graph with edges if there is a directed path between the nodes."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "The graph and node properties are (shallow) copied to the projected graph."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "See "
            },
            {
              "type": "inlineCode",
              "value": "bipartite documentation <networkx.algorithms.bipartite>"
            },
            {
              "type": "text",
              "value": " for further details on how bipartite graphs are handled in NetworkX."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The input graph should be bipartite."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "B",
              "type": "Param",
              "type_": "NetworkX graph"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Nodes to project onto (the \"bottom\" nodes)."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "nodes",
              "type": "Param",
              "type_": "list or iterable"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "If True return a multigraph where the multiple edges represent multiple shared neighbors.  They edge key in the multigraph is assigned to the label of the neighbor."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "multigraph: bool (default=False)",
              "type": "Param",
              "type_": ""
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "A graph that is the projection onto the given nodes."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "Graph",
              "type": "Param",
              "type_": "NetworkX graph or multigraph"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Returns the projection of B onto one of its node sets."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [
      {
        "type": "code",
        "value": "from networkx.algorithms import bipartite\nB = nx.path_graph(4)\nG = bipartite.projected_graph(B, [1, 3])\nlist(G)"
      },
      {
        "type": "code",
        "value": "list(G.edges())"
      },
      {
        "type": "text",
        "value": "If nodes `a`, and `b` are connected through both nodes 1 and 2 then\nbuilding a multigraph results in two edges in the projection onto\n[`a`, `b`]:"
      },
      {
        "type": "code",
        "value": "B = nx.Graph()\nB.add_edges_from([(\"a\", 1), (\"b\", 1), (\"a\", 2), (\"b\", 2)])\nG = bipartite.projected_graph(B, [\"a\", \"b\"], multigraph=True)\nprint([sorted((u, v)) for u, v in G.edges()])"
      }
    ],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/networkx/algorithms/bipartite/projection.py",
  "item_line": 15,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns",
    "Examples",
    "Notes",
    "See Also"
  ],
  "references": null,
  "see_also": [
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "to-resolve",
          "module": "current-module",
          "path": "is_bipartite",
          "type": "RefInfo",
          "version": "current-version"
        },
        "type": "Link",
        "value": "is_bipartite"
      },
      "type": null
    },
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "module",
          "module": "networkx",
          "path": "networkx.algorithms.bipartite.basic:is_bipartite_node_set",
          "type": "RefInfo",
          "version": "3.1"
        },
        "type": "Link",
        "value": "is_bipartite_node_set"
      },
      "type": null
    },
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "to-resolve",
          "module": "current-module",
          "path": "sets",
          "type": "RefInfo",
          "version": "current-version"
        },
        "type": "Link",
        "value": "sets"
      },
      "type": null
    },
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "to-resolve",
          "module": "current-module",
          "path": "weighted_projected_graph",
          "type": "RefInfo",
          "version": "current-version"
        },
        "type": "Link",
        "value": "weighted_projected_graph"
      },
      "type": null
    },
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "module",
          "module": "networkx",
          "path": "networkx.algorithms.bipartite.projection:collaboration_weighted_projected_graph",
          "type": "RefInfo",
          "version": "3.1"
        },
        "type": "Link",
        "value": "collaboration_weighted_projected_graph"
      },
      "type": null
    },
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "module",
          "module": "networkx",
          "path": "networkx.algorithms.bipartite.projection:overlap_weighted_projected_graph",
          "type": "RefInfo",
          "version": "3.1"
        },
        "type": "Link",
        "value": "overlap_weighted_projected_graph"
      },
      "type": null
    },
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "module",
          "module": "networkx",
          "path": "networkx.algorithms.bipartite.projection:generic_weighted_projected_graph",
          "type": "RefInfo",
          "version": "3.1"
        },
        "type": "Link",
        "value": "generic_weighted_projected_graph"
      },
      "type": null
    }
  ],
  "signature": {
    "type": "Signature",
    "value": "(B, nodes, multigraph=False)"
  },
  "type": "DocBlob"
}