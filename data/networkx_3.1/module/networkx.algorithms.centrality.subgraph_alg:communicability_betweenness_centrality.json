{
  "aliases": [
    "networkx.communicability_betweenness_centrality"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Communicability betweenness measure makes use of the number of walks connecting every pair of nodes as the basis of a betweenness centrality measure."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Let "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "G=(V,E)"
            },
            {
              "type": "text",
              "value": " be a simple undirected graph with "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "n"
            },
            {
              "type": "text",
              "value": " nodes and "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "m"
            },
            {
              "type": "text",
              "value": " edges, and "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "A"
            },
            {
              "type": "text",
              "value": " denote the adjacency matrix of "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "G"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Let "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "G(r)=(V,E(r))"
            },
            {
              "type": "text",
              "value": " be the graph resulting from removing all edges connected to node "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "r"
            },
            {
              "type": "text",
              "value": " but not the node itself."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "The adjacency matrix for "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "G(r)"
            },
            {
              "type": "text",
              "value": " is "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "A+E(r)"
            },
            {
              "type": "text",
              "value": ",  where "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "E(r)"
            },
            {
              "type": "text",
              "value": " has nonzeros only in row and column "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "r"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "The subraph betweenness of a node "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "r"
            },
            {
              "type": "text",
              "value": "  is"
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "math",
          "value": "\\omega_{r} = \\frac{1}{C}\\sum_{p}\\sum_{q}\\frac{G_{prq}}{G_{pq}},\np\\neq q, q\\neq r,"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "where "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "G_{prq}=(e^{A}_{pq} - (e^{A+E(r)})_{pq}"
            },
            {
              "type": "text",
              "value": "  is the number of walks involving node r, "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "G_{pq}=(e^{A})_{pq}"
            },
            {
              "type": "text",
              "value": " is the number of closed walks starting at node "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "module",
              "reference": {
                "kind": "module",
                "module": "networkx",
                "path": "networkx.generators.degree_seq:DegreeSequenceRandomGraph.p",
                "type": "RefInfo",
                "version": "3.1"
              },
              "type": "Link",
              "value": "p"
            },
            {
              "type": "text",
              "value": " and ending at node "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "module",
              "reference": {
                "kind": "module",
                "module": "networkx",
                "path": "networkx.generators.degree_seq:DegreeSequenceRandomGraph.q",
                "type": "RefInfo",
                "version": "3.1"
              },
              "type": "Link",
              "value": "q"
            },
            {
              "type": "text",
              "value": ", and "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "C=(n-1)^{2}-(n-1)"
            },
            {
              "type": "text",
              "value": " is a normalization factor equal to the number of terms in the sum."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "The resulting "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "\\omega_{r}"
            },
            {
              "type": "text",
              "value": " takes values between zero and one. The lower bound cannot be attained for a connected graph, and the upper bound is attained in the star graph."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [],
              "param": "G: graph",
              "type": "Param",
              "type_": ""
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "If the graph is not undirected and simple."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "",
              "type": "Param",
              "type_": "NetworkXError"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Dictionary of nodes with communicability betweenness as the value."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "nodes",
              "type": "Param",
              "type_": "dictionary"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Returns subgraph communicability for all pairs of nodes in G."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [
      {
        "type": "code",
        "value": "G = nx.Graph([(0, 1), (1, 2), (1, 5), (5, 4), (2, 4), (2, 3), (4, 3), (3, 6)])\ncbc = nx.communicability_betweenness_centrality(G)\nprint([f\"{node} {cbc[node]:0.2f}\" for node in sorted(cbc)])"
      }
    ],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/networkx/algorithms/centrality/subgraph_alg.py",
  "item_line": 189,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns",
    "Raises",
    "Notes",
    "References",
    "Examples"
  ],
  "references": null,
  "see_also": [],
  "signature": {
    "type": "Signature",
    "value": "(G)"
  },
  "type": "DocBlob"
}