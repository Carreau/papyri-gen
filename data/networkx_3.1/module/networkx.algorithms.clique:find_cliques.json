{
  "aliases": [
    "networkx.find_cliques"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "For each node "
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "n"
                }
              ],
              "type": "emphasis"
            },
            {
              "type": "text",
              "value": ", a "
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "maximal clique for n"
                }
              ],
              "type": "emphasis"
            },
            {
              "type": "text",
              "value": " is a largest complete subgraph containing "
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "n"
                }
              ],
              "type": "emphasis"
            },
            {
              "type": "text",
              "value": ". The largest maximal clique is sometimes called the "
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "maximum clique"
                }
              ],
              "type": "emphasis"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "This function returns an iterator over cliques, each of which is a list of nodes. It is an iterative implementation, so should not suffer from recursion depth issues."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "This function accepts a list of "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "nodes",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "nodes"
            },
            {
              "type": "text",
              "value": " and only the maximal cliques containing all of these "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "nodes",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "nodes"
            },
            {
              "type": "text",
              "value": " are returned. It can considerably speed up the running time if some specific cliques are desired."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "To obtain a list of all maximal cliques, use "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "list(find_cliques(G))"
            },
            {
              "type": "text",
              "value": ". However, be aware that in the worst-case, the length of this list can be exponential in the number of nodes in the graph. This function avoids storing all cliques in memory by only keeping current candidate node lists in memory during its search."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "This implementation is based on the algorithm published by Bron and Kerbosch (1973) , as adapted by Tomita, Tanaka and Takahashi (2006)  and discussed in Cazals and Karande (2008) . It essentially unrolls the recursion used in the references to avoid issues of recursion stack depth (for a recursive implementation, see "
            },
            {
              "type": "inlineCode",
              "value": "find_cliques_recursive"
            },
            {
              "type": "text",
              "value": ")."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "This algorithm ignores self-loops and parallel edges, since cliques are not conventionally defined with such edges."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "An undirected graph."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "G",
              "type": "Param",
              "type_": "NetworkX graph"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "If provided, only yield "
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "maximal cliques"
                        }
                      ],
                      "type": "emphasis"
                    },
                    {
                      "type": "text",
                      "value": " containing all nodes in "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "nodes",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "nodes"
                    },
                    {
                      "type": "text",
                      "value": ". If "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "nodes",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "nodes"
                    },
                    {
                      "type": "text",
                      "value": " isn't a clique itself, a ValueError is raised."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "nodes",
              "type": "Param",
              "type_": "list, optional (default=None)"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "If "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "nodes",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "nodes"
                    },
                    {
                      "type": "text",
                      "value": " is not a clique."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "",
              "type": "Param",
              "type_": "ValueError"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "An iterator over maximal cliques, each of which is a list of nodes in "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "G",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "G"
                    },
                    {
                      "type": "text",
                      "value": ". If "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "nodes",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "nodes"
                    },
                    {
                      "type": "text",
                      "value": " is provided, only the maximal cliques containing all the nodes in "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "nodes",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "nodes"
                    },
                    {
                      "type": "text",
                      "value": " are returned. The order of cliques is arbitrary."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "",
              "type": "Param",
              "type_": "iterator"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Returns all maximal cliques in an undirected graph."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [
      {
        "type": "code",
        "value": "from pprint import pprint  # For nice dict formatting\nG = nx.karate_club_graph()\nsum(1 for c in nx.find_cliques(G))  # The number of maximal cliques in G"
      },
      {
        "type": "code",
        "value": "max(nx.find_cliques(G), key=len)  # The largest maximal clique in G"
      },
      {
        "type": "text",
        "value": "The size of the largest maximal clique is known as the *clique number* of\nthe graph, which can be found directly with:"
      },
      {
        "type": "code",
        "value": "max(len(c) for c in nx.find_cliques(G))"
      },
      {
        "type": "text",
        "value": "One can also compute the number of maximal cliques in `G` that contain a given\nnode. The following produces a dictionary keyed by node whose\nvalues are the number of maximal cliques in `G` that contain the node:"
      },
      {
        "type": "code",
        "value": "pprint({n: sum(1 for c in nx.find_cliques(G) if n in c) for n in G})"
      },
      {
        "type": "text",
        "value": "Or, similarly, the maximal cliques in `G` that contain a given node.\nFor example, the 4 maximal cliques that contain node 31:"
      },
      {
        "type": "code",
        "value": "[c for c in nx.find_cliques(G) if 31 in c]"
      }
    ],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/networkx/algorithms/clique.py",
  "item_line": 102,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns",
    "Raises",
    "Examples",
    "See Also",
    "Notes",
    "References"
  ],
  "references": null,
  "see_also": [
    {
      "descriptions": [
        {
          "children": [
            {
              "type": "text",
              "value": "A recursive version of the same algorithm."
            }
          ],
          "type": "paragraph"
        }
      ],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "module",
          "module": "networkx",
          "path": "networkx.algorithms.clique:find_cliques_recursive",
          "type": "RefInfo",
          "version": "3.1"
        },
        "type": "Link",
        "value": "find_cliques_recursive"
      },
      "type": null
    }
  ],
  "signature": {
    "type": "Signature",
    "value": "(G, nodes=None)"
  },
  "type": "DocBlob"
}