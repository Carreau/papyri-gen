{
  "aliases": [
    "networkx.community.quality._require_partition"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Raises "
            },
            {
              "type": "inlineCode",
              "value": "networkx.NetworkXError"
            },
            {
              "type": "text",
              "value": " if the partition is not valid."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "This decorator should be used on functions whose first two arguments are a graph and a partition of the nodes of that graph (in that order)      "
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": ">>> @require_partition\n... def foo(G, partition):\n...     print(\"partition is valid!\")\n...\n>>> G = nx.complete_graph(5)\n>>> partition = [{0, 1}, {2, 3}, {4}]\n>>> foo(G, partition)\npartition is valid!\n>>> partition = [{0}, {2, 3}, {4}]\n>>> foo(G, partition)\nTraceback (most recent call last):\n  ...\nnetworkx.exception.NetworkXError: `partition` is not a valid partition of the nodes of G\n>>> partition = [{0, 1}, {1, 2, 3}, {4}]\n>>> foo(G, partition)\nTraceback (most recent call last):\n  ...\nnetworkx.exception.NetworkXError: `partition` is not a valid partition of the nodes of G"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Decorator to check that a valid partition is input to a function"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/networkx/algorithms/community/quality.py",
  "item_line": 25,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary"
  ],
  "references": null,
  "see_also": [],
  "signature": {
    "type": "Signature",
    "value": "(G, partition)"
  },
  "type": "DocBlob"
}