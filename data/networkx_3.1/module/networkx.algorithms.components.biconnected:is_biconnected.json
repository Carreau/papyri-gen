{
  "aliases": [
    "networkx.is_biconnected"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "A graph is biconnected if, and only if, it cannot be disconnected by removing only one node (and all edges incident on that node).  If removing a node increases the number of disconnected components in the graph, that node is called an articulation point, or cut vertex.  A biconnected graph has no articulation points."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "The algorithm to find articulation points and biconnected components is implemented using a non-recursive depth-first-search (DFS) that keeps track of the highest level that back edges reach in the DFS tree.  A node "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "n"
            },
            {
              "type": "text",
              "value": " is an articulation point if, and only if, there exists a subtree rooted at "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "n"
            },
            {
              "type": "text",
              "value": " such that there is no back edge from any successor of "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "n"
            },
            {
              "type": "text",
              "value": " that links to a predecessor of "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "n"
            },
            {
              "type": "text",
              "value": " in the DFS tree.  By keeping track of all the edges traversed by the DFS we can obtain the biconnected components because all edges of a bicomponent will be traversed consecutively between articulation points."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "An undirected graph."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "G",
              "type": "Param",
              "type_": "NetworkX Graph"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "If the input graph is not undirected."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "",
              "type": "Param",
              "type_": "NetworkXNotImplemented"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "True if the graph is biconnected, False otherwise."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "biconnected",
              "type": "Param",
              "type_": "bool"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Returns True if the graph is biconnected, False otherwise."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [
      {
        "type": "code",
        "value": "G = nx.path_graph(4)\nprint(nx.is_biconnected(G))"
      },
      {
        "type": "code",
        "value": "G.add_edge(0, 3)\nprint(nx.is_biconnected(G))"
      }
    ],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/networkx/algorithms/components/biconnected.py",
  "item_line": 14,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns",
    "Raises",
    "Examples",
    "See Also",
    "Notes",
    "References"
  ],
  "references": null,
  "see_also": [
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "module",
          "module": "networkx",
          "path": "networkx.algorithms.components.biconnected:biconnected_components",
          "type": "RefInfo",
          "version": "3.1"
        },
        "type": "Link",
        "value": "biconnected_components"
      },
      "type": null
    },
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "module",
          "module": "networkx",
          "path": "networkx.algorithms.components.biconnected:articulation_points",
          "type": "RefInfo",
          "version": "3.1"
        },
        "type": "Link",
        "value": "articulation_points"
      },
      "type": null
    },
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "module",
          "module": "networkx",
          "path": "networkx.algorithms.components.biconnected:biconnected_component_edges",
          "type": "RefInfo",
          "version": "3.1"
        },
        "type": "Link",
        "value": "biconnected_component_edges"
      },
      "type": null
    },
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "to-resolve",
          "module": "current-module",
          "path": "is_strongly_connected",
          "type": "RefInfo",
          "version": "current-version"
        },
        "type": "Link",
        "value": "is_strongly_connected"
      },
      "type": null
    },
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "module",
          "module": "networkx",
          "path": "networkx.algorithms.components.weakly_connected:is_weakly_connected",
          "type": "RefInfo",
          "version": "3.1"
        },
        "type": "Link",
        "value": "is_weakly_connected"
      },
      "type": null
    },
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "to-resolve",
          "module": "current-module",
          "path": "is_connected",
          "type": "RefInfo",
          "version": "current-version"
        },
        "type": "Link",
        "value": "is_connected"
      },
      "type": null
    },
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "module",
          "module": "networkx",
          "path": "networkx.algorithms.components.semiconnected:is_semiconnected",
          "type": "RefInfo",
          "version": "3.1"
        },
        "type": "Link",
        "value": "is_semiconnected"
      },
      "type": null
    }
  ],
  "signature": {
    "type": "Signature",
    "value": "(G)"
  },
  "type": "DocBlob"
}