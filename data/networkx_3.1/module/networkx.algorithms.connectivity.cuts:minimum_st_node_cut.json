{
  "aliases": [
    "networkx.connectivity.minimum_st_node_cut"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "This function returns the set of nodes of minimum cardinality that, if removed, would destroy all paths among source and target in G."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "This is a flow based implementation of minimum node cut. The algorithm is based in solving a number of maximum flow computations to determine the capacity of the minimum cut on an auxiliary directed network that corresponds to the minimum node cut of G. It handles both directed and undirected graphs. This implementation is based on algorithm 11 in ."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [],
              "param": "G",
              "type": "Param",
              "type_": "NetworkX graph"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Source node."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "s",
              "type": "Param",
              "type_": "node"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Target node."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "t",
              "type": "Param",
              "type_": "node"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "A function for computing the maximum flow among a pair of nodes. The function has to accept at least three parameters: a Digraph, a source node, and a target node. And return a residual network that follows NetworkX conventions (see "
                    },
                    {
                      "type": "inlineCode",
                      "value": "maximum_flow"
                    },
                    {
                      "type": "text",
                      "value": " for details). If flow_func is None, the default maximum flow function ("
                    },
                    {
                      "type": "inlineCode",
                      "value": "edmonds_karp"
                    },
                    {
                      "type": "text",
                      "value": ") is used. See below for details. The choice of the default function may change from version to version and should not be relied on. Default value: None."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "flow_func",
              "type": "Param",
              "type_": "function"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Auxiliary digraph to compute flow based node connectivity. It has to have a graph attribute called mapping with a dictionary mapping node names in G and in the auxiliary digraph. If provided it will be reused instead of recreated. Default value: None."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "auxiliary",
              "type": "Param",
              "type_": "NetworkX DiGraph"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Residual network to compute maximum flow. If provided it will be reused instead of recreated. Default value: None."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "residual",
              "type": "Param",
              "type_": "NetworkX DiGraph"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Set of nodes that, if removed, would destroy all paths between source and target in G."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "cutset",
              "type": "Param",
              "type_": "set"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Returns a set of nodes of minimum cardinality that disconnect source from target in G."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [
      {
        "type": "text",
        "value": "This function is not imported in the base NetworkX namespace, so you\nhave to explicitly import it from the connectivity package:"
      },
      {
        "type": "code",
        "value": "from networkx.algorithms.connectivity import minimum_st_node_cut"
      },
      {
        "type": "text",
        "value": "We use in this example the platonic icosahedral graph, which has node\nconnectivity 5."
      },
      {
        "type": "code",
        "value": "G = nx.icosahedral_graph()\nlen(minimum_st_node_cut(G, 0, 6))"
      },
      {
        "type": "text",
        "value": "If you need to compute local st cuts between several pairs of\nnodes in the same graph, it is recommended that you reuse the\ndata structures that NetworkX uses in the computation: the\nauxiliary digraph for node connectivity and node cuts, and the\nresidual network for the underlying maximum flow computation."
      },
      {
        "type": "text",
        "value": "Example of how to compute local st node cuts reusing the data\nstructures:"
      },
      {
        "type": "code",
        "value": "# You also have to explicitly import the function for\n# building the auxiliary digraph from the connectivity package\nfrom networkx.algorithms.connectivity import build_auxiliary_node_connectivity\nH = build_auxiliary_node_connectivity(G)\n# And the function for building the residual network from the\n# flow package\nfrom networkx.algorithms.flow import build_residual_network\n# Note that the auxiliary digraph has an edge attribute named capacity\nR = build_residual_network(H, \"capacity\")\n# Reuse the auxiliary digraph and the residual network by passing them\n# as parameters\nlen(minimum_st_node_cut(G, 0, 6, auxiliary=H, residual=R))"
      },
      {
        "type": "text",
        "value": "You can also use alternative flow algorithms for computing minimum st\nnode cuts. For instance, in dense networks the algorithm\n:meth:`shortest_augmenting_path` will usually perform better than\nthe default :meth:`edmonds_karp` which is faster for sparse\nnetworks with highly skewed degree distributions. Alternative flow\nfunctions have to be explicitly imported from the flow package."
      },
      {
        "type": "code",
        "value": "from networkx.algorithms.flow import shortest_augmenting_path\nlen(minimum_st_node_cut(G, 0, 6, flow_func=shortest_augmenting_path))"
      }
    ],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/networkx/algorithms/connectivity/cuts.py",
  "item_line": 156,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns",
    "Examples",
    "Notes",
    "See Also",
    "References"
  ],
  "references": null,
  "see_also": [
    {
      "descriptions": [
        {
          "children": [
            {
              "type": "text",
              "value": "meth"
            }
          ],
          "type": "paragraph"
        }
      ],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "module",
          "module": "networkx",
          "path": "networkx.algorithms.connectivity.cuts:minimum_node_cut",
          "type": "RefInfo",
          "version": "3.1"
        },
        "type": "Link",
        "value": "minimum_node_cut"
      },
      "type": null
    },
    {
      "descriptions": [
        {
          "children": [
            {
              "type": "text",
              "value": "meth"
            }
          ],
          "type": "paragraph"
        }
      ],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "module",
          "module": "networkx",
          "path": "networkx.algorithms.connectivity.cuts:minimum_edge_cut",
          "type": "RefInfo",
          "version": "3.1"
        },
        "type": "Link",
        "value": "minimum_edge_cut"
      },
      "type": null
    },
    {
      "descriptions": [
        {
          "children": [
            {
              "type": "text",
              "value": "meth"
            }
          ],
          "type": "paragraph"
        }
      ],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "module",
          "module": "networkx",
          "path": "networkx.algorithms.connectivity.stoerwagner:stoer_wagner",
          "type": "RefInfo",
          "version": "3.1"
        },
        "type": "Link",
        "value": "stoer_wagner"
      },
      "type": null
    },
    {
      "descriptions": [
        {
          "children": [
            {
              "type": "text",
              "value": "meth"
            }
          ],
          "type": "paragraph"
        }
      ],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "to-resolve",
          "module": "current-module",
          "path": "node_connectivity",
          "type": "RefInfo",
          "version": "current-version"
        },
        "type": "Link",
        "value": "node_connectivity"
      },
      "type": null
    },
    {
      "descriptions": [
        {
          "children": [
            {
              "type": "text",
              "value": "meth"
            }
          ],
          "type": "paragraph"
        }
      ],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "to-resolve",
          "module": "current-module",
          "path": "edge_connectivity",
          "type": "RefInfo",
          "version": "current-version"
        },
        "type": "Link",
        "value": "edge_connectivity"
      },
      "type": null
    },
    {
      "descriptions": [
        {
          "children": [
            {
              "type": "text",
              "value": "meth"
            }
          ],
          "type": "paragraph"
        }
      ],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "to-resolve",
          "module": "current-module",
          "path": "maximum_flow",
          "type": "RefInfo",
          "version": "current-version"
        },
        "type": "Link",
        "value": "maximum_flow"
      },
      "type": null
    },
    {
      "descriptions": [
        {
          "children": [
            {
              "type": "text",
              "value": "meth"
            }
          ],
          "type": "paragraph"
        }
      ],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "to-resolve",
          "module": "current-module",
          "path": "edmonds_karp",
          "type": "RefInfo",
          "version": "current-version"
        },
        "type": "Link",
        "value": "edmonds_karp"
      },
      "type": null
    },
    {
      "descriptions": [
        {
          "children": [
            {
              "type": "text",
              "value": "meth"
            }
          ],
          "type": "paragraph"
        }
      ],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "to-resolve",
          "module": "current-module",
          "path": "preflow_push",
          "type": "RefInfo",
          "version": "current-version"
        },
        "type": "Link",
        "value": "preflow_push"
      },
      "type": null
    },
    {
      "descriptions": [
        {
          "children": [
            {
              "type": "text",
              "value": "meth"
            }
          ],
          "type": "paragraph"
        }
      ],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "to-resolve",
          "module": "current-module",
          "path": "shortest_augmenting_path",
          "type": "RefInfo",
          "version": "current-version"
        },
        "type": "Link",
        "value": "shortest_augmenting_path"
      },
      "type": null
    }
  ],
  "signature": {
    "type": "Signature",
    "value": "(G, s, t, flow_func=None, auxiliary=None, residual=None)"
  },
  "type": "DocBlob"
}