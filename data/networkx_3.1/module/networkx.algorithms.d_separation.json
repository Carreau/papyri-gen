{
  "aliases": [
    "networkx.d_separation"
  ],
  "arbitrary": [
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Algorithm for testing d-separation in DAGs."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "children": [
                {
                  "type": "text",
                  "value": "d-separation"
                }
              ],
              "type": "emphasis"
            },
            {
              "type": "text",
              "value": " is a test for conditional independence in probability distributions that can be factorized using DAGs.  It is a purely graphical test that uses the underlying graph and makes no reference to the actual distribution parameters.  See  for a formal definition."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "The implementation is based on the conceptually simple linear time algorithm presented in .  Refer to ,  for a couple of alternative algorithms."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Here, we provide a brief overview of d-separation and related concepts that are relevant for understanding it:"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Before we overview, we introduce the following terminology to describe paths:"
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "\"open\" path: A path between two nodes that can be traversed"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "\"blocked\" path: A path between two nodes that cannot be traversed"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            }
          ],
          "ordered": false,
          "spread": false,
          "start": 1,
          "type": "list"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "A "
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "collider"
                }
              ],
              "type": "strong"
            },
            {
              "type": "text",
              "value": " is a triplet of nodes along a path that is like the following: "
            },
            {
              "type": "inlineCode",
              "value": "... u -> c <- v ..."
            },
            {
              "type": "text",
              "value": "), where 'c' is a common successor of "
            },
            {
              "type": "inlineCode",
              "value": "u"
            },
            {
              "type": "text",
              "value": " and "
            },
            {
              "type": "inlineCode",
              "value": "v"
            },
            {
              "type": "text",
              "value": ". A path through a collider is considered \"blocked\". When a node that is a collider, or a descendant of a collider is included in the d-separating set, then the path through that collider node is \"open\". If the path through the collider node is open, then we will call this node an open collider."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "The d-separation set blocks the paths between "
            },
            {
              "type": "inlineCode",
              "value": "u"
            },
            {
              "type": "text",
              "value": " and "
            },
            {
              "type": "inlineCode",
              "value": "v"
            },
            {
              "type": "text",
              "value": ". If you include colliders, or their descendant nodes in the d-separation set, then those colliders will open up, enabling a path to be traversed if it is not blocked some other way."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": "Blocking paths",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "For a pair of two nodes, "
            },
            {
              "type": "inlineCode",
              "value": "u"
            },
            {
              "type": "text",
              "value": " and "
            },
            {
              "type": "inlineCode",
              "value": "v"
            },
            {
              "type": "text",
              "value": ", all paths are considered open if there is a path between "
            },
            {
              "type": "inlineCode",
              "value": "u"
            },
            {
              "type": "text",
              "value": " and "
            },
            {
              "type": "inlineCode",
              "value": "v"
            },
            {
              "type": "text",
              "value": " that is not blocked. That means, there is an open path between "
            },
            {
              "type": "inlineCode",
              "value": "u"
            },
            {
              "type": "text",
              "value": " and "
            },
            {
              "type": "inlineCode",
              "value": "v"
            },
            {
              "type": "text",
              "value": " that does not encounter a collider, or a variable in the d-separating set."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "For example, if the d-separating set is the empty set, then the following paths are unblocked between "
            },
            {
              "type": "inlineCode",
              "value": "u"
            },
            {
              "type": "text",
              "value": " and "
            },
            {
              "type": "inlineCode",
              "value": "v"
            },
            {
              "type": "text",
              "value": ":"
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "u <- z -> v"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "u -> w -> ... -> z -> v"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            }
          ],
          "ordered": false,
          "spread": false,
          "start": 1,
          "type": "list"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "If for example, 'z' is in the d-separating set, then 'z' blocks those paths between "
            },
            {
              "type": "inlineCode",
              "value": "u"
            },
            {
              "type": "text",
              "value": " and "
            },
            {
              "type": "inlineCode",
              "value": "v"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Colliders block a path by default if they and their descendants are not included in the d-separating set. An example of a path that is blocked when the d-separating set is empty is:"
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "u -> w -> ... -> z <- v"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            }
          ],
          "ordered": false,
          "spread": false,
          "start": 1,
          "type": "list"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "because 'z' is a collider in this path and 'z' is not in the d-separating set. However, if 'z' or a descendant of 'z' is included in the d-separating set, then the path through the collider at 'z' (... -> z <- ...) is now \"open\"."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "D-separation is concerned with blocking all paths between u and v. Therefore, a d-separating set between "
            },
            {
              "type": "inlineCode",
              "value": "u"
            },
            {
              "type": "text",
              "value": " and "
            },
            {
              "type": "inlineCode",
              "value": "v"
            },
            {
              "type": "text",
              "value": " is one where all paths are blocked."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": "Illustration of D-separation with examples",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "D-separation is commonly used in probabilistic graphical models. D-separation connects the idea of probabilistic \"dependence\" with separation in a graph. If one assumes the causal Markov condition , then d-separation implies conditional independence in probability distributions."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": "D-separation and its applications in probability",
      "type": "Section"
    },
    {
      "children": [
        {
          "type": "code",
          "value": ">>>\n>>> # HMM graph with five states and observation nodes\n... g = nx.DiGraph()\n>>> g.add_edges_from(\n...     [\n...         (\"S1\", \"S2\"),\n...         (\"S2\", \"S3\"),\n...         (\"S3\", \"S4\"),\n...         (\"S4\", \"S5\"),\n...         (\"S1\", \"O1\"),\n...         (\"S2\", \"O2\"),\n...         (\"S3\", \"O3\"),\n...         (\"S4\", \"O4\"),\n...         (\"S5\", \"O5\"),\n...     ]\n... )\n>>>\n>>> # states/obs before 'S3' are d-separated from states/obs after 'S3'\n... nx.d_separated(g, {\"S1\", \"S2\", \"O1\", \"O2\"}, {\"S4\", \"S5\", \"O4\", \"O5\"}, {\"S3\"})\nTrue"
        }
      ],
      "level": 0,
      "target": null,
      "title": "Examples",
      "type": "Section"
    },
    {
      "children": [
        {
          "placeholder": "footnote",
          "type": "Unimplemented",
          "value": ".. [1] Pearl, J.  (2009).  Causality.  Cambridge: Cambridge University Press."
        },
        {
          "placeholder": "footnote",
          "type": "Unimplemented",
          "value": ".. [2] Darwiche, A.  (2009).  Modeling and reasoning with Bayesian networks. \n   Cambridge: Cambridge University Press."
        },
        {
          "placeholder": "footnote",
          "type": "Unimplemented",
          "value": ".. [3] Shachter, R.  D.  (1998).\n   Bayes-ball: rational pastime (for determining irrelevance and requisite\n   information in belief networks and influence diagrams).\n   In , Proceedings of the Fourteenth Conference on Uncertainty in Artificial\n   Intelligence (pp.  480\u2013487).\n   San Francisco, CA, USA: Morgan Kaufmann Publishers Inc."
        },
        {
          "placeholder": "footnote",
          "type": "Unimplemented",
          "value": ".. [4] Koller, D., & Friedman, N. (2009).\n   Probabilistic graphical models: principles and techniques. The MIT Press."
        },
        {
          "placeholder": "footnote",
          "type": "Unimplemented",
          "value": ".. [5] https://en.wikipedia.org/wiki/Causal_Markov_condition"
        }
      ],
      "level": 0,
      "target": null,
      "title": "References",
      "type": "Section"
    }
  ],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "To remove in the future \u2013\u2013 networkx.algorithms.d_separation"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/networkx/algorithms/d_separation.py",
  "item_line": 0,
  "item_type": "<class 'module'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary"
  ],
  "references": null,
  "see_also": [],
  "signature": {
    "type": "Signature",
    "value": null
  },
  "type": "DocBlob"
}