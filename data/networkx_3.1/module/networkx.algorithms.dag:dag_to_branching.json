{
  "aliases": [
    "networkx.dag_to_branching"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "As described in "
            },
            {
              "type": "inlineCode",
              "value": "networkx.algorithms.tree.recognition"
            },
            {
              "type": "text",
              "value": ", a "
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "branching"
                }
              ],
              "type": "emphasis"
            },
            {
              "type": "text",
              "value": " is a directed forest in which each node has at most one parent. In other words, a branching is a disjoint union of "
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "arborescences"
                }
              ],
              "type": "emphasis"
            },
            {
              "type": "text",
              "value": ". For this function, each node of in-degree zero in "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "G",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "G"
            },
            {
              "type": "text",
              "value": " becomes a root of one of the arborescences, and there will be one leaf node for each distinct path from that root to a leaf node in "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "G",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "G"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Each node "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "v"
            },
            {
              "type": "text",
              "value": " in "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "G",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "G"
            },
            {
              "type": "text",
              "value": " with "
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "k"
                }
              ],
              "type": "emphasis"
            },
            {
              "type": "text",
              "value": " parents becomes "
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "k"
                }
              ],
              "type": "emphasis"
            },
            {
              "type": "text",
              "value": " distinct nodes in the returned branching, one for each parent, and the sub-DAG rooted at "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "v"
            },
            {
              "type": "text",
              "value": " is duplicated for each copy. The algorithm then recurses on the children of each copy of "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "v"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "This function is not idempotent in the sense that the node labels in the returned branching may be uniquely generated each time the function is invoked. In fact, the node labels may not be integers; in order to relabel the nodes to be more readable, you can use the "
            },
            {
              "type": "inlineCode",
              "value": "networkx.convert_node_labels_to_integers"
            },
            {
              "type": "text",
              "value": " function."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "The current implementation of this function uses "
            },
            {
              "type": "inlineCode",
              "value": "networkx.prefix_tree"
            },
            {
              "type": "text",
              "value": ", so it is subject to the limitations of that function."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "A directed acyclic graph."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "G",
              "type": "Param",
              "type_": "NetworkX graph"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "If "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "G",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "G"
                    },
                    {
                      "type": "text",
                      "value": " is not directed, or if "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "G",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "G"
                    },
                    {
                      "type": "text",
                      "value": " is a multigraph."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "",
              "type": "Param",
              "type_": "NetworkXNotImplemented"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "If "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "G",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "G"
                    },
                    {
                      "type": "text",
                      "value": " is not acyclic."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "",
              "type": "Param",
              "type_": "HasACycle"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The branching in which there is a bijection between root-to-leaf paths in "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "G",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "G"
                    },
                    {
                      "type": "text",
                      "value": " (in which multiple paths may share the same leaf) and root-to-leaf paths in the branching (in which there is a unique path from a root to a leaf)."
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Each node has an attribute 'source' whose value is the original node to which this node corresponds. No other graph, node, or edge attributes are copied into this new graph."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "",
              "type": "Param",
              "type_": "DiGraph"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Returns a branching representing all (overlapping) paths from root nodes to leaf nodes in the given directed acyclic graph."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [
      {
        "type": "text",
        "value": "To examine which nodes in the returned branching were produced by\nwhich original node in the directed acyclic graph, we can collect\nthe mapping from source node to new nodes into a dictionary. For\nexample, consider the directed diamond graph::"
      },
      {
        "type": "text",
        "value": "    >>> from collections import defaultdict\n    >>> from operator import itemgetter\n    >>>\n    >>> G = nx.DiGraph(nx.utils.pairwise(\"abd\"))\n    >>> G.add_edges_from(nx.utils.pairwise(\"acd\"))\n    >>> B = nx.dag_to_branching(G)\n    >>>\n    >>> sources = defaultdict(set)\n    >>> for v, source in B.nodes(data=\"source\"):\n    ...     sources[source].add(v)\n    >>> len(sources[\"a\"])\n    1\n    >>> len(sources[\"d\"])\n    2"
      },
      {
        "type": "text",
        "value": "To copy node attributes from the original graph to the new graph,\nyou can use a dictionary like the one constructed in the above\nexample::"
      },
      {
        "type": "text",
        "value": "    >>> for source, nodes in sources.items():\n    ...     for v in nodes:\n    ...         B.nodes[v].update(G.nodes[source])"
      }
    ],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/networkx/algorithms/dag.py",
  "item_line": 1110,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns",
    "Raises",
    "Examples",
    "Notes"
  ],
  "references": null,
  "see_also": [],
  "signature": {
    "type": "Signature",
    "value": "(G)"
  },
  "type": "DocBlob"
}