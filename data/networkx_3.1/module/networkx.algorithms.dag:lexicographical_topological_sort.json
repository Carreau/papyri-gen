{
  "aliases": [
    "networkx.lexicographical_topological_sort"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Generates a unique ordering of nodes by first sorting topologically (for which there are often multiple valid orderings) and then additionally by sorting lexicographically."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "A topological sort arranges the nodes of a directed graph so that the upstream node of each directed edge precedes the downstream node. It is always possible to find a solution for directed graphs that have no cycles. There may be more than one valid solution."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Lexicographical sorting is just sorting alphabetically. It is used here to break ties in the topological sort and to determine a single, unique ordering.  This can be useful in comparing sort results."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "The lexicographical order can be customized by providing a function to the "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "key="
            },
            {
              "type": "text",
              "value": " parameter. The definition of the key function is the same as used in python's built-in "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "sort()"
            },
            {
              "type": "text",
              "value": ". The function takes a single argument and returns a key to use for sorting purposes."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Lexicographical sorting can fail if the node names are un-sortable. See the example below. The solution is to provide a function to the "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "key="
            },
            {
              "type": "text",
              "value": " argument that returns sortable keys."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "This algorithm is based on a description and proof in \"Introduction to Algorithms: A Creative Approach\"  ."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "A directed acyclic graph (DAG)"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "G",
              "type": "Param",
              "type_": "NetworkX digraph"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "A function of one argument that converts a node name to a comparison key. It defines and resolves ambiguities in the sort order.  Defaults to the identity function."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "key",
              "type": "Param",
              "type_": "function, optional"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Topological sort is defined for directed graphs only. If the graph "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "G",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "G"
                    },
                    {
                      "type": "text",
                      "value": " is undirected, a "
                    },
                    {
                      "type": "inlineCode",
                      "value": "NetworkXError"
                    },
                    {
                      "type": "text",
                      "value": " is raised."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "",
              "type": "Param",
              "type_": "NetworkXError"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "If "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "G",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "G"
                    },
                    {
                      "type": "text",
                      "value": " is not a directed acyclic graph (DAG) no topological sort exists and a "
                    },
                    {
                      "type": "inlineCode",
                      "value": "NetworkXUnfeasible"
                    },
                    {
                      "type": "text",
                      "value": " exception is raised.  This can also be raised if "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "G",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "G"
                    },
                    {
                      "type": "text",
                      "value": " is changed while the returned iterator is being processed"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "",
              "type": "Param",
              "type_": "NetworkXUnfeasible"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "If "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "G",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "G"
                    },
                    {
                      "type": "text",
                      "value": " is changed while the returned iterator is being processed."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "",
              "type": "Param",
              "type_": "RuntimeError"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Results from un-sortable node names. Consider using "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "key="
                    },
                    {
                      "type": "text",
                      "value": " parameter to resolve ambiguities in the sort order."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "",
              "type": "Param",
              "type_": "TypeError"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Generate the nodes in the unique lexicographical topological sort order."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Yields the nodes of G in lexicographical topological sort order."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "",
              "type": "Param",
              "type_": "nodes"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [
      {
        "type": "code",
        "value": "DG = nx.DiGraph([(2, 1), (2, 5), (1, 3), (1, 4), (5, 4)])\nlist(nx.lexicographical_topological_sort(DG))"
      },
      {
        "type": "code",
        "value": "list(nx.lexicographical_topological_sort(DG, key=lambda x: -x))"
      },
      {
        "type": "text",
        "value": "The sort will fail for any graph with integer and string nodes. Comparison of integer to strings\nis not defined in python.  Is 3 greater or less than 'red'?"
      },
      {
        "type": "code",
        "value": "DG = nx.DiGraph([(1, 'red'), (3, 'red'), (1, 'green'), (2, 'blue')])\nlist(nx.lexicographical_topological_sort(DG))"
      },
      {
        "type": "text",
        "value": "Incomparable nodes can be resolved using a `key` function. This example function\nallows comparison of integers and strings by returning a tuple where the first\nelement is True for `str`, False otherwise. The second element is the node name.\nThis groups the strings and integers separately so they can be compared only among themselves."
      },
      {
        "type": "code",
        "value": "key = lambda node: (isinstance(node, str), node)\nlist(nx.lexicographical_topological_sort(DG, key=key))"
      }
    ],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/networkx/algorithms/dag.py",
  "item_line": 309,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Yields",
    "Raises",
    "Examples",
    "Notes",
    "See Also",
    "References"
  ],
  "references": null,
  "see_also": [
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "to-resolve",
          "module": "current-module",
          "path": "topological_sort",
          "type": "RefInfo",
          "version": "current-version"
        },
        "type": "Link",
        "value": "topological_sort"
      },
      "type": null
    }
  ],
  "signature": {
    "type": "Signature",
    "value": "(G, key=None)"
  },
  "type": "DocBlob"
}