{
  "aliases": [
    "networkx.transitive_closure"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "The transitive closure of G = (V,E) is a graph G+ = (V,E+) such that for all v, w in V there is an edge (v, w) in E+ if and only if there is a path from v to w in G."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Handling of paths from v to v has some flexibility within this definition. A reflexive transitive closure creates a self-loop for the path from v to v of length 0. The usual transitive closure creates a self-loop only if a cycle exists (a path from v to v with length > 0). We also allow an option for no self-loops."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "A directed/undirected graph/multigraph."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "G",
              "type": "Param",
              "type_": "NetworkX Graph"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Determines when cycles create self-loops in the Transitive Closure. If True, trivial cycles (length 0) create self-loops. The result is a reflexive transitive closure of G. If False (the default) non-trivial cycles create self-loops. If None, self-loops are not created."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "reflexive",
              "type": "Param",
              "type_": "Bool or None, optional (default: False)"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "If "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "reflexive",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "reflexive"
                    },
                    {
                      "type": "text",
                      "value": " not in "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "{None, True, False}"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "",
              "type": "Param",
              "type_": "NetworkXError"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The transitive closure of "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "G",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "G"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "",
              "type": "Param",
              "type_": "NetworkX graph"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Returns transitive closure of a graph"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [
      {
        "type": "text",
        "value": "The treatment of trivial (i.e. length 0) cycles is controlled by the\n`reflexive` parameter."
      },
      {
        "type": "text",
        "value": "Trivial (i.e. length 0) cycles do not create self-loops when\n``reflexive=False`` (the default)::"
      },
      {
        "type": "text",
        "value": "    >>> DG = nx.DiGraph([(1, 2), (2, 3)])\n    >>> TC = nx.transitive_closure(DG, reflexive=False)\n    >>> TC.edges()\n    OutEdgeView([(1, 2), (1, 3), (2, 3)])"
      },
      {
        "type": "text",
        "value": "However, nontrivial (i.e. length greater then 0) cycles create self-loops\nwhen ``reflexive=False`` (the default)::"
      },
      {
        "type": "text",
        "value": "    >>> DG = nx.DiGraph([(1, 2), (2, 3), (3, 1)])\n    >>> TC = nx.transitive_closure(DG, reflexive=False)\n    >>> TC.edges()\n    OutEdgeView([(1, 2), (1, 3), (1, 1), (2, 3), (2, 1), (2, 2), (3, 1), (3, 2), (3, 3)])"
      },
      {
        "type": "text",
        "value": "Trivial cycles (length 0) create self-loops when ``reflexive=True``::"
      },
      {
        "type": "text",
        "value": "    >>> DG = nx.DiGraph([(1, 2), (2, 3)])\n    >>> TC = nx.transitive_closure(DG, reflexive=True)\n    >>> TC.edges()\n    OutEdgeView([(1, 2), (1, 1), (1, 3), (2, 3), (2, 2), (3, 3)])"
      },
      {
        "type": "text",
        "value": "And the third option is not to create self-loops at all when ``reflexive=None``::"
      },
      {
        "type": "text",
        "value": "    >>> DG = nx.DiGraph([(1, 2), (2, 3), (3, 1)])\n    >>> TC = nx.transitive_closure(DG, reflexive=None)\n    >>> TC.edges()\n    OutEdgeView([(1, 2), (1, 3), (2, 3), (2, 1), (3, 1), (3, 2)])"
      }
    ],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/networkx/algorithms/dag.py",
  "item_line": 660,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns",
    "Raises",
    "Examples",
    "References"
  ],
  "references": null,
  "see_also": [],
  "signature": {
    "type": "Signature",
    "value": "(G, reflexive=False)"
  },
  "type": "DocBlob"
}