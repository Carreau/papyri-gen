{
  "aliases": [
    "networkx.max_flow_min_cost"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "G is a digraph with edge costs and capacities. There is a source node s and a sink node t. This function finds a maximum flow from s to t whose total cost is minimized."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "This algorithm is not guaranteed to work if edge weights or demands are floating point numbers (overflows and roundoff errors can cause problems). As a workaround you can use integer numbers by multiplying the relevant edge attributes by a convenient constant factor (eg 100)."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "DiGraph on which a minimum cost flow satisfying all demands is to be found."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "G",
              "type": "Param",
              "type_": "NetworkX graph"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Source of the flow."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "s: node label",
              "type": "Param",
              "type_": ""
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Destination of the flow."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "t: node label",
              "type": "Param",
              "type_": ""
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Edges of the graph G are expected to have an attribute capacity that indicates how much flow the edge can support. If this attribute is not present, the edge is considered to have infinite capacity. Default value: 'capacity'."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "capacity: string",
              "type": "Param",
              "type_": ""
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Edges of the graph G are expected to have an attribute weight that indicates the cost incurred by sending one unit of flow on that edge. If not present, the weight is considered to be 0. Default value: 'weight'."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "weight: string",
              "type": "Param",
              "type_": ""
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "This exception is raised if the input graph is not directed or not connected."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "",
              "type": "Param",
              "type_": "NetworkXError"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "This exception is raised if there is an infinite capacity path from s to t in G. In this case there is no maximum flow. This exception is also raised if the digraph G has a cycle of negative cost and infinite capacity. Then, the cost of a flow is unbounded below."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "",
              "type": "Param",
              "type_": "NetworkXUnbounded"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Dictionary of dictionaries keyed by nodes such that flowDict[u][v] is the flow edge (u, v)."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "",
              "type": "Param",
              "type_": "flowDict: dictionary"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Returns a maximum (s, t)-flow of minimum cost."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [
      {
        "type": "code",
        "value": "G = nx.DiGraph()\nG.add_edges_from(\n    [\n        (1, 2, {\"capacity\": 12, \"weight\": 4}),\n        (1, 3, {\"capacity\": 20, \"weight\": 6}),\n        (2, 3, {\"capacity\": 6, \"weight\": -3}),\n        (2, 6, {\"capacity\": 14, \"weight\": 1}),\n        (3, 4, {\"weight\": 9}),\n        (3, 5, {\"capacity\": 10, \"weight\": 5}),\n        (4, 2, {\"capacity\": 19, \"weight\": 13}),\n        (4, 5, {\"capacity\": 4, \"weight\": 0}),\n        (5, 7, {\"capacity\": 28, \"weight\": 2}),\n        (6, 5, {\"capacity\": 11, \"weight\": 1}),\n        (6, 7, {\"weight\": 8}),\n        (7, 4, {\"capacity\": 6, \"weight\": 6}),\n    ]\n)\nmincostFlow = nx.max_flow_min_cost(G, 1, 7)\nmincost = nx.cost_of_flow(G, mincostFlow)\nmincost"
      },
      {
        "type": "code",
        "value": "from networkx.algorithms.flow import maximum_flow\nmaxFlow = maximum_flow(G, 1, 7)[1]\nnx.cost_of_flow(G, maxFlow) >= mincost"
      },
      {
        "type": "code",
        "value": "mincostFlowValue = sum((mincostFlow[u][7] for u in G.predecessors(7))) - sum(\n    (mincostFlow[7][v] for v in G.successors(7))\n)\nmincostFlowValue == nx.maximum_flow_value(G, 1, 7)"
      }
    ],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/networkx/algorithms/flow/mincost.py",
  "item_line": 231,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns",
    "Raises",
    "See Also",
    "Notes",
    "Examples"
  ],
  "references": null,
  "see_also": [
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "module",
          "module": "networkx",
          "path": "networkx.algorithms.flow.mincost:cost_of_flow",
          "type": "RefInfo",
          "version": "3.1"
        },
        "type": "Link",
        "value": "cost_of_flow"
      },
      "type": null
    },
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "to-resolve",
          "module": "current-module",
          "path": "min_cost_flow",
          "type": "RefInfo",
          "version": "current-version"
        },
        "type": "Link",
        "value": "min_cost_flow"
      },
      "type": null
    },
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "module",
          "module": "networkx",
          "path": "networkx.algorithms.flow.mincost:min_cost_flow_cost",
          "type": "RefInfo",
          "version": "3.1"
        },
        "type": "Link",
        "value": "min_cost_flow_cost"
      },
      "type": null
    },
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "module",
          "module": "networkx",
          "path": "networkx.algorithms.flow.networksimplex:network_simplex",
          "type": "RefInfo",
          "version": "3.1"
        },
        "type": "Link",
        "value": "network_simplex"
      },
      "type": null
    }
  ],
  "signature": {
    "type": "Signature",
    "value": "(G, s, t, capacity='capacity', weight='weight')"
  },
  "type": "DocBlob"
}