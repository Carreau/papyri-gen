{
  "aliases": [
    "networkx.network_simplex"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "This is a primal network simplex algorithm that uses the leaving arc rule to prevent cycling."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "G is a digraph with edge costs and capacities and in which nodes have demand, i.e., they want to send or receive some amount of flow. A negative demand means that the node wants to send flow, a positive demand means that the node want to receive flow. A flow on the digraph G satisfies all demand if the net flow into each node is equal to the demand of that node."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "This algorithm is not guaranteed to work if edge weights or demands are floating point numbers (overflows and roundoff errors can cause problems). As a workaround you can use integer numbers by multiplying the relevant edge attributes by a convenient constant factor (eg 100)."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "DiGraph on which a minimum cost flow satisfying all demands is to be found."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "G",
              "type": "Param",
              "type_": "NetworkX graph"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Nodes of the graph G are expected to have an attribute demand that indicates how much flow a node wants to send (negative demand) or receive (positive demand). Note that the sum of the demands should be 0 otherwise the problem in not feasible. If this attribute is not present, a node is considered to have 0 demand. Default value: 'demand'."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "demand",
              "type": "Param",
              "type_": "string"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Edges of the graph G are expected to have an attribute capacity that indicates how much flow the edge can support. If this attribute is not present, the edge is considered to have infinite capacity. Default value: 'capacity'."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "capacity",
              "type": "Param",
              "type_": "string"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Edges of the graph G are expected to have an attribute weight that indicates the cost incurred by sending one unit of flow on that edge. If not present, the weight is considered to be 0. Default value: 'weight'."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "weight",
              "type": "Param",
              "type_": "string"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "This exception is raised if the input graph is not directed or not connected."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "",
              "type": "Param",
              "type_": "NetworkXError"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "This exception is raised in the following situations:"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "children": [
                        {
                          "children": [
                            {
                              "children": [
                                {
                                  "type": "text",
                                  "value": "The sum of the demands is not zero. Then, there is no       flow satisfying all demands."
                                }
                              ],
                              "type": "paragraph"
                            }
                          ],
                          "spread": false,
                          "type": "listItem"
                        },
                        {
                          "children": [
                            {
                              "children": [
                                {
                                  "type": "text",
                                  "value": "There is no flow satisfying all demand."
                                }
                              ],
                              "type": "paragraph"
                            }
                          ],
                          "spread": false,
                          "type": "listItem"
                        }
                      ],
                      "ordered": false,
                      "spread": false,
                      "start": 1,
                      "type": "list"
                    }
                  ],
                  "type": "blockquote"
                }
              ],
              "param": "",
              "type": "Param",
              "type_": "NetworkXUnfeasible"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "This exception is raised if the digraph G has a cycle of negative cost and infinite capacity. Then, the cost of a flow satisfying all demands is unbounded below."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "",
              "type": "Param",
              "type_": "NetworkXUnbounded"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Cost of a minimum cost flow satisfying all demands."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "flowCost",
              "type": "Param",
              "type_": "integer, float"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Dictionary of dictionaries keyed by nodes such that flowDict[u][v] is the flow edge (u, v)."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "flowDict",
              "type": "Param",
              "type_": "dictionary"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Find a minimum cost flow satisfying all demands in digraph G."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [
      {
        "type": "text",
        "value": "A simple example of a min cost flow problem."
      },
      {
        "type": "code",
        "value": "G = nx.DiGraph()\nG.add_node(\"a\", demand=-5)\nG.add_node(\"d\", demand=5)\nG.add_edge(\"a\", \"b\", weight=3, capacity=4)\nG.add_edge(\"a\", \"c\", weight=6, capacity=10)\nG.add_edge(\"b\", \"d\", weight=1, capacity=9)\nG.add_edge(\"c\", \"d\", weight=2, capacity=5)\nflowCost, flowDict = nx.network_simplex(G)\nflowCost"
      },
      {
        "type": "code",
        "value": "flowDict"
      },
      {
        "type": "text",
        "value": "The mincost flow algorithm can also be used to solve shortest path\nproblems. To find the shortest path between two nodes u and v,\ngive all edges an infinite capacity, give node u a demand of -1 and\nnode v a demand a 1. Then run the network simplex. The value of a\nmin cost flow will be the distance between u and v and edges\ncarrying positive flow will indicate the path."
      },
      {
        "type": "code",
        "value": "G = nx.DiGraph()\nG.add_weighted_edges_from(\n    [\n        (\"s\", \"u\", 10),\n        (\"s\", \"x\", 5),\n        (\"u\", \"v\", 1),\n        (\"u\", \"x\", 2),\n        (\"v\", \"y\", 1),\n        (\"x\", \"u\", 3),\n        (\"x\", \"v\", 5),\n        (\"x\", \"y\", 2),\n        (\"y\", \"s\", 7),\n        (\"y\", \"v\", 6),\n    ]\n)\nG.add_node(\"s\", demand=-1)\nG.add_node(\"v\", demand=1)\nflowCost, flowDict = nx.network_simplex(G)\nflowCost == nx.shortest_path_length(G, \"s\", \"v\", weight=\"weight\")"
      },
      {
        "type": "code",
        "value": "sorted([(u, v) for u in flowDict for v in flowDict[u] if flowDict[u][v] > 0])"
      },
      {
        "type": "code",
        "value": "nx.shortest_path(G, \"s\", \"v\", weight=\"weight\")"
      },
      {
        "type": "text",
        "value": "It is possible to change the name of the attributes used for the\nalgorithm."
      },
      {
        "type": "code",
        "value": "G = nx.DiGraph()\nG.add_node(\"p\", spam=-4)\nG.add_node(\"q\", spam=2)\nG.add_node(\"a\", spam=-2)\nG.add_node(\"d\", spam=-1)\nG.add_node(\"t\", spam=2)\nG.add_node(\"w\", spam=3)\nG.add_edge(\"p\", \"q\", cost=7, vacancies=5)\nG.add_edge(\"p\", \"a\", cost=1, vacancies=4)\nG.add_edge(\"q\", \"d\", cost=2, vacancies=3)\nG.add_edge(\"t\", \"q\", cost=1, vacancies=2)\nG.add_edge(\"a\", \"t\", cost=2, vacancies=4)\nG.add_edge(\"d\", \"w\", cost=3, vacancies=4)\nG.add_edge(\"t\", \"w\", cost=4, vacancies=1)\nflowCost, flowDict = nx.network_simplex(\n    G, demand=\"spam\", capacity=\"vacancies\", weight=\"cost\"\n)\nflowCost"
      },
      {
        "type": "code",
        "value": "flowDict"
      }
    ],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/networkx/algorithms/flow/networksimplex.py",
  "item_line": 328,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns",
    "Raises",
    "Notes",
    "See Also",
    "Examples",
    "References"
  ],
  "references": null,
  "see_also": [
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "module",
          "module": "networkx",
          "path": "networkx.algorithms.flow.mincost:cost_of_flow",
          "type": "RefInfo",
          "version": "3.1"
        },
        "type": "Link",
        "value": "cost_of_flow"
      },
      "type": null
    },
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "module",
          "module": "networkx",
          "path": "networkx.algorithms.flow.mincost:max_flow_min_cost",
          "type": "RefInfo",
          "version": "3.1"
        },
        "type": "Link",
        "value": "max_flow_min_cost"
      },
      "type": null
    },
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "to-resolve",
          "module": "current-module",
          "path": "min_cost_flow",
          "type": "RefInfo",
          "version": "current-version"
        },
        "type": "Link",
        "value": "min_cost_flow"
      },
      "type": null
    },
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "module",
          "module": "networkx",
          "path": "networkx.algorithms.flow.mincost:min_cost_flow_cost",
          "type": "RefInfo",
          "version": "3.1"
        },
        "type": "Link",
        "value": "min_cost_flow_cost"
      },
      "type": null
    }
  ],
  "signature": {
    "type": "Signature",
    "value": "(G, demand='demand', capacity='capacity', weight='weight')"
  },
  "type": "DocBlob"
}