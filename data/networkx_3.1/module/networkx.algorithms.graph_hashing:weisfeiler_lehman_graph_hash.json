{
  "aliases": [
    "networkx.weisfeiler_lehman_graph_hash"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "The function iteratively aggregates and hashes neighbourhoods of each node. After each node's neighbors are hashed to obtain updated node labels, a hashed histogram of resulting labels is returned as the final hash."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Hashes are identical for isomorphic graphs and strong guarantees that non-isomorphic graphs will get different hashes. See  for details."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "If no node or edge attributes are provided, the degree of each node is used as its initial label. Otherwise, node and/or edge labels are used to compute the hash."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "To return the WL hashes of each subgraph of a graph, use "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "module",
              "reference": {
                "kind": "module",
                "module": "networkx",
                "path": "networkx.algorithms.graph_hashing:weisfeiler_lehman_subgraph_hashes",
                "type": "RefInfo",
                "version": "3.1"
              },
              "type": "Link",
              "value": "weisfeiler_lehman_subgraph_hashes"
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Similarity between hashes does not imply similarity between graphs."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The graph to be hashed. Can have node and/or edge attributes. Can also have no attributes."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "G: graph",
              "type": "Param",
              "type_": ""
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The key in edge attribute dictionary to be used for hashing. If None, edge labels are ignored."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "edge_attr: string, default=None",
              "type": "Param",
              "type_": ""
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The key in node attribute dictionary to be used for hashing. If None, and no edge_attr given, use the degrees of the nodes as labels."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "node_attr: string, default=None",
              "type": "Param",
              "type_": ""
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Number of neighbor aggregations to perform. Should be larger for larger graphs."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "iterations: int, default=3",
              "type": "Param",
              "type_": ""
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Size (in bits) of blake2b hash digest to use for hashing node labels."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "digest_size: int, default=16",
              "type": "Param",
              "type_": ""
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Hexadecimal string corresponding to hash of the input graph."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "h",
              "type": "Param",
              "type_": "string"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Return Weisfeiler Lehman (WL) graph hash."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [
      {
        "type": "text",
        "value": "Two graphs with edge attributes that are isomorphic, except for\ndifferences in the edge labels."
      },
      {
        "type": "code",
        "value": "G1 = nx.Graph()\nG1.add_edges_from(\n    [\n        (1, 2, {\"label\": \"A\"}),\n        (2, 3, {\"label\": \"A\"}),\n        (3, 1, {\"label\": \"A\"}),\n        (1, 4, {\"label\": \"B\"}),\n    ]\n)\nG2 = nx.Graph()\nG2.add_edges_from(\n    [\n        (5, 6, {\"label\": \"B\"}),\n        (6, 7, {\"label\": \"A\"}),\n        (7, 5, {\"label\": \"A\"}),\n        (7, 8, {\"label\": \"A\"}),\n    ]\n)"
      },
      {
        "type": "text",
        "value": "Omitting the `edge_attr` option, results in identical hashes."
      },
      {
        "type": "code",
        "value": "nx.weisfeiler_lehman_graph_hash(G1)"
      },
      {
        "type": "code",
        "value": "nx.weisfeiler_lehman_graph_hash(G2)"
      },
      {
        "type": "text",
        "value": "With edge labels, the graphs are no longer assigned\nthe same hash digest."
      },
      {
        "type": "code",
        "value": "nx.weisfeiler_lehman_graph_hash(G1, edge_attr=\"label\")"
      },
      {
        "type": "code",
        "value": "nx.weisfeiler_lehman_graph_hash(G2, edge_attr=\"label\")"
      }
    ],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/networkx/algorithms/graph_hashing.py",
  "item_line": 38,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns",
    "Examples",
    "Notes",
    "References",
    "See Also"
  ],
  "references": null,
  "see_also": [
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "module",
          "module": "networkx",
          "path": "networkx.algorithms.graph_hashing:weisfeiler_lehman_subgraph_hashes",
          "type": "RefInfo",
          "version": "3.1"
        },
        "type": "Link",
        "value": "weisfeiler_lehman_subgraph_hashes"
      },
      "type": null
    }
  ],
  "signature": {
    "type": "Signature",
    "value": "(G, edge_attr=None, node_attr=None, iterations=3, digest_size=16)"
  },
  "type": "DocBlob"
}