{
  "aliases": [
    "networkx.weisfeiler_lehman_subgraph_hashes"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Dictionary keys are nodes in "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "G"
            },
            {
              "type": "text",
              "value": ", and values are a list of hashes. Each hash corresponds to a subgraph rooted at a given node u in "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "G"
            },
            {
              "type": "text",
              "value": ". Lists of subgraph hashes are sorted in increasing order of depth from their root node, with the hash at index i corresponding to a subgraph of nodes at most i edges distance from u. Thus, each list will contain "
            },
            {
              "type": "inlineCode",
              "value": "iterations + 1"
            },
            {
              "type": "text",
              "value": " elements - a hash for a subgraph at each depth, and additionally a hash of the initial node label (or equivalently a subgraph of depth 0)"
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "The function iteratively aggregates and hashes neighbourhoods of each node. This is achieved for each step by replacing for each node its label from the previous iteration with its hashed 1-hop neighborhood aggregate. The new node label is then appended to a list of node labels for each node."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "To aggregate neighborhoods at each step for a node $n$, all labels of nodes adjacent to $n$ are concatenated. If the "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "edge_attr"
            },
            {
              "type": "text",
              "value": " parameter is set, labels for each neighboring node are prefixed with the value of this attribute along the connecting edge from this neighbor to node $n$. The resulting string is then hashed to compress this information into a fixed digest size."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Thus, at the $i$-th iteration, nodes within $i$ hops influence any given hashed node label. We can therefore say that at depth $i$ for node $n$ we have a hash for a subgraph induced by the $2i$-hop neighborhood of $n$."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "The output can be used to to create general Weisfeiler-Lehman graph kernels, or generate features for graphs or nodes - for example to generate 'words' in a graph as seen in the 'graph2vec' algorithm. See  &  respectively for details."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Hashes are identical for isomorphic subgraphs and there exist strong guarantees that non-isomorphic graphs will get different hashes. See  for details."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "If no node or edge attributes are provided, the degree of each node is used as its initial label. Otherwise, node and/or edge labels are used to compute the hash."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "To hash the full graph when subgraph hashes are not needed, use "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "module",
              "reference": {
                "kind": "module",
                "module": "networkx",
                "path": "networkx.algorithms.graph_hashing:weisfeiler_lehman_graph_hash",
                "type": "RefInfo",
                "version": "3.1"
              },
              "type": "Link",
              "value": "weisfeiler_lehman_graph_hash"
            },
            {
              "type": "text",
              "value": " for efficiency."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Similarity between hashes does not imply similarity between graphs."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The graph to be hashed. Can have node and/or edge attributes. Can also have no attributes."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "G: graph",
              "type": "Param",
              "type_": ""
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The key in edge attribute dictionary to be used for hashing. If None, edge labels are ignored."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "edge_attr: string, default=None",
              "type": "Param",
              "type_": ""
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The key in node attribute dictionary to be used for hashing. If None, and no edge_attr given, use the degrees of the nodes as labels."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "node_attr: string, default=None",
              "type": "Param",
              "type_": ""
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Number of neighbor aggregations to perform. Should be larger for larger graphs."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "iterations: int, default=3",
              "type": "Param",
              "type_": ""
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Size (in bits) of blake2b hash digest to use for hashing node labels. The default size is 16 bits"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "digest_size: int, default=16",
              "type": "Param",
              "type_": ""
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "A dictionary with each key given by a node in G, and each value given by the subgraph hashes in order of depth from the key node."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "node_subgraph_hashes",
              "type": "Param",
              "type_": "dict"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Return a dictionary of subgraph hashes by node."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [
      {
        "type": "text",
        "value": "Finding similar nodes in different graphs:"
      },
      {
        "type": "code",
        "value": "G1 = nx.Graph()\nG1.add_edges_from([\n    (1, 2), (2, 3), (2, 4), (3, 5), (4, 6), (5, 7), (6, 7)\n])\nG2 = nx.Graph()\nG2.add_edges_from([\n    (1, 3), (2, 3), (1, 6), (1, 5), (4, 6)\n])\ng1_hashes = nx.weisfeiler_lehman_subgraph_hashes(G1, iterations=3, digest_size=8)\ng2_hashes = nx.weisfeiler_lehman_subgraph_hashes(G2, iterations=3, digest_size=8)"
      },
      {
        "type": "text",
        "value": "Even though G1 and G2 are not isomorphic (they have different numbers of edges),\nthe hash sequence of depth 3 for node 1 in G1 and node 5 in G2 are similar:"
      },
      {
        "type": "code",
        "value": "g1_hashes[1]"
      },
      {
        "type": "code",
        "value": "g2_hashes[5]"
      },
      {
        "type": "text",
        "value": "The first 2 WL subgraph hashes match. From this we can conclude that it's very\nlikely the neighborhood of 4 hops around these nodes are isomorphic: each\niteration aggregates 1-hop neighbourhoods meaning hashes at depth $n$ are influenced\nby every node within $2n$ hops."
      },
      {
        "type": "text",
        "value": "However the neighborhood of 6 hops is no longer isomorphic since their 3rd hash does\nnot match."
      },
      {
        "type": "text",
        "value": "These nodes may be candidates to be classified together since their local topology\nis similar."
      }
    ],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/networkx/algorithms/graph_hashing.py",
  "item_line": 160,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns",
    "Examples",
    "Notes",
    "References",
    "See Also"
  ],
  "references": null,
  "see_also": [
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "module",
          "module": "networkx",
          "path": "networkx.algorithms.graph_hashing:weisfeiler_lehman_graph_hash",
          "type": "RefInfo",
          "version": "3.1"
        },
        "type": "Link",
        "value": "weisfeiler_lehman_graph_hash"
      },
      "type": null
    }
  ],
  "signature": {
    "type": "Signature",
    "value": "(G, edge_attr=None, node_attr=None, iterations=3, digest_size=16)"
  },
  "type": "DocBlob"
}