{
  "aliases": [
    "networkx.isomorphism.ISMAGS.__init__"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [],
              "param": "graph: networkx.Graph",
              "type": "Param",
              "type_": ""
            },
            {
              "desc": [],
              "param": "subgraph: networkx.Graph",
              "type": "Param",
              "type_": ""
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Function used to determine whether two nodes are equivalent. Its signature should look like "
                    },
                    {
                      "type": "inlineCode",
                      "value": "f(n1: dict, n2: dict) -> bool"
                    },
                    {
                      "type": "text",
                      "value": ", with "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "n1"
                    },
                    {
                      "type": "text",
                      "value": " and "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "n2"
                    },
                    {
                      "type": "text",
                      "value": " node property dicts. See also "
                    },
                    {
                      "type": "inlineCode",
                      "value": "~networkx.algorithms.isomorphism.categorical_node_match"
                    },
                    {
                      "type": "text",
                      "value": " and friends. If "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "None"
                    },
                    {
                      "type": "text",
                      "value": ", all nodes are considered equal."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "node_match: collections.abc.Callable or None",
              "type": "Param",
              "type_": ""
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Function used to determine whether two edges are equivalent. Its signature should look like "
                    },
                    {
                      "type": "inlineCode",
                      "value": "f(e1: dict, e2: dict) -> bool"
                    },
                    {
                      "type": "text",
                      "value": ", with "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "module",
                      "reference": {
                        "kind": "module",
                        "module": "networkx",
                        "path": "networkx.generators.degree_seq:DegreeSequenceRandomGraph.phase1",
                        "type": "RefInfo",
                        "version": "3.1"
                      },
                      "type": "Link",
                      "value": "e1"
                    },
                    {
                      "type": "text",
                      "value": " and "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "module",
                      "reference": {
                        "kind": "module",
                        "module": "networkx",
                        "path": "networkx.generators.degree_seq:DegreeSequenceRandomGraph.phase2",
                        "type": "RefInfo",
                        "version": "3.1"
                      },
                      "type": "Link",
                      "value": "e2"
                    },
                    {
                      "type": "text",
                      "value": " edge property dicts. See also "
                    },
                    {
                      "type": "inlineCode",
                      "value": "~networkx.algorithms.isomorphism.categorical_edge_match"
                    },
                    {
                      "type": "text",
                      "value": " and friends. If "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "None"
                    },
                    {
                      "type": "text",
                      "value": ", all edges are considered equal."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "edge_match: collections.abc.Callable or None",
              "type": "Param",
              "type_": ""
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "A cache used for caching graph symmetries."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "cache: collections.abc.Mapping",
              "type": "Param",
              "type_": ""
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/networkx/algorithms/isomorphism/ismags.py",
  "item_line": 269,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Parameters"
  ],
  "references": null,
  "see_also": [],
  "signature": {
    "type": "Signature",
    "value": "(self, graph, subgraph, node_match=None, edge_match=None, cache=None)"
  },
  "type": "DocBlob"
}