{
  "aliases": [
    "networkx.isomorphism.ISMAGS"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [
        {
          "children": [
            {
              "desc": [],
              "param": "graph: networkx.Graph",
              "type": "Param",
              "type_": ""
            },
            {
              "desc": [],
              "param": "subgraph: networkx.Graph",
              "type": "Param",
              "type_": ""
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The function called to see if two nodes should be considered equal. It's signature looks like this: "
                    },
                    {
                      "type": "inlineCode",
                      "value": "f(graph1: networkx.Graph, node1, graph2: networkx.Graph, node2) -> bool"
                    },
                    {
                      "type": "text",
                      "value": ". "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "node1"
                    },
                    {
                      "type": "text",
                      "value": " is a node in "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "graph1"
                    },
                    {
                      "type": "text",
                      "value": ", and "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "node2"
                    },
                    {
                      "type": "text",
                      "value": " a node in "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "graph2"
                    },
                    {
                      "type": "text",
                      "value": ". Constructed from the argument "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "node_match"
                    },
                    {
                      "type": "text",
                      "value": "."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "node_equality: collections.abc.Callable",
              "type": "Param",
              "type_": ""
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The function called to see if two edges should be considered equal. It's signature looks like this: "
                    },
                    {
                      "type": "inlineCode",
                      "value": "f(graph1: networkx.Graph, edge1, graph2: networkx.Graph, edge2) -> bool"
                    },
                    {
                      "type": "text",
                      "value": ". "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "edge1"
                    },
                    {
                      "type": "text",
                      "value": " is an edge in "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "graph1"
                    },
                    {
                      "type": "text",
                      "value": ", and "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "edge2"
                    },
                    {
                      "type": "text",
                      "value": " an edge in "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "graph2"
                    },
                    {
                      "type": "text",
                      "value": ". Constructed from the argument "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "edge_match"
                    },
                    {
                      "type": "text",
                      "value": "."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "edge_equality: collections.abc.Callable",
              "type": "Param",
              "type_": ""
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "The implementation imposes additional conditions compared to the VF2 algorithm on the graphs provided and the comparison functions ("
            },
            {
              "type": "inlineCode",
              "value": "node_equality"
            },
            {
              "type": "text",
              "value": " and "
            },
            {
              "type": "inlineCode",
              "value": "edge_equality"
            },
            {
              "type": "text",
              "value": "):"
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "children": [
                {
                  "children": [
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "Node keys in both graphs must be orderable as well as hashable."
                        }
                      ],
                      "type": "paragraph"
                    }
                  ],
                  "spread": false,
                  "type": "listItem"
                },
                {
                  "children": [
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "Equality must be transitive: if A is equal to B, and B is equal to C,    then A must be equal to C."
                        }
                      ],
                      "type": "paragraph"
                    }
                  ],
                  "spread": false,
                  "type": "listItem"
                }
              ],
              "ordered": false,
              "spread": false,
              "start": 1,
              "type": "list"
            }
          ],
          "type": "blockquote"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Implements the ISMAGS subgraph matching algorithm.  ISMAGS stands for \"Index-based Subgraph Matching Algorithm with General Symmetries\". As the name implies, it is symmetry aware and will only generate non-symmetric isomorphisms."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/networkx/algorithms/isomorphism/ismags.py",
  "item_line": 226,
  "item_type": "<class 'type'>",
  "ordered_sections": [
    "Summary",
    "Notes",
    "Attributes",
    "References"
  ],
  "references": null,
  "see_also": [],
  "signature": {
    "type": "Signature",
    "value": null
  },
  "type": "DocBlob"
}