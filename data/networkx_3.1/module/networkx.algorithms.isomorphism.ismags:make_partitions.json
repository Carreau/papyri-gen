{
  "aliases": [
    "networkx.isomorphism.ismags.make_partitions"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "The function "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "test",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "test"
            },
            {
              "type": "text",
              "value": " is assumed to be transitive: if "
            },
            {
              "type": "inlineCode",
              "value": "test(a, b)"
            },
            {
              "type": "text",
              "value": " and "
            },
            {
              "type": "inlineCode",
              "value": "test(b, c)"
            },
            {
              "type": "text",
              "value": " return "
            },
            {
              "type": "inlineCode",
              "value": "True"
            },
            {
              "type": "text",
              "value": ", then "
            },
            {
              "type": "inlineCode",
              "value": "test(a, c)"
            },
            {
              "type": "text",
              "value": " must also be "
            },
            {
              "type": "inlineCode",
              "value": "True"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Items to partition"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "items",
              "type": "Param",
              "type_": "collections.abc.Iterable[collections.abc.Hashable]"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "A function that will be called with 2 arguments, taken from items. Should return "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "True"
                    },
                    {
                      "type": "text",
                      "value": " if those 2 items need to end up in the same partition, and "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "False"
                    },
                    {
                      "type": "text",
                      "value": " otherwise."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "test",
              "type": "Param",
              "type_": "collections.abc.Callable[collections.abc.Hashable, collections.abc.Hashable]"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "A list of sets, with each set containing part of the items in "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "items",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "items"
                    },
                    {
                      "type": "text",
                      "value": ", such that "
                    },
                    {
                      "type": "inlineCode",
                      "value": "all(test(*pair) for pair in  itertools.combinations(set, 2))\n== True"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "",
              "type": "Param",
              "type_": "list[set]"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Partitions items into sets based on the outcome of "
            },
            {
              "type": "inlineCode",
              "value": "test(item1, item2)"
            },
            {
              "type": "text",
              "value": ". Pairs of items for which "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "test",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "test"
            },
            {
              "type": "text",
              "value": " returns "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "True"
            },
            {
              "type": "text",
              "value": " end up in the same set."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/networkx/algorithms/isomorphism/ismags.py",
  "item_line": 146,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Parameters",
    "Returns",
    "Notes"
  ],
  "references": null,
  "see_also": [],
  "signature": {
    "type": "Signature",
    "value": "(items, test)"
  },
  "type": "DocBlob"
}