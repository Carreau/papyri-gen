{
  "aliases": [
    "networkx.isomorphism.isomorphvf2"
  ],
  "arbitrary": [
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "An implementation of VF2 algorithm for graph isomorphism testing."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "The simplest interface to use this module is to call networkx.is_isomorphic()."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": "VF2 Algorithm",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "The GraphMatcher and DiGraphMatcher are responsible for matching graphs or directed graphs in a predetermined manner.  This usually means a check for an isomorphism, though other checks are also possible.  For example, a subgraph of one graph can be checked for isomorphism to a second graph."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Matching is done via syntactic feasibility. It is also possible to check for semantic feasibility. Feasibility, then, is defined as the logical AND of the two functions."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "To include a semantic check, the (Di)GraphMatcher class should be subclassed, and the semantic_feasibility() function should be redefined.  By default, the semantic feasibility function always returns True.  The effect of this is that semantics are not considered in the matching of G1 and G2."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 1,
      "target": null,
      "title": "Introduction",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Suppose G1 and G2 are isomorphic graphs. Verification is as follows:"
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": ">>> from networkx.algorithms import isomorphism\n>>> G1 = nx.path_graph(4)\n>>> G2 = nx.path_graph(4)\n>>> GM = isomorphism.GraphMatcher(G1, G2)\n>>> GM.is_isomorphic()\nTrue"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "GM.mapping stores the isomorphism mapping from G1 to G2."
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": ">>> GM.mapping\n{0: 0, 1: 1, 2: 2, 3: 3}"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Suppose G1 and G2 are isomorphic directed graphs. Verification is as follows:"
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": ">>> G1 = nx.path_graph(4, create_using=nx.DiGraph())\n>>> G2 = nx.path_graph(4, create_using=nx.DiGraph())\n>>> DiGM = isomorphism.DiGraphMatcher(G1, G2)\n>>> DiGM.is_isomorphic()\nTrue"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "DiGM.mapping stores the isomorphism mapping from G1 to G2."
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": ">>> DiGM.mapping\n{0: 0, 1: 1, 2: 2, 3: 3}"
        }
      ],
      "level": 1,
      "target": null,
      "title": "Examples",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Graph theory literature can be ambiguous about the meaning of the above statement, and we seek to clarify it now."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "In the VF2 literature, a mapping M is said to be a graph-subgraph isomorphism iff M is an isomorphism between G2 and a subgraph of G1. Thus, to say that G1 and G2 are graph-subgraph isomorphic is to say that a subgraph of G1 is isomorphic to G2."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Other literature uses the phrase 'subgraph isomorphic' as in 'G1 does not have a subgraph isomorphic to G2'.  Another use is as an in adverb for isomorphic.  Thus, to say that G1 and G2 are subgraph isomorphic is to say that a subgraph of G1 is isomorphic to G2."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Finally, the term 'subgraph' can have multiple meanings. In this context, 'subgraph' always means a 'node-induced subgraph'. Edge-induced subgraph isomorphisms are not directly supported, but one should be able to perform the check by making use of nx.line_graph(). For subgraphs which are not induced, the term 'monomorphism' is preferred over 'isomorphism'."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Let G=(N,E) be a graph with a set of nodes N and set of edges E."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "dd": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "N' is a subset of N     E' is a subset of E"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "dt": {
                "children": [
                  {
                    "type": "text",
                    "value": "If G'=(N',E') is a subgraph, then:"
                  }
                ],
                "type": "paragraph"
              },
              "type": "DefListItem"
            },
            {
              "dd": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "N' is a subset of N     E' is the subset of edges in E relating nodes in N'"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "dt": {
                "children": [
                  {
                    "type": "text",
                    "value": "If G'=(N',E') is a node-induced subgraph, then:"
                  }
                ],
                "type": "paragraph"
              },
              "type": "DefListItem"
            },
            {
              "dd": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "N' is the subset of nodes in N related by edges in E'     E' is a subset of E"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "dt": {
                "children": [
                  {
                    "type": "text",
                    "value": "If G'=(N',E') is an edge-induced subgraph, then:"
                  }
                ],
                "type": "paragraph"
              },
              "type": "DefListItem"
            },
            {
              "dd": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "N' is a subset of N     E' is a subset of the set of edges in E relating nodes in N'"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "dt": {
                "children": [
                  {
                    "type": "text",
                    "value": "If G'=(N',E') is a monomorphism, then:"
                  }
                ],
                "type": "paragraph"
              },
              "type": "DefListItem"
            }
          ],
          "type": "DefList"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Note that if G' is a node-induced subgraph of G, then it is always a subgraph monomorphism of G, but the opposite is not always true, as a monomorphism can have fewer edges."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 1,
      "target": null,
      "title": "Subgraph Isomorphism",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "dd": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "\"A (Sub)Graph Isomorphism Algorithm for Matching Large Graphs\",       IEEE Transactions on Pattern Analysis and Machine Intelligence,       vol. 26,  no. 10,  pp. 1367-1372,  Oct.,  2004.       http://ieeexplore.ieee.org/iel5/34/29305/01323804.pdf"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "dt": {
                "children": [
                  {
                    "type": "text",
                    "value": "[1]   Luigi P. Cordella, Pasquale Foggia, Carlo Sansone, Mario Vento,"
                  }
                ],
                "type": "paragraph"
              },
              "type": "DefListItem"
            },
            {
              "dd": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Algorithm for Matching Large Graphs\", 3rd IAPR-TC15 Workshop       on Graph-based Representations in Pattern Recognition, Cuen,       pp. 149-159, 2001.       https://www.researchgate.net/publication/200034365_An_Improved_Algorithm_for_Matching_Large_Graphs"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "dt": {
                "children": [
                  {
                    "type": "text",
                    "value": "[2]   L. P. Cordella, P. Foggia, C. Sansone, M. Vento, \"An Improved"
                  }
                ],
                "type": "paragraph"
              },
              "type": "DefListItem"
            }
          ],
          "type": "DefList"
        }
      ],
      "level": 1,
      "target": null,
      "title": "References",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "syntactic_feasibility(), semantic_feasibility()"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 1,
      "target": null,
      "title": "See Also",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "The implementation handles both directed and undirected graphs as well as multigraphs."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "In general, the subgraph isomorphism problem is NP-complete whereas the graph isomorphism problem is most likely not NP-complete (although no polynomial-time algorithm is known to exist)."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 1,
      "target": null,
      "title": "Notes",
      "type": "Section"
    }
  ],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "To remove in the future \u2013\u2013 networkx.algorithms.isomorphism.isomorphvf2"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/networkx/algorithms/isomorphism/isomorphvf2.py",
  "item_line": 0,
  "item_type": "<class 'module'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary"
  ],
  "references": null,
  "see_also": [],
  "signature": {
    "type": "Signature",
    "value": null
  },
  "type": "DocBlob"
}