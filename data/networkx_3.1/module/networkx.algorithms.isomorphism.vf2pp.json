{
  "aliases": [
    "networkx.isomorphism.vf2pp"
  ],
  "arbitrary": [
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "An implementation of the VF2++ algorithm  for Graph Isomorphism testing."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "The simplest interface to use this module is to call:"
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "anchor": null,
              "exists": true,
              "kind": "module",
              "reference": {
                "kind": "module",
                "module": "networkx",
                "path": "networkx.algorithms.isomorphism.vf2pp:vf2pp_is_isomorphic",
                "type": "RefInfo",
                "version": "3.1"
              },
              "type": "Link",
              "value": "vf2pp_is_isomorphic"
            },
            {
              "type": "text",
              "value": ": to check whether two graphs are isomorphic. "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "module",
              "reference": {
                "kind": "module",
                "module": "networkx",
                "path": "networkx.algorithms.isomorphism.vf2pp:vf2pp_isomorphism",
                "type": "RefInfo",
                "version": "3.1"
              },
              "type": "Link",
              "value": "vf2pp_isomorphism"
            },
            {
              "type": "text",
              "value": ": to obtain the node mapping between two graphs, in case they are isomorphic. "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "module",
              "reference": {
                "kind": "module",
                "module": "networkx",
                "path": "networkx.algorithms.isomorphism.vf2pp:vf2pp_all_isomorphisms",
                "type": "RefInfo",
                "version": "3.1"
              },
              "type": "Link",
              "value": "vf2pp_all_isomorphisms"
            },
            {
              "type": "text",
              "value": ": to generate all possible mappings between two graphs, if isomorphic."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": "VF2++ Algorithm",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "The VF2++ algorithm, follows a similar logic to that of VF2, while also introducing new easy-to-check cutting rules and determining the optimal access order of nodes. It is also implemented in a non-recursive manner, which saves both time and space, when compared to its previous counterpart."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "The optimal node ordering is obtained after taking into consideration both the degree but also the label rarity of each node. This way we place the nodes that are more likely to match, first in the order, thus examining the most promising branches in the beginning. The rules also consider node labels, making it easier to prune unfruitful branches early in the process."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 1,
      "target": null,
      "title": "Introduction",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Suppose G1 and G2 are Isomorphic Graphs. Verification is as follows:"
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Without node labels:"
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": ">>> import networkx as nx\n>>> G1 = nx.path_graph(4)\n>>> G2 = nx.path_graph(4)\n>>> nx.vf2pp_is_isomorphic(G1, G2, node_label=None)\nTrue\n>>> nx.vf2pp_isomorphism(G1, G2, node_label=None)\n{1: 1, 2: 2, 0: 0, 3: 3}"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "With node labels:"
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": ">>> G1 = nx.path_graph(4)\n>>> G2 = nx.path_graph(4)\n>>> mapped = {1: 1, 2: 2, 3: 3, 0: 0}\n>>> nx.set_node_attributes(G1, dict(zip(G1, [\"blue\", \"red\", \"green\", \"yellow\"])), \"label\")\n>>> nx.set_node_attributes(G2, dict(zip([mapped[u] for u in G1], [\"blue\", \"red\", \"green\", \"yellow\"])), \"label\")\n>>> nx.vf2pp_is_isomorphic(G1, G2, node_label=\"label\")\nTrue\n>>> nx.vf2pp_isomorphism(G1, G2, node_label=\"label\")\n{1: 1, 2: 2, 0: 0, 3: 3}"
        }
      ],
      "level": 1,
      "target": null,
      "title": "Examples",
      "type": "Section"
    },
    {
      "children": [
        {
          "placeholder": "footnote",
          "type": "Unimplemented",
          "value": ".. [1] J\u00fcttner, Alp\u00e1r & Madarasi, P\u00e9ter. (2018). \"VF2++\u2014An improved subgraph\n   isomorphism algorithm\". Discrete Applied Mathematics. 242.\n   https://doi.org/10.1016/j.dam.2018.02.018"
        }
      ],
      "level": 1,
      "target": null,
      "title": "References",
      "type": "Section"
    }
  ],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "To remove in the future \u2013\u2013 networkx.algorithms.isomorphism.vf2pp"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/networkx/algorithms/isomorphism/vf2pp.py",
  "item_line": 0,
  "item_type": "<class 'module'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary"
  ],
  "references": null,
  "see_also": [],
  "signature": {
    "type": "Signature",
    "value": null
  },
  "type": "DocBlob"
}