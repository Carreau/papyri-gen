{
  "aliases": [
    "networkx.isomorphism.vf2pp._matching_order"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Taking into account the structure of the Graph and the node labeling, the nodes are placed in an order such that, most of the unfruitful/infeasible branches of the search space can be pruned on high levels, significantly decreasing the number of visited states. The premise is that, the algorithm will be able to recognize inconsistencies early, proceeding to go deep into the search tree only if it's needed."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Contains:"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "children": [
                        {
                          "dd": [
                            {
                              "children": [
                                {
                                  "type": "text",
                                  "value": "The two graphs to check for isomorphism or monomorphism."
                                }
                              ],
                              "type": "paragraph"
                            }
                          ],
                          "dt": {
                            "children": [
                              {
                                "type": "text",
                                "value": "G1,G2: NetworkX Graph or MultiGraph instances."
                              }
                            ],
                            "type": "paragraph"
                          },
                          "type": "DefListItem"
                        },
                        {
                          "dd": [
                            {
                              "children": [
                                {
                                  "type": "text",
                                  "value": "The label of every node in G1 and G2 respectively."
                                }
                              ],
                              "type": "paragraph"
                            }
                          ],
                          "dt": {
                            "children": [
                              {
                                "type": "text",
                                "value": "G1_labels,G2_labels: dict"
                              }
                            ],
                            "type": "paragraph"
                          },
                          "type": "DefListItem"
                        }
                      ],
                      "type": "DefList"
                    }
                  ],
                  "type": "blockquote"
                }
              ],
              "param": "graph_params: namedtuple",
              "type": "Param",
              "type_": ""
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The ordering of the nodes."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "",
              "type": "Param",
              "type_": "node_order: list"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "The node ordering as introduced in VF2++."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/networkx/algorithms/isomorphism/vf2pp.py",
  "item_line": 362,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Notes",
    "Parameters",
    "Returns"
  ],
  "references": null,
  "see_also": [],
  "signature": {
    "type": "Signature",
    "value": "(graph_params)"
  },
  "type": "DocBlob"
}