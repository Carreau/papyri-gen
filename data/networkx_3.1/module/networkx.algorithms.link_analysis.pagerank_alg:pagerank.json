{
  "aliases": [
    "networkx.pagerank"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "PageRank computes a ranking of the nodes in the graph G based on the structure of the incoming links. It was originally designed as an algorithm to rank web pages."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "The eigenvector calculation is done by the power iteration method and has no guarantee of convergence.  The iteration will stop after an error tolerance of "
            },
            {
              "type": "inlineCode",
              "value": "len(G) * tol"
            },
            {
              "type": "text",
              "value": " has been reached. If the number of iterations exceed "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "max_iter",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "max_iter"
            },
            {
              "type": "text",
              "value": ", a "
            },
            {
              "type": "inlineCode",
              "value": "networkx.exception.PowerIterationFailedConvergence"
            },
            {
              "type": "text",
              "value": " exception is raised."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "The PageRank algorithm was designed for directed graphs but this algorithm does not check if the input graph is directed and will execute on undirected graphs by converting each edge in the directed graph to two edges."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "A NetworkX graph.  Undirected graphs will be converted to a directed graph with two directed edges for each undirected edge."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "G",
              "type": "Param",
              "type_": "graph"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Damping parameter for PageRank, default=0.85."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "alpha",
              "type": "Param",
              "type_": "float, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The \"personalization vector\" consisting of a dictionary with a key some subset of graph nodes and personalization value each of those. At least one personalization value must be non-zero. If not specified, a nodes personalization value will be zero. By default, a uniform distribution is used."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "personalization: dict, optional",
              "type": "Param",
              "type_": ""
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Maximum number of iterations in power method eigenvalue solver."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "max_iter",
              "type": "Param",
              "type_": "integer, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Error tolerance used to check convergence in power method solver. The iteration will stop after a tolerance of "
                    },
                    {
                      "type": "inlineCode",
                      "value": "len(G) * tol"
                    },
                    {
                      "type": "text",
                      "value": " is reached."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "tol",
              "type": "Param",
              "type_": "float, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Starting value of PageRank iteration for each node."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "nstart",
              "type": "Param",
              "type_": "dictionary, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Edge data key to use as weight.  If None weights are set to 1."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "weight",
              "type": "Param",
              "type_": "key, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The outedges to be assigned to any \"dangling\" nodes, i.e., nodes without any outedges. The dict key is the node the outedge points to and the dict value is the weight of that outedge. By default, dangling nodes are given outedges according to the personalization vector (uniform if not specified). This must be selected to result in an irreducible transition matrix (see notes under google_matrix). It may be common to have the dangling dict to be the same as the personalization dict."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "dangling: dict, optional",
              "type": "Param",
              "type_": ""
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "If the algorithm fails to converge to the specified tolerance within the specified number of iterations of the power iteration method."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "",
              "type": "Param",
              "type_": "PowerIterationFailedConvergence"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Dictionary of nodes with PageRank as value"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "pagerank",
              "type": "Param",
              "type_": "dictionary"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Returns the PageRank of the nodes in the graph."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [
      {
        "type": "code",
        "value": "G = nx.DiGraph(nx.path_graph(4))\npr = nx.pagerank(G, alpha=0.9)"
      }
    ],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/networkx/algorithms/link_analysis/pagerank_alg.py",
  "item_line": 9,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns",
    "Examples",
    "Notes",
    "See Also",
    "Raises",
    "References"
  ],
  "references": null,
  "see_also": [
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "module",
          "module": "networkx",
          "path": "networkx.algorithms.link_analysis.pagerank_alg:google_matrix",
          "type": "RefInfo",
          "version": "3.1"
        },
        "type": "Link",
        "value": "google_matrix"
      },
      "type": null
    }
  ],
  "signature": {
    "type": "Signature",
    "value": "(G, alpha=0.85, personalization=None, max_iter=100, tol=1e-06, nstart=None, weight='weight', dangling=None)"
  },
  "type": "DocBlob"
}