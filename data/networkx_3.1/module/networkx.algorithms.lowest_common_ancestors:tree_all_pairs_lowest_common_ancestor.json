{
  "aliases": [
    "networkx.tree_all_pairs_lowest_common_ancestor"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Only defined on non-null trees represented with directed edges from parents to children. Uses Tarjan's off-line lowest-common-ancestors algorithm. Runs in time $O(4 \\times (V + E + P))$ time, where 4 is the largest value of the inverse Ackermann function likely to ever come up in actual use, and $P$ is the number of pairs requested (or $V^2$ if all are needed)."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Tarjan, R. E. (1979), \"Applications of path compression on balanced trees\", Journal of the ACM 26 (4): 690-715, doi:10.1145/322154.322161."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [],
              "param": "G",
              "type": "Param",
              "type_": "NetworkX directed graph (must be a tree)"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The root of the subtree to operate on. If None, assume the entire graph has exactly one source and use that."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "root",
              "type": "Param",
              "type_": "node, optional (default: None)"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The pairs of interest. If None, Defaults to all pairs of nodes under "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "root",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "root"
                    },
                    {
                      "type": "text",
                      "value": " that have a lowest common ancestor."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "pairs",
              "type": "Param",
              "type_": "iterable or iterator of pairs of nodes, optional (default: None)"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "in "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "pairs",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "pairs"
                    },
                    {
                      "type": "text",
                      "value": " and "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "lca"
                    },
                    {
                      "type": "text",
                      "value": " is their lowest common ancestor."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "lcas",
              "type": "Param",
              "type_": "generator of tuples `((u, v), lca)` where `u` and `v` are nodes"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Yield the lowest common ancestor for sets of pairs in a tree."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [
      {
        "type": "code",
        "value": "import pprint\nG = nx.DiGraph([(1, 3), (2, 4), (1, 2)])\npprint.pprint(dict(nx.tree_all_pairs_lowest_common_ancestor(G)))"
      },
      {
        "type": "text",
        "value": "We can also use `pairs` argument to specify the pairs of nodes for which we\nwant to compute lowest common ancestors. Here is an example:"
      },
      {
        "type": "code",
        "value": "dict(nx.tree_all_pairs_lowest_common_ancestor(G, pairs=[(1, 4), (2, 3)]))"
      }
    ],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/networkx/algorithms/lowest_common_ancestors.py",
  "item_line": 150,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Parameters",
    "Returns",
    "Examples",
    "Notes",
    "See Also"
  ],
  "references": null,
  "see_also": [
    {
      "descriptions": [
        {
          "children": [
            {
              "type": "text",
              "value": "similar routine for general DAGs"
            }
          ],
          "type": "paragraph"
        }
      ],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "to-resolve",
          "module": "current-module",
          "path": "all_pairs_lowest_common_ancestor",
          "type": "RefInfo",
          "version": "current-version"
        },
        "type": "Link",
        "value": "all_pairs_lowest_common_ancestor"
      },
      "type": null
    },
    {
      "descriptions": [
        {
          "children": [
            {
              "type": "text",
              "value": "just a single pair for general DAGs"
            }
          ],
          "type": "paragraph"
        }
      ],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "to-resolve",
          "module": "current-module",
          "path": "lowest_common_ancestor",
          "type": "RefInfo",
          "version": "current-version"
        },
        "type": "Link",
        "value": "lowest_common_ancestor"
      },
      "type": null
    }
  ],
  "signature": {
    "type": "Signature",
    "value": "(G, root=None, pairs=None)"
  },
  "type": "DocBlob"
}