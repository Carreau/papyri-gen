{
  "aliases": [
    "networkx.equivalence_classes"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "The equivalence classes, or blocks, consist of objects from "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "iterable",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "iterable"
            },
            {
              "type": "text",
              "value": " which are all equivalent. They are defined to be equivalent if the "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "relation",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "relation"
            },
            {
              "type": "text",
              "value": " function returns "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "True"
            },
            {
              "type": "text",
              "value": " when passed any two objects from that class, and "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "False"
            },
            {
              "type": "text",
              "value": " otherwise. To define an equivalence relation the function must be reflexive, symmetric and transitive."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "This function does not check that "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "relation",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "relation"
            },
            {
              "type": "text",
              "value": " represents an equivalence relation. You can check that your equivalence classes provide a partition using "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "module",
              "reference": {
                "kind": "module",
                "module": "networkx",
                "path": "networkx.algorithms.community.community_utils:is_partition",
                "type": "RefInfo",
                "version": "3.1"
              },
              "type": "Link",
              "value": "is_partition"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "An iterable of elements/nodes."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "iterable",
              "type": "Param",
              "type_": "list, tuple, or set"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "A Boolean-valued function that implements an equivalence relation (reflexive, symmetric, transitive binary relation) on the elements of "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "iterable",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "iterable"
                    },
                    {
                      "type": "text",
                      "value": " - it must take two elements and return "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "True"
                    },
                    {
                      "type": "text",
                      "value": " if they are related, or "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "False"
                    },
                    {
                      "type": "text",
                      "value": " if not."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "relation",
              "type": "Param",
              "type_": "function"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "A set of frozensets representing the partition induced by the equivalence relation function "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "relation",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "relation"
                    },
                    {
                      "type": "text",
                      "value": " on the elements of "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "iterable",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "iterable"
                    },
                    {
                      "type": "text",
                      "value": ". Each member set in the return set represents an equivalence class, or block, of the partition."
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Duplicate elements will be ignored so it makes the most sense for "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "iterable",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "iterable"
                    },
                    {
                      "type": "text",
                      "value": " to be a "
                    },
                    {
                      "type": "inlineCode",
                      "value": "set"
                    },
                    {
                      "type": "text",
                      "value": "."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "",
              "type": "Param",
              "type_": "set of frozensets"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Returns equivalence classes of "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "relation",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "relation"
            },
            {
              "type": "text",
              "value": " when applied to "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "iterable",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "iterable"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [
      {
        "type": "text",
        "value": "Let `X` be the set of integers from `0` to `9`, and consider an equivalence\nrelation `R` on `X` of congruence modulo `3`: this means that two integers\n`x` and `y` in `X` are equivalent under `R` if they leave the same\nremainder when divided by `3`, i.e. `(x - y) mod 3 = 0`."
      },
      {
        "type": "text",
        "value": "The equivalence classes of this relation are `{0, 3, 6, 9}`, `{1, 4, 7}`,\n`{2, 5, 8}`: `0`, `3`, `6`, `9` are all divisible by `3` and leave zero\nremainder; `1`, `4`, `7` leave remainder `1`; while `2`, `5` and `8` leave\nremainder `2`. We can see this by calling `equivalence_classes` with\n`X` and a function implementation of `R`."
      },
      {
        "type": "code",
        "value": "X = set(range(10))\ndef mod3(x, y): return (x - y) % 3 == 0\nequivalence_classes(X, mod3)    # doctest: +SKIP"
      }
    ],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/networkx/algorithms/minors/contraction.py",
  "item_line": 20,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns",
    "Notes",
    "Examples"
  ],
  "references": null,
  "see_also": [],
  "signature": {
    "type": "Signature",
    "value": "(iterable, relation)"
  },
  "type": "DocBlob"
}