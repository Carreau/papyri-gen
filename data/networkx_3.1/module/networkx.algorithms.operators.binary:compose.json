{
  "aliases": [
    "networkx.compose"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "The node sets and edges sets do not need to be disjoint."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Composing preserves the attributes of nodes and edges. Attribute values from H take precedent over attribute values from G."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "It is recommended that G and H be either both directed or both undirected."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "For MultiGraphs, the edges are identified by incident nodes AND edge-key. This can cause surprises (i.e., edge "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "(1, 2)"
            },
            {
              "type": "text",
              "value": " may or may not be the same in two graphs) if you use MultiGraph without keeping track of edge keys."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "If combining the attributes of common nodes is not desired, consider union(), which raises an exception for name collisions."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "A NetworkX graph"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "G, H",
              "type": "Param",
              "type_": "graph"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [
        {
          "children": [
            {
              "desc": [],
              "param": "",
              "type": "Param",
              "type_": "C: A new graph with the same type as G"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Compose graph G with H by combining nodes and edges into a single graph."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [
      {
        "type": "code",
        "value": "G = nx.Graph([(0, 1), (0, 2)])\nH = nx.Graph([(0, 1), (1, 2)])\nR = nx.compose(G, H)\nR.nodes"
      },
      {
        "type": "code",
        "value": "R.edges"
      },
      {
        "type": "text",
        "value": "By default, the attributes from `H` take precedent over attributes from `G`.\nIf you prefer another way of combining attributes, you can update them after the compose operation:"
      },
      {
        "type": "code",
        "value": "G = nx.Graph([(0, 1, {'weight': 2.0}), (3, 0, {'weight': 100.0})])\nH = nx.Graph([(0, 1, {'weight': 10.0}), (1, 2, {'weight': -1.0})])\nnx.set_node_attributes(G, {0: 'dark', 1: 'light', 3: 'black'}, name='color')\nnx.set_node_attributes(H, {0: 'green', 1: 'orange', 2: 'yellow'}, name='color')\nGcomposeH = nx.compose(G, H)"
      },
      {
        "type": "text",
        "value": "Normally, color attribute values of nodes of GcomposeH come from H. We can workaround this as follows:"
      },
      {
        "type": "code",
        "value": "node_data = {n: G.nodes[n]['color'] + \" \" + H.nodes[n]['color'] for n in G.nodes & H.nodes}\nnx.set_node_attributes(GcomposeH, node_data, 'color')\nprint(GcomposeH.nodes[0]['color'])"
      },
      {
        "type": "code",
        "value": "print(GcomposeH.nodes[3]['color'])"
      },
      {
        "type": "text",
        "value": "Similarly, we can update edge attributes after the compose operation in a way we prefer:"
      },
      {
        "type": "code",
        "value": "edge_data = {e: G.edges[e]['weight'] * H.edges[e]['weight'] for e in G.edges & H.edges}\nnx.set_edge_attributes(GcomposeH, edge_data, 'weight')\nprint(GcomposeH.edges[(0, 1)]['weight'])"
      },
      {
        "type": "code",
        "value": "print(GcomposeH.edges[(3, 0)]['weight'])"
      }
    ],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/networkx/algorithms/operators/binary.py",
  "item_line": 285,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns",
    "See Also",
    "Notes",
    "Examples"
  ],
  "references": null,
  "see_also": [
    {
      "descriptions": [
        {
          "children": [
            {
              "type": "text",
              "value": "func"
            }
          ],
          "type": "paragraph"
        }
      ],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "to-resolve",
          "module": "current-module",
          "path": "~networkx.Graph.update",
          "type": "RefInfo",
          "version": "current-version"
        },
        "type": "Link",
        "value": "~networkx.Graph.update"
      },
      "type": null
    },
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "module",
          "module": "networkx",
          "path": "networkx.utils.union_find:UnionFind.union",
          "type": "RefInfo",
          "version": "3.1"
        },
        "type": "Link",
        "value": "union"
      },
      "type": null
    },
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "to-resolve",
          "module": "current-module",
          "path": "disjoint_union",
          "type": "RefInfo",
          "version": "current-version"
        },
        "type": "Link",
        "value": "disjoint_union"
      },
      "type": null
    }
  ],
  "signature": {
    "type": "Signature",
    "value": "(G, H)"
  },
  "type": "DocBlob"
}