{
  "aliases": [
    "networkx.PlanarEmbedding"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "The planar embedding is given by a "
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "combinatorial embedding"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://en.wikipedia.org/wiki/Graph_embedding#Combinatorial_embedding"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "children": [
                {
                  "type": "text",
                  "value": "note `check_planarity` is the preferred way to check if a graph is planar."
                }
              ],
              "type": "admonitionTitle"
            }
          ],
          "kind": "note",
          "type": "admonition"
        },
        {
          "children": [
            {
              "children": [
                {
                  "type": "text",
                  "value": "Neighbor ordering:"
                }
              ],
              "type": "strong"
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "In comparison to a usual graph structure, the embedding also stores the order of all neighbors for every vertex. The order of the neighbors can be given in clockwise (cw) direction or counterclockwise (ccw) direction. This order is stored as edge attributes in the underlying directed graph. For the edge (u, v) the edge attribute 'cw' is set to the neighbor of u that follows immediately after v in clockwise direction."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "In order for a PlanarEmbedding to be valid it must fulfill multiple conditions. It is possible to check if these conditions are fulfilled with the method "
            },
            {
              "type": "inlineCode",
              "value": "check_structure"
            },
            {
              "type": "text",
              "value": ". The conditions are:"
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Edges must go in both directions (because the edge attributes differ)"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Every edge must have a 'cw' and 'ccw' attribute which corresponds to a   correct planar embedding."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "A node with non zero degree must have a node attribute 'first_nbr'."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            }
          ],
          "ordered": false,
          "spread": false,
          "start": 1,
          "type": "list"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "As long as a PlanarEmbedding is invalid only the following methods should be called:"
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "inlineCode",
                      "value": "add_half_edge_ccw"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "inlineCode",
                      "value": "add_half_edge_cw"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "inlineCode",
                      "value": "connect_components"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "inlineCode",
                      "value": "add_half_edge_first"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            }
          ],
          "ordered": false,
          "spread": false,
          "start": 1,
          "type": "list"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Even though the graph is a subclass of nx.DiGraph, it can still be used for algorithms that require undirected graphs, because the method "
            },
            {
              "type": "inlineCode",
              "value": "is_directed"
            },
            {
              "type": "text",
              "value": " is overridden. This is possible, because a valid PlanarGraph must have edges in both directions."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "children": [
                {
                  "type": "text",
                  "value": "Half edges:"
                }
              ],
              "type": "strong"
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "In methods like "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "module",
              "reference": {
                "kind": "module",
                "module": "networkx",
                "path": "networkx.algorithms.planarity:PlanarEmbedding.add_half_edge_ccw",
                "type": "RefInfo",
                "version": "3.1"
              },
              "type": "Link",
              "value": "add_half_edge_ccw"
            },
            {
              "type": "text",
              "value": " the term \"half-edge\" is used, which is a term that is used in "
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "doubly connected edge lists"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://en.wikipedia.org/wiki/Doubly_connected_edge_list"
            },
            {
              "type": "text",
              "value": ". It is used to emphasize that the edge is only in one direction and there exists another half-edge in the opposite direction. While conventional edges always have two faces (including outer face) next to them, it is possible to assign each half-edge "
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "exactly one"
                }
              ],
              "type": "emphasis"
            },
            {
              "type": "text",
              "value": " face. For a half-edge (u, v) that is orientated such that u is below v then the face that belongs to (u, v) is to the right of this half-edge."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Represents a planar graph with its planar embedding."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [
      {
        "type": "text",
        "value": "Create an embedding of a star graph (compare `nx.star_graph(3)`):"
      },
      {
        "type": "code",
        "value": "G = nx.PlanarEmbedding()\nG.add_half_edge_cw(0, 1, None)\nG.add_half_edge_cw(0, 2, 1)\nG.add_half_edge_cw(0, 3, 2)\nG.add_half_edge_cw(1, 0, None)\nG.add_half_edge_cw(2, 0, None)\nG.add_half_edge_cw(3, 0, None)"
      },
      {
        "type": "text",
        "value": "Alternatively the same embedding can also be defined in counterclockwise\norientation. The following results in exactly the same PlanarEmbedding:"
      },
      {
        "type": "code",
        "value": "G = nx.PlanarEmbedding()\nG.add_half_edge_ccw(0, 1, None)\nG.add_half_edge_ccw(0, 3, 1)\nG.add_half_edge_ccw(0, 2, 3)\nG.add_half_edge_ccw(1, 0, None)\nG.add_half_edge_ccw(2, 0, None)\nG.add_half_edge_ccw(3, 0, None)"
      },
      {
        "type": "text",
        "value": "After creating a graph, it is possible to validate that the PlanarEmbedding\nobject is correct:"
      },
      {
        "type": "code",
        "value": "G.check_structure()"
      }
    ],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/networkx/algorithms/planarity.py",
  "item_line": 763,
  "item_type": "<class 'type'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "See Also",
    "Examples"
  ],
  "references": null,
  "see_also": [
    {
      "descriptions": [
        {
          "children": [
            {
              "type": "text",
              "value": "Preferred way to check if an existing graph is planar."
            }
          ],
          "type": "paragraph"
        }
      ],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "module",
          "module": "networkx",
          "path": "networkx.algorithms.planarity:is_planar",
          "type": "RefInfo",
          "version": "3.1"
        },
        "type": "Link",
        "value": "is_planar"
      },
      "type": null
    },
    {
      "descriptions": [
        {
          "children": [
            {
              "type": "text",
              "value": "A convenient way to create a "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "PlanarEmbedding"
            },
            {
              "type": "text",
              "value": ". If not planar, it returns a subgraph that shows this."
            }
          ],
          "type": "paragraph"
        }
      ],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "to-resolve",
          "module": "current-module",
          "path": "check_planarity",
          "type": "RefInfo",
          "version": "current-version"
        },
        "type": "Link",
        "value": "check_planarity"
      },
      "type": null
    }
  ],
  "signature": {
    "type": "Signature",
    "value": null
  },
  "type": "DocBlob"
}