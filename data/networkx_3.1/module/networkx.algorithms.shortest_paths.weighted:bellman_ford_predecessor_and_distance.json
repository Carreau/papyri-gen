{
  "aliases": [
    "networkx.bellman_ford_predecessor_and_distance"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "The algorithm has a running time of $O(mn)$ where $n$ is the number of nodes and $m$ is the number of edges.  It is slower than Dijkstra but can handle negative edge weights."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "If a negative cycle is detected, you can use "
            },
            {
              "type": "inlineCode",
              "value": "find_negative_cycle"
            },
            {
              "type": "text",
              "value": " to return the cycle and examine it. Shortest paths are not defined when a negative cycle exists because once reached, the path can cycle forever to build up arbitrarily low weights."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Edge weight attributes must be numerical. Distances are calculated as sums of weighted edges traversed."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "The dictionaries returned only have keys for nodes reachable from the source."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "In the case where the (di)graph is not connected, if a component not containing the source contains a negative (di)cycle, it will not be detected."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "In NetworkX v2.1 and prior, the source node had predecessor "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "[None]"
            },
            {
              "type": "text",
              "value": ". In NetworkX v2.2 this changed to the source node having predecessor "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "[]"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The algorithm works for all types of graphs, including directed graphs and multigraphs."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "G",
              "type": "Param",
              "type_": "NetworkX graph"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Starting node for path"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "source: node label",
              "type": "Param",
              "type_": ""
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Ending node for path"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "target",
              "type": "Param",
              "type_": "node label, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "If this is a string, then edge weights will be accessed via the edge attribute with this key (that is, the weight of the edge joining "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "u"
                    },
                    {
                      "type": "text",
                      "value": " to "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "v"
                    },
                    {
                      "type": "text",
                      "value": " will be "
                    },
                    {
                      "type": "inlineCode",
                      "value": "G.edges[u, v][weight]"
                    },
                    {
                      "type": "text",
                      "value": "). If no such edge attribute exists, the weight of the edge is assumed to be one."
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "If this is a function, the weight of an edge is the value returned by the function. The function must accept exactly three positional arguments: the two endpoints of an edge and the dictionary of edge attributes for that edge. The function must return a number."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "weight",
              "type": "Param",
              "type_": "string or function"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Determines whether to use a heuristic to early detect negative cycles at a hopefully negligible cost."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "heuristic",
              "type": "Param",
              "type_": "bool"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "If "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "source"
                    },
                    {
                      "type": "text",
                      "value": " is not in "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "G",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "G"
                    },
                    {
                      "type": "text",
                      "value": "."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "",
              "type": "Param",
              "type_": "NodeNotFound"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "If the (di)graph contains a negative (di)cycle, the algorithm raises an exception to indicate the presence of the negative (di)cycle.  Note: any negative weight edge in an undirected graph is a negative cycle."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "",
              "type": "Param",
              "type_": "NetworkXUnbounded"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Returns two dictionaries keyed by node to predecessor in the path and to the distance from the source respectively."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "pred, dist",
              "type": "Param",
              "type_": "dictionaries"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Compute shortest path lengths and predecessors on shortest paths in weighted graphs."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [
      {
        "type": "code",
        "value": "G = nx.path_graph(5, create_using=nx.DiGraph())\npred, dist = nx.bellman_ford_predecessor_and_distance(G, 0)\nsorted(pred.items())"
      },
      {
        "type": "code",
        "value": "sorted(dist.items())"
      },
      {
        "type": "code",
        "value": "pred, dist = nx.bellman_ford_predecessor_and_distance(G, 0, 1)\nsorted(pred.items())"
      },
      {
        "type": "code",
        "value": "sorted(dist.items())"
      },
      {
        "type": "code",
        "value": "G = nx.cycle_graph(5, create_using=nx.DiGraph())\nG[1][2][\"weight\"] = -7\nnx.bellman_ford_predecessor_and_distance(G, 0)"
      }
    ],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/networkx/algorithms/shortest_paths/weighted.py",
  "item_line": 1127,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns",
    "Raises",
    "Examples",
    "See Also",
    "Notes"
  ],
  "references": null,
  "see_also": [
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "module",
          "module": "networkx",
          "path": "networkx.algorithms.shortest_paths.weighted:find_negative_cycle",
          "type": "RefInfo",
          "version": "3.1"
        },
        "type": "Link",
        "value": "find_negative_cycle"
      },
      "type": null
    }
  ],
  "signature": {
    "type": "Signature",
    "value": "(G, source, target=None, weight='weight', heuristic=False)"
  },
  "type": "DocBlob"
}