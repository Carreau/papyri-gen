{
  "aliases": [
    "networkx.multi_source_dijkstra"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Uses Dijkstra's algorithm to compute the shortest paths and lengths between one of the source nodes and the given "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "target",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "target"
            },
            {
              "type": "text",
              "value": ", or all other reachable nodes if not specified, for a weighted graph."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Edge weight attributes must be numerical. Distances are calculated as sums of weighted edges traversed."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "The weight function can be used to hide edges by returning None. So "
            },
            {
              "type": "inlineCode",
              "value": "weight = lambda u, v, d: 1 if d['color']==\"red\" else None"
            },
            {
              "type": "text",
              "value": " will find the shortest red path."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Based on the Python cookbook recipe (119466) at https://code.activestate.com/recipes/119466/"
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "This algorithm is not guaranteed to work if edge weights are negative or are floating point numbers (overflows and roundoff errors can cause problems)."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [],
              "param": "G",
              "type": "Param",
              "type_": "NetworkX graph"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Starting nodes for paths. If this is just a set containing a single node, then all paths computed by this function will start from that node. If there are two or more nodes in the set, the computed paths may begin from any one of the start nodes."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "sources",
              "type": "Param",
              "type_": "non-empty set of nodes"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Ending node for path"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "target",
              "type": "Param",
              "type_": "node label, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Length (sum of edge weights) at which the search is stopped. If cutoff is provided, only return paths with summed weight <= cutoff."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "cutoff",
              "type": "Param",
              "type_": "integer or float, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "If this is a string, then edge weights will be accessed via the edge attribute with this key (that is, the weight of the edge joining "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "u"
                    },
                    {
                      "type": "text",
                      "value": " to "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "v"
                    },
                    {
                      "type": "text",
                      "value": " will be "
                    },
                    {
                      "type": "inlineCode",
                      "value": "G.edges[u, v][weight]"
                    },
                    {
                      "type": "text",
                      "value": "). If no such edge attribute exists, the weight of the edge is assumed to be one."
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "If this is a function, the weight of an edge is the value returned by the function. The function must accept exactly three positional arguments: the two endpoints of an edge and the dictionary of edge attributes for that edge. The function must return a number or None to indicate a hidden edge."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "weight",
              "type": "Param",
              "type_": "string or function"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "If "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "sources",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "sources"
                    },
                    {
                      "type": "text",
                      "value": " is empty."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "",
              "type": "Param",
              "type_": "ValueError"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "If any of "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "sources",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "sources"
                    },
                    {
                      "type": "text",
                      "value": " is not in "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "G",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "G"
                    },
                    {
                      "type": "text",
                      "value": "."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "",
              "type": "Param",
              "type_": "NodeNotFound"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "If target is None, returns a tuple of two dictionaries keyed by node. The first dictionary stores distance from one of the source nodes. The second stores the path from one of the sources to that node. If target is not None, returns a tuple of (distance, path) where distance is the distance from source to target and path is a list representing the path from source to target."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "distance, path",
              "type": "Param",
              "type_": "pair of dictionaries, or numeric and list"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Find shortest weighted paths and lengths from a given set of source nodes."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [
      {
        "type": "code",
        "value": "G = nx.path_graph(5)\nlength, path = nx.multi_source_dijkstra(G, {0, 4})\nfor node in [0, 1, 2, 3, 4]:\n    print(f\"{node}: {length[node]}\")"
      },
      {
        "type": "code",
        "value": "path[1]"
      },
      {
        "type": "code",
        "value": "path[3]"
      },
      {
        "type": "code",
        "value": "length, path = nx.multi_source_dijkstra(G, {0, 4}, 1)\nlength"
      },
      {
        "type": "code",
        "value": "path"
      }
    ],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/networkx/algorithms/shortest_paths/weighted.py",
  "item_line": 640,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns",
    "Examples",
    "Notes",
    "Raises",
    "See Also"
  ],
  "references": null,
  "see_also": [
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "to-resolve",
          "module": "current-module",
          "path": "multi_source_dijkstra_path",
          "type": "RefInfo",
          "version": "current-version"
        },
        "type": "Link",
        "value": "multi_source_dijkstra_path"
      },
      "type": null
    },
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "module",
          "module": "networkx",
          "path": "networkx.algorithms.shortest_paths.weighted:multi_source_dijkstra_path_length",
          "type": "RefInfo",
          "version": "3.1"
        },
        "type": "Link",
        "value": "multi_source_dijkstra_path_length"
      },
      "type": null
    }
  ],
  "signature": {
    "type": "Signature",
    "value": "(G, sources, target=None, cutoff=None, weight='weight')"
  },
  "type": "DocBlob"
}