{
  "aliases": [
    "networkx.optimize_edit_paths"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Graph edit path is a sequence of node and edge edit operations transforming graph G1 to graph isomorphic to G2.  Edit operations include substitutions, deletions, and insertions."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Graph edit distance is defined as minimum cost of edit path."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The two graphs G1 and G2 must be of the same type."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "G1, G2: graphs",
              "type": "Param",
              "type_": ""
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "A function that returns True if node n1 in G1 and n2 in G2 should be considered equal during matching."
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The function will be called like"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "node_match(G1.nodes[n1], G2.nodes[n2])."
                        }
                      ],
                      "type": "paragraph"
                    }
                  ],
                  "type": "blockquote"
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "That is, the function will receive the node attribute dictionaries for n1 and n2 as inputs."
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Ignored if node_subst_cost is specified.  If neither node_match nor node_subst_cost are specified then node attributes are not considered."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "node_match",
              "type": "Param",
              "type_": "callable"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "A function that returns True if the edge attribute dictionaries for the pair of nodes (u1, v1) in G1 and (u2, v2) in G2 should be considered equal during matching."
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The function will be called like"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "edge_match(G1[u1][v1], G2[u2][v2])."
                        }
                      ],
                      "type": "paragraph"
                    }
                  ],
                  "type": "blockquote"
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "That is, the function will receive the edge attribute dictionaries of the edges under consideration."
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Ignored if edge_subst_cost is specified.  If neither edge_match nor edge_subst_cost are specified then edge attributes are not considered."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "edge_match",
              "type": "Param",
              "type_": "callable"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Functions that return the costs of node substitution, node deletion, and node insertion, respectively."
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The functions will be called like"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "node_subst_cost(G1.nodes[n1], G2.nodes[n2]),    node_del_cost(G1.nodes[n1]),    node_ins_cost(G2.nodes[n2])."
                        }
                      ],
                      "type": "paragraph"
                    }
                  ],
                  "type": "blockquote"
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "That is, the functions will receive the node attribute dictionaries as inputs.  The functions are expected to return positive numeric values."
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Function node_subst_cost overrides node_match if specified. If neither node_match nor node_subst_cost are specified then default node substitution cost of 0 is used (node attributes are not considered during matching)."
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "If node_del_cost is not specified then default node deletion cost of 1 is used.  If node_ins_cost is not specified then default node insertion cost of 1 is used."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "node_subst_cost, node_del_cost, node_ins_cost",
              "type": "Param",
              "type_": "callable"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Functions that return the costs of edge substitution, edge deletion, and edge insertion, respectively."
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The functions will be called like"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "edge_subst_cost(G1[u1][v1], G2[u2][v2]),    edge_del_cost(G1[u1][v1]),    edge_ins_cost(G2[u2][v2])."
                        }
                      ],
                      "type": "paragraph"
                    }
                  ],
                  "type": "blockquote"
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "That is, the functions will receive the edge attribute dictionaries as inputs.  The functions are expected to return positive numeric values."
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Function edge_subst_cost overrides edge_match if specified. If neither edge_match nor edge_subst_cost are specified then default edge substitution cost of 0 is used (edge attributes are not considered during matching)."
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "If edge_del_cost is not specified then default edge deletion cost of 1 is used.  If edge_ins_cost is not specified then default edge insertion cost of 1 is used."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "edge_subst_cost, edge_del_cost, edge_ins_cost",
              "type": "Param",
              "type_": "callable"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Maximum edit distance to consider."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "upper_bound",
              "type": "Param",
              "type_": "numeric"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "If True, return consecutive approximations of strictly decreasing cost.  Otherwise, return all edit paths of cost less than or equal to the previous minimum cost."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "strictly_decreasing",
              "type": "Param",
              "type_": "bool"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Tuple where first element is a node in G1 and the second is a node in G2. These nodes are forced to be matched in the comparison to allow comparison between rooted graphs."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "roots",
              "type": "Param",
              "type_": "2-tuple"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Maximum number of seconds to execute. After timeout is met, the current best GED is returned."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "timeout",
              "type": "Param",
              "type_": "numeric"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [
        {
          "children": [
            {
              "desc": [],
              "param": "",
              "type": "Param",
              "type_": "Generator of tuples (node_edit_path, edge_edit_path, cost)"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "GED (graph edit distance) calculation: advanced interface."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/networkx/algorithms/similarity.py",
  "item_line": 522,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns",
    "See Also",
    "References"
  ],
  "references": null,
  "see_also": [
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "to-resolve",
          "module": "current-module",
          "path": "graph_edit_distance",
          "type": "RefInfo",
          "version": "current-version"
        },
        "type": "Link",
        "value": "graph_edit_distance"
      },
      "type": null
    },
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "module",
          "module": "networkx",
          "path": "networkx.algorithms.similarity:optimize_graph_edit_distance",
          "type": "RefInfo",
          "version": "3.1"
        },
        "type": "Link",
        "value": "optimize_graph_edit_distance"
      },
      "type": null
    },
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "module",
          "module": "networkx",
          "path": "networkx.algorithms.similarity:optimal_edit_paths",
          "type": "RefInfo",
          "version": "3.1"
        },
        "type": "Link",
        "value": "optimal_edit_paths"
      },
      "type": null
    }
  ],
  "signature": {
    "type": "Signature",
    "value": "(G1, G2, node_match=None, edge_match=None, node_subst_cost=None, node_del_cost=None, node_ins_cost=None, edge_subst_cost=None, edge_del_cost=None, edge_ins_cost=None, upper_bound=None, strictly_decreasing=True, roots=None, timeout=None)"
  },
  "type": "DocBlob"
}