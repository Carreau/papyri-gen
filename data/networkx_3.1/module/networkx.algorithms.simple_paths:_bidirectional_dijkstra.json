{
  "aliases": [
    "networkx.simple_paths._bidirectional_dijkstra"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "This function returns the shortest path between source and target ignoring nodes and edges in the containers ignore_nodes and ignore_edges."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "This is a custom modification of the standard Dijkstra bidirectional shortest path implementation at networkx.algorithms.weighted"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Edge weight attributes must be numerical. Distances are calculated as sums of weighted edges traversed."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "In practice  bidirectional Dijkstra is much more than twice as fast as ordinary Dijkstra."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Ordinary Dijkstra expands nodes in a sphere-like manner from the source. The radius of this sphere will eventually be the length of the shortest path. Bidirectional Dijkstra will expand nodes from both the source and the target, making two spheres of half this radius. Volume of the first sphere is pi*r*r while the others are 2*pi*r/2*r/2, making up half the volume."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "This algorithm is not guaranteed to work if edge weights are negative or are floating point numbers (overflows and roundoff errors can cause problems)."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [],
              "param": "G",
              "type": "Param",
              "type_": "NetworkX graph"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Starting node."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "source",
              "type": "Param",
              "type_": "node"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Ending node."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "target",
              "type": "Param",
              "type_": "node"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Edge data key or weight function corresponding to the edge weight"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "weight: string, function, optional (default='weight')",
              "type": "Param",
              "type_": ""
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "nodes to ignore, optional"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "ignore_nodes",
              "type": "Param",
              "type_": "container of nodes"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "edges to ignore, optional"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "ignore_edges",
              "type": "Param",
              "type_": "container of edges"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "If no path exists between source and target."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "",
              "type": "Param",
              "type_": "NetworkXNoPath"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Shortest path length."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "length",
              "type": "Param",
              "type_": "number"
            },
            {
              "desc": [],
              "param": "",
              "type": "Param",
              "type_": "Returns a tuple of two dictionaries keyed by node."
            },
            {
              "desc": [],
              "param": "",
              "type": "Param",
              "type_": "The first dictionary stores distance from the source."
            },
            {
              "desc": [],
              "param": "",
              "type": "Param",
              "type_": "The second stores the path from the source to that node."
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Dijkstra's algorithm for shortest paths using bidirectional search."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/networkx/algorithms/simple_paths.py",
  "item_line": 780,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns",
    "Raises",
    "Notes",
    "See Also"
  ],
  "references": null,
  "see_also": [
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "to-resolve",
          "module": "current-module",
          "path": "shortest_path",
          "type": "RefInfo",
          "version": "current-version"
        },
        "type": "Link",
        "value": "shortest_path"
      },
      "type": null
    },
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "to-resolve",
          "module": "current-module",
          "path": "shortest_path_length",
          "type": "RefInfo",
          "version": "current-version"
        },
        "type": "Link",
        "value": "shortest_path_length"
      },
      "type": null
    }
  ],
  "signature": {
    "type": "Signature",
    "value": "(G, source, target, weight='weight', ignore_nodes=None, ignore_edges=None)"
  },
  "type": "DocBlob"
}