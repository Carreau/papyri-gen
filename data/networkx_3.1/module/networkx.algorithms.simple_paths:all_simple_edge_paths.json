{
  "aliases": [
    "networkx.all_simple_edge_paths"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "A simple path is a path with no repeated nodes."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "This algorithm uses a modified depth-first search to generate the paths .  A single path can be found in $O(V+E)$ time but the number of simple paths in a graph can be very large, e.g. $O(n!)$ in the complete graph of order $n$."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [],
              "param": "G",
              "type": "Param",
              "type_": "NetworkX graph"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Starting node for path"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "source",
              "type": "Param",
              "type_": "node"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Single node or iterable of nodes at which to end path"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "target",
              "type": "Param",
              "type_": "nodes"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Depth to stop the search. Only paths of length <= cutoff are returned."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "cutoff",
              "type": "Param",
              "type_": "integer, optional"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "A generator that produces lists of simple paths.  If there are no paths between the source and target within the given cutoff the generator produces no output. For multigraphs, the list of edges have elements of the form "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "(u,v,k)"
                    },
                    {
                      "type": "text",
                      "value": ". Where "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "k"
                    },
                    {
                      "type": "text",
                      "value": " corresponds to the edge key."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "",
              "type": "Param",
              "type_": "path_generator: generator"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Generate lists of edges for all simple paths in G from source to target."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [
      {
        "type": "text",
        "value": "Print the simple path edges of a Graph::"
      },
      {
        "type": "text",
        "value": "    >>> g = nx.Graph([(1, 2), (2, 4), (1, 3), (3, 4)])\n    >>> for path in sorted(nx.all_simple_edge_paths(g, 1, 4)):\n    ...     print(path)\n    [(1, 2), (2, 4)]\n    [(1, 3), (3, 4)]"
      },
      {
        "type": "text",
        "value": "Print the simple path edges of a MultiGraph. Returned edges come with\ntheir associated keys::"
      },
      {
        "type": "text",
        "value": "    >>> mg = nx.MultiGraph()\n    >>> mg.add_edge(1, 2, key=\"k0\")\n    'k0'\n    >>> mg.add_edge(1, 2, key=\"k1\")\n    'k1'\n    >>> mg.add_edge(2, 3, key=\"k0\")\n    'k0'\n    >>> for path in sorted(nx.all_simple_edge_paths(mg, 1, 3)):\n    ...     print(path)\n    [(1, 2, 'k0'), (2, 3, 'k0')]\n    [(1, 2, 'k1'), (2, 3, 'k0')]"
      }
    ],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/networkx/algorithms/simple_paths.py",
  "item_line": 323,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns",
    "Examples",
    "Notes",
    "References",
    "See Also"
  ],
  "references": null,
  "see_also": [
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "module",
          "module": "networkx",
          "path": "networkx.algorithms.shortest_paths.generic:all_shortest_paths",
          "type": "RefInfo",
          "version": "3.1"
        },
        "type": "Link",
        "value": "all_shortest_paths"
      },
      "type": null
    },
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "to-resolve",
          "module": "current-module",
          "path": "shortest_path",
          "type": "RefInfo",
          "version": "current-version"
        },
        "type": "Link",
        "value": "shortest_path"
      },
      "type": null
    },
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "to-resolve",
          "module": "current-module",
          "path": "all_simple_paths",
          "type": "RefInfo",
          "version": "current-version"
        },
        "type": "Link",
        "value": "all_simple_paths"
      },
      "type": null
    }
  ],
  "signature": {
    "type": "Signature",
    "value": "(G, source, target, cutoff=None)"
  },
  "type": "DocBlob"
}