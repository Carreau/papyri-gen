{
  "aliases": [
    "networkx.effective_size"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "The "
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "effective size"
                }
              ],
              "type": "emphasis"
            },
            {
              "type": "text",
              "value": " of a node's ego network is based on the concept of redundancy. A person's ego network has redundancy to the extent that her contacts are connected to each other as well. The nonredundant part of a person's relationships it's the effective size of her ego network .  Formally, the effective size of a node $u$, denoted $e(u)$, is defined by"
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "math",
          "value": "e(u) = \\sum_{v \\in N(u) \\setminus \\{u\\}}\n\\left(1 - \\sum_{w \\in N(v)} p_{uw} m_{vw}\\right)"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "where $N(u)$ is the set of neighbors of $u$ and $p_{uw}$ is the normalized mutual weight of the (directed or undirected) edges joining $u$ and $v$, for each vertex $u$ and $v$ . And $m_{vw}$ is the mutual weight of $v$ and $w$ divided by $v$ highest mutual weight with any of its neighbors. The "
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "mutual weight"
                }
              ],
              "type": "emphasis"
            },
            {
              "type": "text",
              "value": " of $u$ and $v$ is the sum of the weights of edges joining them (edge weights are assumed to be one if the graph is unweighted)."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "For the case of unweighted and undirected graphs, Borgatti proposed a simplified formula to compute effective size"
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "math",
          "value": "e(u) = n - \\frac{2t}{n}"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "where "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "t"
            },
            {
              "type": "text",
              "value": " is the number of ties in the ego network (not including ties to ego) and "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "n"
            },
            {
              "type": "text",
              "value": " is the number of nodes (excluding ego)."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Burt also defined the related concept of "
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "efficiency"
                }
              ],
              "type": "emphasis"
            },
            {
              "type": "text",
              "value": " of a node's ego network, which is its effective size divided by the degree of that node . So you can easily compute efficiency:"
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": ">>> G = nx.DiGraph()\n>>> G.add_edges_from([(0, 1), (0, 2), (1, 0), (2, 1)])\n>>> esize = nx.effective_size(G)\n>>> efficiency = {n: v / G.degree(n) for n, v in esize.items()}"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The graph containing "
                    },
                    {
                      "type": "inlineCode",
                      "value": "v"
                    },
                    {
                      "type": "text",
                      "value": ". Directed graphs are treated like undirected graphs when computing neighbors of "
                    },
                    {
                      "type": "inlineCode",
                      "value": "v"
                    },
                    {
                      "type": "text",
                      "value": "."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "G",
              "type": "Param",
              "type_": "NetworkX graph"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Container of nodes in the graph "
                    },
                    {
                      "type": "inlineCode",
                      "value": "G"
                    },
                    {
                      "type": "text",
                      "value": " to compute the effective size. If None, the effective size of every node is computed."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "nodes",
              "type": "Param",
              "type_": "container, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "If None, all edge weights are considered equal. Otherwise holds the name of the edge attribute used as weight."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "weight",
              "type": "Param",
              "type_": "None or string, optional"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Dictionary with nodes as keys and the effective size of the node as values."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "",
              "type": "Param",
              "type_": "dict"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Returns the effective size of all nodes in the graph "
            },
            {
              "type": "inlineCode",
              "value": "G"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/networkx/algorithms/structuralholes.py",
  "item_line": 51,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns",
    "Notes",
    "See Also",
    "References"
  ],
  "references": null,
  "see_also": [
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "to-resolve",
          "module": "current-module",
          "path": "constraint",
          "type": "RefInfo",
          "version": "current-version"
        },
        "type": "Link",
        "value": "constraint"
      },
      "type": null
    }
  ],
  "signature": {
    "type": "Signature",
    "value": "(G, nodes=None, weight=None)"
  },
  "type": "DocBlob"
}