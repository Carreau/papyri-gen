{
  "aliases": [
    "networkx.bfs_edges"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "The naming of this function is very similar to "
            },
            {
              "type": "inlineCode",
              "value": "~networkx.algorithms.traversal.edgebfs.edge_bfs"
            },
            {
              "type": "text",
              "value": ". The difference is that "
            },
            {
              "type": "inlineCode",
              "value": "edge_bfs"
            },
            {
              "type": "text",
              "value": " yields edges even if they extend back to an already explored node while this generator yields the edges of the tree that results from a breadth-first-search (BFS) so no edges are reported if they extend to already explored nodes. That means "
            },
            {
              "type": "inlineCode",
              "value": "edge_bfs"
            },
            {
              "type": "text",
              "value": " reports all edges while "
            },
            {
              "type": "inlineCode",
              "value": "bfs_edges"
            },
            {
              "type": "text",
              "value": " only reports those traversed by a node-based BFS. Yet another description is that "
            },
            {
              "type": "inlineCode",
              "value": "bfs_edges"
            },
            {
              "type": "text",
              "value": " reports the edges traversed during BFS while "
            },
            {
              "type": "inlineCode",
              "value": "edge_bfs"
            },
            {
              "type": "text",
              "value": " reports all edges in the order they are explored."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Based on the breadth-first search implementation in PADS  by D. Eppstein, July 2004; with modifications to allow depth limits as described in ."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [],
              "param": "G",
              "type": "Param",
              "type_": "NetworkX graph"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Specify starting node for breadth-first search; this function iterates over only those edges in the component reachable from this node."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "source",
              "type": "Param",
              "type_": "node"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "If True traverse a directed graph in the reverse direction"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "reverse",
              "type": "Param",
              "type_": "bool, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Specify the maximum search depth"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "depth_limit",
              "type": "Param",
              "type_": "int, optional(default=len(G))"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "A function that takes the list of neighbors of given node as input, and returns an "
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "iterator"
                        }
                      ],
                      "type": "emphasis"
                    },
                    {
                      "type": "text",
                      "value": " over these neighbors but with custom ordering."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "sort_neighbors",
              "type": "Param",
              "type_": "function"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Iterate over edges in a breadth-first-search starting at source."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Yields edges resulting from the breadth-first search."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "",
              "type": "Param",
              "type_": "edge: 2-tuple of nodes"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [
      {
        "type": "text",
        "value": "To get the edges in a breadth-first search::"
      },
      {
        "type": "text",
        "value": "    >>> G = nx.path_graph(3)\n    >>> list(nx.bfs_edges(G, 0))\n    [(0, 1), (1, 2)]\n    >>> list(nx.bfs_edges(G, source=0, depth_limit=1))\n    [(0, 1)]"
      },
      {
        "type": "text",
        "value": "To get the nodes in a breadth-first search order::"
      },
      {
        "type": "text",
        "value": "    >>> G = nx.path_graph(3)\n    >>> root = 2\n    >>> edges = nx.bfs_edges(G, root)\n    >>> nodes = [root] + [v for u, v in edges]\n    >>> nodes\n    [2, 1, 0]"
      }
    ],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/networkx/algorithms/traversal/breadth_first_search.py",
  "item_line": 91,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Parameters",
    "Yields",
    "Examples",
    "Notes",
    "References",
    "See Also"
  ],
  "references": null,
  "see_also": [
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "module",
          "module": "networkx",
          "path": "networkx.algorithms.traversal.breadth_first_search:bfs_tree",
          "type": "RefInfo",
          "version": "3.1"
        },
        "type": "Link",
        "value": "bfs_tree"
      },
      "type": null
    },
    {
      "descriptions": [
        {
          "children": [
            {
              "type": "text",
              "value": "func"
            }
          ],
          "type": "paragraph"
        }
      ],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "to-resolve",
          "module": "current-module",
          "path": "~networkx.algorithms.traversal.depth_first_search.dfs_edges",
          "type": "RefInfo",
          "version": "current-version"
        },
        "type": "Link",
        "value": "~networkx.algorithms.traversal.depth_first_search.dfs_edges"
      },
      "type": null
    },
    {
      "descriptions": [
        {
          "children": [
            {
              "type": "text",
              "value": "func"
            }
          ],
          "type": "paragraph"
        }
      ],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "to-resolve",
          "module": "current-module",
          "path": "~networkx.algorithms.traversal.edgebfs.edge_bfs",
          "type": "RefInfo",
          "version": "current-version"
        },
        "type": "Link",
        "value": "~networkx.algorithms.traversal.edgebfs.edge_bfs"
      },
      "type": null
    }
  ],
  "signature": {
    "type": "Signature",
    "value": "(G, source, reverse=False, depth_limit=None, sort_neighbors=None)"
  },
  "type": "DocBlob"
}