{
  "aliases": [
    "networkx.dfs_labeled_edges"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "If a source is not specified then a source is chosen arbitrarily and repeatedly until all components in the graph are searched."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "The implementation of this function is adapted from David Eppstein's depth-first search function in "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "PADS"
            },
            {
              "type": "text",
              "value": ", with modifications to allow depth limits based on the Wikipedia article \""
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "Depth-limited search"
            },
            {
              "type": "text",
              "value": "\"."
            }
          ],
          "type": "paragraph"
        },
        {
          "placeholder": "target",
          "type": "Unimplemented",
          "value": ".. _PADS: http://www.ics.uci.edu/~eppstein/PADS"
        },
        {
          "placeholder": "target",
          "type": "Unimplemented",
          "value": ".. _Depth-limited search: https://en.wikipedia.org/wiki/Depth-limited_search"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [],
              "param": "G",
              "type": "Param",
              "type_": "NetworkX graph"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Specify starting node for depth-first search and return edges in the component reachable from source."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "source",
              "type": "Param",
              "type_": "node, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Specify the maximum search depth."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "depth_limit",
              "type": "Param",
              "type_": "int, optional (default=len(G))"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "A generator of triples of the form ("
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "u"
                        }
                      ],
                      "type": "emphasis"
                    },
                    {
                      "type": "text",
                      "value": ", "
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "v"
                        }
                      ],
                      "type": "emphasis"
                    },
                    {
                      "type": "text",
                      "value": ", "
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "d"
                        }
                      ],
                      "type": "emphasis"
                    },
                    {
                      "type": "text",
                      "value": "), where ("
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "u"
                        }
                      ],
                      "type": "emphasis"
                    },
                    {
                      "type": "text",
                      "value": ", "
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "v"
                        }
                      ],
                      "type": "emphasis"
                    },
                    {
                      "type": "text",
                      "value": ") is the edge being explored in the depth-first search and "
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "d"
                        }
                      ],
                      "type": "emphasis"
                    },
                    {
                      "type": "text",
                      "value": " is one of the strings 'forward', 'nontree', 'reverse', or 'reverse-depth_limit'. A 'forward' edge is one in which "
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "u"
                        }
                      ],
                      "type": "emphasis"
                    },
                    {
                      "type": "text",
                      "value": " has been visited but "
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "v"
                        }
                      ],
                      "type": "emphasis"
                    },
                    {
                      "type": "text",
                      "value": " has not. A 'nontree' edge is one in which both "
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "u"
                        }
                      ],
                      "type": "emphasis"
                    },
                    {
                      "type": "text",
                      "value": " and "
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "v"
                        }
                      ],
                      "type": "emphasis"
                    },
                    {
                      "type": "text",
                      "value": " have been visited but the edge is not in the DFS tree. A 'reverse' edge is one in which both "
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "u"
                        }
                      ],
                      "type": "emphasis"
                    },
                    {
                      "type": "text",
                      "value": " and "
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "v"
                        }
                      ],
                      "type": "emphasis"
                    },
                    {
                      "type": "text",
                      "value": " have been visited and the edge is in the DFS tree. When the "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "depth_limit",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "depth_limit"
                    },
                    {
                      "type": "text",
                      "value": " is reached via a 'forward' edge, a 'reverse' edge is immediately generated rather than the subtree being explored. To indicate this flavor of 'reverse' edge, the string yielded is 'reverse-depth_limit'."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "",
              "type": "Param",
              "type_": "edges: generator"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Iterate over edges in a depth-first-search (DFS) labeled by type."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [
      {
        "type": "text",
        "value": "The labels reveal the complete transcript of the depth-first search\nalgorithm in more detail than, for example, :func:`dfs_edges`::"
      },
      {
        "type": "text",
        "value": "    >>> from pprint import pprint\n    >>>\n    >>> G = nx.DiGraph([(0, 1), (1, 2), (2, 1)])\n    >>> pprint(list(nx.dfs_labeled_edges(G, source=0)))\n    [(0, 0, 'forward'),\n     (0, 1, 'forward'),\n     (1, 2, 'forward'),\n     (2, 1, 'nontree'),\n     (1, 2, 'reverse'),\n     (0, 1, 'reverse'),\n     (0, 0, 'reverse')]"
      }
    ],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/networkx/algorithms/traversal/depth_first_search.py",
  "item_line": 348,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Parameters",
    "Returns",
    "Examples",
    "Notes",
    "See Also"
  ],
  "references": null,
  "see_also": [
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "module",
          "module": "networkx",
          "path": "networkx.algorithms.traversal.depth_first_search:dfs_edges",
          "type": "RefInfo",
          "version": "3.1"
        },
        "type": "Link",
        "value": "dfs_edges"
      },
      "type": null
    },
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "module",
          "module": "networkx",
          "path": "networkx.algorithms.traversal.depth_first_search:dfs_preorder_nodes",
          "type": "RefInfo",
          "version": "3.1"
        },
        "type": "Link",
        "value": "dfs_preorder_nodes"
      },
      "type": null
    },
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "module",
          "module": "networkx",
          "path": "networkx.algorithms.traversal.depth_first_search:dfs_postorder_nodes",
          "type": "RefInfo",
          "version": "3.1"
        },
        "type": "Link",
        "value": "dfs_postorder_nodes"
      },
      "type": null
    }
  ],
  "signature": {
    "type": "Signature",
    "value": "(G, source=None, depth_limit=None)"
  },
  "type": "DocBlob"
}