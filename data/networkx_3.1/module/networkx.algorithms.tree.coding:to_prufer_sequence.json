{
  "aliases": [
    "networkx.to_prufer_sequence"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "A "
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "Pr\u00fcfer sequence"
                }
              ],
              "type": "emphasis"
            },
            {
              "type": "text",
              "value": " is a list of "
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "n"
                }
              ],
              "type": "emphasis"
            },
            {
              "type": "text",
              "value": " - 2 numbers between 0 and "
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "n"
                }
              ],
              "type": "emphasis"
            },
            {
              "type": "text",
              "value": " - 1, inclusive. The tree corresponding to a given Pr\u00fcfer sequence can be recovered by repeatedly joining a node in the sequence with a node with the smallest potential degree according to the sequence."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "There is a bijection from labeled trees to Pr\u00fcfer sequences. This function is the inverse of the "
            },
            {
              "type": "inlineCode",
              "value": "from_prufer_sequence"
            },
            {
              "type": "text",
              "value": " function."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Sometimes Pr\u00fcfer sequences use nodes labeled from 1 to "
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "n"
                }
              ],
              "type": "emphasis"
            },
            {
              "type": "text",
              "value": " instead of from 0 to "
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "n"
                }
              ],
              "type": "emphasis"
            },
            {
              "type": "text",
              "value": " - 1. This function requires nodes to be labeled in the latter form. You can use "
            },
            {
              "type": "inlineCode",
              "value": "~networkx.relabel_nodes"
            },
            {
              "type": "text",
              "value": " to relabel the nodes of your tree to the appropriate format."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "This implementation is from  and has a running time of $O(n)$."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "An undirected graph object representing a tree."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "T",
              "type": "Param",
              "type_": "NetworkX graph"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "If the number of nodes in "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "T",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "T"
                    },
                    {
                      "type": "text",
                      "value": " is less than two."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "",
              "type": "Param",
              "type_": "NetworkXPointlessConcept"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "If "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "T",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "T"
                    },
                    {
                      "type": "text",
                      "value": " is not a tree."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "",
              "type": "Param",
              "type_": "NotATree"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "If the set of nodes in "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "T",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "T"
                    },
                    {
                      "type": "text",
                      "value": " is not {0, \u2026, "
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "n"
                        }
                      ],
                      "type": "emphasis"
                    },
                    {
                      "type": "text",
                      "value": " - 1}."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "",
              "type": "Param",
              "type_": "KeyError"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The Pr\u00fcfer sequence of the given tree."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "",
              "type": "Param",
              "type_": "list"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Returns the Pr\u00fcfer sequence of the given tree."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [
      {
        "type": "text",
        "value": "There is a bijection between Pr\u00fcfer sequences and labeled trees, so\nthis function is the inverse of the :func:`from_prufer_sequence`\nfunction:"
      },
      {
        "type": "code",
        "value": "edges = [(0, 3), (1, 3), (2, 3), (3, 4), (4, 5)]\ntree = nx.Graph(edges)\nsequence = nx.to_prufer_sequence(tree)\nsequence"
      },
      {
        "type": "code",
        "value": "tree2 = nx.from_prufer_sequence(sequence)\nlist(tree2.edges()) == edges"
      }
    ],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/networkx/algorithms/tree/coding.py",
  "item_line": 213,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns",
    "Raises",
    "Notes",
    "See Also",
    "References",
    "Examples"
  ],
  "references": null,
  "see_also": [
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "module",
          "module": "networkx",
          "path": "networkx.algorithms.tree.coding:to_nested_tuple",
          "type": "RefInfo",
          "version": "3.1"
        },
        "type": "Link",
        "value": "to_nested_tuple"
      },
      "type": null
    },
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "module",
          "module": "networkx",
          "path": "networkx.algorithms.tree.coding:from_prufer_sequence",
          "type": "RefInfo",
          "version": "3.1"
        },
        "type": "Link",
        "value": "from_prufer_sequence"
      },
      "type": null
    }
  ],
  "signature": {
    "type": "Signature",
    "value": "(T)"
  },
  "type": "DocBlob"
}