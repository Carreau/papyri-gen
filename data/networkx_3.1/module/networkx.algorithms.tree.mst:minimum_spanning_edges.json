{
  "aliases": [
    "networkx.minimum_spanning_edges"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "A minimum spanning tree is a subgraph of the graph (a tree) with the minimum sum of edge weights.  A spanning forest is a union of the spanning trees for each connected component of the graph."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "For Bor\u016fvka's algorithm, each edge must have a weight attribute, and each edge weight must be distinct."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "For the other algorithms, if the graph edges do not have a weight attribute a default weight of 1 will be used."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Modified code from David Eppstein, April 2006 http://www.ics.uci.edu/~eppstein/PADS/"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "An undirected graph. If "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "G",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "G"
                    },
                    {
                      "type": "text",
                      "value": " is connected, then the algorithm finds a spanning tree. Otherwise, a spanning forest is found."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "G",
              "type": "Param",
              "type_": "undirected Graph"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The algorithm to use when finding a minimum spanning tree. Valid choices are 'kruskal', 'prim', or 'boruvka'. The default is 'kruskal'."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "algorithm",
              "type": "Param",
              "type_": "string"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Edge data key to use for weight (default 'weight')."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "weight",
              "type": "Param",
              "type_": "string"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Whether to yield edge key in multigraphs in addition to the edge. If "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "G",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "G"
                    },
                    {
                      "type": "text",
                      "value": " is not a multigraph, this is ignored."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "keys",
              "type": "Param",
              "type_": "bool"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "If True yield the edge data along with the edge."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "data",
              "type": "Param",
              "type_": "bool, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "If a NaN is found as an edge weight normally an exception is raised. If "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "ignore_nan is True"
                    },
                    {
                      "type": "text",
                      "value": " then that edge is ignored instead."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "ignore_nan",
              "type": "Param",
              "type_": "bool (default: False)"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "An iterator over edges in a maximum spanning tree of "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "G",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "G"
                    },
                    {
                      "type": "text",
                      "value": ". Edges connecting nodes "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "u"
                    },
                    {
                      "type": "text",
                      "value": " and "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "v"
                    },
                    {
                      "type": "text",
                      "value": " are represented as tuples: "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "(u, v, k, d)"
                    },
                    {
                      "type": "text",
                      "value": " or "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "(u, v, k)"
                    },
                    {
                      "type": "text",
                      "value": " or "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "(u, v, d)"
                    },
                    {
                      "type": "text",
                      "value": " or "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "(u, v)"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "If "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "G",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "G"
                    },
                    {
                      "type": "text",
                      "value": " is a multigraph, "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "keys",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "keys"
                    },
                    {
                      "type": "text",
                      "value": " indicates whether the edge key "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "k"
                    },
                    {
                      "type": "text",
                      "value": " will be reported in the third position in the edge tuple. "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "data",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "data"
                    },
                    {
                      "type": "text",
                      "value": " indicates whether the edge datadict "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "d"
                    },
                    {
                      "type": "text",
                      "value": " will appear at the end of the edge tuple."
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "If "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "G",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "G"
                    },
                    {
                      "type": "text",
                      "value": " is not a multigraph, the tuples are "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "(u, v, d)"
                    },
                    {
                      "type": "text",
                      "value": " if "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "data",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "data"
                    },
                    {
                      "type": "text",
                      "value": " is True or "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "(u, v)"
                    },
                    {
                      "type": "text",
                      "value": " if "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "data",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "data"
                    },
                    {
                      "type": "text",
                      "value": " is False."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "edges",
              "type": "Param",
              "type_": "iterator"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Generate edges in a minimum spanning forest of an undirected weighted graph."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [
      {
        "type": "code",
        "value": "from networkx.algorithms import tree"
      },
      {
        "type": "text",
        "value": "Find minimum spanning edges by Kruskal's algorithm"
      },
      {
        "type": "code",
        "value": "G = nx.cycle_graph(4)\nG.add_edge(0, 3, weight=2)\nmst = tree.minimum_spanning_edges(G, algorithm=\"kruskal\", data=False)\nedgelist = list(mst)\nsorted(sorted(e) for e in edgelist)"
      },
      {
        "type": "text",
        "value": "Find minimum spanning edges by Prim's algorithm"
      },
      {
        "type": "code",
        "value": "G = nx.cycle_graph(4)\nG.add_edge(0, 3, weight=2)\nmst = tree.minimum_spanning_edges(G, algorithm=\"prim\", data=False)\nedgelist = list(mst)\nsorted(sorted(e) for e in edgelist)"
      }
    ],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/networkx/algorithms/tree/mst.py",
  "item_line": 364,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns",
    "Examples",
    "Notes"
  ],
  "references": null,
  "see_also": [],
  "signature": {
    "type": "Signature",
    "value": "(G, algorithm='kruskal', weight='weight', keys=True, data=True, ignore_nan=False)"
  },
  "type": "DocBlob"
}