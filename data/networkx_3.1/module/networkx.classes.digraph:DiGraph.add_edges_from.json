{
  "aliases": [
    "networkx.DiGraph.add_edges_from"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Adding the same edge twice has no effect but any edge data will be updated when each duplicate edge is added."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Edge attributes specified in an ebunch take precedence over attributes specified via keyword arguments."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "When adding edges from an iterator over the graph you are changing, a "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "RuntimeError"
            },
            {
              "type": "text",
              "value": " can be raised with message: "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "RuntimeError: dictionary changed size during iteration"
            },
            {
              "type": "text",
              "value": ". This happens when the graph's underlying dictionary is modified during iteration. To avoid this error, evaluate the iterator into a separate object, e.g. by using "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "list(iterator_of_edges)"
            },
            {
              "type": "text",
              "value": ", and pass this object to "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "G.add_edges_from"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Each edge given in the container will be added to the graph. The edges must be given as 2-tuples (u, v) or 3-tuples (u, v, d) where d is a dictionary containing edge data."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "ebunch_to_add",
              "type": "Param",
              "type_": "container of edges"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Edge data (or labels or objects) can be assigned using keyword arguments."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "attr",
              "type": "Param",
              "type_": "keyword arguments, optional"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Add all the edges in ebunch_to_add."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [
      {
        "type": "code",
        "value": "G = nx.Graph()  # or DiGraph, MultiGraph, MultiDiGraph, etc\nG.add_edges_from([(0, 1), (1, 2)])  # using a list of edge tuples\ne = zip(range(0, 3), range(1, 4))\nG.add_edges_from(e)  # Add the path graph 0-1-2-3"
      },
      {
        "type": "text",
        "value": "Associate data to edges"
      },
      {
        "type": "code",
        "value": "G.add_edges_from([(1, 2), (2, 3)], weight=3)\nG.add_edges_from([(3, 4), (1, 4)], label=\"WN2898\")"
      },
      {
        "type": "text",
        "value": "Evaluate an iterator over a graph if using it to modify the same graph"
      },
      {
        "type": "code",
        "value": "G = nx.DiGraph([(1, 2), (2, 3), (3, 4)])\n# Grow graph by one new node, adding edges to all existing nodes.\n# wrong way - will raise RuntimeError\n# G.add_edges_from(((5, n) for n in G.nodes))\n# right way - note that there will be no self-edge for node 5\nG.add_edges_from(list((5, n) for n in G.nodes))"
      }
    ],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/networkx/classes/digraph.py",
  "item_line": 713,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Parameters",
    "See Also",
    "Notes",
    "Examples"
  ],
  "references": null,
  "see_also": [
    {
      "descriptions": [
        {
          "children": [
            {
              "type": "text",
              "value": "add a single edge"
            }
          ],
          "type": "paragraph"
        }
      ],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "module",
          "module": "networkx",
          "path": "networkx.classes.digraph:DiGraph.add_edge",
          "type": "RefInfo",
          "version": "3.1"
        },
        "type": "Link",
        "value": "add_edge"
      },
      "type": null
    },
    {
      "descriptions": [
        {
          "children": [
            {
              "type": "text",
              "value": "convenient way to add weighted edges"
            }
          ],
          "type": "paragraph"
        }
      ],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "module",
          "module": "networkx",
          "path": "networkx.classes.graph:Graph.add_weighted_edges_from",
          "type": "RefInfo",
          "version": "3.1"
        },
        "type": "Link",
        "value": "add_weighted_edges_from"
      },
      "type": null
    }
  ],
  "signature": {
    "type": "Signature",
    "value": "(self, ebunch_to_add, **attr)"
  },
  "type": "DocBlob"
}