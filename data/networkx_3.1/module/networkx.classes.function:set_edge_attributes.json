{
  "aliases": [
    "networkx.set_edge_attributes"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [
        {
          "args": "The call order of arguments `values` and `name`",
          "children": [],
          "name": "Warning",
          "options": {},
          "type": "mystDirective",
          "value": "switched between v1.x & v2.x."
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [],
              "param": "G",
              "type": "Param",
              "type_": "NetworkX Graph"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "What the edge attribute should be set to.  If "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "values",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "values"
                    },
                    {
                      "type": "text",
                      "value": " is not a dictionary, then it is treated as a single attribute value that is then applied to every edge in "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "G",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "G"
                    },
                    {
                      "type": "text",
                      "value": ".  This means that if you provide a mutable object, like a list, updates to that object will be reflected in the edge attribute for each edge.  The attribute name will be "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "name",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "name"
                    },
                    {
                      "type": "text",
                      "value": "."
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "If "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "values",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "values"
                    },
                    {
                      "type": "text",
                      "value": " is a dict or a dict of dict, it should be keyed by edge tuple to either an attribute value or a dict of attribute key/value pairs used to update the edge's attributes. For multigraphs, the edge tuples must be of the form "
                    },
                    {
                      "type": "inlineCode",
                      "value": "(u, v, key)"
                    },
                    {
                      "type": "text",
                      "value": ", where "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "u"
                    },
                    {
                      "type": "text",
                      "value": " and "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "v"
                    },
                    {
                      "type": "text",
                      "value": " are nodes and "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "key"
                    },
                    {
                      "type": "text",
                      "value": " is the edge key. For non-multigraphs, the keys must be tuples of the form "
                    },
                    {
                      "type": "inlineCode",
                      "value": "(u, v)"
                    },
                    {
                      "type": "text",
                      "value": "."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "values",
              "type": "Param",
              "type_": "scalar value, dict-like"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Name of the edge attribute to set if values is a scalar."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "name",
              "type": "Param",
              "type_": "string (optional, default=None)"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Sets edge attributes from a given value or dictionary of values."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [
      {
        "type": "text",
        "value": "After computing some property of the edges of a graph, you may want\nto assign a edge attribute to store the value of that property for\neach edge::"
      },
      {
        "type": "text",
        "value": "    >>> G = nx.path_graph(3)\n    >>> bb = nx.edge_betweenness_centrality(G, normalized=False)\n    >>> nx.set_edge_attributes(G, bb, \"betweenness\")\n    >>> G.edges[1, 2][\"betweenness\"]\n    2.0"
      },
      {
        "type": "text",
        "value": "If you provide a list as the second argument, updates to the list\nwill be reflected in the edge attribute for each edge::"
      },
      {
        "type": "text",
        "value": "    >>> labels = []\n    >>> nx.set_edge_attributes(G, labels, \"labels\")\n    >>> labels.append(\"foo\")\n    >>> G.edges[0, 1][\"labels\"]\n    ['foo']\n    >>> G.edges[1, 2][\"labels\"]\n    ['foo']"
      },
      {
        "type": "text",
        "value": "If you provide a dictionary of dictionaries as the second argument,\nthe entire dictionary will be used to update edge attributes::"
      },
      {
        "type": "text",
        "value": "    >>> G = nx.path_graph(3)\n    >>> attrs = {(0, 1): {\"attr1\": 20, \"attr2\": \"nothing\"}, (1, 2): {\"attr2\": 3}}\n    >>> nx.set_edge_attributes(G, attrs)\n    >>> G[0][1][\"attr1\"]\n    20\n    >>> G[0][1][\"attr2\"]\n    'nothing'\n    >>> G[1][2][\"attr2\"]\n    3"
      },
      {
        "type": "text",
        "value": "The attributes of one Graph can be used to set those of another."
      },
      {
        "type": "text",
        "value": "    >>> H = nx.path_graph(3)\n    >>> nx.set_edge_attributes(H, G.edges)"
      },
      {
        "type": "text",
        "value": "Note that if the dict contains edges that are not in `G`, they are\nsilently ignored::"
      },
      {
        "type": "text",
        "value": "    >>> G = nx.Graph([(0, 1)])\n    >>> nx.set_edge_attributes(G, {(1, 2): {\"weight\": 2.0}})\n    >>> (1, 2) in G.edges()\n    False"
      },
      {
        "type": "text",
        "value": "For multigraphs, the `values` dict is expected to be keyed by 3-tuples\nincluding the edge key::"
      },
      {
        "type": "text",
        "value": "    >>> MG = nx.MultiGraph()\n    >>> edges = [(0, 1), (0, 1)]\n    >>> MG.add_edges_from(edges)  # Returns list of edge keys\n    [0, 1]\n    >>> attributes = {(0, 1, 0): {\"cost\": 21}, (0, 1, 1): {\"cost\": 7}}\n    >>> nx.set_edge_attributes(MG, attributes)\n    >>> MG[0][1][0][\"cost\"]\n    21\n    >>> MG[0][1][1][\"cost\"]\n    7"
      },
      {
        "type": "text",
        "value": "If MultiGraph attributes are desired for a Graph, you must convert the 3-tuple\nmultiedge to a 2-tuple edge and the last multiedge's attribute value will\noverwrite the previous values. Continuing from the previous case we get::"
      },
      {
        "type": "text",
        "value": "    >>> H = nx.path_graph([0, 1, 2])\n    >>> nx.set_edge_attributes(H, {(u, v): ed for u, v, ed in MG.edges.data()})\n    >>> nx.get_edge_attributes(H, \"cost\")\n    {(0, 1): 7}"
      }
    ],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/networkx/classes/function.py",
  "item_line": 680,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Examples"
  ],
  "references": null,
  "see_also": [],
  "signature": {
    "type": "Signature",
    "value": "(G, values, name=None)"
  },
  "type": "DocBlob"
}