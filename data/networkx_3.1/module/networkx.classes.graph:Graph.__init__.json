{
  "aliases": [
    "networkx.Graph.__init__"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Data to initialize graph. If None (default) an empty graph is created.  The data can be an edge list, or any NetworkX graph object.  If the corresponding optional Python packages are installed the data can also be a 2D NumPy array, a SciPy sparse array, or a PyGraphviz graph."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "incoming_graph_data",
              "type": "Param",
              "type_": "input graph (optional, default: None)"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Attributes to add to graph as key=value pairs."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "attr",
              "type": "Param",
              "type_": "keyword arguments, optional (default= no attributes)"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Initialize a graph with edges, name, or graph attributes."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [
      {
        "type": "code",
        "value": "G = nx.Graph()  # or DiGraph, MultiGraph, MultiDiGraph, etc\nG = nx.Graph(name=\"my graph\")\ne = [(1, 2), (2, 3), (3, 4)]  # list of edges\nG = nx.Graph(e)"
      },
      {
        "type": "text",
        "value": "Arbitrary graph attribute pairs (key=value) may be assigned"
      },
      {
        "type": "code",
        "value": "G = nx.Graph(e, day=\"Friday\")\nG.graph"
      }
    ],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/networkx/classes/graph.py",
  "item_line": 332,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Parameters",
    "See Also",
    "Examples"
  ],
  "references": null,
  "see_also": [
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "module",
          "module": "networkx",
          "path": "networkx.convert",
          "type": "RefInfo",
          "version": "3.1"
        },
        "type": "Link",
        "value": "convert"
      },
      "type": null
    }
  ],
  "signature": {
    "type": "Signature",
    "value": "(self, incoming_graph_data=None, **attr)"
  },
  "type": "DocBlob"
}