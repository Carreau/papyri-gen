{
  "aliases": [
    "networkx.Graph.add_nodes_from"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "When adding nodes from an iterator over the graph you are changing, a "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "RuntimeError"
            },
            {
              "type": "text",
              "value": " can be raised with message: "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "RuntimeError: dictionary changed size during iteration"
            },
            {
              "type": "text",
              "value": ". This happens when the graph's underlying dictionary is modified during iteration. To avoid this error, evaluate the iterator into a separate object, e.g. by using "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "list(iterator_of_nodes)"
            },
            {
              "type": "text",
              "value": ", and pass this object to "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "G.add_nodes_from"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "A container of nodes (list, dict, set, etc.). OR A container of (node, attribute dict) tuples. Node attributes are updated using the attribute dict."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "nodes_for_adding",
              "type": "Param",
              "type_": "iterable container"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Update attributes for all nodes in nodes. Node attributes specified in nodes as a tuple take precedence over attributes specified via keyword arguments."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "attr",
              "type": "Param",
              "type_": "keyword arguments, optional (default= no attributes)"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Add multiple nodes."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [
      {
        "type": "code",
        "value": "G = nx.Graph()  # or DiGraph, MultiGraph, MultiDiGraph, etc\nG.add_nodes_from(\"Hello\")\nK3 = nx.Graph([(0, 1), (1, 2), (2, 0)])\nG.add_nodes_from(K3)\nsorted(G.nodes(), key=str)"
      },
      {
        "type": "text",
        "value": "Use keywords to update specific node attributes for every node."
      },
      {
        "type": "code",
        "value": "G.add_nodes_from([1, 2], size=10)\nG.add_nodes_from([3, 4], weight=0.4)"
      },
      {
        "type": "text",
        "value": "Use (node, attrdict) tuples to update attributes for specific nodes."
      },
      {
        "type": "code",
        "value": "G.add_nodes_from([(1, dict(size=11)), (2, {\"color\": \"blue\"})])\nG.nodes[1][\"size\"]"
      },
      {
        "type": "code",
        "value": "H = nx.Graph()\nH.add_nodes_from(G.nodes(data=True))\nH.nodes[1][\"size\"]"
      },
      {
        "type": "text",
        "value": "Evaluate an iterator over a graph if using it to modify the same graph"
      },
      {
        "type": "code",
        "value": "G = nx.Graph([(0, 1), (1, 2), (3, 4)])\n# wrong way - will raise RuntimeError\n# G.add_nodes_from(n + 1 for n in G.nodes)\n# correct way\nG.add_nodes_from(list(n + 1 for n in G.nodes))"
      }
    ],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/networkx/classes/graph.py",
  "item_line": 563,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Parameters",
    "See Also",
    "Notes",
    "Examples"
  ],
  "references": null,
  "see_also": [
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "module",
          "module": "networkx",
          "path": "networkx.classes.graph:Graph.add_node",
          "type": "RefInfo",
          "version": "3.1"
        },
        "type": "Link",
        "value": "add_node"
      },
      "type": null
    }
  ],
  "signature": {
    "type": "Signature",
    "value": "(self, nodes_for_adding, **attr)"
  },
  "type": "DocBlob"
}