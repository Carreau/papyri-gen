{
  "aliases": [
    "networkx.Graph"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "A Graph stores nodes and edges with optional data, or attributes."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Graphs hold undirected edges.  Self loops are allowed but multiple (parallel) edges are not."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Nodes can be arbitrary (hashable) Python objects with optional key/value attributes, except that "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "None"
            },
            {
              "type": "text",
              "value": " is not allowed as a node."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Edges are represented as links between nodes with optional key/value attributes."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Data to initialize graph. If None (default) an empty graph is created.  The data can be any format that is supported by the to_networkx_graph() function, currently including edge list, dict of dicts, dict of lists, NetworkX graph, 2D NumPy array, SciPy sparse matrix, or PyGraphviz graph."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "incoming_graph_data",
              "type": "Param",
              "type_": "input graph (optional, default: None)"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Attributes to add to graph as key=value pairs."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "attr",
              "type": "Param",
              "type_": "keyword arguments, optional (default= no attributes)"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Base class for undirected graphs."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [
      {
        "type": "text",
        "value": "Create an empty graph structure (a \"null graph\") with no nodes and\nno edges."
      },
      {
        "type": "code",
        "value": "G = nx.Graph()"
      },
      {
        "type": "text",
        "value": "G can be grown in several ways."
      },
      {
        "type": "text",
        "value": "**Nodes:**"
      },
      {
        "type": "text",
        "value": "Add one node at a time:"
      },
      {
        "type": "code",
        "value": "G.add_node(1)"
      },
      {
        "type": "text",
        "value": "Add the nodes from any container (a list, dict, set or\neven the lines from a file or the nodes from another graph)."
      },
      {
        "type": "code",
        "value": "G.add_nodes_from([2, 3])\nG.add_nodes_from(range(100, 110))\nH = nx.path_graph(10)\nG.add_nodes_from(H)"
      },
      {
        "type": "text",
        "value": "In addition to strings and integers any hashable Python object\n(except None) can represent a node, e.g. a customized node object,\nor even another Graph."
      },
      {
        "type": "code",
        "value": "G.add_node(H)"
      },
      {
        "type": "text",
        "value": "**Edges:**"
      },
      {
        "type": "text",
        "value": "G can also be grown by adding edges."
      },
      {
        "type": "text",
        "value": "Add one edge,"
      },
      {
        "type": "code",
        "value": "G.add_edge(1, 2)"
      },
      {
        "type": "text",
        "value": "a list of edges,"
      },
      {
        "type": "code",
        "value": "G.add_edges_from([(1, 2), (1, 3)])"
      },
      {
        "type": "text",
        "value": "or a collection of edges,"
      },
      {
        "type": "code",
        "value": "G.add_edges_from(H.edges)"
      },
      {
        "type": "text",
        "value": "If some edges connect nodes not yet in the graph, the nodes\nare added automatically.  There are no errors when adding\nnodes or edges that already exist."
      },
      {
        "type": "text",
        "value": "**Attributes:**"
      },
      {
        "type": "text",
        "value": "Each graph, node, and edge can hold key/value attribute pairs\nin an associated attribute dictionary (the keys must be hashable).\nBy default these are empty, but can be added or changed using\nadd_edge, add_node or direct manipulation of the attribute\ndictionaries named graph, node and edge respectively."
      },
      {
        "type": "code",
        "value": "G = nx.Graph(day=\"Friday\")\nG.graph"
      },
      {
        "type": "text",
        "value": "Add node attributes using add_node(), add_nodes_from() or G.nodes"
      },
      {
        "type": "code",
        "value": "G.add_node(1, time=\"5pm\")\nG.add_nodes_from([3], time=\"2pm\")\nG.nodes[1]"
      },
      {
        "type": "code",
        "value": "G.nodes[1][\"room\"] = 714  # node must exist already to use G.nodes\ndel G.nodes[1][\"room\"]  # remove attribute\nlist(G.nodes(data=True))"
      },
      {
        "type": "text",
        "value": "Add edge attributes using add_edge(), add_edges_from(), subscript\nnotation, or G.edges."
      },
      {
        "type": "code",
        "value": "G.add_edge(1, 2, weight=4.7)\nG.add_edges_from([(3, 4), (4, 5)], color=\"red\")\nG.add_edges_from([(1, 2, {\"color\": \"blue\"}), (2, 3, {\"weight\": 8})])\nG[1][2][\"weight\"] = 4.7\nG.edges[1, 2][\"weight\"] = 4"
      },
      {
        "type": "text",
        "value": "Warning: we protect the graph data structure by making `G.edges` a\nread-only dict-like structure. However, you can assign to attributes\nin e.g. `G.edges[1, 2]`. Thus, use 2 sets of brackets to add/change\ndata attributes: `G.edges[1, 2]['weight'] = 4`\n(For multigraphs: `MG.edges[u, v, key][name] = value`)."
      },
      {
        "type": "text",
        "value": "**Shortcuts:**"
      },
      {
        "type": "text",
        "value": "Many common graph features allow python syntax to speed reporting."
      },
      {
        "type": "code",
        "value": "1 in G  # check if node in graph"
      },
      {
        "type": "code",
        "value": "[n for n in G if n < 3]  # iterate through nodes"
      },
      {
        "type": "code",
        "value": "len(G)  # number of nodes in graph"
      },
      {
        "type": "text",
        "value": "Often the best way to traverse all edges of a graph is via the neighbors.\nThe neighbors are reported as an adjacency-dict `G.adj` or `G.adjacency()`"
      },
      {
        "type": "code",
        "value": "for n, nbrsdict in G.adjacency():\n    for nbr, eattr in nbrsdict.items():\n        if \"weight\" in eattr:\n            # Do something useful with the edges\n            pass"
      },
      {
        "type": "text",
        "value": "But the edges() method is often more convenient:"
      },
      {
        "type": "code",
        "value": "for u, v, weight in G.edges.data(\"weight\"):\n    if weight is not None:\n        # Do something useful with the edges\n        pass"
      },
      {
        "type": "text",
        "value": "**Reporting:**"
      },
      {
        "type": "text",
        "value": "Simple graph information is obtained using object-attributes and methods.\nReporting typically provides views instead of containers to reduce memory\nusage. The views update as the graph is updated similarly to dict-views.\nThe objects `nodes`, `edges` and `adj` provide access to data attributes\nvia lookup (e.g. `nodes[n]`, `edges[u, v]`, `adj[u][v]`) and iteration\n(e.g. `nodes.items()`, `nodes.data('color')`,\n`nodes.data('color', default='blue')` and similarly for `edges`)\nViews exist for `nodes`, `edges`, `neighbors()`/`adj` and `degree`."
      },
      {
        "type": "text",
        "value": "For details on these and other miscellaneous methods, see below."
      },
      {
        "type": "text",
        "value": "**Subclasses (Advanced):**"
      },
      {
        "type": "text",
        "value": "The Graph class uses a dict-of-dict-of-dict data structure.\nThe outer dict (node_dict) holds adjacency information keyed by node.\nThe next dict (adjlist_dict) represents the adjacency information and holds\nedge data keyed by neighbor.  The inner dict (edge_attr_dict) represents\nthe edge data and holds edge attribute values keyed by attribute names."
      },
      {
        "type": "text",
        "value": "Each of these three dicts can be replaced in a subclass by a user defined\ndict-like object. In general, the dict-like features should be\nmaintained but extra features can be added. To replace one of the\ndicts create a new graph class by changing the class(!) variable\nholding the factory for that dict-like structure."
      },
      {
        "type": "text",
        "value": "node_dict_factory : function, (default: dict)\n    Factory function to be used to create the dict containing node\n    attributes, keyed by node id.\n    It should require no arguments and return a dict-like object"
      },
      {
        "type": "text",
        "value": "node_attr_dict_factory: function, (default: dict)\n    Factory function to be used to create the node attribute\n    dict which holds attribute values keyed by attribute name.\n    It should require no arguments and return a dict-like object"
      },
      {
        "type": "text",
        "value": "adjlist_outer_dict_factory : function, (default: dict)\n    Factory function to be used to create the outer-most dict\n    in the data structure that holds adjacency info keyed by node.\n    It should require no arguments and return a dict-like object."
      },
      {
        "type": "text",
        "value": "adjlist_inner_dict_factory : function, (default: dict)\n    Factory function to be used to create the adjacency list\n    dict which holds edge data keyed by neighbor.\n    It should require no arguments and return a dict-like object"
      },
      {
        "type": "text",
        "value": "edge_attr_dict_factory : function, (default: dict)\n    Factory function to be used to create the edge attribute\n    dict which holds attribute values keyed by attribute name.\n    It should require no arguments and return a dict-like object."
      },
      {
        "type": "text",
        "value": "graph_attr_dict_factory : function, (default: dict)\n    Factory function to be used to create the graph attribute\n    dict which holds attribute values keyed by attribute name.\n    It should require no arguments and return a dict-like object."
      },
      {
        "type": "text",
        "value": "Typically, if your extension doesn't impact the data structure all\nmethods will inherit without issue except: `to_directed/to_undirected`.\nBy default these methods create a DiGraph/Graph class and you probably\nwant them to create your extension of a DiGraph/Graph. To facilitate\nthis we define two class variables that you can set in your subclass."
      },
      {
        "type": "text",
        "value": "to_directed_class : callable, (default: DiGraph or MultiDiGraph)\n    Class to create a new graph structure in the `to_directed` method.\n    If `None`, a NetworkX class (DiGraph or MultiDiGraph) is used."
      },
      {
        "type": "text",
        "value": "to_undirected_class : callable, (default: Graph or MultiGraph)\n    Class to create a new graph structure in the `to_undirected` method.\n    If `None`, a NetworkX class (Graph or MultiGraph) is used."
      },
      {
        "type": "text",
        "value": "**Subclassing Example**"
      },
      {
        "type": "text",
        "value": "Create a low memory graph class that effectively disallows edge\nattributes by using a single attribute dict for all edges.\nThis reduces the memory used, but you lose edge attributes."
      },
      {
        "type": "code",
        "value": "class ThinGraph(nx.Graph):\n    all_edge_dict = {\"weight\": 1}"
      },
      {
        "type": "code",
        "value": "G = ThinGraph()\nG.add_edge(2, 1)\nG[2][1]"
      },
      {
        "type": "code",
        "value": "G.add_edge(2, 2)\nG[2][1] is G[2][2]"
      }
    ],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/networkx/classes/graph.py",
  "item_line": 66,
  "item_type": "<class 'type'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "See Also",
    "Examples"
  ],
  "references": null,
  "see_also": [
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "to-resolve",
          "module": "current-module",
          "path": "DiGraph",
          "type": "RefInfo",
          "version": "current-version"
        },
        "type": "Link",
        "value": "DiGraph"
      },
      "type": null
    },
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "to-resolve",
          "module": "current-module",
          "path": "MultiGraph",
          "type": "RefInfo",
          "version": "current-version"
        },
        "type": "Link",
        "value": "MultiGraph"
      },
      "type": null
    },
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "to-resolve",
          "module": "current-module",
          "path": "MultiDiGraph",
          "type": "RefInfo",
          "version": "current-version"
        },
        "type": "Link",
        "value": "MultiDiGraph"
      },
      "type": null
    }
  ],
  "signature": {
    "type": "Signature",
    "value": null
  },
  "type": "DocBlob"
}