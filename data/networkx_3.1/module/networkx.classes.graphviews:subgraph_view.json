{
  "aliases": [
    "networkx.subgraph_view"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [
        {
          "children": [
            {
              "anchor": null,
              "exists": true,
              "kind": "module",
              "reference": {
                "kind": "module",
                "module": "networkx",
                "path": "networkx.classes.graphviews:subgraph_view",
                "type": "RefInfo",
                "version": "3.1"
              },
              "type": "Link",
              "value": "subgraph_view"
            },
            {
              "type": "text",
              "value": " provides a read-only view of the input graph that excludes nodes and edges based on the outcome of two filter functions "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "filter_node",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "filter_node"
            },
            {
              "type": "text",
              "value": " and "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "filter_edge",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "filter_edge"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "The "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "filter_node",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "filter_node"
            },
            {
              "type": "text",
              "value": " function takes one argument --- the node --- and returns "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "True"
            },
            {
              "type": "text",
              "value": " if the node should be included in the subgraph, and "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "False"
            },
            {
              "type": "text",
              "value": " if it should not be included."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "The "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "filter_edge",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "filter_edge"
            },
            {
              "type": "text",
              "value": " function takes two (or three arguments if "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "G",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "G"
            },
            {
              "type": "text",
              "value": " is a multi-graph) --- the nodes describing an edge, plus the edge-key if parallel edges are possible --- and returns "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "True"
            },
            {
              "type": "text",
              "value": " if the edge should be included in the subgraph, and "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "False"
            },
            {
              "type": "text",
              "value": " if it should not be included."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Both node and edge filter functions are called on graph elements as they are queried, meaning there is no up-front cost to creating the view."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "A directed/undirected graph/multigraph"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "G",
              "type": "Param",
              "type_": "networkx.Graph"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "A function taking a node as input, which returns "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "True"
                    },
                    {
                      "type": "text",
                      "value": " if the node should appear in the view."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "filter_node",
              "type": "Param",
              "type_": "callable, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "A function taking as input the two nodes describing an edge (plus the edge-key if "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "G",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "G"
                    },
                    {
                      "type": "text",
                      "value": " is a multi-graph), which returns "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "True"
                    },
                    {
                      "type": "text",
                      "value": " if the edge should appear in the view."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "filter_edge",
              "type": "Param",
              "type_": "callable, optional"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "A read-only graph view of the input graph."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "graph",
              "type": "Param",
              "type_": "networkx.Graph"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "View of "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "G",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "G"
            },
            {
              "type": "text",
              "value": " applying a filter on nodes and edges."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [
      {
        "type": "code",
        "value": "G = nx.path_graph(6)"
      },
      {
        "type": "text",
        "value": "Filter functions operate on the node, and return `True` if the node should\nappear in the view:"
      },
      {
        "type": "code",
        "value": "def filter_node(n1):\n    return n1 != 5"
      },
      {
        "type": "code",
        "value": "view = nx.subgraph_view(G, filter_node=filter_node)\nview.nodes()"
      },
      {
        "type": "text",
        "value": "We can use a closure pattern to filter graph elements based on additional\ndata --- for example, filtering on edge data attached to the graph:"
      },
      {
        "type": "code",
        "value": "G[3][4][\"cross_me\"] = False\ndef filter_edge(n1, n2):\n    return G[n1][n2].get(\"cross_me\", True)"
      },
      {
        "type": "code",
        "value": "view = nx.subgraph_view(G, filter_edge=filter_edge)\nview.edges()"
      },
      {
        "type": "code",
        "value": "view = nx.subgraph_view(G, filter_node=filter_node, filter_edge=filter_edge,)\nview.nodes()"
      },
      {
        "type": "code",
        "value": "view.edges()"
      }
    ],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/networkx/classes/graphviews.py",
  "item_line": 74,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns",
    "Examples"
  ],
  "references": null,
  "see_also": [],
  "signature": {
    "type": "Signature",
    "value": "(G, filter_node=<function no_filter at 0x107b0bec0>, filter_edge=<function no_filter at 0x107b0bec0>)"
  },
  "type": "DocBlob"
}