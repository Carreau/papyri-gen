{
  "aliases": [
    "networkx.MultiDiGraph.remove_edge"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Remove an edge between nodes u and v."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "u, v",
              "type": "Param",
              "type_": "nodes"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Used to distinguish multiple edges between a pair of nodes. If None, remove a single edge between u and v. If there are multiple edges, removes the last edge added in terms of insertion order."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "key",
              "type": "Param",
              "type_": "hashable identifier, optional (default=None)"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "If there is not an edge between u and v, or if there is no edge with the specified key."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "",
              "type": "Param",
              "type_": "NetworkXError"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Remove an edge between u and v."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [
      {
        "type": "code",
        "value": "G = nx.MultiDiGraph()\nnx.add_path(G, [0, 1, 2, 3])\nG.remove_edge(0, 1)\ne = (1, 2)\nG.remove_edge(*e)  # unpacks e from an edge tuple"
      },
      {
        "type": "text",
        "value": "For multiple edges"
      },
      {
        "type": "code",
        "value": "G = nx.MultiDiGraph()\nG.add_edges_from([(1, 2), (1, 2), (1, 2)])  # key_list returned"
      },
      {
        "type": "text",
        "value": "When ``key=None`` (the default), edges are removed in the opposite\norder that they were added:"
      },
      {
        "type": "code",
        "value": "G.remove_edge(1, 2)\nG.edges(keys=True)"
      },
      {
        "type": "text",
        "value": "For edges with keys"
      },
      {
        "type": "code",
        "value": "G = nx.MultiDiGraph()\nG.add_edge(1, 2, key=\"first\")"
      },
      {
        "type": "code",
        "value": "G.add_edge(1, 2, key=\"second\")"
      },
      {
        "type": "code",
        "value": "G.remove_edge(1, 2, key=\"first\")\nG.edges(keys=True)"
      }
    ],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/networkx/classes/multidigraph.py",
  "item_line": 513,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Parameters",
    "Raises",
    "See Also",
    "Examples"
  ],
  "references": null,
  "see_also": [
    {
      "descriptions": [
        {
          "children": [
            {
              "type": "text",
              "value": "remove a collection of edges"
            }
          ],
          "type": "paragraph"
        }
      ],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "to-resolve",
          "module": "current-module",
          "path": "remove_edges_from",
          "type": "RefInfo",
          "version": "current-version"
        },
        "type": "Link",
        "value": "remove_edges_from"
      },
      "type": null
    }
  ],
  "signature": {
    "type": "Signature",
    "value": "(self, u, v, key=None)"
  },
  "type": "DocBlob"
}