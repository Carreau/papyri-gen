{
  "aliases": [
    "networkx.MultiGraph.__init__"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Data to initialize graph.  If incoming_graph_data=None (default) an empty graph is created.  The data can be an edge list, or any NetworkX graph object.  If the corresponding optional Python packages are installed the data can also be a 2D NumPy array, a SciPy sparse array, or a PyGraphviz graph."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "incoming_graph_data",
              "type": "Param",
              "type_": "input graph"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Note: Only used when "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "incoming_graph_data",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "incoming_graph_data"
                    },
                    {
                      "type": "text",
                      "value": " is a dict. If True, "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "incoming_graph_data",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "incoming_graph_data"
                    },
                    {
                      "type": "text",
                      "value": " is assumed to be a dict-of-dict-of-dict-of-dict structure keyed by node to neighbor to edge keys to edge data for multi-edges. A NetworkXError is raised if this is not the case. If False, "
                    },
                    {
                      "type": "inlineCode",
                      "value": "to_networkx_graph"
                    },
                    {
                      "type": "text",
                      "value": " is used to try to determine the dict's graph data structure as either a dict-of-dict-of-dict keyed by node to neighbor to edge data, or a dict-of-iterable keyed by node to neighbors. If None, the treatment for True is tried, but if it fails, the treatment for False is tried."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "multigraph_input",
              "type": "Param",
              "type_": "bool or None (default None)"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Attributes to add to graph as key=value pairs."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "attr",
              "type": "Param",
              "type_": "keyword arguments, optional (default= no attributes)"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Initialize a graph with edges, name, or graph attributes."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [
      {
        "type": "code",
        "value": "G = nx.MultiGraph()\nG = nx.MultiGraph(name=\"my graph\")\ne = [(1, 2), (1, 2), (2, 3), (3, 4)]  # list of edges\nG = nx.MultiGraph(e)"
      },
      {
        "type": "text",
        "value": "Arbitrary graph attribute pairs (key=value) may be assigned"
      },
      {
        "type": "code",
        "value": "G = nx.MultiGraph(e, day=\"Friday\")\nG.graph"
      }
    ],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/networkx/classes/multigraph.py",
  "item_line": 309,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Parameters",
    "See Also",
    "Examples"
  ],
  "references": null,
  "see_also": [
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "module",
          "module": "networkx",
          "path": "networkx.convert",
          "type": "RefInfo",
          "version": "3.1"
        },
        "type": "Link",
        "value": "convert"
      },
      "type": null
    }
  ],
  "signature": {
    "type": "Signature",
    "value": "(self, incoming_graph_data=None, multigraph_input=None, **attr)"
  },
  "type": "DocBlob"
}