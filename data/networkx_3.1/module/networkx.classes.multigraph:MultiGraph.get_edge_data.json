{
  "aliases": [
    "networkx.MultiGraph.get_edge_data"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "If a key is not provided, returns a dictionary mapping edge keys to attribute dictionaries for each edge between u and v."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "This is identical to "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "G[u][v][key]"
            },
            {
              "type": "text",
              "value": " except the default is returned instead of an exception is the edge doesn't exist."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [],
              "param": "u, v",
              "type": "Param",
              "type_": "nodes"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Value to return if the specific edge (u, v, key) is not found, OR if there are no edges between u and v and no key is specified."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "default",
              "type": "Param",
              "type_": "any Python object (default=None)"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Return data only for the edge with specified key, as an attribute dictionary (rather than a dictionary mapping keys to attribute dictionaries)."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "key",
              "type": "Param",
              "type_": "hashable identifier, optional (default=None)"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The edge attribute dictionary, OR a dictionary mapping edge keys to attribute dictionaries for each of those edges if no specific key is provided (even if there's only one edge between u and v)."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "edge_dict",
              "type": "Param",
              "type_": "dictionary"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Returns the attribute dictionary associated with edge (u, v, key)."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [
      {
        "type": "code",
        "value": "G = nx.MultiGraph()  # or MultiDiGraph\nkey = G.add_edge(0, 1, key=\"a\", weight=7)\nG[0][1][\"a\"]  # key='a'"
      },
      {
        "type": "code",
        "value": "G.edges[0, 1, \"a\"]  # key='a'"
      },
      {
        "type": "text",
        "value": "Warning: we protect the graph data structure by making\n`G.edges` and `G[1][2]` read-only dict-like structures.\nHowever, you can assign values to attributes in e.g.\n`G.edges[1, 2, 'a']` or `G[1][2]['a']` using an additional\nbracket as shown next. You need to specify all edge info\nto assign to the edge data associated with an edge."
      },
      {
        "type": "code",
        "value": "G[0][1][\"a\"][\"weight\"] = 10\nG.edges[0, 1, \"a\"][\"weight\"] = 10\nG[0][1][\"a\"][\"weight\"]"
      },
      {
        "type": "code",
        "value": "G.edges[1, 0, \"a\"][\"weight\"]"
      },
      {
        "type": "code",
        "value": "G = nx.MultiGraph()  # or MultiDiGraph\nnx.add_path(G, [0, 1, 2, 3])\nG.edges[0, 1, 0][\"weight\"] = 5\nG.get_edge_data(0, 1)"
      },
      {
        "type": "code",
        "value": "e = (0, 1)\nG.get_edge_data(*e)  # tuple form"
      },
      {
        "type": "code",
        "value": "G.get_edge_data(3, 0)  # edge not in graph, returns None\nG.get_edge_data(3, 0, default=0)  # edge not in graph, return default"
      },
      {
        "type": "code",
        "value": "G.get_edge_data(1, 0, 0)  # specific key gives back"
      }
    ],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/networkx/classes/multigraph.py",
  "item_line": 893,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns",
    "Examples"
  ],
  "references": null,
  "see_also": [],
  "signature": {
    "type": "Signature",
    "value": "(self, u, v, key=None, default=None)"
  },
  "type": "DocBlob"
}