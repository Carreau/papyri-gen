{
  "aliases": [
    "networkx.MultiGraph.has_edge"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "This is the same as "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "v in G[u] or key in G[u][v]"
            },
            {
              "type": "text",
              "value": " without KeyError exceptions."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Nodes can be, for example, strings or numbers."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "u, v",
              "type": "Param",
              "type_": "nodes"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "If specified return True only if the edge with key is found."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "key",
              "type": "Param",
              "type_": "hashable identifier, optional (default=None)"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "True if edge is in the graph, False otherwise."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "edge_ind",
              "type": "Param",
              "type_": "bool"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Returns True if the graph has an edge between nodes u and v."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [
      {
        "type": "text",
        "value": "Can be called either using two nodes u, v, an edge tuple (u, v),\nor an edge tuple (u, v, key)."
      },
      {
        "type": "code",
        "value": "G = nx.MultiGraph()  # or MultiDiGraph\nnx.add_path(G, [0, 1, 2, 3])\nG.has_edge(0, 1)  # using two nodes"
      },
      {
        "type": "code",
        "value": "e = (0, 1)\nG.has_edge(*e)  #  e is a 2-tuple (u, v)"
      },
      {
        "type": "code",
        "value": "G.add_edge(0, 1, key=\"a\")"
      },
      {
        "type": "code",
        "value": "G.has_edge(0, 1, key=\"a\")  # specify key"
      },
      {
        "type": "code",
        "value": "G.has_edge(1, 0, key=\"a\")  # edges aren't directed"
      },
      {
        "type": "code",
        "value": "e = (0, 1, \"a\")\nG.has_edge(*e)  # e is a 3-tuple (u, v, 'a')"
      },
      {
        "type": "text",
        "value": "The following syntax are equivalent:"
      },
      {
        "type": "code",
        "value": "G.has_edge(0, 1)"
      },
      {
        "type": "code",
        "value": "1 in G[0]  # though this gives :exc:`KeyError` if 0 not in G"
      },
      {
        "type": "code",
        "value": "0 in G[1]  # other order; also gives :exc:`KeyError` if 0 not in G"
      }
    ],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/networkx/classes/multigraph.py",
  "item_line": 757,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns",
    "Examples"
  ],
  "references": null,
  "see_also": [],
  "signature": {
    "type": "Signature",
    "value": "(self, u, v, key=None)"
  },
  "type": "DocBlob"
}