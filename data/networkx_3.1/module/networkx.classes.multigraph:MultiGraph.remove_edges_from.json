{
  "aliases": [
    "networkx.MultiGraph.remove_edges_from"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Will fail silently if an edge in ebunch is not in the graph."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Each edge given in the list or container will be removed from the graph. The edges can be:"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "children": [
                        {
                          "children": [
                            {
                              "children": [
                                {
                                  "type": "text",
                                  "value": "2-tuples (u, v) A single edge between u and v is removed."
                                }
                              ],
                              "type": "paragraph"
                            }
                          ],
                          "spread": false,
                          "type": "listItem"
                        },
                        {
                          "children": [
                            {
                              "children": [
                                {
                                  "type": "text",
                                  "value": "3-tuples (u, v, key) The edge identified by key is removed."
                                }
                              ],
                              "type": "paragraph"
                            }
                          ],
                          "spread": false,
                          "type": "listItem"
                        },
                        {
                          "children": [
                            {
                              "children": [
                                {
                                  "type": "text",
                                  "value": "4-tuples (u, v, key, data) where data is ignored."
                                }
                              ],
                              "type": "paragraph"
                            }
                          ],
                          "spread": false,
                          "type": "listItem"
                        }
                      ],
                      "ordered": false,
                      "spread": false,
                      "start": 1,
                      "type": "list"
                    }
                  ],
                  "type": "blockquote"
                }
              ],
              "param": "ebunch: list or container of edge tuples",
              "type": "Param",
              "type_": ""
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Remove all edges specified in ebunch."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [
      {
        "type": "code",
        "value": "G = nx.path_graph(4)  # or DiGraph, MultiGraph, MultiDiGraph, etc\nebunch = [(1, 2), (2, 3)]\nG.remove_edges_from(ebunch)"
      },
      {
        "type": "text",
        "value": "Removing multiple copies of edges"
      },
      {
        "type": "code",
        "value": "G = nx.MultiGraph()\nkeys = G.add_edges_from([(1, 2), (1, 2), (1, 2)])\nG.remove_edges_from([(1, 2), (2, 1)])  # edges aren't directed\nlist(G.edges())"
      },
      {
        "type": "code",
        "value": "G.remove_edges_from([(1, 2), (1, 2)])  # silently ignore extra copy\nlist(G.edges)  # now empty graph"
      },
      {
        "type": "text",
        "value": "When the edge is a 2-tuple ``(u, v)`` but there are multiple edges between\nu and v in the graph, the most recent edge (in terms of insertion\norder) is removed."
      },
      {
        "type": "code",
        "value": "G = nx.MultiGraph()\nfor key in (\"x\", \"y\", \"a\"):\n    k = G.add_edge(0, 1, key=key)\nG.edges(keys=True)"
      },
      {
        "type": "code",
        "value": "G.remove_edges_from([(0, 1)])\nG.edges(keys=True)"
      }
    ],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/networkx/classes/multigraph.py",
  "item_line": 699,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Parameters",
    "See Also",
    "Notes",
    "Examples"
  ],
  "references": null,
  "see_also": [
    {
      "descriptions": [
        {
          "children": [
            {
              "type": "text",
              "value": "remove a single edge"
            }
          ],
          "type": "paragraph"
        }
      ],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "module",
          "module": "networkx",
          "path": "networkx.classes.multigraph:MultiGraph.remove_edge",
          "type": "RefInfo",
          "version": "3.1"
        },
        "type": "Link",
        "value": "remove_edge"
      },
      "type": null
    }
  ],
  "signature": {
    "type": "Signature",
    "value": "(self, ebunch)"
  },
  "type": "DocBlob"
}