{
  "aliases": [
    "networkx.graph.EdgeView"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "This densely packed View allows iteration over edges, data lookup like a dict and set operations on edges represented by node-tuples. In addition, edge data can be controlled by calling this object possibly creating an EdgeDataView. Typically edges are iterated over and reported as "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "(u, v)"
            },
            {
              "type": "text",
              "value": " node tuples or "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "(u, v, key)"
            },
            {
              "type": "text",
              "value": " node/key tuples for multigraphs. Those edge representations can also be using to lookup the data dict for any edge. Set operations also are available where those tuples are the elements of the set. Calling this object with optional arguments "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "data",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "data"
            },
            {
              "type": "text",
              "value": ", "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "default",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "default"
            },
            {
              "type": "text",
              "value": " and "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "keys",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "keys"
            },
            {
              "type": "text",
              "value": " controls the form of the tuple (see EdgeDataView). Optional argument "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "nbunch",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "nbunch"
            },
            {
              "type": "text",
              "value": " allows restriction to edges only involving certain nodes."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "If "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "data is False"
            },
            {
              "type": "text",
              "value": " (the default) then iterate over 2-tuples "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "(u, v)"
            },
            {
              "type": "text",
              "value": ". If "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "data is True"
            },
            {
              "type": "text",
              "value": " iterate over 3-tuples "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "(u, v, datadict)"
            },
            {
              "type": "text",
              "value": ". Otherwise iterate over "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "(u, v, datadict.get(data, default))"
            },
            {
              "type": "text",
              "value": ". For Multigraphs, if "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "keys is True"
            },
            {
              "type": "text",
              "value": ", replace "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "u, v"
            },
            {
              "type": "text",
              "value": " with "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "u, v, key"
            },
            {
              "type": "text",
              "value": " above."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [],
              "param": "graph",
              "type": "Param",
              "type_": "NetworkX graph-like class"
            },
            {
              "desc": [],
              "param": "nbunch",
              "type": "Param",
              "type_": "(default= all nodes in graph) only report edges with these nodes"
            },
            {
              "desc": [],
              "param": "keys",
              "type": "Param",
              "type_": "(only for MultiGraph. default=False) report edge key in tuple"
            },
            {
              "desc": [],
              "param": "data",
              "type": "Param",
              "type_": "bool or string (default=False) see above"
            },
            {
              "desc": [],
              "param": "default",
              "type": "Param",
              "type_": "object (default=None)"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "A EdgeView class for edges of a Graph"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [
      {
        "type": "code",
        "value": "G = nx.path_graph(4)\nEV = G.edges()\n(2, 3) in EV"
      },
      {
        "type": "code",
        "value": "for u, v in EV:\n    print((u, v))"
      },
      {
        "type": "code",
        "value": "assert EV & {(1, 2), (3, 4)} == {(1, 2)}"
      },
      {
        "type": "code",
        "value": "EVdata = G.edges(data=\"color\", default=\"aqua\")\nG.add_edge(2, 3, color=\"blue\")\nassert (2, 3, \"blue\") in EVdata\nfor u, v, c in EVdata:\n    print(f\"({u}, {v}) has color: {c}\")"
      },
      {
        "type": "code",
        "value": "EVnbunch = G.edges(nbunch=2)\nassert (2, 3) in EVnbunch\nassert (0, 1) not in EVnbunch\nfor u, v in EVnbunch:\n    assert u == 2 or v == 2"
      },
      {
        "type": "code",
        "value": "MG = nx.path_graph(4, create_using=nx.MultiGraph)\nEVmulti = MG.edges(keys=True)\n(2, 3, 0) in EVmulti"
      },
      {
        "type": "code",
        "value": "(2, 3) in EVmulti  # 2-tuples work even when keys is True"
      },
      {
        "type": "code",
        "value": "key = MG.add_edge(2, 3)\nfor u, v, k in EVmulti:\n    print((u, v, k))"
      }
    ],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/networkx/classes/reportviews.py",
  "item_line": 1179,
  "item_type": "<class 'abc.ABCMeta'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Examples"
  ],
  "references": null,
  "see_also": [],
  "signature": {
    "type": "Signature",
    "value": null
  },
  "type": "DocBlob"
}