{
  "aliases": [
    "networkx.graph.NodeView"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Set operations act on the nodes without considering data. Iteration is over nodes. Node data can be looked up like a dict. Use NodeDataView to iterate over node data or to specify a data attribute for lookup. NodeDataView is created by calling the NodeView."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [],
              "param": "graph",
              "type": "Param",
              "type_": "NetworkX graph-like class"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "A NodeView class to act as G.nodes for a NetworkX Graph"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [
      {
        "type": "code",
        "value": "G = nx.path_graph(3)\nNV = G.nodes()\n2 in NV"
      },
      {
        "type": "code",
        "value": "for n in NV:\n    print(n)"
      },
      {
        "type": "code",
        "value": "assert NV & {1, 2, 3} == {1, 2}"
      },
      {
        "type": "code",
        "value": "G.add_node(2, color=\"blue\")\nNV[2]"
      },
      {
        "type": "code",
        "value": "G.add_node(8, color=\"red\")\nNDV = G.nodes(data=True)\n(2, NV[2]) in NDV"
      },
      {
        "type": "code",
        "value": "for n, dd in NDV:\n    print((n, dd.get(\"color\", \"aqua\")))"
      },
      {
        "type": "code",
        "value": "NDV[2] == NV[2]"
      },
      {
        "type": "code",
        "value": "NVdata = G.nodes(data=\"color\", default=\"aqua\")\n(2, NVdata[2]) in NVdata"
      },
      {
        "type": "code",
        "value": "for n, dd in NVdata:\n    print((n, dd))"
      },
      {
        "type": "code",
        "value": "NVdata[2] == NV[2]  # NVdata gets 'color', NV gets datadict"
      }
    ],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/networkx/classes/reportviews.py",
  "item_line": 116,
  "item_type": "<class 'abc.ABCMeta'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Examples"
  ],
  "references": null,
  "see_also": [],
  "signature": {
    "type": "Signature",
    "value": null
  },
  "type": "DocBlob"
}