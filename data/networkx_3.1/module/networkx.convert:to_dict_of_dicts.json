{
  "aliases": [
    "networkx.to_dict_of_dicts"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "For a more custom approach to handling edge data, try      "
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": "dod = {\n    n: {\n        nbr: custom(n, nbr, dd) for nbr, dd in nbrdict.items()\n    }\n    for n, nbrdict in G.adj.items()\n}"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "where "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "module",
              "reference": {
                "kind": "module",
                "module": "networkx",
                "path": "networkx.generators.internet_as_graphs:AS_graph_generator.add_customer",
                "type": "RefInfo",
                "version": "3.1"
              },
              "type": "Link",
              "value": "custom"
            },
            {
              "type": "text",
              "value": " returns the desired edge data for each edge between "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "n"
            },
            {
              "type": "text",
              "value": " and "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "nbr"
            },
            {
              "type": "text",
              "value": ", given existing edge data "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "dd"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "A NetworkX graph"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "G",
              "type": "Param",
              "type_": "graph"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Use only nodes specified in nodelist"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "nodelist",
              "type": "Param",
              "type_": "list"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "If provided, the value of the dictionary will be set to "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "edge_data",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "edge_data"
                    },
                    {
                      "type": "text",
                      "value": " for all edges. Usual values could be "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "1"
                    },
                    {
                      "type": "text",
                      "value": " or "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "True"
                    },
                    {
                      "type": "text",
                      "value": ". If "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "edge_data",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "edge_data"
                    },
                    {
                      "type": "text",
                      "value": " is "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "None"
                    },
                    {
                      "type": "text",
                      "value": " (the default), the edgedata in "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "G",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "G"
                    },
                    {
                      "type": "text",
                      "value": " is used, resulting in a dict-of-dict-of-dicts. If "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "G",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "G"
                    },
                    {
                      "type": "text",
                      "value": " is a MultiGraph, the result will be a dict-of-dict-of-dict-of-dicts. See Notes for an approach to customize handling edge data. "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "edge_data",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "edge_data"
                    },
                    {
                      "type": "text",
                      "value": " should "
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "not"
                        }
                      ],
                      "type": "emphasis"
                    },
                    {
                      "type": "text",
                      "value": " be a container."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "edge_data",
              "type": "Param",
              "type_": "scalar, optional"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "A nested dictionary representation of "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "G",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "G"
                    },
                    {
                      "type": "text",
                      "value": ". Note that the level of nesting depends on the type of "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "G",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "G"
                    },
                    {
                      "type": "text",
                      "value": " and the value of "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "edge_data",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "edge_data"
                    },
                    {
                      "type": "text",
                      "value": " (see Examples)."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "dod",
              "type": "Param",
              "type_": "dict"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Returns adjacency representation of graph as a dictionary of dictionaries."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [
      {
        "type": "code",
        "value": "G = nx.path_graph(3)\nnx.to_dict_of_dicts(G)"
      },
      {
        "type": "text",
        "value": "Edge data is preserved by default (``edge_data=None``), resulting\nin dict-of-dict-of-dicts where the innermost dictionary contains the\nedge data:"
      },
      {
        "type": "code",
        "value": "G = nx.Graph()\nG.add_edges_from(\n    [\n        (0, 1, {'weight': 1.0}),\n        (1, 2, {'weight': 2.0}),\n        (2, 0, {'weight': 1.0}),\n    ]\n)\nd = nx.to_dict_of_dicts(G)\nd  # doctest: +SKIP"
      },
      {
        "type": "code",
        "value": "d[1][2]['weight']"
      },
      {
        "type": "text",
        "value": "If `edge_data` is not `None`, edge data in the original graph (if any) is\nreplaced:"
      },
      {
        "type": "code",
        "value": "d = nx.to_dict_of_dicts(G, edge_data=1)\nd"
      },
      {
        "type": "code",
        "value": "d[1][2]"
      },
      {
        "type": "text",
        "value": "This also applies to MultiGraphs: edge data is preserved by default:"
      },
      {
        "type": "code",
        "value": "G = nx.MultiGraph()\nG.add_edge(0, 1, key='a', weight=1.0)"
      },
      {
        "type": "code",
        "value": "G.add_edge(0, 1, key='b', weight=5.0)"
      },
      {
        "type": "code",
        "value": "d = nx.to_dict_of_dicts(G)\nd  # doctest: +SKIP"
      },
      {
        "type": "code",
        "value": "d[0][1]['b']['weight']"
      },
      {
        "type": "text",
        "value": "But multi edge data is lost if `edge_data` is not `None`:"
      },
      {
        "type": "code",
        "value": "d = nx.to_dict_of_dicts(G, edge_data=10)\nd"
      }
    ],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/networkx/convert.py",
  "item_line": 244,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Parameters",
    "Returns",
    "See Also",
    "Notes",
    "Examples"
  ],
  "references": null,
  "see_also": [
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "module",
          "module": "networkx",
          "path": "networkx.convert:from_dict_of_dicts",
          "type": "RefInfo",
          "version": "3.1"
        },
        "type": "Link",
        "value": "from_dict_of_dicts"
      },
      "type": null
    },
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "module",
          "module": "networkx",
          "path": "networkx.convert:to_dict_of_lists",
          "type": "RefInfo",
          "version": "3.1"
        },
        "type": "Link",
        "value": "to_dict_of_lists"
      },
      "type": null
    }
  ],
  "signature": {
    "type": "Signature",
    "value": "(G, nodelist=None, edge_data=None)"
  },
  "type": "DocBlob"
}