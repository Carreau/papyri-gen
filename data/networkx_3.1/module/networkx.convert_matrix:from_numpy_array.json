{
  "aliases": [
    "networkx.from_numpy_array"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "The 2D NumPy array is interpreted as an adjacency matrix for the graph."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "For directed graphs, explicitly mention create_using=nx.DiGraph, and entry i,j of A corresponds to an edge from i to j."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "If "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "create_using",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "create_using"
            },
            {
              "type": "text",
              "value": " is "
            },
            {
              "type": "inlineCode",
              "value": "networkx.MultiGraph"
            },
            {
              "type": "text",
              "value": " or "
            },
            {
              "type": "inlineCode",
              "value": "networkx.MultiDiGraph"
            },
            {
              "type": "text",
              "value": ", "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "parallel_edges",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "parallel_edges"
            },
            {
              "type": "text",
              "value": " is True, and the entries of "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "A",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "A"
            },
            {
              "type": "text",
              "value": " are of type "
            },
            {
              "type": "inlineCode",
              "value": "int"
            },
            {
              "type": "text",
              "value": ", then this function returns a multigraph (of the same type as "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "create_using",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "create_using"
            },
            {
              "type": "text",
              "value": ") with parallel edges."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "If "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "create_using",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "create_using"
            },
            {
              "type": "text",
              "value": " indicates an undirected multigraph, then only the edges indicated by the upper triangle of the array "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "A",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "A"
            },
            {
              "type": "text",
              "value": " will be added to the graph."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "If the NumPy array has a single data type for each array entry it will be converted to an appropriate Python data type."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "If the NumPy array has a user-specified compound data type the names of the data fields will be used as attribute keys in the resulting NetworkX graph."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "An adjacency matrix representation of a graph"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "A",
              "type": "Param",
              "type_": "a 2D numpy.ndarray"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "If this is True, "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "create_using",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "create_using"
                    },
                    {
                      "type": "text",
                      "value": " is a multigraph, and "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "A",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "A"
                    },
                    {
                      "type": "text",
                      "value": " is an integer array, then entry "
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "(i, j)"
                        }
                      ],
                      "type": "emphasis"
                    },
                    {
                      "type": "text",
                      "value": " in the array is interpreted as the number of parallel edges joining vertices "
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "i"
                        }
                      ],
                      "type": "emphasis"
                    },
                    {
                      "type": "text",
                      "value": " and "
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "j"
                        }
                      ],
                      "type": "emphasis"
                    },
                    {
                      "type": "text",
                      "value": " in the graph. If it is False, then the entries in the array are interpreted as the weight of a single edge joining the vertices."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "parallel_edges",
              "type": "Param",
              "type_": "Boolean"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Graph type to create. If graph instance, then cleared before populated."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "create_using",
              "type": "Param",
              "type_": "NetworkX graph constructor, optional (default=nx.Graph)"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Returns a graph from a 2D NumPy array."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [
      {
        "type": "text",
        "value": "Simple integer weights on edges:"
      },
      {
        "type": "code",
        "value": "import numpy as np\nA = np.array([[1, 1], [2, 1]])\nG = nx.from_numpy_array(A)\nG.edges(data=True)"
      },
      {
        "type": "text",
        "value": "If `create_using` indicates a multigraph and the array has only integer\nentries and `parallel_edges` is False, then the entries will be treated\nas weights for edges joining the nodes (without creating parallel edges):"
      },
      {
        "type": "code",
        "value": "A = np.array([[1, 1], [1, 2]])\nG = nx.from_numpy_array(A, create_using=nx.MultiGraph)\nG[1][1]"
      },
      {
        "type": "text",
        "value": "If `create_using` indicates a multigraph and the array has only integer\nentries and `parallel_edges` is True, then the entries will be treated\nas the number of parallel edges joining those two vertices:"
      },
      {
        "type": "code",
        "value": "A = np.array([[1, 1], [1, 2]])\ntemp = nx.MultiGraph()\nG = nx.from_numpy_array(A, parallel_edges=True, create_using=temp)\nG[1][1]"
      },
      {
        "type": "text",
        "value": "User defined compound data type on edges:"
      },
      {
        "type": "code",
        "value": "dt = [(\"weight\", float), (\"cost\", int)]\nA = np.array([[(1.0, 2)]], dtype=dt)\nG = nx.from_numpy_array(A)\nG.edges()"
      },
      {
        "type": "code",
        "value": "G[0][0][\"cost\"]"
      },
      {
        "type": "code",
        "value": "G[0][0][\"weight\"]"
      }
    ],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/networkx/convert_matrix.py",
  "item_line": 1002,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Notes",
    "See Also",
    "Examples"
  ],
  "references": null,
  "see_also": [
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "to-resolve",
          "module": "current-module",
          "path": "to_numpy_array",
          "type": "RefInfo",
          "version": "current-version"
        },
        "type": "Link",
        "value": "to_numpy_array"
      },
      "type": null
    }
  ],
  "signature": {
    "type": "Signature",
    "value": "(A, parallel_edges=False, create_using=None)"
  },
  "type": "DocBlob"
}