{
  "aliases": [
    "networkx.from_pandas_edgelist"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "The Pandas DataFrame should contain at least two columns of node names and zero or more columns of edge attributes. Each row will be processed as one edge instance."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Note: This function iterates over DataFrame.values, which is not guaranteed to retain the data type across columns in the row. This is only a problem if your row is entirely numeric and a mix of ints and floats. In that case, all values will be returned as floats. See the DataFrame.iterrows documentation for an example."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "An edge list representation of a graph"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "df",
              "type": "Param",
              "type_": "Pandas DataFrame"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "A valid column name (string or integer) for the source nodes (for the directed case)."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "source",
              "type": "Param",
              "type_": "str or int"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "A valid column name (string or integer) for the target nodes (for the directed case)."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "target",
              "type": "Param",
              "type_": "str or int"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "A valid column name (str or int) or iterable of column names that are used to retrieve items and add them to the graph as edge attributes. If "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "True"
                    },
                    {
                      "type": "text",
                      "value": ", all of the remaining columns will be added. If "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "None"
                    },
                    {
                      "type": "text",
                      "value": ", no edge attributes are added to the graph."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "edge_attr",
              "type": "Param",
              "type_": "str or int, iterable, True, or None"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Graph type to create. If graph instance, then cleared before populated."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "create_using",
              "type": "Param",
              "type_": "NetworkX graph constructor, optional (default=nx.Graph)"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "A valid column name for the edge keys (for a MultiGraph). The values in this column are used for the edge keys when adding edges if create_using is a multigraph."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "edge_key",
              "type": "Param",
              "type_": "str or None, optional (default=None)"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Returns a graph from Pandas DataFrame containing an edge list."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [
      {
        "type": "text",
        "value": "Simple integer weights on edges:"
      },
      {
        "type": "code",
        "value": "import pandas as pd\npd.options.display.max_columns = 20\nimport numpy as np\nrng = np.random.RandomState(seed=5)\nints = rng.randint(1, 11, size=(3, 2))\na = [\"A\", \"B\", \"C\"]\nb = [\"D\", \"A\", \"E\"]\ndf = pd.DataFrame(ints, columns=[\"weight\", \"cost\"])\ndf[0] = a\ndf[\"b\"] = b\ndf[[\"weight\", \"cost\", 0, \"b\"]]"
      },
      {
        "type": "code",
        "value": "G = nx.from_pandas_edgelist(df, 0, \"b\", [\"weight\", \"cost\"])\nG[\"E\"][\"C\"][\"weight\"]"
      },
      {
        "type": "code",
        "value": "G[\"E\"][\"C\"][\"cost\"]"
      },
      {
        "type": "code",
        "value": "edges = pd.DataFrame(\n    {\n        \"source\": [0, 1, 2],\n        \"target\": [2, 2, 3],\n        \"weight\": [3, 4, 5],\n        \"color\": [\"red\", \"blue\", \"blue\"],\n    }\n)\nG = nx.from_pandas_edgelist(edges, edge_attr=True)\nG[0][2][\"color\"]"
      },
      {
        "type": "text",
        "value": "Build multigraph with custom keys:"
      },
      {
        "type": "code",
        "value": "edges = pd.DataFrame(\n    {\n        \"source\": [0, 1, 2, 0],\n        \"target\": [2, 2, 3, 2],\n        \"my_edge_key\": [\"A\", \"B\", \"C\", \"D\"],\n        \"weight\": [3, 4, 5, 6],\n        \"color\": [\"red\", \"blue\", \"blue\", \"blue\"],\n    }\n)\nG = nx.from_pandas_edgelist(\n    edges,\n    edge_key=\"my_edge_key\",\n    edge_attr=[\"weight\", \"color\"],\n    create_using=nx.MultiGraph(),\n)\nG[0][2]"
      }
    ],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/networkx/convert_matrix.py",
  "item_line": 303,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "See Also",
    "Examples"
  ],
  "references": null,
  "see_also": [
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "module",
          "module": "networkx",
          "path": "networkx.convert_matrix:to_pandas_edgelist",
          "type": "RefInfo",
          "version": "3.1"
        },
        "type": "Link",
        "value": "to_pandas_edgelist"
      },
      "type": null
    }
  ],
  "signature": {
    "type": "Signature",
    "value": "(df, source='source', target='target', edge_attr=None, create_using=None, edge_key=None)"
  },
  "type": "DocBlob"
}