{
  "aliases": [
    "networkx.from_scipy_sparse_array"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "For directed graphs, explicitly mention create_using=nx.DiGraph, and entry i,j of A corresponds to an edge from i to j."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "If "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "create_using",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "create_using"
            },
            {
              "type": "text",
              "value": " is "
            },
            {
              "type": "inlineCode",
              "value": "networkx.MultiGraph"
            },
            {
              "type": "text",
              "value": " or "
            },
            {
              "type": "inlineCode",
              "value": "networkx.MultiDiGraph"
            },
            {
              "type": "text",
              "value": ", "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "parallel_edges",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "parallel_edges"
            },
            {
              "type": "text",
              "value": " is True, and the entries of "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "A"
            },
            {
              "type": "text",
              "value": " are of type "
            },
            {
              "type": "inlineCode",
              "value": "int"
            },
            {
              "type": "text",
              "value": ", then this function returns a multigraph (constructed from "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "create_using",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "create_using"
            },
            {
              "type": "text",
              "value": ") with parallel edges. In this case, "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "edge_attribute"
            },
            {
              "type": "text",
              "value": " will be ignored."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "If "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "create_using",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "create_using"
            },
            {
              "type": "text",
              "value": " indicates an undirected multigraph, then only the edges indicated by the upper triangle of the matrix "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "A"
            },
            {
              "type": "text",
              "value": " will be added to the graph."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "An adjacency matrix representation of a graph"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "A: scipy.sparse array",
              "type": "Param",
              "type_": ""
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "If this is True, "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "create_using",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "create_using"
                    },
                    {
                      "type": "text",
                      "value": " is a multigraph, and "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "A"
                    },
                    {
                      "type": "text",
                      "value": " is an integer matrix, then entry "
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "(i, j)"
                        }
                      ],
                      "type": "emphasis"
                    },
                    {
                      "type": "text",
                      "value": " in the matrix is interpreted as the number of parallel edges joining vertices "
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "i"
                        }
                      ],
                      "type": "emphasis"
                    },
                    {
                      "type": "text",
                      "value": " and "
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "j"
                        }
                      ],
                      "type": "emphasis"
                    },
                    {
                      "type": "text",
                      "value": " in the graph. If it is False, then the entries in the matrix are interpreted as the weight of a single edge joining the vertices."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "parallel_edges",
              "type": "Param",
              "type_": "Boolean"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Graph type to create. If graph instance, then cleared before populated."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "create_using",
              "type": "Param",
              "type_": "NetworkX graph constructor, optional (default=nx.Graph)"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Name of edge attribute to store matrix numeric value. The data will have the same type as the matrix entry (int, float, (real,imag))."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "edge_attribute: string",
              "type": "Param",
              "type_": ""
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Creates a new graph from an adjacency matrix given as a SciPy sparse array."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [
      {
        "type": "code",
        "value": "import scipy as sp\nimport scipy.sparse  # call as sp.sparse\nA = sp.sparse.eye(2, 2, 1)\nG = nx.from_scipy_sparse_array(A)"
      },
      {
        "type": "text",
        "value": "If `create_using` indicates a multigraph and the matrix has only integer\nentries and `parallel_edges` is False, then the entries will be treated\nas weights for edges joining the nodes (without creating parallel edges):"
      },
      {
        "type": "code",
        "value": "A = sp.sparse.csr_array([[1, 1], [1, 2]])\nG = nx.from_scipy_sparse_array(A, create_using=nx.MultiGraph)\nG[1][1]"
      },
      {
        "type": "text",
        "value": "If `create_using` indicates a multigraph and the matrix has only integer\nentries and `parallel_edges` is True, then the entries will be treated\nas the number of parallel edges joining those two vertices:"
      },
      {
        "type": "code",
        "value": "A = sp.sparse.csr_array([[1, 1], [1, 2]])\nG = nx.from_scipy_sparse_array(\n    A, parallel_edges=True, create_using=nx.MultiGraph\n)\nG[1][1]"
      }
    ],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/networkx/convert_matrix.py",
  "item_line": 659,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Parameters",
    "Notes",
    "Examples"
  ],
  "references": null,
  "see_also": [],
  "signature": {
    "type": "Signature",
    "value": "(A, parallel_edges=False, create_using=None, edge_attribute='weight')"
  },
  "type": "DocBlob"
}