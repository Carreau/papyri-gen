{
  "aliases": [
    "networkx.to_numpy_array"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "For directed graphs, entry "
            },
            {
              "type": "inlineCode",
              "value": "i, j"
            },
            {
              "type": "text",
              "value": " corresponds to an edge from "
            },
            {
              "type": "inlineCode",
              "value": "i"
            },
            {
              "type": "text",
              "value": " to "
            },
            {
              "type": "inlineCode",
              "value": "j"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Entries in the adjacency matrix are given by the "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "weight",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "weight"
            },
            {
              "type": "text",
              "value": " edge attribute. When an edge does not have a weight attribute, the value of the entry is set to the number 1.  For multiple (parallel) edges, the values of the entries are determined by the "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "multigraph_weight",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "multigraph_weight"
            },
            {
              "type": "text",
              "value": " parameter. The default is to sum the weight attributes for each of the parallel edges."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "When "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "nodelist",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "nodelist"
            },
            {
              "type": "text",
              "value": " does not contain every node in "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "G",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "G"
            },
            {
              "type": "text",
              "value": ", the adjacency matrix is built from the subgraph of "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "G",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "G"
            },
            {
              "type": "text",
              "value": " that is induced by the nodes in "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "nodelist",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "nodelist"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "The convention used for self-loop edges in graphs is to assign the diagonal array entry value to the weight attribute of the edge (or the number 1 if the edge has no weight attribute). If the alternate convention of doubling the edge weight is desired the resulting NumPy array can be modified as follows:"
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": ">>> import numpy as np\n>>> G = nx.Graph([(1, 1)])\n>>> A = nx.to_numpy_array(G)\n>>> A\narray([[1.]])\n>>> A[np.diag_indices_from(A)] *= 2\n>>> A\narray([[2.]])"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The NetworkX graph used to construct the NumPy array."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "G",
              "type": "Param",
              "type_": "graph"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The rows and columns are ordered according to the nodes in "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "nodelist",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "nodelist"
                    },
                    {
                      "type": "text",
                      "value": ". If "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "nodelist",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "nodelist"
                    },
                    {
                      "type": "text",
                      "value": " is "
                    },
                    {
                      "type": "inlineCode",
                      "value": "None"
                    },
                    {
                      "type": "text",
                      "value": ", then the ordering is produced by "
                    },
                    {
                      "type": "inlineCode",
                      "value": "G.nodes()"
                    },
                    {
                      "type": "text",
                      "value": "."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "nodelist",
              "type": "Param",
              "type_": "list, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "A NumPy data type used to initialize the array. If None, then the NumPy default is used. The dtype can be structured if "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "weight=None"
                    },
                    {
                      "type": "text",
                      "value": ", in which case the dtype field names are used to look up edge attributes. The result is a structured array where each named field in the dtype corresponds to the adjaceny for that edge attribute. See examples for details."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "dtype",
              "type": "Param",
              "type_": "NumPy data type, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Whether to store multidimensional data in C- or Fortran-contiguous (row- or column-wise) order in memory. If None, then the NumPy default is used."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "order",
              "type": "Param",
              "type_": "{'C', 'F'}, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "An function that determines how weights in multigraphs are handled. The function should accept a sequence of weights and return a single value. The default is to sum the weights of the multiple edges."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "multigraph_weight",
              "type": "Param",
              "type_": "callable, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The edge attribute that holds the numerical value used for the edge weight. If an edge does not have that attribute, then the value 1 is used instead. "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "weight",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "weight"
                    },
                    {
                      "type": "text",
                      "value": " must be "
                    },
                    {
                      "type": "inlineCode",
                      "value": "None"
                    },
                    {
                      "type": "text",
                      "value": " if a structured dtype is used."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "weight",
              "type": "Param",
              "type_": "string or None optional (default = 'weight')"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The value used to represent non-edges in the adjaceny matrix. The array values corresponding to nonedges are typically set to zero. However, this could be undesirable if there are array values corresponding to actual edges that also have the value zero. If so, one might prefer nonedges to have some other value, such as "
                    },
                    {
                      "type": "inlineCode",
                      "value": "nan"
                    },
                    {
                      "type": "text",
                      "value": "."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "nonedge",
              "type": "Param",
              "type_": "array_like (default = 0.0)"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "If "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "dtype",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "dtype"
                    },
                    {
                      "type": "text",
                      "value": " is a structured dtype and "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "G",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "G"
                    },
                    {
                      "type": "text",
                      "value": " is a multigraph"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "",
              "type": "Param",
              "type_": "NetworkXError"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "If "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "dtype",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "dtype"
                    },
                    {
                      "type": "text",
                      "value": " is a structured dtype and "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "weight",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "weight"
                    },
                    {
                      "type": "text",
                      "value": " is not "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "None"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "",
              "type": "Param",
              "type_": "ValueError"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Graph adjacency matrix"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "A",
              "type": "Param",
              "type_": "NumPy ndarray"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Returns the graph adjacency matrix as a NumPy array."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [
      {
        "type": "code",
        "value": "G = nx.MultiDiGraph()\nG.add_edge(0, 1, weight=2)"
      },
      {
        "type": "code",
        "value": "G.add_edge(1, 0)"
      },
      {
        "type": "code",
        "value": "G.add_edge(2, 2, weight=3)"
      },
      {
        "type": "code",
        "value": "G.add_edge(2, 2)"
      },
      {
        "type": "code",
        "value": "nx.to_numpy_array(G, nodelist=[0, 1, 2])"
      },
      {
        "type": "text",
        "value": "When `nodelist` argument is used, nodes of `G` which do not appear in the `nodelist`\nand their edges are not included in the adjacency matrix. Here is an example:"
      },
      {
        "type": "code",
        "value": "G = nx.Graph()\nG.add_edge(3, 1)\nG.add_edge(2, 0)\nG.add_edge(2, 1)\nG.add_edge(3, 0)\nnx.to_numpy_array(G, nodelist=[1, 2, 3])"
      },
      {
        "type": "text",
        "value": "This function can also be used to create adjacency matrices for multiple\nedge attributes with structured dtypes:"
      },
      {
        "type": "code",
        "value": "G = nx.Graph()\nG.add_edge(0, 1, weight=10)\nG.add_edge(1, 2, cost=5)\nG.add_edge(2, 3, weight=3, cost=-4.0)\ndtype = np.dtype([(\"weight\", int), (\"cost\", float)])\nA = nx.to_numpy_array(G, dtype=dtype, weight=None)\nA[\"weight\"]"
      },
      {
        "type": "code",
        "value": "A[\"cost\"]"
      },
      {
        "type": "text",
        "value": "As stated above, the argument \"nonedge\" is useful especially when there are\nactually edges with weight 0 in the graph. Setting a nonedge value different than 0,\nmakes it much clearer to differentiate such 0-weighted edges and actual nonedge values."
      },
      {
        "type": "code",
        "value": "G = nx.Graph()\nG.add_edge(3, 1, weight=2)\nG.add_edge(2, 0, weight=0)\nG.add_edge(2, 1, weight=0)\nG.add_edge(3, 0, weight=1)\nnx.to_numpy_array(G, nonedge=-1.)"
      }
    ],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/networkx/convert_matrix.py",
  "item_line": 764,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Parameters",
    "Returns",
    "Raises",
    "See Also",
    "Notes",
    "Examples"
  ],
  "references": null,
  "see_also": [
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "module",
          "module": "networkx",
          "path": "networkx.convert_matrix:from_numpy_array",
          "type": "RefInfo",
          "version": "3.1"
        },
        "type": "Link",
        "value": "from_numpy_array"
      },
      "type": null
    }
  ],
  "signature": {
    "type": "Signature",
    "value": "(G, nodelist=None, dtype=None, order=None, multigraph_weight=<built-in function sum>, weight='weight', nonedge=0.0)"
  },
  "type": "DocBlob"
}