{
  "aliases": [
    "networkx.draw_networkx"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Draw the graph with Matplotlib with options for node positions, labeling, titles, and many other drawing features. See draw() for simple drawing without labels or axes."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "For directed graphs, arrows  are drawn at the head end.  Arrows can be turned off with keyword arrows=False."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "A networkx graph"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "G",
              "type": "Param",
              "type_": "graph"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "A dictionary with nodes as keys and positions as values. If not specified a spring layout positioning will be computed. See "
                    },
                    {
                      "type": "inlineCode",
                      "value": "networkx.drawing.layout"
                    },
                    {
                      "type": "text",
                      "value": " for functions that compute node positions."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "pos",
              "type": "Param",
              "type_": "dictionary, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "If "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "None"
                    },
                    {
                      "type": "text",
                      "value": ", directed graphs draw arrowheads with "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "module",
                      "reference": {
                        "kind": "api",
                        "module": "matplotlib.patches",
                        "path": "matplotlib.patches:FancyArrowPatch",
                        "type": "RefInfo",
                        "version": "*"
                      },
                      "type": "Link",
                      "value": "FancyArrowPatch"
                    },
                    {
                      "type": "text",
                      "value": ", while undirected graphs draw edges via "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "module",
                      "reference": {
                        "kind": "api",
                        "module": "matplotlib.collections",
                        "path": "matplotlib.collections:LineCollection",
                        "type": "RefInfo",
                        "version": "*"
                      },
                      "type": "Link",
                      "value": "LineCollection"
                    },
                    {
                      "type": "text",
                      "value": " for speed. If "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "True"
                    },
                    {
                      "type": "text",
                      "value": ", draw arrowheads with FancyArrowPatches (bendable and stylish). If "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "False"
                    },
                    {
                      "type": "text",
                      "value": ", draw edges using LineCollection (linear and fast). For directed graphs, if True draw arrowheads. Note: Arrows will be the same color as edges."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "arrows",
              "type": "Param",
              "type_": "bool or None, optional (default=None)"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "For directed graphs, choose the style of the arrowsheads. For undirected graphs default to '-'"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "See "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "module",
                      "reference": {
                        "kind": "api",
                        "module": "matplotlib.patches",
                        "path": "matplotlib.patches:ArrowStyle",
                        "type": "RefInfo",
                        "version": "*"
                      },
                      "type": "Link",
                      "value": "matplotlib.patches.ArrowStyle"
                    },
                    {
                      "type": "text",
                      "value": " for more options."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "arrowstyle",
              "type": "Param",
              "type_": "str (default='-\\|>' for directed graphs)"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "For directed graphs, choose the size of the arrow head's length and width. A list of values can be passed in to assign a different size for arrow head's length and width. See "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "module",
                      "reference": {
                        "kind": "api",
                        "module": "matplotlib.patches",
                        "path": "matplotlib.patches:FancyArrowPatch",
                        "type": "RefInfo",
                        "version": "*"
                      },
                      "type": "Link",
                      "value": "matplotlib.patches.FancyArrowPatch"
                    },
                    {
                      "type": "text",
                      "value": " for attribute "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "mutation_scale"
                    },
                    {
                      "type": "text",
                      "value": " for more info."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "arrowsize",
              "type": "Param",
              "type_": "int or list (default=10)"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Set to True to draw labels on the nodes."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "with_labels",
              "type": "Param",
              "type_": "bool (default=True)"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Draw the graph in the specified Matplotlib axes."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "ax",
              "type": "Param",
              "type_": "Matplotlib Axes object, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Draw only specified nodes"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "nodelist",
              "type": "Param",
              "type_": "list (default=list(G))"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Draw only specified edges"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "edgelist",
              "type": "Param",
              "type_": "list (default=list(G.edges()))"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Size of nodes.  If an array is specified it must be the same length as nodelist."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "node_size",
              "type": "Param",
              "type_": "scalar or array (default=300)"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Node color. Can be a single color or a sequence of colors with the same length as nodelist. Color can be string or rgb (or rgba) tuple of floats from 0-1. If numeric values are specified they will be mapped to colors using the cmap and vmin,vmax parameters. See matplotlib.scatter for more details."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "node_color",
              "type": "Param",
              "type_": "color or array of colors (default='#1f78b4')"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The shape of the node.  Specification is as matplotlib.scatter marker, one of 'so^>v<dph8'."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "node_shape",
              "type": "Param",
              "type_": "string (default='o')"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The node and edge transparency"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "alpha",
              "type": "Param",
              "type_": "float or None (default=None)"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Colormap for mapping intensities of nodes"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "cmap",
              "type": "Param",
              "type_": "Matplotlib colormap, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Minimum and maximum for node colormap scaling"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "vmin,vmax",
              "type": "Param",
              "type_": "float, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Line width of symbol border"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "linewidths",
              "type": "Param",
              "type_": "scalar or sequence (default=1.0)"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Line width of edges"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "width",
              "type": "Param",
              "type_": "float or array of floats (default=1.0)"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Edge color. Can be a single color or a sequence of colors with the same length as edgelist. Color can be string or rgb (or rgba) tuple of floats from 0-1. If numeric values are specified they will be mapped to colors using the edge_cmap and edge_vmin,edge_vmax parameters."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "edge_color",
              "type": "Param",
              "type_": "color or array of colors (default='k')"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Colormap for mapping intensities of edges"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "edge_cmap",
              "type": "Param",
              "type_": "Matplotlib colormap, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Minimum and maximum for edge colormap scaling"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "edge_vmin,edge_vmax",
              "type": "Param",
              "type_": "floats, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Edge line style e.g.: '-', '--', '-.', ':' or words like 'solid' or 'dashed'. (See "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "module",
                      "reference": {
                        "kind": "api",
                        "module": "matplotlib.patches",
                        "path": "matplotlib.patches:FancyArrowPatch",
                        "type": "RefInfo",
                        "version": "*"
                      },
                      "type": "Link",
                      "value": "matplotlib.patches.FancyArrowPatch"
                    },
                    {
                      "type": "text",
                      "value": ": "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "linestyle"
                    },
                    {
                      "type": "text",
                      "value": ")"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "style",
              "type": "Param",
              "type_": "string (default=solid line)"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Node labels in a dictionary of text labels keyed by node"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "labels",
              "type": "Param",
              "type_": "dictionary (default=None)"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Font size for text labels"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "font_size",
              "type": "Param",
              "type_": "int (default=12 for nodes, 10 for edges)"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Font color string"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "font_color",
              "type": "Param",
              "type_": "string (default='k' black)"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Font weight"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "font_weight",
              "type": "Param",
              "type_": "string (default='normal')"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Font family"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "font_family",
              "type": "Param",
              "type_": "string (default='sans-serif')"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Label for graph legend"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "label",
              "type": "Param",
              "type_": "string, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "See networkx.draw_networkx_nodes(), networkx.draw_networkx_edges(), and networkx.draw_networkx_labels() for a description of optional keywords."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "kwds",
              "type": "Param",
              "type_": "optional keywords"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Draw the graph G using Matplotlib."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [
      {
        "type": "code",
        "value": "G = nx.dodecahedral_graph()\nnx.draw(G)\nnx.draw(G, pos=nx.spring_layout(G))  # use spring layout"
      },
      {
        "type": "code",
        "value": "import matplotlib.pyplot as plt\nlimits = plt.axis(\"off\")  # turn off axis"
      },
      {
        "type": "text",
        "value": "Also see the NetworkX drawing examples at\nhttps://networkx.org/documentation/latest/auto_examples/index.html"
      }
    ],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/networkx/drawing/nx_pylab.py",
  "item_line": 127,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Notes",
    "Examples",
    "See Also"
  ],
  "references": null,
  "see_also": [
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "to-resolve",
          "module": "current-module",
          "path": "draw",
          "type": "RefInfo",
          "version": "current-version"
        },
        "type": "Link",
        "value": "draw"
      },
      "type": null
    },
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "module",
          "module": "networkx",
          "path": "networkx.drawing.nx_pylab:draw_networkx_nodes",
          "type": "RefInfo",
          "version": "3.1"
        },
        "type": "Link",
        "value": "draw_networkx_nodes"
      },
      "type": null
    },
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "module",
          "module": "networkx",
          "path": "networkx.drawing.nx_pylab:draw_networkx_edges",
          "type": "RefInfo",
          "version": "3.1"
        },
        "type": "Link",
        "value": "draw_networkx_edges"
      },
      "type": null
    },
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "module",
          "module": "networkx",
          "path": "networkx.drawing.nx_pylab:draw_networkx_labels",
          "type": "RefInfo",
          "version": "3.1"
        },
        "type": "Link",
        "value": "draw_networkx_labels"
      },
      "type": null
    },
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "module",
          "module": "networkx",
          "path": "networkx.drawing.nx_pylab:draw_networkx_edge_labels",
          "type": "RefInfo",
          "version": "3.1"
        },
        "type": "Link",
        "value": "draw_networkx_edge_labels"
      },
      "type": null
    }
  ],
  "signature": {
    "type": "Signature",
    "value": "(G, pos=None, arrows=None, with_labels=True, **kwds)"
  },
  "type": "DocBlob"
}