{
  "aliases": [
    "networkx.draw_networkx_edges"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "This draws only the edges of the graph G."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "For directed graphs, arrows are drawn at the head end.  Arrows can be turned off with keyword arrows=False or by passing an arrowstyle without an arrow on the end."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Be sure to include "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "node_size",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "node_size"
            },
            {
              "type": "text",
              "value": " as a keyword argument; arrows are drawn considering the size of nodes."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Self-loops are always drawn with "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "module",
              "reference": {
                "kind": "api",
                "module": "matplotlib.patches",
                "path": "matplotlib.patches:FancyArrowPatch",
                "type": "RefInfo",
                "version": "*"
              },
              "type": "Link",
              "value": "FancyArrowPatch"
            },
            {
              "type": "text",
              "value": " regardless of the value of "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "arrows",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "arrows"
            },
            {
              "type": "text",
              "value": " or whether "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "G",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "G"
            },
            {
              "type": "text",
              "value": " is directed. When "
            },
            {
              "type": "inlineCode",
              "value": "arrows=False"
            },
            {
              "type": "text",
              "value": " or "
            },
            {
              "type": "inlineCode",
              "value": "arrows=None"
            },
            {
              "type": "text",
              "value": " and "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "G",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "G"
            },
            {
              "type": "text",
              "value": " is undirected, the FancyArrowPatches corresponding to the self-loops are not explicitly returned. They should instead be accessed via the "
            },
            {
              "type": "inlineCode",
              "value": "Axes.patches"
            },
            {
              "type": "text",
              "value": " attribute (see examples)."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "A networkx graph"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "G",
              "type": "Param",
              "type_": "graph"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "A dictionary with nodes as keys and positions as values. Positions should be sequences of length 2."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "pos",
              "type": "Param",
              "type_": "dictionary"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Draw only specified edges"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "edgelist",
              "type": "Param",
              "type_": "collection of edge tuples (default=G.edges())"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Line width of edges"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "width",
              "type": "Param",
              "type_": "float or array of floats (default=1.0)"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Edge color. Can be a single color or a sequence of colors with the same length as edgelist. Color can be string or rgb (or rgba) tuple of floats from 0-1. If numeric values are specified they will be mapped to colors using the edge_cmap and edge_vmin,edge_vmax parameters."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "edge_color",
              "type": "Param",
              "type_": "color or array of colors (default='k')"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Edge line style e.g.: '-', '--', '-.', ':' or words like 'solid' or 'dashed'. Can be a single style or a sequence of styles with the same length as the edge list. If less styles than edges are given the styles will cycle. If more styles than edges are given the styles will be used sequentially and not be exhausted. Also, "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "(offset, onoffseq)"
                    },
                    {
                      "type": "text",
                      "value": " tuples can be used as style instead of a strings. (See "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "module",
                      "reference": {
                        "kind": "api",
                        "module": "matplotlib.patches",
                        "path": "matplotlib.patches:FancyArrowPatch",
                        "type": "RefInfo",
                        "version": "*"
                      },
                      "type": "Link",
                      "value": "matplotlib.patches.FancyArrowPatch"
                    },
                    {
                      "type": "text",
                      "value": ": "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "linestyle"
                    },
                    {
                      "type": "text",
                      "value": ")"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "style",
              "type": "Param",
              "type_": "string or array of strings (default='solid')"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The edge transparency.  This can be a single alpha value, in which case it will be applied to all specified edges. Otherwise, if it is an array, the elements of alpha will be applied to the colors in order (cycling through alpha multiple times if necessary)."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "alpha",
              "type": "Param",
              "type_": "float or array of floats (default=None)"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Colormap for mapping intensities of edges"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "edge_cmap",
              "type": "Param",
              "type_": "Matplotlib colormap, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Minimum and maximum for edge colormap scaling"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "edge_vmin,edge_vmax",
              "type": "Param",
              "type_": "floats, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Draw the graph in the specified Matplotlib axes."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "ax",
              "type": "Param",
              "type_": "Matplotlib Axes object, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "If "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "None"
                    },
                    {
                      "type": "text",
                      "value": ", directed graphs draw arrowheads with "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "module",
                      "reference": {
                        "kind": "api",
                        "module": "matplotlib.patches",
                        "path": "matplotlib.patches:FancyArrowPatch",
                        "type": "RefInfo",
                        "version": "*"
                      },
                      "type": "Link",
                      "value": "FancyArrowPatch"
                    },
                    {
                      "type": "text",
                      "value": ", while undirected graphs draw edges via "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "module",
                      "reference": {
                        "kind": "api",
                        "module": "matplotlib.collections",
                        "path": "matplotlib.collections:LineCollection",
                        "type": "RefInfo",
                        "version": "*"
                      },
                      "type": "Link",
                      "value": "LineCollection"
                    },
                    {
                      "type": "text",
                      "value": " for speed. If "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "True"
                    },
                    {
                      "type": "text",
                      "value": ", draw arrowheads with FancyArrowPatches (bendable and stylish). If "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "False"
                    },
                    {
                      "type": "text",
                      "value": ", draw edges using LineCollection (linear and fast)."
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Note: Arrowheads will be the same color as edges."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "arrows",
              "type": "Param",
              "type_": "bool or None, optional (default=None)"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "For directed graphs and "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "arrows==True"
                    },
                    {
                      "type": "text",
                      "value": " defaults to '-\\|>', For undirected graphs default to '-'."
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "See "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "module",
                      "reference": {
                        "kind": "api",
                        "module": "matplotlib.patches",
                        "path": "matplotlib.patches:ArrowStyle",
                        "type": "RefInfo",
                        "version": "*"
                      },
                      "type": "Link",
                      "value": "matplotlib.patches.ArrowStyle"
                    },
                    {
                      "type": "text",
                      "value": " for more options."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "arrowstyle",
              "type": "Param",
              "type_": "str (default='-\\|>' for directed graphs)"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "For directed graphs, choose the size of the arrow head's length and width. See "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "module",
                      "reference": {
                        "kind": "api",
                        "module": "matplotlib.patches",
                        "path": "matplotlib.patches:FancyArrowPatch",
                        "type": "RefInfo",
                        "version": "*"
                      },
                      "type": "Link",
                      "value": "matplotlib.patches.FancyArrowPatch"
                    },
                    {
                      "type": "text",
                      "value": " for attribute "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "mutation_scale"
                    },
                    {
                      "type": "text",
                      "value": " for more info."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "arrowsize",
              "type": "Param",
              "type_": "int (default=10)"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Pass the connectionstyle parameter to create curved arc of rounding radius rad. For example, connectionstyle='arc3,rad=0.2'. See "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "module",
                      "reference": {
                        "kind": "api",
                        "module": "matplotlib.patches",
                        "path": "matplotlib.patches:ConnectionStyle",
                        "type": "RefInfo",
                        "version": "*"
                      },
                      "type": "Link",
                      "value": "matplotlib.patches.ConnectionStyle"
                    },
                    {
                      "type": "text",
                      "value": " and "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "module",
                      "reference": {
                        "kind": "api",
                        "module": "matplotlib.patches",
                        "path": "matplotlib.patches:FancyArrowPatch",
                        "type": "RefInfo",
                        "version": "*"
                      },
                      "type": "Link",
                      "value": "matplotlib.patches.FancyArrowPatch"
                    },
                    {
                      "type": "text",
                      "value": " for more info."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "connectionstyle",
              "type": "Param",
              "type_": "string (default=\"arc3\")"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Size of nodes. Though the nodes are not drawn with this function, the node size is used in determining edge positioning."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "node_size",
              "type": "Param",
              "type_": "scalar or array (default=300)"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "This provides the node order for the "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "node_size",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "node_size"
                    },
                    {
                      "type": "text",
                      "value": " array (if it is an array)."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "nodelist",
              "type": "Param",
              "type_": "list, optional (default=G.nodes())"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The marker used for nodes, used in determining edge positioning. Specification is as a "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "module",
                      "reference": {
                        "kind": "api",
                        "module": "matplotlib.markers",
                        "path": "matplotlib.markers",
                        "type": "RefInfo",
                        "version": "*"
                      },
                      "type": "Link",
                      "value": "matplotlib.markers"
                    },
                    {
                      "type": "text",
                      "value": " marker, e.g. one of 'so^>v<dph8'."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "node_shape",
              "type": "Param",
              "type_": "string (default='o')"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Label for legend"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "label",
              "type": "Param",
              "type_": "None or string"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The minimum margin (gap) at the beginning of the edge at the source."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "min_source_margin",
              "type": "Param",
              "type_": "int (default=0)"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The minimum margin (gap) at the end of the edge at the target."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "min_target_margin",
              "type": "Param",
              "type_": "int (default=0)"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "If "
                    },
                    {
                      "type": "inlineCode",
                      "value": "arrows=True"
                    },
                    {
                      "type": "text",
                      "value": ", a list of FancyArrowPatches is returned. If "
                    },
                    {
                      "type": "inlineCode",
                      "value": "arrows=False"
                    },
                    {
                      "type": "text",
                      "value": ", a LineCollection is returned. If "
                    },
                    {
                      "type": "inlineCode",
                      "value": "arrows=None"
                    },
                    {
                      "type": "text",
                      "value": " (the default), then a LineCollection is returned if "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "G",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "G"
                    },
                    {
                      "type": "text",
                      "value": " is undirected, otherwise returns a list of FancyArrowPatches."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "",
              "type": "Param",
              "type_": "matplotlib.collections.LineCollection or a list of matplotlib.patches.FancyArrowPatch"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Draw the edges of the graph G."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [
      {
        "type": "code",
        "value": "G = nx.dodecahedral_graph()\nedges = nx.draw_networkx_edges(G, pos=nx.spring_layout(G))"
      },
      {
        "type": "code",
        "value": "G = nx.DiGraph()\nG.add_edges_from([(1, 2), (1, 3), (2, 3)])\narcs = nx.draw_networkx_edges(G, pos=nx.spring_layout(G))\nalphas = [0.3, 0.4, 0.5]\nfor i, arc in enumerate(arcs):  # change alpha values of arcs\n    arc.set_alpha(alphas[i])"
      },
      {
        "type": "text",
        "value": "The FancyArrowPatches corresponding to self-loops are not always\nreturned, but can always be accessed via the ``patches`` attribute of the\n`matplotlib.Axes` object."
      },
      {
        "type": "code",
        "value": "import matplotlib.pyplot as plt\nfig, ax = plt.subplots()\nG = nx.Graph([(0, 1), (0, 0)])  # Self-loop at node 0\nedge_collection = nx.draw_networkx_edges(G, pos=nx.circular_layout(G), ax=ax)\nself_loop_fap = ax.patches[0]"
      },
      {
        "type": "text",
        "value": "Also see the NetworkX drawing examples at\nhttps://networkx.org/documentation/latest/auto_examples/index.html"
      }
    ],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/networkx/drawing/nx_pylab.py",
  "item_line": 466,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns",
    "Notes",
    "Examples",
    "See Also"
  ],
  "references": null,
  "see_also": [
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "to-resolve",
          "module": "current-module",
          "path": "draw",
          "type": "RefInfo",
          "version": "current-version"
        },
        "type": "Link",
        "value": "draw"
      },
      "type": null
    },
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "to-resolve",
          "module": "current-module",
          "path": "draw_networkx",
          "type": "RefInfo",
          "version": "current-version"
        },
        "type": "Link",
        "value": "draw_networkx"
      },
      "type": null
    },
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "module",
          "module": "networkx",
          "path": "networkx.drawing.nx_pylab:draw_networkx_nodes",
          "type": "RefInfo",
          "version": "3.1"
        },
        "type": "Link",
        "value": "draw_networkx_nodes"
      },
      "type": null
    },
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "module",
          "module": "networkx",
          "path": "networkx.drawing.nx_pylab:draw_networkx_labels",
          "type": "RefInfo",
          "version": "3.1"
        },
        "type": "Link",
        "value": "draw_networkx_labels"
      },
      "type": null
    },
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "module",
          "module": "networkx",
          "path": "networkx.drawing.nx_pylab:draw_networkx_edge_labels",
          "type": "RefInfo",
          "version": "3.1"
        },
        "type": "Link",
        "value": "draw_networkx_edge_labels"
      },
      "type": null
    }
  ],
  "signature": {
    "type": "Signature",
    "value": "(G, pos, edgelist=None, width=1.0, edge_color='k', style='solid', alpha=None, arrowstyle=None, arrowsize=10, edge_cmap=None, edge_vmin=None, edge_vmax=None, ax=None, arrows=None, label=None, node_size=300, nodelist=None, node_shape='o', connectionstyle='arc3', min_source_margin=0, min_target_margin=0)"
  },
  "type": "DocBlob"
}