{
  "aliases": [
    "networkx.empty_graph"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "The variable create_using should be a Graph Constructor or a \"graph\"-like object. Constructors, e.g. "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "nx.Graph"
            },
            {
              "type": "text",
              "value": " or "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "nx.MultiGraph"
            },
            {
              "type": "text",
              "value": " will be used to create the returned graph. \"graph\"-like objects will be cleared (nodes and edges will be removed) and refitted as an empty \"graph\" with nodes specified in n. This capability is useful for specifying the class-nature of the resulting empty \"graph\" (i.e. Graph, DiGraph, MyWeirdGraphClass, etc.)."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "The variable create_using has three main uses: Firstly, the variable create_using can be used to create an empty digraph, multigraph, etc.  For example,"
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": ">>> n = 10\n>>> G = nx.empty_graph(n, create_using=nx.DiGraph)"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "will create an empty digraph on n nodes."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Secondly, one can pass an existing graph (digraph, multigraph, etc.) via create_using. For example, if G is an existing graph (resp. digraph, multigraph, etc.), then empty_graph(n, create_using=G) will empty G (i.e. delete all nodes and edges using G.clear()) and then add n nodes and zero edges, and return the modified graph."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Thirdly, when constructing your home-grown graph creation function you can use empty_graph to construct the graph by passing a user defined create_using to empty_graph. In this case, if you want the default constructor to be other than nx.Graph, specify "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "default",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "default"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": ">>> def mygraph(n, create_using=None):\n...     G = nx.empty_graph(n, create_using, nx.MultiGraph)\n...     G.add_edges_from([(0, 1), (0, 1)])\n...     return G\n>>> G = mygraph(3)\n>>> G.is_multigraph()\nTrue\n>>> G = mygraph(3, nx.Graph)\n>>> G.is_multigraph()\nFalse"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "See also create_empty_copy(G)."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "If n is an integer, nodes are from "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "range(n)"
                    },
                    {
                      "type": "text",
                      "value": ". If n is a container of nodes, those nodes appear in the graph."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "n",
              "type": "Param",
              "type_": "int or iterable container of nodes (default = 0)"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Indicator of type of graph to return. If a Graph-type instance, then clear and use it. If None, use the "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "default",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "default"
                    },
                    {
                      "type": "text",
                      "value": " constructor. If a constructor, call it to create an empty graph."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "create_using",
              "type": "Param",
              "type_": "Graph Instance, Constructor or None"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The constructor to use if create_using is None. If None, then nx.Graph is used. This is used when passing an unknown "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "create_using",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "create_using"
                    },
                    {
                      "type": "text",
                      "value": " value through your home-grown function to "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "module",
                      "reference": {
                        "kind": "module",
                        "module": "networkx",
                        "path": "networkx.generators.classic:empty_graph",
                        "type": "RefInfo",
                        "version": "3.1"
                      },
                      "type": "Link",
                      "value": "empty_graph"
                    },
                    {
                      "type": "text",
                      "value": " and you want a default constructor other than nx.Graph."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "default",
              "type": "Param",
              "type_": "Graph constructor (optional, default = nx.Graph)"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Returns the empty graph with n nodes and zero edges."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [
      {
        "type": "code",
        "value": "G = nx.empty_graph(10)\nG.number_of_nodes()"
      },
      {
        "type": "code",
        "value": "G.number_of_edges()"
      },
      {
        "type": "code",
        "value": "G = nx.empty_graph(\"ABC\")\nG.number_of_nodes()"
      },
      {
        "type": "code",
        "value": "sorted(G)"
      }
    ],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/networkx/generators/classic.py",
  "item_line": 459,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Parameters",
    "Examples",
    "Notes"
  ],
  "references": null,
  "see_also": [],
  "signature": {
    "type": "Signature",
    "value": "(n=0, create_using=None, default=<class 'networkx.classes.graph.Graph'>)"
  },
  "type": "DocBlob"
}