{
  "aliases": [
    "networkx.directed.random_uniform_k_out_graph"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "A random "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "k",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "k"
            },
            {
              "type": "text",
              "value": "-out graph with uniform attachment is a multidigraph generated by the following algorithm. For each node "
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "u"
                }
              ],
              "type": "emphasis"
            },
            {
              "type": "text",
              "value": ", choose "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "k",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "k"
            },
            {
              "type": "text",
              "value": " nodes "
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "v"
                }
              ],
              "type": "emphasis"
            },
            {
              "type": "text",
              "value": " uniformly at random (with replacement). Add a directed edge joining "
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "u"
                }
              ],
              "type": "emphasis"
            },
            {
              "type": "text",
              "value": " to "
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "v"
                }
              ],
              "type": "emphasis"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "The return digraph or multidigraph may not be strongly connected, or even weakly connected."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "If "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "with_replacement",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "with_replacement"
            },
            {
              "type": "text",
              "value": " is True, this function is similar to "
            },
            {
              "type": "inlineCode",
              "value": "random_k_out_graph"
            },
            {
              "type": "text",
              "value": ", if that function had parameter "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "module",
              "reference": {
                "kind": "module",
                "module": "networkx",
                "path": "networkx.drawing.nx_pylab:apply_alpha",
                "type": "RefInfo",
                "version": "3.1"
              },
              "type": "Link",
              "value": "alpha"
            },
            {
              "type": "text",
              "value": " set to positive infinity."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The number of nodes in the returned graph."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "n",
              "type": "Param",
              "type_": "int"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The out-degree of each node in the returned graph."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "k",
              "type": "Param",
              "type_": "int"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "If True, self-loops are allowed when generating the graph."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "self_loops",
              "type": "Param",
              "type_": "bool"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "If True, neighbors are chosen with replacement and the returned graph will be a directed multigraph. Otherwise, neighbors are chosen without replacement and the returned graph will be a directed graph."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "with_replacement",
              "type": "Param",
              "type_": "bool"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Indicator of random number generation state. See "
                    },
                    {
                      "type": "inlineCode",
                      "value": "Randomness<randomness>"
                    },
                    {
                      "type": "text",
                      "value": "."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "seed",
              "type": "Param",
              "type_": "integer, random_state, or None (default)"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "If "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "with_replacement",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "with_replacement"
                    },
                    {
                      "type": "text",
                      "value": " is False and "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "k",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "k"
                    },
                    {
                      "type": "text",
                      "value": " is greater than "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "n",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "n"
                    },
                    {
                      "type": "text",
                      "value": "."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "",
              "type": "Param",
              "type_": "ValueError"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "A "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "k",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "k"
                    },
                    {
                      "type": "text",
                      "value": "-out-regular directed graph generated according to the above algorithm. It will be a multigraph if and only if "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "with_replacement",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "with_replacement"
                    },
                    {
                      "type": "text",
                      "value": " is True."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "",
              "type": "Param",
              "type_": "NetworkX graph"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Returns a random "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "k",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "k"
            },
            {
              "type": "text",
              "value": "-out graph with uniform attachment."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/networkx/generators/directed.py",
  "item_line": 367,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns",
    "Raises",
    "See Also",
    "Notes"
  ],
  "references": null,
  "see_also": [
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "module",
          "module": "networkx",
          "path": "networkx.generators.directed:random_k_out_graph",
          "type": "RefInfo",
          "version": "3.1"
        },
        "type": "Link",
        "value": "random_k_out_graph"
      },
      "type": null
    }
  ],
  "signature": {
    "type": "Signature",
    "value": "(n, k, self_loops=True, with_replacement=True, seed=None)"
  },
  "type": "DocBlob"
}