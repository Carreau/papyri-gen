{
  "aliases": [
    "networkx.joint_degree_graph"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "In each iteration of the \"while loop\" the algorithm picks two disconnected nodes "
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "v"
                }
              ],
              "type": "emphasis"
            },
            {
              "type": "text",
              "value": " and "
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "w"
                }
              ],
              "type": "emphasis"
            },
            {
              "type": "text",
              "value": ", of degree "
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "k"
                }
              ],
              "type": "emphasis"
            },
            {
              "type": "text",
              "value": " and "
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "l"
                }
              ],
              "type": "emphasis"
            },
            {
              "type": "text",
              "value": " correspondingly,  for which "
            },
            {
              "type": "inlineCode",
              "value": "joint_degrees[k][l]"
            },
            {
              "type": "text",
              "value": " has not reached its target yet. It then adds edge ("
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "v"
                }
              ],
              "type": "emphasis"
            },
            {
              "type": "text",
              "value": ", "
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "w"
                }
              ],
              "type": "emphasis"
            },
            {
              "type": "text",
              "value": ") and increases the number of edges in graph G by one."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "The intelligence of the algorithm lies in the fact that  it is always possible to add an edge between such disconnected nodes "
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "v"
                }
              ],
              "type": "emphasis"
            },
            {
              "type": "text",
              "value": " and "
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "w"
                }
              ],
              "type": "emphasis"
            },
            {
              "type": "text",
              "value": ", even if one or both nodes do not have free stubs. That is made possible by executing a \"neighbor switch\", an edge rewiring move that releases a free stub while keeping the joint degree of G the same."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "The algorithm continues for E (number of edges) iterations of the \"while loop\", at the which point all entries of the given "
            },
            {
              "type": "inlineCode",
              "value": "joint_degrees[k][l]"
            },
            {
              "type": "text",
              "value": " have reached their target values and the construction is complete."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "A joint degree dictionary in which entry "
                    },
                    {
                      "type": "inlineCode",
                      "value": "joint_degrees[k][l]"
                    },
                    {
                      "type": "text",
                      "value": " is the number of edges joining nodes of degree "
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "k"
                        }
                      ],
                      "type": "emphasis"
                    },
                    {
                      "type": "text",
                      "value": " with nodes of degree "
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "l"
                        }
                      ],
                      "type": "emphasis"
                    },
                    {
                      "type": "text",
                      "value": "."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "joint_degrees",
              "type": "Param",
              "type_": "dictionary of dictionary of integers"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Indicator of random number generation state. See "
                    },
                    {
                      "type": "inlineCode",
                      "value": "Randomness<randomness>"
                    },
                    {
                      "type": "text",
                      "value": "."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "seed",
              "type": "Param",
              "type_": "integer, random_state, or None (default)"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "If "
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "joint_degrees"
                        }
                      ],
                      "type": "emphasis"
                    },
                    {
                      "type": "text",
                      "value": " dictionary is not realizable."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "",
              "type": "Param",
              "type_": "NetworkXError"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "A graph with the specified joint degree dictionary."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "G",
              "type": "Param",
              "type_": "Graph"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Generates a random simple graph with the given joint degree dictionary."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [
      {
        "type": "code",
        "value": "joint_degrees = {\n    1: {4: 1},\n    2: {2: 2, 3: 2, 4: 2},\n    3: {2: 2, 4: 1},\n    4: {1: 1, 2: 2, 3: 1},\n}\nG = nx.joint_degree_graph(joint_degrees)"
      }
    ],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/networkx/generators/joint_degree_seq.py",
  "item_line": 143,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Parameters",
    "Returns",
    "Raises",
    "Notes",
    "References",
    "Examples"
  ],
  "references": null,
  "see_also": [],
  "signature": {
    "type": "Signature",
    "value": "(joint_degrees, seed=None)"
  },
  "type": "DocBlob"
}