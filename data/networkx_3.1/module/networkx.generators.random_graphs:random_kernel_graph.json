{
  "aliases": [
    "networkx.random_kernel_graph"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "The algorithm chooses each of the $[n(n-1)]/2$ possible edges with probability specified by a kernel $\\kappa(x,y)$ .  The kernel $\\kappa(x,y)$ must be a symmetric (in $x,y$), non-negative, bounded function."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "The kernel is specified through its definite integral which must be provided as one of the arguments. If the integral and root of the kernel integral can be found in $O(1)$ time then this algorithm runs in time $O(n+m)$ where m is the expected number of edges ."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "The nodes are set to integers from $0$ to $n-1$."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The number of nodes"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "n",
              "type": "Param",
              "type_": "int"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Function that returns the definite integral of the kernel $\\kappa(x,y)$, $F(y,a,b) := \\int_a^b \\kappa(x,y)dx$"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "kernel_integral",
              "type": "Param",
              "type_": "function"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Function that returns the root $b$ of the equation $F(y,a,b) = r$. If None, the root is found using "
                    },
                    {
                      "type": "inlineCode",
                      "value": "scipy.optimize.brentq"
                    },
                    {
                      "type": "text",
                      "value": " (this requires SciPy)."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "kernel_root: function (optional)",
              "type": "Param",
              "type_": ""
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Indicator of random number generation state. See "
                    },
                    {
                      "type": "inlineCode",
                      "value": "Randomness<randomness>"
                    },
                    {
                      "type": "text",
                      "value": "."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "seed",
              "type": "Param",
              "type_": "integer, random_state, or None (default)"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Returns an random graph based on the specified kernel."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [
      {
        "type": "text",
        "value": "Generate an Erd\u0151s\u2013R\u00e9nyi random graph $G(n,c/n)$, with kernel\n$\\kappa(x,y)=c$ where $c$ is the mean expected degree."
      },
      {
        "type": "code",
        "value": "def integral(u, w, z):\n    return c * (z - w)\ndef root(u, w, r):\n    return r / c + w\nc = 1\ngraph = nx.random_kernel_graph(1000, integral, root)"
      }
    ],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/networkx/generators/random_graphs.py",
  "item_line": 1238,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Notes",
    "Examples",
    "See Also",
    "References"
  ],
  "references": null,
  "see_also": [
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "to-resolve",
          "module": "current-module",
          "path": "gnp_random_graph",
          "type": "RefInfo",
          "version": "current-version"
        },
        "type": "Link",
        "value": "gnp_random_graph"
      },
      "type": null
    },
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "module",
          "module": "networkx",
          "path": "networkx.generators.degree_seq:expected_degree_graph",
          "type": "RefInfo",
          "version": "3.1"
        },
        "type": "Link",
        "value": "expected_degree_graph"
      },
      "type": null
    }
  ],
  "signature": {
    "type": "Signature",
    "value": "(n, kernel_integral, kernel_root=None, seed=None)"
  },
  "type": "DocBlob"
}