{
  "aliases": [
    "networkx.spectral_graph_forge"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "This algorithm, called Spectral Graph Forge (SGF), computes the eigenvectors of a given graph adjacency matrix, filters them and builds a random graph with a similar eigenstructure. SGF has been proved to be particularly useful for synthesizing realistic social networks and it can also be used to anonymize graph sensitive data."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Spectral Graph Forge (SGF) generates a random simple graph resembling the global properties of the given one. It leverages the low-rank approximation of the associated adjacency matrix driven by the "
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "alpha"
                }
              ],
              "type": "emphasis"
            },
            {
              "type": "text",
              "value": " precision parameter. SGF preserves the number of nodes of the input graph and their ordering. This way, nodes of output graphs resemble the properties of the input one and attributes can be directly mapped."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "It considers the graph adjacency matrices which can optionally be transformed to other symmetric real matrices (currently transformation options include "
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "identity"
                }
              ],
              "type": "emphasis"
            },
            {
              "type": "text",
              "value": " and "
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "modularity"
                }
              ],
              "type": "emphasis"
            },
            {
              "type": "text",
              "value": "). The "
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "modularity"
                }
              ],
              "type": "emphasis"
            },
            {
              "type": "text",
              "value": " transformation, in the sense of Newman's modularity matrix allows the focusing on community structure related properties of the graph."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "SGF applies a low-rank approximation whose fixed rank is computed from the ratio "
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "alpha"
                }
              ],
              "type": "emphasis"
            },
            {
              "type": "text",
              "value": " of the input graph adjacency matrix dimension. This step performs a filtering on the input eigenvectors similar to the low pass filtering common in telecommunications."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "The filtered values (after truncation) are used as input to a Bernoulli sampling for constructing a random adjacency matrix."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [],
              "param": "G",
              "type": "Param",
              "type_": "Graph"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Ratio representing the percentage of eigenvectors of G to consider, values in [0,1]."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "alpha",
              "type": "Param",
              "type_": "float"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Represents the intended matrix linear transformation, possible values are 'identity' and 'modularity'"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "transformation",
              "type": "Param",
              "type_": "string, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Indicator of numpy random number generation state. See "
                    },
                    {
                      "type": "inlineCode",
                      "value": "Randomness<randomness>"
                    },
                    {
                      "type": "text",
                      "value": "."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "seed",
              "type": "Param",
              "type_": "integer, random_state, or None (default)"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "If transformation has a value different from 'identity' or 'modularity'"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "",
              "type": "Param",
              "type_": "NetworkXError"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "A graph with a similar eigenvector structure of the input one."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "H",
              "type": "Param",
              "type_": "Graph"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Returns a random simple graph with spectrum resembling that of "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "G",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "G"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [
      {
        "type": "code",
        "value": "G = nx.karate_club_graph()\nH = nx.spectral_graph_forge(G, 0.3)"
      }
    ],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/networkx/generators/spectral_graph_forge.py",
  "item_line": 10,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns",
    "Raises",
    "Notes",
    "References",
    "Examples"
  ],
  "references": null,
  "see_also": [],
  "signature": {
    "type": "Signature",
    "value": "(G, alpha, transformation='identity', seed=None)"
  },
  "type": "DocBlob"
}