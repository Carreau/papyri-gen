{
  "aliases": [
    "networkx.prefix_tree_recursive"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "The original recursive version of prefix_tree for comparison. It is the same algorithm but the recursion is unrolled onto a stack."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Usually the paths are described as strings or lists of integers."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "A \"prefix tree\" represents the prefix structure of the strings. Each node represents a prefix of some string. The root represents the empty prefix with children for the single letter prefixes which in turn have children for each double letter prefix starting with the single letter corresponding to the parent node, and so on."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "More generally the prefixes do not need to be strings. A prefix refers to the start of a sequence. The root has children for each one element prefix and they have children for each two element prefix that starts with the one element sequence of the parent, and so on."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Note that this implementation uses integer nodes with an attribute. Each node has an attribute \"source\" whose value is the original element of the path to which this node corresponds. For example, suppose "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "paths"
            },
            {
              "type": "text",
              "value": " consists of one path: \"can\". Then the nodes "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "[1, 2, 3]"
            },
            {
              "type": "text",
              "value": " which represent this path have \"source\" values \"c\", \"a\" and \"n\"."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "All the descendants of a node have a common prefix in the sequence/path associated with that node. From the returned tree, ehe prefix for each node can be constructed by traversing the tree up to the root and accumulating the \"source\" values along the way."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "The root node is always "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "0"
            },
            {
              "type": "text",
              "value": " and has \"source\" attribute "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "None"
            },
            {
              "type": "text",
              "value": ". The root is the only node with in-degree zero. The nil node is always "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "-1"
            },
            {
              "type": "text",
              "value": " and has \"source\" attribute "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "\"NIL\""
            },
            {
              "type": "text",
              "value": ". The nil node is the only node with out-degree zero."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "The prefix tree is also known as a "
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "trie"
                }
              ],
              "type": "emphasis"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "An iterable of paths which are themselves sequences. Matching prefixes among these sequences are identified with nodes of the prefix tree. One leaf of the tree is associated with each path. (Identical paths are associated with the same leaf of the tree.)"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "paths: iterable of paths",
              "type": "Param",
              "type_": ""
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "A directed graph representing an arborescence consisting of the prefix tree generated by "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "paths"
                    },
                    {
                      "type": "text",
                      "value": ". Nodes are directed \"downward\", from parent to child. A special \"synthetic\" root node is added to be the parent of the first node in each path. A special \"synthetic\" leaf node, the \"nil\" node "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "-1"
                    },
                    {
                      "type": "text",
                      "value": ", is added to be the child of all nodes representing the last element in a path. (The addition of this nil node technically makes this not an arborescence but a directed acyclic graph; removing the nil node makes it an arborescence.)"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "",
              "type": "Param",
              "type_": "tree: DiGraph"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Recursively creates a directed prefix tree from a list of paths."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [
      {
        "type": "text",
        "value": "Create a prefix tree from a list of strings with common prefixes::"
      },
      {
        "type": "text",
        "value": "    >>> paths = [\"ab\", \"abs\", \"ad\"]\n    >>> T = nx.prefix_tree(paths)\n    >>> list(T.edges)\n    [(0, 1), (1, 2), (1, 4), (2, -1), (2, 3), (3, -1), (4, -1)]"
      },
      {
        "type": "text",
        "value": "The leaf nodes can be obtained as predecessors of the nil node."
      },
      {
        "type": "text",
        "value": "    >>> root, NIL = 0, -1\n    >>> list(T.predecessors(NIL))\n    [2, 3, 4]"
      },
      {
        "type": "text",
        "value": "To recover the original paths that generated the prefix tree,\ntraverse up the tree from the node `-1` to the node `0`::"
      },
      {
        "type": "text",
        "value": "    >>> recovered = []\n    >>> for v in T.predecessors(NIL):\n    ...     prefix = \"\"\n    ...     while v != root:\n    ...         prefix = str(T.nodes[v][\"source\"]) + prefix\n    ...         v = next(T.predecessors(v))  # only one predecessor\n    ...     recovered.append(prefix)\n    >>> sorted(recovered)\n    ['ab', 'abs', 'ad']"
      }
    ],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/networkx/generators/trees.py",
  "item_line": 142,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns",
    "Notes",
    "Examples"
  ],
  "references": null,
  "see_also": [],
  "signature": {
    "type": "Signature",
    "value": "(paths)"
  },
  "type": "DocBlob"
}