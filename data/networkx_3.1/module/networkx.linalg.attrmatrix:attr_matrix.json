{
  "aliases": [
    "networkx.attr_matrix"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "If only "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "G",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "G"
            },
            {
              "type": "text",
              "value": " is passed in, then the adjacency matrix is constructed."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Let A be a discrete set of values for the node attribute "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "node_attr",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "node_attr"
            },
            {
              "type": "text",
              "value": ". Then the elements of A represent the rows and columns of the constructed matrix. Now, iterate through every edge e=(u,v) in "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "G",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "G"
            },
            {
              "type": "text",
              "value": " and consider the value of the edge attribute "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "edge_attr",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "edge_attr"
            },
            {
              "type": "text",
              "value": ".  If ua and va are the values of the node attribute "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "node_attr",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "node_attr"
            },
            {
              "type": "text",
              "value": " for u and v, respectively, then the value of the edge attribute is added to the matrix element at (ua, va)."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "A valid NumPy dtype used to initialize the array. Keep in mind certain dtypes can yield unexpected results if the array is to be normalized. The parameter is passed to numpy.zeros(). If unspecified, the NumPy default is used."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "dtype",
              "type": "Param",
              "type_": "NumPy data-type, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Whether to store multidimensional data in C- or Fortran-contiguous (row- or column-wise) order in memory. This parameter is passed to numpy.zeros(). If unspecified, the NumPy default is used."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "order",
              "type": "Param",
              "type_": "{'C', 'F'}, optional"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The NetworkX graph used to construct the attribute matrix."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "G",
              "type": "Param",
              "type_": "graph"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Each element of the matrix represents a running total of the specified edge attribute for edges whose node attributes correspond to the rows/cols of the matrix. The attribute must be present for all edges in the graph. If no attribute is specified, then we just count the number of edges whose node attributes correspond to the matrix element."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "edge_attr",
              "type": "Param",
              "type_": "str, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Each row and column in the matrix represents a particular value of the node attribute.  The attribute must be present for all nodes in the graph. Note, the values of this attribute should be reliably hashable. So, float values are not recommended. If no attribute is specified, then the rows and columns will be the nodes of the graph."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "node_attr",
              "type": "Param",
              "type_": "str, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "If True, then each row is normalized by the summation of its values."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "normalized",
              "type": "Param",
              "type_": "bool, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "A list of the node attribute values. This list specifies the ordering of rows and columns of the array. If no ordering is provided, then the ordering will be random (and also, a return value)."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "rc_order",
              "type": "Param",
              "type_": "list, optional"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The attribute matrix."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "M",
              "type": "Param",
              "type_": "2D NumPy ndarray"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "If "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "rc_order",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "rc_order"
                    },
                    {
                      "type": "text",
                      "value": " was specified, then only the attribute matrix is returned. However, if "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "rc_order",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "rc_order"
                    },
                    {
                      "type": "text",
                      "value": " was None, then the ordering used to construct the matrix is returned as well."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "ordering",
              "type": "Param",
              "type_": "list"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Returns the attribute matrix using attributes from "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "G",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "G"
            },
            {
              "type": "text",
              "value": " as a numpy array."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [
      {
        "type": "text",
        "value": "Construct an adjacency matrix:"
      },
      {
        "type": "code",
        "value": "G = nx.Graph()\nG.add_edge(0, 1, thickness=1, weight=3)\nG.add_edge(0, 2, thickness=2)\nG.add_edge(1, 2, thickness=3)\nnx.attr_matrix(G, rc_order=[0, 1, 2])"
      },
      {
        "type": "text",
        "value": "Alternatively, we can obtain the matrix describing edge thickness."
      },
      {
        "type": "code",
        "value": "nx.attr_matrix(G, edge_attr=\"thickness\", rc_order=[0, 1, 2])"
      },
      {
        "type": "text",
        "value": "We can also color the nodes and ask for the probability distribution over\nall edges (u,v) describing:"
      },
      {
        "type": "text",
        "value": "    Pr(v has color Y | u has color X)"
      },
      {
        "type": "code",
        "value": "G.nodes[0][\"color\"] = \"red\"\nG.nodes[1][\"color\"] = \"red\"\nG.nodes[2][\"color\"] = \"blue\"\nrc = [\"red\", \"blue\"]\nnx.attr_matrix(G, node_attr=\"color\", normalized=True, rc_order=rc)"
      },
      {
        "type": "text",
        "value": "For example, the above tells us that for all edges (u,v):"
      },
      {
        "type": "text",
        "value": "    Pr( v is red  | u is red)  = 1/3\n    Pr( v is blue | u is red)  = 2/3"
      },
      {
        "type": "text",
        "value": "    Pr( v is red  | u is blue) = 1\n    Pr( v is blue | u is blue) = 0"
      },
      {
        "type": "text",
        "value": "Finally, we can obtain the total weights listed by the node colors."
      },
      {
        "type": "code",
        "value": "nx.attr_matrix(G, edge_attr=\"weight\", node_attr=\"color\", rc_order=rc)"
      },
      {
        "type": "text",
        "value": "Thus, the total weight over all edges (u,v) with u and v having colors:"
      },
      {
        "type": "text",
        "value": "    (red, red)   is 3   # the sole contribution is from edge (0,1)\n    (red, blue)  is 2   # contributions from edges (0,2) and (1,2)\n    (blue, red)  is 2   # same as (red, blue) since graph is undirected\n    (blue, blue) is 0   # there are no edges with blue endpoints"
      }
    ],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/networkx/linalg/attrmatrix.py",
  "item_line": 144,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Other Parameters",
    "Returns",
    "Examples"
  ],
  "references": null,
  "see_also": [],
  "signature": {
    "type": "Signature",
    "value": "(G, edge_attr=None, node_attr=None, normalized=False, rc_order=None, dtype=None, order=None)"
  },
  "type": "DocBlob"
}