{
  "aliases": [
    "networkx.adjacency_matrix"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "For directed graphs, entry i,j corresponds to an edge from i to j."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "If you want a pure Python adjacency matrix representation try networkx.convert.to_dict_of_dicts which will return a dictionary-of-dictionaries format that can be addressed as a sparse matrix."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "For MultiGraph/MultiDiGraph with parallel edges the weights are summed. See "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "to_numpy_array"
            },
            {
              "type": "text",
              "value": " for other options."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "The convention used for self-loop edges in graphs is to assign the diagonal matrix entry value to the edge weight attribute (or the number 1 if the edge has no weight attribute).  If the alternate convention of doubling the edge weight is desired the resulting SciPy sparse array can be modified as follows:"
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": ">>> G = nx.Graph([(1, 1)])\n>>> A = nx.adjacency_matrix(G)\n>>> print(A.todense())\n[[1]]\n>>> A.setdiag(A.diagonal() * 2)\n>>> print(A.todense())\n[[2]]"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "A NetworkX graph"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "G",
              "type": "Param",
              "type_": "graph"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The rows and columns are ordered according to the nodes in nodelist. If nodelist is None, then the ordering is produced by G.nodes()."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "nodelist",
              "type": "Param",
              "type_": "list, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The desired data-type for the array. If None, then the NumPy default is used."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "dtype",
              "type": "Param",
              "type_": "NumPy data-type, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The edge data key used to provide each value in the matrix. If None, then each edge has weight 1."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "weight",
              "type": "Param",
              "type_": "string or None, optional (default='weight')"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Adjacency matrix representation of G."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "A",
              "type": "Param",
              "type_": "SciPy sparse array"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Returns adjacency matrix of G."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/networkx/linalg/graphmatrix.py",
  "item_line": 99,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Parameters",
    "Returns",
    "Notes",
    "See Also"
  ],
  "references": null,
  "see_also": [
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "to-resolve",
          "module": "current-module",
          "path": "to_numpy_array",
          "type": "RefInfo",
          "version": "current-version"
        },
        "type": "Link",
        "value": "to_numpy_array"
      },
      "type": null
    },
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "module",
          "module": "networkx",
          "path": "networkx.convert_matrix:to_scipy_sparse_array",
          "type": "RefInfo",
          "version": "3.1"
        },
        "type": "Link",
        "value": "to_scipy_sparse_array"
      },
      "type": null
    },
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "module",
          "module": "networkx",
          "path": "networkx.convert:to_dict_of_dicts",
          "type": "RefInfo",
          "version": "3.1"
        },
        "type": "Link",
        "value": "to_dict_of_dicts"
      },
      "type": null
    },
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "module",
          "module": "networkx",
          "path": "networkx.linalg.spectrum:adjacency_spectrum",
          "type": "RefInfo",
          "version": "3.1"
        },
        "type": "Link",
        "value": "adjacency_spectrum"
      },
      "type": null
    }
  ],
  "signature": {
    "type": "Signature",
    "value": "(G, nodelist=None, dtype=None, weight='weight')"
  },
  "type": "DocBlob"
}