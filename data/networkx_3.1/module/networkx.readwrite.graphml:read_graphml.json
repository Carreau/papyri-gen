{
  "aliases": [
    "networkx.read_graphml"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Default node and edge attributes are not propagated to each node and edge. They can be obtained from "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "G.graph"
            },
            {
              "type": "text",
              "value": " and applied to node and edge attributes if desired using something like this:"
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": ">>> default_color = G.graph[\"node_default\"][\"color\"]  # doctest: +SKIP\n>>> for node, data in G.nodes(data=True):  # doctest: +SKIP\n...     if \"color\" not in data:\n...         data[\"color\"] = default_color\n>>> default_color = G.graph[\"edge_default\"][\"color\"]  # doctest: +SKIP\n>>> for u, v, data in G.edges(data=True):  # doctest: +SKIP\n...     if \"color\" not in data:\n...         data[\"color\"] = default_color"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "This implementation does not support mixed graphs (directed and unidirected edges together), hypergraphs, nested graphs, or ports."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "For multigraphs the GraphML edge \"id\" will be used as the edge key.  If not specified then they \"key\" attribute will be used.  If there is no \"key\" attribute a default NetworkX multigraph edge key will be provided."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Files with the yEd \"yfiles\" extension can be read. The type of the node's shape is preserved in the "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "shape_type"
            },
            {
              "type": "text",
              "value": " node attribute."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "yEd compressed files (\"file.graphmlz\" extension) can be read by renaming the file to \"file.graphml.gz\"."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "File or filename to write. Filenames ending in .gz or .bz2 will be compressed."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "path",
              "type": "Param",
              "type_": "file or string"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Convert node ids to this type"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "node_type: Python type (default: str)",
              "type": "Param",
              "type_": ""
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Convert graphml edge ids to this type. Multigraphs use id as edge key. Non-multigraphs add to edge attribute dict with name \"id\"."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "edge_key_type: Python type (default: int)",
              "type": "Param",
              "type_": ""
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "If True, return a multigraph with edge keys. If False (the default) return a multigraph when multiedges are in the graph."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "force_multigraph",
              "type": "Param",
              "type_": "bool (default: False)"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "If parallel edges are present or "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "force_multigraph=True"
                    },
                    {
                      "type": "text",
                      "value": " then a MultiGraph or MultiDiGraph is returned. Otherwise a Graph/DiGraph. The returned graph is directed if the file indicates it should be."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "",
              "type": "Param",
              "type_": "graph: NetworkX graph"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Read graph in GraphML format from path."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/networkx/readwrite/graphml.py",
  "item_line": 235,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Parameters",
    "Returns",
    "Notes"
  ],
  "references": null,
  "see_also": [],
  "signature": {
    "type": "Signature",
    "value": "(path, node_type=<class 'str'>, edge_key_type=<class 'int'>, force_multigraph=False)"
  },
  "type": "DocBlob"
}