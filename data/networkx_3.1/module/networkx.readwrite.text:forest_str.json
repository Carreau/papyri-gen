{
  "aliases": [
    "networkx.forest_str"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "This function has been superseded by "
            },
            {
              "type": "inlineCode",
              "value": "nx.readwrite.text.generate_network_text"
            },
            {
              "type": "text",
              "value": ", which should be used instead."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Graph to represent (must be a tree, forest, or the empty graph)"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "graph",
              "type": "Param",
              "type_": "nx.DiGraph | nx.Graph"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "If True will use the \"label\" attribute of a node to display if it exists otherwise it will use the node value itself. Defaults to True."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "with_labels",
              "type": "Param",
              "type_": "bool"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Mainly relevant for undirected forests, specifies which nodes to list first. If unspecified the root nodes of each tree will be used for directed forests; for undirected forests this defaults to the nodes with the smallest degree."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "sources",
              "type": "Param",
              "type_": "List"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Function to use to write to, if None new lines are appended to a list and returned. If set to the "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "module",
                      "reference": {
                        "kind": "module",
                        "module": "networkx",
                        "path": "networkx.algorithms.similarity:debug_print",
                        "type": "RefInfo",
                        "version": "3.1"
                      },
                      "type": "Link",
                      "value": "print"
                    },
                    {
                      "type": "text",
                      "value": " function, lines will be written to stdout as they are generated. If specified, this function will return None. Defaults to None."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "write",
              "type": "Param",
              "type_": "callable"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "If True only ASCII characters are used to construct the visualization"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "ascii_only",
              "type": "Param",
              "type_": "Boolean"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "utf8 representation of the tree / forest"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "",
              "type": "Param",
              "type_": "str | None"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Creates a nice utf8 representation of a forest"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [
      {
        "type": "code",
        "value": "graph = nx.balanced_tree(r=2, h=3, create_using=nx.DiGraph)\nprint(nx.forest_str(graph))"
      },
      {
        "type": "code",
        "value": "graph = nx.balanced_tree(r=1, h=2, create_using=nx.Graph)\nprint(nx.forest_str(graph))"
      },
      {
        "type": "code",
        "value": "print(nx.forest_str(graph, ascii_only=True))"
      }
    ],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/networkx/readwrite/text.py",
  "item_line": 466,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns",
    "Examples"
  ],
  "references": null,
  "see_also": [],
  "signature": {
    "type": "Signature",
    "value": "(graph, with_labels=True, sources=None, write=None, ascii_only=False)"
  },
  "type": "DocBlob"
}