{
  "aliases": [
    "networkx.relabel_nodes"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "The original node ordering may not be preserved if "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "copy",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "copy"
            },
            {
              "type": "text",
              "value": " is "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "False"
            },
            {
              "type": "text",
              "value": " and the mapping includes overlap between old and new labels."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Only the nodes specified in the mapping will be relabeled. Any non-node keys in the mapping are ignored."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "The keyword setting copy=False modifies the graph in place. Relabel_nodes avoids naming collisions by building a directed graph from "
            },
            {
              "type": "inlineCode",
              "value": "mapping"
            },
            {
              "type": "text",
              "value": " which specifies the order of relabelings. Naming collisions, such as a->b, b->c, are ordered such that \"b\" gets renamed to \"c\" before \"a\" gets renamed \"b\". In cases of circular mappings (e.g. a->b, b->a), modifying the graph is not possible in-place and an exception is raised. In that case, use copy=True."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "If a relabel operation on a multigraph would cause two or more edges to have the same source, target and key, the second edge must be assigned a new key to retain all edges. The new key is set to the lowest non-negative integer not already used as a key for edges between these two nodes. Note that this means non-numeric keys may be replaced by numeric keys."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "A NetworkX graph"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "G",
              "type": "Param",
              "type_": "graph"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "A dictionary with the old labels as keys and new labels as values. A partial mapping is allowed. Mapping 2 nodes to a single node is allowed. Any non-node keys in the mapping are ignored."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "mapping",
              "type": "Param",
              "type_": "dictionary"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "If True return a copy, or if False relabel the nodes in place."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "copy",
              "type": "Param",
              "type_": "bool (optional, default=True)"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Relabel the nodes of the graph G according to a given mapping."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [
      {
        "type": "text",
        "value": "To create a new graph with nodes relabeled according to a given\ndictionary:"
      },
      {
        "type": "code",
        "value": "G = nx.path_graph(3)\nsorted(G)"
      },
      {
        "type": "code",
        "value": "mapping = {0: \"a\", 1: \"b\", 2: \"c\"}\nH = nx.relabel_nodes(G, mapping)\nsorted(H)"
      },
      {
        "type": "text",
        "value": "Nodes can be relabeled with any hashable object, including numbers\nand strings:"
      },
      {
        "type": "code",
        "value": "import string\nG = nx.path_graph(26)  # nodes are integers 0 through 25\nsorted(G)[:3]"
      },
      {
        "type": "code",
        "value": "mapping = dict(zip(G, string.ascii_lowercase))\nG = nx.relabel_nodes(G, mapping)  # nodes are characters a through z\nsorted(G)[:3]"
      },
      {
        "type": "code",
        "value": "mapping = dict(zip(G, range(1, 27)))\nG = nx.relabel_nodes(G, mapping)  # nodes are integers 1 through 26\nsorted(G)[:3]"
      },
      {
        "type": "text",
        "value": "To perform a partial in-place relabeling, provide a dictionary\nmapping only a subset of the nodes, and set the `copy` keyword\nargument to False:"
      },
      {
        "type": "code",
        "value": "G = nx.path_graph(3)  # nodes 0-1-2\nmapping = {0: \"a\", 1: \"b\"}  # 0->'a' and 1->'b'\nG = nx.relabel_nodes(G, mapping, copy=False)\nsorted(G, key=str)"
      },
      {
        "type": "text",
        "value": "A mapping can also be given as a function:"
      },
      {
        "type": "code",
        "value": "G = nx.path_graph(3)\nH = nx.relabel_nodes(G, lambda x: x ** 2)\nlist(H)"
      },
      {
        "type": "text",
        "value": "In a multigraph, relabeling two or more nodes to the same new node\nwill retain all edges, but may change the edge keys in the process:"
      },
      {
        "type": "code",
        "value": "G = nx.MultiGraph()\nG.add_edge(0, 1, value=\"a\")  # returns the key for this edge"
      },
      {
        "type": "code",
        "value": "G.add_edge(0, 2, value=\"b\")"
      },
      {
        "type": "code",
        "value": "G.add_edge(0, 3, value=\"c\")"
      },
      {
        "type": "code",
        "value": "mapping = {1: 4, 2: 4, 3: 4}\nH = nx.relabel_nodes(G, mapping, copy=True)\nprint(H[0])"
      },
      {
        "type": "text",
        "value": "This works for in-place relabeling too:"
      },
      {
        "type": "code",
        "value": "G = nx.relabel_nodes(G, mapping, copy=False)\nprint(G[0])"
      }
    ],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/networkx/relabel.py",
  "item_line": 6,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Examples",
    "Notes",
    "See Also"
  ],
  "references": null,
  "see_also": [
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "module",
          "module": "networkx",
          "path": "networkx.relabel:convert_node_labels_to_integers",
          "type": "RefInfo",
          "version": "3.1"
        },
        "type": "Link",
        "value": "convert_node_labels_to_integers"
      },
      "type": null
    }
  ],
  "signature": {
    "type": "Signature",
    "value": "(G, mapping, copy=True)"
  },
  "type": "DocBlob"
}