{
  "aliases": [
    "networkx.classic.nodes_or_number"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "With this decorator, the specified argument can be either a number or a container of nodes. If it is a number, the nodes used are "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "range(n)"
            },
            {
              "type": "text",
              "value": ". This allows "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "nx.complete_graph(50)"
            },
            {
              "type": "text",
              "value": " in place of "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "nx.complete_graph(list(range(50)))"
            },
            {
              "type": "text",
              "value": ". And it also allows "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "nx.complete_graph(any_list_of_nodes)"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "If string, the name of the argument to be treated. If int, the index of the argument to be treated. If more than one node argument is allowed, can be a list of locations."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "which_args",
              "type": "Param",
              "type_": "string or int or sequence of strings or ints"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Function which replaces int args with ranges."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "_nodes_or_numbers",
              "type": "Param",
              "type_": "function"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Decorator to allow number of nodes or container of nodes."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [
      {
        "type": "text",
        "value": "Decorate functions like this::"
      },
      {
        "type": "text",
        "value": "   @nodes_or_number(\"nodes\")\n   def empty_graph(nodes):\n       # nodes is converted to a list of nodes"
      },
      {
        "type": "text",
        "value": "   @nodes_or_number(0)\n   def empty_graph(nodes):\n       # nodes is converted to a list of nodes"
      },
      {
        "type": "text",
        "value": "   @nodes_or_number([\"m1\", \"m2\"])\n   def grid_2d_graph(m1, m2, periodic=False):\n       # m1 and m2 are each converted to a list of nodes"
      },
      {
        "type": "text",
        "value": "   @nodes_or_number([0, 1])\n   def grid_2d_graph(m1, m2, periodic=False):\n       # m1 and m2 are each converted to a list of nodes"
      },
      {
        "type": "text",
        "value": "   @nodes_or_number(1)\n   def full_rary_tree(r, n)\n       # presumably r is a number. It is not handled by this decorator.\n       # n is converted to a list of nodes"
      }
    ],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/networkx/utils/decorators.py",
  "item_line": 195,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns",
    "Examples"
  ],
  "references": null,
  "see_also": [],
  "signature": {
    "type": "Signature",
    "value": "(which_args)"
  },
  "type": "DocBlob"
}