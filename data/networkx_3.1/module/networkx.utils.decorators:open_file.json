{
  "aliases": [
    "networkx.adjlist.open_file"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Note that this decorator solves the problem when a path argument is specified as a string, but it does not handle the situation when the function wants to accept a default of None (and then handle it)."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Here is an example of how to handle this case    "
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": "@open_file(\"path\")\ndef some_function(arg1, arg2, path=None):\n   if path is None:\n       fobj = tempfile.NamedTemporaryFile(delete=False)\n   else:\n       # `path` could have been a string or file object or something\n       # similar. In any event, the decorator has given us a file object\n       # and it will close it for us, if it should.\n       fobj = path\n\n   try:\n       fobj.write(\"blah\")\n   finally:\n       if path is None:\n           fobj.close()"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Normally, we'd want to use \"with\" to ensure that fobj gets closed. However, the decorator will make "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "path"
            },
            {
              "type": "text",
              "value": " a file object for us, and using \"with\" would undesirably close that file object. Instead, we use a try block, as shown above. When we exit the function, fobj will be closed, if it should be, by the decorator."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Name or index of the argument that is a path."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "path_arg",
              "type": "Param",
              "type_": "string or int"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "String for opening mode."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "mode",
              "type": "Param",
              "type_": "str"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Function which cleanly executes the io."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "_open_file",
              "type": "Param",
              "type_": "function"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Decorator to ensure clean opening and closing of files."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [
      {
        "type": "text",
        "value": "Decorate functions like this::"
      },
      {
        "type": "text",
        "value": "   @open_file(0,\"r\")\n   def read_function(pathname):\n       pass"
      },
      {
        "type": "text",
        "value": "   @open_file(1,\"w\")\n   def write_function(G, pathname):\n       pass"
      },
      {
        "type": "text",
        "value": "   @open_file(1,\"w\")\n   def write_function(G, pathname=\"graph.dot\"):\n       pass"
      },
      {
        "type": "text",
        "value": "   @open_file(\"pathname\",\"w\")\n   def write_function(G, pathname=\"graph.dot\"):\n       pass"
      },
      {
        "type": "text",
        "value": "   @open_file(\"path\", \"w+\")\n   def another_function(arg, **kwargs):\n       path = kwargs[\"path\"]\n       pass"
      }
    ],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/networkx/utils/decorators.py",
  "item_line": 103,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Parameters",
    "Returns",
    "Examples",
    "Notes"
  ],
  "references": null,
  "see_also": [],
  "signature": {
    "type": "Signature",
    "value": "(path_arg, mode='r')"
  },
  "type": "DocBlob"
}