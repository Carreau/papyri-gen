{
  "aliases": [
    "networkx.community.modularity_max.MappedQueue"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "The min heap uses heapq as well as custom written _siftup and _siftdown methods to allow the heap positions to be tracked by an additional dict keyed by element to position. The smallest element can be popped in O(1) time, new elements can be pushed in O(log n) time, and any element can be removed or updated in O(log n) time. The queue cannot contain duplicate elements and an attempt to push an element already in the queue will have no effect."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "MappedQueue complements the heapq package from the python standard library. While MappedQueue is designed for maximum compatibility with heapq, it adds element removal, lookup, and priority update."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [],
              "param": "data",
              "type": "Param",
              "type_": "dict or iterable"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "The MappedQueue class implements a min-heap with removal and update-priority."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [
      {
        "type": "text",
        "value": "A `MappedQueue` can be created empty, or optionally, given a dictionary\nof initial elements and priorities.  The methods `push`, `pop`,\n`remove`, and `update` operate on the queue."
      },
      {
        "type": "code",
        "value": "colors_nm = {'red':665, 'blue': 470, 'green': 550}\nq = MappedQueue(colors_nm)\nq.remove('red')\nq.update('green', 'violet', 400)\nq.push('indigo', 425)"
      },
      {
        "type": "code",
        "value": "[q.pop().element for i in range(len(q.heap))]"
      },
      {
        "type": "text",
        "value": "A `MappedQueue` can also be initialized with a list or other iterable. The priority is assumed\nto be the sort order of the items in the list."
      },
      {
        "type": "code",
        "value": "q = MappedQueue([916, 50, 4609, 493, 237])\nq.remove(493)\nq.update(237, 1117)\n[q.pop() for i in range(len(q.heap))]"
      },
      {
        "type": "text",
        "value": "An exception is raised if the elements are not comparable."
      },
      {
        "type": "code",
        "value": "q = MappedQueue([100, 'a'])"
      },
      {
        "type": "text",
        "value": "To avoid the exception, use a dictionary to assign priorities to the elements."
      },
      {
        "type": "code",
        "value": "q = MappedQueue({100: 0, 'a': 1 })"
      }
    ],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/networkx/utils/mapped_queue.py",
  "item_line": 92,
  "item_type": "<class 'type'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Examples",
    "References"
  ],
  "references": null,
  "see_also": [],
  "signature": {
    "type": "Signature",
    "value": null
  },
  "type": "DocBlob"
}