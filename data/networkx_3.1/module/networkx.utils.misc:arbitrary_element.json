{
  "aliases": [
    "networkx.chordal.arbitrary_element"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "This is most useful for \"peeking\" at an arbitrary element of a set, but can be used for any list, dictionary, etc., as well."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "This function does not return a "
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "random"
                }
              ],
              "type": "emphasis"
            },
            {
              "type": "text",
              "value": " element. If "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "iterable",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "iterable"
            },
            {
              "type": "text",
              "value": " is ordered, sequential calls will return the same value      "
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": ">>> l = [1, 2, 3]\n>>> nx.utils.arbitrary_element(l)\n1\n>>> nx.utils.arbitrary_element(l)\n1"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Any object that implements "
                    },
                    {
                      "type": "inlineCode",
                      "value": "__iter__"
                    },
                    {
                      "type": "text",
                      "value": ", e.g. set, dict, list, tuple, etc."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "iterable",
              "type": "Param",
              "type_": "`abc.collections.Iterable` instance"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "If "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "iterable",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "iterable"
                    },
                    {
                      "type": "text",
                      "value": " is an iterator (because the current implementation of this function would consume an element from the iterator)."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "",
              "type": "Param",
              "type_": "ValueError"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [
        {
          "children": [
            {
              "desc": [],
              "param": "",
              "type": "Param",
              "type_": "The object that results from ``next(iter(iterable))``"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Returns an arbitrary element of "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "iterable",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "iterable"
            },
            {
              "type": "text",
              "value": " without removing it."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [
      {
        "type": "text",
        "value": "Arbitrary elements from common Iterable objects:"
      },
      {
        "type": "code",
        "value": "nx.utils.arbitrary_element([1, 2, 3])  # list"
      },
      {
        "type": "code",
        "value": "nx.utils.arbitrary_element((1, 2, 3))  # tuple"
      },
      {
        "type": "code",
        "value": "nx.utils.arbitrary_element({1, 2, 3})  # set"
      },
      {
        "type": "code",
        "value": "d = {k: v for k, v in zip([1, 2, 3], [3, 2, 1])}\nnx.utils.arbitrary_element(d)  # dict_keys"
      },
      {
        "type": "code",
        "value": "nx.utils.arbitrary_element(d.values())   # dict values"
      },
      {
        "type": "text",
        "value": "`str` is also an Iterable:"
      },
      {
        "type": "code",
        "value": "nx.utils.arbitrary_element(\"hello\")"
      },
      {
        "type": "text",
        "value": ":exc:`ValueError` is raised if `iterable` is an iterator:"
      },
      {
        "type": "code",
        "value": "iterator = iter([1, 2, 3])  # Iterator, *not* Iterable\nnx.utils.arbitrary_element(iterator)"
      }
    ],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/networkx/utils/misc.py",
  "item_line": 143,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns",
    "Raises",
    "Examples",
    "Notes"
  ],
  "references": null,
  "see_also": [],
  "signature": {
    "type": "Signature",
    "value": "(iterable)"
  },
  "type": "DocBlob"
}