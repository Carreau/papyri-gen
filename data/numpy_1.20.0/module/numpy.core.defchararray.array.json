{
  "_content": {
    "Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Create a "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "chararray"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": "."
                }
              }
            ],
            "inner": []
          }
        }
      ],
      "title": null
    },
    "Extended Summary": {
      "children": [
        {
          "type": "BlockDirective",
          "data": {
            "lines": {
              "_lines": [
                {
                  "_line": ".. note::",
                  "_number": 0,
                  "_offset": 0
                }
              ]
            },
            "wh": {
              "_lines": []
            },
            "ind": {
              "_lines": [
                {
                  "_line": "   This class is provided for numarray backward-compatibility.",
                  "_number": 1,
                  "_offset": 0
                },
                {
                  "_line": "   New code (not concerned with numarray compatibility) should use",
                  "_number": 2,
                  "_offset": 0
                },
                {
                  "_line": "   arrays of type `string_` or `unicode_` and use the free functions",
                  "_number": 3,
                  "_offset": 0
                },
                {
                  "_line": "   in :mod:`numpy.char <numpy.core.defchararray>` for fast",
                  "_number": 4,
                  "_offset": 0
                },
                {
                  "_line": "   vectorized string operations instead.",
                  "_number": 5,
                  "_offset": 0
                },
                {
                  "_line": "",
                  "_number": 6,
                  "_offset": 0
                }
              ]
            },
            "directive_name": "note",
            "args0": [
              ""
            ],
            "inner": {
              "inline": [
                {
                  "type": "Words",
                  "data": {
                    "value": "This class is provided for numarray backward-compatibility. New code (not concerned with numarray compatibility) should use arrays of type "
                  }
                },
                {
                  "type": "Directive",
                  "data": {
                    "value": [
                      "string",
                      "_"
                    ],
                    "domain": null,
                    "role": null
                  }
                },
                {
                  "type": "Words",
                  "data": {
                    "value": " or "
                  }
                },
                {
                  "type": "Directive",
                  "data": {
                    "value": [
                      "unicode",
                      "_"
                    ],
                    "domain": null,
                    "role": null
                  }
                },
                {
                  "type": "Words",
                  "data": {
                    "value": " and use the free functions in "
                  }
                },
                {
                  "type": "Directive",
                  "data": {
                    "value": [
                      "numpy.char",
                      " ",
                      "<numpy.core.defchararray>"
                    ],
                    "domain": null,
                    "role": "mod"
                  }
                },
                {
                  "type": "Words",
                  "data": {
                    "value": " for fast vectorized string operations instead. "
                  }
                }
              ],
              "inner": []
            }
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Versus a regular NumPy array of type "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "str"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " or "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "unicode"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": ", this class adds the following functionality:"
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "DefList",
          "data": {
            "children": [
              {
                "lines": {
                  "_lines": [
                    {
                      "_line": "  1) values automatically have whitespace removed from the end",
                      "_number": 10,
                      "_offset": 2
                    }
                  ]
                },
                "wh": {
                  "_lines": []
                },
                "ind": {
                  "_lines": [
                    {
                      "_line": "     when indexed",
                      "_number": 11,
                      "_offset": 5
                    },
                    {
                      "_line": "",
                      "_number": 12,
                      "_offset": 5
                    }
                  ]
                },
                "dt": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "1) values automatically have whitespace removed from the end"
                      }
                    }
                  ],
                  "inner": []
                },
                "dd": [
                  {
                    "type": "Paragraph",
                    "data": {
                      "inline": [
                        {
                          "type": "Words",
                          "data": {
                            "value": "when indexed "
                          }
                        }
                      ],
                      "inner": []
                    }
                  }
                ]
              },
              {
                "lines": {
                  "_lines": [
                    {
                      "_line": "  2) comparison operators automatically remove whitespace from the",
                      "_number": 13,
                      "_offset": 2
                    }
                  ]
                },
                "wh": {
                  "_lines": []
                },
                "ind": {
                  "_lines": [
                    {
                      "_line": "     end when comparing values",
                      "_number": 14,
                      "_offset": 5
                    },
                    {
                      "_line": "",
                      "_number": 15,
                      "_offset": 5
                    }
                  ]
                },
                "dt": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "2) comparison operators automatically remove whitespace from the"
                      }
                    }
                  ],
                  "inner": []
                },
                "dd": [
                  {
                    "type": "Paragraph",
                    "data": {
                      "inline": [
                        {
                          "type": "Words",
                          "data": {
                            "value": "end when comparing values "
                          }
                        }
                      ],
                      "inner": []
                    }
                  }
                ]
              },
              {
                "lines": {
                  "_lines": [
                    {
                      "_line": "  3) vectorized string operations are provided as methods",
                      "_number": 16,
                      "_offset": 2
                    }
                  ]
                },
                "wh": {
                  "_lines": []
                },
                "ind": {
                  "_lines": [
                    {
                      "_line": "     (e.g. `str.endswith`) and infix operators (e.g. ``+, *, %``)",
                      "_number": 17,
                      "_offset": 5
                    }
                  ]
                },
                "dt": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "3) vectorized string operations are provided as methods"
                      }
                    }
                  ],
                  "inner": []
                },
                "dd": [
                  {
                    "type": "Paragraph",
                    "data": {
                      "inline": [
                        {
                          "type": "Words",
                          "data": {
                            "value": "(e.g. "
                          }
                        },
                        {
                          "type": "Directive",
                          "data": {
                            "value": [
                              "str.endswith"
                            ],
                            "domain": null,
                            "role": null
                          }
                        },
                        {
                          "type": "Words",
                          "data": {
                            "value": ") and infix operators (e.g. "
                          }
                        },
                        {
                          "type": "Verbatim",
                          "data": {
                            "value": [
                              "+,",
                              " ",
                              "*",
                              ",",
                              " ",
                              "%"
                            ]
                          }
                        },
                        {
                          "type": "Words",
                          "data": {
                            "value": ")"
                          }
                        }
                      ],
                      "inner": []
                    }
                  }
                ]
              }
            ]
          }
        }
      ],
      "title": null
    },
    "Parameters": {
      "children": [
        {
          "type": "Param",
          "data": {
            "param": "obj",
            "type_": "array of str or unicode-like",
            "desc": []
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "itemsize",
            "type_": "int, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "itemsize"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " is the number of characters per scalar in the resulting array.  If "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "itemsize"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " is None, and "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "obj"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " is an object array or a Python list, the "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "itemsize"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " will be automatically determined.  If "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "itemsize"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " is provided and "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "obj"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " is of type str or unicode, then the "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "obj"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " string will be chunked into "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "itemsize"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " pieces."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "copy",
            "type_": "bool, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "If true (default), then the object is copied.  Otherwise, a copy will only be made if __array__ returns a copy, if obj is a nested sequence, or if a copy is needed to satisfy any of the other requirements ("
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "itemsize"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ", unicode, "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "order"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ", etc.)."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "unicode",
            "type_": "bool, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "When true, the resulting "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "chararray"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " can contain Unicode characters, when false only 8-bit characters.  If unicode is None and "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "obj"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " is one of the following:"
                      }
                    }
                  ],
                  "inner": []
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "  - a "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "chararray"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ",   - an ndarray of type "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "str"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " or "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "unicode"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": "   - a Python str or unicode object,"
                      }
                    }
                  ],
                  "inner": []
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "then the unicode setting of the output array will be automatically determined."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "order",
            "type_": "{'C', 'F', 'A'}, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Specify the order of the array.  If order is 'C' (default), then the array will be in C-contiguous order (last-index varies the fastest).  If order is 'F', then the returned array will be in Fortran-contiguous order (first-index varies the fastest).  If order is 'A', then the returned array may be in any order (either C-, Fortran-contiguous, or even discontiguous)."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        }
      ],
      "title": null
    },
    "Returns": {
      "children": [],
      "title": null
    },
    "Yields": {
      "children": [],
      "title": null
    },
    "Receives": {
      "children": [],
      "title": null
    },
    "Raises": {
      "children": [],
      "title": null
    },
    "Warns": {
      "children": [],
      "title": null
    },
    "Other Parameters": {
      "children": [],
      "title": null
    },
    "Attributes": {
      "children": [],
      "title": null
    },
    "Methods": {
      "children": [],
      "title": null
    },
    "Notes": {
      "children": [],
      "title": null
    },
    "Warnings": {
      "children": [],
      "title": null
    }
  },
  "refs": [],
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters"
  ],
  "item_file": "/Users/bussonniermatthias/miniconda3/lib/python3.8/site-packages/numpy/core/defchararray.py",
  "item_line": 2613,
  "item_type": "<class 'function'>",
  "aliases": [
    "numpy.char.array"
  ],
  "example_section_data": {
    "children": [],
    "title": null
  },
  "see_also": [],
  "signature": "array(obj, itemsize=None, copy=True, unicode=None, order=None)",
  "references": null,
  "arbitrary": []
}