{
  "_content": {
    "Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "children": [
              {
                "type": "Words",
                "data": {
                  "value": "numerictypes: Define the numeric type objects"
                }
              }
            ]
          }
        }
      ]
    },
    "Extended Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "children": [
              {
                "type": "Words",
                "data": {
                  "value": "This module is designed so \"from numerictypes import \\*\" is safe. Exported symbols include:"
                }
              }
            ]
          }
        },
        {
          "type": "DefList",
          "data": {
            "children": [
              {
                "lines": {
                  "_lines": [
                    {
                      "_line": "  Dictionary with all registered number types (including aliases):",
                      "_number": 3,
                      "_offset": 2
                    }
                  ]
                },
                "wh": {
                  "_lines": []
                },
                "ind": {
                  "_lines": [
                    {
                      "_line": "    typeDict",
                      "_number": 4,
                      "_offset": 4
                    },
                    {
                      "_line": "",
                      "_number": 5,
                      "_offset": 4
                    }
                  ]
                },
                "dt": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Dictionary with all registered number types (including aliases):"
                      }
                    }
                  ]
                },
                "dd": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "typeDict "
                      }
                    }
                  ]
                }
              },
              {
                "lines": {
                  "_lines": [
                    {
                      "_line": "  Type objects (not all will be available, depends on platform):",
                      "_number": 6,
                      "_offset": 2
                    }
                  ]
                },
                "wh": {
                  "_lines": []
                },
                "ind": {
                  "_lines": [
                    {
                      "_line": "      see variable sctypes for which ones you have",
                      "_number": 7,
                      "_offset": 3
                    },
                    {
                      "_line": "",
                      "_number": 8,
                      "_offset": 3
                    },
                    {
                      "_line": "    Bit-width names",
                      "_number": 9,
                      "_offset": 3
                    },
                    {
                      "_line": "",
                      "_number": 10,
                      "_offset": 3
                    },
                    {
                      "_line": "    int8 int16 int32 int64 int128",
                      "_number": 11,
                      "_offset": 3
                    },
                    {
                      "_line": "    uint8 uint16 uint32 uint64 uint128",
                      "_number": 12,
                      "_offset": 3
                    },
                    {
                      "_line": "    float16 float32 float64 float96 float128 float256",
                      "_number": 13,
                      "_offset": 3
                    },
                    {
                      "_line": "    complex32 complex64 complex128 complex192 complex256 complex512",
                      "_number": 14,
                      "_offset": 3
                    },
                    {
                      "_line": "    datetime64 timedelta64",
                      "_number": 15,
                      "_offset": 3
                    },
                    {
                      "_line": "",
                      "_number": 16,
                      "_offset": 3
                    },
                    {
                      "_line": "    c-based names",
                      "_number": 17,
                      "_offset": 3
                    },
                    {
                      "_line": "",
                      "_number": 18,
                      "_offset": 3
                    },
                    {
                      "_line": "    bool_",
                      "_number": 19,
                      "_offset": 3
                    },
                    {
                      "_line": "",
                      "_number": 20,
                      "_offset": 3
                    },
                    {
                      "_line": "    object_",
                      "_number": 21,
                      "_offset": 3
                    },
                    {
                      "_line": "",
                      "_number": 22,
                      "_offset": 3
                    },
                    {
                      "_line": "    void, str_, unicode_",
                      "_number": 23,
                      "_offset": 3
                    },
                    {
                      "_line": "",
                      "_number": 24,
                      "_offset": 3
                    },
                    {
                      "_line": "    byte, ubyte,",
                      "_number": 25,
                      "_offset": 3
                    },
                    {
                      "_line": "    short, ushort",
                      "_number": 26,
                      "_offset": 3
                    },
                    {
                      "_line": "    intc, uintc,",
                      "_number": 27,
                      "_offset": 3
                    },
                    {
                      "_line": "    intp, uintp,",
                      "_number": 28,
                      "_offset": 3
                    },
                    {
                      "_line": "    int_, uint,",
                      "_number": 29,
                      "_offset": 3
                    },
                    {
                      "_line": "    longlong, ulonglong,",
                      "_number": 30,
                      "_offset": 3
                    },
                    {
                      "_line": "",
                      "_number": 31,
                      "_offset": 3
                    },
                    {
                      "_line": "    single, csingle,",
                      "_number": 32,
                      "_offset": 3
                    },
                    {
                      "_line": "    float_, complex_,",
                      "_number": 33,
                      "_offset": 3
                    },
                    {
                      "_line": "    longfloat, clongfloat,",
                      "_number": 34,
                      "_offset": 3
                    },
                    {
                      "_line": "",
                      "_number": 35,
                      "_offset": 3
                    },
                    {
                      "_line": "   As part of the type-hierarchy:    xx -- is bit-width",
                      "_number": 36,
                      "_offset": 3
                    },
                    {
                      "_line": "",
                      "_number": 37,
                      "_offset": 3
                    },
                    {
                      "_line": "   generic",
                      "_number": 38,
                      "_offset": 3
                    },
                    {
                      "_line": "     +-> bool_                                  (kind=b)",
                      "_number": 39,
                      "_offset": 3
                    },
                    {
                      "_line": "     +-> number",
                      "_number": 40,
                      "_offset": 3
                    },
                    {
                      "_line": "     |   +-> integer",
                      "_number": 41,
                      "_offset": 3
                    },
                    {
                      "_line": "     |   |   +-> signedinteger     (intxx)      (kind=i)",
                      "_number": 42,
                      "_offset": 3
                    },
                    {
                      "_line": "     |   |   |     byte",
                      "_number": 43,
                      "_offset": 3
                    },
                    {
                      "_line": "     |   |   |     short",
                      "_number": 44,
                      "_offset": 3
                    },
                    {
                      "_line": "     |   |   |     intc",
                      "_number": 45,
                      "_offset": 3
                    },
                    {
                      "_line": "     |   |   |     intp            int0",
                      "_number": 46,
                      "_offset": 3
                    },
                    {
                      "_line": "     |   |   |     int_",
                      "_number": 47,
                      "_offset": 3
                    },
                    {
                      "_line": "     |   |   |     longlong",
                      "_number": 48,
                      "_offset": 3
                    },
                    {
                      "_line": "     |   |   \\-> unsignedinteger  (uintxx)     (kind=u)",
                      "_number": 49,
                      "_offset": 3
                    },
                    {
                      "_line": "     |   |         ubyte",
                      "_number": 50,
                      "_offset": 3
                    },
                    {
                      "_line": "     |   |         ushort",
                      "_number": 51,
                      "_offset": 3
                    },
                    {
                      "_line": "     |   |         uintc",
                      "_number": 52,
                      "_offset": 3
                    },
                    {
                      "_line": "     |   |         uintp           uint0",
                      "_number": 53,
                      "_offset": 3
                    },
                    {
                      "_line": "     |   |         uint_",
                      "_number": 54,
                      "_offset": 3
                    },
                    {
                      "_line": "     |   |         ulonglong",
                      "_number": 55,
                      "_offset": 3
                    },
                    {
                      "_line": "     |   +-> inexact",
                      "_number": 56,
                      "_offset": 3
                    },
                    {
                      "_line": "     |       +-> floating          (floatxx)    (kind=f)",
                      "_number": 57,
                      "_offset": 3
                    },
                    {
                      "_line": "     |       |     half",
                      "_number": 58,
                      "_offset": 3
                    },
                    {
                      "_line": "     |       |     single",
                      "_number": 59,
                      "_offset": 3
                    },
                    {
                      "_line": "     |       |     float_          (double)",
                      "_number": 60,
                      "_offset": 3
                    },
                    {
                      "_line": "     |       |     longfloat",
                      "_number": 61,
                      "_offset": 3
                    },
                    {
                      "_line": "     |       \\-> complexfloating  (complexxx)  (kind=c)",
                      "_number": 62,
                      "_offset": 3
                    },
                    {
                      "_line": "     |             csingle         (singlecomplex)",
                      "_number": 63,
                      "_offset": 3
                    },
                    {
                      "_line": "     |             complex_        (cfloat, cdouble)",
                      "_number": 64,
                      "_offset": 3
                    },
                    {
                      "_line": "     |             clongfloat      (longcomplex)",
                      "_number": 65,
                      "_offset": 3
                    },
                    {
                      "_line": "     +-> flexible",
                      "_number": 66,
                      "_offset": 3
                    },
                    {
                      "_line": "     |   +-> character",
                      "_number": 67,
                      "_offset": 3
                    },
                    {
                      "_line": "     |   |     str_     (string_, bytes_)       (kind=S)    [Python 2]",
                      "_number": 68,
                      "_offset": 3
                    },
                    {
                      "_line": "     |   |     unicode_                         (kind=U)    [Python 2]",
                      "_number": 69,
                      "_offset": 3
                    },
                    {
                      "_line": "     |   |",
                      "_number": 70,
                      "_offset": 3
                    },
                    {
                      "_line": "     |   |     bytes_   (string_)               (kind=S)    [Python 3]",
                      "_number": 71,
                      "_offset": 3
                    },
                    {
                      "_line": "     |   |     str_     (unicode_)              (kind=U)    [Python 3]",
                      "_number": 72,
                      "_offset": 3
                    },
                    {
                      "_line": "     |   |",
                      "_number": 73,
                      "_offset": 3
                    },
                    {
                      "_line": "     |   \\-> void                              (kind=V)",
                      "_number": 74,
                      "_offset": 3
                    },
                    {
                      "_line": "     \\-> object_ (not used much)               (kind=O)",
                      "_number": 75,
                      "_offset": 3
                    }
                  ]
                },
                "dt": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Type objects (not all will be available, depends on platform):"
                      }
                    }
                  ]
                },
                "dd": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "   see variable sctypes for which ones you have   Bit-width names   int8 int16 int32 int64 int128  uint8 uint16 uint32 uint64 uint128  float16 float32 float64 float96 float128 float256  complex32 complex64 complex128 complex192 complex256 complex512  datetime64 timedelta64   c-based names   bool_   object_   void, str_, unicode_   byte, ubyte,  short, ushort  intc, uintc,  intp, uintp,  int_, uint,  longlong, ulonglong,   single, csingle,  float_, complex_,  longfloat, clongfloat,  As part of the type-hierarchy:    xx -- is bit-width  generic   +-> bool_                                  (kind=b)   +-> number   |   +-> integer   |   |   +-> signedinteger     (intxx)      (kind=i)   |   |   |     byte   |   |   |     short   |   |   |     intc   |   |   |     intp            int0   |   |   |     int_   |   |   |     longlong   |   |   \\-> unsignedinteger  (uintxx)     (kind=u)   |   |         ubyte   |   |         ushort   |   |         uintc   |   |         uintp           uint0   |   |         uint_   |   |         ulonglong   |   +-> inexact   |       +-> floating          (floatxx)    (kind=f)   |       |     half   |       |     single   |       |     float_          (double)   |       |     longfloat   |       \\-> complexfloating  (complexxx)  (kind=c)   |             csingle         (singlecomplex)   |             complex_        (cfloat, cdouble)   |             clongfloat      (longcomplex)   +-> flexible   |   +-> character   |   |     str_     (string_, bytes_)       (kind=S)    [Python 2]   |   |     unicode_                         (kind=U)    [Python 2]   |   |   |   |     bytes_   (string_)               (kind=S)    [Python 3]   |   |     str_     (unicode_)              (kind=U)    [Python 3]   |   |   |   \\-> void                              (kind=V)   \\-> object_ (not used much)               (kind=O)"
                      }
                    }
                  ]
                }
              }
            ]
          }
        }
      ]
    },
    "Parameters": {
      "children": []
    },
    "Returns": {
      "children": []
    },
    "Yields": {
      "children": []
    },
    "Receives": {
      "children": []
    },
    "Raises": {
      "children": []
    },
    "Warns": {
      "children": []
    },
    "Other Parameters": {
      "children": []
    },
    "Attributes": {
      "children": []
    },
    "Methods": {
      "children": []
    },
    "Notes": {
      "children": []
    },
    "Warnings": {
      "children": []
    }
  },
  "refs": [],
  "ordered_sections": [
    "Summary",
    "Extended Summary"
  ],
  "item_file": "/Users/bussonniermatthias/miniconda3/lib/python3.8/site-packages/numpy/core/numerictypes.py",
  "item_line": 0,
  "item_type": "<class 'module'>",
  "aliases": [
    "numpy.core.numerictypes"
  ],
  "example_section_data": {
    "children": []
  },
  "see_also": [],
  "signature": null,
  "references": null
}