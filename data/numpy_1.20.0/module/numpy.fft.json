{
  "_content": {
    "Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Was not able to parse docstring for numpy.fft"
                }
              }
            ],
            "inner": []
          }
        }
      ],
      "title": null
    },
    "Extended Summary": {
      "children": [],
      "title": null
    },
    "Parameters": {
      "children": [],
      "title": null
    },
    "Returns": {
      "children": [],
      "title": null
    },
    "Yields": {
      "children": [],
      "title": null
    },
    "Receives": {
      "children": [],
      "title": null
    },
    "Raises": {
      "children": [],
      "title": null
    },
    "Warns": {
      "children": [],
      "title": null
    },
    "Other Parameters": {
      "children": [],
      "title": null
    },
    "Attributes": {
      "children": [],
      "title": null
    },
    "Methods": {
      "children": [],
      "title": null
    },
    "Notes": {
      "children": [],
      "title": null
    },
    "Warnings": {
      "children": [],
      "title": null
    }
  },
  "refs": [],
  "ordered_sections": [
    "Summary",
    "Extended Summary"
  ],
  "item_file": "/Users/bussonniermatthias/miniconda3/lib/python3.8/site-packages/numpy/fft/__init__.py",
  "item_line": 0,
  "item_type": "<class 'module'>",
  "aliases": [
    "numpy.fft"
  ],
  "example_section_data": {
    "children": [],
    "title": null
  },
  "see_also": [],
  "signature": null,
  "references": null,
  "arbitrary": [
    {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "The SciPy module "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "scipy.fft"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " is a more comprehensive superset of "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "numpy.fft"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " , which includes only a basic set of routines. "
                }
              }
            ],
            "inner": []
          }
        }
      ],
      "title": "Discrete Fourier Transform (:mod:`numpy.fft`)"
    },
    {
      "children": [],
      "title": "Standard FFTs"
    },
    {
      "children": [],
      "title": "Real FFTs"
    },
    {
      "children": [],
      "title": "Hermitian FFTs"
    },
    {
      "children": [],
      "title": "Helper routines"
    },
    {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Fourier analysis is fundamentally a method for expressing a function as a sum of periodic components, and for recovering the function from those components. When both the function and its Fourier transform are replaced with discretized counterparts, it is called the discrete Fourier transform (DFT). The DFT has become a mainstay of numerical computing in part because of a very fast algorithm for computing it, called the Fast Fourier Transform (FFT), which was known to Gauss (1805) and was brought to light in its current form by Cooley and Tukey . Press et al. provide an accessible introduction to Fourier analysis and its applications. "
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Because the discrete Fourier transform separates its input into components that contribute at discrete frequencies, it has a great number of applications in digital signal processing, e.g., for filtering, and in this context the discretized input to the transform is customarily referred to as a , which exists in the . The output is called a or and exists in the . "
                }
              }
            ],
            "inner": []
          }
        }
      ],
      "title": "Background information"
    },
    {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "There are many ways to define the DFT, varying in the sign of the exponent, normalization, etc. In this implementation, the DFT is defined as "
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "The DFT is in general defined for complex inputs and outputs, and a single - frequency component at linear frequency "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "math:`f"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " is represented by a complex exponential "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "math:`a_m = \\exp\\{2\\pi i\\,f m\\Delta t\\}"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " , where "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "math:`\\Delta t"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " is the sampling interval. "
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "The values in the result follow so - called \"standard\" order : If "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "A =\nfft(a, n)"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " , then "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "A[0]"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " contains the zero - frequency term (the sum of the signal), which is always purely real for real inputs. Then "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "A[1:n/2]"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " contains the positive - frequency terms, and "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "A[n/2+1:]"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " contains the negative - frequency terms, in order of decreasingly negative frequency. For an even number of input points, "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "A[n/2]"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " represents both positive and negative Nyquist frequency, and is also purely real for real input. For an odd number of input points, "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "A[(n-1)/2]"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " contains the largest positive frequency, while "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "A[(n+1)/2]"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " contains the largest negative frequency. The routine "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "np.fft.fftfreq(n)"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " returns an array giving the frequencies of corresponding elements in the output. The routine "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "np.fft.fftshift(A)"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " shifts transforms and their frequencies to put the zero - frequency components in the middle, and "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "np.fft.ifftshift(A)"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " undoes that shift. "
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "When the input "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "a"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " is a time - domain signal and "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "A = fft(a)"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " , "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "np.abs(A)"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " is its amplitude spectrum and "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "np.abs(A)**2"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " is its power spectrum. The phase spectrum is obtained by "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "np.angle(A)"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " . "
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "The inverse DFT is defined as "
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "It differs from the forward transform by the sign of the exponential argument and the default normalization by "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "math:`1/n"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " . "
                }
              }
            ],
            "inner": []
          }
        }
      ],
      "title": "Implementation details"
    },
    {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "numpy.fft"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " promotes "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "float32"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " and "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "complex64"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " arrays to "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "float64"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " and "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "complex128"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " arrays respectively. For an FFT implementation that does not promote input arrays, see "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "scipy.fftpack"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " . "
                }
              }
            ],
            "inner": []
          }
        }
      ],
      "title": "Type Promotion"
    },
    {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "The argument "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "norm"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " indicates which direction of the pair of direct/ inverse transforms is scaled and with what normalization factor. The default normalization (``\" backward\" "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    ") has the direct (forward) transforms\nunscaled and the inverse (backward) transforms scaled by :math:`1/n`. It is\npossible to obtain unitary transforms by setting the keyword argument ``norm"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " to "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "\"ortho\""
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " so that both direct and inverse transforms are scaled by "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "math:`1/\\sqrt{n}"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " . Finally, setting the keyword argument "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "norm"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " to "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "\"forward\""
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " has the direct transforms scaled by "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "math:`1/n"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " and the inverse transforms unscaled (i.e. exactly opposite to the default "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "\"backward\""
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " ). "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "None"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " is an alias of the default option "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "\"backward\""
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " for backward compatibility. "
                }
              }
            ],
            "inner": []
          }
        }
      ],
      "title": "Normalization"
    },
    {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "When the input is purely real, its transform is Hermitian, i.e., the component at frequency "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "math:`f_k"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " is the complex conjugate of the component at frequency "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "math:`-f_k"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " , which means that for real inputs there is no information in the negative frequency components that is not already available from the positive frequency components. The family of "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "rfft"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " functions is designed to operate on real inputs, and exploits this symmetry by computing only the positive frequency components, up to and including the Nyquist frequency. Thus, "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "n"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " input points produce "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "n/2+1"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " complex output points. The inverses of this family assumes the same symmetry of its input, and for an output of "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "n"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " points uses "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "n/2+1"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " input points. "
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Correspondingly, when the spectrum is purely real, the signal is Hermitian. The "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "hfft"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " family of functions exploits this symmetry by using "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "n/2+1"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " complex points in the input (time) domain for "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "n"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " real points in the frequency domain. "
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "In higher dimensions, FFTs are used, e.g., for image analysis and filtering. The computational efficiency of the FFT means that it can also be a faster way to compute large convolutions, using the property that a convolution in the time domain is equivalent to a point - by - point multiplication in the frequency domain. "
                }
              }
            ],
            "inner": []
          }
        }
      ],
      "title": "Real and Hermitian transforms"
    },
    {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "In two dimensions, the DFT is defined as "
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "which extends in the obvious way to higher dimensions, and the inverses in higher dimensions also extend in the same way. "
                }
              }
            ],
            "inner": []
          }
        }
      ],
      "title": "Higher dimensions"
    },
    {
      "children": [],
      "title": "References"
    },
    {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "For examples, see the various functions. "
                }
              }
            ],
            "inner": []
          }
        }
      ],
      "title": "Examples"
    }
  ]
}