{
  "_content": {
    "Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "nd",
                    "_",
                    "grid"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " instance which returns a dense multi-dimensional \"meshgrid\"."
                }
              }
            ],
            "inner": []
          }
        }
      ],
      "title": null
    },
    "Extended Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "An instance of "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "numpy.lib.index",
                    "_",
                    "tricks.nd",
                    "_",
                    "grid"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " which returns an dense (or fleshed out) mesh-grid when indexed, so that each returned argument has the same shape.  The dimensions and number of the output arrays are equal to the number of indexing dimensions.  If the step length is not a complex number, then the stop is not inclusive."
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "However, if the step length is a **complex number** (e.g. 5j), then the integer part of its magnitude is interpreted as specifying the number of points to create between the start and stop values, where the stop value **is inclusive**."
                }
              }
            ],
            "inner": []
          }
        }
      ],
      "title": null
    },
    "Parameters": {
      "children": [],
      "title": null
    },
    "Returns": {
      "children": [
        {
          "type": "Param",
          "data": {
            "param": "",
            "type_": "mesh-grid `ndarrays` all of the same dimensions",
            "desc": []
          }
        }
      ],
      "title": null
    },
    "Yields": {
      "children": [],
      "title": null
    },
    "Receives": {
      "children": [],
      "title": null
    },
    "Raises": {
      "children": [],
      "title": null
    },
    "Warns": {
      "children": [],
      "title": null
    },
    "Other Parameters": {
      "children": [],
      "title": null
    },
    "Attributes": {
      "children": [],
      "title": null
    },
    "Methods": {
      "children": [],
      "title": null
    },
    "Notes": {
      "children": [],
      "title": null
    },
    "Warnings": {
      "children": [],
      "title": null
    }
  },
  "refs": [
    "builtins.complex",
    "numpy",
    "numpy.lib.index_tricks.MGridClass",
    "numpy.lib.index_tricks.nd_grid",
    "ogrid",
    "r_"
  ],
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Returns",
    "See Also",
    "Examples"
  ],
  "item_file": "/Users/bussonniermatthias/miniconda3/lib/python3.8/site-packages/numpy/lib/index_tricks.py",
  "item_line": 209,
  "item_type": "<class 'type'>",
  "aliases": [
    "numpy.lib.index_tricks.MGridClass"
  ],
  "example_section_data": {
    "children": [
      {
        "type": "Code",
        "data": {
          "entries": [
            [
              "np",
              "numpy",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "mgrid",
              "numpy.lib.index_tricks.MGridClass",
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "0",
              "",
              "mi"
            ],
            [
              ":",
              "",
              ""
            ],
            [
              "5",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "0",
              "",
              "mi"
            ],
            [
              ":",
              "",
              ""
            ],
            [
              "5",
              "",
              "mi"
            ],
            [
              "]",
              "",
              ""
            ]
          ],
          "out": "array([[[0, 0, 0, 0, 0],\n        [1, 1, 1, 1, 1],\n        [2, 2, 2, 2, 2],\n        [3, 3, 3, 3, 3],\n        [4, 4, 4, 4, 4]],\n       [[0, 1, 2, 3, 4],\n        [0, 1, 2, 3, 4],\n        [0, 1, 2, 3, 4],\n        [0, 1, 2, 3, 4],\n        [0, 1, 2, 3, 4]]])",
          "ce_status": "execed"
        }
      },
      {
        "type": "Code",
        "data": {
          "entries": [
            [
              "np",
              "numpy",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "mgrid",
              "numpy.lib.index_tricks.MGridClass",
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "-",
              "",
              "o"
            ],
            [
              "1",
              "",
              "mi"
            ],
            [
              ":",
              "",
              ""
            ],
            [
              "1",
              "",
              "mi"
            ],
            [
              ":",
              "",
              ""
            ],
            [
              "5",
              "",
              "mi"
            ],
            [
              "j",
              "builtins.complex",
              ""
            ],
            [
              "]",
              "",
              ""
            ]
          ],
          "out": "array([-1. , -0.5,  0. ,  0.5,  1. ])",
          "ce_status": "execed"
        }
      }
    ],
    "title": null
  },
  "see_also": [
    {
      "name": {
        "name": "numpy.lib.index_tricks.nd_grid",
        "ref": null,
        "exists": null
      },
      "descriptions": [
        {
          "inline": [
            {
              "type": "Words",
              "data": {
                "value": "class of "
              }
            },
            {
              "type": "Directive",
              "data": {
                "value": [
                  "ogrid"
                ],
                "domain": null,
                "role": null
              }
            },
            {
              "type": "Words",
              "data": {
                "value": " and "
              }
            },
            {
              "type": "Directive",
              "data": {
                "value": [
                  "mgrid"
                ],
                "domain": null,
                "role": null
              }
            },
            {
              "type": "Words",
              "data": {
                "value": " objects"
              }
            }
          ],
          "inner": []
        }
      ],
      "type": null
    },
    {
      "name": {
        "name": "ogrid",
        "ref": null,
        "exists": null
      },
      "descriptions": [
        {
          "inline": [
            {
              "type": "Words",
              "data": {
                "value": "like mgrid but returns open (not fleshed out) mesh grids"
              }
            }
          ],
          "inner": []
        }
      ],
      "type": null
    },
    {
      "name": {
        "name": "r_",
        "ref": null,
        "exists": null
      },
      "descriptions": [
        {
          "inline": [
            {
              "type": "Words",
              "data": {
                "value": "array concatenator"
              }
            }
          ],
          "inner": []
        }
      ],
      "type": null
    }
  ],
  "signature": "MGridClass()",
  "references": null,
  "arbitrary": []
}