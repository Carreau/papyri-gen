{
  "_content": {
    "Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "children": [
              {
                "type": "Words",
                "data": {
                  "value": "Load data from a text file."
                }
              }
            ]
          }
        }
      ]
    },
    "Extended Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "children": [
              {
                "type": "Words",
                "data": {
                  "value": "Each row in the text file must have the same number of values."
                }
              }
            ]
          }
        }
      ]
    },
    "Parameters": {
      "children": [
        {
          "type": "Param",
          "data": {
            "param": "fname",
            "type_": "file, str, or pathlib.Path",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "File, filename, or generator to read.  If the filename extension is "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          ".gz"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " or "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          ".bz2"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ", the file is first decompressed. Note that generators should return byte strings."
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "dtype",
            "type_": "data-type, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Data-type of the resulting array; default: float.  If this is a structured data-type, the resulting array will be 1-dimensional, and each row will be interpreted as an element of the array.  In this case, the number of columns used must match the number of fields in the data-type."
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "comments",
            "type_": "str or sequence of str, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "The characters or list of characters used to indicate the start of a comment. None implies no comments. For backwards compatibility, byte strings will be decoded as 'latin1'. The default is '#'."
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "delimiter",
            "type_": "str, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "The string used to separate values. For backwards compatibility, byte strings will be decoded as 'latin1'. The default is whitespace."
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "converters",
            "type_": "dict, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "A dictionary mapping column number to a function that will parse the column string into the desired value.  E.g., if column 0 is a date string: "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "converters",
                          " ",
                          "=",
                          " ",
                          "{0",
                          ":",
                          " ",
                          "datestr2num}"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ".  Converters can also be used to provide a default value for missing data (but see also "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "genfromtxt"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": "): "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "converters",
                          " ",
                          "=",
                          " ",
                          "{3",
                          ":",
                          " ",
                          "lambda",
                          " ",
                          "s",
                          ":",
                          " ",
                          "float(s.strip()",
                          " ",
                          "or",
                          " ",
                          "0)}"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ". Default: None."
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "skiprows",
            "type_": "int, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Skip the first "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "skiprows"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " lines, including comments; default: 0."
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "usecols",
            "type_": "int or sequence, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Which columns to read, with 0 being the first. For example, "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "usecols",
                          " ",
                          "=",
                          " ",
                          "(1,4,5)"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " will extract the 2nd, 5th and 6th columns. The default, None, results in all columns being read."
                      }
                    }
                  ]
                }
              },
              {
                "type": "BlockDirective",
                "data": {
                  "lines": {
                    "_lines": [
                      {
                        "_line": ".. versionchanged:: 1.11.0",
                        "_number": 4,
                        "_offset": 0
                      }
                    ]
                  },
                  "wh": {
                    "_lines": []
                  },
                  "ind": {
                    "_lines": [
                      {
                        "_line": "    When a single column has to be read it is possible to use",
                        "_number": 5,
                        "_offset": 0
                      },
                      {
                        "_line": "    an integer instead of a tuple. E.g ``usecols = 3`` reads the",
                        "_number": 6,
                        "_offset": 0
                      },
                      {
                        "_line": "    fourth column the same way as ``usecols = (3,)`` would.",
                        "_number": 7,
                        "_offset": 0
                      }
                    ]
                  },
                  "directive_name": "versionchanged",
                  "args0": [
                    " 1.11.0"
                  ],
                  "inner": {
                    "children": [
                      {
                        "type": "Words",
                        "data": {
                          "value": "When a single column has to be read it is possible to use an integer instead of a tuple. E.g "
                        }
                      },
                      {
                        "type": "Verbatim",
                        "data": {
                          "value": [
                            "usecols",
                            " ",
                            "=",
                            " ",
                            "3"
                          ]
                        }
                      },
                      {
                        "type": "Words",
                        "data": {
                          "value": " reads the fourth column the same way as "
                        }
                      },
                      {
                        "type": "Verbatim",
                        "data": {
                          "value": [
                            "usecols",
                            " ",
                            "=",
                            " ",
                            "(3,)"
                          ]
                        }
                      },
                      {
                        "type": "Words",
                        "data": {
                          "value": " would."
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "unpack",
            "type_": "bool, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "If True, the returned array is transposed, so that arguments may be unpacked using "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "x,",
                          " ",
                          "y,",
                          " ",
                          "z",
                          " ",
                          "=",
                          " ",
                          "loadtxt(...)"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ".  When used with a structured data-type, arrays are returned for each field. Default is False."
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "ndmin",
            "type_": "int, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "The returned array will have at least "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "ndmin"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " dimensions. Otherwise mono-dimensional axes will be squeezed. Legal values: 0 (default), 1 or 2."
                      }
                    }
                  ]
                }
              },
              {
                "type": "BlockDirective",
                "data": {
                  "lines": {
                    "_lines": [
                      {
                        "_line": ".. versionadded:: 1.6.0",
                        "_number": 4,
                        "_offset": 0
                      }
                    ]
                  },
                  "wh": {
                    "_lines": []
                  },
                  "ind": {
                    "_lines": []
                  },
                  "directive_name": "versionadded",
                  "args0": [
                    " 1.6.0"
                  ],
                  "inner": null
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "encoding",
            "type_": "str, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Encoding used to decode the inputfile. Does not apply to input streams. The special value 'bytes' enables backward compatibility workarounds that ensures you receive byte arrays as results if possible and passes 'latin1' encoded strings to converters. Override this value to receive unicode arrays and pass strings as input to converters.  If set to None the system default is used. The default value is 'bytes'."
                      }
                    }
                  ]
                }
              },
              {
                "type": "BlockDirective",
                "data": {
                  "lines": {
                    "_lines": [
                      {
                        "_line": ".. versionadded:: 1.14.0",
                        "_number": 7,
                        "_offset": 0
                      }
                    ]
                  },
                  "wh": {
                    "_lines": []
                  },
                  "ind": {
                    "_lines": []
                  },
                  "directive_name": "versionadded",
                  "args0": [
                    " 1.14.0"
                  ],
                  "inner": null
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "max_rows",
            "type_": "int, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Read "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "max",
                          "_",
                          "rows"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " lines of content after "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "skiprows"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " lines. The default is to read all the lines."
                      }
                    }
                  ]
                }
              },
              {
                "type": "BlockDirective",
                "data": {
                  "lines": {
                    "_lines": [
                      {
                        "_line": ".. versionadded:: 1.16.0",
                        "_number": 3,
                        "_offset": 0
                      }
                    ]
                  },
                  "wh": {
                    "_lines": []
                  },
                  "ind": {
                    "_lines": []
                  },
                  "directive_name": "versionadded",
                  "args0": [
                    " 1.16.0"
                  ],
                  "inner": null
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "like",
            "type_": "array_like",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Reference object to allow the creation of arrays which are not NumPy arrays. If an array-like passed in as "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "like"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " supports the "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "_",
                          "_",
                          "array",
                          "_",
                          "function",
                          "_",
                          "_"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " protocol, the result will be defined by it. In this case, it ensures the creation of an array object compatible with that passed in via this argument."
                      }
                    }
                  ]
                }
              },
              {
                "type": "BlockDirective",
                "data": {
                  "lines": {
                    "_lines": [
                      {
                        "_line": ".. note::",
                        "_number": 6,
                        "_offset": 0
                      }
                    ]
                  },
                  "wh": {
                    "_lines": []
                  },
                  "ind": {
                    "_lines": [
                      {
                        "_line": "    The ``like`` keyword is an experimental feature pending on",
                        "_number": 7,
                        "_offset": 0
                      },
                      {
                        "_line": "    acceptance of :ref:`NEP 35 <NEP35>`.",
                        "_number": 8,
                        "_offset": 0
                      },
                      {
                        "_line": "",
                        "_number": 9,
                        "_offset": 0
                      }
                    ]
                  },
                  "directive_name": "note",
                  "args0": [
                    ""
                  ],
                  "inner": {
                    "children": [
                      {
                        "type": "Words",
                        "data": {
                          "value": "The "
                        }
                      },
                      {
                        "type": "Verbatim",
                        "data": {
                          "value": [
                            "like"
                          ]
                        }
                      },
                      {
                        "type": "Words",
                        "data": {
                          "value": " keyword is an experimental feature pending on acceptance of "
                        }
                      },
                      {
                        "type": "Directive",
                        "data": {
                          "value": [
                            "NEP",
                            " ",
                            "35",
                            " ",
                            "<NEP35>"
                          ],
                          "domain": null,
                          "role": "ref"
                        }
                      },
                      {
                        "type": "Words",
                        "data": {
                          "value": ". "
                        }
                      }
                    ]
                  }
                }
              },
              {
                "type": "BlockDirective",
                "data": {
                  "lines": {
                    "_lines": [
                      {
                        "_line": ".. versionadded:: 1.20.0",
                        "_number": 10,
                        "_offset": 0
                      }
                    ]
                  },
                  "wh": {
                    "_lines": []
                  },
                  "ind": {
                    "_lines": []
                  },
                  "directive_name": "versionadded",
                  "args0": [
                    " 1.20.0"
                  ],
                  "inner": null
                }
              }
            ]
          }
        }
      ]
    },
    "Returns": {
      "children": [
        {
          "type": "Param",
          "data": {
            "param": "out",
            "type_": "ndarray",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Data read from the text file."
                      }
                    }
                  ]
                }
              }
            ]
          }
        }
      ]
    },
    "Yields": {
      "children": []
    },
    "Receives": {
      "children": []
    },
    "Raises": {
      "children": []
    },
    "Warns": {
      "children": []
    },
    "Other Parameters": {
      "children": []
    },
    "Attributes": {
      "children": []
    },
    "Methods": {
      "children": []
    },
    "Notes": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "children": [
              {
                "type": "Words",
                "data": {
                  "value": "This function aims to be a fast reader for simply formatted files.  The "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "genfromtxt"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " function provides more sophisticated handling of, e.g., lines with missing values."
                }
              }
            ]
          }
        },
        {
          "type": "BlockDirective",
          "data": {
            "lines": {
              "_lines": [
                {
                  "_line": ".. versionadded:: 1.10.0",
                  "_number": 4,
                  "_offset": 0
                }
              ]
            },
            "wh": {
              "_lines": [
                {
                  "_line": "",
                  "_number": 5,
                  "_offset": 0
                }
              ]
            },
            "ind": {
              "_lines": []
            },
            "directive_name": "versionadded",
            "args0": [
              " 1.10.0"
            ],
            "inner": null
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "children": [
              {
                "type": "Words",
                "data": {
                  "value": "The strings produced by the Python float.hex method can be used as input for floats."
                }
              }
            ]
          }
        }
      ]
    },
    "Warnings": {
      "children": []
    }
  },
  "refs": [
    "__main__.conv",
    "builtins.bytes",
    "builtins.float",
    "fromregex",
    "fromstring",
    "genfromtxt",
    "io",
    "_io.StringIO",
    "load",
    "numpy",
    "numpy.loadtxt",
    "numpy.ndarray",
    "scipy.io.matlab.mio.loadmat"
  ],
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns",
    "See Also",
    "Notes",
    "Examples"
  ],
  "item_file": "/Users/bussonniermatthias/miniconda3/lib/python3.8/site-packages/numpy/lib/npyio.py",
  "item_line": 769,
  "item_type": "<class 'function'>",
  "aliases": [
    "numpy.loadtxt",
    "numpy.lib.npyio._loadtxt_with_like",
    "numpy.lib.npyio.loadtxt"
  ],
  "example_section_data": {
    "children": [
      {
        "type": "Code",
        "data": {
          "entries": [
            [
              "from",
              null,
              "kn"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "io",
              "io",
              "nn"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "import",
              null,
              "kn"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "StringIO",
              "io.StringIO",
              ""
            ],
            [
              "  ",
              "",
              ""
            ],
            [
              "# StringIO behaves like a file object",
              "",
              "c1"
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "c",
              "io.StringIO",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "StringIO",
              "io.StringIO",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              "0 1",
              "",
              "s2"
            ],
            [
              "\\n",
              "",
              "se"
            ],
            [
              "2 3",
              "",
              "s2"
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "np",
              "numpy",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "loadtxt",
              "numpy.loadtxt",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "c",
              "io.StringIO",
              ""
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": "array([[0., 1.],\n       [2., 3.]])",
          "ce_status": "execed"
        }
      },
      {
        "type": "Code",
        "data": {
          "entries": [
            [
              "d",
              "io.StringIO",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "StringIO",
              "io.StringIO",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              "M 21 72",
              "",
              "s2"
            ],
            [
              "\\n",
              "",
              "se"
            ],
            [
              "F 35 58",
              "",
              "s2"
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "np",
              "numpy",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "loadtxt",
              "numpy.loadtxt",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "    ",
              "",
              ""
            ],
            [
              "d",
              "io.StringIO",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "dtype",
              null,
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "{",
              "",
              ""
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              "names",
              null,
              "s2"
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              ":",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              "gender",
              null,
              "s2"
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              "age",
              null,
              "s2"
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              "weight",
              null,
              "s2"
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              ")",
              "",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              "formats",
              null,
              "s2"
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              ":",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              "S1",
              null,
              "s2"
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              "i4",
              null,
              "s2"
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              "f4",
              null,
              "s2"
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "}",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": "array([(b'M', 21, 72.), (b'F', 35, 58.)],\n      dtype=[('gender', 'S1'), ('age', '<i4'), ('weight', '<f4')])",
          "ce_status": "execed"
        }
      },
      {
        "type": "Code",
        "data": {
          "entries": [
            [
              "c",
              "io.StringIO",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "StringIO",
              "io.StringIO",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              "1,0,2",
              "",
              "s2"
            ],
            [
              "\\n",
              "",
              "se"
            ],
            [
              "3,0,4",
              "",
              "s2"
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "x",
              null,
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "y",
              null,
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "np",
              "numpy",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "loadtxt",
              "numpy.loadtxt",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "c",
              "io.StringIO",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "delimiter",
              null,
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              ",",
              "",
              "s2"
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "usecols",
              null,
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "0",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "2",
              "",
              "mi"
            ],
            [
              ")",
              "",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "unpack",
              null,
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "True",
              null,
              "kc"
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "x",
              "numpy.ndarray",
              ""
            ]
          ],
          "out": "array([1., 3.])",
          "ce_status": "execed"
        }
      },
      {
        "type": "Code",
        "data": {
          "entries": [
            [
              "y",
              "numpy.ndarray",
              ""
            ]
          ],
          "out": "array([2., 4.])",
          "ce_status": "execed"
        }
      },
      {
        "type": "Paragraph",
        "data": {
          "children": [
            {
              "type": "Words",
              "data": {
                "value": "This example shows how "
              }
            },
            {
              "type": "Directive",
              "data": {
                "value": [
                  "converters"
                ],
                "domain": null,
                "role": null
              }
            },
            {
              "type": "Words",
              "data": {
                "value": " can be used to convert a field with a trailing minus sign into a negative number."
              }
            }
          ]
        }
      },
      {
        "type": "Code",
        "data": {
          "entries": [
            [
              "s",
              "io.StringIO",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "StringIO",
              "io.StringIO",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              "10.01 31.25-",
              "",
              "s2"
            ],
            [
              "\\n",
              "",
              "se"
            ],
            [
              "19.22 64.31",
              "",
              "s2"
            ],
            [
              "\\n",
              "",
              "se"
            ],
            [
              "17.57- 63.94",
              "",
              "s2"
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "def",
              null,
              "k"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "conv",
              "__main__.conv",
              "nf"
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "fld",
              null,
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              ":",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "    ",
              "",
              ""
            ],
            [
              "return",
              null,
              "k"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "-",
              "",
              "o"
            ],
            [
              "float",
              "builtins.float",
              "nb"
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "fld",
              null,
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              ":",
              "",
              ""
            ],
            [
              "-",
              "",
              "o"
            ],
            [
              "1",
              "",
              "mi"
            ],
            [
              "]",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "if",
              null,
              "k"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "fld",
              null,
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "endswith",
              null,
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "b",
              "builtins.bytes",
              "sa"
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              "-",
              "",
              "s2"
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              ")",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "else",
              null,
              "k"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "float",
              "builtins.float",
              "nb"
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "fld",
              null,
              ""
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": "...",
          "ce_status": "execed"
        }
      },
      {
        "type": "Code",
        "data": {
          "entries": [
            [
              "np",
              "numpy",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "loadtxt",
              "numpy.loadtxt",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "s",
              "io.StringIO",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "converters",
              null,
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "{",
              "",
              ""
            ],
            [
              "0",
              "",
              "mi"
            ],
            [
              ":",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "conv",
              "__main__.conv",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "1",
              "",
              "mi"
            ],
            [
              ":",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "conv",
              "__main__.conv",
              ""
            ],
            [
              "}",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": "array([[ 10.01, -31.25],\n       [ 19.22,  64.31],\n       [-17.57,  63.94]])",
          "ce_status": "execed"
        }
      }
    ]
  },
  "see_also": [
    {
      "name": {
        "name": "load",
        "ref": null,
        "exists": null
      },
      "descriptions": [],
      "type": null
    },
    {
      "name": {
        "name": "fromstring",
        "ref": null,
        "exists": null
      },
      "descriptions": [],
      "type": null
    },
    {
      "name": {
        "name": "fromregex",
        "ref": null,
        "exists": null
      },
      "descriptions": [],
      "type": null
    },
    {
      "name": {
        "name": "genfromtxt",
        "ref": null,
        "exists": null
      },
      "descriptions": [
        {
          "children": [
            {
              "type": "Words",
              "data": {
                "value": "Load data with missing values handled as specified."
              }
            }
          ]
        }
      ],
      "type": null
    },
    {
      "name": {
        "name": "scipy.io.loadmat",
        "ref": null,
        "exists": null
      },
      "descriptions": [
        {
          "children": [
            {
              "type": "Words",
              "data": {
                "value": "reads MATLAB data files"
              }
            }
          ]
        }
      ],
      "type": null
    }
  ],
  "signature": "loadtxt(fname, dtype=<class 'float'>, comments='#', delimiter=None, converters=None, skiprows=0, usecols=None, unpack=False, ndmin=0, encoding='bytes', max_rows=None, *, like=None)",
  "references": null
}