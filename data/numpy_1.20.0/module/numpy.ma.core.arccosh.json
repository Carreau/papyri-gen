{
  "_content": {
    "Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Inverse hyperbolic cosine, element-wise."
                }
              }
            ],
            "inner": []
          }
        }
      ],
      "title": null
    },
    "Extended Summary": {
      "children": [],
      "title": null
    },
    "Parameters": {
      "children": [
        {
          "type": "Param",
          "data": {
            "param": "x",
            "type_": "array_like",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Input array."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "out",
            "type_": "ndarray, None, or tuple of ndarray and None, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "A location into which the result is stored. If provided, it must have a shape that the inputs broadcast to. If not provided or None, a freshly-allocated array is returned. A tuple (possible only as a keyword argument) must have length equal to the number of outputs."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "where",
            "type_": "array_like, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "This condition is broadcast over the input. At locations where the condition is True, the "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "out"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " array will be set to the ufunc result. Elsewhere, the "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "out"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " array will retain its original value. Note that if an uninitialized "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "out"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " array is created via the default "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "out=None"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ", locations within it where the condition is False will remain uninitialized."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "**kwargs",
            "type_": "",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "For other keyword-only arguments, see the "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "ufunc",
                          " ",
                          "docs",
                          " ",
                          "<ufuncs.kwargs>"
                        ],
                        "domain": null,
                        "role": "ref"
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": "."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        }
      ],
      "title": null
    },
    "Returns": {
      "children": [
        {
          "type": "Param",
          "data": {
            "param": "arccosh",
            "type_": "ndarray",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Array of the same shape as "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "x"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ". This is a scalar if "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "x"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " is a scalar."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        }
      ],
      "title": null
    },
    "Yields": {
      "children": [],
      "title": null
    },
    "Receives": {
      "children": [],
      "title": null
    },
    "Raises": {
      "children": [],
      "title": null
    },
    "Warns": {
      "children": [],
      "title": null
    },
    "Other Parameters": {
      "children": [],
      "title": null
    },
    "Attributes": {
      "children": [],
      "title": null
    },
    "Methods": {
      "children": [],
      "title": null
    },
    "Notes": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "arccosh"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " is a multivalued function: for each "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "x"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " there are infinitely many numbers "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "z"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " such that "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "cosh(z)",
                    " ",
                    "=",
                    " ",
                    "x"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": ". The convention is to return the "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "z"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " whose imaginary part lies in "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "[-pi,",
                    " ",
                    "pi]"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " and the real part in "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "[0,",
                    " ",
                    "inf]"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": "."
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "For real-valued input data types, "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "arccosh"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " always returns real output. For each value that cannot be expressed as a real number or infinity, it yields "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "nan"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " and sets the "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "invalid"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " floating point error flag."
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "For complex-valued input, "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "arccosh"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " is a complex analytical function that has a branch cut "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "[-inf,",
                    " ",
                    "1]"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " and is continuous from above on it."
                }
              }
            ],
            "inner": []
          }
        }
      ],
      "title": null
    },
    "Warnings": {
      "children": [],
      "title": null
    }
  },
  "refs": [
    "arcsinh",
    "arctanh",
    "builtins.float",
    "cosh",
    "numpy",
    "numpy.ufunc",
    "sinh",
    "tanh"
  ],
  "ordered_sections": [
    "Signature",
    "Summary",
    "Parameters",
    "Returns",
    "See Also",
    "Notes",
    "References",
    "Examples"
  ],
  "item_file": null,
  "item_line": null,
  "item_type": null,
  "aliases": [
    "numpy.ma.arccosh"
  ],
  "example_section_data": {
    "children": [
      {
        "type": "Code",
        "data": {
          "entries": [
            [
              "np",
              "numpy",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "arccosh",
              "numpy.ufunc",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "np",
              "numpy",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "e",
              "builtins.float",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "10.0",
              "",
              "mf"
            ],
            [
              "]",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": "array([ 1.65745445,  2.99322285])",
          "ce_status": "compiled"
        }
      },
      {
        "type": "Code",
        "data": {
          "entries": [
            [
              "np",
              "numpy",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "arccosh",
              "numpy.ufunc",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "1",
              "",
              "mi"
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": "0.0",
          "ce_status": "compiled"
        }
      }
    ],
    "title": null
  },
  "see_also": [
    {
      "name": {
        "name": "cosh",
        "ref": null,
        "exists": null
      },
      "descriptions": [],
      "type": null
    },
    {
      "name": {
        "name": "arcsinh",
        "ref": null,
        "exists": null
      },
      "descriptions": [],
      "type": null
    },
    {
      "name": {
        "name": "sinh",
        "ref": null,
        "exists": null
      },
      "descriptions": [],
      "type": null
    },
    {
      "name": {
        "name": "arctanh",
        "ref": null,
        "exists": null
      },
      "descriptions": [],
      "type": null
    },
    {
      "name": {
        "name": "tanh",
        "ref": null,
        "exists": null
      },
      "descriptions": [],
      "type": null
    }
  ],
  "signature": "arccosh(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])",
  "references": [
    ".. [1] M. Abramowitz and I.A. Stegun, \"Handbook of Mathematical Functions\",",
    "       10th printing, 1964, pp. 86. http://www.math.sfu.ca/~cbm/aands/",
    ".. [2] Wikipedia, \"Inverse hyperbolic function\",",
    "       https://en.wikipedia.org/wiki/Arccosh"
  ],
  "arbitrary": []
}