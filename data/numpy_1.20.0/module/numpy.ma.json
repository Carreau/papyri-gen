{
  "_content": {
    "Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "============= Masked Arrays ============="
                }
              }
            ],
            "inner": []
          }
        }
      ],
      "title": null
    },
    "Extended Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Arrays sometimes contain invalid or missing data.  When doing operations on such arrays, we wish to suppress invalid values, which is the purpose masked arrays fulfill (an example of typical use is given below)."
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "For example, examine the following array:"
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Example",
          "data": {
            "lines": {
              "_lines": [
                {
                  "_line": ">>> x = np.array([2, 1, 3, np.nan, 5, 2, 3, np.nan])",
                  "_number": 6,
                  "_offset": 0
                }
              ]
            },
            "wh": {
              "_lines": [
                {
                  "_line": "",
                  "_number": 7,
                  "_offset": 0
                }
              ]
            },
            "ind": {
              "_lines": []
            }
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "When we try to calculate the mean of the data, the result is undetermined:"
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Example",
          "data": {
            "lines": {
              "_lines": [
                {
                  "_line": ">>> np.mean(x)",
                  "_number": 10,
                  "_offset": 0
                },
                {
                  "_line": "nan",
                  "_number": 11,
                  "_offset": 0
                }
              ]
            },
            "wh": {
              "_lines": [
                {
                  "_line": "",
                  "_number": 12,
                  "_offset": 0
                }
              ]
            },
            "ind": {
              "_lines": []
            }
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "The mean is calculated using roughly "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "np.sum(x)/len(x)"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": ", but since any number added to "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "NaN"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " [1]_ produces "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "NaN"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": ", this doesn't work.  Enter masked arrays:"
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Example",
          "data": {
            "lines": {
              "_lines": [
                {
                  "_line": ">>> m = np.ma.masked_array(x, np.isnan(x))",
                  "_number": 17,
                  "_offset": 0
                },
                {
                  "_line": ">>> m",
                  "_number": 18,
                  "_offset": 0
                },
                {
                  "_line": "masked_array(data = [2.0 1.0 3.0 -- 5.0 2.0 3.0 --],",
                  "_number": 19,
                  "_offset": 0
                }
              ]
            },
            "wh": {
              "_lines": []
            },
            "ind": {
              "_lines": [
                {
                  "_line": "      mask = [False False False  True False False False  True],",
                  "_number": 20,
                  "_offset": 0
                },
                {
                  "_line": "      fill_value=1e+20)",
                  "_number": 21,
                  "_offset": 0
                },
                {
                  "_line": "",
                  "_number": 22,
                  "_offset": 0
                }
              ]
            }
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Here, we construct a masked array that suppress all "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "NaN"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " values.  We may now proceed to calculate the mean of the other values:"
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Example",
          "data": {
            "lines": {
              "_lines": [
                {
                  "_line": ">>> np.mean(m)",
                  "_number": 26,
                  "_offset": 0
                },
                {
                  "_line": "2.6666666666666665",
                  "_number": 27,
                  "_offset": 0
                }
              ]
            },
            "wh": {
              "_lines": [
                {
                  "_line": "",
                  "_number": 28,
                  "_offset": 0
                }
              ]
            },
            "ind": {
              "_lines": []
            }
          }
        },
        {
          "type": "BlockDirective",
          "data": {
            "lines": {
              "_lines": [
                {
                  "_line": ".. moduleauthor:: Pierre Gerard-Marchant",
                  "_number": 32,
                  "_offset": 0
                },
                {
                  "_line": ".. moduleauthor:: Jarrod Millman",
                  "_number": 33,
                  "_offset": 0
                }
              ]
            },
            "wh": {
              "_lines": []
            },
            "ind": {
              "_lines": []
            },
            "directive_name": "moduleauthor",
            "args0": [
              " Pierre Gerard-Marchant"
            ],
            "inner": null
          }
        },
        {
          "type": "DefList",
          "data": {
            "children": [
              {
                "lines": {
                  "_lines": [
                    {
                      "_line": ".. [1] Not-a-Number, a floating point value that is the result of an",
                      "_number": 29,
                      "_offset": 0
                    }
                  ]
                },
                "wh": {
                  "_lines": []
                },
                "ind": {
                  "_lines": [
                    {
                      "_line": "       invalid operation.",
                      "_number": 30,
                      "_offset": 7
                    },
                    {
                      "_line": "",
                      "_number": 31,
                      "_offset": 7
                    }
                  ]
                },
                "dt": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": ".. [1] Not-a-Number, a floating point value that is the result of an"
                      }
                    }
                  ],
                  "inner": []
                },
                "dd": [
                  {
                    "type": "Paragraph",
                    "data": {
                      "inline": [
                        {
                          "type": "Words",
                          "data": {
                            "value": "invalid operation. "
                          }
                        }
                      ],
                      "inner": []
                    }
                  }
                ]
              }
            ]
          }
        }
      ],
      "title": null
    },
    "Parameters": {
      "children": [],
      "title": null
    },
    "Returns": {
      "children": [],
      "title": null
    },
    "Yields": {
      "children": [],
      "title": null
    },
    "Receives": {
      "children": [],
      "title": null
    },
    "Raises": {
      "children": [],
      "title": null
    },
    "Warns": {
      "children": [],
      "title": null
    },
    "Other Parameters": {
      "children": [],
      "title": null
    },
    "Attributes": {
      "children": [],
      "title": null
    },
    "Methods": {
      "children": [],
      "title": null
    },
    "Notes": {
      "children": [],
      "title": null
    },
    "Warnings": {
      "children": [],
      "title": null
    }
  },
  "refs": [],
  "ordered_sections": [
    "Summary",
    "Extended Summary"
  ],
  "item_file": "/Users/bussonniermatthias/miniconda3/lib/python3.8/site-packages/numpy/ma/__init__.py",
  "item_line": 0,
  "item_type": "<class 'module'>",
  "aliases": [
    "numpy.ma"
  ],
  "example_section_data": {
    "children": [],
    "title": null
  },
  "see_also": [],
  "signature": null,
  "references": null,
  "arbitrary": [
    {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Arrays sometimes contain invalid or missing data. When doing operations on such arrays, we wish to suppress invalid values, which is the purpose masked arrays fulfill (an example of typical use is given below). "
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "For example, examine the following array : "
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "When we try to calculate the mean of the data, the result is undetermined : "
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "The mean is calculated using roughly "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "np.sum(x)/len(x)"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " , but since any number added to "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "NaN"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " produces "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "NaN"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " , this doesn' t work. Enter masked arrays : "
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Here, we construct a masked array that suppress all "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "NaN"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " values. We may now proceed to calculate the mean of the other values : "
                }
              }
            ],
            "inner": []
          }
        }
      ],
      "title": "Masked Arrays"
    }
  ]
}