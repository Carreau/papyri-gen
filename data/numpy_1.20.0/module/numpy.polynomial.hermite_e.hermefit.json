{
  "_content": {
    "Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "children": [
              {
                "type": "Words",
                "data": {
                  "value": "Least squares fit of Hermite series to data."
                }
              }
            ]
          }
        }
      ]
    },
    "Extended Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "children": [
              {
                "type": "Words",
                "data": {
                  "value": "Return the coefficients of a HermiteE series of degree "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "deg"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " that is the least squares fit to the data values "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "y"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " given at points "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "x"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": ". If "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "y"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " is 1-D the returned coefficients will also be 1-D. If "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "y"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " is 2-D multiple fits are done, one for each column of "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "y"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": ", and the resulting coefficients are stored in the corresponding columns of a 2-D return. The fitted polynomial(s) are in the form"
                }
              }
            ]
          }
        },
        {
          "type": "BlockDirective",
          "data": {
            "lines": {
              "_lines": [
                {
                  "_line": ".. math::  p(x) = c_0 + c_1 * He_1(x) + ... + c_n * He_n(x),",
                  "_number": 7,
                  "_offset": 0
                }
              ]
            },
            "wh": {
              "_lines": [
                {
                  "_line": "",
                  "_number": 8,
                  "_offset": 0
                }
              ]
            },
            "ind": {
              "_lines": []
            },
            "directive_name": "math",
            "args0": [
              "  p(x) = c_0 + c_1 * He_1(x) + ... + c_n * He_n(x),"
            ],
            "inner": null
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "children": [
              {
                "type": "Words",
                "data": {
                  "value": "where "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "n"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " is "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "deg"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": "."
                }
              }
            ]
          }
        }
      ]
    },
    "Parameters": {
      "children": [
        {
          "type": "Param",
          "data": {
            "param": "x",
            "type_": "array_like, shape (M,)",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "x-coordinates of the M sample points "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "(x[i],",
                          " ",
                          "y[i])"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": "."
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "y",
            "type_": "array_like, shape (M,) or (M, K)",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "y-coordinates of the sample points. Several data sets of sample points sharing the same x-coordinates can be fitted at once by passing in a 2D-array that contains one dataset per column."
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "deg",
            "type_": "int or 1-D array_like",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Degree(s) of the fitting polynomials. If "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "deg"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " is a single integer all terms up to and including the "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "deg"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": "'th term are included in the fit. For NumPy versions >= 1.11.0 a list of integers specifying the degrees of the terms to include may be used instead."
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "rcond",
            "type_": "float, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Relative condition number of the fit. Singular values smaller than this relative to the largest singular value will be ignored. The default value is len(x)*eps, where eps is the relative precision of the float type, about 2e-16 in most cases."
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "full",
            "type_": "bool, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Switch determining nature of return value. When it is False (the default) just the coefficients are returned, when True diagnostic information from the singular value decomposition is also returned."
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "w",
            "type_": "array_like, shape (`M`,), optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Weights. If not None, the contribution of each point "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "(x[i],y[i])"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " to the fit is weighted by "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "w[i]"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ". Ideally the weights are chosen so that the errors of the products "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "w[i]",
                          "*",
                          "y[i]"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " all have the same variance.  The default value is None."
                      }
                    }
                  ]
                }
              }
            ]
          }
        }
      ]
    },
    "Returns": {
      "children": [
        {
          "type": "Param",
          "data": {
            "param": "coef",
            "type_": "ndarray, shape (M,) or (M, K)",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Hermite coefficients ordered from low to high. If "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "y"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " was 2-D, the coefficients for the data in column k  of "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "y"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " are in column "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "k"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": "."
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "[residuals, rank, singular_values, rcond]",
            "type_": "list",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "These values are only returned if "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "full"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " = True"
                      }
                    }
                  ]
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "resid -- sum of squared residuals of the least squares fit rank -- the numerical rank of the scaled Vandermonde matrix sv -- singular values of the scaled Vandermonde matrix rcond -- value of "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "rcond"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": "."
                      }
                    }
                  ]
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "For more details, see "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "numpy.linalg.lstsq"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": "."
                      }
                    }
                  ]
                }
              }
            ]
          }
        }
      ]
    },
    "Yields": {
      "children": []
    },
    "Receives": {
      "children": []
    },
    "Raises": {
      "children": []
    },
    "Warns": {
      "children": [
        {
          "type": "Param",
          "data": {
            "param": "",
            "type_": "RankWarning",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "The rank of the coefficient matrix in the least-squares fit is deficient. The warning is only raised if "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "full"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " = False.  The warnings can be turned off by"
                      }
                    }
                  ]
                }
              },
              {
                "type": "Example",
                "data": {
                  "lines": {
                    "_lines": [
                      {
                        "_line": ">>> import warnings",
                        "_number": 4,
                        "_offset": 0
                      },
                      {
                        "_line": ">>> warnings.simplefilter('ignore', np.RankWarning)",
                        "_number": 5,
                        "_offset": 0
                      }
                    ]
                  },
                  "wh": {
                    "_lines": []
                  },
                  "ind": {
                    "_lines": []
                  }
                }
              }
            ]
          }
        }
      ]
    },
    "Other Parameters": {
      "children": []
    },
    "Attributes": {
      "children": []
    },
    "Methods": {
      "children": []
    },
    "Notes": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "children": [
              {
                "type": "Words",
                "data": {
                  "value": "The solution is the coefficients of the HermiteE series "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "p"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " that minimizes the sum of the weighted squared errors"
                }
              }
            ]
          }
        },
        {
          "type": "BlockDirective",
          "data": {
            "lines": {
              "_lines": [
                {
                  "_line": ".. math:: E = \\sum_j w_j^2 * |y_j - p(x_j)|^2,",
                  "_number": 3,
                  "_offset": 0
                }
              ]
            },
            "wh": {
              "_lines": [
                {
                  "_line": "",
                  "_number": 4,
                  "_offset": 0
                }
              ]
            },
            "ind": {
              "_lines": []
            },
            "directive_name": "math",
            "args0": [
              " E = \\sum_j w_j^2 * |y_j - p(x_j)|^2,"
            ],
            "inner": null
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "children": [
              {
                "type": "Words",
                "data": {
                  "value": "where the "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "w",
                    "_",
                    "j"
                  ],
                  "domain": null,
                  "role": "math"
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " are the weights. This problem is solved by setting up the (typically) overdetermined matrix equation"
                }
              }
            ]
          }
        },
        {
          "type": "BlockDirective",
          "data": {
            "lines": {
              "_lines": [
                {
                  "_line": ".. math:: V(x) * c = w * y,",
                  "_number": 8,
                  "_offset": 0
                }
              ]
            },
            "wh": {
              "_lines": [
                {
                  "_line": "",
                  "_number": 9,
                  "_offset": 0
                }
              ]
            },
            "ind": {
              "_lines": []
            },
            "directive_name": "math",
            "args0": [
              " V(x) * c = w * y,"
            ],
            "inner": null
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "children": [
              {
                "type": "Words",
                "data": {
                  "value": "where "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "V"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " is the pseudo Vandermonde matrix of "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "x"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": ", the elements of "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "c"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " are the coefficients to be solved for, and the elements of "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "y"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " are the observed values.  This equation is then solved using the singular value decomposition of "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "V"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": "."
                }
              }
            ]
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "children": [
              {
                "type": "Words",
                "data": {
                  "value": "If some of the singular values of "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "V"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " are so small that they are neglected, then a "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "RankWarning"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " will be issued. This means that the coefficient values may be poorly determined. Using a lower order fit will usually get rid of the warning.  The "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "rcond"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " parameter can also be set to a value smaller than its default, but the resulting fit may be spurious and have large contributions from roundoff error."
                }
              }
            ]
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "children": [
              {
                "type": "Words",
                "data": {
                  "value": "Fits using HermiteE series are probably most useful when the data can be approximated by "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "sqrt(w(x))",
                    " ",
                    "*",
                    " ",
                    "p(x)"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": ", where "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "w(x)"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " is the HermiteE weight. In that case the weight "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "sqrt(w(x[i]))"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " should be used together with data values "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "y[i]/sqrt(w(x[i]))"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": ". The weight function is available as "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "hermeweight"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": "."
                }
              }
            ]
          }
        }
      ]
    },
    "Warnings": {
      "children": []
    }
  },
  "refs": [
    "builtins.RandomState.randn",
    "builtins.RandomState.seed",
    "builtins.float",
    "builtins.len",
    "builtins.tuple",
    "hermeval",
    "hermevander",
    "hermeweight",
    "numpy",
    "numpy.linalg.lstsq",
    "numpy.linspace",
    "numpy.polynomial",
    "numpy.polynomial.chebyshev.chebfit",
    "numpy.polynomial.hermite.hermfit",
    "numpy.polynomial.hermite_e",
    "numpy.polynomial.hermite_e.hermefit",
    "numpy.polynomial.hermite_e.hermeval",
    "numpy.polynomial.laguerre.lagfit",
    "numpy.polynomial.legendre.legfit",
    "numpy.polynomial.polynomial.polyfit",
    "numpy.random",
    "scipy.interpolate.fitpack2.UnivariateSpline"
  ],
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns",
    "Warns",
    "See Also",
    "Notes",
    "References",
    "Examples"
  ],
  "item_file": "/Users/bussonniermatthias/miniconda3/lib/python3.8/site-packages/numpy/polynomial/hermite_e.py",
  "item_line": 1266,
  "item_type": "<class 'function'>",
  "aliases": [
    "numpy.polynomial.hermite_e.hermefit"
  ],
  "example_section_data": {
    "children": [
      {
        "type": "Code",
        "data": {
          "entries": [
            [
              "from",
              null,
              "kn"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "numpy",
              "numpy",
              "nn"
            ],
            [
              ".",
              "",
              "nn"
            ],
            [
              "polynomial",
              "numpy.polynomial",
              "nn"
            ],
            [
              ".",
              "",
              "nn"
            ],
            [
              "hermite_e",
              "numpy.polynomial.hermite_e",
              "nn"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "import",
              null,
              "kn"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "hermefit",
              "numpy.polynomial.hermite_e.hermefit",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "hermeval",
              "numpy.polynomial.hermite_e.hermeval",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "x",
              "builtins.tuple",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "np",
              "numpy",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "linspace",
              "numpy.linspace",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "-",
              "",
              "o"
            ],
            [
              "10",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "10",
              "",
              "mi"
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "np",
              "numpy",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "random",
              "numpy.random",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "seed",
              "builtins.RandomState.seed",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "123",
              "",
              "mi"
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "err",
              "builtins.float",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "np",
              "numpy",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "random",
              "numpy.random",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "randn",
              "builtins.RandomState.randn",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "len",
              "builtins.len",
              "nb"
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "x",
              "builtins.tuple",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "/",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "10",
              "",
              "mi"
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "y",
              "builtins.float",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "hermeval",
              "numpy.polynomial.hermite_e.hermeval",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "x",
              "builtins.tuple",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "1",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "2",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "3",
              "",
              "mi"
            ],
            [
              "]",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "+",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "err",
              "builtins.float",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "hermefit",
              "numpy.polynomial.hermite_e.hermefit",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "x",
              "builtins.tuple",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "y",
              "builtins.float",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "2",
              "",
              "mi"
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": "array([ 1.01690445,  1.99951418,  2.99948696]) # may vary",
          "ce_status": "execed"
        }
      }
    ]
  },
  "see_also": [
    {
      "name": {
        "name": "numpy.polynomial.chebyshev.chebfit",
        "ref": null,
        "exists": null
      },
      "descriptions": [],
      "type": null
    },
    {
      "name": {
        "name": "numpy.polynomial.legendre.legfit",
        "ref": null,
        "exists": null
      },
      "descriptions": [],
      "type": null
    },
    {
      "name": {
        "name": "numpy.polynomial.polynomial.polyfit",
        "ref": null,
        "exists": null
      },
      "descriptions": [],
      "type": null
    },
    {
      "name": {
        "name": "numpy.polynomial.hermite.hermfit",
        "ref": null,
        "exists": null
      },
      "descriptions": [],
      "type": null
    },
    {
      "name": {
        "name": "numpy.polynomial.laguerre.lagfit",
        "ref": null,
        "exists": null
      },
      "descriptions": [],
      "type": null
    },
    {
      "name": {
        "name": "hermeval",
        "ref": null,
        "exists": null
      },
      "descriptions": [
        {
          "children": [
            {
              "type": "Words",
              "data": {
                "value": "Evaluates a Hermite series."
              }
            }
          ]
        }
      ],
      "type": null
    },
    {
      "name": {
        "name": "hermevander",
        "ref": null,
        "exists": null
      },
      "descriptions": [
        {
          "children": [
            {
              "type": "Words",
              "data": {
                "value": "pseudo Vandermonde matrix of Hermite series."
              }
            }
          ]
        }
      ],
      "type": null
    },
    {
      "name": {
        "name": "hermeweight",
        "ref": null,
        "exists": null
      },
      "descriptions": [
        {
          "children": [
            {
              "type": "Words",
              "data": {
                "value": "HermiteE weight function."
              }
            }
          ]
        }
      ],
      "type": null
    },
    {
      "name": {
        "name": "numpy.linalg.lstsq",
        "ref": null,
        "exists": null
      },
      "descriptions": [
        {
          "children": [
            {
              "type": "Words",
              "data": {
                "value": "Computes a least-squares fit from the matrix."
              }
            }
          ]
        }
      ],
      "type": null
    },
    {
      "name": {
        "name": "scipy.interpolate.UnivariateSpline",
        "ref": null,
        "exists": null
      },
      "descriptions": [
        {
          "children": [
            {
              "type": "Words",
              "data": {
                "value": "Computes spline fits."
              }
            }
          ]
        }
      ],
      "type": null
    }
  ],
  "signature": "hermefit(x, y, deg, rcond=None, full=False, w=None)",
  "references": [
    ".. [1] Wikipedia, \"Curve fitting\",",
    "       https://en.wikipedia.org/wiki/Curve_fitting"
  ]
}