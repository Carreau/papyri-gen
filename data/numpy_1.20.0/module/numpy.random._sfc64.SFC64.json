{
  "_content": {
    "Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "BitGenerator for Chris Doty-Humphrey's Small Fast Chaotic PRNG."
                }
              }
            ],
            "inner": []
          }
        }
      ],
      "title": null
    },
    "Extended Summary": {
      "children": [],
      "title": null
    },
    "Parameters": {
      "children": [
        {
          "type": "Param",
          "data": {
            "param": "seed",
            "type_": "{None, int, array_like[ints], SeedSequence}, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "A seed to initialize the "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "BitGenerator"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ". If None, then fresh, unpredictable entropy will be pulled from the OS. If an "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "int"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " or "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "array",
                          "_",
                          "like[ints]"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " is passed, then it will be passed to "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "SeedSequence"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " to derive the initial "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "BitGenerator"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " state. One may also pass in a "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "SeedSequence"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " instance."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        }
      ],
      "title": null
    },
    "Returns": {
      "children": [],
      "title": null
    },
    "Yields": {
      "children": [],
      "title": null
    },
    "Receives": {
      "children": [],
      "title": null
    },
    "Raises": {
      "children": [],
      "title": null
    },
    "Warns": {
      "children": [],
      "title": null
    },
    "Other Parameters": {
      "children": [],
      "title": null
    },
    "Attributes": {
      "children": [],
      "title": null
    },
    "Methods": {
      "children": [],
      "title": null
    },
    "Notes": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "SFC64"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " is a 256-bit implementation of Chris Doty-Humphrey's Small Fast Chaotic PRNG ([1]_). "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "SFC64"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " has a few different cycles that one might be on, depending on the seed; the expected period will be about "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "2^{255}"
                  ],
                  "domain": null,
                  "role": "math"
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " ([2]_). "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "SFC64"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " incorporates a 64-bit counter which means that the absolute minimum cycle length is "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "2^{64}"
                  ],
                  "domain": null,
                  "role": "math"
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " and that distinct seeds will not run into each other for at least "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "2^{64}"
                  ],
                  "domain": null,
                  "role": "math"
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " iterations."
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "SFC64"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " provides a capsule containing function pointers that produce doubles, and unsigned 32 and 64- bit integers. These are not directly consumable in Python and must be consumed by a "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "Generator"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " or similar object that supports low-level access."
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "**State and Seeding**"
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "The "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "SFC64"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " state vector consists of 4 unsigned 64-bit values. The last is a 64-bit counter that increments by 1 each iteration."
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "The input seed is processed by "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "SeedSequence"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " to generate the first 3 values, then the "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "SFC64"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " algorithm is iterated a small number of times to mix."
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "**Compatibility Guarantee**"
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "SFC64"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " makes a guarantee that a fixed seed will always produce the same random integer stream."
                }
              }
            ],
            "inner": []
          }
        }
      ],
      "title": null
    },
    "Warnings": {
      "children": [],
      "title": null
    }
  },
  "refs": [],
  "ordered_sections": [
    "Signature",
    "Summary",
    "Parameters",
    "Notes",
    "References"
  ],
  "item_file": "/Users/bussonniermatthias/miniconda3/lib/python3.8/site-packages/numpy/random/_sfc64.cpython-38-darwin.so",
  "item_line": null,
  "item_type": null,
  "aliases": [
    "numpy.random.SFC64"
  ],
  "example_section_data": {
    "children": [],
    "title": null
  },
  "see_also": [],
  "signature": "SFC64(seed=None)",
  "references": [
    ".. [1] `\"PractRand\"",
    "        <http://pracrand.sourceforge.net/RNG_engines.txt>`_",
    ".. [2] `\"Random Invertible Mapping Statistics\"",
    "        <http://www.pcg-random.org/posts/random-invertible-mapping-statistics.html>`_"
  ],
  "arbitrary": []
}