{
  "_content": {
    "Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "children": [
              {
                "type": "Words",
                "data": {
                  "value": "Fail unless an exception of class exception_class is thrown by callable when invoked with arguments args and keyword arguments kwargs. If a different type of exception is thrown, it will not be caught, and the test case will be deemed to have suffered an error, exactly as for an unexpected exception."
                }
              }
            ]
          }
        }
      ]
    },
    "Extended Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "children": [
              {
                "type": "Words",
                "data": {
                  "value": "Alternatively, "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "assert",
                    "_",
                    "raises"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " can be used as a context manager:"
                }
              }
            ]
          }
        },
        {
          "type": "Example",
          "data": {
            "lines": {
              "_lines": [
                {
                  "_line": ">>> from numpy.testing import assert_raises",
                  "_number": 2,
                  "_offset": 0
                },
                {
                  "_line": ">>> with assert_raises(ZeroDivisionError):",
                  "_number": 3,
                  "_offset": 0
                },
                {
                  "_line": "...     1 / 0",
                  "_number": 4,
                  "_offset": 0
                }
              ]
            },
            "wh": {
              "_lines": [
                {
                  "_line": "",
                  "_number": 5,
                  "_offset": 0
                }
              ]
            },
            "ind": {
              "_lines": []
            }
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "children": [
              {
                "type": "Words",
                "data": {
                  "value": "is equivalent to"
                }
              }
            ]
          }
        },
        {
          "type": "Example",
          "data": {
            "lines": {
              "_lines": [
                {
                  "_line": ">>> def div(x, y):",
                  "_number": 8,
                  "_offset": 0
                },
                {
                  "_line": "...     return x / y",
                  "_number": 9,
                  "_offset": 0
                },
                {
                  "_line": ">>> assert_raises(ZeroDivisionError, div, 1, 0)",
                  "_number": 10,
                  "_offset": 0
                }
              ]
            },
            "wh": {
              "_lines": []
            },
            "ind": {
              "_lines": []
            }
          }
        }
      ]
    },
    "Parameters": {
      "children": []
    },
    "Returns": {
      "children": []
    },
    "Yields": {
      "children": []
    },
    "Receives": {
      "children": []
    },
    "Raises": {
      "children": []
    },
    "Warns": {
      "children": []
    },
    "Other Parameters": {
      "children": []
    },
    "Attributes": {
      "children": []
    },
    "Methods": {
      "children": []
    },
    "Notes": {
      "children": []
    },
    "Warnings": {
      "children": []
    }
  },
  "refs": [],
  "ordered_sections": [
    "Signature",
    "Summary",
    "Extended Summary"
  ],
  "item_file": "/Users/bussonniermatthias/miniconda3/lib/python3.8/site-packages/numpy/testing/_private/utils.py",
  "item_line": 1302,
  "item_type": "<class 'function'>",
  "aliases": [
    "numpy.testing.assert_raises"
  ],
  "example_section_data": {
    "children": []
  },
  "see_also": [],
  "signature": "assert_raises(exception_class, callable, *args, **kwargs) assert_raises(exception_class)",
  "references": null
}