{
  "_content": {
    "Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "children": [
              {
                "type": "Words",
                "data": {
                  "value": "Context manager that resets warning registry for catching warnings"
                }
              }
            ]
          }
        }
      ]
    },
    "Extended Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "children": [
              {
                "type": "Words",
                "data": {
                  "value": "Warnings can be slippery, because, whenever a warning is triggered, Python adds a "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "_",
                    "_",
                    "warningregistry",
                    "_",
                    "_"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " member to the *calling* module.  This makes it impossible to retrigger the warning in this module, whatever you put in the warnings filters.  This context manager accepts a sequence of "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "modules"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " as a keyword argument to its constructor and:"
                }
              }
            ]
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "children": [
              {
                "type": "Words",
                "data": {
                  "value": "* stores and removes any "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "_",
                    "_",
                    "warningregistry",
                    "_",
                    "_"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " entries in given "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "modules"
                  ],
                  "domain": null,
                  "role": null
                }
              }
            ]
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "children": [
              {
                "type": "Words",
                "data": {
                  "value": "  on entry;"
                }
              }
            ]
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "children": [
              {
                "type": "Words",
                "data": {
                  "value": "* resets "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "_",
                    "_",
                    "warningregistry",
                    "_",
                    "_"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " to its previous state on exit."
                }
              }
            ]
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "children": [
              {
                "type": "Words",
                "data": {
                  "value": "This makes it possible to trigger any warning afresh inside the context manager without disturbing the state of warnings outside."
                }
              }
            ]
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "children": [
              {
                "type": "Words",
                "data": {
                  "value": "For compatibility with Python 3.0, please consider all arguments to be keyword-only."
                }
              }
            ]
          }
        }
      ]
    },
    "Parameters": {
      "children": [
        {
          "type": "Param",
          "data": {
            "param": "record",
            "type_": "bool, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Specifies whether warnings should be captured by a custom implementation of "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "warnings.showwarning()"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " and be appended to a list returned by the context manager. Otherwise None is returned by the context manager. The objects appended to the list are arguments whose attributes mirror the arguments to "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "showwarning()"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": "."
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "modules",
            "type_": "sequence, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Sequence of modules for which to reset warnings registry on entry and restore on exit. To work correctly, all 'ignore' filters should filter by one of these modules."
                      }
                    }
                  ]
                }
              }
            ]
          }
        }
      ]
    },
    "Returns": {
      "children": []
    },
    "Yields": {
      "children": []
    },
    "Receives": {
      "children": []
    },
    "Raises": {
      "children": []
    },
    "Warns": {
      "children": []
    },
    "Other Parameters": {
      "children": []
    },
    "Attributes": {
      "children": []
    },
    "Methods": {
      "children": []
    },
    "Notes": {
      "children": []
    },
    "Warnings": {
      "children": []
    }
  },
  "refs": [
    "numpy",
    "numpy.core",
    "numpy.core.fromnumeric",
    "numpy.testing",
    "numpy.testing._private.utils.clear_and_catch_warnings",
    "warnings",
    "warnings.filterwarnings",
    "warnings.simplefilter"
  ],
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Examples"
  ],
  "item_file": "/Users/bussonniermatthias/miniconda3/lib/python3.8/site-packages/numpy/testing/_private/utils.py",
  "item_line": 1962,
  "item_type": "<class 'type'>",
  "aliases": [
    "numpy.testing.clear_and_catch_warnings"
  ],
  "example_section_data": {
    "children": [
      {
        "type": "Code",
        "data": {
          "entries": [
            [
              "import",
              null,
              "kn"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "warnings",
              "warnings",
              "nn"
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "with",
              null,
              "k"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "np",
              "numpy",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "testing",
              "numpy.testing",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "clear_and_catch_warnings",
              "numpy.testing._private.utils.clear_and_catch_warnings",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "modules",
              null,
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "np",
              "numpy",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "core",
              "numpy.core",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "fromnumeric",
              "numpy.core.fromnumeric",
              ""
            ],
            [
              "]",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              ":",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "    ",
              "",
              ""
            ],
            [
              "warnings",
              "warnings",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "simplefilter",
              "warnings.simplefilter",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              "always",
              null,
              "s2"
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "    ",
              "",
              ""
            ],
            [
              "warnings",
              "warnings",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "filterwarnings",
              "warnings.filterwarnings",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              "ignore",
              null,
              "s2"
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "module",
              null,
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              "np.core.fromnumeric",
              "",
              "s2"
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "    ",
              "",
              ""
            ],
            [
              "# do something that raises a warning but ignore those in",
              "",
              "c1"
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "    ",
              "",
              ""
            ],
            [
              "# np.core.fromnumeric",
              "",
              "c1"
            ]
          ],
          "out": "",
          "ce_status": "compiled"
        }
      }
    ]
  },
  "see_also": [],
  "signature": "clear_and_catch_warnings(record=False, modules=())",
  "references": null
}