{
  "_content": {},
  "aliases": [],
  "arbitrary": [
    {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "If you reached here, you want to dive into, or use, more advanced tooling. This is usually not necessary for first time contributors and most day-to-day development. These are used more rarely, for example close to a new NumPy release, or when a large or particular complex change was made."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Since not all of these tools are used on a regular bases and only available on some systems, please expect differences, issues, or quirks; we will be happy to help if you get stuck and appreciate any improvements or suggestions to these workflows."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": "Advanced debugging tools"
    },
    {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Most development will not require more than a typical debugging toolchain as shown in "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "Debugging <debugging>"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ".  But for example memory leaks can be particularly subtle or difficult to narrow down."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "We do not expect any of these tools to be run by most contributors. However, you can ensure that we can track down such issues more easily easier:"
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "value": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "Tests should cover all code paths, including error paths."
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "value": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "Try to write short and simple tests. If you have a very complicated test   consider creating an additional simpler test as well.   This can be helpful, because often it is only easy to find which test   triggers an issue and not which line of the test."
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "value": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "Never use "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "np.empty"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " if data is read/used. "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "valgrind"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " will notice this   and report an error. When you do not care about values, you can generate   random values instead."
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ]
              }
            ]
          },
          "type": "BulletList"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "This will help us catch any oversights before your change is released and means you do not have to worry about making reference counting errors, which can be intimidating."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": "Finding C errors with additional tooling"
    },
    {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Debug builds of Python are easily available for example on "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "debian"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " systems, and can be used on all platforms. Running a test or terminal is usually as easy as::      "
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": "python3.8d runtests.py\n# or\npython3.8d runtests.py --ipython"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "and were already mentioned in "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "Debugging <debugging>"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": "."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "A Python debug build will help:"
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "value": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "Find bugs which may otherwise cause random behaviour.   One example is when an object is still used after it has been deleted."
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ]
              }
            ]
          },
          "type": "BulletList"
        },
        {
          "data": {
            "children": [
              {
                "value": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "Python debug builds allows to check correct reference counting.   This works using the additional commands::      "
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  },
                  {
                    "data": {
                      "value": "sys.gettotalrefcount()\nsys.getallocatedblocks()"
                    },
                    "type": "BlockVerbatim"
                  }
                ]
              }
            ]
          },
          "type": "BulletList"
        }
      ],
      "title": "Python debug build for finding memory leaks"
    },
    {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Running the test suite only with a debug python build will not find many errors on its own. An additional advantage of a debug build of Python is that it allows detecting memory leaks."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "A tool to make this easier is "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "pytest-leaks"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": ", which can be installed using "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "pip"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ". Unfortunately, "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "pytest"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " itself may leak memory, but good results can usually (currently) be achieved by removing::      "
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": "@pytest.fixture(autouse=True)\ndef add_np(doctest_namespace):\n    doctest_namespace['np'] = numpy\n\n@pytest.fixture(autouse=True)\ndef env_setup(monkeypatch):\n    monkeypatch.setenv('PYTHONHASHSEED', '0')"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "from "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "numpy/conftest.py"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " (This may change with new "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "pytest-leaks"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " versions or "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "pytest"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " updates)."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "This allows to run the test suite, or part of it, conveniently::      "
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": "python3.8d runtests.py -t numpy/core/tests/test_multiarray.py -- -R2:3 -s"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "where "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "-R2:3"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " is the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "pytest-leaks"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " command (see its documentation), the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "-s"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " causes output to print and may be necessary (in some versions captured output was detected as a leak)."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Note that some tests are known (or even designed) to leak references, we try to mark them, but expect some false positives."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "placeholder": "target",
            "value": ".. _pytest-leaks: https://github.com/abalkin/pytest-leaks"
          },
          "type": "Unimplemented"
        }
      ],
      "title": "Use together with ``pytest``"
    },
    {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Valgrind is a powerful tool to find certain memory access problems and should be run on complicated C code. Basic use of "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "valgrind"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " usually requires no more than::      "
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": "PYTHONMALLOC=malloc valgrind python runtests.py"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "where "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "PYTHONMALLOC=malloc"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " is necessary to avoid false positives from python itself. Depending on the system and valgrind version, you may see more false positives. "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "valgrind"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " supports \"suppressions\" to ignore some of these, and Python does have a suppression file (and even a compile time option) which may help if you find it necessary."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Valgrind helps:"
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "value": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "Find use of uninitialized variables/memory."
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ]
              }
            ]
          },
          "type": "BulletList"
        },
        {
          "data": {
            "children": [
              {
                "value": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "Detect memory access violations (reading or writing outside of allocated   memory)."
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ]
              }
            ]
          },
          "type": "BulletList"
        },
        {
          "data": {
            "children": [
              {
                "value": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "Find "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": {
                              "value": "many"
                            }
                          },
                          "type": "Emph"
                        },
                        {
                          "data": {
                            "value": " memory leaks. Note that for "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": {
                              "value": "most"
                            }
                          },
                          "type": "Emph"
                        },
                        {
                          "data": {
                            "value": " leaks the python   debug build approach (and "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "pytest-leaks"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": ") is much more sensitive.   The reason is that "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "valgrind"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " can only detect if memory is definitely   lost. If::        "
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  },
                  {
                    "data": {
                      "value": "dtype = np.dtype(np.int64)\narr.astype(dtype=dtype)"
                    },
                    "type": "BlockVerbatim"
                  },
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "Has incorrect reference counting for "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "dtype"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": ", this is a bug, but valgrind   cannot see it because "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "np.dtype(np.int64)"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " always returns the same object.   However, not all dtypes are singletons, so this might leak memory for   different input.   In rare cases NumPy uses "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "malloc"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " and not the Python memory allocators   which are invisible to the Python debug build.   "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "malloc"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " should normally be avoided, but there are some exceptions   (e.g. the "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "PyArray_Dims"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " structure is public API and cannot use the   Python allocators.)"
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ]
              }
            ]
          },
          "type": "BulletList"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Even though using valgrind for memory leak detection is slow and less sensitive it can be a convenient: you can run most programs with valgrind without modification."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Things to be aware of:"
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "value": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "Valgrind does not support the numpy "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "longdouble"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": ", this means that tests   will fail or be flagged errors that are completely fine."
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ]
              }
            ]
          },
          "type": "BulletList"
        },
        {
          "data": {
            "children": [
              {
                "value": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "Expect some errors before and after running your NumPy code."
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ]
              }
            ]
          },
          "type": "BulletList"
        },
        {
          "data": {
            "children": [
              {
                "value": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "Caches can mean that errors (specifically memory leaks) may not be detected   or are only detect at a later, unrelated time."
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ]
              }
            ]
          },
          "type": "BulletList"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "A big advantage of valgrind is that it has no requirements aside from valgrind itself (although you probably want to use debug builds for better tracebacks)."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": "``valgrind``"
    },
    {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "You can run the test suite with valgrind which may be sufficient when you are only interested in a few tests::      "
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": "PYTHOMMALLOC=malloc valgrind python runtests.py \\\n -t numpy/core/tests/test_multiarray.py -- --continue-on-collection-errors"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Note the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "--continue-on-collection-errors"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", which is currently necessary due to missing "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "longdouble"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " support causing failures (this will usually not be necessary if you do not run the full test suite)."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "If you wish to detect memory leaks you will also require "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "--show-leak-kinds=definite"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " and possibly more valgrind options.  Just as for "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "pytest-leaks"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " certain tests are known to leak cause errors in valgrind and may or may not be marked as such."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "We have developed "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "pytest-valgrind"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " which:"
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "value": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "Reports errors for each test individually"
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ]
              }
            ]
          },
          "type": "BulletList"
        },
        {
          "data": {
            "children": [
              {
                "value": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "Narrows down memory leaks to individual tests (by default valgrind   only checks for memory leaks after a program stops, which is very   cumbersome)."
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ]
              }
            ]
          },
          "type": "BulletList"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Please refer to its "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "README"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " for more information (it includes an example command for NumPy)."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "placeholder": "target",
            "value": ".. _pytest-valgrind: https://github.com/seberg/pytest-valgrind"
          },
          "type": "Unimplemented"
        }
      ],
      "title": "Use together with ``pytest``"
    }
  ],
  "example_section_data": {
    "children": [],
    "title": null
  },
  "item_file": null,
  "item_line": null,
  "item_type": null,
  "ordered_sections": [],
  "references": null,
  "refs": [],
  "see_also": [],
  "signature": {
    "value": null
  }
}