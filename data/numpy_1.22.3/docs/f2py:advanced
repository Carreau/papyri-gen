{
  "_content": {},
  "aliases": [],
  "arbitrary": [
    {
      "children": [],
      "title": "Advanced F2PY use cases"
    },
    {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "User-defined Python C/API functions can be defined inside signature files using "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "usercode"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " and "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "pymethoddef"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " statements (they must be used inside the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "python module"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " block). For example, the following signature file "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "spam.pyf"
                  ]
                },
                "type": "Verbatim"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "args0": [
              "./code/spam.pyf"
            ],
            "directive_name": "include",
            "inner": {
              "inline": [],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "wraps the C library function "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "system()"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": "    "
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": "f2py -c spam.pyf"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "In Python this can then be used as:"
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "args0": [
              "./code/results/spam_session.dat"
            ],
            "directive_name": "literalinclude",
            "inner": {
              "inline": [],
              "inner": []
            }
          },
          "type": "BlockDirective"
        }
      ],
      "title": "Adding user-defined functions to F2PY generated modules"
    },
    {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "The following example illustrates how to add user-defined variables to a F2PY generated extension module by modifying the dictionary of a F2PY generated module. Consider the following signature file (compiled with "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "f2py -c var.pyf"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": "):"
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "args0": [
              "./code/var.pyf"
            ],
            "directive_name": "literalinclude",
            "inner": {
              "inline": [],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Notice that the second "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "usercode"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " statement must be defined inside an "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "interface"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " block and the module dictionary is available through the variable "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "d"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " (see "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "varmodule.c"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " generated by "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "f2py var.pyf"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " for additional details)."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Usage in Python:"
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "args0": [
              "./code/results/var_session.dat"
            ],
            "directive_name": "literalinclude",
            "inner": {
              "inline": [],
              "inner": []
            }
          },
          "type": "BlockDirective"
        }
      ],
      "title": "Adding user-defined variables"
    },
    {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Currently, F2PY can handle only "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "<type spec>(kind=<kindselector>)"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " declarations where "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "<kindselector>"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " is a numeric integer (e.g. 1, 2, 4,...), but not a function call "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "KIND(..)"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " or any other expression. F2PY needs to know what would be the corresponding C type and a general solution for that would be too complicated to implement."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "However, F2PY provides a hook to overcome this difficulty, namely, users can define their own <Fortran type> to <C type> maps. For example, if Fortran 90 code contains::      "
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": "REAL(kind=KIND(0.0D0)) ..."
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "then create a mapping file containing a Python dictionary::      "
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": "{'real': {'KIND(0.0D0)': 'double'}}"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "for instance."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Use the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "--f2cmap"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " command-line option to pass the file name to F2PY. By default, F2PY assumes file name is "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    ".f2py_f2cmap"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " in the current working directory."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "More generally, the f2cmap file must contain a dictionary with items::      "
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": "<Fortran typespec> : {<selector_expr>:<C type>}"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "that defines mapping between Fortran type::      "
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": "<Fortran typespec>([kind=]<selector_expr>)"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "and the corresponding <C type>. The <C type> can be one of the following::      "
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": "char\nsigned_char\nshort\nint\nlong_long\nfloat\ndouble\nlong_double\ncomplex_float\ncomplex_double\ncomplex_long_double\nstring"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "For more information, see the F2Py source code "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "numpy/f2py/capi_maps.py"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": "."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": "Dealing with KIND specifiers"
    }
  ],
  "example_section_data": {
    "children": [],
    "title": null
  },
  "item_file": null,
  "item_line": null,
  "item_type": null,
  "ordered_sections": [],
  "references": null,
  "refs": [],
  "see_also": [],
  "signature": {
    "value": null
  }
}