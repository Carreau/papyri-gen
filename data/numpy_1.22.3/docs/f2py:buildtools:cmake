{
  "_content": {},
  "aliases": [],
  "arbitrary": [
    {
      "children": [
        {
          "data": {
            "placeholder": "target",
            "value": ".. _f2py-cmake:"
          },
          "type": "Unimplemented"
        }
      ],
      "title": null
    },
    {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "In terms of complexity, "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "cmake"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " falls between "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "make"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " and "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "meson"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ". The learning curve is steeper since CMake syntax is not pythonic and is closer to "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "make"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " with environment variables."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "However, the trade-off is enhanced flexibility and support for most architectures and compilers. An introduction to the syntax is out of scope for this document, but this "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "extensive CMake collection"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " of resources is great."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "inline": [
                  {
                    "data": {
                      "value": "``cmake`` is very popular for mixed - language systems, however support for ``f2py`` is not particularly native or pleasant; and a more natural approach is to consider : ref : `f2py - skbuild` "
                    },
                    "type": "Words"
                  }
                ],
                "inner": []
              }
            ],
            "kind": "note",
            "title": ""
          },
          "type": "Admonition"
        }
      ],
      "title": "Using via ``cmake``"
    },
    {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Returning to the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "fib"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": "  example from "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "f2py-getting-started"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " section."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "args0": [
              "./../code/fib1.f"
            ],
            "directive_name": "literalinclude",
            "inner": {
              "inline": [],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "We do not need to explicitly generate the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "python -m numpy.f2py fib1.f"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " output, which is "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "fib1module.c"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", which is beneficial. With this; we can now initialize a "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "CMakeLists.txt"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " file as follows:"
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "args0": [
              "./../code/CMakeLists.txt"
            ],
            "directive_name": "literalinclude",
            "inner": {
              "inline": [],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "A key element of the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "CMakeLists.txt"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " file defined above is that the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "add_custom_command"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " is used to generate the wrapper "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "C"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " files and then added as a dependency of the actual shared library target via a "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "add_custom_target"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " directive which prevents the command from running every time. Additionally, the method used for obtaining the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "fortranobject.c"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " file can also be used to grab the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "numpy"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " headers on older "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "cmake"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " versions."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "This then works in the same manner as the other modules, although the naming conventions are different and the output library is not automatically prefixed with the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "cython"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " information."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "args0": [
              "bash"
            ],
            "directive_name": "code",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "ls . # CMakeLists.txt fib1.f cmake - S . - B build cmake - - build build cd build python - c \" import numpy as np; import fibby; a = np.zeros ( 9); fibby.fib ( a); print ( a) \" # [ 0. 1. 1. 2. 3. 5. 8. 13. 21.] "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "This is particularly useful where an existing toolchain already exists and "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "scikit-build"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " or other additional "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "python"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " dependencies are discouraged."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "placeholder": "target",
            "value": ".. _extensive CMake collection: https://cliutils.gitlab.io/modern-cmake/"
          },
          "type": "Unimplemented"
        }
      ],
      "title": "Fibonacci Walkthrough (F77)"
    }
  ],
  "example_section_data": {
    "children": [],
    "title": null
  },
  "item_file": null,
  "item_line": null,
  "item_type": null,
  "ordered_sections": [],
  "references": null,
  "refs": [],
  "see_also": [],
  "signature": {
    "value": null
  }
}