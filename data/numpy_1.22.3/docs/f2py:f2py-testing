{
  "_content": {},
  "aliases": [],
  "arbitrary": [
    {
      "children": [
        {
          "data": {
            "placeholder": "target",
            "value": ".. _f2py-testing:"
          },
          "type": "Unimplemented"
        }
      ],
      "title": null
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "F2PY's test suite is present in the directory "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "numpy/f2py/tests"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ". Its aim is to ensure that Fortran language features are correctly translated to Python. For example, the user can specify starting and ending indices of arrays in Fortran. This behaviour is translated to the generated CPython library where the arrays strictly start from 0 index."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "The directory of the test suite looks like the following::   "
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": "./tests/\n\u251c\u2500\u2500 __init__.py\n\u251c\u2500\u2500 src\n\u2502   \u251c\u2500\u2500 abstract_interface\n\u2502   \u251c\u2500\u2500 array_from_pyobj\n\u2502   \u251c\u2500\u2500 // ... several test folders\n\u2502   \u2514\u2500\u2500 string\n\u251c\u2500\u2500 test_abstract_interface.py\n\u251c\u2500\u2500 test_array_from_pyobj.py\n\u251c\u2500\u2500 // ... several test files\n\u251c\u2500\u2500 test_symbolic.py\n\u2514\u2500\u2500 util.py"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Files starting with "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "test_"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " contain tests for various aspects of f2py from parsing Fortran files to checking modules' documentation. "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "src"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " directory contains the Fortran source files upon which we do the testing. "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "util.py"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " contains utility  functions for building and importing Fortran modules during test time using a  temporary location."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "F2PY test suite"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "F2PY's current test suite predates "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "pytest"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " and therefore does not use fixtures. Instead, the test files contain test classes that inherit from "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "F2PyTest"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " class present in "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "util.py"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": "."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "argument": "../../../numpy/f2py/tests/util.py",
            "content": "",
            "name": "literalinclude",
            "options": [
              [
                "language",
                "python"
              ],
              [
                "lines",
                "327-336"
              ],
              [
                "linenos",
                ""
              ]
            ]
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "This class many helper functions for parsing and compiling test source files. Its child  classes can override its "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "sources"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " data member to provide their own source files. This superclass will then compile the added source files upon object creation andtheir functions will be appended to "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "self.module"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " data member. Thus, the child classes will be able to access the fortran functions specified in source file by calling "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "self.module.[fortran_function_name]"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": "."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "Adding a test"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Consider the following subroutines, contained in a file named "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "add-test.f"
                  ]
                },
                "type": "Verbatim"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "argument": "./code/add-test.f",
            "content": "",
            "name": "literalinclude",
            "options": [
              [
                "language",
                "fortran"
              ]
            ]
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "The first routine "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "addb"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " simply takes an array and increases its elements by 1. The second subroutine "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "addc"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " assigns a new array "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "k"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " with elements greater that  the elements of the input array "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "w"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " by 1."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "A test can be implemented as follows::   "
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": "class TestAdd(util.F2PyTest):\n    sources = [util.getpath(\"add-test.f\")]\n\n    def test_module(self):\n        k = np.array([1, 2, 3], dtype=np.float64)\n        w = np.array([1, 2, 3], dtype=np.float64)\n        self.module.subb(k)\n        assert np.allclose(k, w + 1)\n        self.module.subc([w, k])\n        assert np.allclose(k, w + 1)"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "We override the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "sources"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " data member to provide the source file. The source files are compiled and subroutines are attached to module data member when the class object is created. The "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "test_module"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " function calls the subroutines and tests their results."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "Example"
    }
  ],
  "example_section_data": {
    "children": [],
    "title": null
  },
  "item_file": null,
  "item_line": null,
  "item_type": null,
  "ordered_sections": [],
  "references": null,
  "see_also": [],
  "signature": {
    "value": null
  }
}