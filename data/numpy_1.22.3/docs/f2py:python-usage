{
  "_content": {},
  "aliases": [],
  "arbitrary": [
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "In this page, you can find a full description and a few examples of common usage patterns for F2PY with Python and different argument types. For more examples and use cases, see "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "f2py-examples"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": "."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "Using F2PY bindings in Python"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "All wrappers for Fortran/C routines, common blocks, or for Fortran 90 module data generated by F2PY are exposed to Python as "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "fortran"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " type objects. Routine wrappers are callable "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "fortran"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " type objects while wrappers to Fortran data have attributes referring to data objects."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "All "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "fortran"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " type objects have an attribute "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "_cpointer"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " that contains a "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "CObject"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " referring to the C pointer of the corresponding Fortran/C function or variable at the C level. Such "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "CObjects"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " can be used as callback arguments for F2PY generated functions to bypass the Python C/API layer for calling Python functions from Fortran or C. This can be useful when the computational aspects of such functions are implemented in C or Fortran and wrapped with F2PY (or any other tool capable of providing the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "CObject"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " of a function)."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Consider a Fortran 77 file "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "`ftype.f"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ":"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "argument": "./code/ftype.f",
            "content": "",
            "name": "literalinclude",
            "options": [
              [
                "language",
                "fortran"
              ]
            ]
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "and a wrapper built using "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "f2py -c ftype.f -m ftype"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": "."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "In Python, you can observe the types of "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "foo"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " and "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "data"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", and how to access individual objects of the wrapped Fortran code."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "argument": "./code/results/ftype_session.dat",
            "content": "",
            "name": "literalinclude",
            "options": [
              [
                "language",
                "python"
              ]
            ]
          },
          "type": "BlockDirective"
        }
      ],
      "title": "Fortran type objects"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "In general, a scalar argument for a F2PY generated wrapper function can be an ordinary Python scalar (integer, float, complex number) as well as an arbitrary sequence object (list, tuple, array, string) of scalars. In the latter case, the first element of the sequence object is passed to the Fortran routine as a scalar argument."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "children": [
                    {
                      "children": [
                        {
                          "data": {
                            "children": [
                              {
                                "data": {
                                  "value": "When type-casting is required and there is possible loss of information via   narrowing e.g. when type-casting float to integer or complex to float, F2PY   "
                                },
                                "type": "Words"
                              },
                              {
                                "data": {
                                  "value": {
                                    "value": "does not"
                                  }
                                },
                                "type": "Emph"
                              },
                              {
                                "data": {
                                  "value": " raise an exception."
                                },
                                "type": "Words"
                              }
                            ]
                          },
                          "type": "Paragraph"
                        },
                        {
                          "data": {
                            "children": [
                              {
                                "children": [
                                  {
                                    "data": {
                                      "children": [
                                        {
                                          "data": {
                                            "value": "For complex to real type-casting only the real part of a complex number     is used."
                                          },
                                          "type": "Words"
                                        }
                                      ]
                                    },
                                    "type": "Paragraph"
                                  }
                                ]
                              }
                            ]
                          },
                          "type": "BulletList"
                        }
                      ]
                    }
                  ]
                },
                "type": "BulletList"
              },
              {
                "data": {
                  "children": [
                    {
                      "children": [
                        {
                          "data": {
                            "children": [
                              {
                                "data": {
                                  "value": [
                                    "intent(inout)"
                                  ]
                                },
                                "type": "Verbatim"
                              },
                              {
                                "data": {
                                  "value": " scalar arguments are assumed to be array objects in   order to have "
                                },
                                "type": "Words"
                              },
                              {
                                "data": {
                                  "value": {
                                    "value": "in situ"
                                  }
                                },
                                "type": "Emph"
                              },
                              {
                                "data": {
                                  "value": " changes be effective. It is recommended to use   arrays with proper type but also other types work. "
                                },
                                "type": "Words"
                              },
                              {
                                "data": {
                                  "domain": null,
                                  "role": "ref",
                                  "value": "Read more about\n  the intent attribute <f2py-attributes>"
                                },
                                "type": "Directive"
                              },
                              {
                                "data": {
                                  "value": "."
                                },
                                "type": "Words"
                              }
                            ]
                          },
                          "type": "Paragraph"
                        }
                      ]
                    }
                  ]
                },
                "type": "BulletList"
              }
            ],
            "kind": "note",
            "title": ""
          },
          "type": "Admonition"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Consider the following Fortran 77 code:"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "argument": "./code/scalar.f",
            "content": "",
            "name": "literalinclude",
            "options": [
              [
                "language",
                "fortran"
              ]
            ]
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "and wrap it using "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "f2py -c -m scalar scalar.f"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": "."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "In Python:"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "argument": "./code/results/scalar_session.dat",
            "content": "",
            "name": "literalinclude",
            "options": [
              [
                "language",
                "python"
              ]
            ]
          },
          "type": "BlockDirective"
        }
      ],
      "title": "Scalar arguments"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "F2PY generated wrapper functions accept almost any Python object as a string argument, since "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "str"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " is applied for non-string objects. Exceptions are NumPy arrays that must have type code "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "'S1'"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " or "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "'b'"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " (corresponding to the outdated "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "'c'"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " or "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "'1'"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " typecodes, respectively) when used as string arguments. See "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "arrays.scalars"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " for more information on these typecodes."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "A string can have an arbitrary length when used as a string argument for an F2PY generated wrapper function. If the length is greater than expected, the string is truncated silently. If the length is smaller than expected, additional memory is allocated and filled with "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "\\0"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": "."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": ".. TODO: review this section once https://github.com/numpy/numpy/pull/19388 is merged."
          },
          "type": "Comment"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Because Python strings are immutable, an "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "intent(inout)"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " argument expects an array version of a string in order to have "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "in situ"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": " changes be effective."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Consider the following Fortran 77 code:"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "argument": "./code/string.f",
            "content": "",
            "name": "literalinclude",
            "options": [
              [
                "language",
                "fortran"
              ]
            ]
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "and wrap it using "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "f2py -c -m mystring string.f"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": "."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Python session:"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "argument": "./code/results/string_session.dat",
            "content": "",
            "name": "literalinclude",
            "options": [
              [
                "language",
                "python"
              ]
            ]
          },
          "type": "BlockDirective"
        }
      ],
      "title": "String arguments"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "In general, array arguments for F2PY generated wrapper functions accept arbitrary sequences that can be transformed to NumPy array objects. There are two notable exceptions:"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": [
                              "intent(inout)"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " array arguments must always be   "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "proper-contiguous <contiguous>"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " and have a compatible "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "dtype"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": ",   otherwise an exception is raised."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": [
                              "intent(inplace)"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " array arguments  will be changed "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": {
                              "value": "in situ"
                            }
                          },
                          "type": "Emph"
                        },
                        {
                          "data": {
                            "value": " if the argument   has a different type than expected (see the "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "intent(inplace)"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": "   "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "attribute <f2py-attributes>"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " for more information)."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              }
            ]
          },
          "type": "BulletList"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "In general, if a NumPy array is "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "proper-contiguous <contiguous>"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " and has a proper type then it is directly passed to the wrapped Fortran/C function. Otherwise, an element-wise copy of the input array is made and the copy, being proper-contiguous and with proper type, is used as the array argument."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Usually there is no need to worry about how the arrays are stored in memory and whether the wrapped functions, being either Fortran or C functions, assume one or another storage order. F2PY automatically ensures that wrapped functions get arguments with the proper storage order; the underlying algorithm is designed to make copies of arrays only when absolutely necessary. However, when dealing with very large multidimensional input arrays with sizes close to the size of the physical memory in your computer, then care must be taken to ensure the usage of proper-contiguous and proper type arguments."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "To transform input arrays to column major storage order before passing them to Fortran routines, use the function "
                },
                "type": "Words"
              },
              {
                "data": {
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "api",
                    "module": "numpy",
                    "path": "numpy.asfortranarray",
                    "version": "*"
                  },
                  "value": "numpy.asfortranarray"
                },
                "type": "Link"
              },
              {
                "data": {
                  "value": "."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Consider the following Fortran 77 code:"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "argument": "./code/array.f",
            "content": "",
            "name": "literalinclude",
            "options": [
              [
                "language",
                "fortran"
              ]
            ]
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "and wrap it using "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "f2py -c -m arr array.f -DF2PY_REPORT_ON_ARRAY_COPY=1"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": "."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "In Python:"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "argument": "./code/results/array_session.dat",
            "content": "",
            "name": "literalinclude",
            "options": [
              [
                "language",
                "python"
              ]
            ]
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "placeholder": "target",
            "value": ".. _Call-back arguments:"
          },
          "type": "Unimplemented"
        }
      ],
      "title": "Array arguments"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "F2PY supports calling Python functions from Fortran or C codes."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Consider the following Fortran 77 code:"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "argument": "./code/callback.f",
            "content": "",
            "name": "literalinclude",
            "options": [
              [
                "language",
                "fortran"
              ]
            ]
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "and wrap it using "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "f2py -c -m callback callback.f"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": "."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "In Python:"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "argument": "./code/results/callback_session.dat",
            "content": "",
            "name": "literalinclude",
            "options": [
              [
                "language",
                "python"
              ]
            ]
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "In the above example F2PY was able to guess accurately the signature of the call-back function. However, sometimes F2PY cannot establish the appropriate signature; in these cases the signature of the call-back function must be explicitly defined in the signature file."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "To facilitate this, signature files may contain special modules (the names of these modules contain the special "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "__user__"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " sub-string) that define the various signatures for call-back functions.  Callback arguments in routine signatures have the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "external"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " attribute (see also the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "intent(callback)"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "attribute <f2py-attributes>"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": "). To relate a callback argument with its signature in a "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "__user__"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " module block, a "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "use"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " statement can be utilized as illustrated below. The same signature for a callback argument can be referred to in different routine signatures."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "We use the same Fortran 77 code as in the previous example but now we will pretend that F2PY was not able to guess the signatures of call-back arguments correctly. First, we create an initial signature file "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "callback2.pyf"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " using F2PY::      "
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": "f2py -m callback2 -h callback2.pyf callback.f"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Then modify it as follows"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "argument": "./code/callback2.pyf",
            "content": "",
            "name": "include",
            "options": [
              [
                "literal",
                ""
              ]
            ]
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Finally, we build the extension module using "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "f2py -c callback2.pyf callback.f"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": "."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "An example Python session for this snippet would be identical to the previous example except that the argument names would differ."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Sometimes a Fortran package may require that users provide routines that the package will use. F2PY can construct an interface to such routines so that Python functions can be called from Fortran."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Consider the following Fortran 77 subroutine that takes an array as its input and applies a function "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "func"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " to its elements."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "argument": "./code/calculate.f",
            "content": "",
            "name": "literalinclude",
            "options": [
              [
                "language",
                "fortran"
              ]
            ]
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "The Fortran code expects that the function "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "func"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " has been defined externally. In order to use a Python function for "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "func"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", it must have an attribute "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "intent(callback)"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " and it must be specified before the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "external"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " statement."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Finally, build an extension module using "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "f2py -c -m foo calculate.f"
                  ]
                },
                "type": "Verbatim"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "In Python:"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "argument": "./code/results/calculate_session.dat",
            "content": "",
            "name": "literalinclude",
            "options": [
              [
                "language",
                "python"
              ]
            ]
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "The function is included as an argument to the python function call to the Fortran subroutine even though it was "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "not"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": " in the Fortran subroutine argument list. The \"external\" keyword refers to the C function generated by f2py, not the Python function itself. The python function is essentially being supplied to the C function."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "The callback function may also be explicitly set in the module. Then it is not necessary to pass the function in the argument list to the Fortran function. This may be desired if the Fortran function calling the Python callback function is itself called by another Fortran function."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Consider the following Fortran 77 subroutine:"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "argument": "./code/extcallback.f",
            "content": "",
            "name": "literalinclude",
            "options": [
              [
                "language",
                "fortran"
              ]
            ]
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "and wrap it using "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "f2py -c -m pfromf extcallback.f"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": "."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "In Python:"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "argument": "./code/results/extcallback_session.dat",
            "content": "",
            "name": "literalinclude",
            "options": [
              [
                "language",
                "python"
              ]
            ]
          },
          "type": "BlockDirective"
        }
      ],
      "title": "Call-back arguments"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "F2PY generated interfaces are very flexible with respect to call-back arguments.  For each call-back argument an additional optional argument "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "<name>_extra_args"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " is introduced by F2PY. This argument can be used to pass extra arguments to user provided call-back functions."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "If a F2PY generated wrapper function expects the following call-back argument::    "
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": "def fun(a_1,...,a_n):\n   ...\n   return x_1,...,x_k"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "but the following Python function"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": "def gun(b_1,...,b_m):\n   ...\n   return y_1,...,y_l"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "is provided by a user, and in addition,"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": "fun_extra_args = (e_1,...,e_p)"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "is used, then the following rules are applied when a Fortran or C function evaluates the call-back argument "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "gun"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ":"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "If "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "p == 0"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " then "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "gun(a_1, ..., a_q)"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " is called, here   "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "q = min(m, n)"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": "."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "If "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "n + p <= m"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " then "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "gun(a_1, ..., a_n, e_1, ..., e_p)"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " is called."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "If "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "p <= m < n + p"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " then "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "gun(a_1, ..., a_q, e_1, ..., e_p)"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " is called,   and here "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "q=m-p"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": "."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "If "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "p > m"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " then "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "gun(e_1, ..., e_m)"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " is called."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "If "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "n + p"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " is less than the number of required arguments to "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "gun"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " then an   exception is raised."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              }
            ]
          },
          "type": "BulletList"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "If the function "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "gun"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " may return any number of objects as a tuple; then the following rules are applied:"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "If "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "k < l"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": ", then "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "y_{k + 1}, ..., y_l"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " are ignored."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "If "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "k > l"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": ", then only "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "x_1, ..., x_l"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " are set."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              }
            ]
          },
          "type": "BulletList"
        }
      ],
      "title": "Resolving arguments to call-back functions"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "F2PY generates wrappers to "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "common"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " blocks defined in a routine signature block. Common blocks are visible to all Fortran codes linked to the current extension module, but not to other extension modules (this restriction is due to the way Python imports shared libraries). In Python, the F2PY wrappers to "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "common"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " blocks are "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "fortran"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " type objects that have (dynamic) attributes related to the data members of the common blocks. When accessed, these attributes return as NumPy array objects (multidimensional arrays are Fortran-contiguous) which directly link to data members in common blocks. Data members can be changed by direct assignment or by in-place changes to the corresponding array objects."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Consider the following Fortran 77 code:"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "argument": "./code/common.f",
            "content": "",
            "name": "literalinclude",
            "options": [
              [
                "language",
                "fortran"
              ]
            ]
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "and wrap it using "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "f2py -c -m common common.f"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": "."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "In Python:"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "argument": "./code/results/common_session.dat",
            "content": "",
            "name": "literalinclude",
            "options": [
              [
                "language",
                "python"
              ]
            ]
          },
          "type": "BlockDirective"
        }
      ],
      "title": "Common blocks"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "The F2PY interface to Fortran 90 module data is similar to the handling of Fortran 77 common blocks."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Consider the following Fortran 90 code:"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "argument": "./code/moddata.f90",
            "content": "",
            "name": "literalinclude",
            "options": [
              [
                "language",
                "fortran"
              ]
            ]
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "and wrap it using "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "f2py -c -m moddata moddata.f90"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": "."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "In Python:"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "argument": "./code/results/moddata_session.dat",
            "content": "",
            "name": "literalinclude",
            "options": [
              [
                "language",
                "python"
              ]
            ]
          },
          "type": "BlockDirective"
        }
      ],
      "title": "Fortran 90 module data"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "F2PY has basic support for Fortran 90 module allocatable arrays."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Consider the following Fortran 90 code:"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "argument": "./code/allocarr.f90",
            "content": "",
            "name": "literalinclude",
            "options": [
              [
                "language",
                "fortran"
              ]
            ]
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "and wrap it using "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "f2py -c -m allocarr allocarr.f90"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": "."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "In Python:"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "argument": "./code/results/allocarr_session.dat",
            "content": "",
            "name": "literalinclude",
            "options": [
              [
                "language",
                "python"
              ]
            ]
          },
          "type": "BlockDirective"
        }
      ],
      "title": "Allocatable arrays"
    }
  ],
  "example_section_data": {
    "children": [],
    "title": null
  },
  "item_file": null,
  "item_line": null,
  "item_type": null,
  "ordered_sections": [],
  "references": null,
  "refs": [],
  "see_also": [],
  "signature": {
    "value": null
  }
}