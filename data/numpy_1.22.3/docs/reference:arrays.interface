{
  "_content": {},
  "aliases": [],
  "arbitrary": [
    {
      "children": [
        {
          "data": {
            "argument": "",
            "content": "pair: array; interface\npair: array; protocol",
            "name": "index",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "placeholder": "target",
            "value": ".. _arrays.interface:"
          },
          "type": "Unimplemented"
        }
      ],
      "title": null
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "children": [
                    {
                      "data": {
                        "value": "This page describes the NumPy-specific API for accessing the contents of a NumPy array from other C extensions. "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "domain": null,
                        "role": "pep",
                        "value": "3118"
                      },
                      "type": "Directive"
                    },
                    {
                      "data": {
                        "value": " -- "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "domain": "c",
                        "role": "func",
                        "value": "The Revised Buffer Protocol <PyObject_GetBuffer>"
                      },
                      "type": "Directive"
                    },
                    {
                      "data": {
                        "value": " introduces similar, standardized API to Python 2.6 and 3.0 for any extension module to use. "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "domain": null,
                        "role": null,
                        "value": "Cython__"
                      },
                      "type": "Directive"
                    },
                    {
                      "data": {
                        "value": "'s buffer array support uses the "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "domain": null,
                        "role": "pep",
                        "value": "3118"
                      },
                      "type": "Directive"
                    },
                    {
                      "data": {
                        "value": " API; see the "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "domain": null,
                        "role": null,
                        "value": "Cython NumPy\ntutorial"
                      },
                      "type": "Directive"
                    },
                    {
                      "data": {
                        "value": ". Cython provides a way to write code that supports the buffer protocol with Python versions older than 2.6 because it has a backward-compatible implementation utilizing the array interface described here."
                      },
                      "type": "Words"
                    }
                  ]
                },
                "type": "Paragraph"
              }
            ],
            "kind": "note",
            "title": ""
          },
          "type": "Admonition"
        },
        {
          "data": {
            "placeholder": "target",
            "value": "__ http://cython.org/"
          },
          "type": "Unimplemented"
        },
        {
          "data": {
            "placeholder": "target",
            "value": "__ https://github.com/cython/cython/wiki/tutorials-numpy"
          },
          "type": "Unimplemented"
        },
        {
          "data": {
            "children": [
              {
                "body": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "3"
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "name": [
                  {
                    "data": {
                      "value": "version"
                    },
                    "type": "Words"
                  }
                ]
              }
            ]
          },
          "type": "FieldList"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "The array interface (sometimes called array protocol) was created in 2005 as a means for array-like Python objects to re-use each other's data buffers intelligently whenever possible. The homogeneous N-dimensional array interface is a default mechanism for objects to share N-dimensional array memory and information.  The interface consists of a Python-side and a C-side using two attributes.  Objects wishing to be considered an N-dimensional array in application code should support at least one of these attributes.  Objects wishing to support an N-dimensional array in application code should look for at least one of these attributes and use the information provided appropriately."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "This interface describes homogeneous arrays in the sense that each item of the array has the same \"type\".  This type can be very simple or it can be a quite arbitrary and complicated C-like structure."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "There are two ways to use the interface: A Python side and a C-side. Both are separate attributes."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "The array interface protocol"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "This approach to the interface consists of the object having an "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "~object.__array_interface__"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " attribute."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "argument": "object.__array_interface__",
            "content": "   A dictionary of items (3 required and 5 optional).  The optional\n   keys in the dictionary have implied defaults if they are not\n   provided.\n\n   The keys are:\n\n   **shape** (required)\n       Tuple whose elements are the array size in each dimension. Each\n       entry is an integer (a Python :py:class:`int`).  Note that these\n       integers could be larger than the platform ``int`` or ``long``\n       could hold (a Python :py:class:`int` is a C ``long``). It is up to the code\n       using this attribute to handle this appropriately; either by\n       raising an error when overflow is possible, or by using\n       ``long long`` as the C type for the shapes.\n\n   **typestr** (required)\n       A string providing the basic type of the homogeneous array The\n       basic string format consists of 3 parts: a character describing\n       the byteorder of the data (``<``: little-endian, ``>``:\n       big-endian, ``|``: not-relevant), a character code giving the\n       basic type of the array, and an integer providing the number of\n       bytes the type uses.\n\n       The basic type character codes are:\n\n       =====  ================================================================\n       ``t``  Bit field (following integer gives the number of\n              bits in the bit field).\n       ``b``  Boolean (integer type where all values are only ``True`` or\n              ``False``)\n       ``i``  Integer\n       ``u``  Unsigned integer\n       ``f``  Floating point\n       ``c``  Complex floating point\n       ``m``  Timedelta\n       ``M``  Datetime\n       ``O``  Object (i.e. the memory contains a pointer to :c:type:`PyObject`)\n       ``S``  String (fixed-length sequence of char)\n       ``U``  Unicode (fixed-length sequence of :c:type:`Py_UCS4`)\n       ``V``  Other (void \\* -- each item is a fixed-size chunk of memory)\n       =====  ================================================================\n\n   **descr** (optional)\n       A list of tuples providing a more detailed description of the\n       memory layout for each item in the homogeneous array.  Each\n       tuple in the list has two or three elements.  Normally, this\n       attribute would be used when *typestr* is ``V[0-9]+``, but this is\n       not a requirement.  The only requirement is that the number of\n       bytes represented in the *typestr* key is the same as the total\n       number of bytes represented here.  The idea is to support\n       descriptions of C-like structs that make up array\n       elements.  The elements of each tuple in the list are\n\n       1.  A string providing a name associated with this portion of\n           the datatype.  This could also be a tuple of ``('full name',\n\t   'basic_name')`` where basic name would be a valid Python\n           variable name representing the full name of the field.\n\n       2. Either a basic-type description string as in *typestr* or\n          another list (for nested structured types)\n\n       3. An optional shape tuple providing how many times this part\n          of the structure should be repeated.  No repeats are assumed\n          if this is not given.  Very complicated structures can be\n          described using this generic interface.  Notice, however,\n          that each element of the array is still of the same\n          data-type.  Some examples of using this interface are given\n          below.\n\n       **Default**: ``[('', typestr)]``\n\n   **data** (optional)\n       A 2-tuple whose first argument is an integer (a long integer\n       if necessary) that points to the data-area storing the array\n       contents.  This pointer must point to the first element of\n       data (in other words any offset is always ignored in this\n       case). The second entry in the tuple is a read-only flag (true\n       means the data area is read-only).\n\n       This attribute can also be an object exposing the\n       :ref:`buffer interface <bufferobjects>` which\n       will be used to share the data. If this key is not present (or\n       returns None), then memory sharing will be done\n       through the buffer interface of the object itself.  In this\n       case, the offset key can be used to indicate the start of the\n       buffer.  A reference to the object exposing the array interface\n       must be stored by the new object if the memory area is to be\n       secured.\n\n       **Default**: ``None``\n\n   **strides** (optional)\n       Either ``None`` to indicate a C-style contiguous array or\n       a tuple of strides which provides the number of bytes needed\n       to jump to the next array element in the corresponding\n       dimension. Each entry must be an integer (a Python\n       :py:class:`int`). As with shape, the values may\n       be larger than can be represented by a C ``int`` or ``long``; the\n       calling code should handle this appropriately, either by\n       raising an error, or by using ``long long`` in C. The\n       default is ``None`` which implies a C-style contiguous\n       memory buffer. In this model, the last dimension of the array\n       varies the fastest.  For example, the default strides tuple\n       for an object whose array entries are 8 bytes long and whose\n       shape is ``(10, 20, 30)`` would be ``(4800, 240, 8)``.\n\n       **Default**: ``None`` (C-style contiguous)\n\n   **mask** (optional)\n       ``None`` or an object exposing the array interface.  All\n       elements of the mask array should be interpreted only as true\n       or not true indicating which elements of this array are valid.\n       The shape of this object should be `\"broadcastable\"\n       <arrays.broadcasting.broadcastable>` to the shape of the\n       original array.\n\n       **Default**: ``None`` (All array values are valid)\n\n   **offset** (optional)\n       An integer offset into the array data region. This can only be\n       used when data is ``None`` or returns a :class:`buffer`\n       object.\n\n       **Default**: ``0``.\n\n   **version** (required)\n       An integer showing the version of the interface (i.e. 3 for\n       this version).  Be careful not to use this to invalidate\n       objects exposing future versions of the interface.",
            "name": "data",
            "options": []
          },
          "type": "BlockDirective"
        }
      ],
      "title": "Python side"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "This approach to the array interface allows for faster access to an array using only one attribute lookup and a well-defined C-structure."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "argument": "object.__array_struct__",
            "content": "A :c:type:`PyCapsule` whose ``pointer`` member contains a\npointer to a filled :c:type:`PyArrayInterface` structure.  Memory\nfor the structure is dynamically created and the :c:type:`PyCapsule`\nis also created with an appropriate destructor so the retriever of\nthis attribute simply has to apply :c:func:`Py_DECREF()` to the\nobject returned by this attribute when it is finished.  Also,\neither the data needs to be copied out, or a reference to the\nobject exposing this attribute must be held to ensure the data is\nnot freed.  Objects exposing the :obj:`__array_struct__` interface\nmust also not reallocate their memory if other objects are\nreferencing them.",
            "name": "data",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "The "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "PyArrayInterface"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " structure is defined in "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "numpy/ndarrayobject.h"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " as::    "
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": "typedef struct {\n  int two;              /* contains the integer 2 -- simple sanity check */\n  int nd;               /* number of dimensions */\n  char typekind;        /* kind in array --- character code of typestr */\n  int itemsize;         /* size of each element */\n  int flags;            /* flags indicating how the data should be interpreted */\n                        /*   must set ARR_HAS_DESCR bit to validate descr */\n  Py_intptr_t *shape;   /* A length-nd array of shape information */\n  Py_intptr_t *strides; /* A length-nd array of stride information */\n  void *data;           /* A pointer to the first element of the array */\n  PyObject *descr;      /* NULL or data-description (same as descr key\n                                of __array_interface__) -- must set ARR_HAS_DESCR\n                                flag or this will be ignored. */\n} PyArrayInterface;"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "The flags member may consist of 5 bits showing how the data should be interpreted and one bit showing how the Interface should be interpreted.  The data-bits are "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "NPY_ARRAY_C_CONTIGUOUS"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " (0x1), "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "NPY_ARRAY_F_CONTIGUOUS"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " (0x2), "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "NPY_ARRAY_ALIGNED"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " (0x100), "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "NPY_ARRAY_NOTSWAPPED"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " (0x200), and "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "NPY_ARRAY_WRITEABLE"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " (0x400).  A final flag "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "NPY_ARR_HAS_DESCR"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " (0x800) indicates whether or not this structure has the arrdescr field.  The field should not be accessed unless this flag is present."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "argument": "NPY_ARR_HAS_DESCR",
                  "content": "",
                  "name": "c:macro",
                  "options": []
                },
                "type": "BlockDirective"
              }
            ]
          },
          "type": "BlockQuote"
        },
        {
          "data": {
            "argument": "New since June 16, 2006:",
            "content": "In the past most implementations used the ``desc`` member of the ``PyCObject``\n(now :c:type:`PyCapsule`) itself (do not confuse this with the \"descr\" member of\nthe :c:type:`PyArrayInterface` structure above --- they are two separate\nthings) to hold the pointer to the object exposing the interface.\nThis is now an explicit part of the interface.  Be sure to take a\nreference to the object and call :c:func:`PyCapsule_SetContext` before\nreturning the :c:type:`PyCapsule`, and configure a destructor to decref this\nreference.",
            "name": "admonition",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "children": [
                    {
                      "data": {
                        "domain": null,
                        "role": "obj",
                        "value": "__array_struct__"
                      },
                      "type": "Directive"
                    },
                    {
                      "data": {
                        "value": " is considered legacy and should not be used for new code. Use the "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "domain": "py",
                        "role": "doc",
                        "value": "buffer protocol <c-api/buffer>"
                      },
                      "type": "Directive"
                    },
                    {
                      "data": {
                        "value": " or the DLPack protocol "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "domain": null,
                        "role": null,
                        "value": "numpy.from_dlpack"
                      },
                      "type": "Directive"
                    },
                    {
                      "data": {
                        "value": " instead."
                      },
                      "type": "Words"
                    }
                  ]
                },
                "type": "Paragraph"
              }
            ],
            "kind": "note",
            "title": ""
          },
          "type": "Admonition"
        }
      ],
      "title": "C-struct access"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "For clarity it is useful to provide some examples of the type description and corresponding "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "~object.__array_interface__"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " 'descr' entries.  Thanks to Scott Gilbert for these examples:"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "In every case, the 'descr' key is optional, but of course provides more information which may be important for various applications::       "
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": "* Float data\n    typestr == '>f4'\n    descr == [('','>f4')]\n\n* Complex double\n    typestr == '>c8'\n    descr == [('real','>f4'), ('imag','>f4')]\n\n* RGB Pixel data\n    typestr == '|V3'\n    descr == [('r','|u1'), ('g','|u1'), ('b','|u1')]\n\n* Mixed endian (weird but could happen).\n    typestr == '|V8' (or '>u8')\n    descr == [('big','>i4'), ('little','<i4')]\n\n* Nested structure\n    struct {\n        int ival;\n        struct {\n            unsigned short sval;\n            unsigned char bval;\n            unsigned char cval;\n        } sub;\n    }\n    typestr == '|V8' (or '<u8' if you want)\n    descr == [('ival','<i4'), ('sub', [('sval','<u2'), ('bval','|u1'), ('cval','|u1') ]) ]\n\n* Nested array\n    struct {\n        int ival;\n        double data[16*4];\n    }\n    typestr == '|V516'\n    descr == [('ival','>i4'), ('data','>f8',(16,4))]\n\n* Padded structure\n    struct {\n        int ival;\n        double dval;\n    }\n    typestr == '|V16'\n    descr == [('ival','>i4'),('','|V4'),('dval','>f8')]"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "It should be clear that any structured type could be described using this interface."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "Type description examples"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "The version 2 interface was very similar.  The differences were largely aesthetic.  In particular:"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "The PyArrayInterface structure had no descr member at the end    (and therefore no flag ARR_HAS_DESCR)"
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "The "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "context"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " member of the "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "PyCapsule"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " (formally the "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "desc"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": "    member of the "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "PyCObject"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": ") returned from "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "__array_struct__"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " was    not specified.  Usually, it was the object exposing the array (so    that a reference to it could be kept and destroyed when the    C-object was destroyed). It is now an explicit requirement that this field    be used in some way to hold a reference to the owning object."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  },
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "children": [
                              {
                                "data": {
                                  "value": "Until August 2020, this said:"
                                },
                                "type": "Words"
                              }
                            ]
                          },
                          "type": "Paragraph"
                        },
                        {
                          "data": {
                            "children": [
                              {
                                "data": {
                                  "children": [
                                    {
                                      "data": {
                                        "value": "Now it must be a tuple whose first element is a string with        \"PyArrayInterface Version #\" and whose second element is the object        exposing the array."
                                      },
                                      "type": "Words"
                                    }
                                  ]
                                },
                                "type": "Paragraph"
                              }
                            ]
                          },
                          "type": "BlockQuote"
                        },
                        {
                          "data": {
                            "children": [
                              {
                                "data": {
                                  "children": [
                                    {
                                      "data": {
                                        "value": "This design was retracted almost immediately after it was proposed, in    <https://mail.python.org/pipermail/numpy-discussion/2006-June/020995.html>.    Despite 14 years of documentation to the contrary, at no point was it    valid to assume that "
                                      },
                                      "type": "Words"
                                    },
                                    {
                                      "data": {
                                        "value": [
                                          "__array_interface__"
                                        ]
                                      },
                                      "type": "Verbatim"
                                    },
                                    {
                                      "data": {
                                        "value": " capsules held this tuple    content."
                                      },
                                      "type": "Words"
                                    }
                                  ]
                                },
                                "type": "Paragraph"
                              }
                            ]
                          },
                          "type": "BlockQuote"
                        }
                      ],
                      "kind": "note",
                      "title": ""
                    },
                    "type": "Admonition"
                  }
                ]
              },
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "The tuple returned from "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "__array_interface__['data']"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " used to be a    hex-string (now it is an integer or a long integer)."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "There was no "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "__array_interface__"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " attribute instead all of the keys    (except for version) in the "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "__array_interface__"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " dictionary were    their own attribute: Thus to obtain the Python-side information you    had to access separately the attributes:"
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  },
                  {
                    "data": {
                      "children": [
                        {
                          "children": [
                            {
                              "data": {
                                "children": [
                                  {
                                    "data": {
                                      "value": [
                                        "__array_data__"
                                      ]
                                    },
                                    "type": "Verbatim"
                                  }
                                ]
                              },
                              "type": "Paragraph"
                            }
                          ]
                        },
                        {
                          "children": [
                            {
                              "data": {
                                "children": [
                                  {
                                    "data": {
                                      "value": [
                                        "__array_shape__"
                                      ]
                                    },
                                    "type": "Verbatim"
                                  }
                                ]
                              },
                              "type": "Paragraph"
                            }
                          ]
                        },
                        {
                          "children": [
                            {
                              "data": {
                                "children": [
                                  {
                                    "data": {
                                      "value": [
                                        "__array_strides__"
                                      ]
                                    },
                                    "type": "Verbatim"
                                  }
                                ]
                              },
                              "type": "Paragraph"
                            }
                          ]
                        },
                        {
                          "children": [
                            {
                              "data": {
                                "children": [
                                  {
                                    "data": {
                                      "value": [
                                        "__array_typestr__"
                                      ]
                                    },
                                    "type": "Verbatim"
                                  }
                                ]
                              },
                              "type": "Paragraph"
                            }
                          ]
                        },
                        {
                          "children": [
                            {
                              "data": {
                                "children": [
                                  {
                                    "data": {
                                      "value": [
                                        "__array_descr__"
                                      ]
                                    },
                                    "type": "Verbatim"
                                  }
                                ]
                              },
                              "type": "Paragraph"
                            }
                          ]
                        },
                        {
                          "children": [
                            {
                              "data": {
                                "children": [
                                  {
                                    "data": {
                                      "value": [
                                        "__array_offset__"
                                      ]
                                    },
                                    "type": "Verbatim"
                                  }
                                ]
                              },
                              "type": "Paragraph"
                            }
                          ]
                        },
                        {
                          "children": [
                            {
                              "data": {
                                "children": [
                                  {
                                    "data": {
                                      "value": [
                                        "__array_mask__"
                                      ]
                                    },
                                    "type": "Verbatim"
                                  }
                                ]
                              },
                              "type": "Paragraph"
                            }
                          ]
                        }
                      ]
                    },
                    "type": "BulletList"
                  }
                ]
              }
            ]
          },
          "type": "EnumeratedList"
        }
      ],
      "title": "Differences with Array interface (Version 2)"
    }
  ],
  "example_section_data": {
    "children": [],
    "title": null
  },
  "item_file": null,
  "item_line": null,
  "item_type": null,
  "ordered_sections": [],
  "references": null,
  "see_also": [],
  "signature": {
    "value": null
  }
}