{
  "_content": {},
  "aliases": [],
  "arbitrary": [
    {
      "children": [
        {
          "data": {
            "argument": "Travis E. Oliphant",
            "content": "",
            "name": "sectionauthor",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "When NumPy is built, information about system configuration is recorded, and is made available for extension modules using NumPy's C API.  These are mostly defined in "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "numpyconfig.h"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " (included in "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "ndarrayobject.h"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": "). The public symbols are prefixed by "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "NPY_*"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ". NumPy also offers some functions for querying information about the platform in use."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "For private use, NumPy also constructs a "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "config.h"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " in the NumPy include directory, which is not exported by NumPy (that is a python extension which use the numpy C API will not see those symbols), to avoid namespace pollution."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "System configuration"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "The "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "NPY_SIZEOF_{CTYPE}"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " constants are defined so that sizeof information is available to the pre-processor."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "argument": "NPY_SIZEOF_SHORT",
            "content": "sizeof(short)",
            "name": "c:macro",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "NPY_SIZEOF_INT",
            "content": "sizeof(int)",
            "name": "c:macro",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "NPY_SIZEOF_LONG",
            "content": "sizeof(long)",
            "name": "c:macro",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "NPY_SIZEOF_LONGLONG",
            "content": "sizeof(longlong) where longlong is defined appropriately on the\nplatform.",
            "name": "c:macro",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "NPY_SIZEOF_PY_LONG_LONG",
            "content": "",
            "name": "c:macro",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "NPY_SIZEOF_FLOAT",
            "content": "sizeof(float)",
            "name": "c:macro",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "NPY_SIZEOF_DOUBLE",
            "content": "sizeof(double)",
            "name": "c:macro",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "NPY_SIZEOF_LONG_DOUBLE",
            "content": "",
            "name": "c:macro",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "NPY_SIZEOF_LONGDOUBLE",
            "content": "sizeof(longdouble)",
            "name": "c:macro",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "NPY_SIZEOF_PY_INTPTR_T",
            "content": "",
            "name": "c:macro",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "NPY_SIZEOF_INTP",
            "content": "Size of a pointer on this platform (sizeof(void \\*))",
            "name": "c:macro",
            "options": []
          },
          "type": "BlockDirective"
        }
      ],
      "title": "Data type sizes"
    },
    {
      "children": [
        {
          "data": {
            "argument": "NPY_CPU_X86",
            "content": "",
            "name": "c:macro",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "NPY_CPU_AMD64",
            "content": "",
            "name": "c:macro",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "NPY_CPU_IA64",
            "content": "",
            "name": "c:macro",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "NPY_CPU_PPC",
            "content": "",
            "name": "c:macro",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "NPY_CPU_PPC64",
            "content": "",
            "name": "c:macro",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "NPY_CPU_SPARC",
            "content": "",
            "name": "c:macro",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "NPY_CPU_SPARC64",
            "content": "",
            "name": "c:macro",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "NPY_CPU_S390",
            "content": "",
            "name": "c:macro",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "NPY_CPU_PARISC",
            "content": ".. versionadded:: 1.3.0\n\nCPU architecture of the platform; only one of the above is\ndefined.\n\nDefined in ``numpy/npy_cpu.h``",
            "name": "c:macro",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "NPY_LITTLE_ENDIAN",
            "content": "",
            "name": "c:macro",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "NPY_BIG_ENDIAN",
            "content": "",
            "name": "c:macro",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "NPY_BYTE_ORDER",
            "content": ".. versionadded:: 1.3.0\n\nPortable alternatives to the ``endian.h`` macros of GNU Libc.\nIf big endian, :c:data:`NPY_BYTE_ORDER` == :c:data:`NPY_BIG_ENDIAN`, and\nsimilarly for little endian architectures.\n\nDefined in ``numpy/npy_endian.h``.",
            "name": "c:macro",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "int PyArray_GetEndianness()",
            "content": ".. versionadded:: 1.3.0\n\nReturns the endianness of the current platform.\nOne of :c:data:`NPY_CPU_BIG`, :c:data:`NPY_CPU_LITTLE`,\nor :c:data:`NPY_CPU_UNKNOWN_ENDIAN`.\n\n.. c:macro:: NPY_CPU_BIG\n\n.. c:macro:: NPY_CPU_LITTLE\n\n.. c:macro:: NPY_CPU_UNKNOWN_ENDIAN",
            "name": "c:function",
            "options": []
          },
          "type": "BlockDirective"
        }
      ],
      "title": "Platform information"
    },
    {
      "children": [
        {
          "data": {
            "argument": "NPY_LIKELY",
            "content": "",
            "name": "c:macro",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "NPY_UNLIKELY",
            "content": "",
            "name": "c:macro",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "NPY_UNUSED",
            "content": "",
            "name": "c:macro",
            "options": []
          },
          "type": "BlockDirective"
        }
      ],
      "title": "Compiler directives"
    },
    {
      "children": [
        {
          "data": {
            "argument": "NPY_INTERRUPT_H",
            "content": "",
            "name": "c:macro",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "NPY_SIGSETJMP",
            "content": "",
            "name": "c:macro",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "NPY_SIGLONGJMP",
            "content": "",
            "name": "c:macro",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "NPY_SIGJMP_BUF",
            "content": "",
            "name": "c:macro",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "NPY_SIGINT_ON",
            "content": "",
            "name": "c:macro",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "NPY_SIGINT_OFF",
            "content": "",
            "name": "c:macro",
            "options": []
          },
          "type": "BlockDirective"
        }
      ],
      "title": "Interrupt Handling"
    }
  ],
  "example_section_data": {
    "children": [],
    "title": null
  },
  "item_file": null,
  "item_line": null,
  "item_type": null,
  "ordered_sections": [],
  "references": null,
  "see_also": [],
  "signature": {
    "value": null
  }
}