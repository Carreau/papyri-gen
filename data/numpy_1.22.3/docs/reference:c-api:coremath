{
  "_content": {},
  "aliases": [],
  "arbitrary": [
    {
      "children": [
        {
          "data": {
            "args0": [],
            "directive_name": "sectionauthor",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "David Cournapeau "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "children": [
              {
                "inline": [
                  {
                    "data": {
                      "value": "1.3.0 "
                    },
                    "type": "Words"
                  }
                ],
                "inner": []
              }
            ],
            "kind": "versionadded",
            "title": "TODO"
          },
          "type": "Admonition"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Starting from numpy 1.3.0, we are working on separating the pure C, \"computational\" code from the python dependent code. The goal is twofolds: making the code cleaner, and enabling code reuse by other extensions outside numpy (scipy, etc...)."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": "NumPy core libraries"
    },
    {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "The numpy core math library ('npymath') is a first step in this direction. This library contains most math-related C99 functionality, which can be used on platforms where C99 is not well supported. The core math functions have the same API as the C99 ones, except for the npy_* prefix."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "The available functions are defined in <numpy/npy_math.h> - please refer to this header when in doubt."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": "NumPy core math library"
    },
    {
      "children": [
        {
          "data": {
            "args0": [
              "NPY_NAN"
            ],
            "directive_name": "c:macro",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "This macro is defined to a NaN ( Not a Number), and is guaranteed to have the signbit unset ( ' positive ' NaN). The corresponding single and extension precision macro are available with the suffix F and L. "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [
              "NPY_INFINITY"
            ],
            "directive_name": "c:macro",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "This macro is defined to a positive inf. The corresponding single and extension precision macro are available with the suffix F and L. "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [
              "NPY_PZERO"
            ],
            "directive_name": "c:macro",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "This macro is defined to positive zero. The corresponding single and extension precision macro are available with the suffix F and L. "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [
              "NPY_NZERO"
            ],
            "directive_name": "c:macro",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "This macro is defined to negative zero ( that is with the sign bit set). The corresponding single and extension precision macro are available with the suffix F and L. "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [
              "npy_isnan(x)"
            ],
            "directive_name": "c:macro",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "This is a macro, and is equivalent to C99 isnan : works for single, double and extended precision, and return a non 0 value if x is a NaN. "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [
              "npy_isfinite(x)"
            ],
            "directive_name": "c:macro",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "This is a macro, and is equivalent to C99 isfinite : works for single, double and extended precision, and return a non 0 value if x is neither a NaN nor an infinity. "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [
              "npy_isinf(x)"
            ],
            "directive_name": "c:macro",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "This is a macro, and is equivalent to C99 isinf : works for single, double and extended precision, and return a non 0 value if x is infinite ( positive and negative). "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [
              "npy_signbit(x)"
            ],
            "directive_name": "c:macro",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "This is a macro, and is equivalent to C99 signbit : works for single, double and extended precision, and return a non 0 value if x has the signbit set ( that is the number is negative). "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [
              "npy_copysign(x, y)"
            ],
            "directive_name": "c:macro",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "This is a function equivalent to C99 copysign : return x with the same sign as y. Works for any value, including inf and nan. Single and extended precisions are available with suffix f and l. .. versionadded : : 1.4.0 "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        }
      ],
      "title": "Floating point classification"
    },
    {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "The following math constants are available in "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "npy_math.h"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ". Single and extended precision are also available by adding the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "f"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " and "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "l"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " suffixes respectively."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "args0": [
              "NPY_E"
            ],
            "directive_name": "c:macro",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "Base of natural logarithm ( : math : `e`) "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [
              "NPY_LOG2E"
            ],
            "directive_name": "c:macro",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "Logarithm to base 2 of the Euler constant ( : math : `\\frac { \\ln ( e)} { \\ln ( 2)}`) "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [
              "NPY_LOG10E"
            ],
            "directive_name": "c:macro",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "Logarithm to base 10 of the Euler constant ( : math : `\\frac { \\ln ( e)} { \\ln ( 10)}`) "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [
              "NPY_LOGE2"
            ],
            "directive_name": "c:macro",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "Natural logarithm of 2 ( : math : `\\ln ( 2)`) "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [
              "NPY_LOGE10"
            ],
            "directive_name": "c:macro",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "Natural logarithm of 10 ( : math : `\\ln ( 10)`) "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [
              "NPY_PI"
            ],
            "directive_name": "c:macro",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "Pi ( : math : `\\pi`) "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [
              "NPY_PI_2"
            ],
            "directive_name": "c:macro",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "Pi divided by 2 ( : math : `\\frac { \\pi} { 2}`) "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [
              "NPY_PI_4"
            ],
            "directive_name": "c:macro",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "Pi divided by 4 ( : math : `\\frac { \\pi} { 4}`) "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [
              "NPY_1_PI"
            ],
            "directive_name": "c:macro",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "Reciprocal of pi ( : math : `\\frac { 1} { \\pi}`) "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [
              "NPY_2_PI"
            ],
            "directive_name": "c:macro",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "Two times the reciprocal of pi ( : math : `\\frac { 2} { \\pi}`) "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [
              "NPY_EULER"
            ],
            "directive_name": "c:macro",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "The Euler constant : math : `\\lim_ { n\\rightarrow\\infty} ( { \\sum_ { k=1}^n { \\frac { 1} { k}} - \\ln n})` "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        }
      ],
      "title": "Useful math constants"
    },
    {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Those can be useful for precise floating point comparison."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "args0": [
              "double npy_nextafter(double x, double y)"
            ],
            "directive_name": "c:function",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "This is a function equivalent to C99 nextafter : return next representable floating point value from x in the direction of y. Single and extended precisions are available with suffix f and l. .. versionadded : : 1.4.0 "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [
              "double npy_spacing(double x)"
            ],
            "directive_name": "c:function",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "This is a function equivalent to Fortran intrinsic. Return distance between x and next representable floating point value from x, e.g. spacing ( 1) == eps. spacing of nan and + / - inf return nan. Single and extended precisions are available with suffix f and l. .. versionadded : : 1.4.0 "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [
              "void npy_set_floatstatus_divbyzero()"
            ],
            "directive_name": "c:function",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "Set the divide by zero floating point exception .. versionadded : : 1.6.0 "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [
              "void npy_set_floatstatus_overflow()"
            ],
            "directive_name": "c:function",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "Set the overflow floating point exception .. versionadded : : 1.6.0 "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [
              "void npy_set_floatstatus_underflow()"
            ],
            "directive_name": "c:function",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "Set the underflow floating point exception .. versionadded : : 1.6.0 "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [
              "void npy_set_floatstatus_invalid()"
            ],
            "directive_name": "c:function",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "Set the invalid floating point exception .. versionadded : : 1.6.0 "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [
              "int npy_get_floatstatus()"
            ],
            "directive_name": "c:function",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "Get floating point status. Returns a bitmask with following possible flags : * NPY_FPE_DIVIDEBYZERO * NPY_FPE_OVERFLOW * NPY_FPE_UNDERFLOW * NPY_FPE_INVALID Note that : c : func : `npy_get_floatstatus_barrier` is preferable as it prevents aggressive compiler optimizations reordering the call relative to the code setting the status, which could lead to incorrect results. .. versionadded : : 1.9.0 "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [
              "int npy_get_floatstatus_barrier(char*)"
            ],
            "directive_name": "c:function",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "Get floating point status. A pointer to a local variable is passed in to prevent aggressive compiler optimizations from reordering this function call relative to the code setting the status, which could lead to incorrect results. Returns a bitmask with following possible flags : * NPY_FPE_DIVIDEBYZERO * NPY_FPE_OVERFLOW * NPY_FPE_UNDERFLOW * NPY_FPE_INVALID .. versionadded : : 1.15.0 "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [
              "int npy_clear_floatstatus()"
            ],
            "directive_name": "c:function",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "Clears the floating point status. Returns the previous status mask. Note that : c : func : `npy_clear_floatstatus_barrier` is preferable as it prevents aggressive compiler optimizations reordering the call relative to the code setting the status, which could lead to incorrect results. .. versionadded : : 1.9.0 "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [
              "int npy_clear_floatstatus_barrier(char*)"
            ],
            "directive_name": "c:function",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "Clears the floating point status. A pointer to a local variable is passed in to prevent aggressive compiler optimizations from reordering this function call. Returns the previous status mask. .. versionadded : : 1.15.0 "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        }
      ],
      "title": "Low-level floating point manipulation"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "inline": [
                  {
                    "data": {
                      "value": "1.4.0 "
                    },
                    "type": "Words"
                  }
                ],
                "inner": []
              }
            ],
            "kind": "versionadded",
            "title": "TODO"
          },
          "type": "Admonition"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "C99-like complex functions have been added. Those can be used if you wish to implement portable C extensions. Since we still support platforms without C99 complex type, you need to restrict to C90-compatible syntax, e.g.:"
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "args0": [
              "c"
            ],
            "directive_name": "code-block",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "/ * a = 1 + 2i \\* / npy_complex a = npy_cpack ( 1, 2); npy_complex b; b = npy_log ( a); "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        }
      ],
      "title": "Complex functions"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "inline": [
                  {
                    "data": {
                      "value": "1.4.0 "
                    },
                    "type": "Words"
                  }
                ],
                "inner": []
              }
            ],
            "kind": "versionadded",
            "title": "TODO"
          },
          "type": "Admonition"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "To use the core math library in your own extension, you need to add the npymath compile and link options to your extension in your setup.py:"
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": [
              ".. hidden in a comment so as to be included in refguide but not rendered documentation",
              "        >>> import numpy.distutils.misc_util",
              "        >>> config = np.distutils.misc_util.Configuration(None, '', '.')",
              "        >>> with open('foo.c', 'w') as f: pass",
              "",
              ">>> from numpy.distutils.misc_util import get_info",
              ">>> info = get_info('npymath')",
              ">>> _ = config.add_extension('foo', sources=['foo.c'], extra_info=info)"
            ]
          },
          "type": "BlockQuote"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "In other words, the usage of info is exactly the same as when using blas_info and co."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": "Linking against the core math library in an extension"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "inline": [
                  {
                    "data": {
                      "value": "1.6.0 "
                    },
                    "type": "Words"
                  }
                ],
                "inner": []
              }
            ],
            "kind": "versionadded",
            "title": "TODO"
          },
          "type": "Admonition"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "The header file <numpy/halffloat.h> provides functions to work with IEEE 754-2008 16-bit floating point values. While this format is not typically used for numerical computations, it is useful for storing values which require floating point but do not need much precision. It can also be used as an educational tool to understand the nature of floating point round-off error."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Like for other types, NumPy includes a typedef npy_half for the 16 bit float.  Unlike for most of the other types, you cannot use this as a normal type in C, since it is a typedef for npy_uint16.  For example, 1.0 looks like 0x3c00 to C, and if you do an equality comparison between the different signed zeros, you will get -0.0 != 0.0 (0x8000 != 0x0000), which is incorrect."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "For these reasons, NumPy provides an API to work with npy_half values accessible by including <numpy/halffloat.h> and linking to 'npymath'. For functions that are not provided directly, such as the arithmetic operations, the preferred method is to convert to float or double and back again, as in the following example."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "args0": [
              "c"
            ],
            "directive_name": "code-block",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "npy_half sum ( int n, npy_half *array) { float ret = 0; while ( n - - ) { ret += npy_half_to_float ( *array++); } return npy_float_to_half ( ret); } "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "External Links:"
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "value": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "domain": null,
                            "role": null,
                            "value": "754-2008 IEEE Standard for Floating-Point Arithmetic"
                          },
                          "type": "Directive"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "value": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "domain": null,
                            "role": null,
                            "value": "Half-precision Float Wikipedia Article"
                          },
                          "type": "Directive"
                        },
                        {
                          "data": {
                            "value": "."
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "value": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "domain": null,
                            "role": null,
                            "value": "OpenGL Half Float Pixel Support"
                          },
                          "type": "Directive"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "value": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "domain": null,
                            "role": null,
                            "value": "The OpenEXR image format"
                          },
                          "type": "Directive"
                        },
                        {
                          "data": {
                            "value": "."
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ]
              }
            ]
          },
          "type": "BulletList"
        },
        {
          "data": {
            "placeholder": "target",
            "value": "__ https://ieeexplore.ieee.org/document/4610935/"
          },
          "type": "Unimplemented"
        },
        {
          "data": {
            "placeholder": "target",
            "value": "__ https://en.wikipedia.org/wiki/Half-precision_floating-point_format"
          },
          "type": "Unimplemented"
        },
        {
          "data": {
            "placeholder": "target",
            "value": "__ https://www.khronos.org/registry/OpenGL/extensions/ARB/ARB_half_float_pixel.txt"
          },
          "type": "Unimplemented"
        },
        {
          "data": {
            "placeholder": "target",
            "value": "__ https://www.openexr.com/about.html"
          },
          "type": "Unimplemented"
        },
        {
          "data": {
            "args0": [
              "NPY_HALF_ZERO"
            ],
            "directive_name": "c:macro",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "This macro is defined to positive zero. "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [
              "NPY_HALF_PZERO"
            ],
            "directive_name": "c:macro",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "This macro is defined to positive zero. "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [
              "NPY_HALF_NZERO"
            ],
            "directive_name": "c:macro",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "This macro is defined to negative zero. "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [
              "NPY_HALF_ONE"
            ],
            "directive_name": "c:macro",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "This macro is defined to 1.0. "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [
              "NPY_HALF_NEGONE"
            ],
            "directive_name": "c:macro",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "This macro is defined to - 1.0. "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [
              "NPY_HALF_PINF"
            ],
            "directive_name": "c:macro",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "This macro is defined to +inf. "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [
              "NPY_HALF_NINF"
            ],
            "directive_name": "c:macro",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "This macro is defined to - inf. "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [
              "NPY_HALF_NAN"
            ],
            "directive_name": "c:macro",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "This macro is defined to a NaN value, guaranteed to have its sign bit unset. "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [
              "float npy_half_to_float(npy_half h)"
            ],
            "directive_name": "c:function",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "Converts a half - precision float to a single - precision float. "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [
              "double npy_half_to_double(npy_half h)"
            ],
            "directive_name": "c:function",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "Converts a half - precision float to a double - precision float. "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [
              "npy_half npy_float_to_half(float f)"
            ],
            "directive_name": "c:function",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "Converts a single - precision float to a half - precision float. The value is rounded to the nearest representable half, with ties going to the nearest even. If the value is too small or too big, the system ' s floating point underflow or overflow bit will be set. "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [
              "npy_half npy_double_to_half(double d)"
            ],
            "directive_name": "c:function",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "Converts a double - precision float to a half - precision float. The value is rounded to the nearest representable half, with ties going to the nearest even. If the value is too small or too big, the system ' s floating point underflow or overflow bit will be set. "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [
              "int npy_half_eq(npy_half h1, npy_half h2)"
            ],
            "directive_name": "c:function",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "Compares two half - precision floats ( h1 == h2). "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [
              "int npy_half_ne(npy_half h1, npy_half h2)"
            ],
            "directive_name": "c:function",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "Compares two half - precision floats ( h1 != h2). "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [
              "int npy_half_le(npy_half h1, npy_half h2)"
            ],
            "directive_name": "c:function",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "Compares two half - precision floats ( h1 < = h2). "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [
              "int npy_half_lt(npy_half h1, npy_half h2)"
            ],
            "directive_name": "c:function",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "Compares two half - precision floats ( h1 < h2). "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [
              "int npy_half_ge(npy_half h1, npy_half h2)"
            ],
            "directive_name": "c:function",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "Compares two half - precision floats ( h1 >= h2). "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [
              "int npy_half_gt(npy_half h1, npy_half h2)"
            ],
            "directive_name": "c:function",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "Compares two half - precision floats ( h1 > h2). "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [
              "int npy_half_eq_nonan(npy_half h1, npy_half h2)"
            ],
            "directive_name": "c:function",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "Compares two half - precision floats that are known to not be NaN ( h1 == h2). If a value is NaN, the result is undefined. "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [
              "int npy_half_lt_nonan(npy_half h1, npy_half h2)"
            ],
            "directive_name": "c:function",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "Compares two half - precision floats that are known to not be NaN ( h1 < h2). If a value is NaN, the result is undefined. "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [
              "int npy_half_le_nonan(npy_half h1, npy_half h2)"
            ],
            "directive_name": "c:function",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "Compares two half - precision floats that are known to not be NaN ( h1 < = h2). If a value is NaN, the result is undefined. "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [
              "int npy_half_iszero(npy_half h)"
            ],
            "directive_name": "c:function",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "Tests whether the half - precision float has a value equal to zero. This may be slightly faster than calling npy_half_eq ( h, NPY_ZERO). "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [
              "int npy_half_isnan(npy_half h)"
            ],
            "directive_name": "c:function",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "Tests whether the half - precision float is a NaN. "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [
              "int npy_half_isinf(npy_half h)"
            ],
            "directive_name": "c:function",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "Tests whether the half - precision float is plus or minus Inf. "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [
              "int npy_half_isfinite(npy_half h)"
            ],
            "directive_name": "c:function",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "Tests whether the half - precision float is finite ( not NaN or Inf). "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [
              "int npy_half_signbit(npy_half h)"
            ],
            "directive_name": "c:function",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "Returns 1 is h is negative, 0 otherwise. "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [
              "npy_half npy_half_copysign(npy_half x, npy_half y)"
            ],
            "directive_name": "c:function",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "Returns the value of x with the sign bit copied from y. Works for any value, including Inf and NaN. "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [
              "npy_half npy_half_spacing(npy_half h)"
            ],
            "directive_name": "c:function",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "This is the same for half - precision float as npy_spacing and npy_spacingf described in the low - level floating point section. "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [
              "npy_half npy_half_nextafter(npy_half x, npy_half y)"
            ],
            "directive_name": "c:function",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "This is the same for half - precision float as npy_nextafter and npy_nextafterf described in the low - level floating point section. "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [
              "npy_uint16 npy_floatbits_to_halfbits(npy_uint32 f)"
            ],
            "directive_name": "c:function",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "Low - level function which converts a 32 - bit single - precision float, stored as a uint32, into a 16 - bit half - precision float. "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [
              "npy_uint16 npy_doublebits_to_halfbits(npy_uint64 d)"
            ],
            "directive_name": "c:function",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "Low - level function which converts a 64 - bit double - precision float, stored as a uint64, into a 16 - bit half - precision float. "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [
              "npy_uint32 npy_halfbits_to_floatbits(npy_uint16 h)"
            ],
            "directive_name": "c:function",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "Low - level function which converts a 16 - bit half - precision float into a 32 - bit single - precision float, stored as a uint32. "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [
              "npy_uint64 npy_halfbits_to_doublebits(npy_uint16 h)"
            ],
            "directive_name": "c:function",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "Low - level function which converts a 16 - bit half - precision float into a 64 - bit double - precision float, stored as a uint64. "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        }
      ],
      "title": "Half-precision functions"
    }
  ],
  "example_section_data": {
    "children": [],
    "title": null
  },
  "item_file": null,
  "item_line": null,
  "item_type": null,
  "ordered_sections": [],
  "references": null,
  "refs": [],
  "see_also": [],
  "signature": {
    "value": null
  }
}