{
  "aliases": [],
  "arbitrary": [
    {
      "children": [
        {
          "data": {
            "argument": "Travis E. Oliphant",
            "content": "",
            "name": "sectionauthor",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "The standard array can have 24 different data types (and has some support for adding your own types). These data types all have an enumerated type, an enumerated type-character, and a corresponding array scalar Python type object (placed in a hierarchy). There are also standard C typedefs to make it easier to manipulate elements of the given data type. For the numeric types, there are also bit-width equivalent C typedefs and named typenumbers that make it easier to select the precision desired."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "children": [
                    {
                      "data": {
                        "value": "The names for the types in c code follows c naming conventions more closely. The Python names for these types follow Python conventions.  Thus, "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "domain": "c",
                        "role": "data",
                        "value": "NPY_FLOAT"
                      },
                      "type": "Directive"
                    },
                    {
                      "data": {
                        "value": " picks up a 32-bit float in C, but "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "domain": null,
                        "role": "class",
                        "value": "numpy.float_"
                      },
                      "type": "Directive"
                    },
                    {
                      "data": {
                        "value": " in Python corresponds to a 64-bit double. The bit-width names can be used in both Python and C for clarity."
                      },
                      "type": "Words"
                    }
                  ]
                },
                "type": "Paragraph"
              }
            ],
            "kind": "warning",
            "title": ""
          },
          "type": "Admonition"
        }
      ],
      "title": "Data Type API"
    },
    {
      "children": [
        {
          "data": {
            "argument": "NPY_TYPES",
            "content": "",
            "name": "c:enumerator",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "There is a list of enumerated types defined providing the basic 24 data types plus some useful generic names. Whenever the code requires a type number, one of these enumerated types is requested. The types are all called "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "NPY_{NAME}"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ":"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "argument": "NPY_BOOL",
            "content": "The enumeration value for the boolean type, stored as one byte.\nIt may only be set to the values 0 and 1.",
            "name": "c:enumerator",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "NPY_BYTE",
            "content": "",
            "name": "c:enumerator",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "NPY_INT8",
            "content": "The enumeration value for an 8-bit/1-byte signed integer.",
            "name": "c:enumerator",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "NPY_SHORT",
            "content": "",
            "name": "c:enumerator",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "NPY_INT16",
            "content": "The enumeration value for a 16-bit/2-byte signed integer.",
            "name": "c:enumerator",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "NPY_INT",
            "content": "",
            "name": "c:enumerator",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "NPY_INT32",
            "content": "The enumeration value for a 32-bit/4-byte signed integer.",
            "name": "c:enumerator",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "NPY_LONG",
            "content": "Equivalent to either NPY_INT or NPY_LONGLONG, depending on the\nplatform.",
            "name": "c:enumerator",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "NPY_LONGLONG",
            "content": "",
            "name": "c:enumerator",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "NPY_INT64",
            "content": "The enumeration value for a 64-bit/8-byte signed integer.",
            "name": "c:enumerator",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "NPY_UBYTE",
            "content": "",
            "name": "c:enumerator",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "NPY_UINT8",
            "content": "The enumeration value for an 8-bit/1-byte unsigned integer.",
            "name": "c:enumerator",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "NPY_USHORT",
            "content": "",
            "name": "c:enumerator",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "NPY_UINT16",
            "content": "The enumeration value for a 16-bit/2-byte unsigned integer.",
            "name": "c:enumerator",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "NPY_UINT",
            "content": "",
            "name": "c:enumerator",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "NPY_UINT32",
            "content": "The enumeration value for a 32-bit/4-byte unsigned integer.",
            "name": "c:enumerator",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "NPY_ULONG",
            "content": "Equivalent to either NPY_UINT or NPY_ULONGLONG, depending on the\nplatform.",
            "name": "c:enumerator",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "NPY_ULONGLONG",
            "content": "",
            "name": "c:enumerator",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "NPY_UINT64",
            "content": "The enumeration value for a 64-bit/8-byte unsigned integer.",
            "name": "c:enumerator",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "NPY_HALF",
            "content": "",
            "name": "c:enumerator",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "NPY_FLOAT16",
            "content": "The enumeration value for a 16-bit/2-byte IEEE 754-2008 compatible floating\npoint type.",
            "name": "c:enumerator",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "NPY_FLOAT",
            "content": "",
            "name": "c:enumerator",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "NPY_FLOAT32",
            "content": "The enumeration value for a 32-bit/4-byte IEEE 754 compatible floating\npoint type.",
            "name": "c:enumerator",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "NPY_DOUBLE",
            "content": "",
            "name": "c:enumerator",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "NPY_FLOAT64",
            "content": "The enumeration value for a 64-bit/8-byte IEEE 754 compatible floating\npoint type.",
            "name": "c:enumerator",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "NPY_LONGDOUBLE",
            "content": "The enumeration value for a platform-specific floating point type which is\nat least as large as NPY_DOUBLE, but larger on many platforms.",
            "name": "c:enumerator",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "NPY_CFLOAT",
            "content": "",
            "name": "c:enumerator",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "NPY_COMPLEX64",
            "content": "The enumeration value for a 64-bit/8-byte complex type made up of\ntwo NPY_FLOAT values.",
            "name": "c:enumerator",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "NPY_CDOUBLE",
            "content": "",
            "name": "c:enumerator",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "NPY_COMPLEX128",
            "content": "The enumeration value for a 128-bit/16-byte complex type made up of\ntwo NPY_DOUBLE values.",
            "name": "c:enumerator",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "NPY_CLONGDOUBLE",
            "content": "The enumeration value for a platform-specific complex floating point\ntype which is made up of two NPY_LONGDOUBLE values.",
            "name": "c:enumerator",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "NPY_DATETIME",
            "content": "The enumeration value for a data type which holds dates or datetimes with\na precision based on selectable date or time units.",
            "name": "c:enumerator",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "NPY_TIMEDELTA",
            "content": "The enumeration value for a data type which holds lengths of times in\nintegers of selectable date or time units.",
            "name": "c:enumerator",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "NPY_STRING",
            "content": "The enumeration value for ASCII strings of a selectable size. The\nstrings have a fixed maximum size within a given array.",
            "name": "c:enumerator",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "NPY_UNICODE",
            "content": "The enumeration value for UCS4 strings of a selectable size. The\nstrings have a fixed maximum size within a given array.",
            "name": "c:enumerator",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "NPY_OBJECT",
            "content": "The enumeration value for references to arbitrary Python objects.",
            "name": "c:enumerator",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "NPY_VOID",
            "content": "Primarily used to hold struct dtypes, but can contain arbitrary\nbinary data.",
            "name": "c:enumerator",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Some useful aliases of the above types are"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "argument": "NPY_INTP",
            "content": "The enumeration value for a signed integer type which is the same\nsize as a (void \\*) pointer. This is the type used by all\narrays of indices.",
            "name": "c:enumerator",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "NPY_UINTP",
            "content": "The enumeration value for an unsigned integer type which is the\nsame size as a (void \\*) pointer.",
            "name": "c:enumerator",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "NPY_MASK",
            "content": "The enumeration value of the type used for masks, such as with\nthe :c:data:`NPY_ITER_ARRAYMASK` iterator flag. This is equivalent\nto :c:data:`NPY_UINT8`.",
            "name": "c:enumerator",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "NPY_DEFAULT_TYPE",
            "content": "The default type to use when no dtype is explicitly specified, for\nexample when calling np.zero(shape). This is equivalent to\n:c:data:`NPY_DOUBLE`.",
            "name": "c:enumerator",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Other useful related constants are"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "argument": "NPY_NTYPES",
            "content": "The total number of built-in NumPy types. The enumeration covers\nthe range from 0 to NPY_NTYPES-1.",
            "name": "c:macro",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "NPY_NOTYPE",
            "content": "A signal value guaranteed not to be a valid type enumeration number.",
            "name": "c:macro",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "NPY_USERDEF",
            "content": "The start of type numbers used for Custom Data types.",
            "name": "c:macro",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "The various character codes indicating certain types are also part of an enumerated list. References to type characters (should they be needed at all) should always use these enumerations. The form of them is "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "NPY_{NAME}LTR"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " where "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "{NAME}"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " can be"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "children": [
                    {
                      "data": {
                        "content": {
                          "value": "BOOL"
                        }
                      },
                      "type": "Strong"
                    },
                    {
                      "data": {
                        "value": ", "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "content": {
                          "value": "BYTE"
                        }
                      },
                      "type": "Strong"
                    },
                    {
                      "data": {
                        "value": ", "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "content": {
                          "value": "UBYTE"
                        }
                      },
                      "type": "Strong"
                    },
                    {
                      "data": {
                        "value": ", "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "content": {
                          "value": "SHORT"
                        }
                      },
                      "type": "Strong"
                    },
                    {
                      "data": {
                        "value": ", "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "content": {
                          "value": "USHORT"
                        }
                      },
                      "type": "Strong"
                    },
                    {
                      "data": {
                        "value": ", "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "content": {
                          "value": "INT"
                        }
                      },
                      "type": "Strong"
                    },
                    {
                      "data": {
                        "value": ",     "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "content": {
                          "value": "UINT"
                        }
                      },
                      "type": "Strong"
                    },
                    {
                      "data": {
                        "value": ", "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "content": {
                          "value": "LONG"
                        }
                      },
                      "type": "Strong"
                    },
                    {
                      "data": {
                        "value": ", "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "content": {
                          "value": "ULONG"
                        }
                      },
                      "type": "Strong"
                    },
                    {
                      "data": {
                        "value": ", "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "content": {
                          "value": "LONGLONG"
                        }
                      },
                      "type": "Strong"
                    },
                    {
                      "data": {
                        "value": ", "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "content": {
                          "value": "ULONGLONG"
                        }
                      },
                      "type": "Strong"
                    },
                    {
                      "data": {
                        "value": ",     "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "content": {
                          "value": "HALF"
                        }
                      },
                      "type": "Strong"
                    },
                    {
                      "data": {
                        "value": ", "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "content": {
                          "value": "FLOAT"
                        }
                      },
                      "type": "Strong"
                    },
                    {
                      "data": {
                        "value": ", "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "content": {
                          "value": "DOUBLE"
                        }
                      },
                      "type": "Strong"
                    },
                    {
                      "data": {
                        "value": ", "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "content": {
                          "value": "LONGDOUBLE"
                        }
                      },
                      "type": "Strong"
                    },
                    {
                      "data": {
                        "value": ", "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "content": {
                          "value": "CFLOAT"
                        }
                      },
                      "type": "Strong"
                    },
                    {
                      "data": {
                        "value": ",     "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "content": {
                          "value": "CDOUBLE"
                        }
                      },
                      "type": "Strong"
                    },
                    {
                      "data": {
                        "value": ", "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "content": {
                          "value": "CLONGDOUBLE"
                        }
                      },
                      "type": "Strong"
                    },
                    {
                      "data": {
                        "value": ", "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "content": {
                          "value": "DATETIME"
                        }
                      },
                      "type": "Strong"
                    },
                    {
                      "data": {
                        "value": ", "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "content": {
                          "value": "TIMEDELTA"
                        }
                      },
                      "type": "Strong"
                    },
                    {
                      "data": {
                        "value": ",     "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "content": {
                          "value": "OBJECT"
                        }
                      },
                      "type": "Strong"
                    },
                    {
                      "data": {
                        "value": ", "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "content": {
                          "value": "STRING"
                        }
                      },
                      "type": "Strong"
                    },
                    {
                      "data": {
                        "value": ", "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "content": {
                          "value": "VOID"
                        }
                      },
                      "type": "Strong"
                    }
                  ]
                },
                "type": "Paragraph"
              },
              {
                "data": {
                  "children": [
                    {
                      "data": {
                        "content": {
                          "value": "INTP"
                        }
                      },
                      "type": "Strong"
                    },
                    {
                      "data": {
                        "value": ", "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "content": {
                          "value": "UINTP"
                        }
                      },
                      "type": "Strong"
                    }
                  ]
                },
                "type": "Paragraph"
              },
              {
                "data": {
                  "children": [
                    {
                      "data": {
                        "content": {
                          "value": "GENBOOL"
                        }
                      },
                      "type": "Strong"
                    },
                    {
                      "data": {
                        "value": ", "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "content": {
                          "value": "SIGNED"
                        }
                      },
                      "type": "Strong"
                    },
                    {
                      "data": {
                        "value": ", "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "content": {
                          "value": "UNSIGNED"
                        }
                      },
                      "type": "Strong"
                    },
                    {
                      "data": {
                        "value": ", "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "content": {
                          "value": "FLOATING"
                        }
                      },
                      "type": "Strong"
                    },
                    {
                      "data": {
                        "value": ", "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "content": {
                          "value": "COMPLEX"
                        }
                      },
                      "type": "Strong"
                    }
                  ]
                },
                "type": "Paragraph"
              }
            ]
          },
          "type": "BlockQuote"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "The latter group of "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "{NAME}s"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " corresponds to letters used in the array interface typestring specification."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "Enumerated Types"
    },
    {
      "children": [],
      "title": "Defines"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "dd": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "These are defined for "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "{bits}"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " = 8, 16, 32, 64, 128, and 256 and provide     the maximum (minimum) value of the corresponding (unsigned) integer     type. Note: the actual integer type may not be available on all     platforms (i.e. 128-bit and 256-bit integers are rare)."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "dt": {
                  "children": [
                    {
                      "data": {
                        "value": [
                          "NPY_MAX_INT{bits}"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": ", "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "NPY_MAX_UINT{bits}"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": ", "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "NPY_MIN_INT{bits}"
                        ]
                      },
                      "type": "Verbatim"
                    }
                  ]
                }
              },
              {
                "dd": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "This is defined for "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "{type}"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " = "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "content": {
                              "value": "BYTE"
                            }
                          },
                          "type": "Strong"
                        },
                        {
                          "data": {
                            "value": ", "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "content": {
                              "value": "SHORT"
                            }
                          },
                          "type": "Strong"
                        },
                        {
                          "data": {
                            "value": ", "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "content": {
                              "value": "INT"
                            }
                          },
                          "type": "Strong"
                        },
                        {
                          "data": {
                            "value": ",     "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "content": {
                              "value": "LONG"
                            }
                          },
                          "type": "Strong"
                        },
                        {
                          "data": {
                            "value": ", "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "content": {
                              "value": "LONGLONG"
                            }
                          },
                          "type": "Strong"
                        },
                        {
                          "data": {
                            "value": ", "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "content": {
                              "value": "INTP"
                            }
                          },
                          "type": "Strong"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "dt": {
                  "children": [
                    {
                      "data": {
                        "value": [
                          "NPY_MIN_{type}"
                        ]
                      },
                      "type": "Verbatim"
                    }
                  ]
                }
              },
              {
                "dd": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "This is defined for all defined for "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "{type}"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " = "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "content": {
                              "value": "BYTE"
                            }
                          },
                          "type": "Strong"
                        },
                        {
                          "data": {
                            "value": ", "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "content": {
                              "value": "UBYTE"
                            }
                          },
                          "type": "Strong"
                        },
                        {
                          "data": {
                            "value": ",     "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "content": {
                              "value": "SHORT"
                            }
                          },
                          "type": "Strong"
                        },
                        {
                          "data": {
                            "value": ", "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "content": {
                              "value": "USHORT"
                            }
                          },
                          "type": "Strong"
                        },
                        {
                          "data": {
                            "value": ", "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "content": {
                              "value": "INT"
                            }
                          },
                          "type": "Strong"
                        },
                        {
                          "data": {
                            "value": ", "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "content": {
                              "value": "UINT"
                            }
                          },
                          "type": "Strong"
                        },
                        {
                          "data": {
                            "value": ", "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "content": {
                              "value": "LONG"
                            }
                          },
                          "type": "Strong"
                        },
                        {
                          "data": {
                            "value": ", "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "content": {
                              "value": "ULONG"
                            }
                          },
                          "type": "Strong"
                        },
                        {
                          "data": {
                            "value": ",     "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "content": {
                              "value": "LONGLONG"
                            }
                          },
                          "type": "Strong"
                        },
                        {
                          "data": {
                            "value": ", "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "content": {
                              "value": "ULONGLONG"
                            }
                          },
                          "type": "Strong"
                        },
                        {
                          "data": {
                            "value": ", "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "content": {
                              "value": "INTP"
                            }
                          },
                          "type": "Strong"
                        },
                        {
                          "data": {
                            "value": ", "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "content": {
                              "value": "UINTP"
                            }
                          },
                          "type": "Strong"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "dt": {
                  "children": [
                    {
                      "data": {
                        "value": [
                          "NPY_MAX_{type}"
                        ]
                      },
                      "type": "Verbatim"
                    }
                  ]
                }
              }
            ]
          },
          "type": "DefList"
        }
      ],
      "title": "Max and min values for integers"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "All "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "NPY_SIZEOF_{CTYPE}"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " constants have corresponding "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "NPY_BITSOF_{CTYPE}"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " constants defined. The "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "NPY_BITSOF_{CTYPE}"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " constants provide the number of bits in the data type.  Specifically, the available "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "{CTYPE}s"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " are"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "children": [
                    {
                      "data": {
                        "content": {
                          "value": "BOOL"
                        }
                      },
                      "type": "Strong"
                    },
                    {
                      "data": {
                        "value": ", "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "content": {
                          "value": "CHAR"
                        }
                      },
                      "type": "Strong"
                    },
                    {
                      "data": {
                        "value": ", "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "content": {
                          "value": "SHORT"
                        }
                      },
                      "type": "Strong"
                    },
                    {
                      "data": {
                        "value": ", "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "content": {
                          "value": "INT"
                        }
                      },
                      "type": "Strong"
                    },
                    {
                      "data": {
                        "value": ", "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "content": {
                          "value": "LONG"
                        }
                      },
                      "type": "Strong"
                    },
                    {
                      "data": {
                        "value": ",     "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "content": {
                          "value": "LONGLONG"
                        }
                      },
                      "type": "Strong"
                    },
                    {
                      "data": {
                        "value": ", "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "content": {
                          "value": "FLOAT"
                        }
                      },
                      "type": "Strong"
                    },
                    {
                      "data": {
                        "value": ", "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "content": {
                          "value": "DOUBLE"
                        }
                      },
                      "type": "Strong"
                    },
                    {
                      "data": {
                        "value": ", "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "content": {
                          "value": "LONGDOUBLE"
                        }
                      },
                      "type": "Strong"
                    }
                  ]
                },
                "type": "Paragraph"
              }
            ]
          },
          "type": "BlockQuote"
        }
      ],
      "title": "Number of bits in data types"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "All of the numeric data types (integer, floating point, and complex) have constants that are defined to be a specific enumerated type number. Exactly which enumerated type a bit-width type refers to is platform dependent. In particular, the constants available are "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "PyArray_{NAME}{BITS}"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " where "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "{NAME}"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " is "
                },
                "type": "Words"
              },
              {
                "data": {
                  "content": {
                    "value": "INT"
                  }
                },
                "type": "Strong"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "content": {
                    "value": "UINT"
                  }
                },
                "type": "Strong"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "content": {
                    "value": "FLOAT"
                  }
                },
                "type": "Strong"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "content": {
                    "value": "COMPLEX"
                  }
                },
                "type": "Strong"
              },
              {
                "data": {
                  "value": " and "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "{BITS}"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " can be 8, 16, 32, 64, 80, 96, 128, 160, 192, 256, and 512.  Obviously not all bit-widths are available on all platforms for all the kinds of numeric types. Commonly 8-, 16-, 32-, 64-bit integers; 32-, 64-bit floats; and 64-, 128-bit complex types are available."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "Bit-width references to enumerated typenums"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "The constants "
                },
                "type": "Words"
              },
              {
                "data": {
                  "content": {
                    "value": "NPY_INTP"
                  }
                },
                "type": "Strong"
              },
              {
                "data": {
                  "value": " and "
                },
                "type": "Words"
              },
              {
                "data": {
                  "content": {
                    "value": "NPY_UINTP"
                  }
                },
                "type": "Strong"
              },
              {
                "data": {
                  "value": " refer to an enumerated integer type that is large enough to hold a pointer on the platform. Index arrays should always be converted to "
                },
                "type": "Words"
              },
              {
                "data": {
                  "content": {
                    "value": "NPY_INTP"
                  }
                },
                "type": "Strong"
              },
              {
                "data": {
                  "value": " , because the dimension of the array is of type npy_intp."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "Integer that can hold a pointer"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "There are standard variable types for each of the numeric data types and the bool data type. Some of these are already available in the C-specification. You can create variables in extension code with these types."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "C-type names"
    },
    {
      "children": [
        {
          "data": {
            "argument": "npy_bool",
            "content": "unsigned char; The constants :c:data:`NPY_FALSE` and\n:c:data:`NPY_TRUE` are also defined.",
            "name": "c:type",
            "options": []
          },
          "type": "BlockDirective"
        }
      ],
      "title": "Boolean"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Unsigned versions of the integers can be defined by pre-pending a 'u' to the front of the integer name."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "argument": "npy_byte",
            "content": "char",
            "name": "c:type",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "npy_ubyte",
            "content": "unsigned char",
            "name": "c:type",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "npy_short",
            "content": "short",
            "name": "c:type",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "npy_ushort",
            "content": "unsigned short",
            "name": "c:type",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "npy_int",
            "content": "int",
            "name": "c:type",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "npy_uint",
            "content": "unsigned int",
            "name": "c:type",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "npy_int16",
            "content": "16-bit integer",
            "name": "c:type",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "npy_uint16",
            "content": "16-bit unsigned integer",
            "name": "c:type",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "npy_int32",
            "content": "32-bit integer",
            "name": "c:type",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "npy_uint32",
            "content": "32-bit unsigned integer",
            "name": "c:type",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "npy_int64",
            "content": "64-bit integer",
            "name": "c:type",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "npy_uint64",
            "content": "64-bit unsigned integer",
            "name": "c:type",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "npy_long",
            "content": "long int",
            "name": "c:type",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "npy_ulong",
            "content": "unsigned long int",
            "name": "c:type",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "npy_longlong",
            "content": "long long int",
            "name": "c:type",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "npy_ulonglong",
            "content": "unsigned long long int",
            "name": "c:type",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "npy_intp",
            "content": "Py_intptr_t (an integer that is the size of a pointer on\nthe platform).",
            "name": "c:type",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "npy_uintp",
            "content": "unsigned Py_intptr_t (an integer that is the size of a pointer on\nthe platform).",
            "name": "c:type",
            "options": []
          },
          "type": "BlockDirective"
        }
      ],
      "title": "(Un)Signed Integer"
    },
    {
      "children": [
        {
          "data": {
            "argument": "npy_half",
            "content": "16-bit float",
            "name": "c:type",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "npy_float",
            "content": "32-bit float",
            "name": "c:type",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "npy_cfloat",
            "content": "32-bit complex float",
            "name": "c:type",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "npy_double",
            "content": "64-bit double",
            "name": "c:type",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "npy_cdouble",
            "content": "64-bit complex double",
            "name": "c:type",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "npy_longdouble",
            "content": "long double",
            "name": "c:type",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "npy_clongdouble",
            "content": "long complex double",
            "name": "c:type",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "complex types are structures with "
                },
                "type": "Words"
              },
              {
                "data": {
                  "content": {
                    "value": ".real"
                  }
                },
                "type": "Strong"
              },
              {
                "data": {
                  "value": " and "
                },
                "type": "Words"
              },
              {
                "data": {
                  "content": {
                    "value": ".imag"
                  }
                },
                "type": "Strong"
              },
              {
                "data": {
                  "value": " members (in that order)."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "(Complex) Floating point"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "There are also typedefs for signed integers, unsigned integers, floating point, and complex floating point types of specific bit- widths. The available type names are"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "children": [
                    {
                      "data": {
                        "value": [
                          "npy_int{bits}"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": ", "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "npy_uint{bits}"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": ", "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "npy_float{bits}"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": ",     and "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "npy_complex{bits}"
                        ]
                      },
                      "type": "Verbatim"
                    }
                  ]
                },
                "type": "Paragraph"
              }
            ]
          },
          "type": "BlockQuote"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "where "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "{bits}"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " is the number of bits in the type and can be "
                },
                "type": "Words"
              },
              {
                "data": {
                  "content": {
                    "value": "8"
                  }
                },
                "type": "Strong"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "content": {
                    "value": "16"
                  }
                },
                "type": "Strong"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "content": {
                    "value": "32"
                  }
                },
                "type": "Strong"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "content": {
                    "value": "64"
                  }
                },
                "type": "Strong"
              },
              {
                "data": {
                  "value": ", 128, and 256 for integer types; 16, "
                },
                "type": "Words"
              },
              {
                "data": {
                  "content": {
                    "value": "32"
                  }
                },
                "type": "Strong"
              },
              {
                "data": {
                  "value": " , "
                },
                "type": "Words"
              },
              {
                "data": {
                  "content": {
                    "value": "64"
                  }
                },
                "type": "Strong"
              },
              {
                "data": {
                  "value": ", 80, 96, 128, and 256 for floating-point types; and 32, "
                },
                "type": "Words"
              },
              {
                "data": {
                  "content": {
                    "value": "64"
                  }
                },
                "type": "Strong"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "content": {
                    "value": "128"
                  }
                },
                "type": "Strong"
              },
              {
                "data": {
                  "value": ", 160, 192, and 512 for complex-valued types. Which bit-widths are available is platform dependent. The bolded bit-widths are usually available on all platforms."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "Bit-width names"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "For help in printing, the following strings are defined as the correct format specifier in printf and related commands."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "argument": "NPY_LONGLONG_FMT",
            "content": "",
            "name": "c:macro",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "NPY_ULONGLONG_FMT",
            "content": "",
            "name": "c:macro",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "NPY_INTP_FMT",
            "content": "",
            "name": "c:macro",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "NPY_UINTP_FMT",
            "content": "",
            "name": "c:macro",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "NPY_LONGDOUBLE_FMT",
            "content": "",
            "name": "c:macro",
            "options": []
          },
          "type": "BlockDirective"
        }
      ],
      "title": "Printf Formatting"
    }
  ],
  "content": {},
  "example_section_data": {
    "children": [],
    "title": null
  },
  "item_file": null,
  "item_line": null,
  "item_type": null,
  "ordered_sections": [],
  "references": null,
  "see_also": [],
  "signature": {
    "value": null
  }
}