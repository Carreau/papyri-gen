{
  "_content": {},
  "aliases": [],
  "arbitrary": [
    {
      "children": [
        {
          "data": {
            "args0": [],
            "directive_name": "sectionauthor",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "Travis E. Oliphant "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "The standard array can have 24 different data types (and has some support for adding your own types). These data types all have an enumerated type, an enumerated type-character, and a corresponding array scalar Python type object (placed in a hierarchy). There are also standard C typedefs to make it easier to manipulate elements of the given data type. For the numeric types, there are also bit-width equivalent C typedefs and named typenumbers that make it easier to select the precision desired."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "inline": [
                  {
                    "data": {
                      "value": "The names for the types in c code follows c naming conventions more closely. The Python names for these types follow Python conventions. Thus, : c : data : `NPY_FLOAT` picks up a 32 - bit float in C, but : class : `numpy.float_` in Python corresponds to a 64 - bit double. The bit - width names can be used in both Python and C for clarity. "
                    },
                    "type": "Words"
                  }
                ],
                "inner": []
              }
            ],
            "kind": "warning",
            "title": ""
          },
          "type": "Admonition"
        }
      ],
      "title": "Data Type API"
    },
    {
      "children": [
        {
          "data": {
            "args0": [],
            "directive_name": "c:enumerator",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "NPY_TYPES "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "There is a list of enumerated types defined providing the basic 24 data types plus some useful generic names. Whenever the code requires a type number, one of these enumerated types is requested. The types are all called "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "NPY_{NAME}"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ":"
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "args0": [
              "NPY_BOOL"
            ],
            "directive_name": "c:enumerator",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "The enumeration value for the boolean type, stored as one byte. It may only be set to the values 0 and 1. "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [],
            "directive_name": "c:enumerator",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "NPY_BYTE "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [
              "NPY_INT8"
            ],
            "directive_name": "c:enumerator",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "The enumeration value for an 8 - bit / 1 - byte signed integer. "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [],
            "directive_name": "c:enumerator",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "NPY_SHORT "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [
              "NPY_INT16"
            ],
            "directive_name": "c:enumerator",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "The enumeration value for a 16 - bit / 2 - byte signed integer. "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [],
            "directive_name": "c:enumerator",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "NPY_INT "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [
              "NPY_INT32"
            ],
            "directive_name": "c:enumerator",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "The enumeration value for a 32 - bit / 4 - byte signed integer. "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [
              "NPY_LONG"
            ],
            "directive_name": "c:enumerator",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "Equivalent to either NPY_INT or NPY_LONGLONG, depending on the platform. "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [],
            "directive_name": "c:enumerator",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "NPY_LONGLONG "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [
              "NPY_INT64"
            ],
            "directive_name": "c:enumerator",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "The enumeration value for a 64 - bit / 8 - byte signed integer. "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [],
            "directive_name": "c:enumerator",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "NPY_UBYTE "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [
              "NPY_UINT8"
            ],
            "directive_name": "c:enumerator",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "The enumeration value for an 8 - bit / 1 - byte unsigned integer. "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [],
            "directive_name": "c:enumerator",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "NPY_USHORT "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [
              "NPY_UINT16"
            ],
            "directive_name": "c:enumerator",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "The enumeration value for a 16 - bit / 2 - byte unsigned integer. "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [],
            "directive_name": "c:enumerator",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "NPY_UINT "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [
              "NPY_UINT32"
            ],
            "directive_name": "c:enumerator",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "The enumeration value for a 32 - bit / 4 - byte unsigned integer. "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [
              "NPY_ULONG"
            ],
            "directive_name": "c:enumerator",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "Equivalent to either NPY_UINT or NPY_ULONGLONG, depending on the platform. "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [],
            "directive_name": "c:enumerator",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "NPY_ULONGLONG "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [
              "NPY_UINT64"
            ],
            "directive_name": "c:enumerator",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "The enumeration value for a 64 - bit / 8 - byte unsigned integer. "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [],
            "directive_name": "c:enumerator",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "NPY_HALF "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [
              "NPY_FLOAT16"
            ],
            "directive_name": "c:enumerator",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "The enumeration value for a 16 - bit / 2 - byte IEEE 754 - 2008 compatible floating point type. "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [],
            "directive_name": "c:enumerator",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "NPY_FLOAT "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [
              "NPY_FLOAT32"
            ],
            "directive_name": "c:enumerator",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "The enumeration value for a 32 - bit / 4 - byte IEEE 754 compatible floating point type. "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [],
            "directive_name": "c:enumerator",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "NPY_DOUBLE "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [
              "NPY_FLOAT64"
            ],
            "directive_name": "c:enumerator",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "The enumeration value for a 64 - bit / 8 - byte IEEE 754 compatible floating point type. "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [
              "NPY_LONGDOUBLE"
            ],
            "directive_name": "c:enumerator",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "The enumeration value for a platform - specific floating point type which is at least as large as NPY_DOUBLE, but larger on many platforms. "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [],
            "directive_name": "c:enumerator",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "NPY_CFLOAT "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [
              "NPY_COMPLEX64"
            ],
            "directive_name": "c:enumerator",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "The enumeration value for a 64 - bit / 8 - byte complex type made up of two NPY_FLOAT values. "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [],
            "directive_name": "c:enumerator",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "NPY_CDOUBLE "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [
              "NPY_COMPLEX128"
            ],
            "directive_name": "c:enumerator",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "The enumeration value for a 128 - bit / 16 - byte complex type made up of two NPY_DOUBLE values. "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [
              "NPY_CLONGDOUBLE"
            ],
            "directive_name": "c:enumerator",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "The enumeration value for a platform - specific complex floating point type which is made up of two NPY_LONGDOUBLE values. "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [
              "NPY_DATETIME"
            ],
            "directive_name": "c:enumerator",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "The enumeration value for a data type which holds dates or datetimes with a precision based on selectable date or time units. "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [
              "NPY_TIMEDELTA"
            ],
            "directive_name": "c:enumerator",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "The enumeration value for a data type which holds lengths of times in integers of selectable date or time units. "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [
              "NPY_STRING"
            ],
            "directive_name": "c:enumerator",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "The enumeration value for ASCII strings of a selectable size. The strings have a fixed maximum size within a given array. "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [
              "NPY_UNICODE"
            ],
            "directive_name": "c:enumerator",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "The enumeration value for UCS4 strings of a selectable size. The strings have a fixed maximum size within a given array. "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [
              "NPY_OBJECT"
            ],
            "directive_name": "c:enumerator",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "The enumeration value for references to arbitrary Python objects. "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [
              "NPY_VOID"
            ],
            "directive_name": "c:enumerator",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "Primarily used to hold struct dtypes, but can contain arbitrary binary data. "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Some useful aliases of the above types are"
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "args0": [
              "NPY_INTP"
            ],
            "directive_name": "c:enumerator",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "The enumeration value for a signed integer type which is the same size as a ( void \\*) pointer. This is the type used by all arrays of indices. "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [
              "NPY_UINTP"
            ],
            "directive_name": "c:enumerator",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "The enumeration value for an unsigned integer type which is the same size as a ( void \\*) pointer. "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [
              "NPY_MASK"
            ],
            "directive_name": "c:enumerator",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "The enumeration value of the type used for masks, such as with the : c : data : `NPY_ITER_ARRAYMASK` iterator flag. This is equivalent to : c : data : `NPY_UINT8`. "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [
              "NPY_DEFAULT_TYPE"
            ],
            "directive_name": "c:enumerator",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "The default type to use when no dtype is explicitly specified, for example when calling np.zero ( shape). This is equivalent to : c : data : `NPY_DOUBLE`. "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Other useful related constants are"
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "args0": [
              "NPY_NTYPES"
            ],
            "directive_name": "c:macro",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "The total number of built - in NumPy types. The enumeration covers the range from 0 to NPY_NTYPES - 1. "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [
              "NPY_NOTYPE"
            ],
            "directive_name": "c:macro",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "A signal value guaranteed not to be a valid type enumeration number. "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [
              "NPY_USERDEF"
            ],
            "directive_name": "c:macro",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "The start of type numbers used for Custom Data types. "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "The various character codes indicating certain types are also part of an enumerated list. References to type characters (should they be needed at all) should always use these enumerations. The form of them is "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "NPY_{NAME}LTR"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " where "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "{NAME}"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " can be"
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": [
              "**BOOL**, **BYTE**, **UBYTE**, **SHORT**, **USHORT**, **INT**,",
              "**UINT**, **LONG**, **ULONG**, **LONGLONG**, **ULONGLONG**,",
              "**HALF**, **FLOAT**, **DOUBLE**, **LONGDOUBLE**, **CFLOAT**,",
              "**CDOUBLE**, **CLONGDOUBLE**, **DATETIME**, **TIMEDELTA**,",
              "**OBJECT**, **STRING**, **VOID**",
              "",
              "**INTP**, **UINTP**",
              "",
              "**GENBOOL**, **SIGNED**, **UNSIGNED**, **FLOATING**, **COMPLEX**"
            ]
          },
          "type": "BlockQuote"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "The latter group of "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "{NAME}s"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " corresponds to letters used in the array interface typestring specification."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": "Enumerated Types"
    },
    {
      "children": [],
      "title": "Defines"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "dd": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "These are defined for "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "{bits}"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " = 8, 16, 32, 64, 128, and 256 and provide     the maximum (minimum) value of the corresponding (unsigned) integer     type. Note: the actual integer type may not be available on all     platforms (i.e. 128-bit and 256-bit integers are rare)."
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ],
                "dt": {
                  "inline": [
                    {
                      "data": {
                        "value": [
                          "NPY_MAX_INT{bits}"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": ", "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "NPY_MAX_UINT{bits}"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": ", "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "NPY_MIN_INT{bits}"
                        ]
                      },
                      "type": "Verbatim"
                    }
                  ],
                  "inner": []
                }
              }
            ]
          },
          "type": "DefList"
        },
        {
          "data": {
            "children": [
              {
                "dd": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "This is defined for "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "{type}"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " = "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "content": {
                              "value": "BYTE"
                            }
                          },
                          "type": "Strong"
                        },
                        {
                          "data": {
                            "value": ", "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "content": {
                              "value": "SHORT"
                            }
                          },
                          "type": "Strong"
                        },
                        {
                          "data": {
                            "value": ", "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "content": {
                              "value": "INT"
                            }
                          },
                          "type": "Strong"
                        },
                        {
                          "data": {
                            "value": ",     "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "content": {
                              "value": "LONG"
                            }
                          },
                          "type": "Strong"
                        },
                        {
                          "data": {
                            "value": ", "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "content": {
                              "value": "LONGLONG"
                            }
                          },
                          "type": "Strong"
                        },
                        {
                          "data": {
                            "value": ", "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "content": {
                              "value": "INTP"
                            }
                          },
                          "type": "Strong"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ],
                "dt": {
                  "inline": [
                    {
                      "data": {
                        "value": [
                          "NPY_MIN_{type}"
                        ]
                      },
                      "type": "Verbatim"
                    }
                  ],
                  "inner": []
                }
              }
            ]
          },
          "type": "DefList"
        },
        {
          "data": {
            "children": [
              {
                "dd": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "This is defined for all defined for "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "{type}"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " = "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "content": {
                              "value": "BYTE"
                            }
                          },
                          "type": "Strong"
                        },
                        {
                          "data": {
                            "value": ", "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "content": {
                              "value": "UBYTE"
                            }
                          },
                          "type": "Strong"
                        },
                        {
                          "data": {
                            "value": ",     "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "content": {
                              "value": "SHORT"
                            }
                          },
                          "type": "Strong"
                        },
                        {
                          "data": {
                            "value": ", "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "content": {
                              "value": "USHORT"
                            }
                          },
                          "type": "Strong"
                        },
                        {
                          "data": {
                            "value": ", "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "content": {
                              "value": "INT"
                            }
                          },
                          "type": "Strong"
                        },
                        {
                          "data": {
                            "value": ", "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "content": {
                              "value": "UINT"
                            }
                          },
                          "type": "Strong"
                        },
                        {
                          "data": {
                            "value": ", "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "content": {
                              "value": "LONG"
                            }
                          },
                          "type": "Strong"
                        },
                        {
                          "data": {
                            "value": ", "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "content": {
                              "value": "ULONG"
                            }
                          },
                          "type": "Strong"
                        },
                        {
                          "data": {
                            "value": ",     "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "content": {
                              "value": "LONGLONG"
                            }
                          },
                          "type": "Strong"
                        },
                        {
                          "data": {
                            "value": ", "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "content": {
                              "value": "ULONGLONG"
                            }
                          },
                          "type": "Strong"
                        },
                        {
                          "data": {
                            "value": ", "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "content": {
                              "value": "INTP"
                            }
                          },
                          "type": "Strong"
                        },
                        {
                          "data": {
                            "value": ", "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "content": {
                              "value": "UINTP"
                            }
                          },
                          "type": "Strong"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ],
                "dt": {
                  "inline": [
                    {
                      "data": {
                        "value": [
                          "NPY_MAX_{type}"
                        ]
                      },
                      "type": "Verbatim"
                    }
                  ],
                  "inner": []
                }
              }
            ]
          },
          "type": "DefList"
        }
      ],
      "title": "Max and min values for integers"
    },
    {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "All "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "NPY_SIZEOF_{CTYPE}"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " constants have corresponding "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "NPY_BITSOF_{CTYPE}"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " constants defined. The "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "NPY_BITSOF_{CTYPE}"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " constants provide the number of bits in the data type.  Specifically, the available "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "{CTYPE}s"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " are"
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": [
              "**BOOL**, **CHAR**, **SHORT**, **INT**, **LONG**,",
              "**LONGLONG**, **FLOAT**, **DOUBLE**, **LONGDOUBLE**"
            ]
          },
          "type": "BlockQuote"
        }
      ],
      "title": "Number of bits in data types"
    },
    {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "All of the numeric data types (integer, floating point, and complex) have constants that are defined to be a specific enumerated type number. Exactly which enumerated type a bit-width type refers to is platform dependent. In particular, the constants available are "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "PyArray_{NAME}{BITS}"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " where "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "{NAME}"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " is "
                },
                "type": "Words"
              },
              {
                "data": {
                  "content": {
                    "value": "INT"
                  }
                },
                "type": "Strong"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "content": {
                    "value": "UINT"
                  }
                },
                "type": "Strong"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "content": {
                    "value": "FLOAT"
                  }
                },
                "type": "Strong"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "content": {
                    "value": "COMPLEX"
                  }
                },
                "type": "Strong"
              },
              {
                "data": {
                  "value": " and "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "{BITS}"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " can be 8, 16, 32, 64, 80, 96, 128, 160, 192, 256, and 512.  Obviously not all bit-widths are available on all platforms for all the kinds of numeric types. Commonly 8-, 16-, 32-, 64-bit integers; 32-, 64-bit floats; and 64-, 128-bit complex types are available."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": "Bit-width references to enumerated typenums"
    },
    {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "The constants "
                },
                "type": "Words"
              },
              {
                "data": {
                  "content": {
                    "value": "NPY_INTP"
                  }
                },
                "type": "Strong"
              },
              {
                "data": {
                  "value": " and "
                },
                "type": "Words"
              },
              {
                "data": {
                  "content": {
                    "value": "NPY_UINTP"
                  }
                },
                "type": "Strong"
              },
              {
                "data": {
                  "value": " refer to an enumerated integer type that is large enough to hold a pointer on the platform. Index arrays should always be converted to "
                },
                "type": "Words"
              },
              {
                "data": {
                  "content": {
                    "value": "NPY_INTP"
                  }
                },
                "type": "Strong"
              },
              {
                "data": {
                  "value": " , because the dimension of the array is of type npy_intp."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": "Integer that can hold a pointer"
    },
    {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "There are standard variable types for each of the numeric data types and the bool data type. Some of these are already available in the C-specification. You can create variables in extension code with these types."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": "C-type names"
    },
    {
      "children": [
        {
          "data": {
            "args0": [
              "npy_bool"
            ],
            "directive_name": "c:type",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "unsigned char; The constants : c : data : `NPY_FALSE` and : c : data : `NPY_TRUE` are also defined. "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        }
      ],
      "title": "Boolean"
    },
    {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Unsigned versions of the integers can be defined by pre-pending a 'u' to the front of the integer name."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "args0": [
              "npy_byte"
            ],
            "directive_name": "c:type",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "char "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [
              "npy_ubyte"
            ],
            "directive_name": "c:type",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "unsigned char "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [
              "npy_short"
            ],
            "directive_name": "c:type",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "short "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [
              "npy_ushort"
            ],
            "directive_name": "c:type",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "unsigned short "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [
              "npy_int"
            ],
            "directive_name": "c:type",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "int "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [
              "npy_uint"
            ],
            "directive_name": "c:type",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "unsigned int "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [
              "npy_int16"
            ],
            "directive_name": "c:type",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "16 - bit integer "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [
              "npy_uint16"
            ],
            "directive_name": "c:type",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "16 - bit unsigned integer "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [
              "npy_int32"
            ],
            "directive_name": "c:type",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "32 - bit integer "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [
              "npy_uint32"
            ],
            "directive_name": "c:type",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "32 - bit unsigned integer "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [
              "npy_int64"
            ],
            "directive_name": "c:type",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "64 - bit integer "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [
              "npy_uint64"
            ],
            "directive_name": "c:type",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "64 - bit unsigned integer "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [
              "npy_long"
            ],
            "directive_name": "c:type",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "long int "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [
              "npy_ulong"
            ],
            "directive_name": "c:type",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "unsigned long int "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [
              "npy_longlong"
            ],
            "directive_name": "c:type",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "long long int "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [
              "npy_ulonglong"
            ],
            "directive_name": "c:type",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "unsigned long long int "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [
              "npy_intp"
            ],
            "directive_name": "c:type",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "Py_intptr_t ( an integer that is the size of a pointer on the platform). "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [
              "npy_uintp"
            ],
            "directive_name": "c:type",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "unsigned Py_intptr_t ( an integer that is the size of a pointer on the platform). "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        }
      ],
      "title": "(Un)Signed Integer"
    },
    {
      "children": [
        {
          "data": {
            "args0": [
              "npy_half"
            ],
            "directive_name": "c:type",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "16 - bit float "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [
              "npy_float"
            ],
            "directive_name": "c:type",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "32 - bit float "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [
              "npy_cfloat"
            ],
            "directive_name": "c:type",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "32 - bit complex float "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [
              "npy_double"
            ],
            "directive_name": "c:type",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "64 - bit double "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [
              "npy_cdouble"
            ],
            "directive_name": "c:type",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "64 - bit complex double "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [
              "npy_longdouble"
            ],
            "directive_name": "c:type",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "long double "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [
              "npy_clongdouble"
            ],
            "directive_name": "c:type",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "long complex double "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "complex types are structures with "
                },
                "type": "Words"
              },
              {
                "data": {
                  "content": {
                    "value": ".real"
                  }
                },
                "type": "Strong"
              },
              {
                "data": {
                  "value": " and "
                },
                "type": "Words"
              },
              {
                "data": {
                  "content": {
                    "value": ".imag"
                  }
                },
                "type": "Strong"
              },
              {
                "data": {
                  "value": " members (in that order)."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": "(Complex) Floating point"
    },
    {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "There are also typedefs for signed integers, unsigned integers, floating point, and complex floating point types of specific bit- widths. The available type names are"
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": [
              "``npy_int{bits}``, ``npy_uint{bits}``, ``npy_float{bits}``,",
              "and ``npy_complex{bits}``"
            ]
          },
          "type": "BlockQuote"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "where "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "{bits}"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " is the number of bits in the type and can be "
                },
                "type": "Words"
              },
              {
                "data": {
                  "content": {
                    "value": "8"
                  }
                },
                "type": "Strong"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "content": {
                    "value": "16"
                  }
                },
                "type": "Strong"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "content": {
                    "value": "32"
                  }
                },
                "type": "Strong"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "content": {
                    "value": "64"
                  }
                },
                "type": "Strong"
              },
              {
                "data": {
                  "value": ", 128, and 256 for integer types; 16, "
                },
                "type": "Words"
              },
              {
                "data": {
                  "content": {
                    "value": "32"
                  }
                },
                "type": "Strong"
              },
              {
                "data": {
                  "value": " , "
                },
                "type": "Words"
              },
              {
                "data": {
                  "content": {
                    "value": "64"
                  }
                },
                "type": "Strong"
              },
              {
                "data": {
                  "value": ", 80, 96, 128, and 256 for floating-point types; and 32, "
                },
                "type": "Words"
              },
              {
                "data": {
                  "content": {
                    "value": "64"
                  }
                },
                "type": "Strong"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "content": {
                    "value": "128"
                  }
                },
                "type": "Strong"
              },
              {
                "data": {
                  "value": ", 160, 192, and 512 for complex-valued types. Which bit-widths are available is platform dependent. The bolded bit-widths are usually available on all platforms."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": "Bit-width names"
    },
    {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "For help in printing, the following strings are defined as the correct format specifier in printf and related commands."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "args0": [],
            "directive_name": "c:macro",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "NPY_LONGLONG_FMT "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [],
            "directive_name": "c:macro",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "NPY_ULONGLONG_FMT "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [],
            "directive_name": "c:macro",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "NPY_INTP_FMT "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [],
            "directive_name": "c:macro",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "NPY_UINTP_FMT "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [],
            "directive_name": "c:macro",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "NPY_LONGDOUBLE_FMT "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        }
      ],
      "title": "Printf Formatting"
    }
  ],
  "example_section_data": {
    "children": [],
    "title": null
  },
  "item_file": null,
  "item_line": null,
  "item_type": null,
  "ordered_sections": [],
  "references": null,
  "refs": [],
  "see_also": [],
  "signature": {
    "value": null
  }
}