{
  "_content": {},
  "aliases": [],
  "arbitrary": [
    {
      "children": [
        {
          "data": {
            "args0": [],
            "directive_name": "module",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "numpy.distutils "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "children": [
              {
                "inline": [
                  {
                    "data": {
                      "value": "``numpy.distutils`` is deprecated, and will be removed for Python >= 3.12. For more details, see : ref : `distutils - status - migration` "
                    },
                    "type": "Words"
                  }
                ],
                "inner": []
              }
            ],
            "kind": "warning",
            "title": ""
          },
          "type": "Admonition"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "NumPy provides enhanced distutils functionality to make it easier to build and install sub-packages, auto-generate code, and extension modules that use Fortran-compiled libraries. To use features of NumPy distutils, use the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "setup <core.setup>"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " command from "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "numpy.distutils.core"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ". A useful "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "Configuration\n<misc_util.Configuration>"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " class is also provided in "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "numpy.distutils.misc_util"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " that can make it easier to construct keyword arguments to pass to the setup function (by passing the dictionary obtained from the todict() method of the class). More information is available in the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "distutils-user-guide"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": "."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "The choice and location of linked libraries such as BLAS and LAPACK as well as include paths and other such build options can be specified in a "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "site.cfg"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " file located in the NumPy root repository or a "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    ".numpy-site.cfg"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " file in your home directory. See the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "site.cfg.example"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " example file included in the NumPy repository or sdist for documentation."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "args0": [],
            "directive_name": "index",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "single : distutils "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        }
      ],
      "title": "Packaging (:mod:`numpy.distutils`)"
    },
    {
      "children": [
        {
          "data": {
            "args0": [
              ":maxdepth: 2"
            ],
            "directive_name": "toctree",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "distutils / misc_util "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [],
            "directive_name": "currentmodule",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "numpy.distutils "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [
              ":toctree: generated/"
            ],
            "directive_name": "autosummary",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "ccompiler ccompiler_opt cpuinfo.cpu core.Extension exec_command log.set_verbosity system_info.get_info system_info.get_standard_file "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        }
      ],
      "title": "Modules in :mod:`numpy.distutils`"
    },
    {
      "children": [
        {
          "data": {
            "args0": [],
            "directive_name": "currentmodule",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "numpy.distutils.misc_util "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [
              "Configuration(package_name=None, parent_name=None, top_path=None, package_path=None, **attrs)"
            ],
            "directive_name": "class",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "Construct a configuration instance for the given package name. If *parent_name* is not None, then construct the package as a sub - package of the *parent_name* package. If *top_path* and *package_path* are None then they are assumed equal to the path of the file this instance was created in. The setup.py files in the numpy distribution are good examples of how to use the : class : `Configuration` instance. .. automethod : : todict .. automethod : : get_distribution .. automethod : : get_subpackage .. automethod : : add_subpackage .. automethod : : add_data_files .. automethod : : add_data_dir .. automethod : : add_include_dirs .. automethod : : add_headers .. automethod : : add_extension .. automethod : : add_library .. automethod : : add_scripts .. automethod : : add_installed_library .. automethod : : add_npy_pkg_config .. automethod : : paths .. automethod : : get_config_cmd .. automethod : : get_build_temp_dir .. automethod : : have_f77c .. automethod : : have_f90c .. automethod : : get_version .. automethod : : make_svn_version_py .. automethod : : make_config_py .. automethod : : get_info "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        }
      ],
      "title": "Configuration class"
    },
    {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Conventional C libraries (installed through "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "add_library"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": ") are not installed, and are just used during the build (they are statically linked).  An installable C library is a pure C library, which does not depend on the python C runtime, and is installed such that it may be used by third-party packages. To build and install the C library, you just use the method "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "add_installed_library"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " instead of "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "add_library"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": ", which takes the same arguments except for an additional "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "install_dir"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " argument::    "
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": ".. hidden in a comment so as to be included in refguide but not rendered documentation\n  >>> import numpy.distutils.misc_util\n  >>> config = np.distutils.misc_util.Configuration(None, '', '.')\n  >>> with open('foo.c', 'w') as f: pass\n\n>>> config.add_installed_library('foo', sources=['foo.c'], install_dir='lib')"
          },
          "type": "BlockVerbatim"
        }
      ],
      "title": "Building Installable C libraries"
    },
    {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "To make the necessary build options available to third parties, you could use the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "npy-pkg-config"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " mechanism implemented in "
                },
                "type": "Words"
              },
              {
                "data": {
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "api",
                    "module": "numpy",
                    "path": "numpy.distutils",
                    "version": "*"
                  },
                  "value": "numpy.distutils"
                },
                "type": "Link"
              },
              {
                "data": {
                  "value": ". This mechanism is based on a .ini file which contains all the options. A .ini file is very similar to .pc files as used by the pkg-config unix utility::    "
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": "[meta]\nName: foo\nVersion: 1.0\nDescription: foo library\n\n[variables]\nprefix = /home/user/local\nlibdir = ${prefix}/lib\nincludedir = ${prefix}/include\n\n[default]\ncflags = -I${includedir}\nlibs = -L${libdir} -lfoo"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Generally, the file needs to be generated during the build, since it needs some information known at build time only (e.g. prefix). This is mostly automatic if one uses the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "Configuration"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " method "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "add_npy_pkg_config"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": ". Assuming we have a template file foo.ini.in as follows::    "
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": "[meta]\nName: foo\nVersion: @version@\nDescription: foo library\n\n[variables]\nprefix = @prefix@\nlibdir = ${prefix}/lib\nincludedir = ${prefix}/include\n\n[default]\ncflags = -I${includedir}\nlibs = -L${libdir} -lfoo"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "and the following code in setup.py::    "
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": ">>> config.add_installed_library('foo', sources=['foo.c'], install_dir='lib')\n>>> subst = {'version': '1.0'}\n>>> config.add_npy_pkg_config('foo.ini.in', 'lib', subst_dict=subst)"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "This will install the file foo.ini into the directory package_dir/lib, and the foo.ini file will be generated from foo.ini.in, where each "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "@version@"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " will be replaced by "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "subst_dict['version']"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ". The dictionary has an additional prefix substitution rule automatically added, which contains the install prefix (since this is not easy to get from setup.py).  npy-pkg-config files can also be installed at the same location as used for numpy, using the path returned from "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "get_npy_pkg_dir"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " function."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": "npy-pkg-config files"
    },
    {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Info are easily retrieved from the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "get_info"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " function in "
                },
                "type": "Words"
              },
              {
                "data": {
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "api",
                    "module": "numpy",
                    "path": "numpy.distutils.misc_util",
                    "version": "*"
                  },
                  "value": "numpy.distutils.misc_util"
                },
                "type": "Link"
              },
              {
                "data": {
                  "value": "    "
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": ">>> info = np.distutils.misc_util.get_info('npymath')\n>>> config.add_extension('foo', sources=['foo.c'], extra_info=info)\n<numpy.distutils.extension.Extension('foo') at 0x...>"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "An additional list of paths to look for .ini files can be given to "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "get_info"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": "."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": "Reusing a C library from another package"
    },
    {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "NumPy distutils supports automatic conversion of source files named <somefile>.src. This facility can be used to maintain very similar code blocks requiring only simple changes between blocks. During the build phase of setup, if a template file named <somefile>.src is encountered, a new file named <somefile> is constructed from the template and placed in the build directory to be used instead. Two forms of template conversion are supported. The first form occurs for files named <file>.ext.src where ext is a recognized Fortran extension (f, f90, f95, f77, for, ftn, pyf). The second form is used for all other cases. See "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "templating"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": "."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": "Conversion of ``.src`` files"
    }
  ],
  "example_section_data": {
    "children": [],
    "title": null
  },
  "item_file": null,
  "item_line": null,
  "item_type": null,
  "ordered_sections": [],
  "references": null,
  "refs": [],
  "see_also": [],
  "signature": {
    "value": null
  }
}