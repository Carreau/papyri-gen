{
  "_content": {},
  "aliases": [],
  "arbitrary": [
    {
      "children": [
        {
          "data": {
            "args0": [],
            "directive_name": "currentmodule",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "numpy.ma "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "value": ".. for doctests\n   >>> from numpy import ma"
          },
          "type": "Comment"
        },
        {
          "data": {
            "placeholder": "target",
            "value": ".. _numpy.ma.constants:"
          },
          "type": "Unimplemented"
        }
      ],
      "title": null
    },
    {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "In addition to the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "MaskedArray"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " class, the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "numpy.ma"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " module defines several constants."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "args0": [
              "masked"
            ],
            "directive_name": "data",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "The : attr : `masked` constant is a special case of : class : `MaskedArray`, with a float datatype and a null shape. It is used to test whether a specific entry of a masked array is masked, or to mask one or several entries of a masked array : : >>> x = ma.array ( [ 1, 2, 3], mask= [ 0, 1, 0]) >>> x [ 1] is ma.masked True >>> x [ - 1] = ma.masked >>> x masked_array ( data= [ 1, - - , - - ], mask= [ False, True, True], fill_value=999999) "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [
              "nomask"
            ],
            "directive_name": "data",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "Value indicating that a masked array has no invalid entry. : attr : `nomask` is used internally to speed up computations when the mask is not needed. It is represented internally as ``np.False_``. "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [
              "masked_print_options"
            ],
            "directive_name": "data",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "String used in lieu of missing data when a masked array is printed. By default, this string is `` ' - - ' ``. "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "placeholder": "target",
            "value": ".. _maskedarray.baseclass:"
          },
          "type": "Unimplemented"
        }
      ],
      "title": "Constants of the :mod:`numpy.ma` module"
    },
    {
      "children": [
        {
          "data": {
            "args0": [],
            "directive_name": "class",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "MaskedArray "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "A subclass of "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "~numpy.ndarray"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " designed to manipulate numerical arrays with missing data."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "An instance of "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "MaskedArray"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " can be thought as the combination of several elements:"
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "value": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "The "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "~MaskedArray.data"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": ", as a regular "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "numpy.ndarray"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " of any shape or datatype (the data)."
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "value": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "A boolean "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "~numpy.ma.MaskedArray.mask"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " with the same shape as the data, where a "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "True"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " value indicates that the corresponding element of the data is invalid.   The special value "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "nomask"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " is also acceptable for arrays without named fields, and indicates that no data is invalid."
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "value": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "A "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "~numpy.ma.MaskedArray.fill_value"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": ", a value that may be used to replace the invalid entries in order to return a standard "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "numpy.ndarray"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": "."
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ]
              }
            ]
          },
          "type": "BulletList"
        },
        {
          "data": {
            "placeholder": "target",
            "value": ".. _ma-attributes:"
          },
          "type": "Unimplemented"
        }
      ],
      "title": "The :class:`MaskedArray` class"
    },
    {
      "children": [
        {
          "data": {
            "args0": [],
            "directive_name": "seealso",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": ": ref : `Array Attributes < arrays.ndarray.attributes>` "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [],
            "directive_name": "autoattribute",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "MaskedArray.data "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [],
            "directive_name": "autoattribute",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "MaskedArray.mask "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [],
            "directive_name": "autoattribute",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "MaskedArray.recordmask "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [],
            "directive_name": "autoattribute",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "MaskedArray.fill_value "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [],
            "directive_name": "autoattribute",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "MaskedArray.baseclass "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [],
            "directive_name": "autoattribute",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "MaskedArray.sharedmask "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [],
            "directive_name": "autoattribute",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "MaskedArray.hardmask "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "As "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "MaskedArray"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " is a subclass of "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "~numpy.ndarray"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", a masked array also inherits all the attributes and properties of a  "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "~numpy.ndarray"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " instance."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "args0": [
              ":toctree: generated/"
            ],
            "directive_name": "autosummary",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "MaskedArray.base MaskedArray.ctypes MaskedArray.dtype MaskedArray.flags MaskedArray.itemsize MaskedArray.nbytes MaskedArray.ndim MaskedArray.shape MaskedArray.size MaskedArray.strides MaskedArray.imag MaskedArray.real MaskedArray.flat MaskedArray.__array_priority__ "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        }
      ],
      "title": "Attributes and properties of masked arrays"
    },
    {
      "children": [
        {
          "data": {
            "args0": [],
            "directive_name": "seealso",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": ": ref : `Array methods < array.ndarray.methods>` "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        }
      ],
      "title": ":class:`MaskedArray` methods"
    },
    {
      "children": [
        {
          "data": {
            "args0": [
              ":toctree: generated/"
            ],
            "directive_name": "autosummary",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "MaskedArray.__float__ MaskedArray.__int__ MaskedArray.view MaskedArray.astype MaskedArray.byteswap MaskedArray.compressed MaskedArray.filled MaskedArray.tofile MaskedArray.toflex MaskedArray.tolist MaskedArray.torecords MaskedArray.tostring MaskedArray.tobytes "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        }
      ],
      "title": "Conversion"
    },
    {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "For reshape, resize, and transpose, the single tuple argument may be replaced with "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "n"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " integers which will be interpreted as an n-tuple."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "args0": [
              ":toctree: generated/"
            ],
            "directive_name": "autosummary",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "MaskedArray.flatten MaskedArray.ravel MaskedArray.reshape MaskedArray.resize MaskedArray.squeeze MaskedArray.swapaxes MaskedArray.transpose MaskedArray.T "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        }
      ],
      "title": "Shape manipulation"
    },
    {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "For array methods that take an "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "axis"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " keyword, it defaults to None. If axis is None, then the array is treated as a 1-D array. Any other value for "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "axis"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " represents the dimension along which the operation should proceed."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "args0": [
              ":toctree: generated/"
            ],
            "directive_name": "autosummary",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "MaskedArray.argmax MaskedArray.argmin MaskedArray.argsort MaskedArray.choose MaskedArray.compress MaskedArray.diagonal MaskedArray.fill MaskedArray.item MaskedArray.nonzero MaskedArray.put MaskedArray.repeat MaskedArray.searchsorted MaskedArray.sort MaskedArray.take "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        }
      ],
      "title": "Item selection and manipulation"
    },
    {
      "children": [
        {
          "data": {
            "args0": [
              ":toctree: generated/"
            ],
            "directive_name": "autosummary",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "MaskedArray.copy MaskedArray.dump MaskedArray.dumps "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        }
      ],
      "title": "Pickling and copy"
    },
    {
      "children": [
        {
          "data": {
            "args0": [
              ":toctree: generated/"
            ],
            "directive_name": "autosummary",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "MaskedArray.all MaskedArray.anom MaskedArray.any MaskedArray.clip MaskedArray.conj MaskedArray.conjugate MaskedArray.cumprod MaskedArray.cumsum MaskedArray.max MaskedArray.mean MaskedArray.min MaskedArray.prod MaskedArray.product MaskedArray.ptp MaskedArray.round MaskedArray.std MaskedArray.sum MaskedArray.trace MaskedArray.var "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        }
      ],
      "title": "Calculations"
    },
    {
      "children": [
        {
          "data": {
            "args0": [],
            "directive_name": "index",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "comparison, arithmetic, operation, operator "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        }
      ],
      "title": "Arithmetic and comparison operations"
    },
    {
      "children": [
        {
          "data": {
            "args0": [
              ":toctree: generated/"
            ],
            "directive_name": "autosummary",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "MaskedArray.__lt__ MaskedArray.__le__ MaskedArray.__gt__ MaskedArray.__ge__ MaskedArray.__eq__ MaskedArray.__ne__ "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        }
      ],
      "title": "Comparison operators:"
    },
    {
      "children": [
        {
          "data": {
            "args0": [
              ":toctree: generated/"
            ],
            "directive_name": "autosummary",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "MaskedArray.__bool__ "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        }
      ],
      "title": "Truth value of an array (:class:`bool() <bool>`):"
    },
    {
      "children": [
        {
          "data": {
            "args0": [
              ":toctree: generated/"
            ],
            "directive_name": "autosummary",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "MaskedArray.__abs__ MaskedArray.__add__ MaskedArray.__radd__ MaskedArray.__sub__ MaskedArray.__rsub__ MaskedArray.__mul__ MaskedArray.__rmul__ MaskedArray.__div__ MaskedArray.__truediv__ MaskedArray.__rtruediv__ MaskedArray.__floordiv__ MaskedArray.__rfloordiv__ MaskedArray.__mod__ MaskedArray.__rmod__ MaskedArray.__divmod__ MaskedArray.__rdivmod__ MaskedArray.__pow__ MaskedArray.__rpow__ MaskedArray.__lshift__ MaskedArray.__rlshift__ MaskedArray.__rshift__ MaskedArray.__rrshift__ MaskedArray.__and__ MaskedArray.__rand__ MaskedArray.__or__ MaskedArray.__ror__ MaskedArray.__xor__ MaskedArray.__rxor__ "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        }
      ],
      "title": "Arithmetic:"
    },
    {
      "children": [
        {
          "data": {
            "args0": [
              ":toctree: generated/"
            ],
            "directive_name": "autosummary",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "MaskedArray.__iadd__ MaskedArray.__isub__ MaskedArray.__imul__ MaskedArray.__idiv__ MaskedArray.__itruediv__ MaskedArray.__ifloordiv__ MaskedArray.__imod__ MaskedArray.__ipow__ MaskedArray.__ilshift__ MaskedArray.__irshift__ MaskedArray.__iand__ MaskedArray.__ior__ MaskedArray.__ixor__ "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        }
      ],
      "title": "Arithmetic, in-place:"
    },
    {
      "children": [
        {
          "data": {
            "args0": [
              ":toctree: generated/"
            ],
            "directive_name": "autosummary",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "MaskedArray.__repr__ MaskedArray.__str__ MaskedArray.ids MaskedArray.iscontiguous "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        }
      ],
      "title": "Representation"
    },
    {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "For standard library functions:"
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "args0": [
              ":toctree: generated/"
            ],
            "directive_name": "autosummary",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "MaskedArray.__copy__ MaskedArray.__deepcopy__ MaskedArray.__getstate__ MaskedArray.__reduce__ MaskedArray.__setstate__ "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Basic customization:"
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "args0": [
              ":toctree: generated/"
            ],
            "directive_name": "autosummary",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "MaskedArray.__new__ MaskedArray.__array__ MaskedArray.__array_wrap__ "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Container customization: (see "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "Indexing <arrays.indexing>"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ")"
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "args0": [
              ":toctree: generated/"
            ],
            "directive_name": "autosummary",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "MaskedArray.__len__ MaskedArray.__getitem__ MaskedArray.__setitem__ MaskedArray.__delitem__ MaskedArray.__contains__ "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        }
      ],
      "title": "Special methods"
    },
    {
      "children": [],
      "title": "Specific methods"
    },
    {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "The following methods can be used to access information about the mask or to manipulate the mask."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "args0": [
              ":toctree: generated/"
            ],
            "directive_name": "autosummary",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "MaskedArray.__setmask__ MaskedArray.harden_mask MaskedArray.soften_mask MaskedArray.unshare_mask MaskedArray.shrink_mask "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        }
      ],
      "title": "Handling the mask"
    },
    {
      "children": [
        {
          "data": {
            "args0": [
              ":toctree: generated/"
            ],
            "directive_name": "autosummary",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "MaskedArray.get_fill_value MaskedArray.set_fill_value "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        }
      ],
      "title": "Handling the `fill_value`"
    },
    {
      "children": [
        {
          "data": {
            "args0": [
              ":toctree: generated/"
            ],
            "directive_name": "autosummary",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "MaskedArray.count "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        }
      ],
      "title": "Counting the missing elements"
    }
  ],
  "example_section_data": {
    "children": [],
    "title": null
  },
  "item_file": null,
  "item_line": null,
  "item_type": null,
  "ordered_sections": [],
  "references": null,
  "refs": [],
  "see_also": [],
  "signature": {
    "value": null
  }
}