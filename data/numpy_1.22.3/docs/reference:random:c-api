{
  "_content": {},
  "aliases": [],
  "arbitrary": [
    {
      "children": [
        {
          "data": {
            "args0": [],
            "directive_name": "currentmodule",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "numpy.random "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "children": [
              {
                "inline": [
                  {
                    "data": {
                      "value": "1.19.0 "
                    },
                    "type": "Words"
                  }
                ],
                "inner": []
              }
            ],
            "kind": "versionadded",
            "title": "TODO"
          },
          "type": "Admonition"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Access to various distributions below is available via Cython or C-wrapper libraries like CFFI. All the functions accept a "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "bitgen_t"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " as their first argument.  To access these from Cython or C, you must link with the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "npyrandom"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " library which is part of the NumPy distribution, located in "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "numpy/random/lib"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": "."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "args0": [
              "bitgen_t"
            ],
            "directive_name": "c:type",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "The : c : type : `bitgen_t` holds the current state of the BitGenerator and pointers to functions that return standard C types while advancing the state. .. code - block : : c struct bitgen : void *state npy_uint64 ( *next_uint64) ( void *st) nogil uint32_t ( *next_uint32) ( void *st) nogil double ( *next_double) ( void *st) nogil npy_uint64 ( *next_raw) ( void *st) nogil ctypedef bitgen bitgen_t "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "See "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "extending"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " for examples of using these functions."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "The functions are named with the following conventions:"
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "value": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "\"standard\" refers to the reference values for any parameters. For instance   \"standard_uniform\" means a uniform distribution on the interval "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "0.0"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " to   "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "1.0"
                            ]
                          },
                          "type": "Verbatim"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ]
              }
            ]
          },
          "type": "BulletList"
        },
        {
          "data": {
            "children": [
              {
                "value": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "\"fill\" functions will fill the provided "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "out"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " with "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "cnt"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " values."
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ]
              }
            ]
          },
          "type": "BulletList"
        },
        {
          "data": {
            "children": [
              {
                "value": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "The functions without \"standard\" in their name require additional parameters   to describe the distributions."
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ]
              }
            ]
          },
          "type": "BulletList"
        },
        {
          "data": {
            "children": [
              {
                "value": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "Functions with "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "inv"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " in their name are based on the slower inverse method   instead of a ziggurat lookup algorithm, which is significantly faster. The   non-ziggurat variants are used in corner cases and for legacy compatibility."
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ]
              }
            ]
          },
          "type": "BulletList"
        },
        {
          "data": {
            "args0": [],
            "directive_name": "c:function",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "double random_standard_uniform ( bitgen_t *bitgen_state) "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [],
            "directive_name": "c:function",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "void random_standard_uniform_fill ( bitgen_t* bitgen_state, npy_intp cnt, double *out) "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [],
            "directive_name": "c:function",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "double random_standard_exponential ( bitgen_t *bitgen_state) "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [],
            "directive_name": "c:function",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "void random_standard_exponential_fill ( bitgen_t *bitgen_state, npy_intp cnt, double *out) "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [],
            "directive_name": "c:function",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "void random_standard_exponential_inv_fill ( bitgen_t *bitgen_state, npy_intp cnt, double *out) "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [],
            "directive_name": "c:function",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "double random_standard_normal ( bitgen_t* bitgen_state) "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [],
            "directive_name": "c:function",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "void random_standard_normal_fill ( bitgen_t *bitgen_state, npy_intp count, double *out) "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [],
            "directive_name": "c:function",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "void random_standard_normal_fill_f ( bitgen_t *bitgen_state, npy_intp count, float *out) "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [],
            "directive_name": "c:function",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "double random_standard_gamma ( bitgen_t *bitgen_state, double shape) "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [],
            "directive_name": "c:function",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "float random_standard_uniform_f ( bitgen_t *bitgen_state) "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [],
            "directive_name": "c:function",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "void random_standard_uniform_fill_f ( bitgen_t* bitgen_state, npy_intp cnt, float *out) "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [],
            "directive_name": "c:function",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "float random_standard_exponential_f ( bitgen_t *bitgen_state) "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [],
            "directive_name": "c:function",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "void random_standard_exponential_fill_f ( bitgen_t *bitgen_state, npy_intp cnt, float *out) "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [],
            "directive_name": "c:function",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "void random_standard_exponential_inv_fill_f ( bitgen_t *bitgen_state, npy_intp cnt, float *out) "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [],
            "directive_name": "c:function",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "float random_standard_normal_f ( bitgen_t* bitgen_state) "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [],
            "directive_name": "c:function",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "float random_standard_gamma_f ( bitgen_t *bitgen_state, float shape) "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [],
            "directive_name": "c:function",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "double random_normal ( bitgen_t *bitgen_state, double loc, double scale) "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [],
            "directive_name": "c:function",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "double random_gamma ( bitgen_t *bitgen_state, double shape, double scale) "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [],
            "directive_name": "c:function",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "float random_gamma_f ( bitgen_t *bitgen_state, float shape, float scale) "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [],
            "directive_name": "c:function",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "double random_exponential ( bitgen_t *bitgen_state, double scale) "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [],
            "directive_name": "c:function",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "double random_uniform ( bitgen_t *bitgen_state, double lower, double range) "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [],
            "directive_name": "c:function",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "double random_beta ( bitgen_t *bitgen_state, double a, double b) "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [],
            "directive_name": "c:function",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "double random_chisquare ( bitgen_t *bitgen_state, double df) "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [],
            "directive_name": "c:function",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "double random_f ( bitgen_t *bitgen_state, double dfnum, double dfden) "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [],
            "directive_name": "c:function",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "double random_standard_cauchy ( bitgen_t *bitgen_state) "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [],
            "directive_name": "c:function",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "double random_pareto ( bitgen_t *bitgen_state, double a) "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [],
            "directive_name": "c:function",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "double random_weibull ( bitgen_t *bitgen_state, double a) "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [],
            "directive_name": "c:function",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "double random_power ( bitgen_t *bitgen_state, double a) "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [],
            "directive_name": "c:function",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "double random_laplace ( bitgen_t *bitgen_state, double loc, double scale) "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [],
            "directive_name": "c:function",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "double random_gumbel ( bitgen_t *bitgen_state, double loc, double scale) "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [],
            "directive_name": "c:function",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "double random_logistic ( bitgen_t *bitgen_state, double loc, double scale) "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [],
            "directive_name": "c:function",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "double random_lognormal ( bitgen_t *bitgen_state, double mean, double sigma) "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [],
            "directive_name": "c:function",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "double random_rayleigh ( bitgen_t *bitgen_state, double mode) "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [],
            "directive_name": "c:function",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "double random_standard_t ( bitgen_t *bitgen_state, double df) "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [],
            "directive_name": "c:function",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "double random_noncentral_chisquare ( bitgen_t *bitgen_state, double df, double nonc) "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [],
            "directive_name": "c:function",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "double random_noncentral_f ( bitgen_t *bitgen_state, double dfnum, double dfden, double nonc) "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [],
            "directive_name": "c:function",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "double random_wald ( bitgen_t *bitgen_state, double mean, double scale) "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [],
            "directive_name": "c:function",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "double random_vonmises ( bitgen_t *bitgen_state, double mu, double kappa) "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [],
            "directive_name": "c:function",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "double random_triangular ( bitgen_t *bitgen_state, double left, double mode, double right) "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [],
            "directive_name": "c:function",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "npy_int64 random_poisson ( bitgen_t *bitgen_state, double lam) "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [],
            "directive_name": "c:function",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "npy_int64 random_negative_binomial ( bitgen_t *bitgen_state, double n, double p) "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [
              "binomial_t"
            ],
            "directive_name": "c:type",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": ".. code - block : : c typedef struct s_binomial_t { int has_binomial; / * !=0 : following parameters initialized for binomial * / double psave; RAND_INT_TYPE nsave; double r; double q; double fm; RAND_INT_TYPE m; double p1; double xm; double xl; double xr; double c; double laml; double lamr; double p2; double p3; double p4; } binomial_t; "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [],
            "directive_name": "c:function",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "npy_int64 random_binomial ( bitgen_t *bitgen_state, double p, npy_int64 n, binomial_t *binomial) "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [],
            "directive_name": "c:function",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "npy_int64 random_logseries ( bitgen_t *bitgen_state, double p) "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [],
            "directive_name": "c:function",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "npy_int64 random_geometric_search ( bitgen_t *bitgen_state, double p) "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [],
            "directive_name": "c:function",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "npy_int64 random_geometric_inversion ( bitgen_t *bitgen_state, double p) "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [],
            "directive_name": "c:function",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "npy_int64 random_geometric ( bitgen_t *bitgen_state, double p) "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [],
            "directive_name": "c:function",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "npy_int64 random_zipf ( bitgen_t *bitgen_state, double a) "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [],
            "directive_name": "c:function",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "npy_int64 random_hypergeometric ( bitgen_t *bitgen_state, npy_int64 good, npy_int64 bad, npy_int64 sample) "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [],
            "directive_name": "c:function",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "npy_uint64 random_interval ( bitgen_t *bitgen_state, npy_uint64 max) "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [],
            "directive_name": "c:function",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "void random_multinomial ( bitgen_t *bitgen_state, npy_int64 n, npy_int64 *mnix, double *pix, npy_intp d, binomial_t *binomial) "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [],
            "directive_name": "c:function",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "int random_multivariate_hypergeometric_count ( bitgen_t *bitgen_state, npy_int64 total, size_t num_colors, npy_int64 *colors, npy_int64 nsample, size_t num_variates, npy_int64 *variates) "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [],
            "directive_name": "c:function",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "void random_multivariate_hypergeometric_marginals ( bitgen_t *bitgen_state, npy_int64 total, size_t num_colors, npy_int64 *colors, npy_int64 nsample, size_t num_variates, npy_int64 *variates) "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Generate a single integer"
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "args0": [],
            "directive_name": "c:function",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "npy_int64 random_positive_int64 ( bitgen_t *bitgen_state) "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [],
            "directive_name": "c:function",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "npy_int32 random_positive_int32 ( bitgen_t *bitgen_state) "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [],
            "directive_name": "c:function",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "npy_int64 random_positive_int ( bitgen_t *bitgen_state) "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [],
            "directive_name": "c:function",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "npy_uint64 random_uint ( bitgen_t *bitgen_state) "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Generate random uint64 numbers in closed interval [off, off + rng]."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "args0": [],
            "directive_name": "c:function",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "npy_uint64 random_bounded_uint64 ( bitgen_t *bitgen_state, npy_uint64 off, npy_uint64 rng, npy_uint64 mask, bool use_masked) "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        }
      ],
      "title": "C API for random"
    }
  ],
  "example_section_data": {
    "children": [],
    "title": null
  },
  "item_file": null,
  "item_line": null,
  "item_type": null,
  "ordered_sections": [],
  "references": null,
  "refs": [],
  "see_also": [],
  "signature": {
    "value": null
  }
}