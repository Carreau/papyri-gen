{
  "aliases": [],
  "arbitrary": [
    {
      "children": [
        {
          "data": {
            "argument": "numpy.random",
            "content": "",
            "name": "currentmodule",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "children": [],
            "kind": "versionadded",
            "title": "1.19.0"
          },
          "type": "Admonition"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Access to various distributions below is available via Cython or C-wrapper libraries like CFFI. All the functions accept a "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "bitgen_t"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " as their first argument.  To access these from Cython or C, you must link with the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "npyrandom"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " library which is part of the NumPy distribution, located in "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "numpy/random/lib"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": "."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "argument": "bitgen_t",
            "content": "The :c:type:`bitgen_t` holds the current state of the BitGenerator and\npointers to functions that return standard C types while advancing the\nstate.\n\n.. code-block:: c\n\n    struct bitgen:\n        void *state\n        npy_uint64 (*next_uint64)(void *st) nogil\n        uint32_t (*next_uint32)(void *st) nogil\n        double (*next_double)(void *st) nogil\n        npy_uint64 (*next_raw)(void *st) nogil\n\n    ctypedef bitgen bitgen_t",
            "name": "c:type",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "See "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "extending"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " for examples of using these functions."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "The functions are named with the following conventions:"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "\"standard\" refers to the reference values for any parameters. For instance   \"standard_uniform\" means a uniform distribution on the interval "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "0.0"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " to   "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "1.0"
                            ]
                          },
                          "type": "Verbatim"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "\"fill\" functions will fill the provided "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "out"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " with "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "cnt"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " values."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "The functions without \"standard\" in their name require additional parameters   to describe the distributions."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Functions with "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "inv"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " in their name are based on the slower inverse method   instead of a ziggurat lookup algorithm, which is significantly faster. The   non-ziggurat variants are used in corner cases and for legacy compatibility."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              }
            ]
          },
          "type": "BulletList"
        },
        {
          "data": {
            "argument": "double random_standard_uniform(bitgen_t *bitgen_state)",
            "content": "",
            "name": "c:function",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "void random_standard_uniform_fill(bitgen_t* bitgen_state, npy_intp cnt, double *out)",
            "content": "",
            "name": "c:function",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "double random_standard_exponential(bitgen_t *bitgen_state)",
            "content": "",
            "name": "c:function",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "void random_standard_exponential_fill(bitgen_t *bitgen_state, npy_intp cnt, double *out)",
            "content": "",
            "name": "c:function",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "void random_standard_exponential_inv_fill(bitgen_t *bitgen_state, npy_intp cnt, double *out)",
            "content": "",
            "name": "c:function",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "double random_standard_normal(bitgen_t* bitgen_state)",
            "content": "",
            "name": "c:function",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "void random_standard_normal_fill(bitgen_t *bitgen_state, npy_intp count, double *out)",
            "content": "",
            "name": "c:function",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "void random_standard_normal_fill_f(bitgen_t *bitgen_state, npy_intp count, float *out)",
            "content": "",
            "name": "c:function",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "double random_standard_gamma(bitgen_t *bitgen_state, double shape)",
            "content": "",
            "name": "c:function",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "float random_standard_uniform_f(bitgen_t *bitgen_state)",
            "content": "",
            "name": "c:function",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "void random_standard_uniform_fill_f(bitgen_t* bitgen_state, npy_intp cnt, float *out)",
            "content": "",
            "name": "c:function",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "float random_standard_exponential_f(bitgen_t *bitgen_state)",
            "content": "",
            "name": "c:function",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "void random_standard_exponential_fill_f(bitgen_t *bitgen_state, npy_intp cnt, float *out)",
            "content": "",
            "name": "c:function",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "void random_standard_exponential_inv_fill_f(bitgen_t *bitgen_state, npy_intp cnt, float *out)",
            "content": "",
            "name": "c:function",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "float random_standard_normal_f(bitgen_t* bitgen_state)",
            "content": "",
            "name": "c:function",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "float random_standard_gamma_f(bitgen_t *bitgen_state, float shape)",
            "content": "",
            "name": "c:function",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "double random_normal(bitgen_t *bitgen_state, double loc, double scale)",
            "content": "",
            "name": "c:function",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "double random_gamma(bitgen_t *bitgen_state, double shape, double scale)",
            "content": "",
            "name": "c:function",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "float random_gamma_f(bitgen_t *bitgen_state, float shape, float scale)",
            "content": "",
            "name": "c:function",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "double random_exponential(bitgen_t *bitgen_state, double scale)",
            "content": "",
            "name": "c:function",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "double random_uniform(bitgen_t *bitgen_state, double lower, double range)",
            "content": "",
            "name": "c:function",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "double random_beta(bitgen_t *bitgen_state, double a, double b)",
            "content": "",
            "name": "c:function",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "double random_chisquare(bitgen_t *bitgen_state, double df)",
            "content": "",
            "name": "c:function",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "double random_f(bitgen_t *bitgen_state, double dfnum, double dfden)",
            "content": "",
            "name": "c:function",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "double random_standard_cauchy(bitgen_t *bitgen_state)",
            "content": "",
            "name": "c:function",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "double random_pareto(bitgen_t *bitgen_state, double a)",
            "content": "",
            "name": "c:function",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "double random_weibull(bitgen_t *bitgen_state, double a)",
            "content": "",
            "name": "c:function",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "double random_power(bitgen_t *bitgen_state, double a)",
            "content": "",
            "name": "c:function",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "double random_laplace(bitgen_t *bitgen_state, double loc, double scale)",
            "content": "",
            "name": "c:function",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "double random_gumbel(bitgen_t *bitgen_state, double loc, double scale)",
            "content": "",
            "name": "c:function",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "double random_logistic(bitgen_t *bitgen_state, double loc, double scale)",
            "content": "",
            "name": "c:function",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "double random_lognormal(bitgen_t *bitgen_state, double mean, double sigma)",
            "content": "",
            "name": "c:function",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "double random_rayleigh(bitgen_t *bitgen_state, double mode)",
            "content": "",
            "name": "c:function",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "double random_standard_t(bitgen_t *bitgen_state, double df)",
            "content": "",
            "name": "c:function",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "double random_noncentral_chisquare(bitgen_t *bitgen_state, double df, double nonc)",
            "content": "",
            "name": "c:function",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "double random_noncentral_f(bitgen_t *bitgen_state, double dfnum, double dfden, double nonc)",
            "content": "",
            "name": "c:function",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "double random_wald(bitgen_t *bitgen_state, double mean, double scale)",
            "content": "",
            "name": "c:function",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "double random_vonmises(bitgen_t *bitgen_state, double mu, double kappa)",
            "content": "",
            "name": "c:function",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "double random_triangular(bitgen_t *bitgen_state, double left, double mode, double right)",
            "content": "",
            "name": "c:function",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "npy_int64 random_poisson(bitgen_t *bitgen_state, double lam)",
            "content": "",
            "name": "c:function",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "npy_int64 random_negative_binomial(bitgen_t *bitgen_state, double n, double p)",
            "content": "",
            "name": "c:function",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "binomial_t",
            "content": ".. code-block:: c\n\n    typedef struct s_binomial_t {\n      int has_binomial; /* !=0: following parameters initialized for binomial */\n      double psave;\n      RAND_INT_TYPE nsave;\n      double r;\n      double q;\n      double fm;\n      RAND_INT_TYPE m;\n      double p1;\n      double xm;\n      double xl;\n      double xr;\n      double c;\n      double laml;\n      double lamr;\n      double p2;\n      double p3;\n      double p4;\n    } binomial_t;",
            "name": "c:type",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "npy_int64 random_binomial(bitgen_t *bitgen_state, double p, npy_int64 n, binomial_t *binomial)",
            "content": "",
            "name": "c:function",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "npy_int64 random_logseries(bitgen_t *bitgen_state, double p)",
            "content": "",
            "name": "c:function",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "npy_int64 random_geometric_search(bitgen_t *bitgen_state, double p)",
            "content": "",
            "name": "c:function",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "npy_int64 random_geometric_inversion(bitgen_t *bitgen_state, double p)",
            "content": "",
            "name": "c:function",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "npy_int64 random_geometric(bitgen_t *bitgen_state, double p)",
            "content": "",
            "name": "c:function",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "npy_int64 random_zipf(bitgen_t *bitgen_state, double a)",
            "content": "",
            "name": "c:function",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "npy_int64 random_hypergeometric(bitgen_t *bitgen_state, npy_int64 good, npy_int64 bad, npy_int64 sample)",
            "content": "",
            "name": "c:function",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "npy_uint64 random_interval(bitgen_t *bitgen_state, npy_uint64 max)",
            "content": "",
            "name": "c:function",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "void random_multinomial(bitgen_t *bitgen_state, npy_int64 n, npy_int64 *mnix, double *pix, npy_intp d, binomial_t *binomial)",
            "content": "",
            "name": "c:function",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "int random_multivariate_hypergeometric_count(bitgen_t *bitgen_state, npy_int64 total, size_t num_colors, npy_int64 *colors, npy_int64 nsample, size_t num_variates, npy_int64 *variates)",
            "content": "",
            "name": "c:function",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "void random_multivariate_hypergeometric_marginals(bitgen_t *bitgen_state, npy_int64 total, size_t num_colors, npy_int64 *colors, npy_int64 nsample, size_t num_variates, npy_int64 *variates)",
            "content": "",
            "name": "c:function",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Generate a single integer"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "argument": "npy_int64 random_positive_int64(bitgen_t *bitgen_state)",
            "content": "",
            "name": "c:function",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "npy_int32 random_positive_int32(bitgen_t *bitgen_state)",
            "content": "",
            "name": "c:function",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "npy_int64 random_positive_int(bitgen_t *bitgen_state)",
            "content": "",
            "name": "c:function",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "npy_uint64 random_uint(bitgen_t *bitgen_state)",
            "content": "",
            "name": "c:function",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Generate random uint64 numbers in closed interval [off, off + rng]."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "argument": "npy_uint64 random_bounded_uint64(bitgen_t *bitgen_state, npy_uint64 off, npy_uint64 rng, npy_uint64 mask, bool use_masked)",
            "content": "",
            "name": "c:function",
            "options": []
          },
          "type": "BlockDirective"
        }
      ],
      "title": "C API for random"
    }
  ],
  "content": {},
  "example_section_data": {
    "children": [],
    "title": null
  },
  "item_file": null,
  "item_line": null,
  "item_type": null,
  "ordered_sections": [],
  "references": null,
  "see_also": [],
  "signature": {
    "value": null
  }
}