{
  "_content": {},
  "aliases": [],
  "arbitrary": [
    {
      "children": [
        {
          "data": {
            "args0": [],
            "directive_name": "currentmodule",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "numpy.random "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        }
      ],
      "title": null
    },
    {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "The "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "~Generator"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " provides access to a wide range of distributions, and served as a replacement for "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "~numpy.random.RandomState"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ".  The main difference between the two is that "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "Generator"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " relies on an additional BitGenerator to manage state and generate the random bits, which are then transformed into random values from useful distributions. The default BitGenerator used by "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "Generator"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " is "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "~PCG64"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": ".  The BitGenerator can be changed by passing an instantized BitGenerator to "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "Generator"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": "."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "args0": [],
            "directive_name": "autofunction",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "default_rng "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [
              "Generator"
            ],
            "directive_name": "autoclass",
            "inner": {
              "inline": [],
              "inner": []
            }
          },
          "type": "BlockDirective"
        }
      ],
      "title": "Random Generator"
    },
    {
      "children": [
        {
          "data": {
            "args0": [
              ":toctree: generated/"
            ],
            "directive_name": "autosummary",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "~numpy.random.Generator.bit_generator "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        }
      ],
      "title": "Accessing the BitGenerator"
    },
    {
      "children": [
        {
          "data": {
            "args0": [
              ":toctree: generated/"
            ],
            "directive_name": "autosummary",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "~numpy.random.Generator.integers ~numpy.random.Generator.random ~numpy.random.Generator.choice ~numpy.random.Generator.bytes "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        }
      ],
      "title": "Simple random data"
    },
    {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "The methods for randomly permuting a sequence are"
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "args0": [
              ":toctree: generated/"
            ],
            "directive_name": "autosummary",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "~numpy.random.Generator.shuffle ~numpy.random.Generator.permutation ~numpy.random.Generator.permuted "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "The following table summarizes the behaviors of the methods."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "+--------------+-------------------+------------------+ | method       | copy/in-place     | axis handling    | +==============+===================+==================+ | shuffle      | in-place          | as if 1d         | +--------------+-------------------+------------------+ | permutation  | copy              | as if 1d         | +--------------+-------------------+------------------+ | permuted     | either (use 'out' | axis independent | |              | for in-place)     |                  | +--------------+-------------------+------------------+"
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "The following subsections provide more details about the differences."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": "Permutations"
    },
    {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "The main difference between "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "Generator.shuffle"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " and "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "Generator.permutation"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " is that "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "Generator.shuffle"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " operates in-place, while "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "Generator.permutation"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " returns a copy."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "By default, "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "Generator.permuted"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " returns a copy.  To operate in-place with "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "Generator.permuted"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": ", pass the same array as the first argument "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "and"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": " as the value of the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "out"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " parameter.  For example,"
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": [
              ">>> rng = np.random.default_rng()",
              ">>> x = np.arange(0, 15).reshape(3, 5)",
              ">>> x #doctest: +SKIP",
              "array([[ 0,  1,  2,  3,  4],",
              "       [ 5,  6,  7,  8,  9],",
              "       [10, 11, 12, 13, 14]])",
              ">>> y = rng.permuted(x, axis=1, out=x)",
              ">>> x #doctest: +SKIP",
              "array([[ 1,  0,  2,  4,  3],  # random",
              "       [ 6,  7,  8,  9,  5],",
              "       [10, 14, 11, 13, 12]])"
            ]
          },
          "type": "BlockQuote"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Note that when "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "out"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " is given, the return value is "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "out"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ":"
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": [
              ">>> y is x",
              "True"
            ]
          },
          "type": "BlockQuote"
        }
      ],
      "title": "In-place vs. copy"
    },
    {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "An important distinction for these methods is how they handle the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "axis"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " parameter.  Both "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "Generator.shuffle"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " and "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "Generator.permutation"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " treat the input as a one-dimensional sequence, and the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "axis"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " parameter determines which dimension of the input array to use as the sequence. In the case of a two-dimensional array, "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "axis=0"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " will, in effect, rearrange the rows of the array, and  "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "axis=1"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " will rearrange the columns.  For example"
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": [
              ">>> rng = np.random.default_rng()",
              ">>> x = np.arange(0, 15).reshape(3, 5)",
              ">>> x",
              "array([[ 0,  1,  2,  3,  4],",
              "       [ 5,  6,  7,  8,  9],",
              "       [10, 11, 12, 13, 14]])",
              ">>> rng.permutation(x, axis=1) #doctest: +SKIP",
              "array([[ 1,  3,  2,  0,  4],  # random",
              "       [ 6,  8,  7,  5,  9],",
              "       [11, 13, 12, 10, 14]])"
            ]
          },
          "type": "BlockQuote"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Note that the columns have been rearranged \"in bulk\": the values within each column have not changed."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "The method "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "Generator.permuted"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " treats the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "axis"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " parameter similar to how "
                },
                "type": "Words"
              },
              {
                "data": {
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "api",
                    "module": "numpy",
                    "path": "numpy.sort",
                    "version": "*"
                  },
                  "value": "numpy.sort"
                },
                "type": "Link"
              },
              {
                "data": {
                  "value": " treats it.  Each slice along the given axis is shuffled independently of the others.  Compare the following example of the use of "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "Generator.permuted"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " to the above example of "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "Generator.permutation"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": ":"
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": [
              ">>> rng.permuted(x, axis=1) #doctest: +SKIP",
              "array([[ 1,  0,  2,  4,  3],  # random",
              "       [ 5,  7,  6,  9,  8],",
              "       [10, 14, 12, 13, 11]])"
            ]
          },
          "type": "BlockQuote"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "In this example, the values within each row (i.e. the values along "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "axis=1"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ") have been shuffled independently.  This is not a \"bulk\" shuffle of the columns."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": "Handling the ``axis`` parameter"
    },
    {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "Generator.shuffle"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " works on non-NumPy sequences.  That is, if it is given a sequence that is not a NumPy array, it shuffles that sequence in-place. For example,"
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": [
              ">>> rng = np.random.default_rng()",
              ">>> a = ['A', 'B', 'C', 'D', 'E']",
              ">>> rng.shuffle(a)  # shuffle the list in-place",
              ">>> a #doctest: +SKIP",
              "['B', 'D', 'A', 'E', 'C']  # random"
            ]
          },
          "type": "BlockQuote"
        }
      ],
      "title": "Shuffling non-NumPy sequences"
    },
    {
      "children": [
        {
          "data": {
            "args0": [
              ":toctree: generated/"
            ],
            "directive_name": "autosummary",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "~numpy.random.Generator.beta ~numpy.random.Generator.binomial ~numpy.random.Generator.chisquare ~numpy.random.Generator.dirichlet ~numpy.random.Generator.exponential ~numpy.random.Generator.f ~numpy.random.Generator.gamma ~numpy.random.Generator.geometric ~numpy.random.Generator.gumbel ~numpy.random.Generator.hypergeometric ~numpy.random.Generator.laplace ~numpy.random.Generator.logistic ~numpy.random.Generator.lognormal ~numpy.random.Generator.logseries ~numpy.random.Generator.multinomial ~numpy.random.Generator.multivariate_hypergeometric ~numpy.random.Generator.multivariate_normal ~numpy.random.Generator.negative_binomial ~numpy.random.Generator.noncentral_chisquare ~numpy.random.Generator.noncentral_f ~numpy.random.Generator.normal ~numpy.random.Generator.pareto ~numpy.random.Generator.poisson ~numpy.random.Generator.power ~numpy.random.Generator.rayleigh ~numpy.random.Generator.standard_cauchy ~numpy.random.Generator.standard_exponential ~numpy.random.Generator.standard_gamma ~numpy.random.Generator.standard_normal ~numpy.random.Generator.standard_t ~numpy.random.Generator.triangular ~numpy.random.Generator.uniform ~numpy.random.Generator.vonmises ~numpy.random.Generator.wald ~numpy.random.Generator.weibull ~numpy.random.Generator.zipf "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        }
      ],
      "title": "Distributions"
    }
  ],
  "example_section_data": {
    "children": [],
    "title": null
  },
  "item_file": null,
  "item_line": null,
  "item_type": null,
  "ordered_sections": [],
  "references": null,
  "refs": [],
  "see_also": [],
  "signature": {
    "value": null
  }
}