{
  "_content": {},
  "aliases": [],
  "arbitrary": [
    {
      "children": [
        {
          "data": {
            "placeholder": "target",
            "value": ".. _numpyrandom:"
          },
          "type": "Unimplemented"
        },
        {
          "data": {
            "args0": [],
            "directive_name": "py:module",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "numpy.random "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [],
            "directive_name": "currentmodule",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "numpy.random "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        }
      ],
      "title": null
    },
    {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Numpy's random number routines produce pseudo random numbers using combinations of a "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "BitGenerator"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " to create sequences and a "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "Generator"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " to use those sequences to sample from different statistical distributions:"
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "value": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "BitGenerators: Objects that generate random numbers. These are typically   unsigned integer words filled with sequences of either 32 or 64 random bits."
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "value": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "Generators: Objects that transform sequences of random bits from a   BitGenerator into sequences of numbers that follow a specific probability   distribution (such as uniform, Normal or Binomial) within a specified   interval."
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ]
              }
            ]
          },
          "type": "BulletList"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Since Numpy version 1.17.0 the Generator can be initialized with a number of different BitGenerators. It exposes many different probability distributions. See "
                },
                "type": "Words"
              },
              {
                "data": {
                  "target": "https://www.numpy.org/neps/\nnep-0019-rng-policy.html",
                  "value": "NEP 19"
                },
                "type": "ExternalLink"
              },
              {
                "data": {
                  "value": " for context on the updated random Numpy number routines. The legacy "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "RandomState"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " random number routines are still available, but limited to a single BitGenerator. See "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "new-or-different"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": "  for a complete list of improvements and differences from the legacy "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "RandomState"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": "."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "For convenience and backward compatibility, a single "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "RandomState"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " instance's methods are imported into the numpy.random namespace, see "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "legacy"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " for the complete list."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "placeholder": "target",
            "value": ".. _random-quick-start:"
          },
          "type": "Unimplemented"
        }
      ],
      "title": "Random sampling (:mod:`numpy.random`)"
    },
    {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Call "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "default_rng"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " to get a new instance of a "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "Generator"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": ", then call its methods to obtain samples from different distributions.  By default, "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "Generator"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " uses bits provided by "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "PCG64"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " which has better statistical properties than the legacy "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "MT19937"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " used in "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "RandomState"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": "."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "args0": [
              "python"
            ],
            "directive_name": "code-block",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "# Do this ( new version) from numpy.random import default_rng rng = default_rng ( ) vals = rng.standard_normal ( 10) more_vals = rng.standard_normal ( 10) # instead of this ( legacy version) from numpy import random vals = random.standard_normal ( 10) more_vals = random.standard_normal ( 10) "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "Generator"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " can be used as a replacement for "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "RandomState"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": ". Both class instances hold an internal "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "BitGenerator"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " instance to provide the bit stream, it is accessible as "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "gen.bit_generator"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ". Some long-overdue API cleanup means that legacy and compatibility methods have been removed from "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "Generator"
                },
                "type": "Directive"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "=================== ============== ============ "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "RandomState"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": "       "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "Generator"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": "    Notes ------------------- -------------- ------------ "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "random_sample"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ",  "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "random"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": "     Compatible with "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "random.random"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "rand"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " ------------------- -------------- ------------ "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "randint"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ",        "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "integers"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": "   Add an "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "endpoint"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " kwarg "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "random_integers"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " ------------------- -------------- ------------ "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "tomaxint"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": "        removed        Use "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "integers(0, np.iinfo(np.int_).max,"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": "                                    "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "endpoint=False)"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " ------------------- -------------- ------------ "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "seed"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": "            removed        Use "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "SeedSequence.spawn"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " =================== ============== ============"
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "See "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "new-or-different"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " for more information."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Something like the following code can be used to support both "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "RandomState"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " and "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "Generator"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", with the understanding that the interfaces are slightly different"
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "args0": [
              "python"
            ],
            "directive_name": "code-block",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "try : rng_integers = rng.integers except AttributeError : rng_integers = rng.randint a = rng_integers ( 1000) "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Seeds can be passed to any of the BitGenerators. The provided value is mixed via "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "SeedSequence"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " to spread a possible sequence of seeds across a wider range of initialization states for the BitGenerator. Here "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "PCG64"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " is used and is wrapped with a "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "Generator"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": "."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "args0": [
              "python"
            ],
            "directive_name": "code-block",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "from numpy.random import Generator, PCG64 rng = Generator ( PCG64 ( 12345)) rng.standard_normal ( ) "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Here we use "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "default_rng"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " to create an instance of "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "Generator"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " to generate a  random float:"
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": ">>> import numpy as np\n>>> rng = np.random.default_rng(12345)\n>>> print(rng)\nGenerator(PCG64)\n>>> rfloat = rng.random()\n>>> rfloat\n0.22733602246716966\n>>> type(rfloat)\n<class 'float'>"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Here we use "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "default_rng"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " to create an instance of "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "Generator"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " to generate 3  random integers between 0 (inclusive) and 10 (exclusive):"
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": ">>> import numpy as np\n>>> rng = np.random.default_rng(12345)\n>>> rints = rng.integers(low=0, high=10, size=3)\n>>> rints\narray([6, 2, 7])\n>>> type(rints[0])\n<class 'numpy.int64'>"
          },
          "type": "BlockVerbatim"
        }
      ],
      "title": "Quick Start"
    },
    {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "The new infrastructure takes a different approach to producing random numbers from the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "RandomState"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " object.  Random number generation is separated into two components, a bit generator and a random generator."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "The "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "BitGenerator"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " has a limited set of responsibilities. It manages state and provides functions to produce random doubles and random unsigned 32- and 64-bit values."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "The "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "random generator <Generator>"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " takes the bit generator-provided stream and transforms them into more useful distributions, e.g., simulated normal random values. This structure allows alternative bit generators to be used with little code duplication."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "The "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "Generator"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " is the user-facing object that is nearly identical to the legacy "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "RandomState"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": ". It accepts a bit generator instance as an argument. The default is currently "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "PCG64"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " but this may change in future versions.  As a convenience NumPy  provides the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "default_rng"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " function to hide these  details:"
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": ">>> from numpy.random import default_rng\n>>> rng = default_rng(12345)\n>>> print(rng)\nGenerator(PCG64)\n>>> print(rng.random())\n0.22733602246716966"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "One can also instantiate "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "Generator"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " directly with a "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "BitGenerator"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " instance."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "To use the default "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "PCG64"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " bit generator, one can instantiate it directly and  pass it to "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "Generator"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": ":"
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": ">>> from numpy.random import Generator, PCG64\n>>> rng = Generator(PCG64(12345))\n>>> print(rng)\nGenerator(PCG64)"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Similarly to use the older "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "MT19937"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " bit generator (not recommended), one can instantiate it directly and pass it to "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "Generator"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": ":"
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": ">>> from numpy.random import Generator, MT19937\n>>> rng = Generator(MT19937(12345))\n>>> print(rng)\nGenerator(MT19937)"
          },
          "type": "BlockVerbatim"
        }
      ],
      "title": "Introduction"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "inline": [
                  {
                    "data": {
                      "value": "The Box - Muller method used to produce NumPy ' s normals is no longer available in `Generator`. It is not possible to reproduce the exact random values using Generator for the normal distribution or any other distribution that relies on the normal such as the `RandomState.gamma` or `RandomState.standard_t`. If you require bitwise backward compatible streams, use `RandomState`. "
                    },
                    "type": "Words"
                  }
                ],
                "inner": []
              }
            ],
            "kind": "warning",
            "title": ""
          },
          "type": "Admonition"
        },
        {
          "data": {
            "children": [
              {
                "value": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "The Generator's normal, exponential and gamma functions use 256-step Ziggurat   methods which are 2-10 times faster than NumPy's Box-Muller or inverse CDF   implementations."
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "value": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "Optional "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "dtype"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " argument that accepts "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "np.float32"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " or "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "np.float64"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": "   to produce either single or double precision uniform random variables for   select distributions"
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "value": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "Optional "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "out"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " argument that allows existing arrays to be filled for   select distributions"
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "value": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "All BitGenerators can produce doubles, uint64s and uint32s via CTypes   ("
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "domain": null,
                            "role": null,
                            "value": "PCG64.ctypes"
                          },
                          "type": "Directive"
                        },
                        {
                          "data": {
                            "value": ") and CFFI ("
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "domain": null,
                            "role": null,
                            "value": "PCG64.cffi"
                          },
                          "type": "Directive"
                        },
                        {
                          "data": {
                            "value": "). This allows the bit generators   to be used in numba."
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "value": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "The bit generators can be used in downstream projects via   "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "Cython <random_cython>"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": "."
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "value": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "domain": null,
                            "role": null,
                            "value": "Generator.integers"
                          },
                          "type": "Directive"
                        },
                        {
                          "data": {
                            "value": " is now the canonical way to generate integer   random numbers from a discrete uniform distribution. The "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "rand"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " and   "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "randn"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " methods are only available through the legacy "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "domain": null,
                            "role": null,
                            "value": "RandomState"
                          },
                          "type": "Directive"
                        },
                        {
                          "data": {
                            "value": ".   The "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "endpoint"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " keyword can be used to specify open or closed intervals.   This replaces both "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "randint"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " and the deprecated "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "random_integers"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": "."
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "value": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "domain": null,
                            "role": null,
                            "value": "Generator.random"
                          },
                          "type": "Directive"
                        },
                        {
                          "data": {
                            "value": " is now the canonical way to generate floating-point   random numbers, which replaces "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "domain": null,
                            "role": null,
                            "value": "RandomState.random_sample"
                          },
                          "type": "Directive"
                        },
                        {
                          "data": {
                            "value": ",   "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "domain": null,
                            "role": null,
                            "value": "RandomState.sample"
                          },
                          "type": "Directive"
                        },
                        {
                          "data": {
                            "value": ", and "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "domain": null,
                            "role": null,
                            "value": "RandomState.ranf"
                          },
                          "type": "Directive"
                        },
                        {
                          "data": {
                            "value": ". This is consistent with   Python's "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "domain": null,
                            "role": null,
                            "value": "random.random"
                          },
                          "type": "Directive"
                        },
                        {
                          "data": {
                            "value": "."
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "value": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "All BitGenerators in numpy use "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "domain": null,
                            "role": null,
                            "value": "SeedSequence"
                          },
                          "type": "Directive"
                        },
                        {
                          "data": {
                            "value": " to convert seeds into   initialized states."
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "value": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "The addition of an "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "axis"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " keyword argument to methods such as    "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "domain": null,
                            "role": null,
                            "value": "Generator.choice"
                          },
                          "type": "Directive"
                        },
                        {
                          "data": {
                            "value": ", "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "domain": null,
                            "role": null,
                            "value": "Generator.permutation"
                          },
                          "type": "Directive"
                        },
                        {
                          "data": {
                            "value": ",  and "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "domain": null,
                            "role": null,
                            "value": "Generator.shuffle"
                          },
                          "type": "Directive"
                        },
                        {
                          "data": {
                            "value": "    improves support for sampling from and shuffling multi-dimensional arrays."
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ]
              }
            ]
          },
          "type": "BulletList"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "See "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "new-or-different"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " for a complete list of improvements and differences from the traditional "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "Randomstate"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": "."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": "What's New or Different"
    },
    {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "The included generators can be used in parallel, distributed applications in one of three ways:"
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "value": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": [
                              "seedsequence-spawn"
                            ]
                          },
                          "type": "Verbatim"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "value": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": [
                              "independent-streams"
                            ]
                          },
                          "type": "Verbatim"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "value": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": [
                              "parallel-jumped"
                            ]
                          },
                          "type": "Verbatim"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ]
              }
            ]
          },
          "type": "BulletList"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Users with a very large amount of parallelism will want to consult "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "upgrading-pcg64"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": "."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": "Parallel Generation"
    },
    {
      "children": [
        {
          "data": {
            "args0": [
              ":maxdepth: 1"
            ],
            "directive_name": "toctree",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "generator Legacy Generator ( RandomState) < legacy> BitGenerators, SeedSequences < bit_generators / index> Upgrading PCG64 with PCG64DXSM < upgrading - pcg64> "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        }
      ],
      "title": "Concepts"
    },
    {
      "children": [
        {
          "data": {
            "args0": [
              ":maxdepth: 2"
            ],
            "directive_name": "toctree",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "Parallel Applications < parallel> Multithreaded Generation < multithreading> new - or - different Comparing Performance < performance> c - api Examples of using Numba, Cython, CFFI < extending> "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        }
      ],
      "title": "Features"
    },
    {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "This package was developed independently of NumPy and was integrated in version 1.17.0. The original repo is at https://github.com/bashtage/randomgen."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": "Original Source of the Generator and BitGenerators"
    }
  ],
  "example_section_data": {
    "children": [],
    "title": null
  },
  "item_file": null,
  "item_line": null,
  "item_type": null,
  "ordered_sections": [],
  "references": null,
  "refs": [],
  "see_also": [],
  "signature": {
    "value": null
  }
}