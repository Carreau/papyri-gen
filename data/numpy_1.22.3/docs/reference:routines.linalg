{
  "_content": {},
  "aliases": [],
  "arbitrary": [
    {
      "children": [
        {
          "data": {
            "placeholder": "target",
            "value": ".. _routines.linalg:"
          },
          "type": "Unimplemented"
        },
        {
          "data": {
            "args0": [],
            "directive_name": "module",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "numpy.linalg "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        }
      ],
      "title": null
    },
    {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "The NumPy linear algebra functions rely on BLAS and LAPACK to provide efficient low level implementations of standard linear algebra algorithms. Those libraries may be provided by NumPy itself using C versions of a subset of their reference implementations but, when possible, highly optimized libraries that take advantage of specialized processor functionality are preferred. Examples of such libraries are "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "OpenBLAS_"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": ", MKL (TM), and ATLAS. Because those libraries are multithreaded and processor dependent, environmental variables and external packages such as "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "threadpoolctl_"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " may be needed to control the number of threads or specify the processor architecture."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "placeholder": "target",
            "value": ".. _OpenBLAS: https://www.openblas.net/"
          },
          "type": "Unimplemented"
        },
        {
          "data": {
            "placeholder": "target",
            "value": ".. _threadpoolctl: https://github.com/joblib/threadpoolctl"
          },
          "type": "Unimplemented"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "The SciPy library also contains a "
                },
                "type": "Words"
              },
              {
                "data": {
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "api",
                    "module": "scipy",
                    "path": "scipy.linalg",
                    "version": "*"
                  },
                  "value": "linalg"
                },
                "type": "Link"
              },
              {
                "data": {
                  "value": " submodule, and there is overlap in the functionality provided by the SciPy and NumPy submodules.  SciPy contains functions not found in "
                },
                "type": "Words"
              },
              {
                "data": {
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "api",
                    "module": "numpy",
                    "path": "numpy.linalg",
                    "version": "*"
                  },
                  "value": "numpy.linalg"
                },
                "type": "Link"
              },
              {
                "data": {
                  "value": ", such as functions related to LU decomposition and the Schur decomposition, multiple ways of calculating the pseudoinverse, and matrix transcendentals such as the matrix logarithm.  Some functions that exist in both have augmented functionality in "
                },
                "type": "Words"
              },
              {
                "data": {
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "api",
                    "module": "scipy",
                    "path": "scipy.linalg",
                    "version": "*"
                  },
                  "value": "scipy.linalg"
                },
                "type": "Link"
              },
              {
                "data": {
                  "value": ". For example, "
                },
                "type": "Words"
              },
              {
                "data": {
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "api",
                    "module": "scipy",
                    "path": "scipy.linalg._decomp.eig",
                    "version": "*"
                  },
                  "value": "scipy.linalg.eig"
                },
                "type": "Link"
              },
              {
                "data": {
                  "value": " can take a second matrix argument for solving generalized eigenvalue problems.  Some functions in NumPy, however, have more flexible broadcasting options.  For example, "
                },
                "type": "Words"
              },
              {
                "data": {
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "api",
                    "module": "numpy",
                    "path": "numpy.linalg.solve",
                    "version": "*"
                  },
                  "value": "numpy.linalg.solve"
                },
                "type": "Link"
              },
              {
                "data": {
                  "value": " can handle \"stacked\" arrays, while "
                },
                "type": "Words"
              },
              {
                "data": {
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "api",
                    "module": "scipy",
                    "path": "scipy.linalg._basic.solve",
                    "version": "*"
                  },
                  "value": "scipy.linalg.solve"
                },
                "type": "Link"
              },
              {
                "data": {
                  "value": " accepts only a single square array as its first argument."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "inline": [
                  {
                    "data": {
                      "value": "The term *matrix* as it is used on this page indicates a 2d `numpy.array` object, and *not* a `numpy.matrix` object. The latter is no longer recommended, even for linear algebra. See : ref : `the matrix object documentation < matrix - objects>` for more information. "
                    },
                    "type": "Words"
                  }
                ],
                "inner": []
              }
            ],
            "kind": "note",
            "title": ""
          },
          "type": "Admonition"
        }
      ],
      "title": "Linear algebra (:mod:`numpy.linalg`)"
    },
    {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Introduced in NumPy 1.10.0, the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "@"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " operator is preferable to other methods when computing the matrix product between 2d arrays. The "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "numpy.matmul"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " function implements the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "@"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " operator."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "args0": [],
            "directive_name": "currentmodule",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "numpy "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        }
      ],
      "title": "The ``@`` operator"
    },
    {
      "children": [
        {
          "data": {
            "args0": [
              ":toctree: generated/"
            ],
            "directive_name": "autosummary",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "dot linalg.multi_dot vdot inner outer matmul tensordot einsum einsum_path linalg.matrix_power kron "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        }
      ],
      "title": "Matrix and vector products"
    },
    {
      "children": [
        {
          "data": {
            "args0": [
              ":toctree: generated/"
            ],
            "directive_name": "autosummary",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "linalg.cholesky linalg.qr linalg.svd "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        }
      ],
      "title": "Decompositions"
    },
    {
      "children": [
        {
          "data": {
            "args0": [
              ":toctree: generated/"
            ],
            "directive_name": "autosummary",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "linalg.eig linalg.eigh linalg.eigvals linalg.eigvalsh "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        }
      ],
      "title": "Matrix eigenvalues"
    },
    {
      "children": [
        {
          "data": {
            "args0": [
              ":toctree: generated/"
            ],
            "directive_name": "autosummary",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "linalg.norm linalg.cond linalg.det linalg.matrix_rank linalg.slogdet trace "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        }
      ],
      "title": "Norms and other numbers"
    },
    {
      "children": [
        {
          "data": {
            "args0": [
              ":toctree: generated/"
            ],
            "directive_name": "autosummary",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "linalg.solve linalg.tensorsolve linalg.lstsq linalg.inv linalg.pinv linalg.tensorinv "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        }
      ],
      "title": "Solving equations and inverting matrices"
    },
    {
      "children": [
        {
          "data": {
            "args0": [
              ":toctree: generated/"
            ],
            "directive_name": "autosummary",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "linalg.LinAlgError "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "placeholder": "target",
            "value": ".. _routines.linalg-broadcasting:"
          },
          "type": "Unimplemented"
        }
      ],
      "title": "Exceptions"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "inline": [
                  {
                    "data": {
                      "value": "1.8.0 "
                    },
                    "type": "Words"
                  }
                ],
                "inner": []
              }
            ],
            "kind": "versionadded",
            "title": "TODO"
          },
          "type": "Admonition"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Several of the linear algebra routines listed above are able to compute results for several matrices at once, if they are stacked into the same array."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "This is indicated in the documentation via input parameter specifications such as "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "a : (..., M, M) array_like"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ". This means that if for instance given an input array "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "a.shape == (N, M, M)"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", it is interpreted as a \"stack\" of N matrices, each of size M-by-M. Similar specification applies to return values, for instance the determinant has "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "det : (...)"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " and will in this case return an array of shape "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "det(a).shape == (N,)"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ". This generalizes to linear algebra operations on higher-dimensional arrays: the last 1 or 2 dimensions of a multidimensional array are interpreted as vectors or matrices, as appropriate for each operation."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": "Linear algebra on several matrices at once"
    }
  ],
  "example_section_data": {
    "children": [],
    "title": null
  },
  "item_file": null,
  "item_line": null,
  "item_type": null,
  "ordered_sections": [],
  "references": null,
  "refs": [],
  "see_also": [],
  "signature": {
    "value": null
  }
}