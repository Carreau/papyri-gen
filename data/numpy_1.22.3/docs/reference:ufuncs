{
  "_content": {},
  "aliases": [],
  "arbitrary": [
    {
      "children": [
        {
          "data": {
            "args0": [],
            "directive_name": "sectionauthor",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "adapted from \" Guide to NumPy \" by Travis E. Oliphant "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [],
            "directive_name": "currentmodule",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "numpy "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "placeholder": "target",
            "value": ".. _ufuncs:"
          },
          "type": "Unimplemented"
        }
      ],
      "title": null
    },
    {
      "children": [
        {
          "data": {
            "args0": [],
            "directive_name": "seealso",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": ": ref : `ufuncs - basics` "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "A universal function (or "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "ufunc"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " for short) is a function that operates on "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "ndarrays <numpy.ndarray>"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " in an element-by-element fashion, supporting "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "array broadcasting <ufuncs.broadcasting>"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "type\ncasting <ufuncs.casting>"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", and several other standard features. That is, a ufunc is a \""
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "vectorized <vectorization>"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": "\" wrapper for a function that takes a fixed number of specific inputs and produces a fixed number of specific outputs. For detailed information on universal functions, see "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "ufuncs-basics"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": "."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": "Universal functions (:class:`ufunc`)"
    },
    {
      "children": [
        {
          "data": {
            "args0": [
              ":toctree: generated/"
            ],
            "directive_name": "autosummary",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "numpy.ufunc "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "placeholder": "target",
            "value": ".. _ufuncs.kwargs:"
          },
          "type": "Unimplemented"
        }
      ],
      "title": ":class:`ufunc`"
    },
    {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "All ufuncs take optional keyword arguments. Most of these represent advanced usage and will not typically be used."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "args0": [],
            "directive_name": "index",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "pair : ufunc; keyword arguments "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [],
            "directive_name": "rubric",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "*out* "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "children": [
              {
                "inline": [
                  {
                    "data": {
                      "value": "1.6 "
                    },
                    "type": "Words"
                  }
                ],
                "inner": []
              }
            ],
            "kind": "versionadded",
            "title": "TODO"
          },
          "type": "Admonition"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "The first output can be provided as either a positional or a keyword parameter. Keyword 'out' arguments are incompatible with positional ones."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "inline": [
                  {
                    "data": {
                      "value": "1.10 "
                    },
                    "type": "Words"
                  }
                ],
                "inner": []
              }
            ],
            "kind": "versionadded",
            "title": "TODO"
          },
          "type": "Admonition"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "The 'out' keyword argument is expected to be a tuple with one entry per output (which can be None for arrays to be allocated by the ufunc). For ufuncs with a single output, passing a single array (instead of a tuple holding a single array) is also valid."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Passing a single array in the 'out' keyword argument to a ufunc with multiple outputs is deprecated, and will raise a warning in numpy 1.10, and an error in a future release."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "If 'out' is None (the default), a uninitialized return array is created. The output array is then filled with the results of the ufunc in the places that the broadcast 'where' is True. If 'where' is the scalar True (the default), then this corresponds to the entire output being filled. Note that outputs not explicitly filled are left with their uninitialized values."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "inline": [
                  {
                    "data": {
                      "value": "1.13 "
                    },
                    "type": "Words"
                  }
                ],
                "inner": []
              }
            ],
            "kind": "versionadded",
            "title": "TODO"
          },
          "type": "Admonition"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Operations where ufunc input and output operands have memory overlap are defined to be the same as for equivalent operations where there is no memory overlap.  Operations affected make temporary copies as needed to eliminate data dependency.  As detecting these cases is computationally expensive, a heuristic is used, which may in rare cases result in needless temporary copies.  For operations where the data dependency is simple enough for the heuristic to analyze, temporary copies will not be made even if the arrays overlap, if it can be deduced copies are not necessary.  As an example, "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "np.add(a, b, out=a)"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " will not involve copies."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "args0": [],
            "directive_name": "rubric",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "*where* "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "children": [
              {
                "inline": [
                  {
                    "data": {
                      "value": "1.7 "
                    },
                    "type": "Words"
                  }
                ],
                "inner": []
              }
            ],
            "kind": "versionadded",
            "title": "TODO"
          },
          "type": "Admonition"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Accepts a boolean array which is broadcast together with the operands. Values of True indicate to calculate the ufunc at that position, values of False indicate to leave the value in the output alone. This argument cannot be used for generalized ufuncs as those take non-scalar input."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Note that if an uninitialized return array is created, values of False will leave those values "
                },
                "type": "Words"
              },
              {
                "data": {
                  "content": {
                    "value": "uninitialized"
                  }
                },
                "type": "Strong"
              },
              {
                "data": {
                  "value": "."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "args0": [],
            "directive_name": "rubric",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "*axes* "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "children": [
              {
                "inline": [
                  {
                    "data": {
                      "value": "1.15 "
                    },
                    "type": "Words"
                  }
                ],
                "inner": []
              }
            ],
            "kind": "versionadded",
            "title": "TODO"
          },
          "type": "Admonition"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "A list of tuples with indices of axes a generalized ufunc should operate on. For instance, for a signature of "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "(i,j),(j,k)->(i,k)"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " appropriate for matrix multiplication, the base elements are two-dimensional matrices and these are taken to be stored in the two last axes of each argument. The corresponding axes keyword would be "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "[(-2, -1), (-2, -1), (-2, -1)]"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ". For simplicity, for generalized ufuncs that operate on 1-dimensional arrays (vectors), a single integer is accepted instead of a single-element tuple, and for generalized ufuncs for which all outputs are scalars, the output tuples can be omitted."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "args0": [],
            "directive_name": "rubric",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "*axis* "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "children": [
              {
                "inline": [
                  {
                    "data": {
                      "value": "1.15 "
                    },
                    "type": "Words"
                  }
                ],
                "inner": []
              }
            ],
            "kind": "versionadded",
            "title": "TODO"
          },
          "type": "Admonition"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "A single axis over which a generalized ufunc should operate. This is a short-cut for ufuncs that operate over a single, shared core dimension, equivalent to passing in "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "axes"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " with entries of "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "(axis,)"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " for each single-core-dimension argument and "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "()"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " for all others.  For instance, for a signature "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "(i),(i)->()"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", it is equivalent to passing in "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "axes=[(axis,), (axis,), ()]"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": "."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "args0": [],
            "directive_name": "rubric",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "*keepdims* "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "children": [
              {
                "inline": [
                  {
                    "data": {
                      "value": "1.15 "
                    },
                    "type": "Words"
                  }
                ],
                "inner": []
              }
            ],
            "kind": "versionadded",
            "title": "TODO"
          },
          "type": "Admonition"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "If this is set to "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "True"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", axes which are reduced over will be left in the result as a dimension with size one, so that the result will broadcast correctly against the inputs. This option can only be used for generalized ufuncs that operate on inputs that all have the same number of core dimensions and with outputs that have no core dimensions, i.e., with signatures like "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "(i),(i)->()"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " or "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "(m,m)->()"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ". If used, the location of the dimensions in the output can be controlled with "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "axes"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " and "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "axis"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": "."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "args0": [],
            "directive_name": "rubric",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "*casting* "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "children": [
              {
                "inline": [
                  {
                    "data": {
                      "value": "1.6 "
                    },
                    "type": "Words"
                  }
                ],
                "inner": []
              }
            ],
            "kind": "versionadded",
            "title": "TODO"
          },
          "type": "Admonition"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "May be 'no', 'equiv', 'safe', 'same_kind', or 'unsafe'. See "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "can_cast"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " for explanations of the parameter values."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Provides a policy for what kind of casting is permitted. For compatibility with previous versions of NumPy, this defaults to 'unsafe' for numpy < 1.7. In numpy 1.7 a transition to 'same_kind' was begun where ufuncs produce a DeprecationWarning for calls which are allowed under the 'unsafe' rules, but not under the 'same_kind' rules. From numpy 1.10 and onwards, the default is 'same_kind'."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "args0": [],
            "directive_name": "rubric",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "*order* "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "children": [
              {
                "inline": [
                  {
                    "data": {
                      "value": "1.6 "
                    },
                    "type": "Words"
                  }
                ],
                "inner": []
              }
            ],
            "kind": "versionadded",
            "title": "TODO"
          },
          "type": "Admonition"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Specifies the calculation iteration order/memory layout of the output array. Defaults to 'K'. 'C' means the output should be C-contiguous, 'F' means F-contiguous, 'A' means F-contiguous if the inputs are F-contiguous and not also not C-contiguous, C-contiguous otherwise, and 'K' means to match the element ordering of the inputs as closely as possible."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "args0": [],
            "directive_name": "rubric",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "*dtype* "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "children": [
              {
                "inline": [
                  {
                    "data": {
                      "value": "1.6 "
                    },
                    "type": "Words"
                  }
                ],
                "inner": []
              }
            ],
            "kind": "versionadded",
            "title": "TODO"
          },
          "type": "Admonition"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Overrides the DType of the output arrays the same way as the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "signature"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": ". This should ensure a matching precision of the calculation.  The exact calculation DTypes chosen may depend on the ufunc and the inputs may be cast to this DType to perform the calculation."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "args0": [],
            "directive_name": "rubric",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "*subok* "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "children": [
              {
                "inline": [
                  {
                    "data": {
                      "value": "1.6 "
                    },
                    "type": "Words"
                  }
                ],
                "inner": []
              }
            ],
            "kind": "versionadded",
            "title": "TODO"
          },
          "type": "Admonition"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Defaults to true. If set to false, the output will always be a strict array, not a subtype."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "args0": [],
            "directive_name": "rubric",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "*signature* "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Either a Dtype, a tuple of DTypes, or a special signature string indicating the input and output types of a ufunc."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "This argument allows the user to specify exact DTypes to be used for the calculation.  Casting will be used as necessary. The actual DType of the input arrays is not considered unless "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "signature"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " is "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "None"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " for that array."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "When all DTypes are fixed, a specific loop is chosen or an error raised if no matching loop exists. If some DTypes are not specified and left "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "None"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", the behaviour may depend on the ufunc. At this time, a list of available signatures is provided by the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "content": {
                    "value": "types"
                  }
                },
                "type": "Strong"
              },
              {
                "data": {
                  "value": " attribute of the ufunc.  (This list may be missing DTypes not defined by NumPy.)"
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "The "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "signature"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " only specifies the DType class/type.  For example, it can specify that the operation should be "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "datetime64"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " or "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "float64"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " operation.  It does not specify the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "datetime64"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " time-unit or the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "float64"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " byte-order."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "For backwards compatibility this argument can also be provided as "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "sig"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": ", although the long form is preferred.  Note that this should not be confused with the generalized ufunc "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "signature <details-of-signature>"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " that is stored in the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "content": {
                    "value": "signature"
                  }
                },
                "type": "Strong"
              },
              {
                "data": {
                  "value": " attribute of the of the ufunc object."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "args0": [],
            "directive_name": "rubric",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "*extobj* "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "A list of length 3 specifying the ufunc buffer-size, the error mode integer, and the error call-back function. Normally, these values are looked up in a thread-specific dictionary. Passing them here circumvents that look up and uses the low-level specification provided for the error mode. This may be useful, for example, as an optimization for calculations requiring many ufunc calls on small arrays in a loop."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": "Optional keyword arguments"
    },
    {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "There are some informational attributes that universal functions possess. None of the attributes can be set."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "args0": [],
            "directive_name": "index",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "pair : ufunc; attributes "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "============  ================================================================= "
                },
                "type": "Words"
              },
              {
                "data": {
                  "content": {
                    "value": "__doc__"
                  }
                },
                "type": "Strong"
              },
              {
                "data": {
                  "value": "   A docstring for each ufunc. The first part of the docstring is               dynamically generated from the number of outputs, the name, and               the number of inputs. The second part of the docstring is               provided at creation time and stored with the ufunc."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "content": {
                    "value": "__name__"
                  }
                },
                "type": "Strong"
              },
              {
                "data": {
                  "value": "  The name of the ufunc. ============  ================================================================="
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "args0": [
              ":toctree: generated/"
            ],
            "directive_name": "autosummary",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "ufunc.nin ufunc.nout ufunc.nargs ufunc.ntypes ufunc.types ufunc.identity ufunc.signature "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "placeholder": "target",
            "value": ".. _ufuncs.methods:"
          },
          "type": "Unimplemented"
        }
      ],
      "title": "Attributes"
    },
    {
      "children": [
        {
          "data": {
            "args0": [],
            "directive_name": "index",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "pair : ufunc; methods "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [
              ":toctree: generated/"
            ],
            "directive_name": "autosummary",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "ufunc.reduce ufunc.accumulate ufunc.reduceat ufunc.outer ufunc.at "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "children": [
              {
                "inline": [
                  {
                    "data": {
                      "value": "A reduce - like operation on an array with a data - type that has a range \" too small \" to handle the result will silently wrap. One should use `dtype` to increase the size of the data - type over which reduction takes place. "
                    },
                    "type": "Words"
                  }
                ],
                "inner": []
              }
            ],
            "kind": "warning",
            "title": ""
          },
          "type": "Admonition"
        }
      ],
      "title": "Methods"
    },
    {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "There are currently more than 60 universal functions defined in "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "numpy"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " on one or more types, covering a wide variety of operations. Some of these ufuncs are called automatically on arrays when the relevant infix notation is used ("
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "e.g."
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "add(a, b) <add>"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " is called internally when "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "a + b"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " is written and "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "a"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": " or "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "b"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": " is an "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "ndarray"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": "). Nevertheless, you may still want to use the ufunc call in order to use the optional output argument(s) to place the output(s) in an object (or objects) of your choice."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Recall that each ufunc operates element-by-element. Therefore, each scalar ufunc will be described as if acting on a set of scalar inputs to return a set of scalar outputs."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "inline": [
                  {
                    "data": {
                      "value": "The ufunc still returns its output ( s) even if you use the optional output argument ( s). "
                    },
                    "type": "Words"
                  }
                ],
                "inner": []
              }
            ],
            "kind": "note",
            "title": ""
          },
          "type": "Admonition"
        }
      ],
      "title": "Available ufuncs"
    },
    {
      "children": [
        {
          "data": {
            "args0": [],
            "directive_name": "autosummary",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "add subtract multiply matmul divide logaddexp logaddexp2 true_divide floor_divide negative positive power float_power remainder mod fmod divmod absolute fabs rint sign heaviside conj conjugate exp exp2 log log2 log10 expm1 log1p sqrt square cbrt reciprocal gcd lcm "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [],
            "directive_name": "tip",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "The optional output arguments can be used to help you save memory for large calculations. If your arrays are large, complicated expressions can take longer than absolutely necessary due to the creation and ( later) destruction of temporary calculation spaces. For example, the expression ``G = A * B + C`` is equivalent to ``T1 = A * B; G = T1 + C; del T1``. It will be more quickly executed as ``G = A * B; add ( G, C, G)`` which is the same as ``G = A * B; G += C``. "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        }
      ],
      "title": "Math operations"
    },
    {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "All trigonometric functions use radians when an angle is called for. The ratio of degrees to radians is "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "180^{\\circ}/\\pi."
                  ]
                },
                "type": "Math"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "args0": [],
            "directive_name": "autosummary",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "sin cos tan arcsin arccos arctan arctan2 hypot sinh cosh tanh arcsinh arccosh arctanh degrees radians deg2rad rad2deg "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        }
      ],
      "title": "Trigonometric functions"
    },
    {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "These function all require integer arguments and they manipulate the bit-pattern of those arguments."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "args0": [],
            "directive_name": "autosummary",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "bitwise_and bitwise_or bitwise_xor invert left_shift right_shift "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        }
      ],
      "title": "Bit-twiddling functions"
    },
    {
      "children": [
        {
          "data": {
            "args0": [],
            "directive_name": "autosummary",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "greater greater_equal less less_equal not_equal equal "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "children": [
              {
                "inline": [
                  {
                    "data": {
                      "value": "Do not use the Python keywords ``and`` and ``or`` to combine logical array expressions. These keywords will test the truth value of the entire array ( not element - by - element as you might expect). Use the bitwise operators & and \\| instead. "
                    },
                    "type": "Words"
                  }
                ],
                "inner": []
              }
            ],
            "kind": "warning",
            "title": ""
          },
          "type": "Admonition"
        },
        {
          "data": {
            "args0": [],
            "directive_name": "autosummary",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "logical_and logical_or logical_xor logical_not "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "children": [
              {
                "inline": [
                  {
                    "data": {
                      "value": "The bit - wise operators & and \\| are the proper way to perform element - by - element array comparisons. Be sure you understand the operator precedence : `` ( a > 2) & ( a < 5)`` is the proper syntax because ``a > 2 & a < 5`` will result in an error due to the fact that ``2 & a`` is evaluated first. "
                    },
                    "type": "Words"
                  }
                ],
                "inner": []
              }
            ],
            "kind": "warning",
            "title": ""
          },
          "type": "Admonition"
        },
        {
          "data": {
            "args0": [],
            "directive_name": "autosummary",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "maximum "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [],
            "directive_name": "tip",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "The Python function ``max ( )`` will find the maximum over a one - dimensional array, but it will do so using a slower sequence interface. The reduce method of the maximum ufunc is much faster. Also, the ``max ( )`` method will not give answers you might expect for arrays with greater than one dimension. The reduce method of minimum also allows you to compute a total minimum over an array. "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [],
            "directive_name": "autosummary",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "minimum "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "children": [
              {
                "inline": [
                  {
                    "data": {
                      "value": "the behavior of ``maximum ( a, b)`` is different than that of ``max ( a, b)``. As a ufunc, ``maximum ( a, b)`` performs an element - by - element comparison of `a` and `b` and chooses each element of the result according to which element in the two arrays is larger. In contrast, ``max ( a, b)`` treats the objects `a` and `b` as a whole, looks at the ( total) truth value of ``a > b`` and uses it to return either `a` or `b` ( as a whole). A similar difference exists between ``minimum ( a, b)`` and ``min ( a, b)``. "
                    },
                    "type": "Words"
                  }
                ],
                "inner": []
              }
            ],
            "kind": "warning",
            "title": ""
          },
          "type": "Admonition"
        },
        {
          "data": {
            "args0": [],
            "directive_name": "autosummary",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "fmax fmin "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        }
      ],
      "title": "Comparison functions"
    },
    {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Recall that all of these functions work element-by-element over an array, returning an array output. The description details only a single operation."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "args0": [],
            "directive_name": "autosummary",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "isfinite isinf isnan isnat fabs signbit copysign nextafter spacing modf ldexp frexp fmod floor ceil trunc "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        }
      ],
      "title": "Floating functions"
    }
  ],
  "example_section_data": {
    "children": [],
    "title": null
  },
  "item_file": null,
  "item_line": null,
  "item_type": null,
  "ordered_sections": [],
  "references": null,
  "refs": [],
  "see_also": [],
  "signature": {
    "value": null
  }
}