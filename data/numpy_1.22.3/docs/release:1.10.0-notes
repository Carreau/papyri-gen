{
  "aliases": [],
  "arbitrary": [
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "This release supports Python 2.6 - 2.7 and 3.2 - 3.5."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "NumPy 1.10.0 Release Notes"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "numpy.distutils now supports parallel compilation via the --parallel/-j   argument passed to setup.py build"
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "numpy.distutils now supports additional customization via site.cfg to   control compilation parameters, i.e. runtime libraries, extra   linking/compilation flags."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Addition of "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": {
                              "value": "np.linalg.multi_dot"
                            }
                          },
                          "type": "Emph"
                        },
                        {
                          "data": {
                            "value": ": compute the dot product of two or more   arrays in a single function call, while automatically selecting the fastest   evaluation order."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "The new function "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "domain": null,
                            "role": null,
                            "value": "np.stack"
                          },
                          "type": "Directive"
                        },
                        {
                          "data": {
                            "value": " provides a general interface for joining a   sequence of arrays along a new axis, complementing "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "domain": null,
                            "role": null,
                            "value": "np.concatenate"
                          },
                          "type": "Directive"
                        },
                        {
                          "data": {
                            "value": " for   joining along an existing axis."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Addition of "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "domain": null,
                            "role": null,
                            "value": "nanprod"
                          },
                          "type": "Directive"
                        },
                        {
                          "data": {
                            "value": " to the set of nanfunctions."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Support for the '@' operator in Python 3.5."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              }
            ]
          },
          "type": "BulletList"
        }
      ],
      "title": "Highlights"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "The _dotblas module has been removed. CBLAS Support is now in   Multiarray."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "The testcalcs.py file has been removed."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "The polytemplate.py file has been removed."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "npy_PyFile_Dup and npy_PyFile_DupClose have been removed from   npy_3kcompat.h."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "splitcmdline has been removed from numpy/distutils/exec_command.py."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "try_run and get_output have been removed from   numpy/distutils/command/config.py"
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "The a._format attribute is no longer supported for array printing."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Keywords "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "skiprows"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " and "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "missing"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " removed from np.genfromtxt."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Keyword "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "old_behavior"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " removed from np.correlate."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              }
            ]
          },
          "type": "BulletList"
        }
      ],
      "title": "Dropped Support"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "In array comparisons like "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "arr1 == arr2"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": ", many corner cases   involving strings or structured dtypes that used to return scalars   now issue "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "FutureWarning"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " or "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "DeprecationWarning"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": ", and in the   future will be change to either perform elementwise comparisons or   raise an error."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "In "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "np.lib.split"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " an empty array in the result always had dimension   "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "(0,)"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " no matter the dimensions of the array being split. In Numpy 1.11   that behavior will be changed so that the dimensions will be preserved. A   "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "FutureWarning"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " for this change has been in place since Numpy 1.9 but,   due to a bug, sometimes no warning was raised and the dimensions were   already preserved."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "The SafeEval class will be removed in Numpy 1.11."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "The alterdot and restoredot functions will be removed in Numpy 1.11."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              }
            ]
          },
          "type": "BulletList"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "See below for more details on these changes."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "Future Changes"
    },
    {
      "children": [],
      "title": "Compatibility notes"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Default casting for inplace operations has changed to "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "'same_kind'"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ". For instance, if n is an array of integers, and f is an array of floats, then "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "n += f"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " will result in a "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "TypeError"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", whereas in previous Numpy versions the floats would be silently cast to ints. In the unlikely case that the example code is not an actual bug, it can be updated in a backward compatible way by rewriting it as "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "np.add(n, f, out=n, casting='unsafe')"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ". The old "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "'unsafe'"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " default has been deprecated since Numpy 1.7."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "Default casting rule change"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "The numpy version string for development builds has been changed from "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "x.y.z.dev-githash"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " to "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "x.y.z.dev0+githash"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " (note the +) in order to comply with PEP 440."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "numpy version string"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "NPY_RELAXED_STRIDE_CHECKING is now true by default."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "UPDATE: In 1.10.2 the default value of  NPY_RELAXED_STRIDE_CHECKING was changed to false for back compatibility reasons. More time is needed before it can be made the default. As part of the roadmap a deprecation of dimension changing views of f_contiguous not c_contiguous arrays was also added."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "relaxed stride checking"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Using axis != 0 has raised a DeprecationWarning since NumPy 1.7, it now raises an error."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "Concatenation of 1d arrays along any but ``axis=0`` raises ``IndexError``"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "There was inconsistent behavior between "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "x.ravel()"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": " and "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "np.ravel(x)"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": ", as well as between "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "x.diagonal()"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": " and "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "np.diagonal(x)"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": ", with the methods preserving subtypes while the functions did not. This has been fixed and the functions now behave like the methods, preserving subtypes except in the case of matrices.  Matrices are special cased for backward compatibility and still return 1-D arrays as before. If you need to preserve the matrix subtype, use the methods instead of the functions."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "*np.ravel*, *np.diagonal* and *np.diag* now preserve subtypes"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Previously, a view was returned except when no change was made in the order of the axes, in which case the input array was returned.  A view is now returned in all cases."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "*rollaxis* and *swapaxes* always return a view"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Previously, an inconsistency existed between 1-D inputs (returning a base ndarray) and higher dimensional ones (which preserved subclasses). Behavior has been unified, and the return will now be a base ndarray. Subclasses can still override this behavior by providing their own "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "nonzero"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": " method."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "*nonzero* now returns base ndarrays"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "The changes to "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "swapaxes"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": " also apply to the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "PyArray_SwapAxes"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": " C function, which now returns a view in all cases."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "The changes to "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "nonzero"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": " also apply to the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "PyArray_Nonzero"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": " C function, which now returns a base ndarray in all cases."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "The dtype structure (PyArray_Descr) has a new member at the end to cache its hash value.  This shouldn't affect any well-written applications."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "The change to the concatenation function DeprecationWarning also affects PyArray_ConcatenateArrays,"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "C API"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Previously the returned types for recarray fields accessed by attribute and by index were inconsistent, and fields of string type were returned as chararrays. Now, fields accessed by either attribute or indexing will return an ndarray for fields of non-structured type, and a recarray for fields of structured type. Notably, this affect recarrays containing strings with whitespace, as trailing whitespace is trimmed from chararrays but kept in ndarrays of string type. Also, the dtype.type of nested structured fields is now inherited."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "recarray field return types"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Viewing an ndarray as a recarray now automatically converts the dtype to np.record. See new record array documentation. Additionally, viewing a recarray with a non-structured dtype no longer converts the result's type to ndarray - the result will remain a recarray."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "recarray views"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "When using the 'out' keyword argument of a ufunc, a tuple of arrays, one per ufunc output, can be provided. For ufuncs with a single output a single array is also a valid 'out' keyword argument. Previously a single array could be provided in the 'out' keyword argument, and it would be used as the first output for ufuncs with multiple outputs, is deprecated, and will result in a "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "DeprecationWarning"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " now and an error in the future."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "'out' keyword argument of ufuncs now accepts tuples of arrays"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Indexing an ndarray using a byte-string in Python 3 now raises an IndexError instead of a ValueError."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "byte-array indices now raises an IndexError"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "For such (rare) masked arrays, getting a single masked item no longer returns a corrupted masked array, but a fully masked version of the item."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "Masked arrays containing objects with arrays"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Similar to mean, median and percentile now emits a Runtime warning and returns "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "NaN"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " in slices where a "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "NaN"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " is present. To compute the median or percentile while ignoring invalid values use the new "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "nanmedian"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " or "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "nanpercentile"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " functions."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "Median warns and returns nan when invalid values are encountered"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "All functions from numpy.testing were once available from numpy.ma.testutils but not all of them were redefined to work with masked arrays. Most of those functions have now been removed from numpy.ma.testutils with a small subset retained in order to preserve backward compatibility. In the long run this should help avoid mistaken use of the wrong functions, but it may cause import problems for some."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "Functions available from numpy.ma.testutils have changed"
    },
    {
      "children": [],
      "title": "New Features"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Previously customization of compilation of dependency libraries and numpy itself was only accomblishable via code changes in the distutils package. Now numpy.distutils reads in the following extra flags from each group of the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "site.cfg"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": ":"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "dd": [
                            {
                              "data": {
                                "children": [
                                  {
                                    "data": {
                                      "value": [
                                        "LD_LIBRARY_PATH"
                                      ]
                                    },
                                    "type": "Verbatim"
                                  }
                                ]
                              },
                              "type": "Paragraph"
                            }
                          ],
                          "dt": {
                            "children": [
                              {
                                "data": {
                                  "value": [
                                    "runtime_library_dirs/rpath"
                                  ]
                                },
                                "type": "Verbatim"
                              },
                              {
                                "data": {
                                  "value": ", sets runtime library directories to override"
                                },
                                "type": "Words"
                              }
                            ]
                          }
                        }
                      ]
                    },
                    "type": "DefList"
                  }
                ]
              },
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": [
                              "extra_compile_args"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": ", add extra flags to the compilation of sources"
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": [
                              "extra_link_args"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": ", add extra flags when linking libraries"
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              }
            ]
          },
          "type": "BulletList"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "This should, at least partially, complete user customization."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "Reading extra flags from site.cfg"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": {
                    "value": "np.cbrt"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": " wraps the C99 cube root function "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "cbrt"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": ". Compared to "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "np.power(x, 1./3.)"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": " it is well defined for negative real floats and a bit faster."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "*np.cbrt* to compute cube root for real floats"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "By passing "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "--parallel=n"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": " or "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "-j n"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": " to "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "setup.py build"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": " the compilation of extensions is now performed in "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "n"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": " parallel processes. The parallelization is limited to files within one extension so projects using Cython will not profit because it builds extensions from single files."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "numpy.distutils now allows parallel compilation"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "A "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "max_rows"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " argument has been added to "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "genfromtxt"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": " to limit the number of rows read in a single call. Using this functionality, it is possible to read in multiple arrays stored in a single file by making repeated calls to the function."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "*genfromtxt* has a new ``max_rows`` argument"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": {
                    "value": "np.broadcast_to"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": " manually broadcasts an array to a given shape according to numpy's broadcasting rules. The functionality is similar to broadcast_arrays, which in fact has been rewritten to use broadcast_to internally, but only a single array is necessary."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "New function *np.broadcast_to* for invoking array broadcasting"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "When Python emits a warning, it records that this warning has been emitted in the module that caused the warning, in a module attribute "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "__warningregistry__"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ".  Once this has happened, it is not possible to emit the warning again, unless you clear the relevant entry in "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "__warningregistry__"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ".  This makes is hard and fragile to test warnings, because if your test comes after another that has already caused the warning, you will not be able to emit the warning or test it. The context manager "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "clear_and_catch_warnings"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " clears warnings from the module registry on entry and resets them on exit, meaning that warnings can be re-raised."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "New context manager *clear_and_catch_warnings* for testing warnings"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "The "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "fweights"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " and "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "aweights"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " arguments add new functionality to covariance calculations by applying two types of weighting to observation vectors. An array of "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "fweights"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " indicates the number of repeats of each observation vector, and an array of "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "aweights"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " provides their relative importance or probability."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "*cov* has new ``fweights`` and ``aweights`` arguments"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Python 3.5 adds support for a matrix multiplication operator '@' proposed in PEP465. Preliminary support for that has been implemented, and an equivalent function "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "matmul"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " has also been added for testing purposes and use in earlier Python versions. The function is preliminary and the order and number of its optional arguments can be expected to change."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "Support for the '@' operator in Python 3.5+"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "The default normalization has the direct transforms unscaled and the inverse transforms are scaled by "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": "1/n"
                },
                "type": "Math"
              },
              {
                "data": {
                  "value": ". It is possible to obtain unitary transforms by setting the keyword argument "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "norm"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " to "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "\"ortho\""
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " (default is "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "None"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": ") so that both direct and inverse transforms will be scaled by "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": "1/\\\\sqrt{n}"
                },
                "type": "Math"
              },
              {
                "data": {
                  "value": "."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "New argument ``norm`` to fft functions"
    },
    {
      "children": [],
      "title": "Improvements"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": {
                    "value": "np.digitize"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": " is now implemented in terms of "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "np.searchsorted"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": ". This means that a binary search is used to bin the values, which scales much better for larger number of bins than the previous linear search. It also removes the requirement for the input array to be 1-dimensional."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "*np.digitize* using binary search"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": {
                    "value": "np.poly"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": " will now cast 1-dimensional input arrays of integer type to double precision floating point, to prevent integer overflow when computing the monic polynomial. It is still possible to obtain higher precision results by passing in an array of object type, filled e.g. with Python ints."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "*np.poly* now casts integer inputs to float"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": {
                    "value": "np.interp"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": " now has a new parameter "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "period"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": " that supplies the period of the input data "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "xp"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": ". In such case, the input data is properly normalized to the given period and one end point is added to each extremity of "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "xp"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": " in order to close the previous and the next period cycles, resulting in the correct interpolation behavior."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "*np.interp* can now be used with periodic functions"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": [
                    "constant_values"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " parameters now accepts NumPy arrays and float values. NumPy arrays are supported as input for "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "pad_width"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", and an exception is raised if its values are not of integral type."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "*np.pad* supports more input types for ``pad_width`` and ``constant_values``"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "The "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "out"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " parameter was added to "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "np.argmax"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": " and "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "np.argmin"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": " for consistency with "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "ndarray.argmax"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": " and "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "ndarray.argmin"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": ". The new parameter behaves exactly as it does in those methods."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "*np.argmax* and *np.argmin* now support an ``out`` argument"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "All of the functions "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "in complex.h"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " are now detected. There are new fallback implementations of the following functions."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "npy_ctan,"
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "npy_cacos, npy_casin, npy_catan"
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "npy_ccosh, npy_csinh, npy_ctanh,"
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "npy_cacosh, npy_casinh, npy_catanh"
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              }
            ]
          },
          "type": "BulletList"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "As a result of these improvements, there will be some small changes in returned values, especially for corner cases."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "More system C99 complex functions detected and used"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "The strings produced by "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "float.hex"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " look like "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "0x1.921fb54442d18p+1"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", so this is not the hex used to represent unsigned integer types."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "*np.loadtxt* support for the strings produced by the ``float.hex`` method"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "In order to properly handle minimal values of integer types, "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "np.isclose"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": " will now cast to the float dtype during comparisons. This aligns its behavior with what was provided by "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "np.allclose"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": "."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "*np.isclose* properly handles minimal values of integer dtypes"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": {
                    "value": "np.allclose"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": " now uses "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "np.isclose"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": " internally and inherits the ability to compare NaNs as equal by setting "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "equal_nan=True"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ". Subclasses, such as "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "np.ma.MaskedArray"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": ", are also preserved now."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "*np.allclose* uses *np.isclose* internally."
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": {
                    "value": "np.genfromtxt"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": " now correctly handles integers larger than "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "2**31-1"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " on 32-bit systems and larger than "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "2**63-1"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " on 64-bit systems (it previously crashed with an "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "OverflowError"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " in these cases). Integers larger than "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "2**63-1"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " are converted to floating-point values."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "*np.genfromtxt* now handles large integers correctly"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "The functions "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "np.load"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": " and "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "np.save"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": " have additional keyword arguments for controlling backward compatibility of pickled Python objects. This enables Numpy on Python 3 to load npy files containing object arrays that were generated on Python 2."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "*np.load*, *np.save* have pickle backward compatibility flags"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Built-in assumptions that the baseclass behaved like a plain array are being removed. In particular, setting and getting elements and ranges will respect baseclass overrides of "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "__setitem__"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " and "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "__getitem__"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", and arithmetic will respect overrides of "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "__add__"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "__sub__"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", etc."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "MaskedArray support for more complicated base classes"
    },
    {
      "children": [],
      "title": "Changes"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "The cblas versions of dot, inner, and vdot have been integrated into the multiarray module. In particular, vdot is now a multiarray function, which it was not before."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "dotblas functionality moved to multiarray"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Inputs to generalized universal functions are now more strictly checked against the function's signature: all core dimensions are now required to be present in input arrays; core dimensions with the same label must have the exact same size; and output core dimension's must be specified, either by a same label input core dimension or by a passed-in output array."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "stricter check of gufunc signature compliance"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Views returned by "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "np.einsum"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": " will now be writeable whenever the input array is writeable."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "views returned from *np.einsum* are writeable"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": {
                    "value": "np.argmin"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": " now skips NaT values in datetime64 and timedelta64 arrays, making it consistent with "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "np.min"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "np.argmax"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": " and "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "np.max"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": "."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "*np.argmin* skips NaT values"
    },
    {
      "children": [],
      "title": "Deprecations"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Normally, comparison operations on arrays perform elementwise comparisons and return arrays of booleans. But in some corner cases, especially involving strings are structured dtypes, NumPy has historically returned a scalar instead. For example::    "
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": "### Current behaviour\n\nnp.arange(2) == \"foo\"\n# -> False\n\nnp.arange(2) < \"foo\"\n# -> True on Python 2, error on Python 3\n\nnp.ones(2, dtype=\"i4,i4\") == np.ones(2, dtype=\"i4,i4,i4\")\n# -> False"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Continuing work started in 1.9, in 1.10 these comparisons will now raise "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "FutureWarning"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " or "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "DeprecationWarning"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", and in the future they will be modified to behave more consistently with other comparison operations, e.g.::    "
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": "### Future behaviour\n\nnp.arange(2) == \"foo\"\n# -> array([False, False])\n\nnp.arange(2) < \"foo\"\n# -> error, strings and numbers are not orderable\n\nnp.ones(2, dtype=\"i4,i4\") == np.ones(2, dtype=\"i4,i4,i4\")\n# -> [False, False]"
          },
          "type": "BlockVerbatim"
        }
      ],
      "title": "Array comparisons involving strings or structured dtypes"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "The SafeEval class in numpy/lib/utils.py is deprecated and will be removed in the next release."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "SafeEval"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "The alterdot and restoredot functions no longer do anything, and are deprecated."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "alterdot, restoredot"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "These ways of loading packages are now deprecated."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "pkgload, PackageLoader"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "The values for the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "bias"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " and "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "ddof"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " arguments to the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "corrcoef"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " function canceled in the division implied by the correlation coefficient and so had no effect on the returned values."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "We now deprecate these arguments to "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "corrcoef"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " and the masked array version "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "ma.corrcoef"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": "."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Because we are deprecating the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "bias"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " argument to "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "ma.corrcoef"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", we also deprecate the use of the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "allow_masked"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " argument as a positional argument, as its position will change with the removal of "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "bias"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ".  "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "allow_masked"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " will in due course become a keyword-only argument."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "bias, ddof arguments to corrcoef"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Since 1.6, creating a dtype object from its string representation, e.g. "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "'f4'"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", would issue a deprecation warning if the size did not correspond to an existing type, and default to creating a dtype of the default size for the type. Starting with this release, this will now raise a "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "TypeError"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": "."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "The only exception is object dtypes, where both "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "'O4'"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " and "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "'O8'"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " will still issue a deprecation warning. This platform-dependent representation will raise an error in the next release."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "In preparation for this upcoming change, the string representation of an object dtype, i.e. "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "np.dtype(object).str"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", no longer includes the item size, i.e. will return "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "'|O'"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " instead of "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "'|O4'"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " or "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "'|O8'"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " as before."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "dtype string representation changes"
    }
  ],
  "content": {},
  "example_section_data": {
    "children": [],
    "title": null
  },
  "item_file": null,
  "item_line": null,
  "item_type": null,
  "ordered_sections": [],
  "references": null,
  "see_also": [],
  "signature": {
    "value": null
  }
}