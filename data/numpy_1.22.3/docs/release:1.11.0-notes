{
  "_content": {},
  "aliases": [],
  "arbitrary": [
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "This release supports Python 2.6 - 2.7 and 3.2 - 3.5 and contains a number of enhancements and improvements. Note also the build system changes listed below as they may have subtle effects."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "No Windows (TM) binaries are provided for this release due to a broken toolchain. One of the providers of Python packages for Windows (TM) is your best bet."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "NumPy 1.11.0 Release Notes"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Details of these improvements can be found below."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "The datetime64 type is now timezone naive."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "A dtype parameter has been added to "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "randint"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": "."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Improved detection of two arrays possibly sharing memory."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Automatic bin size estimation for "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "np.histogram"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": "."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Speed optimization of A @ A.T and dot(A, A.T)."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "New function "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "np.moveaxis"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " for reordering array axes."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              }
            ]
          },
          "type": "BulletList"
        }
      ],
      "title": "Highlights"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Numpy now uses "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "setuptools"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " for its builds instead of plain distutils.   This fixes usage of "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "install_requires='numpy'"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " in the "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "setup.py"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " files of   projects that depend on Numpy (see gh-6551).  It potentially affects the way   that build/install methods for Numpy itself behave though.  Please report any   unexpected behavior on the Numpy issue tracker."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Bento build support and related files have been removed."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Single file build support and related files have been removed."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              }
            ]
          },
          "type": "BulletList"
        }
      ],
      "title": "Build System Changes"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "The following changes are scheduled for Numpy 1.12.0."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Support for Python 2.6, 3.2, and 3.3 will be dropped."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Relaxed stride checking will become the default. See the 1.8.0 release   notes for a more extended discussion of what this change implies."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "The behavior of the datetime64 \"not a time\" (NaT) value will be changed   to match that of floating point \"not a number\" (NaN) values: all   comparisons involving NaT will return False, except for NaT != NaT which   will return True."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Indexing with floats will raise IndexError,   e.g., a[0, 0.0]."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Indexing with non-integer array_like will raise "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "IndexError"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": ",   e.g., "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "a['1', '2']"
                            ]
                          },
                          "type": "Verbatim"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Indexing with multiple ellipsis will raise "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "IndexError"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": ",   e.g., "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "a[..., ...]"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": "."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Non-integers used as index values will raise "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "TypeError"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": ",   e.g., in "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "reshape"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": ", "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "take"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": ", and specifying reduce axis."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              }
            ]
          },
          "type": "BulletList"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "In a future release the following changes will be made."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "The "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "rand"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " function exposed in "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "numpy.testing"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " will be removed. That   function is left over from early Numpy and was implemented using the   Python random module.  The random number generators from "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "numpy.random"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": "   should be used instead."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "The "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "ndarray.view"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " method will only allow c_contiguous arrays to be   viewed using a dtype of different size causing the last dimension to   change.  That differs from the current behavior where arrays that are   f_contiguous but not c_contiguous can be viewed as a dtype type of   different size causing the first dimension to change."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Slicing a "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "MaskedArray"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " will return views of both data "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "content": {
                              "value": "and"
                            }
                          },
                          "type": "Strong"
                        },
                        {
                          "data": {
                            "value": " mask.   Currently the mask is copy-on-write and changes to the mask in the slice do   not propagate to the original mask. See the FutureWarnings section below for   details."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              }
            ]
          },
          "type": "BulletList"
        }
      ],
      "title": "Future Changes"
    },
    {
      "children": [],
      "title": "Compatibility notes"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "In prior versions of NumPy the experimental datetime64 type always stored times in UTC. By default, creating a datetime64 object from a string or printing it would convert from or to local time::      "
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": "# old behavior\n>>> np.datetime64('2000-01-01T00:00:00')\nnumpy.datetime64('2000-01-01T00:00:00-0800')  # note the timezone offset -08:00"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "A consensus of datetime64 users agreed that this behavior is undesirable and at odds with how datetime64 is usually used (e.g., by "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "pandas\n<http://pandas.pydata.org>"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": "). For most use cases, a timezone naive datetime type is preferred, similar to the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "datetime.datetime"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " type in the Python standard library. Accordingly, datetime64 no longer assumes that input is in local time, nor does it print local times::      "
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": ">>> np.datetime64('2000-01-01T00:00:00')\nnumpy.datetime64('2000-01-01T00:00:00')"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "For backwards compatibility, datetime64 still parses timezone offsets, which it handles by converting to UTC. However, the resulting datetime is timezone naive::      "
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": ">>> np.datetime64('2000-01-01T00:00:00-08')\nDeprecationWarning: parsing timezone aware datetimes is deprecated;\nthis will raise an error in the future\nnumpy.datetime64('2000-01-01T08:00:00')"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "As a corollary to this change, we no longer prohibit casting between datetimes with date units and datetimes with time units. With timezone naive datetimes, the rule for casting from dates to times is no longer ambiguous."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "datetime64 changes"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "The return type of the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "linalg.norm"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " function is now floating point without exception.  Some of the norm types previously returned integers."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "``linalg.norm`` return type changes"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "The various fit functions in the numpy polynomial package no longer accept non-integers for degree specification."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "polynomial fit changes"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "This behaviour mimics that of other functions such as "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "np.inner"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ". If the two arguments cannot be cast to a common type, it could have raised a "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "TypeError"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " or "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "ValueError"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " depending on their order. Now, "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "np.dot"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " will now always raise a "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "TypeError"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": "."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "*np.dot* now raises ``TypeError`` instead of ``ValueError``"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "In "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "np.lib.split"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " an empty array in the result always had dimension   "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "(0,)"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " no matter the dimensions of the array being split. This   has been changed so that the dimensions will be preserved. A   "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "FutureWarning"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " for this change has been in place since Numpy 1.9 but,   due to a bug, sometimes no warning was raised and the dimensions were   already preserved."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              }
            ]
          },
          "type": "BulletList"
        }
      ],
      "title": "FutureWarning to changed behavior"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "These operators are implemented with the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "remainder"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " and "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "floor_divide"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " functions respectively. Those functions are now based around "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "fmod"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " and are computed together so as to be compatible with each other and with the Python versions for float types.  The results should be marginally more accurate or outright bug fixes compared to the previous results, but they may differ significantly in cases where roundoff makes a difference in the integer returned by "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "floor_divide"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ". Some corner cases also change, for instance, NaN is always returned for both functions when the divisor is zero, "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "divmod(1.0, inf)"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " returns "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "(0.0, 1.0)"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " except on MSVC 2008, and "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "divmod(-1.0, inf)"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " returns "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "(-1.0, inf)"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": "."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "``%`` and ``//`` operators"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Removed the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "check_return"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " and "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "inner_loop_selector"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " members of the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "PyUFuncObject"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " struct (replacing them with "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "reserved"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " slots to preserve struct layout). These were never used for anything, so it's unlikely that any third-party code is using them either, but we mention it here for completeness."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "C API"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "In python 2, objects which are instances of old-style user-defined classes no longer automatically count as 'object' type in the dtype-detection handler. Instead, as in python 3, they may potentially count as sequences, but only if they define both a "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "__len__"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " and a "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "__getitem__"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " method. This fixes a segfault and inconsistency between python 2 and 3."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "object dtype detection for old-style classes"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": [
                              "np.histogram"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " now provides plugin estimators for automatically   estimating the optimal number of bins. Passing one of ['auto', 'fd',   'scott', 'rice', 'sturges'] as the argument to 'bins' results in the   corresponding estimator being used."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              }
            ]
          },
          "type": "BulletList"
        },
        {
          "data": {
            "children": [
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "A benchmark suite using "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "target": "https://asv.readthedocs.io/",
                            "value": "Airspeed Velocity"
                          },
                          "type": "ExternalLink"
                        },
                        {
                          "data": {
                            "value": " has been added, converting the   previous vbench-based one. You can run the suite locally via "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "python\n  runtests.py --bench"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": ". For more details, see "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "benchmarks/README.rst"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": "."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              }
            ]
          },
          "type": "BulletList"
        },
        {
          "data": {
            "children": [
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "A new function "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "np.shares_memory"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " that can check exactly whether two   arrays have memory overlap is added. "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "np.may_share_memory"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " also now has   an option to spend more effort to reduce false positives."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              }
            ]
          },
          "type": "BulletList"
        },
        {
          "data": {
            "children": [
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": [
                              "SkipTest"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " and "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "KnownFailureException"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " exception classes are exposed   in the "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "numpy.testing"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " namespace. Raise them in a test function to mark   the test to be skipped or mark it as a known failure, respectively."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              }
            ]
          },
          "type": "BulletList"
        },
        {
          "data": {
            "children": [
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": [
                              "f2py.compile"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " has a new "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "extension"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " keyword parameter that allows the   fortran extension to be specified for generated temp files. For instance,   the files can be specifies to be "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "*.f90"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": ". The "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "verbose"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " argument is   also activated, it was previously ignored."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              }
            ]
          },
          "type": "BulletList"
        },
        {
          "data": {
            "children": [
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "A "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "dtype"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " parameter has been added to "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "np.random.randint"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": "   Random ndarrays of the following types can now be generated:"
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  },
                  {
                    "data": {
                      "children": [
                        {
                          "children": [
                            {
                              "data": {
                                "children": [
                                  {
                                    "data": {
                                      "value": [
                                        "np.bool_"
                                      ]
                                    },
                                    "type": "Verbatim"
                                  },
                                  {
                                    "data": {
                                      "value": ","
                                    },
                                    "type": "Words"
                                  }
                                ]
                              },
                              "type": "Paragraph"
                            }
                          ]
                        },
                        {
                          "children": [
                            {
                              "data": {
                                "children": [
                                  {
                                    "data": {
                                      "value": [
                                        "np.int8"
                                      ]
                                    },
                                    "type": "Verbatim"
                                  },
                                  {
                                    "data": {
                                      "value": ", "
                                    },
                                    "type": "Words"
                                  },
                                  {
                                    "data": {
                                      "value": [
                                        "np.uint8"
                                      ]
                                    },
                                    "type": "Verbatim"
                                  },
                                  {
                                    "data": {
                                      "value": ","
                                    },
                                    "type": "Words"
                                  }
                                ]
                              },
                              "type": "Paragraph"
                            }
                          ]
                        },
                        {
                          "children": [
                            {
                              "data": {
                                "children": [
                                  {
                                    "data": {
                                      "value": [
                                        "np.int16"
                                      ]
                                    },
                                    "type": "Verbatim"
                                  },
                                  {
                                    "data": {
                                      "value": ", "
                                    },
                                    "type": "Words"
                                  },
                                  {
                                    "data": {
                                      "value": [
                                        "np.uint16"
                                      ]
                                    },
                                    "type": "Verbatim"
                                  },
                                  {
                                    "data": {
                                      "value": ","
                                    },
                                    "type": "Words"
                                  }
                                ]
                              },
                              "type": "Paragraph"
                            }
                          ]
                        },
                        {
                          "children": [
                            {
                              "data": {
                                "children": [
                                  {
                                    "data": {
                                      "value": [
                                        "np.int32"
                                      ]
                                    },
                                    "type": "Verbatim"
                                  },
                                  {
                                    "data": {
                                      "value": ", "
                                    },
                                    "type": "Words"
                                  },
                                  {
                                    "data": {
                                      "value": [
                                        "np.uint32"
                                      ]
                                    },
                                    "type": "Verbatim"
                                  },
                                  {
                                    "data": {
                                      "value": ","
                                    },
                                    "type": "Words"
                                  }
                                ]
                              },
                              "type": "Paragraph"
                            }
                          ]
                        },
                        {
                          "children": [
                            {
                              "data": {
                                "children": [
                                  {
                                    "data": {
                                      "value": [
                                        "np.int64"
                                      ]
                                    },
                                    "type": "Verbatim"
                                  },
                                  {
                                    "data": {
                                      "value": ", "
                                    },
                                    "type": "Words"
                                  },
                                  {
                                    "data": {
                                      "value": [
                                        "np.uint64"
                                      ]
                                    },
                                    "type": "Verbatim"
                                  },
                                  {
                                    "data": {
                                      "value": ","
                                    },
                                    "type": "Words"
                                  }
                                ]
                              },
                              "type": "Paragraph"
                            }
                          ]
                        },
                        {
                          "children": [
                            {
                              "data": {
                                "children": [
                                  {
                                    "data": {
                                      "value": [
                                        "np.int_ ``, ``np.intp"
                                      ]
                                    },
                                    "type": "Verbatim"
                                  }
                                ]
                              },
                              "type": "Paragraph"
                            }
                          ]
                        }
                      ]
                    },
                    "type": "BulletList"
                  },
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "The specification is by precision rather than by C type. Hence, on some   platforms "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "np.int64"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " may be a "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "long"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " instead of "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "long long"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " even if   the specified dtype is "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "long long"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " because the two may have the same   precision. The resulting type depends on which C type numpy uses for the   given precision. The byteorder specification is also ignored, the   generated arrays are always in native byte order."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              }
            ]
          },
          "type": "BulletList"
        },
        {
          "data": {
            "children": [
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "A new "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "np.moveaxis"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " function allows for moving one or more array axes   to a new position by explicitly providing source and destination axes.   This function should be easier to use than the current "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "rollaxis"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": "   function as well as providing more functionality."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              }
            ]
          },
          "type": "BulletList"
        },
        {
          "data": {
            "children": [
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "The "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "deg"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " parameter of the various "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "numpy.polynomial"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " fits has been   extended to accept a list of the degrees of the terms to be included in   the fit, the coefficients of all other terms being constrained to zero.   The change is backward compatible, passing a scalar "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "deg"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " will behave   as before."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              }
            ]
          },
          "type": "BulletList"
        },
        {
          "data": {
            "children": [
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "A divmod function for float types modeled after the Python version has   been added to the npy_math library."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              }
            ]
          },
          "type": "BulletList"
        }
      ],
      "title": "New Features"
    },
    {
      "children": [],
      "title": "Improvements"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "The "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "axis"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " parameter was added to "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "np.gradient"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " for consistency.  It allows to specify over which axes the gradient is calculated."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "``np.gradient`` now supports an ``axis`` argument"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "The function now internally calls the generic "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "npy_amergesort"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " when the type does not implement a merge-sort kind of "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "argsort"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " method."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "``np.lexsort`` now supports arrays with object data-type"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "When constructing a new "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "MaskedArray"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " instance, it can be configured with an "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "order"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " argument analogous to the one when calling "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "np.ndarray"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ". The addition of this argument allows for the proper processing of an "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "order"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " argument in several MaskedArray-related utility functions such as "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "np.ma.core.array"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " and "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "np.ma.core.asarray"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": "."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "``np.ma.core.MaskedArray`` now supports an ``order`` argument"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Creating a masked array with "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "mask=True"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " (resp. "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "mask=False"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ") now uses "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "np.ones"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " (resp. "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "np.zeros"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ") to create the mask, which is faster and avoid a big memory peak. Another optimization was done to avoid a memory peak and useless computations when printing a masked array."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "Memory and speed improvements for masked arrays"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "The function now uses the fallocate system call to reserve sufficient disk space on file systems that support it."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "``ndarray.tofile`` now uses fallocate on linux"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Previously, "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "gemm"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " BLAS operations were used for all matrix products. Now, if the matrix product is between a matrix and its transpose, it will use "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "syrk"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " BLAS operations for a performance boost. This optimization has been extended to "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "@"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "numpy.dot"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "numpy.inner"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", and "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "numpy.matmul"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": "."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "content": {
                    "value": "Note:"
                  }
                },
                "type": "Strong"
              },
              {
                "data": {
                  "value": " Requires the transposed and non-transposed matrices to share data."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "Optimizations for operations of the form ``A.T @ A`` and ``A @ A.T``"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "This matches the behavior of "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "assert_raises"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": "."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "``np.testing.assert_warns`` can now be used as a context manager"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": [
                    "np.random.shuffle"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " is now much faster for 1d ndarrays."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "Speed improvement for np.random.shuffle"
    },
    {
      "children": [],
      "title": "Changes"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "The method "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "build_src.generate_a_pyrex_source"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " will remain available; it has been monkeypatched by users to support Cython instead of Pyrex.  It's recommended to switch to a better supported method of build Cython extensions though."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "Pyrex support was removed from ``numpy.distutils``"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "The resulting object in that case will simply mimic iteration over a single array. This change obsoletes distinctions like"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": [
              "if len(x) == 1:",
              "    shape = x[0].shape",
              "else:",
              "    shape = np.broadcast(\\*x).shape"
            ]
          },
          "type": "BlockQuote"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Instead, "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "np.broadcast"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " can be used in all cases."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "``np.broadcast`` can now be called with a single argument"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "This behaviour mimics that of other functions such as "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "np.diagonal"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " and ensures, e.g., that for masked arrays "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "np.trace(ma)"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " and "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "ma.trace()"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " give the same result."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "``np.trace`` now respects array subclasses"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "This behaviour mimics that of other functions such as "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "np.inner"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ". If the two arguments cannot be cast to a common type, it could have raised a "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "TypeError"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " or "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "ValueError"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " depending on their order. Now, "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "np.dot"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " will now always raise a "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "TypeError"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": "."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "``np.dot`` now raises ``TypeError`` instead of ``ValueError``"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "The "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "linalg.norm"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " function now does all its computations in floating point and returns floating results. This change fixes bugs due to integer overflow and the failure of abs with signed integers of minimum value, e.g., int8(-128). For consistency, floats are used even where an integer might work."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "``linalg.norm`` return type changes"
    },
    {
      "children": [],
      "title": "Deprecations"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "The F_CONTIGUOUS flag was used to signal that views using a dtype that changed the element size would change the first index. This was always problematical for arrays that were both F_CONTIGUOUS and C_CONTIGUOUS because C_CONTIGUOUS took precedence. Relaxed stride checking results in more such dual contiguous arrays and breaks some existing code as a result. Note that this also affects changing the dtype by assigning to the dtype attribute of an array. The aim of this deprecation is to restrict views to C_CONTIGUOUS arrays at some future time. A work around that is backward compatible is to use "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "a.T.view(...).T"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " instead. A parameter may also be added to the view method to explicitly ask for Fortran order views, but that will not be backward compatible."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "Views of arrays in Fortran order"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "It is currently possible to pass in arguments for the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "order"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " parameter in methods like "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "array.flatten"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " or "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "array.ravel"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " that were not one of the following: 'C', 'F', 'A', 'K' (note that all of these possible values are both unicode and case insensitive). Such behavior will not be allowed in future releases."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "Invalid arguments for array ordering"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "The Python standard library random number generator was previously exposed in the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "testing"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " namespace as "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "testing.rand"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ". Using this generator is not recommended and it will be removed in a future release. Use generators from "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "numpy.random"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " namespace instead."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "Random number generator in the ``testing`` namespace"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "In accordance with the Python C API, which gives preference to the half-open interval over the closed one, "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "np.random.random_integers"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " is being deprecated in favor of calling "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "np.random.randint"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", which has been enhanced with the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "dtype"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " parameter as described under \"New Features\". However, "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "np.random.random_integers"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " will not be removed anytime soon."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "Random integer generation on a closed interval"
    },
    {
      "children": [],
      "title": "FutureWarnings"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Currently a slice of a masked array contains a view of the original data and a copy-on-write view of the mask. Consequently, any changes to the slice's mask will result in a copy of the original mask being made and that new mask being changed rather than the original. For example, if we make a slice of the original like so, "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "view = original[:]"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", then modifications to the data in one array will affect the data of the other but, because the mask will be copied during assignment operations, changes to the mask will remain local. A similar situation occurs when explicitly constructing a masked array using "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "MaskedArray(data, mask)"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", the returned array will contain a view of "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "data"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " but the mask will be a copy-on-write view of "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "mask"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": "."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "In the future, these cases will be normalized so that the data and mask arrays are treated the same way and modifications to either will propagate between views. In 1.11, numpy will issue a "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "MaskedArrayFutureWarning"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " warning whenever user code modifies the mask of a view that in the future may cause values to propagate back to the original.  To silence these warnings and make your code robust against the upcoming changes, you have two options: if you want to keep the current behavior, call "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "masked_view.unshare_mask()"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " before modifying the mask.  If you want to get the future behavior early, use "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "masked_view._sharedmask = False"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ". However, note that setting the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "_sharedmask"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " attribute will break following explicit calls to "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "masked_view.unshare_mask()"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": "."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "Assigning to slices/views of ``MaskedArray``"
    }
  ],
  "example_section_data": {
    "children": [],
    "title": null
  },
  "item_file": null,
  "item_line": null,
  "item_type": null,
  "ordered_sections": [],
  "references": null,
  "refs": [],
  "see_also": [],
  "signature": {
    "value": null
  }
}