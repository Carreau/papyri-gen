{
  "_content": {},
  "aliases": [],
  "arbitrary": [
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "This release supports Python 2.7 and 3.4 - 3.6."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "NumPy 1.12.0 Release Notes"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "The NumPy 1.12.0 release contains a large number of fixes and improvements, but few that stand out above all others. That makes picking out the highlights somewhat arbitrary but the following may be of particular interest or indicate areas likely to have future consequences."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Order of operations in "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "np.einsum"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " can now be optimized for large speed improvements."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "New "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "signature"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " argument to "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "np.vectorize"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " for vectorizing with core dimensions."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "The "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "keepdims"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " argument was added to many functions."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "New context manager for testing warnings"
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Support for BLIS in numpy.distutils"
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Much improved support for PyPy (not yet finished)"
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              }
            ]
          },
          "type": "BulletList"
        }
      ],
      "title": "Highlights"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Support for Python 2.6, 3.2, and 3.3 has been dropped."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              }
            ]
          },
          "type": "BulletList"
        }
      ],
      "title": "Dropped Support"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Support for PyPy 2.7 v5.6.0 has been added. While not complete (nditer   "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "updateifcopy"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " is not supported yet), this is a milestone for PyPy's   C-API compatibility layer."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              }
            ]
          },
          "type": "BulletList"
        }
      ],
      "title": "Added Support"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Library order is preserved, instead of being reordered to match that of   the directories."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              }
            ]
          },
          "type": "BulletList"
        }
      ],
      "title": "Build System Changes"
    },
    {
      "children": [],
      "title": "Deprecations"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Assigning the 'data' attribute is an inherently unsafe operation as pointed out in gh-7083. Such a capability will be removed in the future."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "Assignment of ndarray object's ``data`` attribute"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": [
                    "np.linspace"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " now raises DeprecationWarning when num cannot be safely interpreted as an integer."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "Unsafe int casting of the num attribute in ``linspace``"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "If a 'width' parameter is passed into "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "binary_repr"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " that is insufficient to represent the number in base 2 (positive) or 2's complement (negative) form, the function used to silently ignore the parameter and return a representation using the minimal number of bits needed for the form in question. Such behavior is now considered unsafe from a user perspective and will raise an error in the future."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "Insufficient bit width parameter to ``binary_repr``"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "In 1.13 NAT will always compare False except for "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "NAT != NAT"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": ",   which will be True.  In short, NAT will behave like NaN"
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "In 1.13 "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "np.average"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " will preserve subclasses, to match the behavior of most   other numpy functions such as np.mean. In particular, this means calls which   returned a scalar may return a 0-d subclass object instead."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              }
            ]
          },
          "type": "BulletList"
        }
      ],
      "title": "Future Changes"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "In 1.13 the behavior of structured arrays involving multiple fields will change in two ways:"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "First, indexing a structured array with multiple fields (eg, "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "arr[['f1', 'f3']]"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ") will return a view into the original array in 1.13, instead of a copy. Note the returned view will have extra padding bytes corresponding to intervening fields in the original array, unlike the copy in 1.12, which will affect code such as "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "arr[['f1', 'f3']].view(newdtype)"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": "."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Second, for numpy versions 1.6 to 1.12 assignment between structured arrays occurs \"by field name\": Fields in the destination array are set to the identically-named field in the source array or to 0 if the source does not have a field::      "
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": ">>> a = np.array([(1,2),(3,4)], dtype=[('x', 'i4'), ('y', 'i4')])\n>>> b = np.ones(2, dtype=[('z', 'i4'), ('y', 'i4'), ('x', 'i4')])\n>>> b[:] = a\n>>> b\narray([(0, 2, 1), (0, 4, 3)],\n      dtype=[('z', '<i4'), ('y', '<i4'), ('x', '<i4')])"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "In 1.13 assignment will instead occur \"by position\": The Nth field of the destination will be set to the Nth field of the source regardless of field name. The old behavior can be obtained by using indexing to reorder the fields before assignment, e.g., "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "b[['x', 'y']] = a[['y', 'x']]"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": "."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "Multiple-field manipulation of structured arrays"
    },
    {
      "children": [],
      "title": "Compatibility notes"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Indexing with floats raises "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "IndexError"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": ",   e.g., a[0, 0.0]."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Indexing with non-integer array_like raises "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "IndexError"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": ",   e.g., "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "a['1', '2']"
                            ]
                          },
                          "type": "Verbatim"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Indexing with multiple ellipsis raises "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "IndexError"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": ",   e.g., "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "a[..., ...]"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": "."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Non-integers used as index values raise "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "TypeError"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": ",   e.g., in "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "reshape"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": ", "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "take"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": ", and specifying reduce axis."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              }
            ]
          },
          "type": "BulletList"
        }
      ],
      "title": "DeprecationWarning to error"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": [
                              "np.full"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " now returns an array of the fill-value's dtype if no dtype is   given, instead of defaulting to float."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": [
                              "np.average"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " will emit a warning if the argument is a subclass of ndarray,   as the subclass will be preserved starting in 1.13. (see Future Changes)"
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              }
            ]
          },
          "type": "BulletList"
        }
      ],
      "title": "FutureWarning to changed behavior"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "The previous behavior depended on whether numpy scalar integers or numpy integer arrays were involved."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "For arrays"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Zero to negative integer powers returned least integral value."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Both 1, -1 to negative integer powers returned correct values."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "The remaining integers returned zero when raised to negative integer powers."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              }
            ]
          },
          "type": "BulletList"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "For scalars"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Zero to negative integer powers returned least integral value."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Both 1, -1 to negative integer powers returned correct values."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "The remaining integers sometimes returned zero, sometimes the   correct float depending on the integer type combination."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              }
            ]
          },
          "type": "BulletList"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "All of these cases now raise a "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "ValueError"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " except for those integer combinations whose common type is float, for instance uint64 and int8. It was felt that a simple rule was the best way to go rather than have special exceptions for the integer units. If you need negative powers, use an inexact type."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "``power`` and ``**`` raise errors for integer to negative integer powers"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "This will have some impact on code that assumed that "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "F_CONTIGUOUS"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " and "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "C_CONTIGUOUS"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " were mutually exclusive and could be set to determine the default order for arrays that are now both."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "Relaxed stride checking is the default"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "The 'midpoint' interpolator now gives the same result as 'lower' and 'higher' when the two coincide. Previous behavior of 'lower' + 0.5 is fixed."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "The ``np.percentile`` 'midpoint' interpolation method fixed for exact indices"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "numpy functions that take a "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "keepdims"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " kwarg now pass the value through to the corresponding methods on ndarray sub-classes.  Previously the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "keepdims"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " keyword would be silently dropped.  These functions now have the following behavior:"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "If user does not provide "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "keepdims"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": ", no keyword is passed to the underlying    method."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Any user-provided value of "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "keepdims"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " is passed through as a keyword    argument to the method."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              }
            ]
          },
          "type": "EnumeratedList"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "This will raise in the case where the method does not support a "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "keepdims"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " kwarg and the user explicitly passes in "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "keepdims"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": "."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "The following functions are changed: "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "sum"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "product"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "sometrue"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "alltrue"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "any"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "all"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "amax"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "amin"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "prod"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "mean"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "std"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "var"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "nanmin"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "nanmax"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "nansum"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "nanprod"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "nanmean"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "nanmedian"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "nanvar"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "nanstd"
                  ]
                },
                "type": "Verbatim"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "``keepdims`` kwarg is passed through to user-class methods"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "The previous identity was 1, it is now -1. See entry in Improvements for more explanation."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "``bitwise_and`` identity changed"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Similar to unmasked median the masked median "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "ma.median"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " now emits a Runtime warning and returns "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "NaN"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " in slices where an unmasked "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "NaN"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " is present."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "ma.median warns and returns nan when unmasked invalid values are encountered"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "The precision check for scalars has been changed to match that for arrays. It is now::      "
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": "abs(actual - desired) < 1.5 * 10**(-decimal)"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Note that this is looser than previously documented, but agrees with the previous implementation used in "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "assert_array_almost_equal"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ". Due to the change in implementation some very delicate tests may fail that did not fail before."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "Greater consistency in ``assert_almost_equal``"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "When "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "raise_warnings=\"develop\""
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " is given, all uncaught warnings will now be considered a test failure. Previously only selected ones were raised. Warnings which are not caught or raised (mostly when in release mode) will be shown once during the test cycle similar to the default python settings."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "``NoseTester`` behaviour of warnings during testing"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "The "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "assert_warns"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " function and context manager are now more specific to the given warning category. This increased specificity leads to them being handled according to the outer warning settings. This means that no warning may be raised in cases where a wrong category warning is given and ignored outside the context. Alternatively the increased specificity may mean that warnings that were incorrectly ignored will now be shown or raised. See also the new "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "suppress_warnings"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " context manager. The same is true for the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "deprecated"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " decorator."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "``assert_warns`` and ``deprecated`` decorator more specific"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "No changes."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "C API"
    },
    {
      "children": [],
      "title": "New Features"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": [
                    "np.lib.stride_tricks.as_strided"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " now has a "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "writeable"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " keyword argument. It can be set to False when no write operation to the returned array is expected to avoid accidental unpredictable writes."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "Writeable keyword argument for ``as_strided``"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "The "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "axes"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " keyword argument in "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "rot90"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " determines the plane in which the array is rotated. It defaults to "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "axes=(0,1)"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " as in the original function."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "``axes`` keyword argument for ``rot90``"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": [
                    "flipud"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " and "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "fliplr"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " reverse the elements of an array along axis=0 and axis=1 respectively. The newly added "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "flip"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " function reverses the elements of an array along any given axis."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": [
                              "np.count_nonzero"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " now has an "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "axis"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " parameter, allowing   non-zero counts to be generated on more than just a flattened   array object."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              }
            ]
          },
          "type": "BulletList"
        }
      ],
      "title": "Generalized ``flip``"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Building against the BLAS implementation provided by the BLIS library is now supported.  See the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "[blis]"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " section in "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "site.cfg.example"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " (in the root of the numpy repo or source distribution)."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "BLIS support in ``numpy.distutils``"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Binary distributions of numpy may need to run specific hardware checks or load specific libraries during numpy initialization.  For example, if we are distributing numpy with a BLAS library that requires SSE2 instructions, we would like to check the machine on which numpy is running does have SSE2 in order to give an informative error."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Add a hook in "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "numpy/__init__.py"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " to import a "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "numpy/_distributor_init.py"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " file that will remain empty (bar a docstring) in the standard numpy source, but that can be overwritten by people making binary distributions of numpy."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "Hook in ``numpy/__init__.py`` to run distribution-specific checks"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Nan-functions "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "nancumsum"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " and "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "nancumprod"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " have been added to compute "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "cumsum"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " and "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "cumprod"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " by ignoring nans."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "New nanfunctions ``nancumsum`` and ``nancumprod`` added"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": [
                    "np.lib.interp(x, xp, fp)"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " now allows the interpolated array "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "fp"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " to be complex and will interpolate at "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "complex128"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " precision."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "``np.interp`` can now interpolate complex values"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "The new function "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "polyvalfromroots"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " evaluates a polynomial at given points from the roots of the polynomial. This is useful for higher order polynomials, where expansion into polynomial coefficients is inaccurate at machine precision."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "New polynomial evaluation function ``polyvalfromroots`` added"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "The new function "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "geomspace"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " generates a geometric sequence.  It is similar to "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "logspace"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", but with start and stop specified directly: "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "geomspace(start, stop)"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " behaves the same as "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "logspace(log10(start), log10(stop))"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": "."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "New array creation function ``geomspace`` added"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "A new context manager "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "suppress_warnings"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " has been added to the testing utils. This context manager is designed to help reliably test warnings. Specifically to reliably filter/ignore warnings. Ignoring warnings by using an \"ignore\" filter in Python versions before 3.4.x can quickly result in these (or similar) warnings not being tested reliably."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "The context manager allows to filter (as well as record) warnings similar to the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "catch_warnings"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " context, but allows for easier specificity. Also printing warnings that have not been filtered or nesting the context manager will work as expected. Additionally, it is possible to use the context manager as a decorator which can be useful when multiple tests give need to hide the same warning."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "New context manager for testing warnings"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "These functions wrapped the non-masked versions, but propagate through masked values. There are two different propagation modes. The default causes masked values to contaminate the result with masks, but the other mode only outputs masks if there is no alternative."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "New masked array functions ``ma.convolve`` and ``ma.correlate`` added"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "The new "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "float_power"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " ufunc is like the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "power"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " function except all computation is done in a minimum precision of float64. There was a long discussion on the numpy mailing list of how to treat integers to negative integer powers and a popular proposal was that the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "__pow__"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " operator should always return results of at least float64 precision. The "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "float_power"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " function implements that option. Note that it does not support object arrays."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "New ``float_power`` ufunc"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Instead of using "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "usecol=(n,)"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " to read the nth column of a file it is now allowed to use "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "usecol=n"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ". Also the error message is more user friendly when a non-integer is passed as a column index."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "``np.loadtxt`` now supports a single integer as ``usecol`` argument"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Added 'doane' and 'sqrt' estimators to "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "histogram"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " via the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "bins"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " argument. Added support for range-restricted histograms with automated bin estimation."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "Improved automated bin estimators for ``histogram``"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "The "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "shift"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " and "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "axis"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " arguments to "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "roll"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " are now broadcast against each other, and each specified axis is shifted accordingly."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "``np.roll`` can now roll multiple axes at the same time"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Calling "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "complex()"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " on a size 1 array will now cast to a python complex."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "The ``__complex__`` method has been implemented for the ndarrays"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "The standard "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "np.load"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "np.save"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "np.loadtxt"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "np.savez"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", and similar functions can now take "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "pathlib.Path"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " objects as an argument instead of a filename or open file object."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "``pathlib.Path`` objects now supported"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "This makes "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "np.finfo"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " consistent with "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "np.iinfo"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " which already has that attribute."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "New ``bits`` attribute for ``np.finfo``"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "This argument allows for vectorizing user defined functions with core dimensions, in the style of NumPy's "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "generalized universal functions<c-api.generalized-ufuncs>"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ". This allows for vectorizing a much broader class of functions. For example, an arbitrary distance metric that combines two vectors to produce a scalar could be vectorized with "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "signature='(n),(n)->()'"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ". See "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "np.vectorize"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " for full details."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "New ``signature`` argument to ``np.vectorize``"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "To help people migrate their code bases from Python 2 to Python 3, the python interpreter has a handy option -3, which issues warnings at runtime. One of its warnings is for integer division::      "
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": "$ python -3 -c \"2/3\"\n\n-c:1: DeprecationWarning: classic int division"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "In Python 3, the new integer division semantics also apply to numpy arrays. With this version, numpy will emit a similar warning::      "
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": "$ python -3 -c \"import numpy as np; np.array(2)/np.array(3)\"\n\n-c:1: DeprecationWarning: numpy: classic int division"
          },
          "type": "BlockVerbatim"
        }
      ],
      "title": "Emit py3kwarnings for division of integer arrays"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Previously, it included str (bytes) and unicode on Python2, but only str (unicode) on Python3."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "numpy.sctypes now includes bytes on Python3 too"
    },
    {
      "children": [],
      "title": "Improvements"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "The previous identity was 1 with the result that all bits except the LSB were masked out when the reduce method was used.  The new identity is -1, which should work properly on twos complement machines as all bits will be set to one."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "``bitwise_and`` identity changed"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Generalized Ufuncs, including most of the linalg module, will now unlock the Python global interpreter lock."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "Generalized Ufuncs will now unlock the GIL"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "The caches in "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "np.fft"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " that speed up successive FFTs of the same length can no longer grow without bounds. They have been replaced with LRU (least recently used) caches that automatically evict no longer needed items if either the memory size or item count limit has been reached."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "Caches in `np.fft` are now bounded in total size and item count"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Fixed several interfaces that explicitly disallowed arrays with zero-width string dtypes (i.e. "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "dtype('S0')"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " or "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "dtype('U0')"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", and fixed several bugs where such dtypes were not handled properly.  In particular, changed "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "ndarray.__new__"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " to not implicitly convert "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "dtype('S0')"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " to "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "dtype('S1')"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " (and likewise for unicode) when creating new arrays."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "Improved handling of zero-width string/unicode dtypes"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "If the cpu supports it at runtime the basic integer ufuncs now use AVX2 instructions. This feature is currently only available when compiled with GCC."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "Integer ufuncs vectorized with AVX2"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": [
                    "np.einsum"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " now supports the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "optimize"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " argument which will optimize the order of contraction. For example, "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "np.einsum"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " would complete the chain dot example "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "np.einsum(\u2018ij,jk,kl->il\u2019, a, b, c)"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " in a single pass which would scale like "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "N^4"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": "; however, when "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "optimize=True"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "np.einsum"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " will create an intermediate array to reduce this scaling to "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "N^3"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " or effectively "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "np.dot(a, b).dot(c)"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ". Usage of intermediate tensors to reduce scaling has been applied to the general einsum summation notation. See "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "np.einsum_path"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " for more details."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "Order of operations optimization in ``np.einsum``"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "The quicksort kind of "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "np.sort"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " and "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "np.argsort"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " is now an introsort which is regular quicksort but changing to a heapsort when not enough progress is made. This retains the good quicksort performance while changing the worst case runtime from "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "O(N^2)"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " to "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "O(N*log(N))"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": "."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "quicksort has been changed to an introsort"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "The ediff1d function uses an array instead on a flat iterator for the subtraction.  When to_begin or to_end is not None, the subtraction is performed in place to eliminate a copy operation.  A side effect is that certain subclasses are handled better, namely astropy.Quantity, since the complete array is created, wrapped, and then begin and end values are set, instead of using concatenate."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "``ediff1d`` improved performance and subclass handling"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "The computation of the mean of float16 arrays is now carried out in float32 for improved precision. This should be useful in packages such as Theano where the precision of float16 is adequate and its smaller footprint is desirable."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "Improved precision of ``ndarray.mean`` for float16 arrays"
    },
    {
      "children": [],
      "title": "Changes"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Internally, many array-like methods in fromnumeric.py were being called with positional arguments instead of keyword arguments as their external signatures were doing. This caused a complication in the downstream 'pandas' library that encountered an issue with 'numpy' compatibility. Now, all array-like methods in this module are called with keyword arguments instead."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "All array-like methods are now called with keyword arguments in fromnumeric.py"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Previously operations on a memmap object would misleadingly return a memmap instance even if the result was actually not memmapped.  For example, "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "arr + 1"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " or "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "arr + arr"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " would return memmap instances, although no memory from the output array is memmapped. Version 1.12 returns ordinary numpy arrays from these operations."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Also, reduction of a memmap (e.g.  "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    ".sum(axis=None"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ") now returns a numpy scalar instead of a 0d memmap."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "Operations on np.memmap objects return numpy arrays in most cases"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "The stacklevel for python based warnings was increased so that most warnings will report the offending line of the user code instead of the line the warning itself is given. Passing of stacklevel is now tested to ensure that new warnings will receive the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "stacklevel"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " argument."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "This causes warnings with the \"default\" or \"module\" filter to be shown once for every offending user code line or user module instead of only once. On python versions before 3.4, this can cause warnings to appear that were falsely ignored before, which may be surprising especially in test suits."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "stacklevel of warnings increased"
    }
  ],
  "example_section_data": {
    "children": [],
    "title": null
  },
  "item_file": null,
  "item_line": null,
  "item_type": null,
  "ordered_sections": [],
  "references": null,
  "see_also": [],
  "signature": {
    "value": null
  }
}