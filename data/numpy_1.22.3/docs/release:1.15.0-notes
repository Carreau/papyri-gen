{
  "_content": {},
  "aliases": [],
  "arbitrary": [
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "NumPy 1.15.0 is a release with an unusual number of cleanups, many deprecations of old functions, and improvements to many existing functions. Please read the detailed descriptions below to see if you are affected."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "For testing, we have switched to pytest as a replacement for the no longer maintained nose framework. The old nose based interface remains for downstream projects who may still be using it."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "The Python versions supported by this release are 2.7, 3.4-3.7. The wheels are linked with OpenBLAS v0.3.0, which should fix some of the linalg problems reported for NumPy 1.14."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "NumPy 1.15.0 Release Notes"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "NumPy has switched to pytest for testing."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "A new  "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "exists": true,
                            "kind": "module",
                            "reference": {
                              "kind": "api",
                              "module": "numpy",
                              "path": "numpy.printoptions",
                              "version": "*"
                            },
                            "value": "numpy.printoptions"
                          },
                          "type": "Link"
                        },
                        {
                          "data": {
                            "value": " context manager."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Many improvements to the histogram functions."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Support for unicode field names in python 2.7."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Improved support for PyPy."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Fixes and improvements to "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "exists": true,
                            "kind": "module",
                            "reference": {
                              "kind": "api",
                              "module": "numpy",
                              "path": "numpy.einsum",
                              "version": "*"
                            },
                            "value": "numpy.einsum"
                          },
                          "type": "Link"
                        },
                        {
                          "data": {
                            "value": "."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              }
            ]
          },
          "type": "BulletList"
        }
      ],
      "title": "Highlights"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "domain": null,
                            "role": null,
                            "value": "numpy.gcd"
                          },
                          "type": "Directive"
                        },
                        {
                          "data": {
                            "value": " and "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "domain": null,
                            "role": null,
                            "value": "numpy.lcm"
                          },
                          "type": "Directive"
                        },
                        {
                          "data": {
                            "value": ", to compute the greatest common divisor and least   common multiple."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "exists": true,
                            "kind": "module",
                            "reference": {
                              "kind": "api",
                              "module": "numpy",
                              "path": "numpy.ma.extras.stack",
                              "version": "*"
                            },
                            "value": "numpy.ma.stack"
                          },
                          "type": "Link"
                        },
                        {
                          "data": {
                            "value": ", the "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "exists": true,
                            "kind": "module",
                            "reference": {
                              "kind": "api",
                              "module": "numpy",
                              "path": "numpy.stack",
                              "version": "*"
                            },
                            "value": "numpy.stack"
                          },
                          "type": "Link"
                        },
                        {
                          "data": {
                            "value": " array-joining function generalized to   masked arrays."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "exists": true,
                            "kind": "module",
                            "reference": {
                              "kind": "api",
                              "module": "numpy",
                              "path": "numpy.quantile",
                              "version": "*"
                            },
                            "value": "numpy.quantile"
                          },
                          "type": "Link"
                        },
                        {
                          "data": {
                            "value": " function, an interface to "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "percentile"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " without factors of   100"
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "exists": true,
                            "kind": "module",
                            "reference": {
                              "kind": "api",
                              "module": "numpy",
                              "path": "numpy.nanquantile",
                              "version": "*"
                            },
                            "value": "numpy.nanquantile"
                          },
                          "type": "Link"
                        },
                        {
                          "data": {
                            "value": " function, an interface to "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "nanpercentile"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " without   factors of 100"
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "exists": true,
                            "kind": "module",
                            "reference": {
                              "kind": "api",
                              "module": "numpy",
                              "path": "numpy.printoptions",
                              "version": "*"
                            },
                            "value": "numpy.printoptions"
                          },
                          "type": "Link"
                        },
                        {
                          "data": {
                            "value": ", a context manager that sets print options temporarily   for the scope of the "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "with"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " block::      "
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  },
                  {
                    "data": {
                      "value": ">>> with np.printoptions(precision=2):\n...     print(np.array([2.0]) / 3)\n[0.67]"
                    },
                    "type": "BlockVerbatim"
                  }
                ]
              },
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "exists": true,
                            "kind": "module",
                            "reference": {
                              "kind": "api",
                              "module": "numpy",
                              "path": "numpy.histogram_bin_edges",
                              "version": "*"
                            },
                            "value": "numpy.histogram_bin_edges"
                          },
                          "type": "Link"
                        },
                        {
                          "data": {
                            "value": ", a function to get the edges of the bins used by a   histogram without needing to calculate the histogram."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "C functions "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "domain": null,
                            "role": null,
                            "value": "npy_get_floatstatus_barrier"
                          },
                          "type": "Directive"
                        },
                        {
                          "data": {
                            "value": " and "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "domain": null,
                            "role": null,
                            "value": "npy_clear_floatstatus_barrier"
                          },
                          "type": "Directive"
                        },
                        {
                          "data": {
                            "value": "   have been added to deal with compiler optimization changing the order of   operations.  See below for details."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              }
            ]
          },
          "type": "BulletList"
        }
      ],
      "title": "New functions"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Aliases of builtin "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "exists": true,
                            "kind": "module",
                            "reference": {
                              "kind": "api",
                              "module": "pickle",
                              "path": "pickle",
                              "version": "*"
                            },
                            "value": "pickle"
                          },
                          "type": "Link"
                        },
                        {
                          "data": {
                            "value": " functions are deprecated, in favor of their   unaliased "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "pickle.<func>"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " names:"
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  },
                  {
                    "data": {
                      "children": [
                        {
                          "children": [
                            {
                              "data": {
                                "children": [
                                  {
                                    "data": {
                                      "domain": null,
                                      "role": null,
                                      "value": "numpy.loads"
                                    },
                                    "type": "Directive"
                                  }
                                ]
                              },
                              "type": "Paragraph"
                            }
                          ]
                        },
                        {
                          "children": [
                            {
                              "data": {
                                "children": [
                                  {
                                    "data": {
                                      "domain": null,
                                      "role": null,
                                      "value": "numpy.core.numeric.load"
                                    },
                                    "type": "Directive"
                                  }
                                ]
                              },
                              "type": "Paragraph"
                            }
                          ]
                        },
                        {
                          "children": [
                            {
                              "data": {
                                "children": [
                                  {
                                    "data": {
                                      "domain": null,
                                      "role": null,
                                      "value": "numpy.core.numeric.loads"
                                    },
                                    "type": "Directive"
                                  }
                                ]
                              },
                              "type": "Paragraph"
                            }
                          ]
                        },
                        {
                          "children": [
                            {
                              "data": {
                                "children": [
                                  {
                                    "data": {
                                      "domain": null,
                                      "role": null,
                                      "value": "numpy.ma.loads"
                                    },
                                    "type": "Directive"
                                  },
                                  {
                                    "data": {
                                      "value": ", "
                                    },
                                    "type": "Words"
                                  },
                                  {
                                    "data": {
                                      "domain": null,
                                      "role": null,
                                      "value": "numpy.ma.dumps"
                                    },
                                    "type": "Directive"
                                  }
                                ]
                              },
                              "type": "Paragraph"
                            }
                          ]
                        },
                        {
                          "children": [
                            {
                              "data": {
                                "children": [
                                  {
                                    "data": {
                                      "domain": null,
                                      "role": null,
                                      "value": "numpy.ma.load"
                                    },
                                    "type": "Directive"
                                  },
                                  {
                                    "data": {
                                      "value": ", "
                                    },
                                    "type": "Words"
                                  },
                                  {
                                    "data": {
                                      "domain": null,
                                      "role": null,
                                      "value": "numpy.ma.dump"
                                    },
                                    "type": "Directive"
                                  },
                                  {
                                    "data": {
                                      "value": " - these functions already failed on     python 3 when called with a string."
                                    },
                                    "type": "Words"
                                  }
                                ]
                              },
                              "type": "Paragraph"
                            }
                          ]
                        }
                      ]
                    },
                    "type": "BulletList"
                  }
                ]
              },
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Multidimensional indexing with anything but a tuple is deprecated. This means   that the index list in "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "ind = [slice(None), 0]; arr[ind]"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " should be changed   to a tuple, e.g., "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "ind = [slice(None), 0]; arr[tuple(ind)]"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " or   "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "arr[(slice(None), 0)]"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": ". That change is necessary to avoid ambiguity in   expressions such as "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "arr[[[0, 1], [0, 1]]]"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": ", currently interpreted as   "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "arr[array([0, 1]), array([0, 1])]"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": ", that will be interpreted   as "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "arr[array([[0, 1], [0, 1]])]"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " in the future."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Imports from the following sub-modules are deprecated, they will be removed   at some future date."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  },
                  {
                    "data": {
                      "children": [
                        {
                          "children": [
                            {
                              "data": {
                                "children": [
                                  {
                                    "data": {
                                      "exists": true,
                                      "kind": "module",
                                      "reference": {
                                        "kind": "api",
                                        "module": "numpy",
                                        "path": "numpy.testing.utils",
                                        "version": "*"
                                      },
                                      "value": "numpy.testing.utils"
                                    },
                                    "type": "Link"
                                  }
                                ]
                              },
                              "type": "Paragraph"
                            }
                          ]
                        },
                        {
                          "children": [
                            {
                              "data": {
                                "children": [
                                  {
                                    "data": {
                                      "domain": null,
                                      "role": null,
                                      "value": "numpy.testing.decorators"
                                    },
                                    "type": "Directive"
                                  }
                                ]
                              },
                              "type": "Paragraph"
                            }
                          ]
                        },
                        {
                          "children": [
                            {
                              "data": {
                                "children": [
                                  {
                                    "data": {
                                      "domain": null,
                                      "role": null,
                                      "value": "numpy.testing.nosetester"
                                    },
                                    "type": "Directive"
                                  }
                                ]
                              },
                              "type": "Paragraph"
                            }
                          ]
                        },
                        {
                          "children": [
                            {
                              "data": {
                                "children": [
                                  {
                                    "data": {
                                      "domain": null,
                                      "role": null,
                                      "value": "numpy.testing.noseclasses"
                                    },
                                    "type": "Directive"
                                  }
                                ]
                              },
                              "type": "Paragraph"
                            }
                          ]
                        },
                        {
                          "children": [
                            {
                              "data": {
                                "children": [
                                  {
                                    "data": {
                                      "exists": true,
                                      "kind": "module",
                                      "reference": {
                                        "kind": "api",
                                        "module": "numpy",
                                        "path": "numpy.core.umath_tests",
                                        "version": "*"
                                      },
                                      "value": "numpy.core.umath_tests"
                                    },
                                    "type": "Link"
                                  }
                                ]
                              },
                              "type": "Paragraph"
                            }
                          ]
                        }
                      ]
                    },
                    "type": "BulletList"
                  }
                ]
              },
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Giving a generator to "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "exists": true,
                            "kind": "module",
                            "reference": {
                              "kind": "api",
                              "module": "numpy",
                              "path": "numpy.sum",
                              "version": "*"
                            },
                            "value": "numpy.sum"
                          },
                          "type": "Link"
                        },
                        {
                          "data": {
                            "value": " is now deprecated. This was undocumented   behavior, but worked. Previously, it would calculate the sum of the generator   expression.  In the future, it might return a different result. Use   "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "np.sum(np.from_iter(generator))"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " or the built-in Python "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "sum"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " instead."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Users of the C-API should call "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "PyArrayResolveWriteBackIfCopy"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " or   "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "PyArray_DiscardWritbackIfCopy"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " on any array with the "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "WRITEBACKIFCOPY"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": "   flag set, before deallocating the array. A deprecation warning will be   emitted if those calls are not used when needed."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Users of "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "nditer"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " should use the nditer object as a context manager   anytime one of the iterator operands is writeable, so that numpy can   manage writeback semantics, or should call "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "it.close()"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": ". A   "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "domain": null,
                            "role": null,
                            "value": "RuntimeWarning"
                          },
                          "type": "Directive"
                        },
                        {
                          "data": {
                            "value": " may be emitted otherwise in these cases."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "The "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "normed"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " argument of "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "np.histogram"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": ", deprecated long ago in 1.6.0,   now emits a "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "DeprecationWarning"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": "."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              }
            ]
          },
          "type": "BulletList"
        }
      ],
      "title": "Deprecations"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "NumPy 1.16 will drop support for Python 3.4."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "NumPy 1.17 will drop support for Python 2.7."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              }
            ]
          },
          "type": "BulletList"
        }
      ],
      "title": "Future Changes"
    },
    {
      "children": [],
      "title": "Compatibility notes"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "The following compiled modules have been renamed and made private:"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": [
                              "umath_tests"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " -> "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "_umath_tests"
                            ]
                          },
                          "type": "Verbatim"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": [
                              "test_rational"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " -> "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "_rational_tests"
                            ]
                          },
                          "type": "Verbatim"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": [
                              "multiarray_tests"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " -> "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "_multiarray_tests"
                            ]
                          },
                          "type": "Verbatim"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": [
                              "struct_ufunc_test"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " -> "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "_struct_ufunc_tests"
                            ]
                          },
                          "type": "Verbatim"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": [
                              "operand_flag_tests"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " -> "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "_operand_flag_tests"
                            ]
                          },
                          "type": "Verbatim"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              }
            ]
          },
          "type": "BulletList"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "The "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "umath_tests"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " module is still available for backwards compatibility, but will be removed in the future."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "Compiled testing modules renamed and made private"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "This means it behaves like a readonly dictionary, and has a new "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    ".values()"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " method and "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "len()"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " implementation."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "For python 3, this means that "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    ".iteritems()"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    ".iterkeys()"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " have been deprecated, and "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    ".keys()"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " and "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    ".items()"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " now return views and not lists. This is consistent with how the builtin "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "dict"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " type changed between python 2 and python 3."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "The ``NpzFile`` returned by ``np.savez`` is now a ``collections.abc.Mapping``"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "When using an "
                },
                "type": "Words"
              },
              {
                "data": {
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "api",
                    "module": "numpy",
                    "path": "numpy.nditer",
                    "version": "*"
                  },
                  "value": "numpy.nditer"
                },
                "type": "Link"
              },
              {
                "data": {
                  "value": " with the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "\"writeonly\""
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " or "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "\"readwrite\""
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " flags, there are some circumstances where nditer doesn't actually give you a view of the writable array. Instead, it gives you a copy, and if you make changes to the copy, nditer later writes those changes back into your actual array. Currently, this writeback occurs when the array objects are garbage collected, which makes this API error-prone on CPython and entirely broken on PyPy. Therefore, "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "nditer"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " should now be used as a context manager whenever it is used with writeable arrays, e.g., "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "with np.nditer(...) as it: ..."
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ". You may also explicitly call "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "it.close()"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " for cases where a context manager is unusable, for instance in generator expressions."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "Under certain conditions, ``nditer`` must be used in a context manager"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "The last nose release was 1.3.7 in June, 2015, and development of that tool has ended, consequently NumPy has now switched to using pytest. The old decorators and nose tools that were previously used by some downstream projects remain available, but will not be maintained. The standard testing utilities, "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "assert_almost_equal"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " and such, are not be affected by this change except for the nose specific functions "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "import_nose"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " and "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "raises"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ". Those functions are not used in numpy, but are kept for downstream compatibility."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "Numpy has switched to using pytest instead of nose for testing"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Previously numpy added "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "__array_interface__"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " attributes to all the integer types from "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "ctypes"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": "."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "Numpy no longer monkey-patches ``ctypes`` with ``__array_interface__``"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "This is the documented behavior, but previously the result could be any of slice, None, or list."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "All downstream users seem to check for the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "None"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " result from "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "flatnotmasked_contiguous"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " and replace it with "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "[]"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ".  Those callers will continue to work as before."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "``np.ma.notmasked_contiguous`` and ``np.ma.flatnotmasked_contiguous`` always return lists"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Prior to version "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "1.7.0"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "api",
                    "module": "numpy",
                    "path": "numpy.squeeze",
                    "version": "*"
                  },
                  "value": "numpy.squeeze"
                },
                "type": "Link"
              },
              {
                "data": {
                  "value": " did not have an "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "axis"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " argument and all empty axes were removed by default. The incorporation of an "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "axis"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " argument made it possible to selectively squeeze single or multiple empty axes, but the old API expectation was not respected because axes could still be selectively removed (silent success) from an object expecting all empty axes to be removed. That silent, selective removal of empty axes for objects expecting the old behavior has been fixed and the old behavior restored."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "``np.squeeze`` restores old behavior of objects that cannot handle an ``axis`` argument"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": [
                    ".item"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " now returns a "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "bytes"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " object instead of a buffer or byte array. This may affect code which assumed the return value was mutable, which is no longer the case."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "unstructured void array's ``.item`` method now returns a bytes object"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Since "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "np.ma.masked"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " is a readonly scalar, copying should be a no-op. These functions now behave consistently with "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "np.copy()"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": "."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "``copy.copy`` and ``copy.deepcopy`` no longer turn ``masked`` into an array"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "The change that multi-field indexing of structured arrays returns a view instead of a copy is pushed back to 1.16. A new method "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "numpy.lib.recfunctions.repack_fields"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " has been introduced to help mitigate the effects of this change, which can be used to write code compatible with both numpy 1.15 and 1.16. For more information on how to update code to account for this future change see the \"accessing multiple fields\" section of the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "target": "https://docs.scipy.org/doc/numpy/user/basics.rec.html",
                  "value": "user guide"
                },
                "type": "ExternalLink"
              },
              {
                "data": {
                  "value": "."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "Multifield Indexing of Structured Arrays will still return a copy"
    },
    {
      "children": [],
      "title": "C API changes"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Functions "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "npy_get_floatstatus_barrier"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " and "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "npy_clear_floatstatus_barrier"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " have been added and should be used in place of the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "npy_get_floatstatus``and\n``npy_clear_status"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " functions. Optimizing compilers like GCC 8.1 and Clang were rearranging the order of operations when the previous functions were used in the ufunc SIMD functions, resulting in the floatstatus flags being checked before the operation whose status we wanted to check was run.  See "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "#10339\n<https://github.com/numpy/numpy/issues/10370>"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": "."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "New functions ``npy_get_floatstatus_barrier`` and ``npy_clear_floatstatus_barrier``"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": [
                    "PyArray_GetDTypeTransferFunction"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " now defaults to using user-defined "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "copyswapn"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " / "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "copyswap"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " for user-defined dtypes. If this causes a significant performance hit, consider implementing "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "copyswapn"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " to reflect the implementation of "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "PyArray_GetStridedCopyFn"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ".  See "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "#10898\n<https://github.com/numpy/numpy/pull/10898>"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": "."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "Changes to ``PyArray_GetDTypeTransferFunction``"
    },
    {
      "children": [],
      "title": "New Features"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "These compute the greatest common divisor, and lowest common multiple, respectively. These work on all the numpy integer types, as well as the builtin arbitrary-precision "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "Decimal"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " and "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "long"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " types."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "``np.gcd`` and ``np.lcm`` ufuncs added for integer and objects types"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "The build system has been modified to add support for the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "_PYTHON_HOST_PLATFORM"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " environment variable, used by "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "distutils"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " when compiling on one platform for another platform. This makes it possible to compile NumPy for iOS targets."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "This only enables you to compile NumPy for one specific platform at a time. Creating a full iOS-compatible NumPy package requires building for the 5 architectures supported by iOS (i386, x86_64, armv7, armv7s and arm64), and combining these 5 compiled builds products into a single \"fat\" binary."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "Support for cross-platform builds for iOS"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "New keyword "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "return_indices"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " returns the indices of the two input arrays that correspond to the common elements."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "``return_indices`` keyword added for ``np.intersect1d``"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Like "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "np.percentile"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " and "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "np.nanpercentile"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", but takes quantiles in [0, 1] rather than percentiles in [0, 100]. "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "np.percentile"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " is now a thin wrapper around "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "np.quantile"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " with the extra step of dividing by 100."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "``np.quantile`` and ``np.nanquantile``"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Added experimental support for the 64-bit RISC-V architecture."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "Build system"
    },
    {
      "children": [],
      "title": "Improvements"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Syncs einsum path optimization tech between "
                },
                "type": "Words"
              },
              {
                "data": {
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "api",
                    "module": "numpy",
                    "path": "numpy",
                    "version": "*"
                  },
                  "value": "numpy"
                },
                "type": "Link"
              },
              {
                "data": {
                  "value": " and "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "opt_einsum"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": ". In particular, the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "greedy"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " path has received many enhancements by @jcmgray. A full list of issues fixed are:"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Arbitrary memory can be passed into the "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "domain": null,
                            "role": null,
                            "value": "greedy"
                          },
                          "type": "Directive"
                        },
                        {
                          "data": {
                            "value": " path. Fixes gh-11210."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "The greedy path has been updated to contain more dynamic programming ideas   preventing a large number of duplicate (and expensive) calls that figure out   the actual pair contraction that takes place. Now takes a few seconds on   several hundred input tensors. Useful for matrix product state theories."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Reworks the broadcasting dot error catching found in gh-11218 gh-10352 to be   a bit earlier in the process."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Enhances the "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "domain": null,
                            "role": null,
                            "value": "can_dot"
                          },
                          "type": "Directive"
                        },
                        {
                          "data": {
                            "value": " functionality that previous missed an edge case (part   of gh-11308)."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              }
            ]
          },
          "type": "BulletList"
        }
      ],
      "title": "``np.einsum`` updates"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": [
                    "np.ufunc.reduce"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "np.sum"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "np.prod"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "np.min"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " and "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "np.max"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " all now accept an "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "initial"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " keyword argument that specifies the value to start the reduction with."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "``np.ufunc.reduce`` and related functions now accept an initial value"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": [
                    "np.flip"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " now accepts None, or tuples of int, in its "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "axis"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " argument. If axis is None, it will flip over all the axes."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "``np.flip`` can operate over multiple axes"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "These were originally found in "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "np.lib.function_base"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ". They are still available under their un-scoped "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "np.histogram(dd)"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " names, and to maintain compatibility, aliased at "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "np.lib.function_base.histogram(dd)"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": "."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Code that does "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "from np.lib.function_base import *"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " will need to be updated with the new location, and should consider not using "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "import *"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " in future."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "``histogram`` and ``histogramdd`` functions have moved to ``np.lib.histograms``"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Previously it would fail when trying to compute a finite range for the data. Since the range is ignored anyway when the bins are given explicitly, this error was needless."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Note that calling "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "histogram"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " on NaN values continues to raise the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "RuntimeWarning"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " s typical of working with nan values, which can be silenced as usual with "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "errstate"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": "."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "``histogram`` will accept NaN values when explicit bins are given"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Dates, times, and timedeltas can now be histogrammed. The bin edges must be passed explicitly, and are not yet computed automatically."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "``histogram`` works on datetime types, when explicit bin edges are given"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "No longer does an IQR of 0 result in "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "n_bins=1"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", rather the number of bins chosen is related to the data size in this situation."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "``histogram`` \"auto\" estimator handles limited variance better"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "When passed "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "np.float16"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "np.float32"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", or "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "np.longdouble"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " data, the returned edges are now of the same dtype. Previously, "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "histogram"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " would only return the same type if explicit bins were given, and "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "histogram"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " would produce "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "float64"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " bins no matter what the inputs."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "The edges returned by `histogram`` and ``histogramdd`` now match the data float type"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "The "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "range"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " argument of "
                },
                "type": "Words"
              },
              {
                "data": {
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "api",
                    "module": "numpy",
                    "path": "numpy.histogramdd",
                    "version": "*"
                  },
                  "value": "numpy.histogramdd"
                },
                "type": "Link"
              },
              {
                "data": {
                  "value": " can now contain "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "None"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " values to indicate that the range for the corresponding axis should be computed from the data. Previously, this could not be specified on a per-axis basis."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "``histogramdd`` allows explicit ranges to be given in a subset of axes"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "These arguments are now called "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "density"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", which is consistent with "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "histogram"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ". The old argument continues to work, but the new name should be preferred."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "The normed arguments of ``histogramdd`` and ``histogram2d`` have been renamed"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "0d arrays passed to the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "r_"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " and "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "mr_"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " concatenation helpers are now treated as though they are arrays of length 1. Previously, passing these was an error. As a result, "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "numpy.ma.mr_"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " now works correctly on the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "masked"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " constant."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "``np.r_`` works with 0d arrays, and ``np.ma.mr_`` works with ``np.ma.masked``"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": [
                    "np.ptp"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " (peak-to-peak) can now work over multiple axes, just like "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "np.max"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " and "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "np.min"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": "."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "``np.ptp`` accepts a ``keepdims`` argument, and extended axis tuples"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "This means it takes all the same arguments, making more code written for ndarray work for masked array too."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "``MaskedArray.astype`` now is identical to ``ndarray.astype``"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Change to simd.inc.src to allow use of AVX2 or AVX512 at compile time. Previously compilation for avx2 (or 512) with -march=native would still use the SSE code for the simd functions even when the rest of the code got AVX2."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "Enable AVX2/AVX512 at compile time"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Previously an array was returned for integer scalar inputs, which is inconsistent with the behavior for float inputs, and that of ufuncs in general. For all types of scalar or 0d input, the result is now a scalar."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "``nan_to_num`` always returns scalars when receiving scalar or 0d inputs"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": [
                    "np.flatnonzero"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " now uses "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "np.ravel(a)"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " instead of "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "a.ravel()"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", so it works for lists, tuples, etc."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "``np.flatnonzero`` works on numpy-convertible types"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Previously "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "np.interp(0.5, [0, 1], [10, 20])"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " would return a "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "float"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", but now it returns a "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "np.float64"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " object, which more closely matches the behavior of other functions."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Additionally, the special case of "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "np.interp(object_array_0d, ...)"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " is no longer supported, as "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "np.interp(object_array_nd)"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " was never supported anyway."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "As a result of this change, the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "period"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " argument can now be used on 0d arrays."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "``np.interp`` returns numpy scalars rather than builtin scalars"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Previously "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "np.dtype([(u'name', float)])"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " would raise a "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "TypeError"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " in Python 2, as only bytestrings were allowed in field names. Now any unicode string field names will be encoded with the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "ascii"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " codec, raising a "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "UnicodeEncodeError"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " upon failure."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "This change makes it easier to write Python 2/3 compatible code using "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "from __future__ import unicode_literals"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", which previously would cause string literal field names to raise a TypeError in Python 2."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "Allow dtype field names to be unicode in Python 2"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "This allows object arrays of symbolic types, which override "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "=="
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " and other operators to return expressions, to be compared elementwise with "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "np.equal(a, b, dtype=object)"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": "."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "Comparison ufuncs accept ``dtype=object``, overriding the default ``bool``"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Up until now, to perform a stable sort on the data, the user must do:"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": ">>> np.sort([5, 2, 6, 2, 1], kind='mergesort')\n[1, 2, 2, 5, 6]"
                },
                "type": "BlockVerbatim"
              }
            ]
          },
          "type": "BlockQuote"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "because merge sort is the only stable sorting algorithm available in NumPy. However, having kind='mergesort' does not make it explicit that the user wants to perform a stable sort thus harming the readability."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "This change allows the user to specify kind='stable' thus clarifying the intent."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "``sort`` functions accept ``kind='stable'``"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "When ufuncs perform accumulation they no longer make temporary copies because of the overlap between input an output, that is, the next element accumulated is added before the accumulated result is stored in its place, hence the overlap is safe. Avoiding the copy results in faster execution."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "Do not make temporary copies for in-place accumulation"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Like other functions in "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "linalg"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "matrix_power"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " can now deal with arrays of dimension larger than 2, which are treated as stacks of matrices. As part of the change, to further improve consistency, the name of the first argument has been changed to "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "a"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " (from "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "M"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": "), and the exceptions for non-square matrices have been changed to "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "LinAlgError"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " (from "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "ValueError"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ")."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "``linalg.matrix_power`` can now handle stacks of matrices"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": [
                    "permutation"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " uses the fast path in "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "random.shuffle"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " for all input array dimensions.  Previously the fast path was only used for 1-d arrays."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "Increased performance in ``random.permutation`` for multidimensional arrays"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "One can control over which axes a generalized ufunc operates by passing in an "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "axes"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " argument, a list of tuples with indices of particular axes.  For instance, for a signature of "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "(i,j),(j,k)->(i,k)"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " appropriate for matrix multiplication, the base elements are two-dimensional matrices and these are taken to be stored in the two last axes of each argument.  The corresponding axes keyword would be "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "[(-2, -1), (-2, -1), (-2, -1)]"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ". If one wanted to use leading dimensions instead, one would pass in "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "[(0, 1), (0, 1), (0, 1)]"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": "."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "For simplicity, for generalized ufuncs that operate on 1-dimensional arrays (vectors), a single integer is accepted instead of a single-element tuple, and for generalized ufuncs for which all outputs are scalars, the (empty) output tuples can be omitted.  Hence, for a signature of "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "(i),(i)->()"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " appropriate for an inner product, one could pass in "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "axes=[0, 0]"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " to indicate that the vectors are stored in the first dimensions of the two inputs arguments."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "As a short-cut for generalized ufuncs that are similar to reductions, i.e., that act on a single, shared core dimension such as the inner product example above, one can pass an "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "axis"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " argument. This is equivalent to passing in "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "axes"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " with identical entries for all arguments with that core dimension (e.g., for the example above, "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "axes=[(axis,), (axis,)]"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ")."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Furthermore, like for reductions, for generalized ufuncs that have inputs that all have the same number of core dimensions and outputs with no core dimension, one can pass in "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "keepdims"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " to leave a dimension with size 1 in the outputs, thus allowing proper broadcasting against the original inputs. The location of the extra dimension can be controlled with "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "axes"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ". For instance, for the inner-product example, "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "keepdims=True, axes=[-2, -2, -2]"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " would act on the inner-product example, "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "keepdims=True, axis=-2"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " would act on the one-but-last dimension of the input arguments, and leave a size 1 dimension in that place in the output."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "Generalized ufuncs now accept ``axes``, ``axis`` and ``keepdims`` arguments"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Previously printing float128 values was buggy on ppc, since the special double-double floating-point-format on these systems was not accounted for. float128s now print with correct rounding and uniqueness."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Warning to ppc users: You should upgrade glibc if it is version <=2.23, especially if using float128. On ppc, glibc's malloc in these version often misaligns allocated memory which can crash numpy when using float128 values."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "float128 values now print correctly on ppc systems"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "When used on multidimensional arrays, "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "argsort"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "argmin"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "argmax"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", and "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "argpartition"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " return arrays that are difficult to use as indices. "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "take_along_axis"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " provides an easy way to use these indices to lookup values within an array, so that::      "
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": "np.take_along_axis(a, np.argsort(a, axis=axis), axis=axis)"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "is the same as::      "
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": "np.sort(a, axis=axis)"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": [
                    "np.put_along_axis"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " acts as the dual operation for writing to these indices within an array."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "New ``np.take_along_axis`` and ``np.put_along_axis`` functions"
    }
  ],
  "example_section_data": {
    "children": [],
    "title": null
  },
  "item_file": null,
  "item_line": null,
  "item_type": null,
  "ordered_sections": [],
  "references": null,
  "see_also": [],
  "signature": {
    "value": null
  }
}