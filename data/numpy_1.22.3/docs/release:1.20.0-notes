{
  "aliases": [],
  "arbitrary": [
    {
      "children": [
        {
          "data": {
            "argument": "numpy",
            "content": "",
            "name": "currentmodule",
            "options": []
          },
          "type": "BlockDirective"
        }
      ],
      "title": null
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "This NumPy release is the largest so made to date, some 684 PRs contributed by 184 people have been merged. See the list of highlights below for more details. The Python versions supported for this release are 3.7-3.9, support for Python 3.6 has been dropped. Highlights are"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Annotations for NumPy functions. This work is ongoing and improvements can   be expected pending feedback from users."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Wider use of SIMD to increase execution speed of ufuncs. Much work has been   done in introducing universal functions that will ease use of modern   features across different hardware platforms. This work is ongoing."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Preliminary work in changing the dtype and casting implementations in order to   provide an easier path to extending dtypes. This work is ongoing but enough   has been done to allow experimentation and feedback."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Extensive documentation improvements comprising some 185 PR merges. This work   is ongoing and part of the larger project to improve NumPy's online presence   and usefulness to new users."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Further cleanups related to removing Python 2.7. This improves code   readability and removes technical debt."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Preliminary support for the upcoming Cython 3.0."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              }
            ]
          },
          "type": "BulletList"
        }
      ],
      "title": "NumPy 1.20.0 Release Notes"
    },
    {
      "children": [],
      "title": "New functions"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "The new function differs from "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "shuffle"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " and "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "permutation"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " in that the subarrays indexed by an axis are permuted rather than the axis being treated as a separate 1-D array for every combination of the other indexes. For example, it is now possible to permute the rows or columns of a 2-D array."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "("
                },
                "type": "Words"
              },
              {
                "data": {
                  "target": "https://github.com/numpy/numpy/pull/15121",
                  "value": "gh-15121"
                },
                "type": "ExternalLink"
              },
              {
                "data": {
                  "value": ")"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "The random.Generator class has a new ``permuted`` function."
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "api",
                    "module": "numpy",
                    "path": "numpy.lib.stride_tricks.sliding_window_view",
                    "version": "*"
                  },
                  "value": "numpy.lib.stride_tricks.sliding_window_view"
                },
                "type": "Link"
              },
              {
                "data": {
                  "value": " constructs views on numpy arrays that offer a sliding or moving window access to the array. This allows for the simple implementation of certain algorithms, such as running means."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "("
                },
                "type": "Words"
              },
              {
                "data": {
                  "target": "https://github.com/numpy/numpy/pull/17394",
                  "value": "gh-17394"
                },
                "type": "ExternalLink"
              },
              {
                "data": {
                  "value": ")"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "``sliding_window_view`` provides a sliding window view for numpy arrays"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "api",
                    "module": "numpy",
                    "path": "numpy.broadcast_shapes",
                    "version": "*"
                  },
                  "value": "broadcast_shapes"
                },
                "type": "Link"
              },
              {
                "data": {
                  "value": " gets the resulting shape from broadcasting the given shape tuples against each other."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": ">>> np.broadcast_shapes((1, 2), (3, 1))\n(3, 2)\n\n>>> np.broadcast_shapes(2, (3, 1))\n(3, 2)\n\n>>> np.broadcast_shapes((6, 7), (5, 6, 1), (7,), (5, 1, 7))\n(5, 6, 7)"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "("
                },
                "type": "Words"
              },
              {
                "data": {
                  "target": "https://github.com/numpy/numpy/pull/17535",
                  "value": "gh-17535"
                },
                "type": "ExternalLink"
              },
              {
                "data": {
                  "value": ")"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "`numpy.broadcast_shapes` is a new user-facing function"
    },
    {
      "children": [],
      "title": "Deprecations"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "For a long time, "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "np.int"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " has been an alias of the builtin "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "int"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ". This is repeatedly a cause of confusion for newcomers, and existed mainly for historic reasons."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "These aliases have been deprecated. The table below shows the full list of deprecated aliases, along with their exact meaning. Replacing uses of items in the first column with the contents of the second column will work identically and silence the deprecation warning."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "The third column lists alternative NumPy names which may occasionally be preferential. See also "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "basics.types"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " for additional details."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "=================  ============  ================================================================== Deprecated name    Identical to  NumPy scalar type names =================  ============  ================================================================== "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "numpy.bool"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": "     "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "bool"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": "      "
                },
                "type": "Words"
              },
              {
                "data": {
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "api",
                    "module": "numpy",
                    "path": "numpy.bool_",
                    "version": "*"
                  },
                  "value": "numpy.bool_"
                },
                "type": "Link"
              },
              {
                "data": {
                  "value": " "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "numpy.int"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": "      "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "int"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": "       "
                },
                "type": "Words"
              },
              {
                "data": {
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "api",
                    "module": "numpy",
                    "path": "numpy.int64",
                    "version": "*"
                  },
                  "value": "numpy.int_"
                },
                "type": "Link"
              },
              {
                "data": {
                  "value": " (default), "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "numpy.int64"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", or "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "numpy.int32"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "numpy.float"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": "    "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "float"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": "     "
                },
                "type": "Words"
              },
              {
                "data": {
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "api",
                    "module": "numpy",
                    "path": "numpy.float64",
                    "version": "*"
                  },
                  "value": "numpy.float64"
                },
                "type": "Link"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "api",
                    "module": "numpy",
                    "path": "numpy.float64",
                    "version": "*"
                  },
                  "value": "numpy.float_"
                },
                "type": "Link"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "api",
                    "module": "numpy",
                    "path": "numpy.float64",
                    "version": "*"
                  },
                  "value": "numpy.double"
                },
                "type": "Link"
              },
              {
                "data": {
                  "value": " (equivalent) "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "numpy.complex"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": "  "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "complex"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": "   "
                },
                "type": "Words"
              },
              {
                "data": {
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "api",
                    "module": "numpy",
                    "path": "numpy.complex128",
                    "version": "*"
                  },
                  "value": "numpy.complex128"
                },
                "type": "Link"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "api",
                    "module": "numpy",
                    "path": "numpy.complex128",
                    "version": "*"
                  },
                  "value": "numpy.complex_"
                },
                "type": "Link"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "api",
                    "module": "numpy",
                    "path": "numpy.complex128",
                    "version": "*"
                  },
                  "value": "numpy.cdouble"
                },
                "type": "Link"
              },
              {
                "data": {
                  "value": " (equivalent) "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "numpy.object"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": "   "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "object"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": "    "
                },
                "type": "Words"
              },
              {
                "data": {
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "api",
                    "module": "numpy",
                    "path": "numpy.object_",
                    "version": "*"
                  },
                  "value": "numpy.object_"
                },
                "type": "Link"
              },
              {
                "data": {
                  "value": " "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "numpy.str"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": "      "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "str"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": "       "
                },
                "type": "Words"
              },
              {
                "data": {
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "api",
                    "module": "numpy",
                    "path": "numpy.str_",
                    "version": "*"
                  },
                  "value": "numpy.str_"
                },
                "type": "Link"
              },
              {
                "data": {
                  "value": " "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "numpy.long"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": "     "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "int"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": "       "
                },
                "type": "Words"
              },
              {
                "data": {
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "api",
                    "module": "numpy",
                    "path": "numpy.int64",
                    "version": "*"
                  },
                  "value": "numpy.int_"
                },
                "type": "Link"
              },
              {
                "data": {
                  "value": " (C "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "long"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": "), "
                },
                "type": "Words"
              },
              {
                "data": {
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "api",
                    "module": "numpy",
                    "path": "numpy.longlong",
                    "version": "*"
                  },
                  "value": "numpy.longlong"
                },
                "type": "Link"
              },
              {
                "data": {
                  "value": " (largest integer type) "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "numpy.unicode"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": "  "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "str"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": "       "
                },
                "type": "Words"
              },
              {
                "data": {
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "api",
                    "module": "numpy",
                    "path": "numpy.str_",
                    "version": "*"
                  },
                  "value": "numpy.unicode_"
                },
                "type": "Link"
              },
              {
                "data": {
                  "value": " =================  ============  =================================================================="
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "To give a clear guideline for the vast majority of cases, for the types "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "bool"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "object"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "str"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " (and "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "unicode"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ") using the plain version is shorter and clear, and generally a good replacement. For "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "float"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " and "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "complex"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " you can use "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "float64"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " and "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "complex128"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " if you wish to be more explicit about the precision."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "For "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "np.int"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " a direct replacement with "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "np.int_"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " or "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "int"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " is also good and will not change behavior, but the precision will continue to depend on the computer and operating system. If you want to be more explicit and review the current use, you have the following alternatives:"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": [
                              "np.int64"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " or "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "np.int32"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " to specify the precision exactly.   This ensures that results cannot depend on the computer or operating system."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": [
                              "np.int_"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " or "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "int"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " (the default), but be aware that it depends on   the computer and operating system."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "The C types: "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "np.cint"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " (int), "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "np.int_"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " (long), "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "np.longlong"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": "."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": [
                              "np.intp"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " which is 32bit on 32bit machines 64bit on 64bit machines.   This can be the best type to use for indexing."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              }
            ]
          },
          "type": "BulletList"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "When used with "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "np.dtype(...)"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " or "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "dtype=..."
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " changing it to the NumPy name as mentioned above will have no effect on the output. If used as a scalar with::      "
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": "np.float(123)"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "changing it can subtly change the result.  In this case, the Python version "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "float(123)"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " or "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "int(12.)"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " is normally preferable, although the NumPy version may be useful for consistency with NumPy arrays (for example, NumPy behaves differently for things like division by zero)."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "("
                },
                "type": "Words"
              },
              {
                "data": {
                  "target": "https://github.com/numpy/numpy/pull/14882",
                  "value": "gh-14882"
                },
                "type": "ExternalLink"
              },
              {
                "data": {
                  "value": ")"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "Using the aliases of builtin types like ``np.int`` is deprecated"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Previously, this was an alias for passing "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "shape=()"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ". This deprecation is emitted by "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "PyArray_IntpConverter"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " in the C API. If your API is intended to support passing "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "None"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", then you should check for "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "None"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " prior to invoking the converter, so as to be able to distinguish "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "None"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " and "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "()"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": "."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "("
                },
                "type": "Words"
              },
              {
                "data": {
                  "target": "https://github.com/numpy/numpy/pull/15886",
                  "value": "gh-15886"
                },
                "type": "ExternalLink"
              },
              {
                "data": {
                  "value": ")"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "Passing ``shape=None`` to functions with a non-optional shape argument is deprecated"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "In the future, NumPy will raise an IndexError when an integer array index contains out of bound values even if a non-indexed dimension is of length 0. This will now emit a DeprecationWarning. This can happen when the array is previously empty, or an empty slice is involved::      "
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": "arr1 = np.zeros((5, 0))\narr1[[20]]\narr2 = np.zeros((5, 5))\narr2[[20], :0]"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Previously the non-empty index "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "[20]"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " was not checked for correctness. It will now be checked causing a deprecation warning which will be turned into an error. This also applies to assignments."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "("
                },
                "type": "Words"
              },
              {
                "data": {
                  "target": "https://github.com/numpy/numpy/pull/15900",
                  "value": "gh-15900"
                },
                "type": "ExternalLink"
              },
              {
                "data": {
                  "value": ")"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "Indexing errors will be reported even when index result is empty"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Inexact and case insensitive matches for "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "mode"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " and "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "searchside"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " were valid inputs earlier and will give a DeprecationWarning now.  For example, below are some example usages which are now deprecated and will give a DeprecationWarning::      "
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": "import numpy as np\narr = np.array([[3, 6, 6], [4, 5, 1]])\n# mode: inexact match\nnp.ravel_multi_index(arr, (7, 6), mode=\"clap\")  # should be \"clip\"\n# searchside: inexact match\nnp.searchsorted(arr[0], 4, side='random')  # should be \"right\""
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "("
                },
                "type": "Words"
              },
              {
                "data": {
                  "target": "https://github.com/numpy/numpy/pull/16056",
                  "value": "gh-16056"
                },
                "type": "ExternalLink"
              },
              {
                "data": {
                  "value": ")"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "Inexact matches for ``mode`` and ``searchside`` are deprecated"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "The module "
                },
                "type": "Words"
              },
              {
                "data": {
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "api",
                    "module": "numpy",
                    "path": "numpy.dual",
                    "version": "*"
                  },
                  "value": "numpy.dual"
                },
                "type": "Link"
              },
              {
                "data": {
                  "value": " is deprecated.  Instead of importing functions from "
                },
                "type": "Words"
              },
              {
                "data": {
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "api",
                    "module": "numpy",
                    "path": "numpy.dual",
                    "version": "*"
                  },
                  "value": "numpy.dual"
                },
                "type": "Link"
              },
              {
                "data": {
                  "value": ", the functions should be imported directly from NumPy or SciPy."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "("
                },
                "type": "Words"
              },
              {
                "data": {
                  "target": "https://github.com/numpy/numpy/pull/16156",
                  "value": "gh-16156"
                },
                "type": "ExternalLink"
              },
              {
                "data": {
                  "value": ")"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "Deprecation of `numpy.dual`"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": [
                    "np.matrix"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " use with "
                },
                "type": "Words"
              },
              {
                "data": {
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "api",
                    "module": "numpy",
                    "path": "numpy.outer",
                    "version": "*"
                  },
                  "value": "outer"
                },
                "type": "Link"
              },
              {
                "data": {
                  "value": " or generic ufunc outer calls such as "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "numpy.add.outer"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ". Previously, matrix was converted to an array here. This will not be done in the future requiring a manual conversion to arrays."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "("
                },
                "type": "Words"
              },
              {
                "data": {
                  "target": "https://github.com/numpy/numpy/pull/16232",
                  "value": "gh-16232"
                },
                "type": "ExternalLink"
              },
              {
                "data": {
                  "value": ")"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "``outer`` and ``ufunc.outer`` deprecated for matrix"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "The remaining numeric-style type codes "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "Bytes0"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "Str0"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "Uint32"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "Uint64"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", and "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "Datetime64"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " have been deprecated.  The lower-case variants should be used instead.  For bytes and string "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "\"S\""
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " and "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "\"U\""
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " are further alternatives."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "("
                },
                "type": "Words"
              },
              {
                "data": {
                  "target": "https://github.com/numpy/numpy/pull/16554",
                  "value": "gh-16554"
                },
                "type": "ExternalLink"
              },
              {
                "data": {
                  "value": ")"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "Further Numeric Style types Deprecated"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "The documentation has warned against using this function since NumPy 1.8. Use "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "next(it)"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " instead of "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "it.ndincr()"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": "."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "("
                },
                "type": "Words"
              },
              {
                "data": {
                  "target": "https://github.com/numpy/numpy/pull/17233",
                  "value": "gh-17233"
                },
                "type": "ExternalLink"
              },
              {
                "data": {
                  "value": ")"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "The ``ndincr`` method of ``ndindex`` is deprecated"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Objects which define one of the protocols "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "__array__"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "__array_interface__"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", or "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "__array_struct__"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " but are not sequences (usually defined by having a "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "__len__"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " and "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "__getitem__"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ") will behave differently during array-coercion in the future."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "When nested inside sequences, such as "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "np.array([array_like])"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", these were handled as a single Python object rather than an array. In the future they will behave identically to::      "
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": "np.array([np.array(array_like)])"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "This change should only have an effect if "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "np.array(array_like)"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " is not 0-D. The solution to this warning may depend on the object:"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Some array-likes may expect the new behaviour, and users can ignore the   warning.  The object can choose to expose the sequence protocol to opt-in   to the new behaviour."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "For example, "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "shapely"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " will allow conversion to an array-like using   "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "line.coords"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " rather than "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "np.asarray(line)"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": ". Users may work around   the warning, or use the new convention when it becomes available."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              }
            ]
          },
          "type": "BulletList"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Unfortunately, using the new behaviour can only be achieved by calling "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "np.array(array_like)"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": "."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "If you wish to ensure that the old behaviour remains unchanged, please create an object array and then fill it explicitly, for example::      "
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": "arr = np.empty(3, dtype=object)\narr[:] = [array_like1, array_like2, array_like3]"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "This will ensure NumPy knows to not enter the array-like and use it as a object instead."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "("
                },
                "type": "Words"
              },
              {
                "data": {
                  "target": "https://github.com/numpy/numpy/pull/17973",
                  "value": "gh-17973"
                },
                "type": "ExternalLink"
              },
              {
                "data": {
                  "value": ")"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "ArrayLike objects which do not define ``__len__`` and ``__getitem__``"
    },
    {
      "children": [],
      "title": "Future Changes"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Array creation and casting using "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "np.array(arr, dtype)"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " and "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "arr.astype(dtype)"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " will use different logic when "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "dtype"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " is a subarray dtype such as "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "np.dtype(\"(2)i,\")"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": "."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "For such a "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "dtype"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " the following behaviour is true::      "
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": "res = np.array(arr, dtype)\n\nres.dtype is not dtype\nres.dtype is dtype.base\nres.shape == arr.shape + dtype.shape"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "But "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "res"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " is filled using the logic::      "
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": "res = np.empty(arr.shape + dtype.shape, dtype=dtype.base)\nres[...] = arr"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "which uses incorrect broadcasting (and often leads to an error). In the future, this will instead cast each element individually, leading to the same result as::      "
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": "res = np.array(arr, dtype=np.dtype([\"f\", dtype]))[\"f\"]"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Which can normally be used to opt-in to the new behaviour."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "This change does not affect "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "np.array(list, dtype=\"(2)i,\")"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " unless the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "list"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " itself includes at least one array.  In particular, the behaviour is unchanged for a list of tuples."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "("
                },
                "type": "Words"
              },
              {
                "data": {
                  "target": "https://github.com/numpy/numpy/pull/17596",
                  "value": "gh-17596"
                },
                "type": "ExternalLink"
              },
              {
                "data": {
                  "value": ")"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "Arrays cannot be using subarray dtypes"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "The deprecation of numeric style type-codes "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "np.dtype(\"Complex64\")"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": "   (with upper case spelling), is expired.  "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "\"Complex64\""
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " corresponded to   "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "\"complex128\""
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " and "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "\"Complex32\""
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " corresponded to "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "\"complex64\""
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": "."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "The deprecation of "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "np.sctypeNA"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " and "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "np.typeNA"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " is expired. Both   have been removed from the public API. Use "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "np.typeDict"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " instead."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  },
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "("
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "target": "https://github.com/numpy/numpy/pull/16554",
                            "value": "gh-16554"
                          },
                          "type": "ExternalLink"
                        },
                        {
                          "data": {
                            "value": ")"
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "The 14-year deprecation of "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "np.ctypeslib.ctypes_load_library"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " is expired.   Use "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "~numpy.ctypeslib.load_library"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " instead, which is identical."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  },
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "("
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "target": "https://github.com/numpy/numpy/pull/17116",
                            "value": "gh-17116"
                          },
                          "type": "ExternalLink"
                        },
                        {
                          "data": {
                            "value": ")"
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              }
            ]
          },
          "type": "BulletList"
        }
      ],
      "title": "Expired deprecations"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "In accordance with NEP 32, the financial functions are removed from NumPy 1.20. The functions that have been removed are "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "fv"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "ipmt"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "irr"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "mirr"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "nper"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "npv"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "pmt"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "ppmt"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "pv"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", and "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "rate"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ".  These functions are available in the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "target": "https://pypi.org/project/numpy-financial",
                  "value": "numpy_financial"
                },
                "type": "ExternalLink"
              },
              {
                "data": {
                  "value": " library."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "("
                },
                "type": "Words"
              },
              {
                "data": {
                  "target": "https://github.com/numpy/numpy/pull/17067",
                  "value": "gh-17067"
                },
                "type": "ExternalLink"
              },
              {
                "data": {
                  "value": ")"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "Financial functions removed"
    },
    {
      "children": [],
      "title": "Compatibility notes"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "NumPy dtypes are not direct instances of "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "np.dtype"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " anymore.  Code that may have used "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "type(dtype) is np.dtype"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " will always return "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "False"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " and must be updated to use the correct version "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "isinstance(dtype, np.dtype)"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": "."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "This change also affects the C-side macro "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "PyArray_DescrCheck"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " if compiled against a NumPy older than 1.16.6. If code uses this macro and wishes to compile against an older version of NumPy, it must replace the macro (see also "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "C API changes"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " section)."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "``isinstance(dtype, np.dtype)`` and not ``type(dtype) is not np.dtype``"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "When "
                },
                "type": "Words"
              },
              {
                "data": {
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "api",
                    "module": "numpy",
                    "path": "numpy.concatenate",
                    "version": "*"
                  },
                  "value": "concatenate"
                },
                "type": "Link"
              },
              {
                "data": {
                  "value": " is called with "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "axis=None"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", the flattened arrays were cast with "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "unsafe"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ". Any other axis choice uses \"same kind\". That different default has been deprecated and \"same kind\" casting will be used instead. The new "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "casting"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " keyword argument can be used to retain the old behaviour."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "("
                },
                "type": "Words"
              },
              {
                "data": {
                  "target": "https://github.com/numpy/numpy/pull/16134",
                  "value": "gh-16134"
                },
                "type": "ExternalLink"
              },
              {
                "data": {
                  "value": ")"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "Same kind casting in concatenate with ``axis=None``"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "When creating or assigning to arrays, in all relevant cases NumPy scalars will now be cast identically to NumPy arrays.  In particular this changes the behaviour in some cases which previously raised an error::      "
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": "np.array([np.float64(np.nan)], dtype=np.int64)"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "will succeed and return an undefined result (usually the smallest possible integer).  This also affects assignments::      "
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": "arr[0] = np.float64(np.nan)"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "At this time, NumPy retains the behaviour for::      "
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": "np.array(np.float64(np.nan), dtype=np.int64)"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "The above changes do not affect Python scalars::      "
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": "np.array([float(\"NaN\")], dtype=np.int64)"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "remains unaffected ("
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "np.nan"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " is a Python "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "float"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", not a NumPy one). Unlike signed integers, unsigned integers do not retain this special case, since they always behaved more like casting. The following code stops raising an error::      "
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": "np.array([np.float64(np.nan)], dtype=np.uint64)"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "To avoid backward compatibility issues, at this time assignment from "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "datetime64"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " scalar to strings of too short length remains supported. This means that "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "np.asarray(np.datetime64(\"2020-10-10\"), dtype=\"S5\")"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " succeeds now, when it failed before.  In the long term this may be deprecated or the unsafe cast may be allowed generally to make assignment of arrays and scalars behave consistently."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "NumPy Scalars are cast when assigned to arrays"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "When strings and other types are mixed, such as::      "
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": "np.array([\"string\", np.float64(3.)], dtype=\"S\")"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "The results will change, which may lead to string dtypes with longer strings in some cases.  In particularly, if "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "dtype=\"S\""
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " is not provided any numerical value will lead to a string results long enough to hold all possible numerical values. (e.g. \"S32\" for floats).  Note that you should always provide "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "dtype=\"S\""
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " when converting non-strings to strings."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "If "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "dtype=\"S\""
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " is provided the results will be largely identical to before, but NumPy scalars (not a Python float like "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "1.0"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": "), will still enforce a uniform string length::      "
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": "np.array([np.float64(3.)], dtype=\"S\")  # gives \"S32\"\nnp.array([3.0], dtype=\"S\")  # gives \"S3\""
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Previously the first version gave the same result as the second."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "Array coercion changes when Strings and other types are mixed"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Array coercion has been restructured.  In general, this should not affect users.  In extremely rare corner cases where array-likes are nested::      "
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": "np.array([array_like1])"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Things will now be more consistent with::      "
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": "np.array([np.array(array_like1)])"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "This can subtly change output for some badly defined array-likes. One example for this are array-like objects which are not also sequences of matching shape. In NumPy 1.20, a warning will be given when an array-like is not also a sequence (but behaviour remains identical, see deprecations). If an array like is also a sequence (defines "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "__getitem__"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " and "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "__len__"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ") NumPy will now only use the result given by "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "__array__"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "__array_interface__"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", or "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "__array_struct__"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ". This will result in differences when the (nested) sequence describes a different shape."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "("
                },
                "type": "Words"
              },
              {
                "data": {
                  "target": "https://github.com/numpy/numpy/pull/16200",
                  "value": "gh-16200"
                },
                "type": "ExternalLink"
              },
              {
                "data": {
                  "value": ")"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "Array coercion restructure"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "In NumPy 1.17 "
                },
                "type": "Words"
              },
              {
                "data": {
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "api",
                    "module": "numpy",
                    "path": "numpy.broadcast_arrays",
                    "version": "*"
                  },
                  "value": "numpy.broadcast_arrays"
                },
                "type": "Link"
              },
              {
                "data": {
                  "value": " started warning when the resulting array was written to. This warning was skipped when the array was used through the buffer interface (e.g. "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "memoryview(arr)"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": "). The same thing will now occur for the two protocols "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "__array_interface__"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", and "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "__array_struct__"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " returning read-only buffers instead of giving a warning."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "("
                },
                "type": "Words"
              },
              {
                "data": {
                  "target": "https://github.com/numpy/numpy/pull/16350",
                  "value": "gh-16350"
                },
                "type": "ExternalLink"
              },
              {
                "data": {
                  "value": ")"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "Writing to the result of `numpy.broadcast_arrays` will export readonly buffers"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "To stay in sync with the deprecation for "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "np.dtype(\"Complex64\")"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " and other numeric-style (capital case) types.  These were removed from "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "np.sctypeDict"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " and "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "np.typeDict"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ".  You should use the lower case versions instead.  Note that "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "\"Complex64\""
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " corresponds to "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "\"complex128\""
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " and "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "\"Complex32\""
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " corresponds to "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "\"complex64\""
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ".  The numpy style (new) versions, denote the full size and not the size of the real/imaginary part."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "("
                },
                "type": "Words"
              },
              {
                "data": {
                  "target": "https://github.com/numpy/numpy/pull/16554",
                  "value": "gh-16554"
                },
                "type": "ExternalLink"
              },
              {
                "data": {
                  "value": ")"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "Numeric-style type names have been removed from type dictionaries"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "The previous behavior was to fall back to addition and add the two arrays, which was thought to be unexpected behavior for a concatenation function."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "("
                },
                "type": "Words"
              },
              {
                "data": {
                  "target": "https://github.com/numpy/numpy/pull/16570",
                  "value": "gh-16570"
                },
                "type": "ExternalLink"
              },
              {
                "data": {
                  "value": ")"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "The ``operator.concat`` function now raises TypeError for array arguments"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "An abstract property "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "nickname"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " has been removed from  "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "ABCPolyBase"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " as it was no longer used in the derived convenience classes. This may affect users who have derived classes from "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "ABCPolyBase"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " and overridden the methods for representation and display, e.g. "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "__str__"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "__repr__"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "_repr_latex"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", etc."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "("
                },
                "type": "Words"
              },
              {
                "data": {
                  "target": "https://github.com/numpy/numpy/pull/16589",
                  "value": "gh-16589"
                },
                "type": "ExternalLink"
              },
              {
                "data": {
                  "value": ")"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "``nickname`` attribute removed from ABCPolyBase"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Float and timedelta promotion consistently raises a TypeError. "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "np.promote_types(\"float32\", \"m8\")"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " aligns with "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "np.promote_types(\"m8\", \"float32\")"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " now and both raise a TypeError. Previously, "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "np.promote_types(\"float32\", \"m8\")"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " returned "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "\"m8\""
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " which was considered a bug."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Uint64 and timedelta promotion consistently raises a TypeError. "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "np.promote_types(\"uint64\", \"m8\")"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " aligns with "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "np.promote_types(\"m8\", \"uint64\")"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " now and both raise a TypeError. Previously, "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "np.promote_types(\"uint64\", \"m8\")"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " returned "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "\"m8\""
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " which was considered a bug."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "("
                },
                "type": "Words"
              },
              {
                "data": {
                  "target": "https://github.com/numpy/numpy/pull/16592",
                  "value": "gh-16592"
                },
                "type": "ExternalLink"
              },
              {
                "data": {
                  "value": ")"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "``float->timedelta`` and ``uint64->timedelta`` promotion will raise a TypeError"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Previously, "
                },
                "type": "Words"
              },
              {
                "data": {
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "api",
                    "module": "numpy",
                    "path": "numpy.genfromtxt",
                    "version": "*"
                  },
                  "value": "numpy.genfromtxt"
                },
                "type": "Link"
              },
              {
                "data": {
                  "value": " failed to unpack if it was called with "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "unpack=True"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " and a structured datatype was passed to the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "dtype"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " argument (or "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "dtype=None"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " was passed and a structured datatype was inferred). For example::      "
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": ">>> data = StringIO(\"21 58.0\\n35 72.0\")\n>>> np.genfromtxt(data, dtype=None, unpack=True)\narray([(21, 58.), (35, 72.)], dtype=[('f0', '<i8'), ('f1', '<f8')])"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Structured arrays will now correctly unpack into a list of arrays, one for each column::      "
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": ">>> np.genfromtxt(data, dtype=None, unpack=True)\n[array([21, 35]), array([58., 72.])]"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "("
                },
                "type": "Words"
              },
              {
                "data": {
                  "target": "https://github.com/numpy/numpy/pull/16650",
                  "value": "gh-16650"
                },
                "type": "ExternalLink"
              },
              {
                "data": {
                  "value": ")"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "``numpy.genfromtxt`` now correctly unpacks structured arrays"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Previously, "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "np.mgrid[np.float32(0.1):np.float32(0.35):np.float32(0.1),]"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " and "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "np.r_[0:10:np.complex64(3j)]"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " failed to return meaningful output. This bug potentially affects "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "~numpy.mgrid"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "~numpy.ogrid"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "~numpy.r_"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": ", and "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "~numpy.c_"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " when an input with dtype other than the default "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "float64"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " and "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "complex128"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " and equivalent Python types were used. The methods have been fixed to handle varying precision correctly."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "("
                },
                "type": "Words"
              },
              {
                "data": {
                  "target": "https://github.com/numpy/numpy/pull/16815",
                  "value": "gh-16815"
                },
                "type": "ExternalLink"
              },
              {
                "data": {
                  "value": ")"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "``mgrid``, ``r_``, etc. consistently return correct outputs for non-default precision input"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Previously, if a boolean array index matched the size of the indexed array but not the shape, it was incorrectly allowed in some cases. In other cases, it gave an error, but the error was incorrectly a "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "ValueError"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " with a message about broadcasting instead of the correct "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "IndexError"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": "."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "For example, the following used to incorrectly give "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "ValueError: operands\ncould not be broadcast together with shapes (2,2) (1,4)"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ":"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": "np.empty((2, 2))[np.array([[True, False, False, False]])]"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "And the following used to incorrectly return "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "array([], dtype=float64)"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ":"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": "np.empty((2, 2))[np.array([[False, False, False, False]])]"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Both now correctly give "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "IndexError: boolean index did not match indexed\narray along dimension 0; dimension is 2 but corresponding boolean dimension is\n1"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": "."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "("
                },
                "type": "Words"
              },
              {
                "data": {
                  "target": "https://github.com/numpy/numpy/pull/17010",
                  "value": "gh-17010"
                },
                "type": "ExternalLink"
              },
              {
                "data": {
                  "value": ")"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "Boolean array indices with mismatching shapes now properly give ``IndexError``"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "When iterating while casting values, an error may stop the iteration earlier than before. In any case, a failed casting operation always returned undefined, partial results. Those may now be even more undefined and partial. For users of the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "NpyIter"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " C-API such cast errors will now cause the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "iternext()"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " function to return 0 and thus abort iteration. Currently, there is no API to detect such an error directly. It is necessary to check "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "PyErr_Occurred()"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", which may be problematic in combination with "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "NpyIter_Reset"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ". These issues always existed, but new API could be added if required by users."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "("
                },
                "type": "Words"
              },
              {
                "data": {
                  "target": "https://github.com/numpy/numpy/pull/17029",
                  "value": "gh-17029"
                },
                "type": "ExternalLink"
              },
              {
                "data": {
                  "value": ")"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "Casting errors interrupt Iteration"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Some byte strings previously returned by f2py generated code may now be unicode strings. This results from the ongoing Python2 -> Python3 cleanup."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "("
                },
                "type": "Words"
              },
              {
                "data": {
                  "target": "https://github.com/numpy/numpy/pull/17068",
                  "value": "gh-17068"
                },
                "type": "ExternalLink"
              },
              {
                "data": {
                  "value": ")"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "f2py generated code may return unicode instead of byte strings"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "This has been the documented interface for many years, but there was still code that would accept a byte string representation of the pointer address. That code has been removed, passing the address as a byte string will now raise an error."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "("
                },
                "type": "Words"
              },
              {
                "data": {
                  "target": "https://github.com/numpy/numpy/pull/17241",
                  "value": "gh-17241"
                },
                "type": "ExternalLink"
              },
              {
                "data": {
                  "value": ")"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "The first element of the ``__array_interface__[\"data\"]`` tuple  must be an integer"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Previously, constructing an instance of "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "poly1d"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " with all-zero coefficients would cast the coefficients to "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "np.float64"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ". This affected the output dtype of methods which construct "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "poly1d"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " instances internally, such as "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "np.polymul"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": "."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "("
                },
                "type": "Words"
              },
              {
                "data": {
                  "target": "https://github.com/numpy/numpy/pull/17577",
                  "value": "gh-17577"
                },
                "type": "ExternalLink"
              },
              {
                "data": {
                  "value": ")"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "poly1d respects the dtype of all-zero argument"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Uses of Python 2.7 C-API functions have been updated to Python 3 only. Users who need the old version should take it from an older version of NumPy."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "("
                },
                "type": "Words"
              },
              {
                "data": {
                  "target": "https://github.com/numpy/numpy/pull/17580",
                  "value": "gh-17580"
                },
                "type": "ExternalLink"
              },
              {
                "data": {
                  "value": ")"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "The numpy.i file for swig is Python 3 only."
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "In calls using "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "np.array(..., dtype=\"V\")"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "arr.astype(\"V\")"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", and similar a TypeError will now be correctly raised unless all elements have the identical void length. An example for this is::       "
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": "np.array([b\"1\", b\"12\"], dtype=\"V\")"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Which previously returned an array with dtype "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "\"V2\""
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " which cannot represent "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "b\"1\""
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " faithfully."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "("
                },
                "type": "Words"
              },
              {
                "data": {
                  "target": "https://github.com/numpy/numpy/pull/17706",
                  "value": "gh-17706"
                },
                "type": "ExternalLink"
              },
              {
                "data": {
                  "value": ")"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "Void dtype discovery in ``np.array``"
    },
    {
      "children": [],
      "title": "C API changes"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "The "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "PyArray_DescrCheck"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " macro has been updated since NumPy 1.16.6 to be::      "
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": "#define PyArray_DescrCheck(op) PyObject_TypeCheck(op, &PyArrayDescr_Type)"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Starting with NumPy 1.20 code that is compiled against an earlier version will be API incompatible with NumPy 1.20. The fix is to either compile against 1.16.6 (if the NumPy 1.16 release is the oldest release you wish to support), or manually inline the macro by replacing it with the new definition::      "
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": "PyObject_TypeCheck(op, &PyArrayDescr_Type)"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "which is compatible with all NumPy versions."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "The ``PyArray_DescrCheck`` macro is modified"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "The size of the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "PyArrayObject"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " and "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "PyVoidScalarObject"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " structures have changed.  The following header definition has been removed::      "
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": "#define NPY_SIZEOF_PYARRAYOBJECT (sizeof(PyArrayObject_fields))"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "since the size must not be considered a compile time constant: it will change for different runtime versions of NumPy."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "The most likely relevant use are potential subclasses written in C which will have to be recompiled and should be updated.  Please see the documentation for "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "PyArrayObject"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " for more details and contact the NumPy developers if you are affected by this change."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "NumPy will attempt to give a graceful error but a program expecting a fixed structure size may have undefined behaviour and likely crash."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "("
                },
                "type": "Words"
              },
              {
                "data": {
                  "target": "https://github.com/numpy/numpy/pull/16938",
                  "value": "gh-16938"
                },
                "type": "ExternalLink"
              },
              {
                "data": {
                  "value": ")"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "Size of ``np.ndarray`` and ``np.void_`` changed"
    },
    {
      "children": [],
      "title": "New Features"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "The keyword argument "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "where"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " is added and allows to only consider specified elements or subaxes from an array in the Boolean evaluation of "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "all"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " and "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "any"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ". This new keyword is available to the functions "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "all"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " and "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "any"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " both via "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "numpy"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " directly or in the methods of "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "numpy.ndarray"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": "."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Any broadcastable Boolean array or a scalar can be set as "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "where"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ". It defaults to "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "True"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " to evaluate the functions for all elements in an array if "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "where"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " is not set by the user. Examples are given in the documentation of the functions."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "``where`` keyword argument for ``numpy.all`` and ``numpy.any`` functions"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "The keyword argument "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "where"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " is added and allows to limit the scope in the calculation of "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "mean"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "std"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " and "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "var"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " to only a subset of elements. It is available both via "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "numpy"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " directly or in the methods of "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "numpy.ndarray"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": "."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Any broadcastable Boolean array or a scalar can be set as "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "where"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ". It defaults to "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "True"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " to evaluate the functions for all elements in an array if "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "where"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " is not set by the user. Examples are given in the documentation of the functions."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "("
                },
                "type": "Words"
              },
              {
                "data": {
                  "target": "https://github.com/numpy/numpy/pull/15852",
                  "value": "gh-15852"
                },
                "type": "ExternalLink"
              },
              {
                "data": {
                  "value": ")"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "``where`` keyword argument for ``numpy`` functions ``mean``, ``std``, ``var``"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "The keyword argument option "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "norm=backward"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " is added as an alias for "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "None"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " and acts as the default option; using it has the direct transforms unscaled and the inverse transforms scaled by "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "1/n"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": "."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Using the new keyword argument option "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "norm=forward"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " has the direct transforms scaled by "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "1/n"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " and the inverse transforms unscaled (i.e. exactly opposite to the default option "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "norm=backward"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ")."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "("
                },
                "type": "Words"
              },
              {
                "data": {
                  "target": "https://github.com/numpy/numpy/pull/16476",
                  "value": "gh-16476"
                },
                "type": "ExternalLink"
              },
              {
                "data": {
                  "value": ")"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "``norm=backward``, ``forward`` keyword options for ``numpy.fft`` functions"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Type annotations have been added for large parts of NumPy. There is also a new "
                },
                "type": "Words"
              },
              {
                "data": {
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "api",
                    "module": "numpy",
                    "path": "numpy.typing",
                    "version": "*"
                  },
                  "value": "numpy.typing"
                },
                "type": "Link"
              },
              {
                "data": {
                  "value": " module that contains useful types for end-users. The currently available types are"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": [
                              "ArrayLike"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": ": for objects that can be coerced to an array"
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": [
                              "DtypeLike"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": ": for objects that can be coerced to a dtype"
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              }
            ]
          },
          "type": "BulletList"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "("
                },
                "type": "Words"
              },
              {
                "data": {
                  "target": "https://github.com/numpy/numpy/pull/16515",
                  "value": "gh-16515"
                },
                "type": "ExternalLink"
              },
              {
                "data": {
                  "value": ")"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "NumPy is now typed"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "The types in "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "numpy.typing"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " can now be imported at runtime. Code like the following will now work:"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": "from numpy.typing import ArrayLike\nx: ArrayLike = [1, 2, 3, 4]"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "("
                },
                "type": "Words"
              },
              {
                "data": {
                  "target": "https://github.com/numpy/numpy/pull/16558",
                  "value": "gh-16558"
                },
                "type": "ExternalLink"
              },
              {
                "data": {
                  "value": ")"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "``numpy.typing`` is accessible at runtime"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Because f2py is released together with NumPy, "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "__f2py_numpy_version__"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " provides a way to track the version f2py used to generate the module."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "("
                },
                "type": "Words"
              },
              {
                "data": {
                  "target": "https://github.com/numpy/numpy/pull/16594",
                  "value": "gh-16594"
                },
                "type": "ExternalLink"
              },
              {
                "data": {
                  "value": ")"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "New ``__f2py_numpy_version__`` attribute for f2py generated modules."
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Currently running mypy with the NumPy stubs configured requires either:"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Installing NumPy"
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Adding the source directory to MYPYPATH and linking to the "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "mypy.ini"
                            ]
                          },
                          "type": "Verbatim"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              }
            ]
          },
          "type": "BulletList"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Both options are somewhat inconvenient, so add a "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "--mypy"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " option to runtests that handles setting things up for you. This will also be useful in the future for any typing codegen since it will ensure the project is built before type checking."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "("
                },
                "type": "Words"
              },
              {
                "data": {
                  "target": "https://github.com/numpy/numpy/pull/17123",
                  "value": "gh-17123"
                },
                "type": "ExternalLink"
              },
              {
                "data": {
                  "value": ")"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "``mypy`` tests can be run via runtests.py"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "api",
                    "module": "numpy",
                    "path": "numpy.distutils",
                    "version": "*"
                  },
                  "value": "distutils"
                },
                "type": "Link"
              },
              {
                "data": {
                  "value": " allows negation of libraries when determining BLAS/LAPACK libraries. This may be used to remove an item from the library resolution phase, i.e. to disallow NetLIB libraries one could do:"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": "NPY_BLAS_ORDER='^blas' NPY_LAPACK_ORDER='^lapack' python setup.py build"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "That will use any of the accelerated libraries instead."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "("
                },
                "type": "Words"
              },
              {
                "data": {
                  "target": "https://github.com/numpy/numpy/pull/17219",
                  "value": "gh-17219"
                },
                "type": "ExternalLink"
              },
              {
                "data": {
                  "value": ")"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "Negation of user defined BLAS/LAPACK detection order"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "It is now possible to pass  "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "-j"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "--cpu-baseline"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "--cpu-dispatch"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " and "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "--disable-optimization"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " flags to ASV build when the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "--bench-compare"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " argument is used."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "("
                },
                "type": "Words"
              },
              {
                "data": {
                  "target": "https://github.com/numpy/numpy/pull/17284",
                  "value": "gh-17284"
                },
                "type": "ExternalLink"
              },
              {
                "data": {
                  "value": ")"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "Allow passing optimizations arguments to asv build"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Support for the nvfortran compiler, a version of pgfortran, has been added."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "("
                },
                "type": "Words"
              },
              {
                "data": {
                  "target": "https://github.com/numpy/numpy/pull/17344",
                  "value": "gh-17344"
                },
                "type": "ExternalLink"
              },
              {
                "data": {
                  "value": ")"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "The NVIDIA HPC SDK nvfortran compiler is now supported"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "The "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "dtype"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " option is now available for "
                },
                "type": "Words"
              },
              {
                "data": {
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "api",
                    "module": "numpy",
                    "path": "numpy.cov",
                    "version": "*"
                  },
                  "value": "numpy.cov"
                },
                "type": "Link"
              },
              {
                "data": {
                  "value": " and "
                },
                "type": "Words"
              },
              {
                "data": {
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "api",
                    "module": "numpy",
                    "path": "numpy.corrcoef",
                    "version": "*"
                  },
                  "value": "numpy.corrcoef"
                },
                "type": "Link"
              },
              {
                "data": {
                  "value": ". It specifies which data-type the returned result should have. By default the functions still return a "
                },
                "type": "Words"
              },
              {
                "data": {
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "api",
                    "module": "numpy",
                    "path": "numpy.float64",
                    "version": "*"
                  },
                  "value": "numpy.float64"
                },
                "type": "Link"
              },
              {
                "data": {
                  "value": " result."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "("
                },
                "type": "Words"
              },
              {
                "data": {
                  "target": "https://github.com/numpy/numpy/pull/17456",
                  "value": "gh-17456"
                },
                "type": "ExternalLink"
              },
              {
                "data": {
                  "value": ")"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "``dtype`` option for ``cov`` and ``corrcoef``"
    },
    {
      "children": [],
      "title": "Improvements"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "The string representation ("
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "__str__"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ") of all six polynomial types in "
                },
                "type": "Words"
              },
              {
                "data": {
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "api",
                    "module": "numpy",
                    "path": "numpy.polynomial",
                    "version": "*"
                  },
                  "value": "numpy.polynomial"
                },
                "type": "Link"
              },
              {
                "data": {
                  "value": " has been updated to give the polynomial as a mathematical expression instead of an array of coefficients. Two package-wide formats for the polynomial expressions are available - one using Unicode characters for superscripts and subscripts, and another using only ASCII characters."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "("
                },
                "type": "Words"
              },
              {
                "data": {
                  "target": "https://github.com/numpy/numpy/pull/15666",
                  "value": "gh-15666"
                },
                "type": "ExternalLink"
              },
              {
                "data": {
                  "value": ")"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "Improved string representation for polynomials (``__str__``)"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Apple no longer supports Accelerate. Remove it."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "("
                },
                "type": "Words"
              },
              {
                "data": {
                  "target": "https://github.com/numpy/numpy/pull/15759",
                  "value": "gh-15759"
                },
                "type": "ExternalLink"
              },
              {
                "data": {
                  "value": ")"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "Remove the Accelerate library as a candidate LAPACK library"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "If elements of an object array have a "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "repr"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " containing new lines, then the wrapped lines will be aligned by column. Notably, this improves the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "repr"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " of nested arrays::      "
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": ">>> np.array([np.eye(2), np.eye(3)], dtype=object)\narray([array([[1., 0.],\n              [0., 1.]]),\n       array([[1., 0., 0.],\n              [0., 1., 0.],\n              [0., 0., 1.]])], dtype=object)"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "("
                },
                "type": "Words"
              },
              {
                "data": {
                  "target": "https://github.com/numpy/numpy/pull/15997",
                  "value": "gh-15997"
                },
                "type": "ExternalLink"
              },
              {
                "data": {
                  "value": ")"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "Object arrays containing multi-line objects have a more readable ``repr``"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Support was added to "
                },
                "type": "Words"
              },
              {
                "data": {
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "api",
                    "module": "numpy",
                    "path": "numpy.concatenate",
                    "version": "*"
                  },
                  "value": "concatenate"
                },
                "type": "Link"
              },
              {
                "data": {
                  "value": " to provide an output "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "dtype"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " and "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "casting"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " using keyword arguments. The "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "dtype"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " argument cannot be provided in conjunction with the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "out"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " one."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "("
                },
                "type": "Words"
              },
              {
                "data": {
                  "target": "https://github.com/numpy/numpy/pull/16134",
                  "value": "gh-16134"
                },
                "type": "ExternalLink"
              },
              {
                "data": {
                  "value": ")"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "Concatenate supports providing an output dtype"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Callback functions in f2py are now thread safe."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "("
                },
                "type": "Words"
              },
              {
                "data": {
                  "target": "https://github.com/numpy/numpy/pull/16519",
                  "value": "gh-16519"
                },
                "type": "ExternalLink"
              },
              {
                "data": {
                  "value": ")"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "Thread safe f2py callback functions"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "api",
                    "module": "numpy",
                    "path": "numpy.rec.fromfile",
                    "version": "*"
                  },
                  "value": "numpy.rec.fromfile"
                },
                "type": "Link"
              },
              {
                "data": {
                  "value": " can now use file-like objects, for instance "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "io.BytesIO"
                  ]
                },
                "type": "Verbatim"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "("
                },
                "type": "Words"
              },
              {
                "data": {
                  "target": "https://github.com/numpy/numpy/pull/16675",
                  "value": "gh-16675"
                },
                "type": "ExternalLink"
              },
              {
                "data": {
                  "value": ")"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "`numpy.core.records.fromfile` now supports file-like objects"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "This allows SciPy to be built on AIX."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "("
                },
                "type": "Words"
              },
              {
                "data": {
                  "target": "https://github.com/numpy/numpy/pull/16710",
                  "value": "gh-16710"
                },
                "type": "ExternalLink"
              },
              {
                "data": {
                  "value": ")"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "RPATH support on AIX added to distutils"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "The compiler command selection for Fortran Portland Group Compiler is changed in "
                },
                "type": "Words"
              },
              {
                "data": {
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "api",
                    "module": "numpy",
                    "path": "numpy.distutils.fcompiler",
                    "version": "*"
                  },
                  "value": "numpy.distutils.fcompiler"
                },
                "type": "Link"
              },
              {
                "data": {
                  "value": ".  This only affects the linking command.  This forces the use of the executable provided by the command line option (if provided) instead of the pgfortran executable.  If no executable is provided to the command line option it defaults to the pgf90 executable, which is an alias for pgfortran according to the PGI documentation."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "("
                },
                "type": "Words"
              },
              {
                "data": {
                  "target": "https://github.com/numpy/numpy/pull/16730",
                  "value": "gh-16730"
                },
                "type": "ExternalLink"
              },
              {
                "data": {
                  "value": ")"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "Use f90 compiler specified by the command line args"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "The pxd declarations for Cython 3.0 were improved to avoid using deprecated NumPy C-API features.  Extension modules built with Cython 3.0+ that use NumPy can now set the C macro "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "NPY_NO_DEPRECATED_API=NPY_1_7_API_VERSION"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " to avoid C compiler warnings about deprecated API usage."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "("
                },
                "type": "Words"
              },
              {
                "data": {
                  "target": "https://github.com/numpy/numpy/pull/16986",
                  "value": "gh-16986"
                },
                "type": "ExternalLink"
              },
              {
                "data": {
                  "value": ")"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "Add NumPy declarations for Cython 3.0 and later"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Make sure the window functions provided by NumPy are symmetric. There were previously small deviations from symmetry due to numerical precision that are now avoided by better arrangement of the computation."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "("
                },
                "type": "Words"
              },
              {
                "data": {
                  "target": "https://github.com/numpy/numpy/pull/17195",
                  "value": "gh-17195"
                },
                "type": "ExternalLink"
              },
              {
                "data": {
                  "value": ")"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "Make the window functions exactly symmetric"
    },
    {
      "children": [],
      "title": "Performance improvements and changes"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "A series of improvements for NumPy infrastructure to pave the way to "
                },
                "type": "Words"
              },
              {
                "data": {
                  "content": {
                    "value": "NEP-38"
                  }
                },
                "type": "Strong"
              },
              {
                "data": {
                  "value": ", that can be summarized as follow:"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "content": {
                              "value": "New Build Arguments"
                            }
                          },
                          "type": "Strong"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  },
                  {
                    "data": {
                      "children": [
                        {
                          "children": [
                            {
                              "data": {
                                "children": [
                                  {
                                    "data": {
                                      "value": [
                                        "--cpu-baseline"
                                      ]
                                    },
                                    "type": "Verbatim"
                                  },
                                  {
                                    "data": {
                                      "value": " to specify the minimal set of required       optimizations, default value is "
                                    },
                                    "type": "Words"
                                  },
                                  {
                                    "data": {
                                      "value": [
                                        "min"
                                      ]
                                    },
                                    "type": "Verbatim"
                                  },
                                  {
                                    "data": {
                                      "value": " which provides the minimum       CPU features that can safely run on a wide range of users       platforms."
                                    },
                                    "type": "Words"
                                  }
                                ]
                              },
                              "type": "Paragraph"
                            }
                          ]
                        },
                        {
                          "children": [
                            {
                              "data": {
                                "children": [
                                  {
                                    "data": {
                                      "value": [
                                        "--cpu-dispatch"
                                      ]
                                    },
                                    "type": "Verbatim"
                                  },
                                  {
                                    "data": {
                                      "value": " to specify the dispatched set of additional       optimizations, default value is "
                                    },
                                    "type": "Words"
                                  },
                                  {
                                    "data": {
                                      "value": [
                                        "max -xop -fma4"
                                      ]
                                    },
                                    "type": "Verbatim"
                                  },
                                  {
                                    "data": {
                                      "value": " which enables       all CPU features, except for AMD legacy features."
                                    },
                                    "type": "Words"
                                  }
                                ]
                              },
                              "type": "Paragraph"
                            }
                          ]
                        },
                        {
                          "children": [
                            {
                              "data": {
                                "children": [
                                  {
                                    "data": {
                                      "value": [
                                        "--disable-optimization"
                                      ]
                                    },
                                    "type": "Verbatim"
                                  },
                                  {
                                    "data": {
                                      "value": " to explicitly disable the whole new       improvements, It also adds a new "
                                    },
                                    "type": "Words"
                                  },
                                  {
                                    "data": {
                                      "content": {
                                        "value": "C"
                                      }
                                    },
                                    "type": "Strong"
                                  },
                                  {
                                    "data": {
                                      "value": " compiler #definition       called "
                                    },
                                    "type": "Words"
                                  },
                                  {
                                    "data": {
                                      "value": [
                                        "NPY_DISABLE_OPTIMIZATION"
                                      ]
                                    },
                                    "type": "Verbatim"
                                  },
                                  {
                                    "data": {
                                      "value": " which it can be used as       guard for any SIMD code."
                                    },
                                    "type": "Words"
                                  }
                                ]
                              },
                              "type": "Paragraph"
                            }
                          ]
                        }
                      ]
                    },
                    "type": "BulletList"
                  }
                ]
              },
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "content": {
                              "value": "Advanced CPU dispatcher"
                            }
                          },
                          "type": "Strong"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  },
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "A flexible cross-architecture CPU dispatcher built on the top of    Python/Numpy distutils, support all common compilers with a wide range of    CPU features."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  },
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "The new dispatcher requires a special file extension "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "*.dispatch.c"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " to    mark the dispatch-able "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "content": {
                              "value": "C"
                            }
                          },
                          "type": "Strong"
                        },
                        {
                          "data": {
                            "value": " sources. These sources have the ability to be    compiled multiple times so that each compilation process represents certain    CPU features and provides different #definitions and flags that affect the    code paths."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "content": {
                              "value": "New auto-generated C header ``core/src/common/_cpu_dispatch.h``"
                            }
                          },
                          "type": "Strong"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  },
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "This header is generated by the distutils module "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "ccompiler_opt"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": ", and    contains all the #definitions and headers of instruction sets, that had been    configured through command arguments '--cpu-baseline' and '--cpu-dispatch'."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "content": {
                              "value": "New C header ``core/src/common/npy_cpu_dispatch.h``"
                            }
                          },
                          "type": "Strong"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  },
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "This header contains all utilities that required for the whole CPU    dispatching process, it also can be considered as a bridge linking the new    infrastructure work with NumPy CPU runtime detection."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "content": {
                              "value": "Add new attributes to NumPy umath module(Python level)"
                            }
                          },
                          "type": "Strong"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  },
                  {
                    "data": {
                      "children": [
                        {
                          "children": [
                            {
                              "data": {
                                "children": [
                                  {
                                    "data": {
                                      "value": [
                                        "__cpu_baseline__"
                                      ]
                                    },
                                    "type": "Verbatim"
                                  },
                                  {
                                    "data": {
                                      "value": " a list contains the minimal set of required      optimizations that supported by the compiler and platform according to the      specified values to command argument '--cpu-baseline'."
                                    },
                                    "type": "Words"
                                  }
                                ]
                              },
                              "type": "Paragraph"
                            }
                          ]
                        },
                        {
                          "children": [
                            {
                              "data": {
                                "children": [
                                  {
                                    "data": {
                                      "value": [
                                        "__cpu_dispatch__"
                                      ]
                                    },
                                    "type": "Verbatim"
                                  },
                                  {
                                    "data": {
                                      "value": " a list contains the dispatched set of additional      optimizations that supported by the compiler and platform according to the      specified values to command argument '--cpu-dispatch'."
                                    },
                                    "type": "Words"
                                  }
                                ]
                              },
                              "type": "Paragraph"
                            }
                          ]
                        }
                      ]
                    },
                    "type": "BulletList"
                  }
                ]
              },
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "content": {
                              "value": "Print the supported CPU features during the run of PytestTester"
                            }
                          },
                          "type": "Strong"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              }
            ]
          },
          "type": "BulletList"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "("
                },
                "type": "Words"
              },
              {
                "data": {
                  "target": "https://github.com/numpy/numpy/pull/13516",
                  "value": "gh-13516"
                },
                "type": "ExternalLink"
              },
              {
                "data": {
                  "value": ")"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "Enable multi-platform SIMD compiler optimizations"
    },
    {
      "children": [],
      "title": "Changes"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "The changes also assure that different compiler versions have the same behavior for nan or inf usages in these operations. This was previously compiler dependent, we now force the invalid and divide by zero flags, making the results the same across compilers. For example, gcc-5, gcc-8, or gcc-9 now result in the same behavior. The changes are tabulated below:"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "argument": "Summary of New Behavior",
            "content": "* - Operator\n  - Old Warning\n  - New Warning\n  - Old Result\n  - New Result\n  - Works on MacOS\n* - np.divmod(1.0, 0.0)\n  - Invalid\n  - Invalid and Dividebyzero\n  - nan, nan\n  - inf, nan\n  - Yes\n* - np.fmod(1.0, 0.0)\n  - Invalid\n  - Invalid\n  - nan\n  - nan\n  - No? Yes\n* - np.floor_divide(1.0, 0.0)\n  - Invalid\n  - Dividebyzero\n  - nan\n  - inf\n  - Yes\n* - np.remainder(1.0, 0.0)\n  - Invalid\n  - Invalid\n  - nan\n  - nan\n  - Yes",
            "name": "list-table",
            "options": [
              [
                "widths",
                "auto"
              ],
              [
                "header-rows",
                "1"
              ]
            ]
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "("
                },
                "type": "Words"
              },
              {
                "data": {
                  "target": "https://github.com/numpy/numpy/pull/16161",
                  "value": "gh-16161"
                },
                "type": "ExternalLink"
              },
              {
                "data": {
                  "value": ")"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "Changed behavior of ``divmod(1., 0.)`` and related functions"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "When using a "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "int"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " dtype in "
                },
                "type": "Words"
              },
              {
                "data": {
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "api",
                    "module": "numpy",
                    "path": "numpy.linspace",
                    "version": "*"
                  },
                  "value": "numpy.linspace"
                },
                "type": "Link"
              },
              {
                "data": {
                  "value": ", previously float values would be rounded towards zero. Now "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "numpy.floor"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " is used instead, which rounds toward "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "-inf"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ". This changes the results for negative values. For example, the following would previously give::      "
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": ">>> np.linspace(-3, 1, 8, dtype=int)\narray([-3, -2, -1, -1,  0,  0,  0,  1])"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "and now results in::      "
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": ">>> np.linspace(-3, 1, 8, dtype=int)\narray([-3, -3, -2, -2, -1, -1,  0,  1])"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "The former result can still be obtained with::      "
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": ">>> np.linspace(-3, 1, 8).astype(int)\narray([-3, -2, -1, -1,  0,  0,  0,  1])"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "("
                },
                "type": "Words"
              },
              {
                "data": {
                  "target": "https://github.com/numpy/numpy/pull/16841",
                  "value": "gh-16841"
                },
                "type": "ExternalLink"
              },
              {
                "data": {
                  "value": ")"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "``np.linspace`` on integers now uses floor"
    }
  ],
  "content": {},
  "example_section_data": {
    "children": [],
    "title": null
  },
  "item_file": null,
  "item_line": null,
  "item_type": null,
  "ordered_sections": [],
  "references": null,
  "see_also": [],
  "signature": {
    "value": null
  }
}