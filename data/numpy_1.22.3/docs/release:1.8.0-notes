{
  "_content": {},
  "aliases": [],
  "arbitrary": [
    {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "This release supports  Python 2.6 -2.7 and 3.2 - 3.3."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": "NumPy 1.8.0 Release Notes"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "value": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "New, no 2to3, Python 2 and Python 3 are supported by a common code base."
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "value": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "New, gufuncs for linear algebra, enabling operations on stacked arrays."
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "value": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "New, inplace fancy indexing for ufuncs with the "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              ".at"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " method."
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "value": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "New, "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "partition"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " function, partial sorting via selection for fast median."
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "value": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "New, "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "nanmean"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": ", "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "nanvar"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": ", and "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "nanstd"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " functions skipping NaNs."
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "value": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "New, "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "full"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " and "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "full_like"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " functions to create value initialized arrays."
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "value": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "New, "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "PyUFunc_RegisterLoopForDescr"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": ", better ufunc support for user dtypes."
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "value": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "Numerous performance improvements in many areas."
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ]
              }
            ]
          },
          "type": "BulletList"
        }
      ],
      "title": "Highlights"
    },
    {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Support for Python versions 2.4 and 2.5 has been dropped,"
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Support for SCons has been removed."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": "Dropped Support"
    },
    {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "The Datetime64 type remains experimental in this release. In 1.9 there will probably be some changes to make it more usable."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "The diagonal method currently returns a new array and raises a FutureWarning. In 1.9 it will return a readonly view."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Multiple field selection from an array of structured type currently returns a new array and raises a FutureWarning. In 1.9 it will return a readonly view."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "The numpy/oldnumeric and numpy/numarray compatibility modules will be removed in 1.9."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": "Future Changes"
    },
    {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "The doc/sphinxext content has been moved into its own github repository, and is included in numpy as a submodule. See the instructions in doc/HOWTO_BUILD_DOCS.rst.txt for how to access the content."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "placeholder": "target",
            "value": ".. _numpydoc: https://github.com/numpy/numpydoc"
          },
          "type": "Unimplemented"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "The hash function of numpy.void scalars has been changed.  Previously the pointer to the data was hashed as an integer.  Now, the hash function uses the tuple-hash algorithm to combine the hash functions of the elements of the scalar, but only if the scalar is read-only."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Numpy has switched its build system to using 'separate compilation' by default.  In previous releases this was supported, but not default. This should produce the same results as the old system, but if you're trying to do something complicated like link numpy statically or using an unusual compiler, then it's possible you will encounter problems. If so, please file a bug and as a temporary workaround you can re-enable the old build system by exporting the shell variable NPY_SEPARATE_COMPILATION=0."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "For the AdvancedNew iterator the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "oa_ndim"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " flag should now be -1 to indicate that no "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "op_axes"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " and "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "itershape"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " are passed in. The "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "oa_ndim == 0"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " case, now indicates a 0-D iteration and "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "op_axes"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " being NULL and the old usage is deprecated. This does not effect the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "NpyIter_New"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " or "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "NpyIter_MultiNew"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " functions."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "The functions nanargmin and nanargmax now return np.iinfo['intp'].min for the index in all-NaN slices. Previously the functions would raise a ValueError for array returns and NaN for scalar returns."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": "Compatibility notes"
    },
    {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "There is a new compile time environment variable "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "NPY_RELAXED_STRIDES_CHECKING"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ". If this variable is set to 1, then numpy will consider more arrays to be C- or F-contiguous -- for example, it becomes possible to have a column vector which is considered both C- and F-contiguous simultaneously. The new definition is more accurate, allows for faster code that makes fewer unnecessary copies, and simplifies numpy's code internally. However, it may also break third-party libraries that make too-strong assumptions about the stride values of C- and F-contiguous arrays. (It is also currently known that this breaks Cython code using memoryviews, which will be fixed in Cython.) THIS WILL BECOME THE DEFAULT IN A FUTURE RELEASE, SO PLEASE TEST YOUR CODE NOW AGAINST NUMPY BUILT WITH::    "
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": "NPY_RELAXED_STRIDES_CHECKING=1 python setup.py install"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "You can check whether NPY_RELAXED_STRIDES_CHECKING is in effect by running::    "
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": "np.ones((10, 1), order=\"C\").flags.f_contiguous"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "This will be "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "True"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " if relaxed strides checking is enabled, and "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "False"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " otherwise. The typical problem we've seen so far is C code that works with C-contiguous arrays, and assumes that the itemsize can be accessed by looking at the last element in the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "PyArray_STRIDES(arr)"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " array. When relaxed strides are in effect, this is not true (and in fact, it never was true in some corner cases). Instead, use "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "PyArray_ITEMSIZE(arr)"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": "."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "For more information check the \"Internal memory layout of an ndarray\" section in the documentation."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": "NPY_RELAXED_STRIDES_CHECKING"
    },
    {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Binary operations of the form "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "<array-or-subclass> * <non-array-subclass>"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " where "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "<non-array-subclass>"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " declares an "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "__array_priority__"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " higher than that of "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "<array-or-subclass>"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " will now unconditionally return "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "NotImplemented"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": ", giving "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "<non-array-subclass>"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " a chance to handle the operation.  Previously, "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "NotImplemented"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " would only be returned if "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "<non-array-subclass>"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " actually implemented the reversed operation, and after a (potentially expensive) array conversion of "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "<non-array-subclass>"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " had been attempted. ("
                },
                "type": "Words"
              },
              {
                "data": {
                  "target": "https://github.com/numpy/numpy/issues/3375",
                  "value": "bug"
                },
                "type": "ExternalLink"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "target": "https://github.com/numpy/numpy/pull/3501",
                  "value": "pull request"
                },
                "type": "ExternalLink"
              },
              {
                "data": {
                  "value": ")"
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": "Binary operations with non-arrays as second argument"
    },
    {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "If "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "median"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " is used with "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "overwrite_input"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " option the input array will now only be partially sorted instead of fully sorted."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": "Function `median` used with `overwrite_input` only partially sorts array"
    },
    {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "The npv function had a bug. Contrary to what the documentation stated, it summed from indexes "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "1"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " to "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "M"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " instead of from "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "0"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " to "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "M - 1"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ". The fix changes the returned value. The mirr function called the npv function, but worked around the problem, so that was also fixed and the return value of the mirr function remains unchanged."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": "Fix to financial.npv"
    },
    {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Comparing "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "NaN"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " floating point numbers now raises the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "invalid"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " runtime warning. If a "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "NaN"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " is expected the warning can be ignored using np.errstate. E.g.::    "
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": "with np.errstate(invalid='ignore'):\n    operation()"
          },
          "type": "BlockVerbatim"
        }
      ],
      "title": "Runtime warnings when comparing NaN numbers"
    },
    {
      "children": [],
      "title": "New Features"
    },
    {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "The gufunc machinery is now used for np.linalg, allowing operations on stacked arrays and vectors. For example::      "
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": ">>> a\narray([[[ 1.,  1.],\n        [ 0.,  1.]],\n\n       [[ 1.,  1.],\n        [ 0.,  1.]]])\n\n>>> np.linalg.inv(a)\narray([[[ 1., -1.],\n        [ 0.,  1.]],\n\n       [[ 1., -1.],\n        [ 0.,  1.]]])"
          },
          "type": "BlockVerbatim"
        }
      ],
      "title": "Support for linear algebra on stacked arrays"
    },
    {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "The function "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "at"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " has been added to ufunc objects to allow in place ufuncs with no buffering when fancy indexing is used. For example, the following will increment the first and second items in the array, and will increment the third item twice: "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "numpy.add.at(arr, [0, 1, 2, 2], 1)"
                  ]
                },
                "type": "Verbatim"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "This is what many have mistakenly thought "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "arr[[0, 1, 2, 2]] += 1"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " would do, but that does not work as the incremented value of "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "arr[2]"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " is simply copied into the third slot in "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "arr"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " twice, not incremented twice."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": "In place fancy indexing for ufuncs"
    },
    {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "New functions to partially sort arrays via a selection algorithm."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "A "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "partition"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " by index "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "k"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " moves the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "k"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " smallest element to the front of an array.  All elements before "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "k"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " are then smaller or equal than the value in position "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "k"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " and all elements following "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "k"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " are then greater or equal than the value in position "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "k"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ". The ordering of the values within these bounds is undefined. A sequence of indices can be provided to sort all of them into their sorted position at once iterative partitioning. This can be used to efficiently obtain order statistics like median or percentiles of samples. "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "partition"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " has a linear time complexity of "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "O(n)"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " while a full sort has "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "O(n log(n))"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": "."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": "New functions `partition` and `argpartition`"
    },
    {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "New nan aware statistical functions are added. In these functions the results are what would be obtained if nan values were omitted from all computations."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": "New functions `nanmean`, `nanvar` and `nanstd`"
    },
    {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "New convenience functions to create arrays filled with a specific value; complementary to the existing "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "zeros"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " and "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "zeros_like"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " functions."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": "New functions `full` and `full_like`"
    },
    {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Large NPZ files >2GB can be loaded on 64-bit systems."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": "IO compatibility with large files"
    },
    {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "It is now possible to build numpy against OpenBLAS by editing site.cfg."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": "Building against OpenBLAS"
    },
    {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Euler's constant is now exposed in numpy as euler_gamma."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": "New constant"
    },
    {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "New modes 'complete', 'reduced', and 'raw' have been added to the qr factorization and the old 'full' and 'economic' modes are deprecated. The 'reduced' mode replaces the old 'full' mode and is the default as was the 'full' mode, so backward compatibility can be maintained by not specifying the mode."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "The 'complete' mode returns a full dimensional factorization, which can be useful for obtaining a basis for the orthogonal complement of the range space. The 'raw' mode returns arrays that contain the Householder reflectors and scaling factors that can be used in the future to apply q without needing to convert to a matrix. The 'economic' mode is simply deprecated, there isn't much use for it and it isn't any more efficient than the 'raw' mode."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": "New modes for qr"
    },
    {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "The function "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "in1d"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " now accepts a "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "invert"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " argument which, when "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "True"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", causes the returned array to be inverted."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": "New `invert` argument to `in1d`"
    },
    {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "It is now possible to use "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "np.newaxis"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": "/"
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "None"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " together with index arrays instead of only in simple indices. This means that "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "array[np.newaxis, [0, 1]]"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " will now work as expected and select the first two rows while prepending a new axis to the array."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": "Advanced indexing using `np.newaxis`"
    },
    {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "New ufuncs can now be registered with builtin input types and a custom output type. Before this change, NumPy wouldn't be able to find the right ufunc loop function when the ufunc was called from Python, because the ufunc loop signature matching logic wasn't looking at the output operand type. Now the correct ufunc loop is found, as long as the user provides an output argument with the correct output type."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": "C-API"
    },
    {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "A simple test runner script "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "runtests.py"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " was added. It also builds Numpy via "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "setup.py build"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " and can be used to run tests easily during development."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": "runtests.py"
    },
    {
      "children": [],
      "title": "Improvements"
    },
    {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Performance in reading large files was improved by chunking (see also IO compatibility)."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": "IO performance improvements"
    },
    {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "The "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "pad"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " function has a new implementation, greatly improving performance for all inputs except "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "mode=<function>"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " (retained for backwards compatibility). Scaling with dimensionality is dramatically improved for rank >= 4."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": "Performance improvements to `pad`"
    },
    {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "isnan"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "isinf"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "isfinite"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " and "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "byteswap"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " have been improved to take advantage of compiler builtins to avoid expensive calls to libc. This improves performance of these operations by about a factor of two on gnu libc systems."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": "Performance improvements to `isnan`, `isinf`, `isfinite` and `byteswap`"
    },
    {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Several functions have been optimized to make use of SSE2 CPU SIMD instructions."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "value": [
                  {
                    "data": {
                      "children": [
                        {
                          "dd": [
                            {
                              "data": {
                                "children": [
                                  {
                                    "value": [
                                      {
                                        "data": {
                                          "inline": [
                                            {
                                              "data": {
                                                "value": "base math ("
                                              },
                                              "type": "Words"
                                            },
                                            {
                                              "data": {
                                                "domain": null,
                                                "role": null,
                                                "value": "add"
                                              },
                                              "type": "Directive"
                                            },
                                            {
                                              "data": {
                                                "value": ", "
                                              },
                                              "type": "Words"
                                            },
                                            {
                                              "data": {
                                                "domain": null,
                                                "role": null,
                                                "value": "subtract"
                                              },
                                              "type": "Directive"
                                            },
                                            {
                                              "data": {
                                                "value": ", "
                                              },
                                              "type": "Words"
                                            },
                                            {
                                              "data": {
                                                "domain": null,
                                                "role": null,
                                                "value": "divide"
                                              },
                                              "type": "Directive"
                                            },
                                            {
                                              "data": {
                                                "value": ", "
                                              },
                                              "type": "Words"
                                            },
                                            {
                                              "data": {
                                                "domain": null,
                                                "role": null,
                                                "value": "multiply"
                                              },
                                              "type": "Directive"
                                            },
                                            {
                                              "data": {
                                                "value": ")"
                                              },
                                              "type": "Words"
                                            }
                                          ],
                                          "inner": []
                                        },
                                        "type": "Paragraph"
                                      }
                                    ]
                                  },
                                  {
                                    "value": [
                                      {
                                        "data": {
                                          "inline": [
                                            {
                                              "data": {
                                                "domain": null,
                                                "role": null,
                                                "value": "sqrt"
                                              },
                                              "type": "Directive"
                                            }
                                          ],
                                          "inner": []
                                        },
                                        "type": "Paragraph"
                                      }
                                    ]
                                  },
                                  {
                                    "value": [
                                      {
                                        "data": {
                                          "inline": [
                                            {
                                              "data": {
                                                "domain": null,
                                                "role": null,
                                                "value": "minimum/maximum"
                                              },
                                              "type": "Directive"
                                            }
                                          ],
                                          "inner": []
                                        },
                                        "type": "Paragraph"
                                      }
                                    ]
                                  },
                                  {
                                    "value": [
                                      {
                                        "data": {
                                          "inline": [
                                            {
                                              "data": {
                                                "domain": null,
                                                "role": null,
                                                "value": "absolute"
                                              },
                                              "type": "Directive"
                                            }
                                          ],
                                          "inner": []
                                        },
                                        "type": "Paragraph"
                                      }
                                    ]
                                  }
                                ]
                              },
                              "type": "BulletList"
                            }
                          ],
                          "dt": {
                            "inline": [
                              {
                                "data": {
                                  "value": "Float32 and float64:"
                                },
                                "type": "Words"
                              }
                            ],
                            "inner": []
                          }
                        }
                      ]
                    },
                    "type": "DefList"
                  }
                ]
              },
              {
                "value": [
                  {
                    "data": {
                      "children": [
                        {
                          "dd": [
                            {
                              "data": {
                                "children": [
                                  {
                                    "value": [
                                      {
                                        "data": {
                                          "inline": [
                                            {
                                              "data": {
                                                "domain": null,
                                                "role": null,
                                                "value": "logical_or"
                                              },
                                              "type": "Directive"
                                            }
                                          ],
                                          "inner": []
                                        },
                                        "type": "Paragraph"
                                      }
                                    ]
                                  },
                                  {
                                    "value": [
                                      {
                                        "data": {
                                          "inline": [
                                            {
                                              "data": {
                                                "domain": null,
                                                "role": null,
                                                "value": "logical_and"
                                              },
                                              "type": "Directive"
                                            }
                                          ],
                                          "inner": []
                                        },
                                        "type": "Paragraph"
                                      }
                                    ]
                                  },
                                  {
                                    "value": [
                                      {
                                        "data": {
                                          "inline": [
                                            {
                                              "data": {
                                                "domain": null,
                                                "role": null,
                                                "value": "logical_not"
                                              },
                                              "type": "Directive"
                                            }
                                          ],
                                          "inner": []
                                        },
                                        "type": "Paragraph"
                                      }
                                    ]
                                  }
                                ]
                              },
                              "type": "BulletList"
                            }
                          ],
                          "dt": {
                            "inline": [
                              {
                                "data": {
                                  "value": "Bool:"
                                },
                                "type": "Words"
                              }
                            ],
                            "inner": []
                          }
                        }
                      ]
                    },
                    "type": "DefList"
                  }
                ]
              }
            ]
          },
          "type": "BulletList"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "This improves performance of these operations up to 4x/2x for float32/float64 and up to 10x for bool depending on the location of the data in the CPU caches. The performance gain is greatest for in-place operations."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "In order to use the improved functions the SSE2 instruction set must be enabled at compile time. It is enabled by default on x86_64 systems. On x86_32 with a capable CPU it must be enabled by passing the appropriate flag to the CFLAGS build variable (-msse2 with gcc)."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": "Performance improvements via SSE2 vectorization"
    },
    {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "median"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " is now implemented in terms of "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "partition"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " instead of "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "sort"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " which reduces its time complexity from O(n log(n)) to O(n). If used with the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "overwrite_input"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " option the array will now only be partially sorted instead of fully sorted."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": "Performance improvements to `median`"
    },
    {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "When creating a ufunc, the default ufunc operand flags can be overridden via the new op_flags attribute of the ufunc object. For example, to set the operand flag for the first input to read/write:"
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "PyObject \\*ufunc = PyUFunc_FromFuncAndData(...); ufunc->op_flags[0] = NPY_ITER_READWRITE;"
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "This allows a ufunc to perform an operation in place. Also, global nditer flags can be overridden via the new iter_flags attribute of the ufunc object. For example, to set the reduce flag for a ufunc:"
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "ufunc->iter_flags = NPY_ITER_REDUCE_OK;"
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": "Overridable operand flags in ufunc C-API"
    },
    {
      "children": [],
      "title": "Changes"
    },
    {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "The function np.take now allows 0-d arrays as indices."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "The separate compilation mode is now enabled by default."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Several changes to np.insert and np.delete:"
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "value": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "Previously, negative indices and indices that pointed past the end of   the array were simply ignored. Now, this will raise a Future or Deprecation   Warning. In the future they will be treated like normal indexing treats   them -- negative indices will wrap around, and out-of-bound indices will   generate an error."
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "value": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "Previously, boolean indices were treated as if they were integers (always   referring to either the 0th or 1st item in the array). In the future, they   will be treated as masks. In this release, they raise a FutureWarning   warning of this coming change."
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "value": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "In Numpy 1.7. np.insert already allowed the syntax   "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "domain": null,
                            "role": null,
                            "value": "np.insert(arr, 3, [1,2,3])"
                          },
                          "type": "Directive"
                        },
                        {
                          "data": {
                            "value": " to insert multiple items at a single position.   In Numpy 1.8. this is also possible for "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "domain": null,
                            "role": null,
                            "value": "np.insert(arr, [3], [1, 2, 3])"
                          },
                          "type": "Directive"
                        },
                        {
                          "data": {
                            "value": "."
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ]
              }
            ]
          },
          "type": "BulletList"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Padded regions from np.pad are now correctly rounded, not truncated."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": "General"
    },
    {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Four new functions have been added to the array C-API."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "value": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "PyArray_Partition"
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "value": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "PyArray_ArgPartition"
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "value": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "PyArray_SelectkindConverter"
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "value": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "PyDataMem_NEW_ZEROED"
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ]
              }
            ]
          },
          "type": "BulletList"
        }
      ],
      "title": "C-API Array Additions"
    },
    {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "One new function has been added to the ufunc C-API that allows to register an inner loop for user types using the descr."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "value": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "PyUFunc_RegisterLoopForDescr"
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ]
              }
            ]
          },
          "type": "BulletList"
        }
      ],
      "title": "C-API Ufunc Additions"
    },
    {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "The "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "PyArray_Type"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " instance creation function "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "tp_new"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " now uses "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "tp_basicsize"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " to determine how much memory to allocate. In previous releases only "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "sizeof(PyArrayObject)"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " bytes of memory were allocated, often requiring C-API subtypes to reimplement "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "tp_new"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": "."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": "C-API Developer Improvements"
    },
    {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "The 'full' and 'economic' modes of qr factorization are deprecated."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": "Deprecations"
    },
    {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "The use of non-integer for indices and most integer arguments has been deprecated. Previously float indices and function arguments such as axes or shapes were truncated to integers without warning. For example "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "arr.reshape(3., -1)"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " or "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "arr[0.]"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " will trigger a deprecation warning in NumPy 1.8., and in some future version of NumPy they will raise an error."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": "General"
    },
    {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "This release contains work by the following people who contributed at least one patch to this release. The names are in alphabetical order by first name:"
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "value": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "87"
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "value": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "Adam Ginsburg +"
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "value": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "Adam Griffiths +"
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "value": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "Alexander Belopolsky +"
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "value": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "Alex Barth +"
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "value": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "Alex Ford +"
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "value": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "Andreas Hilboll +"
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "value": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "Andreas Kloeckner +"
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "value": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "Andreas Schwab +"
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "value": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "Andrew Horton +"
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "value": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "argriffing +"
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "value": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "Arink Verma +"
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "value": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "Bago Amirbekian +"
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "value": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "Bartosz Telenczuk +"
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "value": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "bebert218 +"
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "value": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "Benjamin Root +"
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "value": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "Bill Spotz +"
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "value": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "Bradley M. Froehle"
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "value": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "Carwyn Pelley +"
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "value": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "Charles Harris"
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "value": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "Chris"
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "value": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "Christian Brueffer +"
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "value": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "Christoph Dann +"
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "value": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "Christoph Gohlke"
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "value": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "Dan Hipschman +"
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "value": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "Daniel +"
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "value": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "Dan Miller +"
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "value": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "daveydave400 +"
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "value": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "David Cournapeau"
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "value": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "David Warde-Farley"
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "value": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "Denis Laxalde"
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "value": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "dmuellner +"
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "value": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "Edward Catmur +"
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "value": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "Egor Zindy +"
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "value": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "endolith"
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "value": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "Eric Firing"
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "value": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "Eric Fode"
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "value": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "Eric Moore +"
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "value": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "Eric Price +"
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "value": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "Fazlul Shahriar +"
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "value": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "F\u00e9lix Hartmann +"
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "value": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "Fernando Perez"
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "value": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "Frank B +"
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "value": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "Frank Breitling +"
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "value": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "Frederic"
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "value": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "Gabriel"
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "value": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "GaelVaroquaux"
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "value": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "Guillaume Gay +"
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "value": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "Han Genuit"
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "value": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "HaroldMills +"
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "value": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "hklemm +"
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "value": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "jamestwebber +"
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "value": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "Jason Madden +"
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "value": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "Jay Bourque"
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "value": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "jeromekelleher +"
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "value": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "Jes\u00fas G\u00f3mez +"
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "value": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "jmozmoz +"
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "value": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "jnothman +"
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "value": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "Johannes Sch\u00f6nberger +"
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "value": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "John Benediktsson +"
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "value": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "John Salvatier +"
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "value": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "John Stechschulte +"
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "value": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "Jonathan Waltman +"
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "value": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "Joon Ro +"
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "value": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "Jos de Kloe +"
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "value": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "Joseph Martinot-Lagarde +"
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "value": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "Josh Warner (Mac) +"
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "value": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "Jostein B\u00f8 Fl\u00f8ystad +"
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "value": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "Juan Luis Cano Rodr\u00edguez +"
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "value": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "Julian Taylor +"
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "value": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "Julien Phalip +"
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "value": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "K.-Michael Aye +"
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "value": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "Kumar Appaiah +"
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "value": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "Lars Buitinck"
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "value": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "Leon Weber +"
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "value": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "Luis Pedro Coelho"
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "value": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "Marcin Juszkiewicz"
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "value": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "Mark Wiebe"
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "value": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "Marten van Kerkwijk +"
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "value": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "Martin Baeuml +"
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "value": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "Martin Spacek"
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "value": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "Martin Teichmann +"
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "value": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "Matt Davis +"
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "value": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "Matthew Brett"
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "value": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "Maximilian Albert +"
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "value": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "m-d-w +"
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "value": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "Michael Droettboom"
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "value": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "mwtoews +"
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "value": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "Nathaniel J. Smith"
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "value": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "Nicolas Scheffer +"
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "value": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "Nils Werner +"
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "value": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "ochoadavid +"
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "value": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "Ond\u0159ej \u010cert\u00edk"
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "value": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "ovillellas +"
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "value": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "Paul Ivanov"
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "value": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "Pauli Virtanen"
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "value": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "peterjc"
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "value": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "Ralf Gommers"
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "value": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "Raul Cota +"
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "value": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "Richard Hattersley +"
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "value": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "Robert Costa +"
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "value": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "Robert Kern"
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "value": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "Rob Ruana +"
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "value": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "Ronan Lamy"
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "value": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "Sandro Tosi"
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "value": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "Sascha Peilicke +"
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "value": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "Sebastian Berg"
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "value": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "Skipper Seabold"
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "value": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "Stefan van der Walt"
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "value": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "Steve +"
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "value": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "Takafumi Arakaki +"
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "value": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "Thomas Robitaille +"
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "value": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "Tomas Tomecek +"
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "value": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "Travis E. Oliphant"
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "value": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "Valentin Haenel"
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "value": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "Vladimir Rutsky +"
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "value": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "Warren Weckesser"
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "value": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "Yaroslav Halchenko"
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "value": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "Yury V. Zaytsev +"
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ]
              }
            ]
          },
          "type": "BulletList"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "A total of 119 people contributed to this release. People with a \"+\" by their names contributed a patch for the first time."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": "Authors"
    }
  ],
  "example_section_data": {
    "children": [],
    "title": null
  },
  "item_file": null,
  "item_line": null,
  "item_type": null,
  "ordered_sections": [],
  "references": null,
  "refs": [],
  "see_also": [],
  "signature": {
    "value": null
  }
}