{
  "_content": {},
  "aliases": [],
  "arbitrary": [
    {
      "children": [
        {
          "data": {
            "placeholder": "target",
            "value": ".. _structured_arrays:"
          },
          "type": "Unimplemented"
        }
      ],
      "title": null
    },
    {
      "children": [],
      "title": "Structured arrays"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Structured arrays are ndarrays whose datatype is a composition of simpler datatypes organized as a sequence of named "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "fields <field>"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ". For example, ::"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": ">>> x = np.array([('Rex', 9, 81.0), ('Fido', 3, 27.0)],\n...              dtype=[('name', 'U10'), ('age', 'i4'), ('weight', 'f4')])\n>>> x\narray([('Rex', 9, 81.), ('Fido', 3, 27.)],\n      dtype=[('name', '<U10'), ('age', '<i4'), ('weight', '<f4')])"
                },
                "type": "BlockVerbatim"
              }
            ]
          },
          "type": "BlockQuote"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Here "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "x"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " is a one-dimensional array of length two whose datatype is a structure with three fields: 1. A string of length 10 or less named 'name', 2. a 32-bit integer named 'age', and 3. a 32-bit float named 'weight'."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "If you index "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "x"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " at position 1 you get a structure::   "
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": ">>> x[1]\n('Fido', 3, 27.)"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "You can access and modify individual fields of a structured array by indexing with the field name::   "
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": ">>> x['age']\narray([9, 3], dtype=int32)\n>>> x['age'] = 5\n>>> x\narray([('Rex', 5, 81.), ('Fido', 5, 27.)],\n      dtype=[('name', '<U10'), ('age', '<i4'), ('weight', '<f4')])"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Structured datatypes are designed to be able to mimic 'structs' in the C language, and share a similar memory layout. They are meant for interfacing with C code and for low-level manipulation of structured buffers, for example for interpreting binary blobs. For these purposes they support specialized features such as subarrays, nested datatypes, and unions, and allow control over the memory layout of the structure."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Users looking to manipulate tabular data, such as stored in csv files, may find other pydata projects more suitable, such as xarray, pandas, or DataArray. These provide a high-level interface for tabular data analysis and are better optimized for that use. For instance, the C-struct-like memory layout of structured arrays in numpy can lead to poor cache behavior in comparison."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "placeholder": "target",
            "value": ".. _defining-structured-types:"
          },
          "type": "Unimplemented"
        }
      ],
      "title": "Introduction"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "A structured datatype can be thought of as a sequence of bytes of a certain length (the structure's "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "itemsize"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ") which is interpreted as a collection of fields. Each field has a name, a datatype, and a byte offset within the structure. The datatype of a field may be any numpy datatype including other structured datatypes, and it may also be a "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "subarray data type"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " which behaves like an ndarray of a specified shape. The offsets of the fields are arbitrary, and fields may even overlap. These offsets are usually determined automatically by numpy, but can also be specified."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "Structured Datatypes"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Structured datatypes may be created using the function "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "numpy.dtype"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ". There are 4 alternative forms of specification which vary in flexibility and conciseness. These are further documented in the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "Data Type Objects <arrays.dtypes.constructing>"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " reference page, and in summary they are:"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "A list of tuples, one tuple per field"
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  },
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Each tuple has the form "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "(fieldname, datatype, shape)"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " where shape is      optional. "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "fieldname"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " is a string (or tuple if titles are used, see      "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "Field Titles <titles>"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " below), "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "datatype"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " may be any object      convertible to a datatype, and "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "shape"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " is a tuple of integers specifying      subarray shape."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  },
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": ">>> np.dtype([('x', 'f4'), ('y', np.float32), ('z', 'f4', (2, 2))])\ndtype([('x', '<f4'), ('y', '<f4'), ('z', '<f4', (2, 2))])"
                          },
                          "type": "BlockVerbatim"
                        }
                      ]
                    },
                    "type": "BlockQuote"
                  },
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "If "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "fieldname"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " is the empty string "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "''"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": ", the field will be given a      default name of the form "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "f#"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": ", where "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "#"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " is the integer index of the      field, counting from 0 from the left::        "
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  },
                  {
                    "data": {
                      "value": ">>> np.dtype([('x', 'f4'), ('', 'i4'), ('z', 'i8')])\ndtype([('x', '<f4'), ('f1', '<i4'), ('z', '<i8')])"
                    },
                    "type": "BlockVerbatim"
                  },
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "The byte offsets of the fields within the structure and the total      structure itemsize are determined automatically."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "A string of comma-separated dtype specifications"
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  },
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "In this shorthand notation any of the "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "string dtype specifications\n     <arrays.dtypes.constructing>"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " may be used in a string and separated by      commas. The itemsize and byte offsets of the fields are determined      automatically, and the field names are given the default names "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "f0"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": ",      "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "f1"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": ", etc. ::        "
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  },
                  {
                    "data": {
                      "value": ">>> np.dtype('i8, f4, S3')\ndtype([('f0', '<i8'), ('f1', '<f4'), ('f2', 'S3')])\n>>> np.dtype('3int8, float32, (2, 3)float64')\ndtype([('f0', 'i1', (3,)), ('f1', '<f4'), ('f2', '<f8', (2, 3))])"
                    },
                    "type": "BlockVerbatim"
                  }
                ]
              },
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "A dictionary of field parameter arrays"
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  },
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "This is the most flexible form of specification since it allows control      over the byte-offsets of the fields and the itemsize of the structure."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  },
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "The dictionary has two required keys, 'names' and 'formats', and four      optional keys, 'offsets', 'itemsize', 'aligned' and 'titles'. The values      for 'names' and 'formats' should respectively be a list of field names and      a list of dtype specifications, of the same length. The optional 'offsets'      value should be a list of integer byte-offsets, one for each field within      the structure. If 'offsets' is not given the offsets are determined      automatically. The optional 'itemsize' value should be an integer      describing the total size in bytes of the dtype, which must be large      enough to contain all the fields.      ::"
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  },
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": ">>> np.dtype({'names': ['col1', 'col2'], 'formats': ['i4', 'f4']})\ndtype([('col1', '<i4'), ('col2', '<f4')])\n>>> np.dtype({'names': ['col1', 'col2'],\n...           'formats': ['i4', 'f4'],\n...           'offsets': [0, 4],\n...           'itemsize': 12})\ndtype({'names': ['col1', 'col2'], 'formats': ['<i4', '<f4'], 'offsets': [0, 4], 'itemsize': 12})"
                          },
                          "type": "BlockVerbatim"
                        }
                      ]
                    },
                    "type": "BlockQuote"
                  },
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Offsets may be chosen such that the fields overlap, though this will mean      that assigning to one field may clobber any overlapping field's data. As      an exception, fields of "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "numpy.object_"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " type cannot overlap with      other fields, because of the risk of clobbering the internal object      pointer and then dereferencing it."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  },
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "The optional 'aligned' value can be set to "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "True"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " to make the automatic      offset computation use aligned offsets (see "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "offsets-and-alignment"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": "),      as if the 'align' keyword argument of "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "numpy.dtype"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " had been set to      True."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  },
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "The optional 'titles' value should be a list of titles of the same length      as 'names', see "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "Field Titles <titles>"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " below."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "A dictionary of field names"
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  },
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "The use of this form of specification is discouraged, but documented here      because older numpy code may use it. The keys of the dictionary are the      field names and the values are tuples specifying type and offset::        "
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  },
                  {
                    "data": {
                      "value": ">>> np.dtype({'col1': ('i1', 0), 'col2': ('f4', 1)})\ndtype([('col1', 'i1'), ('col2', '<f4')])"
                    },
                    "type": "BlockVerbatim"
                  },
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "This form is discouraged because Python dictionaries do not preserve order      in Python versions before Python 3.6, and the order of the fields in a      structured dtype has meaning. "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "Field Titles <titles>"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " may be      specified by using a 3-tuple, see below."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              }
            ]
          },
          "type": "EnumeratedList"
        }
      ],
      "title": "Structured Datatype Creation"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "The list of field names of a structured datatype can be found in the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "names"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " attribute of the dtype object::   "
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": ">>> d = np.dtype([('x', 'i8'), ('y', 'f4')])\n>>> d.names\n('x', 'y')"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "The field names may be modified by assigning to the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "names"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " attribute using a sequence of strings of the same length."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "The dtype object also has a dictionary-like attribute, "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "fields"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", whose keys are the field names (and "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "Field Titles <titles>"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", see below) and whose values are tuples containing the dtype and byte offset of each field. ::   "
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": ">>> d.fields\nmappingproxy({'x': (dtype('int64'), 0), 'y': (dtype('float32'), 8)})"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Both the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "names"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " and "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "fields"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " attributes will equal "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "None"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " for unstructured arrays. The recommended way to test if a dtype is structured is with "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "if dt.names is not None"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " rather than "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "if dt.names"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": ", to account for dtypes with 0 fields."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "The string representation of a structured datatype is shown in the \"list of tuples\" form if possible, otherwise numpy falls back to using the more general dictionary form."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "placeholder": "target",
            "value": ".. _offsets-and-alignment:"
          },
          "type": "Unimplemented"
        }
      ],
      "title": "Manipulating and Displaying Structured Datatypes"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Numpy uses one of two methods to automatically determine the field byte offsets and the overall itemsize of a structured datatype, depending on whether "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "align=True"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " was specified as a keyword argument to "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "numpy.dtype"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": "."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "By default ("
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "align=False"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": "), numpy will pack the fields together such that each field starts at the byte offset the previous field ended, and the fields are contiguous in memory. ::   "
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": ">>> def print_offsets(d):\n...     print(\"offsets:\", [d.fields[name][1] for name in d.names])\n...     print(\"itemsize:\", d.itemsize)\n>>> print_offsets(np.dtype('u1, u1, i4, u1, i8, u2'))\noffsets: [0, 1, 2, 6, 7, 15]\nitemsize: 17"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "If "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "align=True"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " is set, numpy will pad the structure in the same way many C compilers would pad a C-struct. Aligned structures can give a performance improvement in some cases, at the cost of increased datatype size. Padding bytes are inserted between fields such that each field's byte offset will be a multiple of that field's alignment, which is usually equal to the field's size in bytes for simple datatypes, see "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "PyArray_Descr.alignment"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ".  The structure will also have trailing padding added so that its itemsize is a multiple of the largest field's alignment. ::   "
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": ">>> print_offsets(np.dtype('u1, u1, i4, u1, i8, u2', align=True))\noffsets: [0, 1, 4, 8, 16, 24]\nitemsize: 32"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Note that although almost all modern C compilers pad in this way by default, padding in C structs is C-implementation-dependent so this memory layout is not guaranteed to exactly match that of a corresponding struct in a C program. Some work may be needed, either on the numpy side or the C side, to obtain exact correspondence."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "If offsets were specified using the optional "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "offsets"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " key in the dictionary-based dtype specification, setting "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "align=True"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " will check that each field's offset is a multiple of its size and that the itemsize is a multiple of the largest field size, and raise an exception if not."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "If the offsets of the fields and itemsize of a structured array satisfy the alignment conditions, the array will have the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "ALIGNED"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "flag\n<numpy.ndarray.flags>"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " set."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "A convenience function "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "numpy.lib.recfunctions.repack_fields"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " converts an aligned dtype or array to a packed one and vice versa. It takes either a dtype or structured ndarray as an argument, and returns a copy with fields re-packed, with or without padding bytes."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "placeholder": "target",
            "value": ".. _titles:"
          },
          "type": "Unimplemented"
        }
      ],
      "title": "Automatic Byte Offsets and Alignment"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "In addition to field names, fields may also have an associated "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "title"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", an alternate name, which is sometimes used as an additional description or alias for the field. The title may be used to index an array, just like a field name."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "To add titles when using the list-of-tuples form of dtype specification, the field name may be specified as a tuple of two strings instead of a single string, which will be the field's title and field name respectively. For example::   "
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": ">>> np.dtype([(('my title', 'name'), 'f4')])\ndtype([(('my title', 'name'), '<f4')])"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "When using the first form of dictionary-based specification, the titles may be supplied as an extra "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "'titles'"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " key as described above. When using the second (discouraged) dictionary-based specification, the title can be supplied by providing a 3-element tuple "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "(datatype, offset, title)"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " instead of the usual 2-element tuple::   "
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": ">>> np.dtype({'name': ('i4', 0, 'my title')})\ndtype([(('my title', 'name'), '<i4')])"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "The "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "dtype.fields"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " dictionary will contain titles as keys, if any titles are used.  This means effectively that a field with a title will be represented twice in the fields dictionary. The tuple values for these fields will also have a third element, the field title. Because of this, and because the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "names"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " attribute preserves the field order while the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "fields"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " attribute may not, it is recommended to iterate through the fields of a dtype using the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "names"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " attribute of the dtype, which will not list titles, as in::   "
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": ">>> for name in d.names:\n...     print(d.fields[name][:2])\n(dtype('int64'), 0)\n(dtype('float32'), 8)"
          },
          "type": "BlockVerbatim"
        }
      ],
      "title": "Field Titles"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Structured datatypes are implemented in numpy to have base type "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "numpy.void"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " by default, but it is possible to interpret other numpy types as structured types using the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "(base_dtype, dtype)"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " form of dtype specification described in "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "Data Type Objects <arrays.dtypes.constructing>"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ".  Here, "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "base_dtype"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " is the desired underlying dtype, and fields and flags will be copied from "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "dtype"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ". This dtype is similar to a 'union' in C."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "Union types"
    },
    {
      "children": [],
      "title": "Indexing and Assignment to Structured arrays"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "There are a number of ways to assign values to a structured array: Using python tuples, using scalar values, or using other structured arrays."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "Assigning data to a Structured Array"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "The simplest way to assign values to a structured array is using python tuples. Each assigned value should be a tuple of length equal to the number of fields in the array, and not a list or array as these will trigger numpy's broadcasting rules. The tuple's elements are assigned to the successive fields of the array, from left to right::   "
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": ">>> x = np.array([(1, 2, 3), (4, 5, 6)], dtype='i8, f4, f8')\n>>> x[1] = (7, 8, 9)\n>>> x\narray([(1, 2., 3.), (7, 8., 9.)],\n     dtype=[('f0', '<i8'), ('f1', '<f4'), ('f2', '<f8')])"
          },
          "type": "BlockVerbatim"
        }
      ],
      "title": "Assignment from Python Native Types (Tuples)"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "A scalar assigned to a structured element will be assigned to all fields. This happens when a scalar is assigned to a structured array, or when an unstructured array is assigned to a structured array::   "
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": ">>> x = np.zeros(2, dtype='i8, f4, ?, S1')\n>>> x[:] = 3\n>>> x\narray([(3, 3., True, b'3'), (3, 3., True, b'3')],\n      dtype=[('f0', '<i8'), ('f1', '<f4'), ('f2', '?'), ('f3', 'S1')])\n>>> x[:] = np.arange(2)\n>>> x\narray([(0, 0., False, b'0'), (1, 1., True, b'1')],\n      dtype=[('f0', '<i8'), ('f1', '<f4'), ('f2', '?'), ('f3', 'S1')])"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Structured arrays can also be assigned to unstructured arrays, but only if the structured datatype has just a single field::   "
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": ">>> twofield = np.zeros(2, dtype=[('A', 'i4'), ('B', 'i4')])\n>>> onefield = np.zeros(2, dtype=[('A', 'i4')])\n>>> nostruct = np.zeros(2, dtype='i4')\n>>> nostruct[:] = twofield\nTraceback (most recent call last):\n...\nTypeError: Cannot cast array data from dtype([('A', '<i4'), ('B', '<i4')]) to dtype('int32') according to the rule 'unsafe'"
          },
          "type": "BlockVerbatim"
        }
      ],
      "title": "Assignment from Scalars"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Assignment between two structured arrays occurs as if the source elements had been converted to tuples and then assigned to the destination elements. That is, the first field of the source array is assigned to the first field of the destination array, and the second field likewise, and so on, regardless of field names. Structured arrays with a different number of fields cannot be assigned to each other. Bytes of the destination structure which are not included in any of the fields are unaffected. ::   "
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": ">>> a = np.zeros(3, dtype=[('a', 'i8'), ('b', 'f4'), ('c', 'S3')])\n>>> b = np.ones(3, dtype=[('x', 'f4'), ('y', 'S3'), ('z', 'O')])\n>>> b[:] = a\n>>> b\narray([(0., b'0.0', b''), (0., b'0.0', b''), (0., b'0.0', b'')],\n      dtype=[('x', '<f4'), ('y', 'S3'), ('z', 'O')])"
          },
          "type": "BlockVerbatim"
        }
      ],
      "title": "Assignment from other Structured Arrays"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "When assigning to fields which are subarrays, the assigned value will first be broadcast to the shape of the subarray."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "Assignment involving subarrays"
    },
    {
      "children": [],
      "title": "Indexing Structured Arrays"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Individual fields of a structured array may be accessed and modified by indexing the array with the field name. ::   "
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": ">>> x = np.array([(1, 2), (3, 4)], dtype=[('foo', 'i8'), ('bar', 'f4')])\n>>> x['foo']\narray([1, 3])\n>>> x['foo'] = 10\n>>> x\narray([(10, 2.), (10, 4.)],\n      dtype=[('foo', '<i8'), ('bar', '<f4')])"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "The resulting array is a view into the original array. It shares the same memory locations and writing to the view will modify the original array. ::   "
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": ">>> y = x['bar']\n>>> y[:] = 11\n>>> x\narray([(10, 11.), (10, 11.)],\n      dtype=[('foo', '<i8'), ('bar', '<f4')])"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "This view has the same dtype and itemsize as the indexed field, so it is typically a non-structured array, except in the case of nested structures."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": ">>> y.dtype, y.shape, y.strides\n(dtype('float32'), (2,), (12,))"
                },
                "type": "BlockVerbatim"
              }
            ]
          },
          "type": "BlockQuote"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "If the accessed field is a subarray, the dimensions of the subarray are appended to the shape of the result::     "
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": ">>> x = np.zeros((2, 2), dtype=[('a', np.int32), ('b', np.float64, (3, 3))])\n>>> x['a'].shape\n(2, 2)\n>>> x['b'].shape\n(2, 2, 3, 3)"
          },
          "type": "BlockVerbatim"
        }
      ],
      "title": "Accessing Individual Fields"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "One can index and assign to a structured array with a multi-field index, where the index is a list of field names."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "children": [
                    {
                      "data": {
                        "value": "The behavior of multi-field indexes changed from Numpy 1.15 to Numpy 1.16."
                      },
                      "type": "Words"
                    }
                  ]
                },
                "type": "Paragraph"
              }
            ],
            "kind": "warning",
            "title": ""
          },
          "type": "Admonition"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "The result of indexing with a multi-field index is a view into the original array, as follows::   "
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": ">>> a = np.zeros(3, dtype=[('a', 'i4'), ('b', 'i4'), ('c', 'f4')])\n>>> a[['a', 'c']]\narray([(0, 0.), (0, 0.), (0, 0.)],\n     dtype={'names': ['a', 'c'], 'formats': ['<i4', '<f4'], 'offsets': [0, 8], 'itemsize': 12})"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Assignment to the view modifies the original array. The view's fields will be in the order they were indexed. Note that unlike for single-field indexing, the dtype of the view has the same itemsize as the original array, and has fields at the same offsets as in the original array, and unindexed fields are merely missing."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "children": [
                    {
                      "data": {
                        "value": "In Numpy 1.15, indexing an array with a multi-field index returned a copy of the result above, but with fields packed together in memory as if passed through "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "domain": null,
                        "role": "func",
                        "value": "numpy.lib.recfunctions.repack_fields"
                      },
                      "type": "Directive"
                    },
                    {
                      "data": {
                        "value": "."
                      },
                      "type": "Words"
                    }
                  ]
                },
                "type": "Paragraph"
              },
              {
                "data": {
                  "children": [
                    {
                      "data": {
                        "value": "The new behavior as of Numpy 1.16 leads to extra \"padding\" bytes at the location of unindexed fields compared to 1.15. You will need to update any code which depends on the data having a \"packed\" layout. For instance code such as::   "
                      },
                      "type": "Words"
                    }
                  ]
                },
                "type": "Paragraph"
              },
              {
                "data": {
                  "value": ">>> a[['a', 'c']].view('i8')  # Fails in Numpy 1.16\nTraceback (most recent call last):\n   File \"<stdin>\", line 1, in <module>\nValueError: When changing to a smaller dtype, its size must be a divisor of the size of original dtype"
                },
                "type": "BlockVerbatim"
              },
              {
                "data": {
                  "children": [
                    {
                      "data": {
                        "value": "will need to be changed. This code has raised a "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "FutureWarning"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " since Numpy 1.12, and similar code has raised "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "FutureWarning"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " since 1.7."
                      },
                      "type": "Words"
                    }
                  ]
                },
                "type": "Paragraph"
              },
              {
                "data": {
                  "children": [
                    {
                      "data": {
                        "value": "In 1.16 a number of functions have been introduced in the "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "domain": null,
                        "role": "mod",
                        "value": "numpy.lib.recfunctions"
                      },
                      "type": "Directive"
                    },
                    {
                      "data": {
                        "value": " module to help users account for this change. These are "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "domain": null,
                        "role": "func",
                        "value": "numpy.lib.recfunctions.repack_fields"
                      },
                      "type": "Directive"
                    },
                    {
                      "data": {
                        "value": ". "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "domain": null,
                        "role": "func",
                        "value": "numpy.lib.recfunctions.structured_to_unstructured"
                      },
                      "type": "Directive"
                    },
                    {
                      "data": {
                        "value": ", "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "domain": null,
                        "role": "func",
                        "value": "numpy.lib.recfunctions.unstructured_to_structured"
                      },
                      "type": "Directive"
                    },
                    {
                      "data": {
                        "value": ", "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "domain": null,
                        "role": "func",
                        "value": "numpy.lib.recfunctions.apply_along_fields"
                      },
                      "type": "Directive"
                    },
                    {
                      "data": {
                        "value": ", "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "domain": null,
                        "role": "func",
                        "value": "numpy.lib.recfunctions.assign_fields_by_name"
                      },
                      "type": "Directive"
                    },
                    {
                      "data": {
                        "value": ",  and "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "domain": null,
                        "role": "func",
                        "value": "numpy.lib.recfunctions.require_fields"
                      },
                      "type": "Directive"
                    },
                    {
                      "data": {
                        "value": "."
                      },
                      "type": "Words"
                    }
                  ]
                },
                "type": "Paragraph"
              },
              {
                "data": {
                  "children": [
                    {
                      "data": {
                        "value": "The function "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "domain": null,
                        "role": "func",
                        "value": "numpy.lib.recfunctions.repack_fields"
                      },
                      "type": "Directive"
                    },
                    {
                      "data": {
                        "value": " can always be used to reproduce the old behavior, as it will return a packed copy of the structured array. The code above, for example, can be replaced with:"
                      },
                      "type": "Words"
                    }
                  ]
                },
                "type": "Paragraph"
              },
              {
                "data": {
                  "children": [
                    {
                      "data": {
                        "value": ">>> from numpy.lib.recfunctions import repack_fields\n>>> repack_fields(a[['a', 'c']]).view('i8')  # supported in 1.16\narray([0, 0, 0])"
                      },
                      "type": "BlockVerbatim"
                    }
                  ]
                },
                "type": "BlockQuote"
              },
              {
                "data": {
                  "children": [
                    {
                      "data": {
                        "value": "Furthermore, numpy now provides a new function "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "domain": null,
                        "role": "func",
                        "value": "numpy.lib.recfunctions.structured_to_unstructured"
                      },
                      "type": "Directive"
                    },
                    {
                      "data": {
                        "value": " which is a safer and more efficient alternative for users who wish to convert structured arrays to unstructured arrays, as the view above is often intended to do. This function allows safe conversion to an unstructured type taking into account padding, often avoids a copy, and also casts the datatypes as needed, unlike the view. Code such as:"
                      },
                      "type": "Words"
                    }
                  ]
                },
                "type": "Paragraph"
              },
              {
                "data": {
                  "children": [
                    {
                      "data": {
                        "value": ">>> b = np.zeros(3, dtype=[('x', 'f4'), ('y', 'f4'), ('z', 'f4')])\n>>> b[['x', 'z']].view('f4')\narray([0., 0., 0., 0., 0., 0., 0., 0., 0.], dtype=float32)"
                      },
                      "type": "BlockVerbatim"
                    }
                  ]
                },
                "type": "BlockQuote"
              },
              {
                "data": {
                  "children": [
                    {
                      "data": {
                        "value": "can be made safer by replacing with:"
                      },
                      "type": "Words"
                    }
                  ]
                },
                "type": "Paragraph"
              },
              {
                "data": {
                  "children": [
                    {
                      "data": {
                        "value": ">>> from numpy.lib.recfunctions import structured_to_unstructured\n>>> structured_to_unstructured(b[['x', 'z']])\narray([[0., 0.],\n       [0., 0.],\n       [0., 0.]], dtype=float32)"
                      },
                      "type": "BlockVerbatim"
                    }
                  ]
                },
                "type": "BlockQuote"
              }
            ],
            "kind": "warning",
            "title": ""
          },
          "type": "Admonition"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Assignment to an array with a multi-field index modifies the original array::   "
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": ">>> a[['a', 'c']] = (2, 3)\n>>> a\narray([(2, 0, 3.), (2, 0, 3.), (2, 0, 3.)],\n      dtype=[('a', '<i4'), ('b', '<i4'), ('c', '<f4')])"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "This obeys the structured array assignment rules described above. For example, this means that one can swap the values of two fields using appropriate multi-field indexes::   "
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": ">>> a[['a', 'c']] = a[['c', 'a']]"
          },
          "type": "BlockVerbatim"
        }
      ],
      "title": "Accessing Multiple Fields"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Indexing a single element of a structured array (with an integer index) returns a structured scalar::   "
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": ">>> x = np.array([(1, 2., 3.)], dtype='i, f, f')\n>>> scalar = x[0]\n>>> scalar\n(1, 2., 3.)\n>>> type(scalar)\n<class 'numpy.void'>"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Unlike other numpy scalars, structured scalars are mutable and act like views into the original array, such that modifying the scalar will modify the original array. Structured scalars also support access and assignment by field name::   "
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": ">>> x = np.array([(1, 2), (3, 4)], dtype=[('foo', 'i8'), ('bar', 'f4')])\n>>> s = x[0]\n>>> s['bar'] = 100\n>>> x\narray([(1, 100.), (3, 4.)],\n      dtype=[('foo', '<i8'), ('bar', '<f4')])"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Similarly to tuples, structured scalars can also be indexed with an integer::   "
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": ">>> scalar = np.array([(1, 2., 3.)], dtype='i, f, f')[0]\n>>> scalar[0]\n1\n>>> scalar[1] = 4"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Thus, tuples might be thought of as the native Python equivalent to numpy's structured types, much like native python integers are the equivalent to numpy's integer types. Structured scalars may be converted to a tuple by calling "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "numpy.ndarray.item"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": "   "
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": ">>> scalar.item(), type(scalar.item())\n((1, 4.0, 3.0), <class 'tuple'>)"
          },
          "type": "BlockVerbatim"
        }
      ],
      "title": "Indexing with an Integer to get a Structured Scalar"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "In order to prevent clobbering object pointers in fields of "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "object"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " type, numpy currently does not allow views of structured arrays containing objects."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "Viewing Structured Arrays Containing Objects"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "If the dtypes of two void structured arrays are equal, testing the equality of the arrays will result in a boolean array with the dimensions of the original arrays, with elements set to "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "True"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " where all fields of the corresponding structures are equal. Structured dtypes are equal if the field names, dtypes and titles are the same, ignoring endianness, and the fields are in the same order::   "
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": ">>> a = np.zeros(2, dtype=[('a', 'i4'), ('b', 'i4')])\n>>> b = np.ones(2, dtype=[('a', 'i4'), ('b', 'i4')])\n>>> a == b\narray([False, False])"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Currently, if the dtypes of two void structured arrays are not equivalent the comparison fails, returning the scalar value "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "False"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ". This behavior is deprecated as of numpy 1.10 and will raise an error or perform elementwise comparison in the future."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "The "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "<"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " and "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    ">"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " operators always return "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "False"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " when comparing void structured arrays, and arithmetic and bitwise operations are not supported."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "Structure Comparison"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "As an optional convenience numpy provides an ndarray subclass, "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "numpy.recarray"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " that allows access to fields of structured arrays by attribute instead of only by index. Record arrays use a special datatype, "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "numpy.record"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", that allows field access by attribute on the structured scalars obtained from the array. The "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "numpy.rec"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " module provides functions for creating recarrays from various objects. Additional helper functions for creating and manipulating structured arrays can be found in "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "numpy.lib.recfunctions"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": "."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "The simplest way to create a record array is with "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "numpy.rec.array <numpy.core.records.array>"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": "   "
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": ">>> recordarr = np.rec.array([(1, 2., 'Hello'), (2, 3., \"World\")],\n...                    dtype=[('foo', 'i4'),('bar', 'f4'), ('baz', 'S10')])\n>>> recordarr.bar\narray([2., 3.], dtype=float32)\n>>> recordarr[1:2]\nrec.array([(2, 3., b'World')],\n      dtype=[('foo', '<i4'), ('bar', '<f4'), ('baz', 'S10')])\n>>> recordarr[1:2].foo\narray([2], dtype=int32)\n>>> recordarr.foo[1:2]\narray([2], dtype=int32)\n>>> recordarr[1].baz\nb'World'"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": [
                    "numpy.rec.array <numpy.core.records.array>"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " can convert a wide variety of arguments into record arrays, including structured arrays::   "
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": ">>> arr = np.array([(1, 2., 'Hello'), (2, 3., \"World\")],\n...             dtype=[('foo', 'i4'), ('bar', 'f4'), ('baz', 'S10')])\n>>> recordarr = np.rec.array(arr)"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "The "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "numpy.rec"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " module provides a number of other convenience functions for creating record arrays, see "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "record array creation routines\n<routines.array-creation.rec>"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": "."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "A record array representation of a structured array can be obtained using the appropriate "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "view <numpy-ndarray-view>"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": "   "
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": ">>> arr = np.array([(1, 2., 'Hello'), (2, 3., \"World\")],\n...                dtype=[('foo', 'i4'),('bar', 'f4'), ('baz', 'a10')])\n>>> recordarr = arr.view(dtype=np.dtype((np.record, arr.dtype)),\n...                      type=np.recarray)"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "For convenience, viewing an ndarray as type "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "numpy.recarray"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " will automatically convert to "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "numpy.record"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " datatype, so the dtype can be left out of the view::   "
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": ">>> recordarr = arr.view(np.recarray)\n>>> recordarr.dtype\ndtype((numpy.record, [('foo', '<i4'), ('bar', '<f4'), ('baz', 'S10')]))"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "To get back to a plain ndarray both the dtype and type must be reset. The following view does so, taking into account the unusual case that the recordarr was not a structured type::   "
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": ">>> arr2 = recordarr.view(recordarr.dtype.fields or recordarr.dtype, np.ndarray)"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Record array fields accessed by index or by attribute are returned as a record array if the field has a structured type but as a plain ndarray otherwise. ::   "
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": ">>> recordarr = np.rec.array([('Hello', (1, 2)), (\"World\", (3, 4))],\n...                 dtype=[('foo', 'S6'),('bar', [('A', int), ('B', int)])])\n>>> type(recordarr.foo)\n<class 'numpy.ndarray'>\n>>> type(recordarr.bar)\n<class 'numpy.recarray'>"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Note that if a field has the same name as an ndarray attribute, the ndarray attribute takes precedence. Such fields will be inaccessible by attribute but will still be accessible by index."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": "Record Arrays"
    },
    {
      "children": [
        {
          "data": {
            "argument": "numpy.lib.recfunctions",
            "content": "",
            "name": "automodule",
            "options": [
              [
                "members",
                ""
              ]
            ]
          },
          "type": "BlockDirective"
        }
      ],
      "title": "Recarray Helper Functions"
    }
  ],
  "example_section_data": {
    "children": [],
    "title": null
  },
  "item_file": null,
  "item_line": null,
  "item_type": null,
  "ordered_sections": [],
  "references": null,
  "see_also": [],
  "signature": {
    "value": null
  }
}