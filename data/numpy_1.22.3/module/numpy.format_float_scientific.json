{
  "_content": {
    "Attributes": {
      "children": [],
      "title": null
    },
    "Extended Summary": {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Provides control over rounding, trimming and padding. Uses and assumes IEEE unbiased rounding. Uses the \"Dragon4\" algorithm."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": null
    },
    "Methods": {
      "children": [],
      "title": null
    },
    "Notes": {
      "children": [],
      "title": null
    },
    "Other Parameters": {
      "children": [],
      "title": null
    },
    "Parameters": {
      "children": [
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Value to format."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "x",
            "type_": "python float or numpy floating scalar"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Maximum number of digits to print. May be None if "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "local",
                        "reference": {
                          "kind": "local",
                          "module": null,
                          "path": "unique",
                          "version": null
                        },
                        "value": "unique"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": " is "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "True"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": ", but must be an integer if unique is "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "False"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": "."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "precision",
            "type_": "non-negative integer or None, optional"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "If "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "True"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": ", use a digit-generation strategy which gives the shortest representation which uniquely identifies the floating-point number from other values of the same type, by judicious rounding. If "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "local",
                        "reference": {
                          "kind": "local",
                          "module": null,
                          "path": "precision",
                          "version": null
                        },
                        "value": "precision"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": " is given fewer digits than necessary can be printed. If "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "local",
                        "reference": {
                          "kind": "local",
                          "module": null,
                          "path": "min_digits",
                          "version": null
                        },
                        "value": "min_digits"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": " is given more can be printed, in which cases the last digit is rounded with unbiased rounding. If "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "False"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": ", digits are generated as if printing an infinite-precision value and stopping after "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "local",
                        "reference": {
                          "kind": "local",
                          "module": null,
                          "path": "precision",
                          "version": null
                        },
                        "value": "precision"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": " digits, rounding the remaining value with unbiased rounding"
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "unique",
            "type_": "boolean, optional"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Controls post-processing trimming of trailing digits, as follows:"
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "trim",
            "type_": "one of 'k', '.', '0', '-', optional"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Whether to show the sign for positive values."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "sign",
            "type_": "boolean, optional"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Pad the left side of the string with whitespace until at least that many characters are to the left of the decimal point."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "pad_left",
            "type_": "non-negative integer, optional"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Pad the exponent with zeros until it contains at least this many digits. If omitted, the exponent will be at least 2 digits."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "exp_digits",
            "type_": "non-negative integer, optional"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Minimum number of digits to print. This only has an effect for "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "domain": null,
                        "role": null,
                        "value": "unique=True"
                      },
                      "type": "Directive"
                    },
                    {
                      "data": {
                        "value": ". In that case more digits than necessary to uniquely identify the value may be printed and rounded unbiased."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              },
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "-- versionadded:: 1.21.0"
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "min_digits",
            "type_": "non-negative integer or None, optional"
          },
          "type": "Param"
        }
      ],
      "title": null
    },
    "Raises": {
      "children": [],
      "title": null
    },
    "Receives": {
      "children": [],
      "title": null
    },
    "Returns": {
      "children": [
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "The string representation of the floating point value"
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "rep",
            "type_": "string"
          },
          "type": "Param"
        }
      ],
      "title": null
    },
    "Summary": {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Format a floating-point scalar as a decimal string in scientific notation."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": null
    },
    "Warnings": {
      "children": [],
      "title": null
    },
    "Warns": {
      "children": [],
      "title": null
    },
    "Yields": {
      "children": [],
      "title": null
    }
  },
  "aliases": [
    "numpy.format_float_scientific"
  ],
  "arbitrary": [],
  "example_section_data": {
    "children": [
      {
        "data": {
          "ce_status": "execed",
          "entries": [
            [
              "np",
              "numpy",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "format_float_scientific",
              "numpy.format_float_scientific",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "np",
              "numpy",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "float32",
              "numpy.floating",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "np",
              "numpy",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "pi",
              "builtins.float",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": "'3.1415927e+00'"
        },
        "type": "Code"
      },
      {
        "data": {
          "ce_status": "execed",
          "entries": [
            [
              "s",
              "numpy.floating",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "np",
              "numpy",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "float32",
              "numpy.floating",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "1.23e24",
              "",
              "mf"
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "np",
              "numpy",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "format_float_scientific",
              "numpy.format_float_scientific",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "s",
              "numpy.floating",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "unique",
              null,
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "False",
              null,
              "kc"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "precision",
              null,
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "15",
              "",
              "mi"
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": "'1.230000071797338e+24'"
        },
        "type": "Code"
      },
      {
        "data": {
          "ce_status": "execed",
          "entries": [
            [
              "np",
              "numpy",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "format_float_scientific",
              "numpy.format_float_scientific",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "s",
              "numpy.floating",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "exp_digits",
              null,
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "4",
              "",
              "mi"
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": "'1.23e+0024'"
        },
        "type": "Code"
      }
    ],
    "title": null
  },
  "item_file": "/numpy/core/arrayprint.py",
  "item_line": 1050,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns",
    "See Also",
    "Examples"
  ],
  "references": null,
  "refs": [
    "builtins.float",
    "format_float_positional",
    "numpy",
    "numpy.floating",
    "numpy.format_float_scientific"
  ],
  "see_also": [
    {
      "descriptions": [],
      "name": {
        "exists": true,
        "name": "format_float_positional",
        "ref": "numpy.format_float_positional"
      },
      "type": null
    }
  ],
  "signature": {
    "value": "format_float_scientific(x, precision=None, unique=True, trim='k', sign=False, pad_left=None, exp_digits=None, min_digits=None)"
  }
}