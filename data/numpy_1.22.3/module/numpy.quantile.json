{
  "_content": {
    "Attributes": {
      "children": [],
      "title": null
    },
    "Extended Summary": {
      "children": [
        {
          "data": {
            "children": [
              {
                "inline": [
                  {
                    "data": {
                      "value": "1.15.0 "
                    },
                    "type": "Words"
                  }
                ],
                "inner": []
              }
            ],
            "kind": "versionadded",
            "title": "TODO"
          },
          "type": "Admonition"
        }
      ],
      "title": null
    },
    "Methods": {
      "children": [],
      "title": null
    },
    "Notes": {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Given a vector "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "V"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " of length "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "N"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", the q-th quantile of "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "V"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " is the value "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "q"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " of the way from the minimum to the maximum in a sorted copy of "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "V"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ". The values and distances of the two nearest neighbors as well as the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "exists": true,
                  "kind": "local",
                  "reference": {
                    "kind": "local",
                    "module": null,
                    "path": "method",
                    "version": null
                  },
                  "value": "method"
                },
                "type": "Link"
              },
              {
                "data": {
                  "value": " parameter will determine the quantile if the normalized ranking does not match the location of "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "q"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " exactly. This function is the same as the median if "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "q=0.5"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", the same as the minimum if "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "q=0.0"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " and the same as the maximum if "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "q=1.0"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": "."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "This optional "
                },
                "type": "Words"
              },
              {
                "data": {
                  "exists": true,
                  "kind": "local",
                  "reference": {
                    "kind": "local",
                    "module": null,
                    "path": "method",
                    "version": null
                  },
                  "value": "method"
                },
                "type": "Link"
              },
              {
                "data": {
                  "value": " parameter specifies the method to use when the desired quantile lies between two data points "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "i < j"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ". If "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "g"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " is the fractional part of the index surrounded by "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "i"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " and alpha and beta are correction constants modifying i and j."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": "i + g = ( q - alpha) / ( n - alpha - beta + 1 ) "
          },
          "type": "BlockMath"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "The different methods then work as follows"
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "dd": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "method 1 of H&F .     This method gives discontinuous results:     * if g > 0 ; then take j     * if g = 0 ; then take i"
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ],
                "dt": {
                  "inline": [
                    {
                      "data": {
                        "value": "inverted_cdf:"
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                }
              }
            ]
          },
          "type": "DefList"
        },
        {
          "data": {
            "children": [
              {
                "dd": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "method 2 of H&F .     This method give discontinuous results:     * if g > 0 ; then take j     * if g = 0 ; then average between bounds"
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ],
                "dt": {
                  "inline": [
                    {
                      "data": {
                        "value": "averaged_inverted_cdf:"
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                }
              }
            ]
          },
          "type": "DefList"
        },
        {
          "data": {
            "children": [
              {
                "dd": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "method 3 of H&F .     This method give discontinuous results:     * if g > 0 ; then take j     * if g = 0 and index is odd ; then take j     * if g = 0 and index is even ; then take i"
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ],
                "dt": {
                  "inline": [
                    {
                      "data": {
                        "value": "closest_observation:"
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                }
              }
            ]
          },
          "type": "DefList"
        },
        {
          "data": {
            "children": [
              {
                "dd": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "method 4 of H&F .     This method give continuous results using:     * alpha = 0     * beta = 1"
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ],
                "dt": {
                  "inline": [
                    {
                      "data": {
                        "value": "interpolated_inverted_cdf:"
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                }
              }
            ]
          },
          "type": "DefList"
        },
        {
          "data": {
            "children": [
              {
                "dd": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "method 5 of H&F .     This method give continuous results using:     * alpha = 1/2     * beta = 1/2"
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ],
                "dt": {
                  "inline": [
                    {
                      "data": {
                        "value": "hazen:"
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                }
              }
            ]
          },
          "type": "DefList"
        },
        {
          "data": {
            "children": [
              {
                "dd": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "method 6 of H&F .     This method give continuous results using:     * alpha = 0     * beta = 0"
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ],
                "dt": {
                  "inline": [
                    {
                      "data": {
                        "value": "weibull:"
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                }
              }
            ]
          },
          "type": "DefList"
        },
        {
          "data": {
            "children": [
              {
                "dd": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "method 7 of H&F .     This method give continuous results using:     * alpha = 1     * beta = 1"
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ],
                "dt": {
                  "inline": [
                    {
                      "data": {
                        "value": "linear:"
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                }
              }
            ]
          },
          "type": "DefList"
        },
        {
          "data": {
            "children": [
              {
                "dd": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "method 8 of H&F .     This method is probably the best method if the sample     distribution function is unknown (see reference).     This method give continuous results using:     * alpha = 1/3     * beta = 1/3"
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ],
                "dt": {
                  "inline": [
                    {
                      "data": {
                        "value": "median_unbiased:"
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                }
              }
            ]
          },
          "type": "DefList"
        },
        {
          "data": {
            "children": [
              {
                "dd": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "method 9 of H&F .     This method is probably the best method if the sample     distribution function is known to be normal.     This method give continuous results using:     * alpha = 3/8     * beta = 3/8"
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ],
                "dt": {
                  "inline": [
                    {
                      "data": {
                        "value": "normal_unbiased:"
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                }
              }
            ]
          },
          "type": "DefList"
        },
        {
          "data": {
            "children": [
              {
                "dd": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "NumPy method kept for backwards compatibility.     Takes "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "i"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " as the interpolation point."
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ],
                "dt": {
                  "inline": [
                    {
                      "data": {
                        "value": "lower:"
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                }
              }
            ]
          },
          "type": "DefList"
        },
        {
          "data": {
            "children": [
              {
                "dd": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "NumPy method kept for backwards compatibility.     Takes "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "j"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " as the interpolation point."
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ],
                "dt": {
                  "inline": [
                    {
                      "data": {
                        "value": "higher:"
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                }
              }
            ]
          },
          "type": "DefList"
        },
        {
          "data": {
            "children": [
              {
                "dd": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "NumPy method kept for backwards compatibility.     Takes "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "i"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " or "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "j"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": ", whichever is nearest."
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ],
                "dt": {
                  "inline": [
                    {
                      "data": {
                        "value": "nearest:"
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                }
              }
            ]
          },
          "type": "DefList"
        },
        {
          "data": {
            "children": [
              {
                "dd": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "NumPy method kept for backwards compatibility.     Uses "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "(i + j) / 2"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": "."
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ],
                "dt": {
                  "inline": [
                    {
                      "data": {
                        "value": "midpoint:"
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                }
              }
            ]
          },
          "type": "DefList"
        }
      ],
      "title": null
    },
    "Other Parameters": {
      "children": [],
      "title": null
    },
    "Parameters": {
      "children": [
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Input array or object that can be converted to an array."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "a",
            "type_": "array_like"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Quantile or sequence of quantiles to compute, which must be between 0 and 1 inclusive."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "q",
            "type_": "array_like of float"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Axis or axes along which the quantiles are computed. The default is to compute the quantile(s) along a flattened version of the array."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "axis",
            "type_": "{int, tuple of int, None}, optional"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Alternative output array in which to place the result. It must have the same shape and buffer length as the expected output, but the type (of the output) will be cast if necessary."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "out",
            "type_": "ndarray, optional"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "If True, then allow the input array "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "local",
                        "reference": {
                          "kind": "local",
                          "module": null,
                          "path": "a",
                          "version": null
                        },
                        "value": "a"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": " to be modified by intermediate calculations, to save memory. In this case, the contents of the input "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "local",
                        "reference": {
                          "kind": "local",
                          "module": null,
                          "path": "a",
                          "version": null
                        },
                        "value": "a"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": " after this function completes is undefined."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "overwrite_input",
            "type_": "bool, optional"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "This parameter specifies the method to use for estimating the quantile.  There are many different methods, some unique to NumPy. See the notes for explanation.  The options sorted by their R type as summarized in the H&F paper  are:"
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              },
              {
                "data": {
                  "children": [
                    {
                      "value": [
                        {
                          "data": {
                            "inline": [
                              {
                                "data": {
                                  "value": "'inverted_cdf'"
                                },
                                "type": "Words"
                              }
                            ],
                            "inner": []
                          },
                          "type": "Paragraph"
                        }
                      ]
                    },
                    {
                      "value": [
                        {
                          "data": {
                            "inline": [
                              {
                                "data": {
                                  "value": "'averaged_inverted_cdf'"
                                },
                                "type": "Words"
                              }
                            ],
                            "inner": []
                          },
                          "type": "Paragraph"
                        }
                      ]
                    },
                    {
                      "value": [
                        {
                          "data": {
                            "inline": [
                              {
                                "data": {
                                  "value": "'closest_observation'"
                                },
                                "type": "Words"
                              }
                            ],
                            "inner": []
                          },
                          "type": "Paragraph"
                        }
                      ]
                    },
                    {
                      "value": [
                        {
                          "data": {
                            "inline": [
                              {
                                "data": {
                                  "value": "'interpolated_inverted_cdf'"
                                },
                                "type": "Words"
                              }
                            ],
                            "inner": []
                          },
                          "type": "Paragraph"
                        }
                      ]
                    },
                    {
                      "value": [
                        {
                          "data": {
                            "inline": [
                              {
                                "data": {
                                  "value": "'hazen'"
                                },
                                "type": "Words"
                              }
                            ],
                            "inner": []
                          },
                          "type": "Paragraph"
                        }
                      ]
                    },
                    {
                      "value": [
                        {
                          "data": {
                            "inline": [
                              {
                                "data": {
                                  "value": "'weibull'"
                                },
                                "type": "Words"
                              }
                            ],
                            "inner": []
                          },
                          "type": "Paragraph"
                        }
                      ]
                    },
                    {
                      "value": [
                        {
                          "data": {
                            "inline": [
                              {
                                "data": {
                                  "value": "'linear'  (default)"
                                },
                                "type": "Words"
                              }
                            ],
                            "inner": []
                          },
                          "type": "Paragraph"
                        }
                      ]
                    },
                    {
                      "value": [
                        {
                          "data": {
                            "inline": [
                              {
                                "data": {
                                  "value": "'median_unbiased'"
                                },
                                "type": "Words"
                              }
                            ],
                            "inner": []
                          },
                          "type": "Paragraph"
                        }
                      ]
                    },
                    {
                      "value": [
                        {
                          "data": {
                            "inline": [
                              {
                                "data": {
                                  "value": "'normal_unbiased'"
                                },
                                "type": "Words"
                              }
                            ],
                            "inner": []
                          },
                          "type": "Paragraph"
                        }
                      ]
                    }
                  ]
                },
                "type": "EnumeratedList"
              },
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "The first three methods are discontiuous.  NumPy further defines the following discontinuous variations of the default 'linear' (7.) option:"
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              },
              {
                "data": {
                  "children": [
                    {
                      "value": [
                        {
                          "data": {
                            "inline": [
                              {
                                "data": {
                                  "value": "'lower'"
                                },
                                "type": "Words"
                              }
                            ],
                            "inner": []
                          },
                          "type": "Paragraph"
                        }
                      ]
                    },
                    {
                      "value": [
                        {
                          "data": {
                            "inline": [
                              {
                                "data": {
                                  "value": "'higher',"
                                },
                                "type": "Words"
                              }
                            ],
                            "inner": []
                          },
                          "type": "Paragraph"
                        }
                      ]
                    },
                    {
                      "value": [
                        {
                          "data": {
                            "inline": [
                              {
                                "data": {
                                  "value": "'midpoint'"
                                },
                                "type": "Words"
                              }
                            ],
                            "inner": []
                          },
                          "type": "Paragraph"
                        }
                      ]
                    },
                    {
                      "value": [
                        {
                          "data": {
                            "inline": [
                              {
                                "data": {
                                  "value": "'nearest'"
                                },
                                "type": "Words"
                              }
                            ],
                            "inner": []
                          },
                          "type": "Paragraph"
                        }
                      ]
                    }
                  ]
                },
                "type": "BulletList"
              },
              {
                "data": {
                  "children": [
                    {
                      "inline": [
                        {
                          "data": {
                            "value": "This argument was previously called \" interpolation \" and only offered the \" linear \" default and last four options. "
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    }
                  ],
                  "kind": "versionchanged",
                  "title": "1.22.0"
                },
                "type": "Admonition"
              }
            ],
            "param": "method",
            "type_": "str, optional"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "If this is set to True, the axes which are reduced are left in the result as dimensions with size one. With this option, the result will broadcast correctly against the original array "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "local",
                        "reference": {
                          "kind": "local",
                          "module": null,
                          "path": "a",
                          "version": null
                        },
                        "value": "a"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": "."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "keepdims",
            "type_": "bool, optional"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Deprecated name for the method keyword argument."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              },
              {
                "data": {
                  "children": [
                    {
                      "inline": [
                        {
                          "data": {
                            "value": "1.22.0 "
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    }
                  ],
                  "kind": "deprecated",
                  "title": "TODO"
                },
                "type": "Admonition"
              }
            ],
            "param": "interpolation",
            "type_": "str, optional"
          },
          "type": "Param"
        }
      ],
      "title": null
    },
    "Raises": {
      "children": [],
      "title": null
    },
    "Receives": {
      "children": [],
      "title": null
    },
    "Returns": {
      "children": [
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "If "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "local",
                        "reference": {
                          "kind": "local",
                          "module": null,
                          "path": "q",
                          "version": null
                        },
                        "value": "q"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": " is a single quantile and "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "domain": null,
                        "role": null,
                        "value": "axis=None"
                      },
                      "type": "Directive"
                    },
                    {
                      "data": {
                        "value": ", then the result is a scalar. If multiple quantiles are given, first axis of the result corresponds to the quantiles. The other axes are the axes that remain after the reduction of "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "local",
                        "reference": {
                          "kind": "local",
                          "module": null,
                          "path": "a",
                          "version": null
                        },
                        "value": "a"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": ". If the input contains integers or floats smaller than "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "float64"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": ", the output data-type is "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "float64"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": ". Otherwise, the output data-type is the same as that of the input. If "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "local",
                        "reference": {
                          "kind": "local",
                          "module": null,
                          "path": "out",
                          "version": null
                        },
                        "value": "out"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": " is specified, that array is returned instead."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "quantile",
            "type_": "scalar or ndarray"
          },
          "type": "Param"
        }
      ],
      "title": null
    },
    "Summary": {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Compute the q-th quantile of the data along the specified axis."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": null
    },
    "Warnings": {
      "children": [],
      "title": null
    },
    "Warns": {
      "children": [],
      "title": null
    },
    "Yields": {
      "children": [],
      "title": null
    }
  },
  "aliases": [
    "numpy.quantile"
  ],
  "arbitrary": [],
  "example_section_data": {
    "children": [
      {
        "data": {
          "ce_status": "execed",
          "entries": [
            [
              "a",
              "numpy.ndarray",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "np",
              "numpy",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "array",
              "numpy.array",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "10",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "7",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "4",
              "",
              "mi"
            ],
            [
              "]",
              "",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "3",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "2",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "1",
              "",
              "mi"
            ],
            [
              "]",
              "",
              ""
            ],
            [
              "]",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "a",
              "numpy.ndarray",
              ""
            ]
          ],
          "out": "array([[10,  7,  4],\n       [ 3,  2,  1]])"
        },
        "type": "Code"
      },
      {
        "data": {
          "ce_status": "execed",
          "entries": [
            [
              "np",
              "numpy",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "quantile",
              "numpy.quantile",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "a",
              "numpy.ndarray",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "0.5",
              "",
              "mf"
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": "3.5"
        },
        "type": "Code"
      },
      {
        "data": {
          "ce_status": "execed",
          "entries": [
            [
              "np",
              "numpy",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "quantile",
              "numpy.quantile",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "a",
              "numpy.ndarray",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "0.5",
              "",
              "mf"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "axis",
              null,
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "0",
              "",
              "mi"
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": "array([6.5, 4.5, 2.5])"
        },
        "type": "Code"
      },
      {
        "data": {
          "ce_status": "execed",
          "entries": [
            [
              "np",
              "numpy",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "quantile",
              "numpy.quantile",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "a",
              "numpy.ndarray",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "0.5",
              "",
              "mf"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "axis",
              null,
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "1",
              "",
              "mi"
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": "array([7.,  2.])"
        },
        "type": "Code"
      },
      {
        "data": {
          "ce_status": "execed",
          "entries": [
            [
              "np",
              "numpy",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "quantile",
              "numpy.quantile",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "a",
              "numpy.ndarray",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "0.5",
              "",
              "mf"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "axis",
              null,
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "1",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "keepdims",
              null,
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "True",
              null,
              "kc"
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": "array([[7.],\n       [2.]])"
        },
        "type": "Code"
      },
      {
        "data": {
          "ce_status": "execed",
          "entries": [
            [
              "m",
              "builtins.ellipsis",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "np",
              "numpy",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "quantile",
              "numpy.quantile",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "a",
              "numpy.ndarray",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "0.5",
              "",
              "mf"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "axis",
              null,
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "0",
              "",
              "mi"
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "out",
              null,
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "np",
              "numpy",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "zeros_like",
              "numpy.zeros_like",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "m",
              "builtins.ellipsis",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "np",
              "numpy",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "quantile",
              "numpy.quantile",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "a",
              "numpy.ndarray",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "0.5",
              "",
              "mf"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "axis",
              null,
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "0",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "out",
              "numpy.ndarray",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "out",
              "numpy.ndarray",
              ""
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": "array([6.5, 4.5, 2.5])"
        },
        "type": "Code"
      },
      {
        "data": {
          "ce_status": "execed",
          "entries": [
            [
              "m",
              "builtins.ellipsis",
              ""
            ]
          ],
          "out": "array([6.5, 4.5, 2.5])"
        },
        "type": "Code"
      },
      {
        "data": {
          "ce_status": "execed",
          "entries": [
            [
              "b",
              null,
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "a",
              "numpy.ndarray",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "copy",
              "numpy._ArrayOrScalarCommon.copy",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "np",
              "numpy",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "quantile",
              "numpy.quantile",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "b",
              "numpy.ndarray",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "0.5",
              "",
              "mf"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "axis",
              null,
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "1",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "overwrite_input",
              null,
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "True",
              null,
              "kc"
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": "array([7.,  2.])"
        },
        "type": "Code"
      },
      {
        "data": {
          "ce_status": "execed",
          "entries": [
            [
              "assert",
              null,
              "k"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "not",
              null,
              "ow"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "np",
              "numpy",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "all",
              "numpy.all",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "a",
              "numpy.ndarray",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "==",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "b",
              "numpy.ndarray",
              ""
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": ""
        },
        "type": "Code"
      },
      {
        "data": {
          "inline": [
            {
              "data": {
                "value": "See also "
              },
              "type": "Words"
            },
            {
              "data": {
                "exists": true,
                "kind": "module",
                "reference": {
                  "kind": "module",
                  "module": "numpy",
                  "path": "numpy.percentile",
                  "version": "1.22.3"
                },
                "value": "numpy.percentile"
              },
              "type": "Link"
            },
            {
              "data": {
                "value": " for a visualization of most methods."
              },
              "type": "Words"
            }
          ],
          "inner": []
        },
        "type": "Paragraph"
      }
    ],
    "title": null
  },
  "item_file": "/numpy/lib/function_base.py",
  "item_line": 4143,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns",
    "See Also",
    "Notes",
    "Examples",
    "References"
  ],
  "references": null,
  "refs": [
    "builtins.ellipsis",
    "mean",
    "median",
    "nanquantile",
    "numpy",
    "numpy._ArrayOrScalarCommon.copy",
    "numpy.all",
    "numpy.array",
    "numpy.ndarray",
    "numpy.quantile",
    "numpy.zeros_like",
    "percentile"
  ],
  "see_also": [
    {
      "descriptions": [],
      "name": {
        "exists": true,
        "name": "mean",
        "ref": "numpy.mean"
      },
      "type": null
    },
    {
      "descriptions": [
        {
          "inline": [
            {
              "data": {
                "value": "equivalent to quantile, but with q in the range [0, 100]."
              },
              "type": "Words"
            }
          ],
          "inner": []
        }
      ],
      "name": {
        "exists": true,
        "name": "percentile",
        "ref": "numpy.percentile"
      },
      "type": null
    },
    {
      "descriptions": [
        {
          "inline": [
            {
              "data": {
                "value": "equivalent to "
              },
              "type": "Words"
            },
            {
              "data": {
                "value": [
                  "quantile(..., 0.5)"
                ]
              },
              "type": "Verbatim"
            }
          ],
          "inner": []
        }
      ],
      "name": {
        "exists": true,
        "name": "median",
        "ref": "numpy.median"
      },
      "type": null
    },
    {
      "descriptions": [],
      "name": {
        "exists": true,
        "name": "nanquantile",
        "ref": "numpy.nanquantile"
      },
      "type": null
    }
  ],
  "signature": {
    "value": "quantile(a, q, axis=None, out=None, overwrite_input=False, method='linear', keepdims=False, *, interpolation=None)"
  }
}