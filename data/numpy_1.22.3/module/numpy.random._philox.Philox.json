{
  "_content": {
    "Attributes": {
      "children": [
        {
          "data": {
            "children": [
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Lock instance that is shared so that the same bit git generator can be used in multiple Generators without corrupting the state. Code that generates values from a bit generator should hold the bit generator's lock."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "lock: threading.Lock",
                "type_": ""
              }
            ]
          },
          "type": "Parameters"
        }
      ],
      "title": null
    },
    "Extended Summary": {
      "children": [],
      "title": null
    },
    "Methods": {
      "children": [],
      "title": null
    },
    "Notes": {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Philox is a 64-bit PRNG that uses a counter-based design based on weaker (and faster) versions of cryptographic functions . Instances using different values of the key produce independent sequences.  Philox has a period of "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": "2^{256} - 1"
                },
                "type": "Math"
              },
              {
                "data": {
                  "value": " and supports arbitrary advancing and jumping the sequence in increments of "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": "2^{128}"
                },
                "type": "Math"
              },
              {
                "data": {
                  "value": ". These features allow multiple non-overlapping sequences to be generated."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": [
                    "Philox"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " provides a capsule containing function pointers that produce doubles, and unsigned 32 and 64- bit integers. These are not directly consumable in Python and must be consumed by a "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "Generator"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " or similar object that supports low-level access."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "content": {
                    "value": "State and Seeding"
                  }
                },
                "type": "Strong"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "The "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "Philox"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " state vector consists of a 256-bit value encoded as a 4-element uint64 array and a 128-bit value encoded as a 2-element uint64 array. The former is a counter which is incremented by 1 for every 4 64-bit randoms produced. The second is a key which determined the sequence produced. Using different keys produces independent sequences."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "The input "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "seed"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " is processed by "
                },
                "type": "Words"
              },
              {
                "data": {
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "module",
                    "module": "numpy",
                    "path": "numpy.random.bit_generator.SeedSequence",
                    "version": "1.22.3"
                  },
                  "value": "SeedSequence"
                },
                "type": "Link"
              },
              {
                "data": {
                  "value": " to generate the key. The counter is set to 0."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Alternately, one can omit the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "seed"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " parameter and set the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "key"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " and "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "counter"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " directly."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "content": {
                    "value": "Parallel Features"
                  }
                },
                "type": "Strong"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "The preferred way to use a BitGenerator in parallel applications is to use the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "module",
                    "module": "numpy",
                    "path": "numpy.random.bit_generator.ISpawnableSeedSequence.spawn",
                    "version": "1.22.3"
                  },
                  "value": "SeedSequence.spawn"
                },
                "type": "Link"
              },
              {
                "data": {
                  "value": " method to obtain entropy values, and to use these to generate new BitGenerators:"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": ">>> from numpy.random import Generator, Philox, SeedSequence\n>>> sg = SeedSequence(1234)\n>>> rg = [Generator(Philox(s)) for s in sg.spawn(10)]"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": [
                    "Philox"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " can be used in parallel applications by calling the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "jumped"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " method  to advances the state as-if "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": "2^{128}"
                },
                "type": "Math"
              },
              {
                "data": {
                  "value": " random numbers have been generated. Alternatively, "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "advance"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " can be used to advance the counter for any positive step in [0, 2**256). When using "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "jumped"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", all generators should be chained to ensure that the segments come from the same sequence."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": ">>> from numpy.random import Generator, Philox\n>>> bit_generator = Philox(1234)\n>>> rg = []\n>>> for _ in range(10):\n...    rg.append(Generator(bit_generator))\n...    bit_generator = bit_generator.jumped()"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Alternatively, "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "Philox"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " can be used in parallel applications by using a sequence of distinct keys where each instance uses different key."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": ">>> key = 2**96 + 2**33 + 2**17 + 2**9\n>>> rg = [Generator(Philox(key=key+i)) for i in range(10)]"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "content": {
                    "value": "Compatibility Guarantee"
                  }
                },
                "type": "Strong"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": [
                    "Philox"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " makes a guarantee that a fixed "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "seed"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " will always produce the same random integer stream."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": null
    },
    "Other Parameters": {
      "children": [],
      "title": null
    },
    "Parameters": {
      "children": [
        {
          "data": {
            "children": [
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "A seed to initialize the "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "exists": true,
                            "kind": "module",
                            "reference": {
                              "kind": "module",
                              "module": "numpy",
                              "path": "numpy.random.bit_generator.BitGenerator",
                              "version": "1.22.3"
                            },
                            "value": "BitGenerator"
                          },
                          "type": "Link"
                        },
                        {
                          "data": {
                            "value": ". If None, then fresh, unpredictable entropy will be pulled from the OS. If an "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "int"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " or "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "array_like[ints]"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " is passed, then it will be passed to "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "exists": true,
                            "kind": "module",
                            "reference": {
                              "kind": "module",
                              "module": "numpy",
                              "path": "numpy.random.bit_generator.SeedSequence",
                              "version": "1.22.3"
                            },
                            "value": "SeedSequence"
                          },
                          "type": "Link"
                        },
                        {
                          "data": {
                            "value": " to derive the initial "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "exists": true,
                            "kind": "module",
                            "reference": {
                              "kind": "module",
                              "module": "numpy",
                              "path": "numpy.random.bit_generator.BitGenerator",
                              "version": "1.22.3"
                            },
                            "value": "BitGenerator"
                          },
                          "type": "Link"
                        },
                        {
                          "data": {
                            "value": " state. One may also pass in a "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "exists": true,
                            "kind": "module",
                            "reference": {
                              "kind": "module",
                              "module": "numpy",
                              "path": "numpy.random.bit_generator.SeedSequence",
                              "version": "1.22.3"
                            },
                            "value": "SeedSequence"
                          },
                          "type": "Link"
                        },
                        {
                          "data": {
                            "value": " instance."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "seed",
                "type_": "{None, int, array_like[ints], SeedSequence}, optional"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Counter to use in the Philox state. Can be either a Python int (long in 2.x) in [0, 2**256) or a 4-element uint64 array. If not provided, the RNG is initialized at 0."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "counter",
                "type_": "{None, int, array_like}, optional"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Key to use in the Philox state.  Unlike "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "seed"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": ", the value in key is directly set. Can be either a Python int in [0, 2**128) or a 2-element uint64 array. "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "domain": null,
                            "role": null,
                            "value": "key"
                          },
                          "type": "Directive"
                        },
                        {
                          "data": {
                            "value": " and "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "seed"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " cannot both be used."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "key",
                "type_": "{None, int, array_like}, optional"
              }
            ]
          },
          "type": "Parameters"
        }
      ],
      "title": null
    },
    "Raises": {
      "children": [],
      "title": null
    },
    "Receives": {
      "children": [],
      "title": null
    },
    "Returns": {
      "children": [],
      "title": null
    },
    "Summary": {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Container for the Philox (4x64) pseudo-random number generator."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": null
    },
    "Warnings": {
      "children": [],
      "title": null
    },
    "Warns": {
      "children": [],
      "title": null
    },
    "Yields": {
      "children": [],
      "title": null
    }
  },
  "aliases": [
    "numpy.random.Philox"
  ],
  "arbitrary": [],
  "example_section_data": {
    "children": [
      {
        "data": {
          "ce_status": "execed",
          "entries": [
            {
              "link": {
                "data": "from",
                "type": "str"
              },
              "type": "kn"
            },
            {
              "link": {
                "data": " ",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": {
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "module",
                    "module": "numpy",
                    "path": "numpy",
                    "version": "1.22.3"
                  },
                  "value": "numpy"
                },
                "type": "Link"
              },
              "type": "nn"
            },
            {
              "link": {
                "data": ".",
                "type": "str"
              },
              "type": "nn"
            },
            {
              "link": {
                "data": {
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "module",
                    "module": "numpy",
                    "path": "numpy.random",
                    "version": "1.22.3"
                  },
                  "value": "random"
                },
                "type": "Link"
              },
              "type": "nn"
            },
            {
              "link": {
                "data": " ",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": "import",
                "type": "str"
              },
              "type": "kn"
            },
            {
              "link": {
                "data": " ",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": {
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "module",
                    "module": "numpy",
                    "path": "numpy.random._generator.Generator",
                    "version": "1.22.3"
                  },
                  "value": "Generator"
                },
                "type": "Link"
              },
              "type": ""
            },
            {
              "link": {
                "data": ",",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": " ",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": {
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "module",
                    "module": "numpy",
                    "path": "numpy.random._philox.Philox",
                    "version": "1.22.3"
                  },
                  "value": "Philox"
                },
                "type": "Link"
              },
              "type": ""
            },
            {
              "link": {
                "data": "\n",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": {
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "module",
                    "module": "numpy",
                    "path": "numpy.random._generator.Generator",
                    "version": "1.22.3"
                  },
                  "value": "rg"
                },
                "type": "Link"
              },
              "type": ""
            },
            {
              "link": {
                "data": " ",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": "=",
                "type": "str"
              },
              "type": "o"
            },
            {
              "link": {
                "data": " ",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": {
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "module",
                    "module": "numpy",
                    "path": "numpy.random._generator.Generator",
                    "version": "1.22.3"
                  },
                  "value": "Generator"
                },
                "type": "Link"
              },
              "type": ""
            },
            {
              "link": {
                "data": "(",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": {
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "module",
                    "module": "numpy",
                    "path": "numpy.random._philox.Philox",
                    "version": "1.22.3"
                  },
                  "value": "Philox"
                },
                "type": "Link"
              },
              "type": ""
            },
            {
              "link": {
                "data": "(",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": "1234",
                "type": "str"
              },
              "type": "mi"
            },
            {
              "link": {
                "data": ")",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": ")",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": "\n",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": {
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "module",
                    "module": "numpy",
                    "path": "numpy.random._generator.Generator",
                    "version": "1.22.3"
                  },
                  "value": "rg"
                },
                "type": "Link"
              },
              "type": ""
            },
            {
              "link": {
                "data": ".",
                "type": "str"
              },
              "type": "o"
            },
            {
              "link": {
                "data": {
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "module",
                    "module": "numpy",
                    "path": "numpy.random._generator.Generator.standard_normal",
                    "version": "*"
                  },
                  "value": "standard_normal"
                },
                "type": "Link"
              },
              "type": ""
            },
            {
              "link": {
                "data": "(",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": ")",
                "type": "str"
              },
              "type": ""
            }
          ],
          "out": "0.123  # random"
        },
        "type": "Code2"
      }
    ],
    "title": null
  },
  "item_file": "/numpy/random/_philox.cpython-39-darwin.so",
  "item_line": null,
  "item_type": "<class 'type'>",
  "ordered_sections": [
    "Signature",
    "Summary",
    "Parameters",
    "Attributes",
    "Notes",
    "Examples",
    "References"
  ],
  "references": null,
  "see_also": [],
  "signature": {
    "value": "Philox(seed=None, counter=None, key=None)"
  }
}