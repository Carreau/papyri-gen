{
  "_content": {
    "Attributes": {
      "children": [],
      "title": null
    },
    "Extended Summary": {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Used exclusively for the purpose static type checking, "
                },
                "type": "Words"
              },
              {
                "data": {
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "module",
                    "module": "numpy",
                    "path": "numpy.typing.NBitBase",
                    "version": "1.22.3"
                  },
                  "value": "NBitBase"
                },
                "type": "Link"
              },
              {
                "data": {
                  "value": " represents the base of a hierarchical set of subclasses. Each subsequent subclass is herein used for representing a lower level of precision, "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "e.g."
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": " "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "64Bit > 32Bit > 16Bit"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": "."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [],
            "kind": "versionadded",
            "title": "1.20"
          },
          "type": "Admonition"
        }
      ],
      "title": null
    },
    "Methods": {
      "children": [],
      "title": null
    },
    "Notes": {
      "children": [],
      "title": null
    },
    "Other Parameters": {
      "children": [],
      "title": null
    },
    "Parameters": {
      "children": [],
      "title": null
    },
    "Raises": {
      "children": [],
      "title": null
    },
    "Receives": {
      "children": [],
      "title": null
    },
    "Returns": {
      "children": [],
      "title": null
    },
    "Summary": {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "A type representing "
                },
                "type": "Words"
              },
              {
                "data": {
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "module",
                    "module": "numpy",
                    "path": "numpy.number",
                    "version": "1.22.3"
                  },
                  "value": "numpy.number"
                },
                "type": "Link"
              },
              {
                "data": {
                  "value": " precision during static type checking."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": null
    },
    "Warnings": {
      "children": [],
      "title": null
    },
    "Warns": {
      "children": [],
      "title": null
    },
    "Yields": {
      "children": [],
      "title": null
    }
  },
  "aliases": [
    "numpy.typing.NBitBase"
  ],
  "arbitrary": [],
  "example_section_data": {
    "children": [
      {
        "data": {
          "children": [
            {
              "data": {
                "value": "Below is a typical usage example: "
              },
              "type": "Words"
            },
            {
              "data": {
                "exists": true,
                "kind": "module",
                "reference": {
                  "kind": "module",
                  "module": "numpy",
                  "path": "numpy.typing.NBitBase",
                  "version": "1.22.3"
                },
                "value": "NBitBase"
              },
              "type": "Link"
            },
            {
              "data": {
                "value": " is herein used for annotating a function that takes a float and integer of arbitrary precision as arguments and returns a new float of whichever precision is largest ("
              },
              "type": "Words"
            },
            {
              "data": {
                "value": {
                  "value": "e.g."
                }
              },
              "type": "Emph"
            },
            {
              "data": {
                "value": " "
              },
              "type": "Words"
            },
            {
              "data": {
                "value": [
                  "np.float16 + np.int64 -> np.float64"
                ]
              },
              "type": "Verbatim"
            },
            {
              "data": {
                "value": ")."
              },
              "type": "Words"
            }
          ]
        },
        "type": "Paragraph"
      },
      {
        "data": {
          "argument": "python",
          "content": "",
          "name": "code-block",
          "options": []
        },
        "type": "BlockDirective"
      },
      {
        "data": {
          "value": [
            ">>> from __future__ import annotations",
            ">>> from typing import TypeVar, TYPE_CHECKING",
            ">>> import numpy as np",
            ">>> import numpy.typing as npt"
          ]
        },
        "type": "BlockQuote"
      },
      {
        "data": {
          "value": [
            ">>> T1 = TypeVar(\"T1\", bound=npt.NBitBase)",
            ">>> T2 = TypeVar(\"T2\", bound=npt.NBitBase)"
          ]
        },
        "type": "BlockQuote"
      },
      {
        "data": {
          "value": [
            ">>> def add(a: np.floating[T1], b: np.integer[T2]) -> np.floating[T1 | T2]:",
            "...     return a + b"
          ]
        },
        "type": "BlockQuote"
      },
      {
        "data": {
          "value": [
            ">>> a = np.float16()",
            ">>> b = np.int64()",
            ">>> out = add(a, b)"
          ]
        },
        "type": "BlockQuote"
      },
      {
        "data": {
          "value": [
            ">>> if TYPE_CHECKING:",
            "...     reveal_locals()",
            "...     # note: Revealed local types are:",
            "...     # note:     a: numpy.floating[numpy.typing._16Bit*]",
            "...     # note:     b: numpy.signedinteger[numpy.typing._64Bit*]",
            "...     # note:     out: numpy.floating[numpy.typing._64Bit*]"
          ]
        },
        "type": "BlockQuote"
      }
    ],
    "title": null
  },
  "item_file": "/numpy/typing/__init__.py",
  "item_line": 176,
  "item_type": "<class 'type'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Examples"
  ],
  "references": null,
  "refs": [],
  "see_also": [],
  "signature": {
    "value": null
  }
}