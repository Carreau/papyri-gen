{
  "_content": {
    "Attributes": {
      "children": [],
      "title": null
    },
    "Extended Summary": {
      "children": [],
      "title": null
    },
    "Methods": {
      "children": [],
      "title": null
    },
    "Notes": {
      "children": [],
      "title": null
    },
    "Other Parameters": {
      "children": [],
      "title": null
    },
    "Parameters": {
      "children": [],
      "title": null
    },
    "Raises": {
      "children": [],
      "title": null
    },
    "Receives": {
      "children": [],
      "title": null
    },
    "Returns": {
      "children": [],
      "title": null
    },
    "Summary": {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "To remove in the future \u2013\u2013 numpy.typing"
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": null
    },
    "Warnings": {
      "children": [],
      "title": null
    },
    "Warns": {
      "children": [],
      "title": null
    },
    "Yields": {
      "children": [],
      "title": null
    }
  },
  "aliases": [
    "numpy.typing"
  ],
  "arbitrary": [
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "inline": [
                  {
                    "data": {
                      "value": "1.20 "
                    },
                    "type": "Words"
                  }
                ],
                "inner": []
              }
            ],
            "kind": "versionadded",
            "title": "TODO"
          },
          "type": "Admonition"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Large parts of the NumPy API have PEP-484-style type annotations. In addition a number of type aliases are available to users, most prominently the two below:"
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "value": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "domain": null,
                            "role": null,
                            "value": "ArrayLike"
                          },
                          "type": "Directive"
                        },
                        {
                          "data": {
                            "value": ": objects that can be converted to arrays"
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "value": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "domain": null,
                            "role": null,
                            "value": "DTypeLike"
                          },
                          "type": "Directive"
                        },
                        {
                          "data": {
                            "value": ": objects that can be converted to dtypes"
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ]
              }
            ]
          },
          "type": "BulletList"
        },
        {
          "data": {
            "placeholder": "target",
            "value": ".. _typing-extensions: https://pypi.org/project/typing-extensions/"
          },
          "type": "Unimplemented"
        }
      ],
      "title": "Typing (:mod:`numpy.typing`)"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "inline": [
                  {
                    "data": {
                      "value": "1.21 "
                    },
                    "type": "Words"
                  }
                ],
                "inner": []
              }
            ],
            "kind": "versionadded",
            "title": "TODO"
          },
          "type": "Admonition"
        },
        {
          "data": {
            "args0": [],
            "directive_name": "automodule",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "numpy.typing.mypy_plugin "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [],
            "directive_name": "currentmodule",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "numpy.typing "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        }
      ],
      "title": "Mypy plugin"
    },
    {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "NumPy is very flexible. Trying to describe the full range of possibilities statically would result in types that are not very helpful. For that reason, the typed NumPy API is often stricter than the runtime NumPy API. This section describes some notable differences."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": "Differences from the runtime NumPy API"
    },
    {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "The "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "ArrayLike"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " type tries to avoid creating object arrays. For example,"
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "args0": [
              "python"
            ],
            "directive_name": "code-block",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": ">>> np.array ( x**2 for x in range ( 10)) array ( < generator object < genexpr> at ...>, dtype=object) "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "is valid NumPy code which will create a 0-dimensional object array. Type checkers will complain about the above example when using the NumPy types however. If you really intended to do the above, then you can either use a "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "# type: ignore"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " comment:"
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "args0": [
              "python"
            ],
            "directive_name": "code-block",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": ">>> np.array ( x**2 for x in range ( 10)) # type : ignore "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "or explicitly type the array like object as "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "~typing.Any"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": ":"
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "args0": [
              "python"
            ],
            "directive_name": "code-block",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": ">>> from typing import Any >>> array_like : Any = ( x**2 for x in range ( 10)) >>> np.array ( array_like) array ( < generator object < genexpr> at ...>, dtype=object) "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        }
      ],
      "title": "ArrayLike"
    },
    {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "It's possible to mutate the dtype of an array at runtime. For example, the following code is valid:"
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "args0": [
              "python"
            ],
            "directive_name": "code-block",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": ">>> x = np.array ( [ 1, 2]) >>> x.dtype = np.bool_ "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "This sort of mutation is not allowed by the types. Users who want to write statically typed code should instead use the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "numpy.ndarray.view"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " method to create a view of the array with a different dtype."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": "ndarray"
    },
    {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "The "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "DTypeLike"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " type tries to avoid creation of dtype objects using dictionary of fields like below:"
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "args0": [
              "python"
            ],
            "directive_name": "code-block",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": ">>> x = np.dtype ( { \" field1 \" : ( float, 1), \" field2 \" : ( int, 3)}) "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Although this is valid NumPy code, the type checker will complain about it, since its usage is discouraged. Please see : "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "Data type objects <arrays.dtypes>"
                  ]
                },
                "type": "Verbatim"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": "DTypeLike"
    },
    {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "The precision of "
                },
                "type": "Words"
              },
              {
                "data": {
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "module",
                    "module": "numpy",
                    "path": "numpy.number",
                    "version": "1.22.3"
                  },
                  "value": "numpy.number"
                },
                "type": "Link"
              },
              {
                "data": {
                  "value": " subclasses is treated as a covariant generic parameter (see "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "~NBitBase"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": "), simplifying the annotating of processes involving precision-based casting."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "args0": [
              "python"
            ],
            "directive_name": "code-block",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": ">>> from typing import TypeVar >>> import numpy as np >>> import numpy.typing as npt >>> T = TypeVar ( \" T \" , bound=npt.NBitBase) >>> def func ( a : \" np.floating [ T] \" , b : \" np.floating [ T] \" ) - > \" np.floating [ T] \" : ... ... "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Consequently, the likes of "
                },
                "type": "Words"
              },
              {
                "data": {
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "module",
                    "module": "numpy",
                    "path": "numpy.float16",
                    "version": "1.22.3"
                  },
                  "value": "~numpy.float16"
                },
                "type": "Link"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "module",
                    "module": "numpy",
                    "path": "numpy.float32",
                    "version": "1.22.3"
                  },
                  "value": "~numpy.float32"
                },
                "type": "Link"
              },
              {
                "data": {
                  "value": " and "
                },
                "type": "Words"
              },
              {
                "data": {
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "module",
                    "module": "numpy",
                    "path": "numpy.float64",
                    "version": "1.22.3"
                  },
                  "value": "~numpy.float64"
                },
                "type": "Link"
              },
              {
                "data": {
                  "value": " are still sub-types of "
                },
                "type": "Words"
              },
              {
                "data": {
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "module",
                    "module": "numpy",
                    "path": "numpy.floating",
                    "version": "1.22.3"
                  },
                  "value": "~numpy.floating"
                },
                "type": "Link"
              },
              {
                "data": {
                  "value": ", but, contrary to runtime, they're not necessarily considered as sub-classes."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": "Number precision"
    },
    {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "The "
                },
                "type": "Words"
              },
              {
                "data": {
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "module",
                    "module": "numpy",
                    "path": "numpy.timedelta64",
                    "version": "1.22.3"
                  },
                  "value": "~numpy.timedelta64"
                },
                "type": "Link"
              },
              {
                "data": {
                  "value": " class is not considered a subclass of "
                },
                "type": "Words"
              },
              {
                "data": {
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "module",
                    "module": "numpy",
                    "path": "numpy.signedinteger",
                    "version": "1.22.3"
                  },
                  "value": "~numpy.signedinteger"
                },
                "type": "Link"
              },
              {
                "data": {
                  "value": ", the former only inheriting from "
                },
                "type": "Words"
              },
              {
                "data": {
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "module",
                    "module": "numpy",
                    "path": "numpy.generic",
                    "version": "1.22.3"
                  },
                  "value": "~numpy.generic"
                },
                "type": "Link"
              },
              {
                "data": {
                  "value": " while static type checking."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": "Timedelta64"
    },
    {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "During runtime numpy aggressively casts any passed 0D arrays into their corresponding "
                },
                "type": "Words"
              },
              {
                "data": {
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "module",
                    "module": "numpy",
                    "path": "numpy.generic",
                    "version": "1.22.3"
                  },
                  "value": "~numpy.generic"
                },
                "type": "Link"
              },
              {
                "data": {
                  "value": " instance. Until the introduction of shape typing (see "
                },
                "type": "Words"
              },
              {
                "data": {
                  "target": "https://peps.python.org/pep-0646/",
                  "value": "Pep 646"
                },
                "type": "ExternalLink"
              },
              {
                "data": {
                  "value": ") it is unfortunately not possible to make the necessary distinction between 0D and >0D arrays. While thus not strictly correct, all operations are that can potentially perform a 0D-array -> scalar cast are currently annotated as exclusively returning an "
                },
                "type": "Words"
              },
              {
                "data": {
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "module",
                    "module": "numpy",
                    "path": "numpy.ndarray",
                    "version": "1.22.3"
                  },
                  "value": "ndarray"
                },
                "type": "Link"
              },
              {
                "data": {
                  "value": "."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "If it is known in advance that an operation _will_ perform a 0D-array -> scalar cast, then one can consider manually remedying the situation with either "
                },
                "type": "Words"
              },
              {
                "data": {
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "api",
                    "module": "typing",
                    "path": "typing.cast",
                    "version": "*"
                  },
                  "value": "typing.cast"
                },
                "type": "Link"
              },
              {
                "data": {
                  "value": " or a "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "# type: ignore"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " comment."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": "0D arrays"
    },
    {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "The dtype of "
                },
                "type": "Words"
              },
              {
                "data": {
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "module",
                    "module": "numpy",
                    "path": "numpy.recarray",
                    "version": "1.22.3"
                  },
                  "value": "numpy.recarray"
                },
                "type": "Link"
              },
              {
                "data": {
                  "value": ", and the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "api",
                    "module": "numpy",
                    "path": "numpy.core.records",
                    "version": "*"
                  },
                  "value": "numpy.rec"
                },
                "type": "Link"
              },
              {
                "data": {
                  "value": " functions in general, can be specified in one of two ways:"
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "value": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "Directly via the "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "dtype"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " argument."
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "value": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "With up to five helper arguments that operate via "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "exists": true,
                            "kind": "module",
                            "reference": {
                              "kind": "module",
                              "module": "numpy",
                              "path": "numpy.format_parser",
                              "version": "1.22.3"
                            },
                            "value": "numpy.format_parser"
                          },
                          "type": "Link"
                        },
                        {
                          "data": {
                            "value": ":   "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "formats"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": ", "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "names"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": ", "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "titles"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": ", "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "aligned"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " and "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "byteorder"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": "."
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ]
              }
            ]
          },
          "type": "BulletList"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "These two approaches are currently typed as being mutually exclusive, "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "i.e."
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": " if "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "dtype"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " is specified than one may not specify "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "formats"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ". While this mutual exclusivity is not (strictly) enforced during runtime, combining both dtype specifiers can lead to unexpected or even downright buggy behavior."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": "Record array dtypes"
    },
    {
      "children": [
        {
          "data": {
            "args0": [],
            "directive_name": "data",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "A `~typing.Union` representing objects that can be coerced into an `~numpy.ndarray`. Among others this includes the likes of : * Scalars. * ( Nested) sequences. * Objects implementing the `~class.__array__` protocol. .. versionadded : : 1.20 .. admonition : : See Also : term : `array_like` : Any scalar or sequence that can be interpreted as an ndarray. .. rubric : : Examples .. code - block : : python >>> import numpy as np >>> import numpy.typing as npt >>> def as_array ( a : npt.ArrayLike) - > np.ndarray : ... return np.array ( a) "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [],
            "directive_name": "data",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "A `~typing.Union` representing objects that can be coerced into a `~numpy.dtype`. Among others this includes the likes of : * : class : `type` objects. * Character codes or the names of : class : `type` objects. * Objects with the ``.dtype`` attribute. .. versionadded : : 1.20 .. admonition : : See Also : ref : `Specifying and constructing data types < arrays.dtypes.constructing>` A comprehensive overview of all objects that can be coerced into data types. .. rubric : : Examples .. code - block : : python >>> import numpy as np >>> import numpy.typing as npt >>> def as_dtype ( d : npt.DTypeLike) - > np.dtype : ... return np.dtype ( d) "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [],
            "directive_name": "data",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "A : term : `generic < generic type>` version of `np.ndarray [ Any, np.dtype [ +ScalarType]] < numpy.ndarray>`. Can be used during runtime for typing arrays with a given dtype and unspecified shape. .. versionadded : : 1.21 .. rubric : : Examples .. code - block : : python >>> import numpy as np >>> import numpy.typing as npt >>> print ( npt.NDArray) numpy.ndarray [ typing.Any, numpy.dtype [ +ScalarType]] >>> print ( npt.NDArray [ np.float64]) numpy.ndarray [ typing.Any, numpy.dtype [ numpy.float64]] >>> NDArrayInt = npt.NDArray [ np.int_] >>> a : NDArrayInt = np.arange ( 10) >>> def func ( a : npt.ArrayLike) - > npt.NDArray [ Any] : ... return np.array ( a) "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "args0": [],
            "directive_name": "autoclass",
            "inner": {
              "inline": [
                {
                  "data": {
                    "value": "numpy.typing.NBitBase "
                  },
                  "type": "Words"
                }
              ],
              "inner": []
            }
          },
          "type": "BlockDirective"
        }
      ],
      "title": "API"
    }
  ],
  "example_section_data": {
    "children": [],
    "title": null
  },
  "item_file": "/numpy/typing/__init__.py",
  "item_line": 0,
  "item_type": "<class 'module'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary"
  ],
  "references": null,
  "refs": [],
  "see_also": [],
  "signature": {
    "value": null
  }
}