{
  "aliases": [],
  "arbitrary": [
    {
      "children": [
        {
          "data": {
            "argument": "numpy",
            "content": "",
            "name": "currentmodule",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "placeholder": "target",
            "value": ".. _arrays.dtypes:"
          },
          "type": "Unimplemented"
        }
      ],
      "level": 0,
      "title": null
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "A data type object (an instance of "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "numpy.dtype"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " class) describes how the bytes in the fixed-size block of memory corresponding to an array item should be interpreted. It describes the following aspects of the data:"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Type of the data (integer, float, Python object, etc.)"
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Size of the data (how many bytes is in "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": {
                              "value": "e.g."
                            }
                          },
                          "type": "Emph"
                        },
                        {
                          "data": {
                            "value": " the integer)"
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Byte order of the data ("
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "little-endian"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " or "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "big-endian"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": ")"
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "If the data type is "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "structured data type"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": ", an aggregate of other    data types, ("
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": {
                              "value": "e.g."
                            }
                          },
                          "type": "Emph"
                        },
                        {
                          "data": {
                            "value": ", describing an array item consisting of    an integer and a float),"
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  },
                  {
                    "data": {
                      "children": [
                        {
                          "children": [
                            {
                              "data": {
                                "children": [
                                  {
                                    "data": {
                                      "value": "what are the names of the \""
                                    },
                                    "type": "Words"
                                  },
                                  {
                                    "data": {
                                      "value": [
                                        "fields <field>"
                                      ]
                                    },
                                    "type": "Verbatim"
                                  },
                                  {
                                    "data": {
                                      "value": "\" of the structure,       by which they can be "
                                    },
                                    "type": "Words"
                                  },
                                  {
                                    "data": {
                                      "value": [
                                        "accessed <arrays.indexing.fields>"
                                      ]
                                    },
                                    "type": "Verbatim"
                                  },
                                  {
                                    "data": {
                                      "value": ","
                                    },
                                    "type": "Words"
                                  }
                                ]
                              },
                              "type": "Paragraph"
                            }
                          ]
                        },
                        {
                          "children": [
                            {
                              "data": {
                                "children": [
                                  {
                                    "data": {
                                      "value": "what is the data-type of each "
                                    },
                                    "type": "Words"
                                  },
                                  {
                                    "data": {
                                      "value": [
                                        "field"
                                      ]
                                    },
                                    "type": "Verbatim"
                                  },
                                  {
                                    "data": {
                                      "value": ", and"
                                    },
                                    "type": "Words"
                                  }
                                ]
                              },
                              "type": "Paragraph"
                            }
                          ]
                        },
                        {
                          "children": [
                            {
                              "data": {
                                "children": [
                                  {
                                    "data": {
                                      "value": "which part of the memory block each field takes."
                                    },
                                    "type": "Words"
                                  }
                                ]
                              },
                              "type": "Paragraph"
                            }
                          ]
                        }
                      ]
                    },
                    "type": "EnumeratedList"
                  }
                ]
              },
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "If the data type is a sub-array, what is its shape and data type."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              }
            ]
          },
          "type": "EnumeratedList"
        },
        {
          "data": {
            "argument": "",
            "content": "pair: dtype; scalar",
            "name": "index",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "To describe the type of scalar data, there are several "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "built-in\nscalar types <arrays.scalars.built-in>"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " in NumPy for various precision of integers, floating-point numbers, "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "etc"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": ". An item extracted from an array, "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "e.g."
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": ", by indexing, will be a Python object whose type is the scalar type associated with the data type of the array."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Note that the scalar types are not "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "dtype"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " objects, even though they can be used in place of one whenever a data type specification is needed in NumPy."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "argument": "",
            "content": "pair: dtype; field",
            "name": "index",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Structured data types are formed by creating a data type whose "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "field"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " contain other data types. Each field has a name by which it can be "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "accessed <arrays.indexing.fields>"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ". The parent data type should be of sufficient size to contain all its fields; the parent is nearly always based on the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "void"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " type which allows an arbitrary item size. Structured data types may also contain nested structured sub-array data types in their fields."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "argument": "",
            "content": "pair: dtype; sub-array",
            "name": "index",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Finally, a data type can describe items that are themselves arrays of items of another data type. These sub-arrays must, however, be of a fixed size."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "If an array is created using a data-type describing a sub-array, the dimensions of the sub-array are appended to the shape of the array when the array is created. Sub-arrays in a field of a structured type behave differently, see "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "arrays.indexing.fields"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": "."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Sub-arrays always have a C-contiguous memory layout."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "argument": "Example",
            "content": "A simple data type containing a 32-bit big-endian integer:\n(see :ref:`arrays.dtypes.constructing` for details on construction)\n\n>>> dt = np.dtype('>i4')\n>>> dt.byteorder\n'>'\n>>> dt.itemsize\n4\n>>> dt.name\n'int32'\n>>> dt.type is np.int32\nTrue\n\nThe corresponding array scalar type is :class:`int32`.",
            "name": "admonition",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "Example",
            "content": "A structured data type containing a 16-character string (in field 'name')\nand a sub-array of two 64-bit floating-point number (in field 'grades'):\n\n>>> dt = np.dtype([('name', np.unicode_, 16), ('grades', np.float64, (2,))])\n>>> dt['name']\ndtype('<U16')\n>>> dt['grades']\ndtype(('<f8', (2,)))\n\nItems of an array of this data type are wrapped in an :ref:`array\nscalar <arrays.scalars>` type that also has two fields:\n\n>>> x = np.array([('Sarah', (8.0, 7.0)), ('John', (6.0, 7.0))], dtype=dt)\n>>> x[1]\n('John', [6., 7.])\n>>> x[1]['grades']\narray([6.,  7.])\n>>> type(x[1])\n<class 'numpy.void'>\n>>> type(x[1]['grades'])\n<class 'numpy.ndarray'>",
            "name": "admonition",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "placeholder": "target",
            "value": ".. _arrays.dtypes.constructing:"
          },
          "type": "Unimplemented"
        }
      ],
      "level": 0,
      "title": "Data type objects (:class:`dtype`)"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Whenever a data-type is required in a NumPy function or method, either a "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "dtype"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " object or something that can be converted to one can be supplied.  Such conversions are done by the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "dtype"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " constructor:"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": ".. autosummary:: \n    :toctree:generated/\n    dtype"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "What can be converted to a data-type object is described below:"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "dd": [
                  {
                    "data": {
                      "argument": "",
                      "content": "triple: dtype; construction; from dtype",
                      "name": "index",
                      "options": []
                    },
                    "type": "BlockDirective"
                  },
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Used as-is."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "dt": {
                  "children": [
                    {
                      "data": {
                        "value": [
                          "dtype"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " object"
                      },
                      "type": "Words"
                    }
                  ]
                }
              },
              {
                "dd": [
                  {
                    "data": {
                      "argument": "",
                      "content": "triple: dtype; construction; from None",
                      "name": "index",
                      "options": []
                    },
                    "type": "BlockDirective"
                  },
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "The default data type: "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "float_"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": "."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "dt": {
                  "children": [
                    {
                      "data": {
                        "value": "None"
                      },
                      "type": "Words"
                    }
                  ]
                }
              }
            ]
          },
          "type": "DefList"
        },
        {
          "data": {
            "argument": "",
            "content": "triple: dtype; construction; from type",
            "name": "index",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "children": [
              {
                "dd": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "The 24 built-in "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "array scalar type objects\n    <arrays.scalars.built-in>"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " all convert to an associated data-type object.     This is true for their sub-classes as well."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  },
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Note that not all data-type information can be supplied with a     type-object: for example, "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "domain": null,
                            "role": null,
                            "value": "flexible"
                          },
                          "type": "Directive"
                        },
                        {
                          "data": {
                            "value": " data-types have     a default "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": {
                              "value": "itemsize"
                            }
                          },
                          "type": "Emph"
                        },
                        {
                          "data": {
                            "value": " of 0, and require an explicitly given size     to be useful."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  },
                  {
                    "data": {
                      "argument": "Example",
                      "content": ">>> dt = np.dtype(np.int32)      # 32-bit integer\n    >>> dt = np.dtype(np.complex128) # 128-bit complex floating-point number",
                      "name": "admonition",
                      "options": []
                    },
                    "type": "BlockDirective"
                  }
                ],
                "dt": {
                  "children": [
                    {
                      "data": {
                        "value": "Array-scalar types"
                      },
                      "type": "Words"
                    }
                  ]
                }
              },
              {
                "dd": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "The generic hierarchical type objects convert to corresponding     type objects according to the associations:"
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  },
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "=====================================================  ===============     "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "number"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": ", "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "inexact"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": ", "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "floating"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": "   "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "float"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": "     "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "complexfloating"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": "                               "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "cfloat"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": "     "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "integer"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": ", "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "signedinteger"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": "               "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "int\\_"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": "     "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "unsignedinteger"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": "                               "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "uint"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": "     "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "character"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": "                                     "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "string"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": "     "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "generic"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": ", "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "flexible"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": "                    "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "void"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": "     =====================================================  ==============="
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  },
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "children": [
                              {
                                "dd": [
                                  {
                                    "data": {
                                      "children": [
                                        {
                                          "data": {
                                            "value": "This is because it can be unexpected in a context such as     "
                                          },
                                          "type": "Words"
                                        },
                                        {
                                          "data": {
                                            "value": [
                                              "arr.astype(dtype=np.floating)"
                                            ]
                                          },
                                          "type": "Verbatim"
                                        },
                                        {
                                          "data": {
                                            "value": ", which casts an array of "
                                          },
                                          "type": "Words"
                                        },
                                        {
                                          "data": {
                                            "value": [
                                              "float32"
                                            ]
                                          },
                                          "type": "Verbatim"
                                        },
                                        {
                                          "data": {
                                            "value": "     to an array of "
                                          },
                                          "type": "Words"
                                        },
                                        {
                                          "data": {
                                            "value": [
                                              "float64"
                                            ]
                                          },
                                          "type": "Verbatim"
                                        },
                                        {
                                          "data": {
                                            "value": ", even though "
                                          },
                                          "type": "Words"
                                        },
                                        {
                                          "data": {
                                            "value": [
                                              "float32"
                                            ]
                                          },
                                          "type": "Verbatim"
                                        },
                                        {
                                          "data": {
                                            "value": " is a subdtype of     "
                                          },
                                          "type": "Words"
                                        },
                                        {
                                          "data": {
                                            "value": [
                                              "np.floating"
                                            ]
                                          },
                                          "type": "Verbatim"
                                        },
                                        {
                                          "data": {
                                            "value": "."
                                          },
                                          "type": "Words"
                                        }
                                      ]
                                    },
                                    "type": "Paragraph"
                                  }
                                ],
                                "dt": {
                                  "children": [
                                    {
                                      "data": {
                                        "value": "This conversion of generic scalar types is deprecated."
                                      },
                                      "type": "Words"
                                    }
                                  ]
                                }
                              }
                            ]
                          },
                          "type": "DefList"
                        }
                      ],
                      "kind": "deprecated",
                      "title": "1.19"
                    },
                    "type": "Admonition"
                  }
                ],
                "dt": {
                  "children": [
                    {
                      "data": {
                        "value": "Generic types"
                      },
                      "type": "Words"
                    }
                  ]
                }
              },
              {
                "dd": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Several python types are equivalent to a corresponding     array scalar when used to generate a "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "dtype"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " object:"
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  },
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "================  ===============     "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "int"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": "      "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "int\\_"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": "     "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "bool"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": "     "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "bool\\_"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": "     "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "float"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": "    "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "float\\_"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": "     "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "complex"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": "  "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "cfloat"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": "     "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "bytes"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": "    "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "bytes\\_"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": "     "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "str"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": "      "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "str\\_"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": "     "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "buffer"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": "   "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "void"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": "     (all others)      "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "object_"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": "     ================  ==============="
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  },
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Note that "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "str"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " refers to either null terminated bytes or unicode strings     depending on the Python version. In code targeting both Python 2 and 3     "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "np.unicode_"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " should be used as a dtype for strings.     See "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "Note on string types<string-dtype-note>"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": "."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  },
                  {
                    "data": {
                      "argument": "Example",
                      "content": ">>> dt = np.dtype(float)   # Python-compatible floating-point number\n    >>> dt = np.dtype(int)     # Python-compatible integer\n    >>> dt = np.dtype(object)  # Python object",
                      "name": "admonition",
                      "options": []
                    },
                    "type": "BlockDirective"
                  },
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "children": [
                              {
                                "dd": [
                                  {
                                    "data": {
                                      "children": [
                                        {
                                          "data": {
                                            "value": "that such types may map to a specific (new) dtype in the future."
                                          },
                                          "type": "Words"
                                        }
                                      ]
                                    },
                                    "type": "Paragraph"
                                  }
                                ],
                                "dt": {
                                  "children": [
                                    {
                                      "data": {
                                        "value": "All other types map to "
                                      },
                                      "type": "Words"
                                    },
                                    {
                                      "data": {
                                        "value": [
                                          "object_"
                                        ]
                                      },
                                      "type": "Verbatim"
                                    },
                                    {
                                      "data": {
                                        "value": " for convenience. Code should expect"
                                      },
                                      "type": "Words"
                                    }
                                  ]
                                }
                              }
                            ]
                          },
                          "type": "DefList"
                        }
                      ],
                      "kind": "note",
                      "title": ""
                    },
                    "type": "Admonition"
                  }
                ],
                "dt": {
                  "children": [
                    {
                      "data": {
                        "value": "Built-in Python types"
                      },
                      "type": "Words"
                    }
                  ]
                }
              },
              {
                "dd": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Any type object with a "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "dtype"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " attribute: The attribute will be     accessed and used directly. The attribute must return something     that is convertible into a dtype object."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "dt": {
                  "children": [
                    {
                      "data": {
                        "value": "Types with "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          ".dtype"
                        ]
                      },
                      "type": "Verbatim"
                    }
                  ]
                }
              }
            ]
          },
          "type": "DefList"
        },
        {
          "data": {
            "argument": "",
            "content": "triple: dtype; construction; from string",
            "name": "index",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Several kinds of strings can be converted. Recognized strings can be prepended with "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "'>'"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " ("
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "big-endian"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": "), "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "'<'"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " ("
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "little-endian"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": "), or "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "'='"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " (hardware-native, the default), to specify the byte order."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "dd": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Each built-in data-type has a character code     (the updated Numeric typecodes), that uniquely identifies it."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  },
                  {
                    "data": {
                      "argument": "Example",
                      "content": ">>> dt = np.dtype('b')  # byte, native byte order\n    >>> dt = np.dtype('>H') # big-endian unsigned short\n    >>> dt = np.dtype('<f') # little-endian single-precision float\n    >>> dt = np.dtype('d')  # double-precision floating-point number",
                      "name": "admonition",
                      "options": []
                    },
                    "type": "BlockDirective"
                  }
                ],
                "dt": {
                  "children": [
                    {
                      "data": {
                        "value": "One-character strings"
                      },
                      "type": "Words"
                    }
                  ]
                }
              },
              {
                "dd": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "The first character specifies the kind of data and the remaining    characters specify the number of bytes per item, except for Unicode,    where it is interpreted as the number of characters.  The item size    must correspond to an existing type, or an error will be raised.  The    supported kinds are"
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  },
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "================   ========================    "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "'?'"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": "            boolean    "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "'b'"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": "            (signed) byte    "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "'B'"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": "            unsigned byte    "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "'i'"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": "            (signed) integer    "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "'u'"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": "            unsigned integer    "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "'f'"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": "            floating-point    "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "'c'"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": "            complex-floating point    "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "'m'"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": "            timedelta    "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "'M'"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": "            datetime    "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "'O'"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": "            (Python) objects    "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "'S'"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": ", "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "'a'"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": "   zero-terminated bytes (not recommended)    "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "'U'"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": "            Unicode string    "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "'V'"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": "            raw data ("
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "void"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": ")    ================   ========================"
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  },
                  {
                    "data": {
                      "argument": "Example",
                      "content": ">>> dt = np.dtype('i4')   # 32-bit signed integer\n   >>> dt = np.dtype('f8')   # 64-bit floating-point number\n   >>> dt = np.dtype('c16')  # 128-bit complex floating-point number\n   >>> dt = np.dtype('a25')  # 25-length zero-terminated bytes\n   >>> dt = np.dtype('U25')  # 25-character string",
                      "name": "admonition",
                      "options": []
                    },
                    "type": "BlockDirective"
                  },
                  {
                    "data": {
                      "placeholder": "target",
                      "value": ".. _string-dtype-note:"
                    },
                    "type": "Unimplemented"
                  },
                  {
                    "data": {
                      "argument": "Note on string types",
                      "content": "For backward compatibility with Python 2 the ``S`` and ``a`` typestrings\n   remain zero-terminated bytes and `numpy.string_` continues to alias\n   `numpy.bytes_`. To use actual strings in Python 3 use ``U`` or `numpy.str_`.\n   For signed bytes that do not need zero-termination ``b`` or ``i1`` can be\n   used.",
                      "name": "admonition",
                      "options": []
                    },
                    "type": "BlockDirective"
                  }
                ],
                "dt": {
                  "children": [
                    {
                      "data": {
                        "value": "Array-protocol type strings (see "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "arrays.interface"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": ")"
                      },
                      "type": "Words"
                    }
                  ]
                }
              },
              {
                "dd": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "A short-hand notation for specifying the format of a structured data type is    a comma-separated string of basic formats."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  },
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "A basic format in this context is an optional shape specifier    followed by an array-protocol type string. Parenthesis are required    on the shape if it has more than one dimension. NumPy allows a modification    on the format in that any string that can uniquely identify the    type can be used to specify the data-type in a field.    The generated data-type fields are named "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "'f0'"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": ", "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "'f1'"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": ", ...,    "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "'f<N-1>'"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " where N (>1) is the number of comma-separated basic    formats in the string. If the optional shape specifier is provided,    then the data-type for the corresponding field describes a sub-array."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  },
                  {
                    "data": {
                      "argument": "Example",
                      "content": "- field named ``f0`` containing a 32-bit integer\n   - field named ``f1`` containing a 2 x 3 sub-array\n     of 64-bit floating-point numbers\n   - field named ``f2`` containing a 32-bit floating-point number\n\n   >>> dt = np.dtype(\"i4, (2,3)f8, f4\")\n\n   - field named ``f0`` containing a 3-character string\n   - field named ``f1`` containing a sub-array of shape (3,)\n     containing 64-bit unsigned integers\n   - field named ``f2`` containing a 3 x 4 sub-array\n     containing 10-character strings\n\n   >>> dt = np.dtype(\"a3, 3u8, (3,4)a10\")",
                      "name": "admonition",
                      "options": []
                    },
                    "type": "BlockDirective"
                  }
                ],
                "dt": {
                  "children": [
                    {
                      "data": {
                        "value": "String with comma-separated fields"
                      },
                      "type": "Words"
                    }
                  ]
                }
              },
              {
                "dd": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Any string in "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "numpy.sctypeDict"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": ".keys():"
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  },
                  {
                    "data": {
                      "argument": "Example",
                      "content": ">>> dt = np.dtype('uint32')   # 32-bit unsigned integer\n   >>> dt = np.dtype('float64')  # 64-bit floating-point number",
                      "name": "admonition",
                      "options": []
                    },
                    "type": "BlockDirective"
                  }
                ],
                "dt": {
                  "children": [
                    {
                      "data": {
                        "value": "Type strings"
                      },
                      "type": "Words"
                    }
                  ]
                }
              }
            ]
          },
          "type": "DefList"
        },
        {
          "data": {
            "argument": "",
            "content": "triple: dtype; construction; from tuple",
            "name": "index",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "children": [
              {
                "dd": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "The first argument must be an object that is converted to a     zero-sized flexible data-type object, the second argument is     an integer providing the desired itemsize."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  },
                  {
                    "data": {
                      "argument": "Example",
                      "content": ">>> dt = np.dtype((np.void, 10))  # 10-byte wide data block\n    >>> dt = np.dtype(('U', 10))   # 10-character unicode string",
                      "name": "admonition",
                      "options": []
                    },
                    "type": "BlockDirective"
                  }
                ],
                "dt": {
                  "children": [
                    {
                      "data": {
                        "value": [
                          "(flexible_dtype, itemsize)"
                        ]
                      },
                      "type": "Verbatim"
                    }
                  ]
                }
              },
              {
                "dd": [
                  {
                    "data": {
                      "argument": "",
                      "content": "pair: dtype; sub-array",
                      "name": "index",
                      "options": []
                    },
                    "type": "BlockDirective"
                  },
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "The first argument is any object that can be converted into a     fixed-size data-type object. The second argument is the desired     shape of this type. If the shape parameter is 1, then the     data-type object used to be equivalent to fixed dtype. This behaviour is     deprecated since NumPy 1.17 and will raise an error in the future.     If "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": {
                              "value": "shape"
                            }
                          },
                          "type": "Emph"
                        },
                        {
                          "data": {
                            "value": " is a tuple, then the new dtype defines a sub-array of the given     shape."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  },
                  {
                    "data": {
                      "argument": "Example",
                      "content": ">>> dt = np.dtype((np.int32, (2,2)))          # 2 x 2 integer sub-array\n    >>> dt = np.dtype(('i4, (2,3)f8, f4', (2,3))) # 2 x 3 structured sub-array",
                      "name": "admonition",
                      "options": []
                    },
                    "type": "BlockDirective"
                  }
                ],
                "dt": {
                  "children": [
                    {
                      "data": {
                        "value": [
                          "(fixed_dtype, shape)"
                        ]
                      },
                      "type": "Verbatim"
                    }
                  ]
                }
              }
            ]
          },
          "type": "DefList"
        },
        {
          "data": {
            "argument": "",
            "content": "triple: dtype; construction; from list",
            "name": "index",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "children": [
              {
                "dd": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": {
                              "value": "obj"
                            }
                          },
                          "type": "Emph"
                        },
                        {
                          "data": {
                            "value": " should be a list of fields where each field is described by a    tuple of length 2 or 3. (Equivalent to the "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "descr"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " item in the    "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "~object.__array_interface__"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " attribute.)"
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  },
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "The first element, "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": {
                              "value": "field_name"
                            }
                          },
                          "type": "Emph"
                        },
                        {
                          "data": {
                            "value": ", is the field name (if this is    "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "''"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " then a standard field name, "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "'f#'"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": ", is assigned).  The    field name may also be a 2-tuple of strings where the first string    is either a \"title\" (which may be any string or unicode string) or    meta-data for the field which can be any object, and the second    string is the \"name\" which must be a valid Python identifier."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  },
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "The second element, "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": {
                              "value": "field_dtype"
                            }
                          },
                          "type": "Emph"
                        },
                        {
                          "data": {
                            "value": ", can be anything that can be    interpreted as a data-type."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  },
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "The optional third element "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": {
                              "value": "field_shape"
                            }
                          },
                          "type": "Emph"
                        },
                        {
                          "data": {
                            "value": " contains the shape if this    field represents an array of the data-type in the second    element. Note that a 3-tuple with a third argument equal to 1 is    equivalent to a 2-tuple."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  },
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "This style does not accept "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": {
                              "value": "align"
                            }
                          },
                          "type": "Emph"
                        },
                        {
                          "data": {
                            "value": " in the "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "dtype"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": "    constructor as it is assumed that all of the memory is accounted    for by the array interface description."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  },
                  {
                    "data": {
                      "argument": "Example",
                      "content": "Data-type with fields ``big`` (big-endian 32-bit integer) and\n   ``little`` (little-endian 32-bit integer):\n\n   >>> dt = np.dtype([('big', '>i4'), ('little', '<i4')])\n\n   Data-type with fields ``R``, ``G``, ``B``, ``A``, each being an\n   unsigned 8-bit integer:\n\n   >>> dt = np.dtype([('R','u1'), ('G','u1'), ('B','u1'), ('A','u1')])",
                      "name": "admonition",
                      "options": []
                    },
                    "type": "BlockDirective"
                  }
                ],
                "dt": {
                  "children": [
                    {
                      "data": {
                        "value": [
                          "[(field_name, field_dtype, field_shape), ...]"
                        ]
                      },
                      "type": "Verbatim"
                    }
                  ]
                }
              }
            ]
          },
          "type": "DefList"
        },
        {
          "data": {
            "argument": "",
            "content": "triple: dtype; construction; from dict",
            "name": "index",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "children": [
              {
                "dd": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "This style has two required and three optional keys.  The "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": {
                              "value": "names"
                            }
                          },
                          "type": "Emph"
                        },
                        {
                          "data": {
                            "value": "     and "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": {
                              "value": "formats"
                            }
                          },
                          "type": "Emph"
                        },
                        {
                          "data": {
                            "value": " keys are required. Their respective values are     equal-length lists with the field names and the field formats.     The field names must be strings and the field formats can be any     object accepted by "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "dtype"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " constructor."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  },
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "When the optional keys "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": {
                              "value": "offsets"
                            }
                          },
                          "type": "Emph"
                        },
                        {
                          "data": {
                            "value": " and "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": {
                              "value": "titles"
                            }
                          },
                          "type": "Emph"
                        },
                        {
                          "data": {
                            "value": " are provided,     their values must each be lists of the same length as the "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": {
                              "value": "names"
                            }
                          },
                          "type": "Emph"
                        },
                        {
                          "data": {
                            "value": "     and "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": {
                              "value": "formats"
                            }
                          },
                          "type": "Emph"
                        },
                        {
                          "data": {
                            "value": " lists. The "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": {
                              "value": "offsets"
                            }
                          },
                          "type": "Emph"
                        },
                        {
                          "data": {
                            "value": " value is a list of byte offsets     (limited to "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "exists": true,
                            "kind": "module",
                            "reference": {
                              "kind": "api",
                              "module": "ctypes",
                              "path": "ctypes.c_int",
                              "version": "*"
                            },
                            "value": "ctypes.c_int"
                          },
                          "type": "Link"
                        },
                        {
                          "data": {
                            "value": ") for each field, while the "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": {
                              "value": "titles"
                            }
                          },
                          "type": "Emph"
                        },
                        {
                          "data": {
                            "value": " value is a     list of titles for each field ("
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "None"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " can be used if no title is     desired for that field). The "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": {
                              "value": "titles"
                            }
                          },
                          "type": "Emph"
                        },
                        {
                          "data": {
                            "value": " can be any object, but when a     "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "str"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " object will add another entry to the     fields dictionary keyed by the title and referencing the same     field tuple which will contain the title as an additional tuple     member."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  },
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "The "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": {
                              "value": "itemsize"
                            }
                          },
                          "type": "Emph"
                        },
                        {
                          "data": {
                            "value": " key allows the total size of the dtype to be     set, and must be an integer large enough so all the fields     are within the dtype. If the dtype being constructed is aligned,     the "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": {
                              "value": "itemsize"
                            }
                          },
                          "type": "Emph"
                        },
                        {
                          "data": {
                            "value": " must also be divisible by the struct alignment. Total dtype     "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": {
                              "value": "itemsize"
                            }
                          },
                          "type": "Emph"
                        },
                        {
                          "data": {
                            "value": " is limited to "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "exists": true,
                            "kind": "module",
                            "reference": {
                              "kind": "api",
                              "module": "ctypes",
                              "path": "ctypes.c_int",
                              "version": "*"
                            },
                            "value": "ctypes.c_int"
                          },
                          "type": "Link"
                        },
                        {
                          "data": {
                            "value": "."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  },
                  {
                    "data": {
                      "argument": "Example",
                      "content": "Data type with fields ``r``, ``g``, ``b``, ``a``, each being\n    an 8-bit unsigned integer:\n\n    >>> dt = np.dtype({'names': ['r','g','b','a'],\n    ...                'formats': [np.uint8, np.uint8, np.uint8, np.uint8]})\n\n    Data type with fields ``r`` and ``b`` (with the given titles),\n    both being 8-bit unsigned integers, the first at byte position\n    0 from the start of the field and the second at position 2:\n\n    >>> dt = np.dtype({'names': ['r','b'], 'formats': ['u1', 'u1'],\n    ...                'offsets': [0, 2],\n    ...                'titles': ['Red pixel', 'Blue pixel']})",
                      "name": "admonition",
                      "options": []
                    },
                    "type": "BlockDirective"
                  }
                ],
                "dt": {
                  "children": [
                    {
                      "data": {
                        "value": [
                          "{'names': ..., 'formats': ..., 'offsets': ..., 'titles': ..., 'itemsize': ...}"
                        ]
                      },
                      "type": "Verbatim"
                    }
                  ]
                }
              },
              {
                "dd": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "This usage is discouraged, because it is ambiguous with the     other dict-based construction method. If you have a field     called 'names' and a field called 'formats' there will be     a conflict."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  },
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "This style allows passing in the "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "fields <dtype.fields>"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": "     attribute of a data-type object."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  },
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": {
                              "value": "obj"
                            }
                          },
                          "type": "Emph"
                        },
                        {
                          "data": {
                            "value": " should contain string or unicode keys that refer to     "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "(data-type, offset)"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " or "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "(data-type, offset, title)"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " tuples."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  },
                  {
                    "data": {
                      "argument": "Example",
                      "content": "Data type containing field ``col1`` (10-character string at\n    byte position 0), ``col2`` (32-bit float at byte position 10),\n    and ``col3`` (integers at byte position 14):\n\n    >>> dt = np.dtype({'col1': ('U10', 0), 'col2': (np.float32, 10),\n    ...                'col3': (int, 14)})",
                      "name": "admonition",
                      "options": []
                    },
                    "type": "BlockDirective"
                  }
                ],
                "dt": {
                  "children": [
                    {
                      "data": {
                        "value": [
                          "{'field1': ..., 'field2': ..., ...}"
                        ]
                      },
                      "type": "Verbatim"
                    }
                  ]
                }
              },
              {
                "dd": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "In NumPy 1.7 and later, this form allows "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "domain": null,
                            "role": null,
                            "value": "base_dtype"
                          },
                          "type": "Directive"
                        },
                        {
                          "data": {
                            "value": " to be interpreted as     a structured dtype. Arrays created with this dtype will have underlying     dtype "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "domain": null,
                            "role": null,
                            "value": "base_dtype"
                          },
                          "type": "Directive"
                        },
                        {
                          "data": {
                            "value": " but will have fields and flags taken from "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "domain": null,
                            "role": null,
                            "value": "new_dtype"
                          },
                          "type": "Directive"
                        },
                        {
                          "data": {
                            "value": ".     This is useful for creating custom structured dtypes, as done in     "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "record arrays <arrays.classes.rec>"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": "."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  },
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "This form also makes it possible to specify struct dtypes with overlapping     fields, functioning like the 'union' type in C. This usage is discouraged,     however, and the union mechanism is preferred."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  },
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Both arguments must be convertible to data-type objects with the same total     size."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  },
                  {
                    "data": {
                      "argument": "Example",
                      "content": "32-bit integer, whose first two bytes are interpreted as an integer\n    via field ``real``, and the following two bytes via field ``imag``.\n\n    >>> dt = np.dtype((np.int32,{'real':(np.int16, 0),'imag':(np.int16, 2)}))\n\n    32-bit integer, which is interpreted as consisting of a sub-array\n    of shape ``(4,)`` containing 8-bit integers:\n\n    >>> dt = np.dtype((np.int32, (np.int8, 4)))\n\n    32-bit integer, containing fields ``r``, ``g``, ``b``, ``a`` that\n    interpret the 4 bytes in the integer as four unsigned integers:\n\n    >>> dt = np.dtype(('i4', [('r','u1'),('g','u1'),('b','u1'),('a','u1')]))",
                      "name": "admonition",
                      "options": []
                    },
                    "type": "BlockDirective"
                  }
                ],
                "dt": {
                  "children": [
                    {
                      "data": {
                        "value": [
                          "(base_dtype, new_dtype)"
                        ]
                      },
                      "type": "Verbatim"
                    }
                  ]
                }
              }
            ]
          },
          "type": "DefList"
        }
      ],
      "level": 1,
      "title": "Specifying and constructing data types"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "NumPy data type descriptions are instances of the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "dtype"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " class."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "level": 1,
      "title": ":class:`dtype`"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "The type of the data is described by the following "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "dtype"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": "  attributes:"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": ".. autosummary:: \n    :toctree:generated/\n    dtype.type\n    dtype.kind\n    dtype.char\n    dtype.num\n    dtype.str"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Size of the data is in turn described by:"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": ".. autosummary:: \n    :toctree:generated/\n    dtype.name\n    dtype.itemsize"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Endianness of this data:"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": ".. autosummary:: \n    :toctree:generated/\n    dtype.byteorder"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Information about sub-data-types in a "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "structured data type"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ":"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": ".. autosummary:: \n    :toctree:generated/\n    dtype.fields\n    dtype.names"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "For data types that describe sub-arrays:"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": ".. autosummary:: \n    :toctree:generated/\n    dtype.subdtype\n    dtype.shape"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Attributes providing additional information:"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": ".. autosummary:: \n    :toctree:generated/\n    dtype.hasobject\n    dtype.flags\n    dtype.isbuiltin\n    dtype.isnative\n    dtype.descr\n    dtype.alignment\n    dtype.base"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Metadata attached by the user:"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": ".. autosummary:: \n    :toctree:generated/\n\n    dtype.metadata\n"
          },
          "type": "BlockVerbatim"
        }
      ],
      "level": 2,
      "title": "Attributes"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Data types have the following method for changing the byte order:"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": ".. autosummary:: \n    :toctree:generated/\n    dtype.newbyteorder"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "The following methods implement the pickle protocol:"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": ".. autosummary:: \n    :toctree:generated/\n    dtype.__reduce__\n    dtype.__setstate__"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Utility method for typing:"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": ".. autosummary:: \n    :toctree:generated/\n    dtype.__class_getitem__"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Comparison operations:"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": ".. autosummary:: \n    :toctree:generated/\n    dtype.__ge__\n    dtype.__gt__\n    dtype.__le__\n    dtype.__lt__"
          },
          "type": "BlockVerbatim"
        }
      ],
      "level": 2,
      "title": "Methods"
    }
  ],
  "content": {},
  "example_section_data": {
    "children": [],
    "level": 0,
    "title": null
  },
  "item_file": null,
  "item_line": null,
  "item_type": null,
  "ordered_sections": [],
  "references": null,
  "see_also": [],
  "signature": {
    "value": null
  }
}