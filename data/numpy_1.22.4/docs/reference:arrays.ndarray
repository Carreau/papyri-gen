{
  "aliases": [],
  "arbitrary": [
    {
      "children": [
        {
          "data": {
            "argument": "numpy",
            "content": "",
            "name": "currentmodule",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "placeholder": "target",
            "value": ".. _arrays.ndarray:"
          },
          "type": "Unimplemented"
        }
      ],
      "level": 0,
      "title": null
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "An "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "ndarray"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " is a (usually fixed-size) multidimensional container of items of the same type and size. The number of dimensions and items in an array is defined by its "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "shape <ndarray.shape>"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", which is a "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "tuple"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " of "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "N"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": " non-negative integers that specify the sizes of each dimension. The type of items in the array is specified by a separate "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "data-type object (dtype) <arrays.dtypes>"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", one of which is associated with each ndarray."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "As with other container objects in Python, the contents of an "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "ndarray"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " can be accessed and modified by "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "indexing or\nslicing <arrays.indexing>"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " the array (using, for example, "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "N"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": " integers), and via the methods and attributes of the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "ndarray"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": "."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "argument": "view, base",
            "content": "",
            "name": "index",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Different "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "ndarrays <ndarray>"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " can share the same data, so that changes made in one "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "ndarray"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " may be visible in another. That is, an ndarray can be a "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "\"view\""
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": " to another ndarray, and the data it is referring to is taken care of by the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "\"base\""
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": " ndarray. ndarrays can also be views to memory owned by Python "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "strings <str>"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " or objects implementing the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "buffer"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " or "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "array\n<arrays.interface>"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " interfaces."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "argument": "Example",
            "content": "A 2-dimensional array of size 2 x 3, composed of 4-byte integer\nelements:\n\n>>> x = np.array([[1, 2, 3], [4, 5, 6]], np.int32)\n>>> type(x)\n<class 'numpy.ndarray'>\n>>> x.shape\n(2, 3)\n>>> x.dtype\ndtype('int32')\n\nThe array can be indexed using Python container-like syntax:\n\n>>> # The element of x in the *second* row, *third* column, namely, 6.\n>>> x[1, 2]\n6\n\nFor example :ref:`slicing <arrays.indexing>` can produce views of\nthe array:\n\n>>> y = x[:,1]\n>>> y\narray([2, 5], dtype=int32)\n>>> y[0] = 9 # this also changes the corresponding element in x\n>>> y\narray([9, 5], dtype=int32)\n>>> x\narray([[1, 9, 3],\n       [4, 5, 6]], dtype=int32)",
            "name": "admonition",
            "options": []
          },
          "type": "BlockDirective"
        }
      ],
      "level": 0,
      "title": "The N-dimensional array (:class:`ndarray`)"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "New arrays can be constructed using the routines detailed in "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "routines.array-creation"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", and also by using the low-level "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "ndarray"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " constructor:"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": ".. autosummary:: \n    :toctree:generated/\n    ndarray"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "placeholder": "target",
            "value": ".. _arrays.ndarray.indexing:"
          },
          "type": "Unimplemented"
        }
      ],
      "level": 1,
      "title": "Constructing arrays"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Arrays can be indexed using an extended Python slicing syntax, "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "array[selection]"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ".  Similar syntax is also used for accessing fields in a "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "structured data type"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": "."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "argument": ":ref:`Array Indexing <arrays.indexing>`.",
            "content": "",
            "name": "seealso",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "placeholder": "target",
            "value": ".. _memory-layout:"
          },
          "type": "Unimplemented"
        }
      ],
      "level": 1,
      "title": "Indexing arrays"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "An instance of class "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "ndarray"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " consists of a contiguous one-dimensional segment of computer memory (owned by the array, or by some other object), combined with an indexing scheme that maps "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "N"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": " integers into the location of an item in the block.  The ranges in which the indices can vary is specified by the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "shape\n<ndarray.shape>"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " of the array. How many bytes each item takes and how the bytes are interpreted is defined by the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "data-type object\n<arrays.dtypes>"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " associated with the array."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "argument": "C-order, Fortran-order, row-major, column-major, stride,",
            "content": "offset",
            "name": "index",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "A segment of memory is inherently 1-dimensional, and there are many different schemes for arranging the items of an "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "N"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": "-dimensional array in a 1-dimensional block. NumPy is flexible, and "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "ndarray"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " objects can accommodate any "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "strided indexing scheme"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": ". In a strided scheme, the N-dimensional index "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": "(n_0, n_1, ..., n_{N-1})"
                },
                "type": "Math"
              },
              {
                "data": {
                  "value": " corresponds to the offset (in bytes):"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": "n_{\\mathrm{offset}} = \\sum_{k=0}^{N-1} s_k n_k"
          },
          "type": "BlockMath"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "from the beginning of the memory block associated with the array. Here, "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": "s_k"
                },
                "type": "Math"
              },
              {
                "data": {
                  "value": " are integers which specify the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "strides\n<ndarray.strides>"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " of the array. The "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "column-major"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " order (used, for example, in the Fortran language and in "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "Matlab"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": ") and "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "row-major"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " order (used in C) schemes are just specific kinds of strided scheme, and correspond to memory that can be "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "addressed"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": " by the strides:"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": "s_k^{\\mathrm{column}} = \\mathrm{itemsize} \\prod_{j=0}^{k-1} d_j ,\n\\quad  s_k^{\\mathrm{row}} = \\mathrm{itemsize} \\prod_{j=k+1}^{N-1} d_j ."
          },
          "type": "BlockMath"
        },
        {
          "data": {
            "argument": "single-segment, contiguous, non-contiguous",
            "content": "",
            "name": "index",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "where "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": "d_j"
                },
                "type": "Math"
              },
              {
                "data": {
                  "value": " "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "= self.shape[j]"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": "."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Both the C and Fortran orders are "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "contiguous"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "i.e.,"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": " single-segment, memory layouts, in which every part of the memory block can be accessed by some combination of the indices."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "children": [
                    {
                      "data": {
                        "domain": null,
                        "role": null,
                        "value": "Contiguous arrays"
                      },
                      "type": "Directive"
                    },
                    {
                      "data": {
                        "value": " and "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "domain": null,
                        "role": null,
                        "value": "single-segment arrays"
                      },
                      "type": "Directive"
                    },
                    {
                      "data": {
                        "value": " are synonymous and are used interchangeably throughout the documentation."
                      },
                      "type": "Words"
                    }
                  ]
                },
                "type": "Paragraph"
              }
            ],
            "kind": "note",
            "title": ""
          },
          "type": "Admonition"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "While a C-style and Fortran-style contiguous array, which has the corresponding flags set, can be addressed with the above strides, the actual strides may be different. This can happen in two cases:"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "children": [
                    {
                      "children": [
                        {
                          "data": {
                            "children": [
                              {
                                "data": {
                                  "value": "If "
                                },
                                "type": "Words"
                              },
                              {
                                "data": {
                                  "value": [
                                    "self.shape[k] == 1"
                                  ]
                                },
                                "type": "Verbatim"
                              },
                              {
                                "data": {
                                  "value": " then for any legal index "
                                },
                                "type": "Words"
                              },
                              {
                                "data": {
                                  "value": [
                                    "index[k] == 0"
                                  ]
                                },
                                "type": "Verbatim"
                              },
                              {
                                "data": {
                                  "value": ".        This means that in the formula for the offset "
                                },
                                "type": "Words"
                              },
                              {
                                "data": {
                                  "value": "n_k = 0"
                                },
                                "type": "Math"
                              },
                              {
                                "data": {
                                  "value": " and thus        "
                                },
                                "type": "Words"
                              },
                              {
                                "data": {
                                  "value": "s_k n_k = 0"
                                },
                                "type": "Math"
                              },
                              {
                                "data": {
                                  "value": " and the value of "
                                },
                                "type": "Words"
                              },
                              {
                                "data": {
                                  "value": "s_k"
                                },
                                "type": "Math"
                              },
                              {
                                "data": {
                                  "value": " "
                                },
                                "type": "Words"
                              },
                              {
                                "data": {
                                  "domain": null,
                                  "role": null,
                                  "value": "= self.strides[k]"
                                },
                                "type": "Directive"
                              },
                              {
                                "data": {
                                  "value": " is        arbitrary."
                                },
                                "type": "Words"
                              }
                            ]
                          },
                          "type": "Paragraph"
                        }
                      ]
                    },
                    {
                      "children": [
                        {
                          "data": {
                            "children": [
                              {
                                "data": {
                                  "value": "If an array has no elements ("
                                },
                                "type": "Words"
                              },
                              {
                                "data": {
                                  "value": [
                                    "self.size == 0"
                                  ]
                                },
                                "type": "Verbatim"
                              },
                              {
                                "data": {
                                  "value": ") there is no legal        index and the strides are never used. Any array with no elements may be        considered C-style and Fortran-style contiguous."
                                },
                                "type": "Words"
                              }
                            ]
                          },
                          "type": "Paragraph"
                        }
                      ]
                    }
                  ]
                },
                "type": "EnumeratedList"
              }
            ]
          },
          "type": "BlockQuote"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Point 1. means that "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "self"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " and "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "self.squeeze()"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " always have the same contiguity and "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "aligned"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " flags value. This also means that even a high dimensional array could be C-style and Fortran-style contiguous at the same time."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "argument": "aligned",
            "content": "",
            "name": "index",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "An array is considered aligned if the memory offsets for all elements and the base offset itself is a multiple of "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "self.itemsize"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": ". Understanding "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "memory-alignment"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " leads to better performance on most hardware."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "children": [
                    {
                      "data": {
                        "value": "It does "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": {
                          "value": "not"
                        }
                      },
                      "type": "Emph"
                    },
                    {
                      "data": {
                        "value": " generally hold that "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "self.strides[-1] == self.itemsize"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " for C-style contiguous arrays or "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "self.strides[0] == self.itemsize"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " for Fortran-style contiguous arrays is true."
                      },
                      "type": "Words"
                    }
                  ]
                },
                "type": "Paragraph"
              },
              {
                "data": {
                  "children": [
                    {
                      "data": {
                        "value": [
                          "NPY_RELAXED_STRIDES_DEBUG=1"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " can be used to help find errors when incorrectly relying on the strides in C-extension code (see below warning)."
                      },
                      "type": "Words"
                    }
                  ]
                },
                "type": "Paragraph"
              }
            ],
            "kind": "warning",
            "title": ""
          },
          "type": "Admonition"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Data in new "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "ndarrays <ndarray>"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " is in the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "row-major"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " (C) order, unless otherwise specified, but, for example, "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "basic\narray slicing <arrays.indexing>"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " often produces "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "views <view>"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " in a different scheme."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": ".. seealso: :ref:`Indexing <arrays.ndarray.indexing>`_"
          },
          "type": "Comment"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "children": [
                    {
                      "data": {
                        "value": "Several algorithms in NumPy work on arbitrarily strided arrays. However, some algorithms require single-segment arrays. When an irregularly strided array is passed in to such algorithms, a copy is automatically made."
                      },
                      "type": "Words"
                    }
                  ]
                },
                "type": "Paragraph"
              }
            ],
            "kind": "note",
            "title": ""
          },
          "type": "Admonition"
        },
        {
          "data": {
            "placeholder": "target",
            "value": ".. _arrays.ndarray.attributes:"
          },
          "type": "Unimplemented"
        }
      ],
      "level": 1,
      "title": "Internal memory layout of an ndarray"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Array attributes reflect information that is intrinsic to the array itself. Generally, accessing an array through its attributes allows you to get and sometimes set intrinsic properties of the array without creating a new array. The exposed attributes are the core parts of an array and only some of them can be reset meaningfully without creating a new array. Information on each attribute is given below."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "level": 1,
      "title": "Array attributes"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "The following attributes contain information about the memory layout of the array:"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": ".. autosummary:: \n    :toctree:generated/\n    ndarray.flags\n    ndarray.shape\n    ndarray.strides\n    ndarray.ndim\n    ndarray.data\n    ndarray.size\n    ndarray.itemsize\n    ndarray.nbytes\n    ndarray.base"
          },
          "type": "BlockVerbatim"
        }
      ],
      "level": 2,
      "title": "Memory layout"
    },
    {
      "children": [
        {
          "data": {
            "argument": ":ref:`Data type objects <arrays.dtypes>`",
            "content": "",
            "name": "seealso",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "The data type object associated with the array can be found in the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "dtype <ndarray.dtype>"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " attribute:"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": ".. autosummary:: \n    :toctree:generated/\n    ndarray.dtype"
          },
          "type": "BlockVerbatim"
        }
      ],
      "level": 2,
      "title": "Data type"
    },
    {
      "children": [
        {
          "data": {
            "value": ".. autosummary:: \n    :toctree:generated/\n    ndarray.T\n    ndarray.real\n    ndarray.imag\n    ndarray.flat"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "placeholder": "target",
            "value": ".. _arrays.ndarray.array-interface:"
          },
          "type": "Unimplemented"
        }
      ],
      "level": 2,
      "title": "Other attributes"
    },
    {
      "children": [
        {
          "data": {
            "argument": ":ref:`arrays.interface`.",
            "content": "",
            "name": "seealso",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "==================================  =================================== "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "~object.__array_interface__"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": "  Python-side of the array interface "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "~object.__array_struct__"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": "     C-side of the array interface ==================================  ==================================="
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "level": 2,
      "title": "Array interface"
    },
    {
      "children": [
        {
          "data": {
            "value": ".. autosummary:: \n    :toctree:generated/\n    ndarray.ctypes"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "placeholder": "target",
            "value": ".. _array.ndarray.methods:"
          },
          "type": "Unimplemented"
        }
      ],
      "level": 2,
      "title": ":mod:`ctypes` foreign function interface"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "An "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "ndarray"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " object has many methods which operate on or with the array in some fashion, typically returning an array result. These methods are briefly explained below. (Each method's docstring has a more complete description.)"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "For the following methods there are also corresponding functions in "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "numpy"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ": "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "all"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "any"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "argmax"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "argmin"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "argpartition"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "argsort"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "choose"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "clip"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "compress"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "copy"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "cumprod"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "cumsum"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "diagonal"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "imag"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "max <amax>"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "mean"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "min <amin>"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "nonzero"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "partition"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "prod"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "ptp"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "put"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "ravel"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "real"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "repeat"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "reshape"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "round <around>"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "searchsorted"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "sort"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "squeeze"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "std"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "sum"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "swapaxes"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "take"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "trace"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "transpose"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "var"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": "."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "level": 1,
      "title": "Array methods"
    },
    {
      "children": [
        {
          "data": {
            "value": ".. autosummary:: \n    :toctree:generated/\n    ndarray.item\n    ndarray.tolist\n    ndarray.itemset\n    ndarray.tostring\n    ndarray.tobytes\n    ndarray.tofile\n    ndarray.dump\n    ndarray.dumps\n    ndarray.astype\n    ndarray.byteswap\n    ndarray.copy\n    ndarray.view\n    ndarray.getfield\n    ndarray.setflags\n    ndarray.fill"
          },
          "type": "BlockVerbatim"
        }
      ],
      "level": 2,
      "title": "Array conversion"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "For reshape, resize, and transpose, the single tuple argument may be replaced with "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "n"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " integers which will be interpreted as an n-tuple."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": ".. autosummary:: \n    :toctree:generated/\n    ndarray.reshape\n    ndarray.resize\n    ndarray.transpose\n    ndarray.swapaxes\n    ndarray.flatten\n    ndarray.ravel\n    ndarray.squeeze"
          },
          "type": "BlockVerbatim"
        }
      ],
      "level": 2,
      "title": "Shape manipulation"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "For array methods that take an "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "axis"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": " keyword, it defaults to "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "None"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": ". If axis is "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "None"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": ", then the array is treated as a 1-D array. Any other value for "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "axis"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": " represents the dimension along which the operation should proceed."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": ".. autosummary:: \n    :toctree:generated/\n    ndarray.take\n    ndarray.put\n    ndarray.repeat\n    ndarray.choose\n    ndarray.sort\n    ndarray.argsort\n    ndarray.partition\n    ndarray.argpartition\n    ndarray.searchsorted\n    ndarray.nonzero\n    ndarray.compress\n    ndarray.diagonal"
          },
          "type": "BlockVerbatim"
        }
      ],
      "level": 2,
      "title": "Item selection and manipulation"
    },
    {
      "children": [
        {
          "data": {
            "argument": "axis",
            "content": "",
            "name": "index",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Many of these methods take an argument named "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "axis"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": ". In such cases,"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "If "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": {
                              "value": "axis"
                            }
                          },
                          "type": "Emph"
                        },
                        {
                          "data": {
                            "value": " is "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": {
                              "value": "None"
                            }
                          },
                          "type": "Emph"
                        },
                        {
                          "data": {
                            "value": " (the default), the array is treated as a 1-D   array and the operation is performed over the entire array. This   behavior is also the default if self is a 0-dimensional array or   array scalar. (An array scalar is an instance of the types/classes   float32, float64, etc., whereas a 0-dimensional array is an ndarray   instance containing precisely one array scalar.)"
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "If "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": {
                              "value": "axis"
                            }
                          },
                          "type": "Emph"
                        },
                        {
                          "data": {
                            "value": " is an integer, then the operation is done over the given   axis (for each 1-D subarray that can be created along the given axis)."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              }
            ]
          },
          "type": "BulletList"
        },
        {
          "data": {
            "argument": "Example of the *axis* argument",
            "content": "A 3-dimensional array of size 3 x 3 x 3, summed over each of its\nthree axes\n\n>>> x = np.arange(27).reshape((3,3,3))\n>>> x\narray([[[ 0,  1,  2],\n        [ 3,  4,  5],\n        [ 6,  7,  8]],\n       [[ 9, 10, 11],\n        [12, 13, 14],\n        [15, 16, 17]],\n       [[18, 19, 20],\n        [21, 22, 23],\n        [24, 25, 26]]])\n>>> x.sum(axis=0)\narray([[27, 30, 33],\n       [36, 39, 42],\n       [45, 48, 51]])\n>>> # for sum, axis is the first keyword, so we may omit it,\n>>> # specifying only its value\n>>> x.sum(0), x.sum(1), x.sum(2)\n(array([[27, 30, 33],\n        [36, 39, 42],\n        [45, 48, 51]]),\n array([[ 9, 12, 15],\n        [36, 39, 42],\n        [63, 66, 69]]),\n array([[ 3, 12, 21],\n        [30, 39, 48],\n        [57, 66, 75]]))",
            "name": "admonition",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "The parameter "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "dtype"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": " specifies the data type over which a reduction operation (like summing) should take place. The default reduce data type is the same as the data type of "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "self"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": ". To avoid overflow, it can be useful to perform the reduction using a larger data type."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "For several methods, an optional "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "out"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": " argument can also be provided and the result will be placed into the output array given. The "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "out"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": " argument must be an "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "ndarray"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " and have the same number of elements. It can have a different data type in which case casting will be performed."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": ".. autosummary:: \n    :toctree:generated/\n    ndarray.max\n    ndarray.argmax\n    ndarray.min\n    ndarray.argmin\n    ndarray.ptp\n    ndarray.clip\n    ndarray.conj\n    ndarray.round\n    ndarray.trace\n    ndarray.sum\n    ndarray.cumsum\n    ndarray.mean\n    ndarray.var\n    ndarray.std\n    ndarray.prod\n    ndarray.cumprod\n    ndarray.all\n    ndarray.any"
          },
          "type": "BlockVerbatim"
        }
      ],
      "level": 2,
      "title": "Calculation"
    },
    {
      "children": [
        {
          "data": {
            "argument": "comparison, arithmetic, matrix, operation, operator",
            "content": "",
            "name": "index",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Arithmetic and comparison operations on "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "ndarrays <ndarray>"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " are defined as element-wise operations, and generally yield "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "ndarray"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " objects as results."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Each of the arithmetic operations ("
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "+"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "-"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "*"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "/"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "//"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "%"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "divmod()"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "**"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " or "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "pow()"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "<<"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    ">>"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "&"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "^"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "|"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "~"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ") and the comparisons ("
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "=="
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "<"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    ">"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "<="
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    ">="
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "!="
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ") is equivalent to the corresponding universal function (or "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "ufunc"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " for short) in NumPy.  For more information, see the section on "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "Universal Functions\n<ufuncs>"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": "."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Comparison operators:"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": ".. autosummary:: \n    :toctree:generated/\n    ndarray.__lt__\n    ndarray.__le__\n    ndarray.__gt__\n    ndarray.__ge__\n    ndarray.__eq__\n    ndarray.__ne__"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Truth value of an array ("
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "bool() <bool>"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": "):"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": ".. autosummary:: \n    :toctree:generated/\n    ndarray.__bool__"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "children": [
                    {
                      "data": {
                        "value": "Truth-value testing of an array invokes "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "domain": null,
                        "role": "meth",
                        "value": "ndarray.__bool__"
                      },
                      "type": "Directive"
                    },
                    {
                      "data": {
                        "value": ", which raises an error if the number of elements in the array is larger than 1, because the truth value of such arrays is ambiguous. Use "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "domain": null,
                        "role": "meth",
                        "value": ".any() <ndarray.any>"
                      },
                      "type": "Directive"
                    },
                    {
                      "data": {
                        "value": " and "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "domain": null,
                        "role": "meth",
                        "value": ".all() <ndarray.all>"
                      },
                      "type": "Directive"
                    },
                    {
                      "data": {
                        "value": " instead to be clear about what is meant in such cases. (If the number of elements is 0, the array evaluates to "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "False"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": ".)"
                      },
                      "type": "Words"
                    }
                  ]
                },
                "type": "Paragraph"
              }
            ],
            "kind": "note",
            "title": ""
          },
          "type": "Admonition"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Unary operations:"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": ".. autosummary:: \n    :toctree:generated/\n    ndarray.__neg__\n    ndarray.__pos__\n    ndarray.__abs__\n    ndarray.__invert__"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Arithmetic:"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": ".. autosummary:: \n    :toctree:generated/\n    ndarray.__add__\n    ndarray.__sub__\n    ndarray.__mul__\n    ndarray.__truediv__\n    ndarray.__floordiv__\n    ndarray.__mod__\n    ndarray.__divmod__\n    ndarray.__pow__\n    ndarray.__lshift__\n    ndarray.__rshift__\n    ndarray.__and__\n    ndarray.__or__\n    ndarray.__xor__"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "children": [
                    {
                      "children": [
                        {
                          "data": {
                            "children": [
                              {
                                "data": {
                                  "value": "Any third argument to "
                                },
                                "type": "Words"
                              },
                              {
                                "data": {
                                  "domain": null,
                                  "role": "func",
                                  "value": "pow()"
                                },
                                "type": "Directive"
                              },
                              {
                                "data": {
                                  "value": " is silently ignored,   as the underlying "
                                },
                                "type": "Words"
                              },
                              {
                                "data": {
                                  "domain": null,
                                  "role": "func",
                                  "value": "ufunc <power>"
                                },
                                "type": "Directive"
                              },
                              {
                                "data": {
                                  "value": " takes only two arguments."
                                },
                                "type": "Words"
                              }
                            ]
                          },
                          "type": "Paragraph"
                        }
                      ]
                    },
                    {
                      "children": [
                        {
                          "data": {
                            "children": [
                              {
                                "data": {
                                  "value": "Because "
                                },
                                "type": "Words"
                              },
                              {
                                "data": {
                                  "domain": null,
                                  "role": "class",
                                  "value": "ndarray"
                                },
                                "type": "Directive"
                              },
                              {
                                "data": {
                                  "value": " is a built-in type (written in C), the   "
                                },
                                "type": "Words"
                              },
                              {
                                "data": {
                                  "value": [
                                    "__r{op}__"
                                  ]
                                },
                                "type": "Verbatim"
                              },
                              {
                                "data": {
                                  "value": " special methods are not directly defined."
                                },
                                "type": "Words"
                              }
                            ]
                          },
                          "type": "Paragraph"
                        }
                      ]
                    },
                    {
                      "children": [
                        {
                          "data": {
                            "children": [
                              {
                                "data": {
                                  "value": "The functions called to implement many arithmetic special methods   for arrays can be modified using "
                                },
                                "type": "Words"
                              },
                              {
                                "data": {
                                  "domain": null,
                                  "role": "class",
                                  "value": "__array_ufunc__ <numpy.class.__array_ufunc__>"
                                },
                                "type": "Directive"
                              },
                              {
                                "data": {
                                  "value": "."
                                },
                                "type": "Words"
                              }
                            ]
                          },
                          "type": "Paragraph"
                        }
                      ]
                    }
                  ]
                },
                "type": "BulletList"
              }
            ],
            "kind": "note",
            "title": ""
          },
          "type": "Admonition"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Arithmetic, in-place:"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": ".. autosummary:: \n    :toctree:generated/\n    ndarray.__iadd__\n    ndarray.__isub__\n    ndarray.__imul__\n    ndarray.__itruediv__\n    ndarray.__ifloordiv__\n    ndarray.__imod__\n    ndarray.__ipow__\n    ndarray.__ilshift__\n    ndarray.__irshift__\n    ndarray.__iand__\n    ndarray.__ior__\n    ndarray.__ixor__"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "children": [
                    {
                      "data": {
                        "value": "In place operations will perform the calculation using the precision decided by the data type of the two operands, but will silently downcast the result (if necessary) so it can fit back into the array.  Therefore, for mixed precision calculations, "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "A {op}=\nB"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " can be different than "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "A = A {op} B"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": ". For example, suppose "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "a = ones((3,3))"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": ". Then, "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "a += 3j"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " is different than "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "a = a +\n3j"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": ": while they both perform the same computation, "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "a += 3"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " casts the result to fit back in "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "a"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": ", whereas "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "a = a + 3j"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " re-binds the name "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "a"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " to the result."
                      },
                      "type": "Words"
                    }
                  ]
                },
                "type": "Paragraph"
              }
            ],
            "kind": "warning",
            "title": ""
          },
          "type": "Admonition"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Matrix Multiplication:"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": ".. autosummary:: \n    :toctree:generated/\n    ndarray.__matmul__"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "children": [
                    {
                      "data": {
                        "value": "Matrix operators "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "@"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " and "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "@="
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " were introduced in Python 3.5 following "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "domain": null,
                        "role": "pep",
                        "value": "465"
                      },
                      "type": "Directive"
                    },
                    {
                      "data": {
                        "value": ", and the "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "@"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " operator has been introduced in NumPy 1.10.0. Further information can be found in the "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "domain": null,
                        "role": "func",
                        "value": "matmul"
                      },
                      "type": "Directive"
                    },
                    {
                      "data": {
                        "value": " documentation."
                      },
                      "type": "Words"
                    }
                  ]
                },
                "type": "Paragraph"
              }
            ],
            "kind": "note",
            "title": ""
          },
          "type": "Admonition"
        }
      ],
      "level": 1,
      "title": "Arithmetic, matrix multiplication, and comparison operations"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "For standard library functions:"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": ".. autosummary:: \n    :toctree:generated/\n    ndarray.__copy__\n    ndarray.__deepcopy__\n    ndarray.__reduce__\n    ndarray.__setstate__"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Basic customization:"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": ".. autosummary:: \n    :toctree:generated/\n    ndarray.__new__\n    ndarray.__array__\n    ndarray.__array_wrap__"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Container customization: (see "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "Indexing <arrays.indexing>"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ")"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": ".. autosummary:: \n    :toctree:generated/\n    ndarray.__len__\n    ndarray.__getitem__\n    ndarray.__setitem__\n    ndarray.__contains__"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Conversion; the operations "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "int() <int>"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "float() <float>"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " and "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "complex() <complex>"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ". They work only on arrays that have one element in them and return the appropriate scalar."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": ".. autosummary:: \n    :toctree:generated/\n    ndarray.__int__\n    ndarray.__float__\n    ndarray.__complex__"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "String representations:"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": ".. autosummary:: \n    :toctree:generated/\n    ndarray.__str__\n    ndarray.__repr__"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Utility method for typing:"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": ".. autosummary:: \n    :toctree:generated/\n    ndarray.__class_getitem__"
          },
          "type": "BlockVerbatim"
        }
      ],
      "level": 1,
      "title": "Special methods"
    }
  ],
  "content": {},
  "example_section_data": {
    "children": [],
    "level": 0,
    "title": null
  },
  "item_file": null,
  "item_line": null,
  "item_type": null,
  "ordered_sections": [],
  "references": null,
  "see_also": [],
  "signature": {
    "value": null
  }
}