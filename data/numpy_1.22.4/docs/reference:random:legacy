{
  "aliases": [],
  "arbitrary": [
    {
      "children": [
        {
          "data": {
            "argument": "numpy.random",
            "content": "",
            "name": "currentmodule",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "placeholder": "target",
            "value": ".. _legacy:"
          },
          "type": "Unimplemented"
        }
      ],
      "level": 0,
      "title": null
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "The "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "RandomState"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " provides access to legacy generators. This generator is considered frozen and will have no further improvements.  It is guaranteed to produce the same values as the final point release of NumPy v1.16. These all depend on Box-Muller normals or inverse CDF exponentials or gammas. This class should only be used if it is essential to have randoms that are identical to what would have been produced by previous versions of NumPy."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "RandomState"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " adds additional information to the state which is required when using Box-Muller normals since these are produced in pairs. It is important to use "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "RandomState.get_state"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": ", and not the underlying bit generators "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "state"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": ", when accessing the state so that these extra values are saved."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Although we provide the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "MT19937"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " BitGenerator for use independent of "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "RandomState"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": ", note that its default seeding uses "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "SeedSequence"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " rather than the legacy seeding algorithm. "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "RandomState"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " will use the legacy seeding algorithm. The methods to use the legacy seeding algorithm are currently private as the main reason to use them is just to implement "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "RandomState"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": ". However, one can reset the state of "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "MT19937"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " using the state of the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "RandomState"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": ":"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "argument": "python",
            "content": "from numpy.random import MT19937\nfrom numpy.random import RandomState\n\nrs = RandomState(12345)\nmt19937 = MT19937()\nmt19937.state = rs.get_state()\nrs2 = RandomState(mt19937)\n\n# Same output\nrs.standard_normal()\nrs2.standard_normal()\n\nrs.random()\nrs2.random()\n\nrs.standard_exponential()\nrs2.standard_exponential()",
            "name": "code-block",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "RandomState",
            "content": "",
            "name": "autoclass",
            "options": [
              [
                "members",
                "__init__"
              ],
              [
                "exclude-members",
                "__init__"
              ]
            ]
          },
          "type": "BlockDirective"
        }
      ],
      "level": 0,
      "title": "Legacy Random Generation"
    },
    {
      "children": [
        {
          "data": {
            "value": ".. autosummary:: \n    :toctree:generated/\n    ~RandomState.get_state\n    ~RandomState.set_state\n    ~RandomState.seed"
          },
          "type": "BlockVerbatim"
        }
      ],
      "level": 0,
      "title": "Seeding and State"
    },
    {
      "children": [
        {
          "data": {
            "value": ".. autosummary:: \n    :toctree:generated/\n    ~RandomState.rand\n    ~RandomState.randn\n    ~RandomState.randint\n    ~RandomState.random_integers\n    ~RandomState.random_sample\n    ~RandomState.choice\n    ~RandomState.bytes"
          },
          "type": "BlockVerbatim"
        }
      ],
      "level": 0,
      "title": "Simple random data"
    },
    {
      "children": [
        {
          "data": {
            "value": ".. autosummary:: \n    :toctree:generated/\n    ~RandomState.shuffle\n    ~RandomState.permutation"
          },
          "type": "BlockVerbatim"
        }
      ],
      "level": 0,
      "title": "Permutations"
    },
    {
      "children": [
        {
          "data": {
            "value": ".. autosummary:: \n    :toctree:generated/\n    ~RandomState.beta\n    ~RandomState.binomial\n    ~RandomState.chisquare\n    ~RandomState.dirichlet\n    ~RandomState.exponential\n    ~RandomState.f\n    ~RandomState.gamma\n    ~RandomState.geometric\n    ~RandomState.gumbel\n    ~RandomState.hypergeometric\n    ~RandomState.laplace\n    ~RandomState.logistic\n    ~RandomState.lognormal\n    ~RandomState.logseries\n    ~RandomState.multinomial\n    ~RandomState.multivariate_normal\n    ~RandomState.negative_binomial\n    ~RandomState.noncentral_chisquare\n    ~RandomState.noncentral_f\n    ~RandomState.normal\n    ~RandomState.pareto\n    ~RandomState.poisson\n    ~RandomState.power\n    ~RandomState.rayleigh\n    ~RandomState.standard_cauchy\n    ~RandomState.standard_exponential\n    ~RandomState.standard_gamma\n    ~RandomState.standard_normal\n    ~RandomState.standard_t\n    ~RandomState.triangular\n    ~RandomState.uniform\n    ~RandomState.vonmises\n    ~RandomState.wald\n    ~RandomState.weibull\n    ~RandomState.zipf"
          },
          "type": "BlockVerbatim"
        }
      ],
      "level": 0,
      "title": "Distributions"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Many of the RandomState methods above are exported as functions in "
                },
                "type": "Words"
              },
              {
                "data": {
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "api",
                    "module": "numpy",
                    "path": "numpy.random",
                    "version": "*"
                  },
                  "value": "numpy.random"
                },
                "type": "Link"
              },
              {
                "data": {
                  "value": " This usage is discouraged, as it is implemented via a global "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "RandomState"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " instance which is not advised on two counts:"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "It uses global state, which means results will change as the code changes"
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "It uses a "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "domain": null,
                            "role": null,
                            "value": "RandomState"
                          },
                          "type": "Directive"
                        },
                        {
                          "data": {
                            "value": " rather than the more modern "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "domain": null,
                            "role": null,
                            "value": "Generator"
                          },
                          "type": "Directive"
                        },
                        {
                          "data": {
                            "value": "."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              }
            ]
          },
          "type": "BulletList"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "For backward compatible legacy reasons, we cannot change this. See "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "random-quick-start"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": "."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": ".. autosummary:: \n    :toctree:generated/\n\n    beta\n    binomial\n    bytes\n    chisquare\n    choice\n    dirichlet\n    exponential\n    f\n    gamma\n    geometric\n    get_state\n    gumbel\n    hypergeometric\n    laplace\n    logistic\n    lognormal\n    logseries\n    multinomial\n    multivariate_normal\n    negative_binomial\n    noncentral_chisquare\n    noncentral_f\n    normal\n    pareto\n    permutation\n    poisson\n    power\n    rand\n    randint\n    randn\n    random\n    random_integers\n    random_sample\n    ranf\n    rayleigh\n    sample\n    seed\n    set_state\n    shuffle\n    standard_cauchy\n    standard_exponential\n    standard_gamma\n    standard_normal\n    standard_t\n    triangular\n    uniform\n    vonmises\n    wald\n    weibull\n    zipf\n"
          },
          "type": "BlockVerbatim"
        }
      ],
      "level": 0,
      "title": "Functions in `numpy.random`"
    }
  ],
  "content": {},
  "example_section_data": {
    "children": [],
    "level": 0,
    "title": null
  },
  "item_file": null,
  "item_line": null,
  "item_type": null,
  "ordered_sections": [],
  "references": null,
  "see_also": [],
  "signature": {
    "value": null
  }
}