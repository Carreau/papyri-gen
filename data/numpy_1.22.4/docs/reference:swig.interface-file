{
  "aliases": [],
  "arbitrary": [
    {
      "children": [],
      "level": 0,
      "title": "numpy.i: a SWIG Interface File for NumPy"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "The Simple Wrapper and Interface Generator (or "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "SWIG\n<http://www.swig.org>"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": ") is a powerful tool for generating wrapper code for interfacing to a wide variety of scripting languages. "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "SWIG"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " can parse header files, and using only the code prototypes, create an interface to the target language.  But "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "SWIG"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " is not omnipotent.  For example, it cannot know from the prototype:      "
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": "double rms(double* seq, int n);"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "what exactly "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "seq"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " is.  Is it a single value to be altered in-place? Is it an array, and if so what is its length?  Is it input-only? Output-only?  Input-output?  "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "SWIG"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " cannot determine these details, and does not attempt to do so."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "If we designed "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "rms"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", we probably made it a routine that takes an input-only array of length "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "n"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " of "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "double"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " values called "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "seq"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " and returns the root mean square.  The default behavior of "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "SWIG"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": ", however, will be to create a wrapper function that compiles, but is nearly impossible to use from the scripting language in the way the C routine was intended."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "For Python, the preferred way of handling contiguous (or technically, "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "strided"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": ") blocks of homogeneous data is with NumPy, which provides full object-oriented access to multidimensial arrays of data.  Therefore, the most logical Python interface for the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "rms"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " function would be (including doc string):      "
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": "def rms(seq):\n    \"\"\"\n    rms: return the root mean square of a sequence\n    rms(numpy.ndarray) -> double\n    rms(list) -> double\n    rms(tuple) -> double\n    \"\"\""
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "where "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "seq"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " would be a NumPy array of "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "double"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " values, and its length "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "n"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " would be extracted from "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "seq"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " internally before being passed to the C routine.  Even better, since NumPy supports construction of arrays from arbitrary Python sequences, "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "seq"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " itself could be a nearly arbitrary sequence (so long as each element can be converted to a "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "double"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ") and the wrapper code would internally convert it to a NumPy array before extracting its data and length."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "SWIG"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " allows these types of conversions to be defined via a mechanism called "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "typemaps"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": ".  This document provides information on how to use "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "numpy.i"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", a "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "SWIG"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " interface file that defines a series of typemaps intended to make the type of array-related conversions described above relatively simple to implement.  For example, suppose that the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "rms"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " function prototype defined above was in a header file named "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "rms.h"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ".  To obtain the Python interface discussed above, your "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "SWIG"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " interface file would need the following:      "
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": "%{\n#define SWIG_FILE_WITH_INIT\n#include \"rms.h\"\n%}\n\n%include \"numpy.i\"\n\n%init %{\nimport_array();\n%}\n\n%apply (double* IN_ARRAY1, int DIM1) {(double* seq, int n)};\n%include \"rms.h\""
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Typemaps are keyed off a list of one or more function arguments, either by type or by type and name.  We will refer to such lists as "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "signatures"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": ".  One of the many typemaps defined by "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "numpy.i"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " is used above and has the signature "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "(double* IN_ARRAY1, int DIM1)"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ".  The argument names are intended to suggest that the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "double*"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " argument is an input array of one dimension and that the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "int"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " represents the size of that dimension.  This is precisely the pattern in the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "rms"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " prototype."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Most likely, no actual prototypes to be wrapped will have the argument names "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "IN_ARRAY1"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " and "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "DIM1"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ".  We use the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "SWIG"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "%apply"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " directive to apply the typemap for one-dimensional input arrays of type "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "double"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " to the actual prototype used by "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "rms"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ".  Using "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "numpy.i"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " effectively, therefore, requires knowing what typemaps are available and what they do."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "A "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "SWIG"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " interface file that includes the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "SWIG"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " directives given above will produce wrapper code that looks something like:       "
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": "1 PyObject *_wrap_rms(PyObject *args) {\n2   PyObject *resultobj = 0;\n3   double *arg1 = (double *) 0 ;\n4   int arg2 ;\n5   double result;\n6   PyArrayObject *array1 = NULL ;\n7   int is_new_object1 = 0 ;\n8   PyObject * obj0 = 0 ;\n9\n0   if (!PyArg_ParseTuple(args,(char *)\"O:rms\",&obj0)) SWIG_fail;\n1   {\n2     array1 = obj_to_array_contiguous_allow_conversion(\n3                  obj0, NPY_DOUBLE, &is_new_object1);\n4     npy_intp size[1] = {\n5       -1\n6     };\n7     if (!array1 || !require_dimensions(array1, 1) ||\n8         !require_size(array1, size, 1)) SWIG_fail;\n9     arg1 = (double*) array1->data;\n0     arg2 = (int) array1->dimensions[0];\n1   }\n2   result = (double)rms(arg1,arg2);\n3   resultobj = SWIG_From_double((double)(result));\n4   {\n5     if (is_new_object1 && array1) Py_DECREF(array1);\n6   }\n7   return resultobj;\n8 fail:\n9   {\n0     if (is_new_object1 && array1) Py_DECREF(array1);\n1   }\n2   return NULL;\n3 }"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "The typemaps from "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "numpy.i"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " are responsible for the following lines of code: 12--20, 25 and 30.  Line 10 parses the input to the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "rms"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " function.  From the format string "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "\"O:rms\""
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", we can see that the argument list is expected to be a single Python object (specified by the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "O"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " before the colon) and whose pointer is stored in "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "obj0"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ".  A number of functions, supplied by "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "numpy.i"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", are called to make and check the (possible) conversion from a generic Python object to a NumPy array.  These functions are explained in the section "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "Helper Functions"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": ", but hopefully their names are self-explanatory.  At line 12 we use "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "obj0"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " to construct a NumPy array.  At line 17, we check the validity of the result: that it is non-null and that it has a single dimension of arbitrary length.  Once these states are verified, we extract the data buffer and length in lines 19 and 20 so that we can call the underlying C function at line 22.  Line 25 performs memory management for the case where we have created a new array that is no longer needed."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "This code has a significant amount of error handling.  Note the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "SWIG_fail"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " is a macro for "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "goto fail"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", referring to the label at line 28.  If the user provides the wrong number of arguments, this will be caught at line 10.  If construction of the NumPy array fails or produces an array with the wrong number of dimensions, these errors are caught at line 17.  And finally, if an error is detected, memory is still managed correctly at line 30."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Note that if the C function signature was in a different order:      "
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": "double rms(int n, double* seq);"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "that "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "SWIG"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " would not match the typemap signature given above with the argument list for "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "rms"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ".  Fortunately, "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "numpy.i"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " has a set of typemaps with the data pointer given last:      "
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": "%apply (int DIM1, double* IN_ARRAY1) {(int n, double* seq)};"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "This simply has the effect of switching the definitions of "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "arg1"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " and "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "arg2"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " in lines 3 and 4 of the generated code above, and their assignments in lines 19 and 20."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "level": 1,
      "title": "Introduction"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "The "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "numpy.i"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " file is currently located in the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "tools/swig"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " sub-directory under the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "numpy"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " installation directory.  Typically, you will want to copy it to the directory where you are developing your wrappers."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "A simple module that only uses a single "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "SWIG"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " interface file should include the following:      "
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": "%{\n#define SWIG_FILE_WITH_INIT\n%}\n%include \"numpy.i\"\n%init %{\nimport_array();\n%}"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Within a compiled Python module, "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "import_array()"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " should only get called once.  This could be in a C/C++ file that you have written and is linked to the module.  If this is the case, then none of your interface files should "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "#define SWIG_FILE_WITH_INIT"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " or call "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "import_array()"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ".  Or, this initialization call could be in a wrapper file generated by "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "SWIG"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " from an interface file that has the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "%init"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " block as above.  If this is the case, and you have more than one "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "SWIG"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " interface file, then only one interface file should "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "#define SWIG_FILE_WITH_INIT"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " and call "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "import_array()"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": "."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "level": 1,
      "title": "Using numpy.i"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "The typemap directives provided by "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "numpy.i"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " for arrays of different data types, say "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "double"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " and "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "int"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", and dimensions of different types, say "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "int"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " or "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "long"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", are identical to one another except for the C and NumPy type specifications.  The typemaps are therefore implemented (typically behind the scenes) via a macro:      "
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": "%numpy_typemaps(DATA_TYPE, DATA_TYPECODE, DIM_TYPE)"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "that can be invoked for appropriate "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "(DATA_TYPE, DATA_TYPECODE,\nDIM_TYPE)"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " triplets.  For example:      "
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": "%numpy_typemaps(double, NPY_DOUBLE, int)\n%numpy_typemaps(int,    NPY_INT   , int)"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "The "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "numpy.i"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " interface file uses the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "%numpy_typemaps"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " macro to implement typemaps for the following C data types and "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "int"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " dimension types:"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "children": [
                    {
                      "children": [
                        {
                          "data": {
                            "children": [
                              {
                                "data": {
                                  "value": [
                                    "signed char"
                                  ]
                                },
                                "type": "Verbatim"
                              }
                            ]
                          },
                          "type": "Paragraph"
                        }
                      ]
                    },
                    {
                      "children": [
                        {
                          "data": {
                            "children": [
                              {
                                "data": {
                                  "value": [
                                    "unsigned char"
                                  ]
                                },
                                "type": "Verbatim"
                              }
                            ]
                          },
                          "type": "Paragraph"
                        }
                      ]
                    },
                    {
                      "children": [
                        {
                          "data": {
                            "children": [
                              {
                                "data": {
                                  "value": [
                                    "short"
                                  ]
                                },
                                "type": "Verbatim"
                              }
                            ]
                          },
                          "type": "Paragraph"
                        }
                      ]
                    },
                    {
                      "children": [
                        {
                          "data": {
                            "children": [
                              {
                                "data": {
                                  "value": [
                                    "unsigned short"
                                  ]
                                },
                                "type": "Verbatim"
                              }
                            ]
                          },
                          "type": "Paragraph"
                        }
                      ]
                    },
                    {
                      "children": [
                        {
                          "data": {
                            "children": [
                              {
                                "data": {
                                  "value": [
                                    "int"
                                  ]
                                },
                                "type": "Verbatim"
                              }
                            ]
                          },
                          "type": "Paragraph"
                        }
                      ]
                    },
                    {
                      "children": [
                        {
                          "data": {
                            "children": [
                              {
                                "data": {
                                  "value": [
                                    "unsigned int"
                                  ]
                                },
                                "type": "Verbatim"
                              }
                            ]
                          },
                          "type": "Paragraph"
                        }
                      ]
                    },
                    {
                      "children": [
                        {
                          "data": {
                            "children": [
                              {
                                "data": {
                                  "value": [
                                    "long"
                                  ]
                                },
                                "type": "Verbatim"
                              }
                            ]
                          },
                          "type": "Paragraph"
                        }
                      ]
                    },
                    {
                      "children": [
                        {
                          "data": {
                            "children": [
                              {
                                "data": {
                                  "value": [
                                    "unsigned long"
                                  ]
                                },
                                "type": "Verbatim"
                              }
                            ]
                          },
                          "type": "Paragraph"
                        }
                      ]
                    },
                    {
                      "children": [
                        {
                          "data": {
                            "children": [
                              {
                                "data": {
                                  "value": [
                                    "long long"
                                  ]
                                },
                                "type": "Verbatim"
                              }
                            ]
                          },
                          "type": "Paragraph"
                        }
                      ]
                    },
                    {
                      "children": [
                        {
                          "data": {
                            "children": [
                              {
                                "data": {
                                  "value": [
                                    "unsigned long long"
                                  ]
                                },
                                "type": "Verbatim"
                              }
                            ]
                          },
                          "type": "Paragraph"
                        }
                      ]
                    },
                    {
                      "children": [
                        {
                          "data": {
                            "children": [
                              {
                                "data": {
                                  "value": [
                                    "float"
                                  ]
                                },
                                "type": "Verbatim"
                              }
                            ]
                          },
                          "type": "Paragraph"
                        }
                      ]
                    },
                    {
                      "children": [
                        {
                          "data": {
                            "children": [
                              {
                                "data": {
                                  "value": [
                                    "double"
                                  ]
                                },
                                "type": "Verbatim"
                              }
                            ]
                          },
                          "type": "Paragraph"
                        }
                      ]
                    }
                  ]
                },
                "type": "BulletList"
              }
            ]
          },
          "type": "BlockQuote"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "In the following descriptions, we reference a generic "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "DATA_TYPE"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", which could be any of the C data types listed above, and "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "DIM_TYPE"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " which should be one of the many types of integers."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "The typemap signatures are largely differentiated on the name given to the buffer pointer.  Names with "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "FARRAY"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " are for Fortran-ordered arrays, and names with "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "ARRAY"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " are for C-ordered (or 1D arrays)."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "level": 1,
      "title": "Available Typemaps"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Input arrays are defined as arrays of data that are passed into a routine but are not altered in-place or returned to the user.  The Python input array is therefore allowed to be almost any Python sequence (such as a list) that can be converted to the requested type of array.  The input array signatures are"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "1D:"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "children": [
                    {
                      "children": [
                        {
                          "data": {
                            "children": [
                              {
                                "data": {
                                  "value": [
                                    "(\tDATA_TYPE IN_ARRAY1[ANY] )"
                                  ]
                                },
                                "type": "Verbatim"
                              }
                            ]
                          },
                          "type": "Paragraph"
                        }
                      ]
                    },
                    {
                      "children": [
                        {
                          "data": {
                            "children": [
                              {
                                "data": {
                                  "value": [
                                    "(\tDATA_TYPE* IN_ARRAY1, int DIM1 )"
                                  ]
                                },
                                "type": "Verbatim"
                              }
                            ]
                          },
                          "type": "Paragraph"
                        }
                      ]
                    },
                    {
                      "children": [
                        {
                          "data": {
                            "children": [
                              {
                                "data": {
                                  "value": [
                                    "(\tint DIM1, DATA_TYPE* IN_ARRAY1 )"
                                  ]
                                },
                                "type": "Verbatim"
                              }
                            ]
                          },
                          "type": "Paragraph"
                        }
                      ]
                    }
                  ]
                },
                "type": "BulletList"
              }
            ]
          },
          "type": "BlockQuote"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "2D:"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "children": [
                    {
                      "children": [
                        {
                          "data": {
                            "children": [
                              {
                                "data": {
                                  "value": [
                                    "(\tDATA_TYPE IN_ARRAY2[ANY][ANY] )"
                                  ]
                                },
                                "type": "Verbatim"
                              }
                            ]
                          },
                          "type": "Paragraph"
                        }
                      ]
                    },
                    {
                      "children": [
                        {
                          "data": {
                            "children": [
                              {
                                "data": {
                                  "value": [
                                    "(\tDATA_TYPE* IN_ARRAY2, int DIM1, int DIM2 )"
                                  ]
                                },
                                "type": "Verbatim"
                              }
                            ]
                          },
                          "type": "Paragraph"
                        }
                      ]
                    },
                    {
                      "children": [
                        {
                          "data": {
                            "children": [
                              {
                                "data": {
                                  "value": [
                                    "(\tint DIM1, int DIM2, DATA_TYPE* IN_ARRAY2 )"
                                  ]
                                },
                                "type": "Verbatim"
                              }
                            ]
                          },
                          "type": "Paragraph"
                        }
                      ]
                    },
                    {
                      "children": [
                        {
                          "data": {
                            "children": [
                              {
                                "data": {
                                  "value": [
                                    "(\tDATA_TYPE* IN_FARRAY2, int DIM1, int DIM2 )"
                                  ]
                                },
                                "type": "Verbatim"
                              }
                            ]
                          },
                          "type": "Paragraph"
                        }
                      ]
                    },
                    {
                      "children": [
                        {
                          "data": {
                            "children": [
                              {
                                "data": {
                                  "value": [
                                    "(\tint DIM1, int DIM2, DATA_TYPE* IN_FARRAY2 )"
                                  ]
                                },
                                "type": "Verbatim"
                              }
                            ]
                          },
                          "type": "Paragraph"
                        }
                      ]
                    }
                  ]
                },
                "type": "BulletList"
              }
            ]
          },
          "type": "BlockQuote"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "3D:"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "children": [
                    {
                      "children": [
                        {
                          "data": {
                            "children": [
                              {
                                "data": {
                                  "value": [
                                    "(\tDATA_TYPE IN_ARRAY3[ANY][ANY][ANY] )"
                                  ]
                                },
                                "type": "Verbatim"
                              }
                            ]
                          },
                          "type": "Paragraph"
                        }
                      ]
                    },
                    {
                      "children": [
                        {
                          "data": {
                            "children": [
                              {
                                "data": {
                                  "value": [
                                    "(\tDATA_TYPE* IN_ARRAY3, int DIM1, int DIM2, int DIM3 )"
                                  ]
                                },
                                "type": "Verbatim"
                              }
                            ]
                          },
                          "type": "Paragraph"
                        }
                      ]
                    },
                    {
                      "children": [
                        {
                          "data": {
                            "children": [
                              {
                                "data": {
                                  "value": [
                                    "(\tint DIM1, int DIM2, int DIM3, DATA_TYPE* IN_ARRAY3 )"
                                  ]
                                },
                                "type": "Verbatim"
                              }
                            ]
                          },
                          "type": "Paragraph"
                        }
                      ]
                    },
                    {
                      "children": [
                        {
                          "data": {
                            "children": [
                              {
                                "data": {
                                  "value": [
                                    "(\tDATA_TYPE* IN_FARRAY3, int DIM1, int DIM2, int DIM3 )"
                                  ]
                                },
                                "type": "Verbatim"
                              }
                            ]
                          },
                          "type": "Paragraph"
                        }
                      ]
                    },
                    {
                      "children": [
                        {
                          "data": {
                            "children": [
                              {
                                "data": {
                                  "value": [
                                    "(\tint DIM1, int DIM2, int DIM3, DATA_TYPE* IN_FARRAY3 )"
                                  ]
                                },
                                "type": "Verbatim"
                              }
                            ]
                          },
                          "type": "Paragraph"
                        }
                      ]
                    }
                  ]
                },
                "type": "BulletList"
              }
            ]
          },
          "type": "BlockQuote"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "4D:"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "children": [
                    {
                      "children": [
                        {
                          "data": {
                            "children": [
                              {
                                "data": {
                                  "value": [
                                    "(DATA_TYPE IN_ARRAY4[ANY][ANY][ANY][ANY])"
                                  ]
                                },
                                "type": "Verbatim"
                              }
                            ]
                          },
                          "type": "Paragraph"
                        }
                      ]
                    },
                    {
                      "children": [
                        {
                          "data": {
                            "children": [
                              {
                                "data": {
                                  "value": [
                                    "(DATA_TYPE* IN_ARRAY4, DIM_TYPE DIM1, DIM_TYPE DIM2, DIM_TYPE DIM3, DIM_TYPE DIM4)"
                                  ]
                                },
                                "type": "Verbatim"
                              }
                            ]
                          },
                          "type": "Paragraph"
                        }
                      ]
                    },
                    {
                      "children": [
                        {
                          "data": {
                            "children": [
                              {
                                "data": {
                                  "value": [
                                    "(DIM_TYPE DIM1, DIM_TYPE DIM2, DIM_TYPE DIM3, , DIM_TYPE DIM4, DATA_TYPE* IN_ARRAY4)"
                                  ]
                                },
                                "type": "Verbatim"
                              }
                            ]
                          },
                          "type": "Paragraph"
                        }
                      ]
                    },
                    {
                      "children": [
                        {
                          "data": {
                            "children": [
                              {
                                "data": {
                                  "value": [
                                    "(DATA_TYPE* IN_FARRAY4, DIM_TYPE DIM1, DIM_TYPE DIM2, DIM_TYPE DIM3, DIM_TYPE DIM4)"
                                  ]
                                },
                                "type": "Verbatim"
                              }
                            ]
                          },
                          "type": "Paragraph"
                        }
                      ]
                    },
                    {
                      "children": [
                        {
                          "data": {
                            "children": [
                              {
                                "data": {
                                  "value": [
                                    "(DIM_TYPE DIM1, DIM_TYPE DIM2, DIM_TYPE DIM3, DIM_TYPE DIM4, DATA_TYPE* IN_FARRAY4)"
                                  ]
                                },
                                "type": "Verbatim"
                              }
                            ]
                          },
                          "type": "Paragraph"
                        }
                      ]
                    }
                  ]
                },
                "type": "BulletList"
              }
            ]
          },
          "type": "BlockQuote"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "The first signature listed, "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "( DATA_TYPE IN_ARRAY[ANY] )"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " is for one-dimensional arrays with hard-coded dimensions.  Likewise, "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "( DATA_TYPE IN_ARRAY2[ANY][ANY] )"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " is for two-dimensional arrays with hard-coded dimensions, and similarly for three-dimensional."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "level": 2,
      "title": "Input Arrays"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "In-place arrays are defined as arrays that are modified in-place.  The input values may or may not be used, but the values at the time the function returns are significant.  The provided Python argument must therefore be a NumPy array of the required type.  The in-place signatures are"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "1D:"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "children": [
                    {
                      "children": [
                        {
                          "data": {
                            "children": [
                              {
                                "data": {
                                  "value": [
                                    "(\tDATA_TYPE INPLACE_ARRAY1[ANY] )"
                                  ]
                                },
                                "type": "Verbatim"
                              }
                            ]
                          },
                          "type": "Paragraph"
                        }
                      ]
                    },
                    {
                      "children": [
                        {
                          "data": {
                            "children": [
                              {
                                "data": {
                                  "value": [
                                    "(\tDATA_TYPE* INPLACE_ARRAY1, int DIM1 )"
                                  ]
                                },
                                "type": "Verbatim"
                              }
                            ]
                          },
                          "type": "Paragraph"
                        }
                      ]
                    },
                    {
                      "children": [
                        {
                          "data": {
                            "children": [
                              {
                                "data": {
                                  "value": [
                                    "(\tint DIM1, DATA_TYPE* INPLACE_ARRAY1 )"
                                  ]
                                },
                                "type": "Verbatim"
                              }
                            ]
                          },
                          "type": "Paragraph"
                        }
                      ]
                    }
                  ]
                },
                "type": "BulletList"
              }
            ]
          },
          "type": "BlockQuote"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "2D:"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "children": [
                    {
                      "children": [
                        {
                          "data": {
                            "children": [
                              {
                                "data": {
                                  "value": [
                                    "(\tDATA_TYPE INPLACE_ARRAY2[ANY][ANY] )"
                                  ]
                                },
                                "type": "Verbatim"
                              }
                            ]
                          },
                          "type": "Paragraph"
                        }
                      ]
                    },
                    {
                      "children": [
                        {
                          "data": {
                            "children": [
                              {
                                "data": {
                                  "value": [
                                    "(\tDATA_TYPE* INPLACE_ARRAY2, int DIM1, int DIM2 )"
                                  ]
                                },
                                "type": "Verbatim"
                              }
                            ]
                          },
                          "type": "Paragraph"
                        }
                      ]
                    },
                    {
                      "children": [
                        {
                          "data": {
                            "children": [
                              {
                                "data": {
                                  "value": [
                                    "(\tint DIM1, int DIM2, DATA_TYPE* INPLACE_ARRAY2 )"
                                  ]
                                },
                                "type": "Verbatim"
                              }
                            ]
                          },
                          "type": "Paragraph"
                        }
                      ]
                    },
                    {
                      "children": [
                        {
                          "data": {
                            "children": [
                              {
                                "data": {
                                  "value": [
                                    "(\tDATA_TYPE* INPLACE_FARRAY2, int DIM1, int DIM2 )"
                                  ]
                                },
                                "type": "Verbatim"
                              }
                            ]
                          },
                          "type": "Paragraph"
                        }
                      ]
                    },
                    {
                      "children": [
                        {
                          "data": {
                            "children": [
                              {
                                "data": {
                                  "value": [
                                    "(\tint DIM1, int DIM2, DATA_TYPE* INPLACE_FARRAY2 )"
                                  ]
                                },
                                "type": "Verbatim"
                              }
                            ]
                          },
                          "type": "Paragraph"
                        }
                      ]
                    }
                  ]
                },
                "type": "BulletList"
              }
            ]
          },
          "type": "BlockQuote"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "3D:"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "children": [
                    {
                      "children": [
                        {
                          "data": {
                            "children": [
                              {
                                "data": {
                                  "value": [
                                    "(\tDATA_TYPE INPLACE_ARRAY3[ANY][ANY][ANY] )"
                                  ]
                                },
                                "type": "Verbatim"
                              }
                            ]
                          },
                          "type": "Paragraph"
                        }
                      ]
                    },
                    {
                      "children": [
                        {
                          "data": {
                            "children": [
                              {
                                "data": {
                                  "value": [
                                    "(\tDATA_TYPE* INPLACE_ARRAY3, int DIM1, int DIM2, int DIM3 )"
                                  ]
                                },
                                "type": "Verbatim"
                              }
                            ]
                          },
                          "type": "Paragraph"
                        }
                      ]
                    },
                    {
                      "children": [
                        {
                          "data": {
                            "children": [
                              {
                                "data": {
                                  "value": [
                                    "(\tint DIM1, int DIM2, int DIM3, DATA_TYPE* INPLACE_ARRAY3 )"
                                  ]
                                },
                                "type": "Verbatim"
                              }
                            ]
                          },
                          "type": "Paragraph"
                        }
                      ]
                    },
                    {
                      "children": [
                        {
                          "data": {
                            "children": [
                              {
                                "data": {
                                  "value": [
                                    "(\tDATA_TYPE* INPLACE_FARRAY3, int DIM1, int DIM2, int DIM3 )"
                                  ]
                                },
                                "type": "Verbatim"
                              }
                            ]
                          },
                          "type": "Paragraph"
                        }
                      ]
                    },
                    {
                      "children": [
                        {
                          "data": {
                            "children": [
                              {
                                "data": {
                                  "value": [
                                    "(\tint DIM1, int DIM2, int DIM3, DATA_TYPE* INPLACE_FARRAY3 )"
                                  ]
                                },
                                "type": "Verbatim"
                              }
                            ]
                          },
                          "type": "Paragraph"
                        }
                      ]
                    }
                  ]
                },
                "type": "BulletList"
              }
            ]
          },
          "type": "BlockQuote"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "4D:"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "children": [
                    {
                      "children": [
                        {
                          "data": {
                            "children": [
                              {
                                "data": {
                                  "value": [
                                    "(DATA_TYPE INPLACE_ARRAY4[ANY][ANY][ANY][ANY])"
                                  ]
                                },
                                "type": "Verbatim"
                              }
                            ]
                          },
                          "type": "Paragraph"
                        }
                      ]
                    },
                    {
                      "children": [
                        {
                          "data": {
                            "children": [
                              {
                                "data": {
                                  "value": [
                                    "(DATA_TYPE* INPLACE_ARRAY4, DIM_TYPE DIM1, DIM_TYPE DIM2, DIM_TYPE DIM3, DIM_TYPE DIM4)"
                                  ]
                                },
                                "type": "Verbatim"
                              }
                            ]
                          },
                          "type": "Paragraph"
                        }
                      ]
                    },
                    {
                      "children": [
                        {
                          "data": {
                            "children": [
                              {
                                "data": {
                                  "value": [
                                    "(DIM_TYPE DIM1, DIM_TYPE DIM2, DIM_TYPE DIM3, , DIM_TYPE DIM4, DATA_TYPE* INPLACE_ARRAY4)"
                                  ]
                                },
                                "type": "Verbatim"
                              }
                            ]
                          },
                          "type": "Paragraph"
                        }
                      ]
                    },
                    {
                      "children": [
                        {
                          "data": {
                            "children": [
                              {
                                "data": {
                                  "value": [
                                    "(DATA_TYPE* INPLACE_FARRAY4, DIM_TYPE DIM1, DIM_TYPE DIM2, DIM_TYPE DIM3, DIM_TYPE DIM4)"
                                  ]
                                },
                                "type": "Verbatim"
                              }
                            ]
                          },
                          "type": "Paragraph"
                        }
                      ]
                    },
                    {
                      "children": [
                        {
                          "data": {
                            "children": [
                              {
                                "data": {
                                  "value": [
                                    "(DIM_TYPE DIM1, DIM_TYPE DIM2, DIM_TYPE DIM3, DIM_TYPE DIM4, DATA_TYPE* INPLACE_FARRAY4)"
                                  ]
                                },
                                "type": "Verbatim"
                              }
                            ]
                          },
                          "type": "Paragraph"
                        }
                      ]
                    }
                  ]
                },
                "type": "BulletList"
              }
            ]
          },
          "type": "BlockQuote"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "These typemaps now check to make sure that the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "INPLACE_ARRAY"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " arguments use native byte ordering.  If not, an exception is raised."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "There is also a \"flat\" in-place array for situations in which you would like to modify or process each element, regardless of the number of dimensions. One example is a \"quantization\" function that quantizes each element of an array in-place, be it 1D, 2D or whatever. This form checks for continuity but allows either C or Fortran ordering."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "ND:"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "children": [
                    {
                      "children": [
                        {
                          "data": {
                            "children": [
                              {
                                "data": {
                                  "value": [
                                    "(DATA_TYPE* INPLACE_ARRAY_FLAT, DIM_TYPE DIM_FLAT)"
                                  ]
                                },
                                "type": "Verbatim"
                              }
                            ]
                          },
                          "type": "Paragraph"
                        }
                      ]
                    }
                  ]
                },
                "type": "BulletList"
              }
            ]
          },
          "type": "BlockQuote"
        }
      ],
      "level": 2,
      "title": "In-Place Arrays"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Argout arrays are arrays that appear in the input arguments in C, but are in fact output arrays.  This pattern occurs often when there is more than one output variable and the single return argument is therefore not sufficient.  In Python, the conventional way to return multiple arguments is to pack them into a sequence (tuple, list, etc.) and return the sequence.  This is what the argout typemaps do.  If a wrapped function that uses these argout typemaps has more than one return argument, they are packed into a tuple or list, depending on the version of Python.  The Python user does not pass these arrays in, they simply get returned.  For the case where a dimension is specified, the python user must provide that dimension as an argument.  The argout signatures are"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "1D:"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "children": [
                    {
                      "children": [
                        {
                          "data": {
                            "children": [
                              {
                                "data": {
                                  "value": [
                                    "(\tDATA_TYPE ARGOUT_ARRAY1[ANY] )"
                                  ]
                                },
                                "type": "Verbatim"
                              }
                            ]
                          },
                          "type": "Paragraph"
                        }
                      ]
                    },
                    {
                      "children": [
                        {
                          "data": {
                            "children": [
                              {
                                "data": {
                                  "value": [
                                    "(\tDATA_TYPE* ARGOUT_ARRAY1, int DIM1 )"
                                  ]
                                },
                                "type": "Verbatim"
                              }
                            ]
                          },
                          "type": "Paragraph"
                        }
                      ]
                    },
                    {
                      "children": [
                        {
                          "data": {
                            "children": [
                              {
                                "data": {
                                  "value": [
                                    "(\tint DIM1, DATA_TYPE* ARGOUT_ARRAY1 )"
                                  ]
                                },
                                "type": "Verbatim"
                              }
                            ]
                          },
                          "type": "Paragraph"
                        }
                      ]
                    }
                  ]
                },
                "type": "BulletList"
              }
            ]
          },
          "type": "BlockQuote"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "2D:"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "children": [
                    {
                      "children": [
                        {
                          "data": {
                            "children": [
                              {
                                "data": {
                                  "value": [
                                    "(\tDATA_TYPE ARGOUT_ARRAY2[ANY][ANY] )"
                                  ]
                                },
                                "type": "Verbatim"
                              }
                            ]
                          },
                          "type": "Paragraph"
                        }
                      ]
                    }
                  ]
                },
                "type": "BulletList"
              }
            ]
          },
          "type": "BlockQuote"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "3D:"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "children": [
                    {
                      "children": [
                        {
                          "data": {
                            "children": [
                              {
                                "data": {
                                  "value": [
                                    "(\tDATA_TYPE ARGOUT_ARRAY3[ANY][ANY][ANY] )"
                                  ]
                                },
                                "type": "Verbatim"
                              }
                            ]
                          },
                          "type": "Paragraph"
                        }
                      ]
                    }
                  ]
                },
                "type": "BulletList"
              }
            ]
          },
          "type": "BlockQuote"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "4D:"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "children": [
                    {
                      "children": [
                        {
                          "data": {
                            "children": [
                              {
                                "data": {
                                  "value": [
                                    "(\tDATA_TYPE ARGOUT_ARRAY4[ANY][ANY][ANY][ANY] )"
                                  ]
                                },
                                "type": "Verbatim"
                              }
                            ]
                          },
                          "type": "Paragraph"
                        }
                      ]
                    }
                  ]
                },
                "type": "BulletList"
              }
            ]
          },
          "type": "BlockQuote"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "These are typically used in situations where in C/C++, you would allocate a(n) array(s) on the heap, and call the function to fill the array(s) values.  In Python, the arrays are allocated for you and returned as new array objects."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Note that we support "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "DATA_TYPE*"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " argout typemaps in 1D, but not 2D or 3D.  This is because of a quirk with the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "SWIG"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " typemap syntax and cannot be avoided.  Note that for these types of 1D typemaps, the Python function will take a single argument representing "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "DIM1"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": "."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "level": 2,
      "title": "Argout Arrays"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Argoutview arrays are for when your C code provides you with a view of its internal data and does not require any memory to be allocated by the user.  This can be dangerous.  There is almost no way to guarantee that the internal data from the C code will remain in existence for the entire lifetime of the NumPy array that encapsulates it.  If the user destroys the object that provides the view of the data before destroying the NumPy array, then using that array may result in bad memory references or segmentation faults.  Nevertheless, there are situations, working with large data sets, where you simply have no other choice."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "The C code to be wrapped for argoutview arrays are characterized by pointers: pointers to the dimensions and double pointers to the data, so that these values can be passed back to the user.  The argoutview typemap signatures are therefore"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "1D:"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "children": [
                    {
                      "children": [
                        {
                          "data": {
                            "children": [
                              {
                                "data": {
                                  "value": [
                                    "( DATA_TYPE** ARGOUTVIEW_ARRAY1, DIM_TYPE* DIM1 )"
                                  ]
                                },
                                "type": "Verbatim"
                              }
                            ]
                          },
                          "type": "Paragraph"
                        }
                      ]
                    },
                    {
                      "children": [
                        {
                          "data": {
                            "children": [
                              {
                                "data": {
                                  "value": [
                                    "( DIM_TYPE* DIM1, DATA_TYPE** ARGOUTVIEW_ARRAY1 )"
                                  ]
                                },
                                "type": "Verbatim"
                              }
                            ]
                          },
                          "type": "Paragraph"
                        }
                      ]
                    }
                  ]
                },
                "type": "BulletList"
              }
            ]
          },
          "type": "BlockQuote"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "2D:"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "children": [
                    {
                      "children": [
                        {
                          "data": {
                            "children": [
                              {
                                "data": {
                                  "value": [
                                    "( DATA_TYPE** ARGOUTVIEW_ARRAY2, DIM_TYPE* DIM1, DIM_TYPE* DIM2 )"
                                  ]
                                },
                                "type": "Verbatim"
                              }
                            ]
                          },
                          "type": "Paragraph"
                        }
                      ]
                    },
                    {
                      "children": [
                        {
                          "data": {
                            "children": [
                              {
                                "data": {
                                  "value": [
                                    "( DIM_TYPE* DIM1, DIM_TYPE* DIM2, DATA_TYPE** ARGOUTVIEW_ARRAY2 )"
                                  ]
                                },
                                "type": "Verbatim"
                              }
                            ]
                          },
                          "type": "Paragraph"
                        }
                      ]
                    },
                    {
                      "children": [
                        {
                          "data": {
                            "children": [
                              {
                                "data": {
                                  "value": [
                                    "( DATA_TYPE** ARGOUTVIEW_FARRAY2, DIM_TYPE* DIM1, DIM_TYPE* DIM2 )"
                                  ]
                                },
                                "type": "Verbatim"
                              }
                            ]
                          },
                          "type": "Paragraph"
                        }
                      ]
                    },
                    {
                      "children": [
                        {
                          "data": {
                            "children": [
                              {
                                "data": {
                                  "value": [
                                    "( DIM_TYPE* DIM1, DIM_TYPE* DIM2, DATA_TYPE** ARGOUTVIEW_FARRAY2 )"
                                  ]
                                },
                                "type": "Verbatim"
                              }
                            ]
                          },
                          "type": "Paragraph"
                        }
                      ]
                    }
                  ]
                },
                "type": "BulletList"
              }
            ]
          },
          "type": "BlockQuote"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "3D:"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "children": [
                    {
                      "children": [
                        {
                          "data": {
                            "children": [
                              {
                                "data": {
                                  "value": [
                                    "( DATA_TYPE** ARGOUTVIEW_ARRAY3, DIM_TYPE* DIM1, DIM_TYPE* DIM2, DIM_TYPE* DIM3)"
                                  ]
                                },
                                "type": "Verbatim"
                              }
                            ]
                          },
                          "type": "Paragraph"
                        }
                      ]
                    },
                    {
                      "children": [
                        {
                          "data": {
                            "children": [
                              {
                                "data": {
                                  "value": [
                                    "( DIM_TYPE* DIM1, DIM_TYPE* DIM2, DIM_TYPE* DIM3, DATA_TYPE** ARGOUTVIEW_ARRAY3)"
                                  ]
                                },
                                "type": "Verbatim"
                              }
                            ]
                          },
                          "type": "Paragraph"
                        }
                      ]
                    },
                    {
                      "children": [
                        {
                          "data": {
                            "children": [
                              {
                                "data": {
                                  "value": [
                                    "( DATA_TYPE** ARGOUTVIEW_FARRAY3, DIM_TYPE* DIM1, DIM_TYPE* DIM2, DIM_TYPE* DIM3)"
                                  ]
                                },
                                "type": "Verbatim"
                              }
                            ]
                          },
                          "type": "Paragraph"
                        }
                      ]
                    },
                    {
                      "children": [
                        {
                          "data": {
                            "children": [
                              {
                                "data": {
                                  "value": [
                                    "( DIM_TYPE* DIM1, DIM_TYPE* DIM2, DIM_TYPE* DIM3, DATA_TYPE** ARGOUTVIEW_FARRAY3)"
                                  ]
                                },
                                "type": "Verbatim"
                              }
                            ]
                          },
                          "type": "Paragraph"
                        }
                      ]
                    }
                  ]
                },
                "type": "BulletList"
              }
            ]
          },
          "type": "BlockQuote"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "4D:"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "children": [
                    {
                      "children": [
                        {
                          "data": {
                            "children": [
                              {
                                "data": {
                                  "value": [
                                    "(DATA_TYPE** ARGOUTVIEW_ARRAY4, DIM_TYPE* DIM1, DIM_TYPE* DIM2, DIM_TYPE* DIM3, DIM_TYPE* DIM4)"
                                  ]
                                },
                                "type": "Verbatim"
                              }
                            ]
                          },
                          "type": "Paragraph"
                        }
                      ]
                    },
                    {
                      "children": [
                        {
                          "data": {
                            "children": [
                              {
                                "data": {
                                  "value": [
                                    "(DIM_TYPE* DIM1, DIM_TYPE* DIM2, DIM_TYPE* DIM3, DIM_TYPE* DIM4, DATA_TYPE** ARGOUTVIEW_ARRAY4)"
                                  ]
                                },
                                "type": "Verbatim"
                              }
                            ]
                          },
                          "type": "Paragraph"
                        }
                      ]
                    },
                    {
                      "children": [
                        {
                          "data": {
                            "children": [
                              {
                                "data": {
                                  "value": [
                                    "(DATA_TYPE** ARGOUTVIEW_FARRAY4, DIM_TYPE* DIM1, DIM_TYPE* DIM2, DIM_TYPE* DIM3, DIM_TYPE* DIM4)"
                                  ]
                                },
                                "type": "Verbatim"
                              }
                            ]
                          },
                          "type": "Paragraph"
                        }
                      ]
                    },
                    {
                      "children": [
                        {
                          "data": {
                            "children": [
                              {
                                "data": {
                                  "value": [
                                    "(DIM_TYPE* DIM1, DIM_TYPE* DIM2, DIM_TYPE* DIM3, DIM_TYPE* DIM4, DATA_TYPE** ARGOUTVIEW_FARRAY4)"
                                  ]
                                },
                                "type": "Verbatim"
                              }
                            ]
                          },
                          "type": "Paragraph"
                        }
                      ]
                    }
                  ]
                },
                "type": "BulletList"
              }
            ]
          },
          "type": "BlockQuote"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Note that arrays with hard-coded dimensions are not supported.  These cannot follow the double pointer signatures of these typemaps."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "level": 2,
      "title": "Argout View Arrays"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "A recent addition to "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "numpy.i"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " are typemaps that permit argout arrays with views into memory that is managed.  See the discussion "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "here\n<http://blog.enthought.com/python/numpy-arrays-with-pre-allocated-memory>"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": "."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "1D:"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "children": [
                    {
                      "children": [
                        {
                          "data": {
                            "children": [
                              {
                                "data": {
                                  "value": [
                                    "(DATA_TYPE** ARGOUTVIEWM_ARRAY1, DIM_TYPE* DIM1)"
                                  ]
                                },
                                "type": "Verbatim"
                              }
                            ]
                          },
                          "type": "Paragraph"
                        }
                      ]
                    },
                    {
                      "children": [
                        {
                          "data": {
                            "children": [
                              {
                                "data": {
                                  "value": [
                                    "(DIM_TYPE* DIM1, DATA_TYPE** ARGOUTVIEWM_ARRAY1)"
                                  ]
                                },
                                "type": "Verbatim"
                              }
                            ]
                          },
                          "type": "Paragraph"
                        }
                      ]
                    }
                  ]
                },
                "type": "BulletList"
              }
            ]
          },
          "type": "BlockQuote"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "2D:"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "children": [
                    {
                      "children": [
                        {
                          "data": {
                            "children": [
                              {
                                "data": {
                                  "value": [
                                    "(DATA_TYPE** ARGOUTVIEWM_ARRAY2, DIM_TYPE* DIM1, DIM_TYPE* DIM2)"
                                  ]
                                },
                                "type": "Verbatim"
                              }
                            ]
                          },
                          "type": "Paragraph"
                        }
                      ]
                    },
                    {
                      "children": [
                        {
                          "data": {
                            "children": [
                              {
                                "data": {
                                  "value": [
                                    "(DIM_TYPE* DIM1, DIM_TYPE* DIM2, DATA_TYPE** ARGOUTVIEWM_ARRAY2)"
                                  ]
                                },
                                "type": "Verbatim"
                              }
                            ]
                          },
                          "type": "Paragraph"
                        }
                      ]
                    },
                    {
                      "children": [
                        {
                          "data": {
                            "children": [
                              {
                                "data": {
                                  "value": [
                                    "(DATA_TYPE** ARGOUTVIEWM_FARRAY2, DIM_TYPE* DIM1, DIM_TYPE* DIM2)"
                                  ]
                                },
                                "type": "Verbatim"
                              }
                            ]
                          },
                          "type": "Paragraph"
                        }
                      ]
                    },
                    {
                      "children": [
                        {
                          "data": {
                            "children": [
                              {
                                "data": {
                                  "value": [
                                    "(DIM_TYPE* DIM1, DIM_TYPE* DIM2, DATA_TYPE** ARGOUTVIEWM_FARRAY2)"
                                  ]
                                },
                                "type": "Verbatim"
                              }
                            ]
                          },
                          "type": "Paragraph"
                        }
                      ]
                    }
                  ]
                },
                "type": "BulletList"
              }
            ]
          },
          "type": "BlockQuote"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "3D:"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "children": [
                    {
                      "children": [
                        {
                          "data": {
                            "children": [
                              {
                                "data": {
                                  "value": [
                                    "(DATA_TYPE** ARGOUTVIEWM_ARRAY3, DIM_TYPE* DIM1, DIM_TYPE* DIM2, DIM_TYPE* DIM3)"
                                  ]
                                },
                                "type": "Verbatim"
                              }
                            ]
                          },
                          "type": "Paragraph"
                        }
                      ]
                    },
                    {
                      "children": [
                        {
                          "data": {
                            "children": [
                              {
                                "data": {
                                  "value": [
                                    "(DIM_TYPE* DIM1, DIM_TYPE* DIM2, DIM_TYPE* DIM3, DATA_TYPE** ARGOUTVIEWM_ARRAY3)"
                                  ]
                                },
                                "type": "Verbatim"
                              }
                            ]
                          },
                          "type": "Paragraph"
                        }
                      ]
                    },
                    {
                      "children": [
                        {
                          "data": {
                            "children": [
                              {
                                "data": {
                                  "value": [
                                    "(DATA_TYPE** ARGOUTVIEWM_FARRAY3, DIM_TYPE* DIM1, DIM_TYPE* DIM2, DIM_TYPE* DIM3)"
                                  ]
                                },
                                "type": "Verbatim"
                              }
                            ]
                          },
                          "type": "Paragraph"
                        }
                      ]
                    },
                    {
                      "children": [
                        {
                          "data": {
                            "children": [
                              {
                                "data": {
                                  "value": [
                                    "(DIM_TYPE* DIM1, DIM_TYPE* DIM2, DIM_TYPE* DIM3, DATA_TYPE** ARGOUTVIEWM_FARRAY3)"
                                  ]
                                },
                                "type": "Verbatim"
                              }
                            ]
                          },
                          "type": "Paragraph"
                        }
                      ]
                    }
                  ]
                },
                "type": "BulletList"
              }
            ]
          },
          "type": "BlockQuote"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "4D:"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "children": [
                    {
                      "children": [
                        {
                          "data": {
                            "children": [
                              {
                                "data": {
                                  "value": [
                                    "(DATA_TYPE** ARGOUTVIEWM_ARRAY4, DIM_TYPE* DIM1, DIM_TYPE* DIM2, DIM_TYPE* DIM3, DIM_TYPE* DIM4)"
                                  ]
                                },
                                "type": "Verbatim"
                              }
                            ]
                          },
                          "type": "Paragraph"
                        }
                      ]
                    },
                    {
                      "children": [
                        {
                          "data": {
                            "children": [
                              {
                                "data": {
                                  "value": [
                                    "(DIM_TYPE* DIM1, DIM_TYPE* DIM2, DIM_TYPE* DIM3, DIM_TYPE* DIM4, DATA_TYPE** ARGOUTVIEWM_ARRAY4)"
                                  ]
                                },
                                "type": "Verbatim"
                              }
                            ]
                          },
                          "type": "Paragraph"
                        }
                      ]
                    },
                    {
                      "children": [
                        {
                          "data": {
                            "children": [
                              {
                                "data": {
                                  "value": [
                                    "(DATA_TYPE** ARGOUTVIEWM_FARRAY4, DIM_TYPE* DIM1, DIM_TYPE* DIM2, DIM_TYPE* DIM3, DIM_TYPE* DIM4)"
                                  ]
                                },
                                "type": "Verbatim"
                              }
                            ]
                          },
                          "type": "Paragraph"
                        }
                      ]
                    },
                    {
                      "children": [
                        {
                          "data": {
                            "children": [
                              {
                                "data": {
                                  "value": [
                                    "(DIM_TYPE* DIM1, DIM_TYPE* DIM2, DIM_TYPE* DIM3, DIM_TYPE* DIM4, DATA_TYPE** ARGOUTVIEWM_FARRAY4)"
                                  ]
                                },
                                "type": "Verbatim"
                              }
                            ]
                          },
                          "type": "Paragraph"
                        }
                      ]
                    }
                  ]
                },
                "type": "BulletList"
              }
            ]
          },
          "type": "BlockQuote"
        }
      ],
      "level": 2,
      "title": "Memory Managed Argout View Arrays"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "The "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "numpy.i"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " interface file does not support typemaps for output arrays, for several reasons.  First, C/C++ return arguments are limited to a single value.  This prevents obtaining dimension information in a general way.  Second, arrays with hard-coded lengths are not permitted as return arguments.  In other words:      "
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": "double[3] newVector(double x, double y, double z);"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "is not legal C/C++ syntax.  Therefore, we cannot provide typemaps of the form:      "
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": "%typemap(out) (TYPE[ANY]);"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "If you run into a situation where a function or method is returning a pointer to an array, your best bet is to write your own version of the function to be wrapped, either with "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "%extend"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " for the case of class methods or "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "%ignore"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " and "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "%rename"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " for the case of functions."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "level": 2,
      "title": "Output Arrays"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Note that C++ type "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "bool"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " is not supported in the list in the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "Available Typemaps"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " section.  NumPy bools are a single byte, while the C++ "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "bool"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " is four bytes (at least on my system).  Therefore:      "
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": "%numpy_typemaps(bool, NPY_BOOL, int)"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "will result in typemaps that will produce code that reference improper data lengths.  You can implement the following macro expansion:      "
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": "%numpy_typemaps(bool, NPY_UINT, int)"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "to fix the data length problem, and "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "Input Arrays"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " will work fine, but "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "In-Place Arrays"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " might fail type-checking."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "level": 2,
      "title": "Other Common Types: bool"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Typemap conversions for complex floating-point types is also not supported automatically.  This is because Python and NumPy are written in C, which does not have native complex types.  Both Python and NumPy implement their own (essentially equivalent) "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "struct"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " definitions for complex variables:      "
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": "/* Python */\ntypedef struct {double real; double imag;} Py_complex;\n\n/* NumPy */\ntypedef struct {float  real, imag;} npy_cfloat;\ntypedef struct {double real, imag;} npy_cdouble;"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "We could have implemented:      "
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": "%numpy_typemaps(Py_complex , NPY_CDOUBLE, int)\n%numpy_typemaps(npy_cfloat , NPY_CFLOAT , int)\n%numpy_typemaps(npy_cdouble, NPY_CDOUBLE, int)"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "which would have provided automatic type conversions for arrays of type "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "Py_complex"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "npy_cfloat"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " and "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "npy_cdouble"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ".  However, it seemed unlikely that there would be any independent (non-Python, non-NumPy) application code that people would be using "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "SWIG"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " to generate a Python interface to, that also used these definitions for complex types.  More likely, these application codes will define their own complex types, or in the case of C++, use "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "std::complex"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ". Assuming these data structures are compatible with Python and NumPy complex types, "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "%numpy_typemap"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " expansions as above (with the user's complex type substituted for the first argument) should work."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "level": 2,
      "title": "Other Common Types: complex"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "SWIG"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " has sophisticated type checking for numerical types.  For example, if your C/C++ routine expects an integer as input, the code generated by "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "SWIG"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " will check for both Python integers and Python long integers, and raise an overflow error if the provided Python integer is too big to cast down to a C integer.  With the introduction of NumPy scalar arrays into your Python code, you might conceivably extract an integer from a NumPy array and attempt to pass this to a "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "SWIG"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": "-wrapped C/C++ function that expects an "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "int"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", but the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "SWIG"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " type checking will not recognize the NumPy array scalar as an integer.  (Often, this does in fact work -- it depends on whether NumPy recognizes the integer type you are using as inheriting from the Python integer type on the platform you are using.  Sometimes, this means that code that works on a 32-bit machine will fail on a 64-bit machine.)"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "If you get a Python error that looks like the following:      "
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": "TypeError: in method 'MyClass_MyMethod', argument 2 of type 'int'"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "and the argument you are passing is an integer extracted from a NumPy array, then you have stumbled upon this problem.  The solution is to modify the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "SWIG"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " type conversion system to accept NumPy array scalars in addition to the standard integer types. Fortunately, this capability has been provided for you.  Simply copy the file:      "
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": "pyfragments.swg"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "to the working build directory for you project, and this problem will be fixed.  It is suggested that you do this anyway, as it only increases the capabilities of your Python interface."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "level": 1,
      "title": "NumPy Array Scalars and SWIG"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "The "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "SWIG"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " type checking and conversion system is a complicated combination of C macros, "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "SWIG"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " macros, "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "SWIG"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " typemaps and "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "SWIG"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " fragments.  Fragments are a way to conditionally insert code into your wrapper file if it is needed, and not insert it if not needed.  If multiple typemaps require the same fragment, the fragment only gets inserted into your wrapper code once."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "There is a fragment for converting a Python integer to a C "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "long"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ".  There is a different fragment that converts a Python integer to a C "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "int"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", that calls the routine defined in the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "long"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " fragment.  We can make the changes we want here by changing the definition for the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "long"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " fragment.  "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "SWIG"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " determines the active definition for a fragment using a \"first come, first served\" system.  That is, we need to define the fragment for "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "long"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " conversions prior to "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "SWIG"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " doing it internally.  "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "SWIG"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " allows us to do this by putting our fragment definitions in the file "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "pyfragments.swg"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ".  If we were to put the new fragment definitions in "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "numpy.i"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", they would be ignored."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "level": 2,
      "title": "Why is There a Second File?"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "The "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "numpy.i"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " file contains several macros and routines that it uses internally to build its typemaps.  However, these functions may be useful elsewhere in your interface file.  These macros and routines are implemented as fragments, which are described briefly in the previous section.  If you try to use one or more of the following macros or functions, but your compiler complains that it does not recognize the symbol, then you need to force these fragments to appear in your code using:      "
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": "%fragment(\"NumPy_Fragments\");"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "in your "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "SWIG"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " interface file."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "level": 1,
      "title": "Helper Functions"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "children": [
                    {
                      "dd": [
                        {
                          "data": {
                            "children": [
                              {
                                "data": {
                                  "value": "Evaluates as true if "
                                },
                                "type": "Words"
                              },
                              {
                                "data": {
                                  "value": [
                                    "a"
                                  ]
                                },
                                "type": "Verbatim"
                              },
                              {
                                "data": {
                                  "value": " is non-"
                                },
                                "type": "Words"
                              },
                              {
                                "data": {
                                  "value": [
                                    "NULL"
                                  ]
                                },
                                "type": "Verbatim"
                              },
                              {
                                "data": {
                                  "value": " and can be cast to a     "
                                },
                                "type": "Words"
                              },
                              {
                                "data": {
                                  "value": [
                                    "PyArrayObject*"
                                  ]
                                },
                                "type": "Verbatim"
                              },
                              {
                                "data": {
                                  "value": "."
                                },
                                "type": "Words"
                              }
                            ]
                          },
                          "type": "Paragraph"
                        }
                      ],
                      "dt": {
                        "children": [
                          {
                            "data": {
                              "content": {
                                "value": "is_array(a)"
                              }
                            },
                            "type": "Strong"
                          }
                        ]
                      }
                    },
                    {
                      "dd": [
                        {
                          "data": {
                            "children": [
                              {
                                "data": {
                                  "value": "Evaluates to the integer data type code of "
                                },
                                "type": "Words"
                              },
                              {
                                "data": {
                                  "value": [
                                    "a"
                                  ]
                                },
                                "type": "Verbatim"
                              },
                              {
                                "data": {
                                  "value": ", assuming "
                                },
                                "type": "Words"
                              },
                              {
                                "data": {
                                  "value": [
                                    "a"
                                  ]
                                },
                                "type": "Verbatim"
                              },
                              {
                                "data": {
                                  "value": " can     be cast to a "
                                },
                                "type": "Words"
                              },
                              {
                                "data": {
                                  "value": [
                                    "PyArrayObject*"
                                  ]
                                },
                                "type": "Verbatim"
                              },
                              {
                                "data": {
                                  "value": "."
                                },
                                "type": "Words"
                              }
                            ]
                          },
                          "type": "Paragraph"
                        }
                      ],
                      "dt": {
                        "children": [
                          {
                            "data": {
                              "content": {
                                "value": "array_type(a)"
                              }
                            },
                            "type": "Strong"
                          }
                        ]
                      }
                    },
                    {
                      "dd": [
                        {
                          "data": {
                            "children": [
                              {
                                "data": {
                                  "value": "Evaluates to the integer number of dimensions of "
                                },
                                "type": "Words"
                              },
                              {
                                "data": {
                                  "value": [
                                    "a"
                                  ]
                                },
                                "type": "Verbatim"
                              },
                              {
                                "data": {
                                  "value": ", assuming     "
                                },
                                "type": "Words"
                              },
                              {
                                "data": {
                                  "value": [
                                    "a"
                                  ]
                                },
                                "type": "Verbatim"
                              },
                              {
                                "data": {
                                  "value": " can be cast to a "
                                },
                                "type": "Words"
                              },
                              {
                                "data": {
                                  "value": [
                                    "PyArrayObject*"
                                  ]
                                },
                                "type": "Verbatim"
                              },
                              {
                                "data": {
                                  "value": "."
                                },
                                "type": "Words"
                              }
                            ]
                          },
                          "type": "Paragraph"
                        }
                      ],
                      "dt": {
                        "children": [
                          {
                            "data": {
                              "content": {
                                "value": "array_numdims(a)"
                              }
                            },
                            "type": "Strong"
                          }
                        ]
                      }
                    },
                    {
                      "dd": [
                        {
                          "data": {
                            "children": [
                              {
                                "data": {
                                  "value": "Evaluates to an array of type "
                                },
                                "type": "Words"
                              },
                              {
                                "data": {
                                  "value": [
                                    "npy_intp"
                                  ]
                                },
                                "type": "Verbatim"
                              },
                              {
                                "data": {
                                  "value": " and length     "
                                },
                                "type": "Words"
                              },
                              {
                                "data": {
                                  "value": [
                                    "array_numdims(a)"
                                  ]
                                },
                                "type": "Verbatim"
                              },
                              {
                                "data": {
                                  "value": ", giving the lengths of all of the dimensions     of "
                                },
                                "type": "Words"
                              },
                              {
                                "data": {
                                  "value": [
                                    "a"
                                  ]
                                },
                                "type": "Verbatim"
                              },
                              {
                                "data": {
                                  "value": ", assuming "
                                },
                                "type": "Words"
                              },
                              {
                                "data": {
                                  "value": [
                                    "a"
                                  ]
                                },
                                "type": "Verbatim"
                              },
                              {
                                "data": {
                                  "value": " can be cast to a "
                                },
                                "type": "Words"
                              },
                              {
                                "data": {
                                  "value": [
                                    "PyArrayObject*"
                                  ]
                                },
                                "type": "Verbatim"
                              },
                              {
                                "data": {
                                  "value": "."
                                },
                                "type": "Words"
                              }
                            ]
                          },
                          "type": "Paragraph"
                        }
                      ],
                      "dt": {
                        "children": [
                          {
                            "data": {
                              "content": {
                                "value": "array_dimensions(a)"
                              }
                            },
                            "type": "Strong"
                          }
                        ]
                      }
                    },
                    {
                      "dd": [
                        {
                          "data": {
                            "children": [
                              {
                                "data": {
                                  "value": "Evaluates to the "
                                },
                                "type": "Words"
                              },
                              {
                                "data": {
                                  "value": [
                                    "i"
                                  ]
                                },
                                "type": "Verbatim"
                              },
                              {
                                "data": {
                                  "value": "-th dimension size of "
                                },
                                "type": "Words"
                              },
                              {
                                "data": {
                                  "value": [
                                    "a"
                                  ]
                                },
                                "type": "Verbatim"
                              },
                              {
                                "data": {
                                  "value": ", assuming "
                                },
                                "type": "Words"
                              },
                              {
                                "data": {
                                  "value": [
                                    "a"
                                  ]
                                },
                                "type": "Verbatim"
                              },
                              {
                                "data": {
                                  "value": "     can be cast to a "
                                },
                                "type": "Words"
                              },
                              {
                                "data": {
                                  "value": [
                                    "PyArrayObject*"
                                  ]
                                },
                                "type": "Verbatim"
                              },
                              {
                                "data": {
                                  "value": "."
                                },
                                "type": "Words"
                              }
                            ]
                          },
                          "type": "Paragraph"
                        }
                      ],
                      "dt": {
                        "children": [
                          {
                            "data": {
                              "content": {
                                "value": "array_size(a,i)"
                              }
                            },
                            "type": "Strong"
                          }
                        ]
                      }
                    },
                    {
                      "dd": [
                        {
                          "data": {
                            "children": [
                              {
                                "data": {
                                  "value": "Evaluates to an array of type "
                                },
                                "type": "Words"
                              },
                              {
                                "data": {
                                  "value": [
                                    "npy_intp"
                                  ]
                                },
                                "type": "Verbatim"
                              },
                              {
                                "data": {
                                  "value": " and length     "
                                },
                                "type": "Words"
                              },
                              {
                                "data": {
                                  "value": [
                                    "array_numdims(a)"
                                  ]
                                },
                                "type": "Verbatim"
                              },
                              {
                                "data": {
                                  "value": ", giving the stridess of all of the dimensions     of "
                                },
                                "type": "Words"
                              },
                              {
                                "data": {
                                  "value": [
                                    "a"
                                  ]
                                },
                                "type": "Verbatim"
                              },
                              {
                                "data": {
                                  "value": ", assuming "
                                },
                                "type": "Words"
                              },
                              {
                                "data": {
                                  "value": [
                                    "a"
                                  ]
                                },
                                "type": "Verbatim"
                              },
                              {
                                "data": {
                                  "value": " can be cast to a "
                                },
                                "type": "Words"
                              },
                              {
                                "data": {
                                  "value": [
                                    "PyArrayObject*"
                                  ]
                                },
                                "type": "Verbatim"
                              },
                              {
                                "data": {
                                  "value": ".  A     stride is the distance in bytes between an element and its     immediate neighbor along the same axis."
                                },
                                "type": "Words"
                              }
                            ]
                          },
                          "type": "Paragraph"
                        }
                      ],
                      "dt": {
                        "children": [
                          {
                            "data": {
                              "content": {
                                "value": "array_strides(a)"
                              }
                            },
                            "type": "Strong"
                          }
                        ]
                      }
                    },
                    {
                      "dd": [
                        {
                          "data": {
                            "children": [
                              {
                                "data": {
                                  "value": "Evaluates to the "
                                },
                                "type": "Words"
                              },
                              {
                                "data": {
                                  "value": [
                                    "i"
                                  ]
                                },
                                "type": "Verbatim"
                              },
                              {
                                "data": {
                                  "value": "-th stride of "
                                },
                                "type": "Words"
                              },
                              {
                                "data": {
                                  "value": [
                                    "a"
                                  ]
                                },
                                "type": "Verbatim"
                              },
                              {
                                "data": {
                                  "value": ", assuming "
                                },
                                "type": "Words"
                              },
                              {
                                "data": {
                                  "value": [
                                    "a"
                                  ]
                                },
                                "type": "Verbatim"
                              },
                              {
                                "data": {
                                  "value": " can be     cast to a "
                                },
                                "type": "Words"
                              },
                              {
                                "data": {
                                  "value": [
                                    "PyArrayObject*"
                                  ]
                                },
                                "type": "Verbatim"
                              },
                              {
                                "data": {
                                  "value": "."
                                },
                                "type": "Words"
                              }
                            ]
                          },
                          "type": "Paragraph"
                        }
                      ],
                      "dt": {
                        "children": [
                          {
                            "data": {
                              "content": {
                                "value": "array_stride(a,i)"
                              }
                            },
                            "type": "Strong"
                          }
                        ]
                      }
                    },
                    {
                      "dd": [
                        {
                          "data": {
                            "children": [
                              {
                                "data": {
                                  "value": "Evaluates to a pointer of type "
                                },
                                "type": "Words"
                              },
                              {
                                "data": {
                                  "value": [
                                    "void*"
                                  ]
                                },
                                "type": "Verbatim"
                              },
                              {
                                "data": {
                                  "value": " that points to the data     buffer of "
                                },
                                "type": "Words"
                              },
                              {
                                "data": {
                                  "value": [
                                    "a"
                                  ]
                                },
                                "type": "Verbatim"
                              },
                              {
                                "data": {
                                  "value": ", assuming "
                                },
                                "type": "Words"
                              },
                              {
                                "data": {
                                  "value": [
                                    "a"
                                  ]
                                },
                                "type": "Verbatim"
                              },
                              {
                                "data": {
                                  "value": " can be cast to a "
                                },
                                "type": "Words"
                              },
                              {
                                "data": {
                                  "value": [
                                    "PyArrayObject*"
                                  ]
                                },
                                "type": "Verbatim"
                              },
                              {
                                "data": {
                                  "value": "."
                                },
                                "type": "Words"
                              }
                            ]
                          },
                          "type": "Paragraph"
                        }
                      ],
                      "dt": {
                        "children": [
                          {
                            "data": {
                              "content": {
                                "value": "array_data(a)"
                              }
                            },
                            "type": "Strong"
                          }
                        ]
                      }
                    },
                    {
                      "dd": [
                        {
                          "data": {
                            "children": [
                              {
                                "data": {
                                  "value": "Returns a borrowed reference to the dtype property     ("
                                },
                                "type": "Words"
                              },
                              {
                                "data": {
                                  "value": [
                                    "PyArray_Descr*"
                                  ]
                                },
                                "type": "Verbatim"
                              },
                              {
                                "data": {
                                  "value": ") of "
                                },
                                "type": "Words"
                              },
                              {
                                "data": {
                                  "value": [
                                    "a"
                                  ]
                                },
                                "type": "Verbatim"
                              },
                              {
                                "data": {
                                  "value": ", assuming "
                                },
                                "type": "Words"
                              },
                              {
                                "data": {
                                  "value": [
                                    "a"
                                  ]
                                },
                                "type": "Verbatim"
                              },
                              {
                                "data": {
                                  "value": " can be cast to a     "
                                },
                                "type": "Words"
                              },
                              {
                                "data": {
                                  "value": [
                                    "PyArrayObject*"
                                  ]
                                },
                                "type": "Verbatim"
                              },
                              {
                                "data": {
                                  "value": "."
                                },
                                "type": "Words"
                              }
                            ]
                          },
                          "type": "Paragraph"
                        }
                      ],
                      "dt": {
                        "children": [
                          {
                            "data": {
                              "content": {
                                "value": "array_descr(a)"
                              }
                            },
                            "type": "Strong"
                          }
                        ]
                      }
                    },
                    {
                      "dd": [
                        {
                          "data": {
                            "children": [
                              {
                                "data": {
                                  "value": "Returns an integer representing the flags of "
                                },
                                "type": "Words"
                              },
                              {
                                "data": {
                                  "value": [
                                    "a"
                                  ]
                                },
                                "type": "Verbatim"
                              },
                              {
                                "data": {
                                  "value": ", assuming "
                                },
                                "type": "Words"
                              },
                              {
                                "data": {
                                  "value": [
                                    "a"
                                  ]
                                },
                                "type": "Verbatim"
                              },
                              {
                                "data": {
                                  "value": "     can be cast to a "
                                },
                                "type": "Words"
                              },
                              {
                                "data": {
                                  "value": [
                                    "PyArrayObject*"
                                  ]
                                },
                                "type": "Verbatim"
                              },
                              {
                                "data": {
                                  "value": "."
                                },
                                "type": "Words"
                              }
                            ]
                          },
                          "type": "Paragraph"
                        }
                      ],
                      "dt": {
                        "children": [
                          {
                            "data": {
                              "content": {
                                "value": "array_flags(a)"
                              }
                            },
                            "type": "Strong"
                          }
                        ]
                      }
                    },
                    {
                      "dd": [
                        {
                          "data": {
                            "children": [
                              {
                                "data": {
                                  "value": "Sets the flag represented by "
                                },
                                "type": "Words"
                              },
                              {
                                "data": {
                                  "value": [
                                    "f"
                                  ]
                                },
                                "type": "Verbatim"
                              },
                              {
                                "data": {
                                  "value": " of "
                                },
                                "type": "Words"
                              },
                              {
                                "data": {
                                  "value": [
                                    "a"
                                  ]
                                },
                                "type": "Verbatim"
                              },
                              {
                                "data": {
                                  "value": ", assuming "
                                },
                                "type": "Words"
                              },
                              {
                                "data": {
                                  "value": [
                                    "a"
                                  ]
                                },
                                "type": "Verbatim"
                              },
                              {
                                "data": {
                                  "value": " can be     cast to a "
                                },
                                "type": "Words"
                              },
                              {
                                "data": {
                                  "value": [
                                    "PyArrayObject*"
                                  ]
                                },
                                "type": "Verbatim"
                              },
                              {
                                "data": {
                                  "value": "."
                                },
                                "type": "Words"
                              }
                            ]
                          },
                          "type": "Paragraph"
                        }
                      ],
                      "dt": {
                        "children": [
                          {
                            "data": {
                              "content": {
                                "value": "array_enableflags(a,f)"
                              }
                            },
                            "type": "Strong"
                          }
                        ]
                      }
                    },
                    {
                      "dd": [
                        {
                          "data": {
                            "children": [
                              {
                                "data": {
                                  "value": "Evaluates as true if "
                                },
                                "type": "Words"
                              },
                              {
                                "data": {
                                  "value": [
                                    "a"
                                  ]
                                },
                                "type": "Verbatim"
                              },
                              {
                                "data": {
                                  "value": " is a contiguous array.  Equivalent to     "
                                },
                                "type": "Words"
                              },
                              {
                                "data": {
                                  "value": [
                                    "(PyArray_ISCONTIGUOUS(a))"
                                  ]
                                },
                                "type": "Verbatim"
                              },
                              {
                                "data": {
                                  "value": "."
                                },
                                "type": "Words"
                              }
                            ]
                          },
                          "type": "Paragraph"
                        }
                      ],
                      "dt": {
                        "children": [
                          {
                            "data": {
                              "content": {
                                "value": "array_is_contiguous(a)"
                              }
                            },
                            "type": "Strong"
                          }
                        ]
                      }
                    },
                    {
                      "dd": [
                        {
                          "data": {
                            "children": [
                              {
                                "data": {
                                  "value": "Evaluates as true if the data buffer of "
                                },
                                "type": "Words"
                              },
                              {
                                "data": {
                                  "value": [
                                    "a"
                                  ]
                                },
                                "type": "Verbatim"
                              },
                              {
                                "data": {
                                  "value": " uses native byte     order.  Equivalent to "
                                },
                                "type": "Words"
                              },
                              {
                                "data": {
                                  "value": [
                                    "(PyArray_ISNOTSWAPPED(a))"
                                  ]
                                },
                                "type": "Verbatim"
                              },
                              {
                                "data": {
                                  "value": "."
                                },
                                "type": "Words"
                              }
                            ]
                          },
                          "type": "Paragraph"
                        }
                      ],
                      "dt": {
                        "children": [
                          {
                            "data": {
                              "content": {
                                "value": "array_is_native(a)"
                              }
                            },
                            "type": "Strong"
                          }
                        ]
                      }
                    },
                    {
                      "dd": [
                        {
                          "data": {
                            "children": [
                              {
                                "data": {
                                  "value": "Evaluates as true if "
                                },
                                "type": "Words"
                              },
                              {
                                "data": {
                                  "value": [
                                    "a"
                                  ]
                                },
                                "type": "Verbatim"
                              },
                              {
                                "data": {
                                  "value": " is FORTRAN ordered."
                                },
                                "type": "Words"
                              }
                            ]
                          },
                          "type": "Paragraph"
                        }
                      ],
                      "dt": {
                        "children": [
                          {
                            "data": {
                              "content": {
                                "value": "array_is_fortran(a)"
                              }
                            },
                            "type": "Strong"
                          }
                        ]
                      }
                    }
                  ]
                },
                "type": "DefList"
              }
            ]
          },
          "type": "BlockQuote"
        }
      ],
      "level": 2,
      "title": "Macros"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "children": [
                    {
                      "data": {
                        "content": {
                          "value": "pytype_string()"
                        }
                      },
                      "type": "Strong"
                    }
                  ]
                },
                "type": "Paragraph"
              },
              {
                "data": {
                  "children": [
                    {
                      "data": {
                        "children": [
                          {
                            "data": {
                              "value": "Return type: "
                            },
                            "type": "Words"
                          },
                          {
                            "data": {
                              "value": [
                                "const char*"
                              ]
                            },
                            "type": "Verbatim"
                          }
                        ]
                      },
                      "type": "Paragraph"
                    },
                    {
                      "data": {
                        "children": [
                          {
                            "data": {
                              "value": "Arguments:"
                            },
                            "type": "Words"
                          }
                        ]
                      },
                      "type": "Paragraph"
                    },
                    {
                      "data": {
                        "children": [
                          {
                            "children": [
                              {
                                "data": {
                                  "children": [
                                    {
                                      "data": {
                                        "value": [
                                          "PyObject* py_obj"
                                        ]
                                      },
                                      "type": "Verbatim"
                                    },
                                    {
                                      "data": {
                                        "value": ", a general Python object."
                                      },
                                      "type": "Words"
                                    }
                                  ]
                                },
                                "type": "Paragraph"
                              }
                            ]
                          }
                        ]
                      },
                      "type": "BulletList"
                    },
                    {
                      "data": {
                        "children": [
                          {
                            "data": {
                              "value": "Return a string describing the type of "
                            },
                            "type": "Words"
                          },
                          {
                            "data": {
                              "value": [
                                "py_obj"
                              ]
                            },
                            "type": "Verbatim"
                          },
                          {
                            "data": {
                              "value": "."
                            },
                            "type": "Words"
                          }
                        ]
                      },
                      "type": "Paragraph"
                    }
                  ]
                },
                "type": "BlockQuote"
              },
              {
                "data": {
                  "children": [
                    {
                      "data": {
                        "content": {
                          "value": "typecode_string()"
                        }
                      },
                      "type": "Strong"
                    }
                  ]
                },
                "type": "Paragraph"
              },
              {
                "data": {
                  "children": [
                    {
                      "data": {
                        "children": [
                          {
                            "data": {
                              "value": "Return type: "
                            },
                            "type": "Words"
                          },
                          {
                            "data": {
                              "value": [
                                "const char*"
                              ]
                            },
                            "type": "Verbatim"
                          }
                        ]
                      },
                      "type": "Paragraph"
                    },
                    {
                      "data": {
                        "children": [
                          {
                            "data": {
                              "value": "Arguments:"
                            },
                            "type": "Words"
                          }
                        ]
                      },
                      "type": "Paragraph"
                    },
                    {
                      "data": {
                        "children": [
                          {
                            "children": [
                              {
                                "data": {
                                  "children": [
                                    {
                                      "data": {
                                        "value": [
                                          "int typecode"
                                        ]
                                      },
                                      "type": "Verbatim"
                                    },
                                    {
                                      "data": {
                                        "value": ", a NumPy integer typecode."
                                      },
                                      "type": "Words"
                                    }
                                  ]
                                },
                                "type": "Paragraph"
                              }
                            ]
                          }
                        ]
                      },
                      "type": "BulletList"
                    },
                    {
                      "data": {
                        "children": [
                          {
                            "data": {
                              "value": "Return a string describing the type corresponding to the NumPy     "
                            },
                            "type": "Words"
                          },
                          {
                            "data": {
                              "value": [
                                "typecode"
                              ]
                            },
                            "type": "Verbatim"
                          },
                          {
                            "data": {
                              "value": "."
                            },
                            "type": "Words"
                          }
                        ]
                      },
                      "type": "Paragraph"
                    }
                  ]
                },
                "type": "BlockQuote"
              },
              {
                "data": {
                  "children": [
                    {
                      "data": {
                        "content": {
                          "value": "type_match()"
                        }
                      },
                      "type": "Strong"
                    }
                  ]
                },
                "type": "Paragraph"
              },
              {
                "data": {
                  "children": [
                    {
                      "data": {
                        "children": [
                          {
                            "data": {
                              "value": "Return type: "
                            },
                            "type": "Words"
                          },
                          {
                            "data": {
                              "value": [
                                "int"
                              ]
                            },
                            "type": "Verbatim"
                          }
                        ]
                      },
                      "type": "Paragraph"
                    },
                    {
                      "data": {
                        "children": [
                          {
                            "data": {
                              "value": "Arguments:"
                            },
                            "type": "Words"
                          }
                        ]
                      },
                      "type": "Paragraph"
                    },
                    {
                      "data": {
                        "children": [
                          {
                            "children": [
                              {
                                "data": {
                                  "children": [
                                    {
                                      "data": {
                                        "value": [
                                          "int actual_type"
                                        ]
                                      },
                                      "type": "Verbatim"
                                    },
                                    {
                                      "data": {
                                        "value": ", the NumPy typecode of a NumPy array."
                                      },
                                      "type": "Words"
                                    }
                                  ]
                                },
                                "type": "Paragraph"
                              }
                            ]
                          },
                          {
                            "children": [
                              {
                                "data": {
                                  "children": [
                                    {
                                      "data": {
                                        "value": [
                                          "int desired_type"
                                        ]
                                      },
                                      "type": "Verbatim"
                                    },
                                    {
                                      "data": {
                                        "value": ", the desired NumPy typecode."
                                      },
                                      "type": "Words"
                                    }
                                  ]
                                },
                                "type": "Paragraph"
                              }
                            ]
                          }
                        ]
                      },
                      "type": "BulletList"
                    },
                    {
                      "data": {
                        "children": [
                          {
                            "data": {
                              "value": "Make sure that "
                            },
                            "type": "Words"
                          },
                          {
                            "data": {
                              "value": [
                                "actual_type"
                              ]
                            },
                            "type": "Verbatim"
                          },
                          {
                            "data": {
                              "value": " is compatible with     "
                            },
                            "type": "Words"
                          },
                          {
                            "data": {
                              "value": [
                                "desired_type"
                              ]
                            },
                            "type": "Verbatim"
                          },
                          {
                            "data": {
                              "value": ".  For example, this allows character and     byte types, or int and long types, to match.  This is now     equivalent to "
                            },
                            "type": "Words"
                          },
                          {
                            "data": {
                              "value": [
                                "PyArray_EquivTypenums()"
                              ]
                            },
                            "type": "Verbatim"
                          },
                          {
                            "data": {
                              "value": "."
                            },
                            "type": "Words"
                          }
                        ]
                      },
                      "type": "Paragraph"
                    }
                  ]
                },
                "type": "BlockQuote"
              },
              {
                "data": {
                  "children": [
                    {
                      "data": {
                        "content": {
                          "value": "obj_to_array_no_conversion()"
                        }
                      },
                      "type": "Strong"
                    }
                  ]
                },
                "type": "Paragraph"
              },
              {
                "data": {
                  "children": [
                    {
                      "data": {
                        "children": [
                          {
                            "data": {
                              "value": "Return type: "
                            },
                            "type": "Words"
                          },
                          {
                            "data": {
                              "value": [
                                "PyArrayObject*"
                              ]
                            },
                            "type": "Verbatim"
                          }
                        ]
                      },
                      "type": "Paragraph"
                    },
                    {
                      "data": {
                        "children": [
                          {
                            "data": {
                              "value": "Arguments:"
                            },
                            "type": "Words"
                          }
                        ]
                      },
                      "type": "Paragraph"
                    },
                    {
                      "data": {
                        "children": [
                          {
                            "children": [
                              {
                                "data": {
                                  "children": [
                                    {
                                      "data": {
                                        "value": [
                                          "PyObject* input"
                                        ]
                                      },
                                      "type": "Verbatim"
                                    },
                                    {
                                      "data": {
                                        "value": ", a general Python object."
                                      },
                                      "type": "Words"
                                    }
                                  ]
                                },
                                "type": "Paragraph"
                              }
                            ]
                          },
                          {
                            "children": [
                              {
                                "data": {
                                  "children": [
                                    {
                                      "data": {
                                        "value": [
                                          "int typecode"
                                        ]
                                      },
                                      "type": "Verbatim"
                                    },
                                    {
                                      "data": {
                                        "value": ", the desired NumPy typecode."
                                      },
                                      "type": "Words"
                                    }
                                  ]
                                },
                                "type": "Paragraph"
                              }
                            ]
                          }
                        ]
                      },
                      "type": "BulletList"
                    },
                    {
                      "data": {
                        "children": [
                          {
                            "data": {
                              "value": "Cast "
                            },
                            "type": "Words"
                          },
                          {
                            "data": {
                              "value": [
                                "input"
                              ]
                            },
                            "type": "Verbatim"
                          },
                          {
                            "data": {
                              "value": " to a "
                            },
                            "type": "Words"
                          },
                          {
                            "data": {
                              "value": [
                                "PyArrayObject*"
                              ]
                            },
                            "type": "Verbatim"
                          },
                          {
                            "data": {
                              "value": " if legal, and ensure that     it is of type "
                            },
                            "type": "Words"
                          },
                          {
                            "data": {
                              "value": [
                                "typecode"
                              ]
                            },
                            "type": "Verbatim"
                          },
                          {
                            "data": {
                              "value": ".  If "
                            },
                            "type": "Words"
                          },
                          {
                            "data": {
                              "value": [
                                "input"
                              ]
                            },
                            "type": "Verbatim"
                          },
                          {
                            "data": {
                              "value": " cannot be cast, or the     "
                            },
                            "type": "Words"
                          },
                          {
                            "data": {
                              "value": [
                                "typecode"
                              ]
                            },
                            "type": "Verbatim"
                          },
                          {
                            "data": {
                              "value": " is wrong, set a Python error and return "
                            },
                            "type": "Words"
                          },
                          {
                            "data": {
                              "value": [
                                "NULL"
                              ]
                            },
                            "type": "Verbatim"
                          },
                          {
                            "data": {
                              "value": "."
                            },
                            "type": "Words"
                          }
                        ]
                      },
                      "type": "Paragraph"
                    }
                  ]
                },
                "type": "BlockQuote"
              },
              {
                "data": {
                  "children": [
                    {
                      "data": {
                        "content": {
                          "value": "obj_to_array_allow_conversion()"
                        }
                      },
                      "type": "Strong"
                    }
                  ]
                },
                "type": "Paragraph"
              },
              {
                "data": {
                  "children": [
                    {
                      "data": {
                        "children": [
                          {
                            "data": {
                              "value": "Return type: "
                            },
                            "type": "Words"
                          },
                          {
                            "data": {
                              "value": [
                                "PyArrayObject*"
                              ]
                            },
                            "type": "Verbatim"
                          }
                        ]
                      },
                      "type": "Paragraph"
                    },
                    {
                      "data": {
                        "children": [
                          {
                            "data": {
                              "value": "Arguments:"
                            },
                            "type": "Words"
                          }
                        ]
                      },
                      "type": "Paragraph"
                    },
                    {
                      "data": {
                        "children": [
                          {
                            "children": [
                              {
                                "data": {
                                  "children": [
                                    {
                                      "data": {
                                        "value": [
                                          "PyObject* input"
                                        ]
                                      },
                                      "type": "Verbatim"
                                    },
                                    {
                                      "data": {
                                        "value": ", a general Python object."
                                      },
                                      "type": "Words"
                                    }
                                  ]
                                },
                                "type": "Paragraph"
                              }
                            ]
                          },
                          {
                            "children": [
                              {
                                "data": {
                                  "children": [
                                    {
                                      "data": {
                                        "value": [
                                          "int typecode"
                                        ]
                                      },
                                      "type": "Verbatim"
                                    },
                                    {
                                      "data": {
                                        "value": ", the desired NumPy typecode of the resulting       array."
                                      },
                                      "type": "Words"
                                    }
                                  ]
                                },
                                "type": "Paragraph"
                              }
                            ]
                          },
                          {
                            "children": [
                              {
                                "data": {
                                  "children": [
                                    {
                                      "data": {
                                        "value": [
                                          "int* is_new_object"
                                        ]
                                      },
                                      "type": "Verbatim"
                                    },
                                    {
                                      "data": {
                                        "value": ", returns a value of 0 if no conversion       performed, else 1."
                                      },
                                      "type": "Words"
                                    }
                                  ]
                                },
                                "type": "Paragraph"
                              }
                            ]
                          }
                        ]
                      },
                      "type": "BulletList"
                    },
                    {
                      "data": {
                        "children": [
                          {
                            "data": {
                              "value": "Convert "
                            },
                            "type": "Words"
                          },
                          {
                            "data": {
                              "value": [
                                "input"
                              ]
                            },
                            "type": "Verbatim"
                          },
                          {
                            "data": {
                              "value": " to a NumPy array with the given "
                            },
                            "type": "Words"
                          },
                          {
                            "data": {
                              "value": [
                                "typecode"
                              ]
                            },
                            "type": "Verbatim"
                          },
                          {
                            "data": {
                              "value": ".     On success, return a valid "
                            },
                            "type": "Words"
                          },
                          {
                            "data": {
                              "value": [
                                "PyArrayObject*"
                              ]
                            },
                            "type": "Verbatim"
                          },
                          {
                            "data": {
                              "value": " with the correct     type.  On failure, the Python error string will be set and the     routine returns "
                            },
                            "type": "Words"
                          },
                          {
                            "data": {
                              "value": [
                                "NULL"
                              ]
                            },
                            "type": "Verbatim"
                          },
                          {
                            "data": {
                              "value": "."
                            },
                            "type": "Words"
                          }
                        ]
                      },
                      "type": "Paragraph"
                    }
                  ]
                },
                "type": "BlockQuote"
              },
              {
                "data": {
                  "children": [
                    {
                      "data": {
                        "content": {
                          "value": "make_contiguous()"
                        }
                      },
                      "type": "Strong"
                    }
                  ]
                },
                "type": "Paragraph"
              },
              {
                "data": {
                  "children": [
                    {
                      "data": {
                        "children": [
                          {
                            "data": {
                              "value": "Return type: "
                            },
                            "type": "Words"
                          },
                          {
                            "data": {
                              "value": [
                                "PyArrayObject*"
                              ]
                            },
                            "type": "Verbatim"
                          }
                        ]
                      },
                      "type": "Paragraph"
                    },
                    {
                      "data": {
                        "children": [
                          {
                            "data": {
                              "value": "Arguments:"
                            },
                            "type": "Words"
                          }
                        ]
                      },
                      "type": "Paragraph"
                    },
                    {
                      "data": {
                        "children": [
                          {
                            "children": [
                              {
                                "data": {
                                  "children": [
                                    {
                                      "data": {
                                        "value": [
                                          "PyArrayObject* ary"
                                        ]
                                      },
                                      "type": "Verbatim"
                                    },
                                    {
                                      "data": {
                                        "value": ", a NumPy array."
                                      },
                                      "type": "Words"
                                    }
                                  ]
                                },
                                "type": "Paragraph"
                              }
                            ]
                          },
                          {
                            "children": [
                              {
                                "data": {
                                  "children": [
                                    {
                                      "data": {
                                        "value": [
                                          "int* is_new_object"
                                        ]
                                      },
                                      "type": "Verbatim"
                                    },
                                    {
                                      "data": {
                                        "value": ", returns a value of 0 if no conversion       performed, else 1."
                                      },
                                      "type": "Words"
                                    }
                                  ]
                                },
                                "type": "Paragraph"
                              }
                            ]
                          },
                          {
                            "children": [
                              {
                                "data": {
                                  "children": [
                                    {
                                      "data": {
                                        "value": [
                                          "int min_dims"
                                        ]
                                      },
                                      "type": "Verbatim"
                                    },
                                    {
                                      "data": {
                                        "value": ", minimum allowable dimensions."
                                      },
                                      "type": "Words"
                                    }
                                  ]
                                },
                                "type": "Paragraph"
                              }
                            ]
                          },
                          {
                            "children": [
                              {
                                "data": {
                                  "children": [
                                    {
                                      "data": {
                                        "value": [
                                          "int max_dims"
                                        ]
                                      },
                                      "type": "Verbatim"
                                    },
                                    {
                                      "data": {
                                        "value": ", maximum allowable dimensions."
                                      },
                                      "type": "Words"
                                    }
                                  ]
                                },
                                "type": "Paragraph"
                              }
                            ]
                          }
                        ]
                      },
                      "type": "BulletList"
                    },
                    {
                      "data": {
                        "children": [
                          {
                            "data": {
                              "value": "Check to see if "
                            },
                            "type": "Words"
                          },
                          {
                            "data": {
                              "value": [
                                "ary"
                              ]
                            },
                            "type": "Verbatim"
                          },
                          {
                            "data": {
                              "value": " is contiguous.  If so, return the input     pointer and flag it as not a new object.  If it is not contiguous,     create a new "
                            },
                            "type": "Words"
                          },
                          {
                            "data": {
                              "value": [
                                "PyArrayObject*"
                              ]
                            },
                            "type": "Verbatim"
                          },
                          {
                            "data": {
                              "value": " using the original data, flag it     as a new object and return the pointer."
                            },
                            "type": "Words"
                          }
                        ]
                      },
                      "type": "Paragraph"
                    }
                  ]
                },
                "type": "BlockQuote"
              },
              {
                "data": {
                  "children": [
                    {
                      "data": {
                        "content": {
                          "value": "make_fortran()"
                        }
                      },
                      "type": "Strong"
                    }
                  ]
                },
                "type": "Paragraph"
              },
              {
                "data": {
                  "children": [
                    {
                      "data": {
                        "children": [
                          {
                            "data": {
                              "value": "Return type: "
                            },
                            "type": "Words"
                          },
                          {
                            "data": {
                              "value": [
                                "PyArrayObject*"
                              ]
                            },
                            "type": "Verbatim"
                          }
                        ]
                      },
                      "type": "Paragraph"
                    },
                    {
                      "data": {
                        "children": [
                          {
                            "data": {
                              "value": "Arguments"
                            },
                            "type": "Words"
                          }
                        ]
                      },
                      "type": "Paragraph"
                    },
                    {
                      "data": {
                        "children": [
                          {
                            "children": [
                              {
                                "data": {
                                  "children": [
                                    {
                                      "data": {
                                        "value": [
                                          "PyArrayObject* ary"
                                        ]
                                      },
                                      "type": "Verbatim"
                                    },
                                    {
                                      "data": {
                                        "value": ", a NumPy array."
                                      },
                                      "type": "Words"
                                    }
                                  ]
                                },
                                "type": "Paragraph"
                              }
                            ]
                          },
                          {
                            "children": [
                              {
                                "data": {
                                  "children": [
                                    {
                                      "data": {
                                        "value": [
                                          "int* is_new_object"
                                        ]
                                      },
                                      "type": "Verbatim"
                                    },
                                    {
                                      "data": {
                                        "value": ", returns a value of 0 if no conversion       performed, else 1."
                                      },
                                      "type": "Words"
                                    }
                                  ]
                                },
                                "type": "Paragraph"
                              }
                            ]
                          }
                        ]
                      },
                      "type": "BulletList"
                    },
                    {
                      "data": {
                        "children": [
                          {
                            "data": {
                              "value": "Check to see if "
                            },
                            "type": "Words"
                          },
                          {
                            "data": {
                              "value": [
                                "ary"
                              ]
                            },
                            "type": "Verbatim"
                          },
                          {
                            "data": {
                              "value": " is Fortran contiguous.  If so, return the     input pointer and flag it as not a new object.  If it is not     Fortran contiguous, create a new "
                            },
                            "type": "Words"
                          },
                          {
                            "data": {
                              "value": [
                                "PyArrayObject*"
                              ]
                            },
                            "type": "Verbatim"
                          },
                          {
                            "data": {
                              "value": " using the     original data, flag it as a new object and return the pointer."
                            },
                            "type": "Words"
                          }
                        ]
                      },
                      "type": "Paragraph"
                    }
                  ]
                },
                "type": "BlockQuote"
              },
              {
                "data": {
                  "children": [
                    {
                      "data": {
                        "content": {
                          "value": "obj_to_array_contiguous_allow_conversion()"
                        }
                      },
                      "type": "Strong"
                    }
                  ]
                },
                "type": "Paragraph"
              },
              {
                "data": {
                  "children": [
                    {
                      "data": {
                        "children": [
                          {
                            "data": {
                              "value": "Return type: "
                            },
                            "type": "Words"
                          },
                          {
                            "data": {
                              "value": [
                                "PyArrayObject*"
                              ]
                            },
                            "type": "Verbatim"
                          }
                        ]
                      },
                      "type": "Paragraph"
                    },
                    {
                      "data": {
                        "children": [
                          {
                            "data": {
                              "value": "Arguments:"
                            },
                            "type": "Words"
                          }
                        ]
                      },
                      "type": "Paragraph"
                    },
                    {
                      "data": {
                        "children": [
                          {
                            "children": [
                              {
                                "data": {
                                  "children": [
                                    {
                                      "data": {
                                        "value": [
                                          "PyObject* input"
                                        ]
                                      },
                                      "type": "Verbatim"
                                    },
                                    {
                                      "data": {
                                        "value": ", a general Python object."
                                      },
                                      "type": "Words"
                                    }
                                  ]
                                },
                                "type": "Paragraph"
                              }
                            ]
                          },
                          {
                            "children": [
                              {
                                "data": {
                                  "children": [
                                    {
                                      "data": {
                                        "value": [
                                          "int typecode"
                                        ]
                                      },
                                      "type": "Verbatim"
                                    },
                                    {
                                      "data": {
                                        "value": ", the desired NumPy typecode of the resulting       array."
                                      },
                                      "type": "Words"
                                    }
                                  ]
                                },
                                "type": "Paragraph"
                              }
                            ]
                          },
                          {
                            "children": [
                              {
                                "data": {
                                  "children": [
                                    {
                                      "data": {
                                        "value": [
                                          "int* is_new_object"
                                        ]
                                      },
                                      "type": "Verbatim"
                                    },
                                    {
                                      "data": {
                                        "value": ", returns a value of 0 if no conversion       performed, else 1."
                                      },
                                      "type": "Words"
                                    }
                                  ]
                                },
                                "type": "Paragraph"
                              }
                            ]
                          }
                        ]
                      },
                      "type": "BulletList"
                    },
                    {
                      "data": {
                        "children": [
                          {
                            "data": {
                              "value": "Convert "
                            },
                            "type": "Words"
                          },
                          {
                            "data": {
                              "value": [
                                "input"
                              ]
                            },
                            "type": "Verbatim"
                          },
                          {
                            "data": {
                              "value": " to a contiguous "
                            },
                            "type": "Words"
                          },
                          {
                            "data": {
                              "value": [
                                "PyArrayObject*"
                              ]
                            },
                            "type": "Verbatim"
                          },
                          {
                            "data": {
                              "value": " of the     specified type.  If the input object is not a contiguous     "
                            },
                            "type": "Words"
                          },
                          {
                            "data": {
                              "value": [
                                "PyArrayObject*"
                              ]
                            },
                            "type": "Verbatim"
                          },
                          {
                            "data": {
                              "value": ", a new one will be created and the new object     flag will be set."
                            },
                            "type": "Words"
                          }
                        ]
                      },
                      "type": "Paragraph"
                    }
                  ]
                },
                "type": "BlockQuote"
              },
              {
                "data": {
                  "children": [
                    {
                      "data": {
                        "content": {
                          "value": "obj_to_array_fortran_allow_conversion()"
                        }
                      },
                      "type": "Strong"
                    }
                  ]
                },
                "type": "Paragraph"
              },
              {
                "data": {
                  "children": [
                    {
                      "data": {
                        "children": [
                          {
                            "data": {
                              "value": "Return type: "
                            },
                            "type": "Words"
                          },
                          {
                            "data": {
                              "value": [
                                "PyArrayObject*"
                              ]
                            },
                            "type": "Verbatim"
                          }
                        ]
                      },
                      "type": "Paragraph"
                    },
                    {
                      "data": {
                        "children": [
                          {
                            "data": {
                              "value": "Arguments:"
                            },
                            "type": "Words"
                          }
                        ]
                      },
                      "type": "Paragraph"
                    },
                    {
                      "data": {
                        "children": [
                          {
                            "children": [
                              {
                                "data": {
                                  "children": [
                                    {
                                      "data": {
                                        "value": [
                                          "PyObject* input"
                                        ]
                                      },
                                      "type": "Verbatim"
                                    },
                                    {
                                      "data": {
                                        "value": ", a general Python object."
                                      },
                                      "type": "Words"
                                    }
                                  ]
                                },
                                "type": "Paragraph"
                              }
                            ]
                          },
                          {
                            "children": [
                              {
                                "data": {
                                  "children": [
                                    {
                                      "data": {
                                        "value": [
                                          "int typecode"
                                        ]
                                      },
                                      "type": "Verbatim"
                                    },
                                    {
                                      "data": {
                                        "value": ", the desired NumPy typecode of the resulting       array."
                                      },
                                      "type": "Words"
                                    }
                                  ]
                                },
                                "type": "Paragraph"
                              }
                            ]
                          },
                          {
                            "children": [
                              {
                                "data": {
                                  "children": [
                                    {
                                      "data": {
                                        "value": [
                                          "int* is_new_object"
                                        ]
                                      },
                                      "type": "Verbatim"
                                    },
                                    {
                                      "data": {
                                        "value": ", returns a value of 0 if no conversion       performed, else 1."
                                      },
                                      "type": "Words"
                                    }
                                  ]
                                },
                                "type": "Paragraph"
                              }
                            ]
                          }
                        ]
                      },
                      "type": "BulletList"
                    },
                    {
                      "data": {
                        "children": [
                          {
                            "data": {
                              "value": "Convert "
                            },
                            "type": "Words"
                          },
                          {
                            "data": {
                              "value": [
                                "input"
                              ]
                            },
                            "type": "Verbatim"
                          },
                          {
                            "data": {
                              "value": " to a Fortran contiguous "
                            },
                            "type": "Words"
                          },
                          {
                            "data": {
                              "value": [
                                "PyArrayObject*"
                              ]
                            },
                            "type": "Verbatim"
                          },
                          {
                            "data": {
                              "value": " of     the specified type.  If the input object is not a Fortran     contiguous "
                            },
                            "type": "Words"
                          },
                          {
                            "data": {
                              "value": [
                                "PyArrayObject*"
                              ]
                            },
                            "type": "Verbatim"
                          },
                          {
                            "data": {
                              "value": ", a new one will be created and the     new object flag will be set."
                            },
                            "type": "Words"
                          }
                        ]
                      },
                      "type": "Paragraph"
                    }
                  ]
                },
                "type": "BlockQuote"
              },
              {
                "data": {
                  "children": [
                    {
                      "data": {
                        "content": {
                          "value": "require_contiguous()"
                        }
                      },
                      "type": "Strong"
                    }
                  ]
                },
                "type": "Paragraph"
              },
              {
                "data": {
                  "children": [
                    {
                      "data": {
                        "children": [
                          {
                            "data": {
                              "value": "Return type: "
                            },
                            "type": "Words"
                          },
                          {
                            "data": {
                              "value": [
                                "int"
                              ]
                            },
                            "type": "Verbatim"
                          }
                        ]
                      },
                      "type": "Paragraph"
                    },
                    {
                      "data": {
                        "children": [
                          {
                            "data": {
                              "value": "Arguments:"
                            },
                            "type": "Words"
                          }
                        ]
                      },
                      "type": "Paragraph"
                    },
                    {
                      "data": {
                        "children": [
                          {
                            "children": [
                              {
                                "data": {
                                  "children": [
                                    {
                                      "data": {
                                        "value": [
                                          "PyArrayObject* ary"
                                        ]
                                      },
                                      "type": "Verbatim"
                                    },
                                    {
                                      "data": {
                                        "value": ", a NumPy array."
                                      },
                                      "type": "Words"
                                    }
                                  ]
                                },
                                "type": "Paragraph"
                              }
                            ]
                          }
                        ]
                      },
                      "type": "BulletList"
                    },
                    {
                      "data": {
                        "children": [
                          {
                            "data": {
                              "value": "Test whether "
                            },
                            "type": "Words"
                          },
                          {
                            "data": {
                              "value": [
                                "ary"
                              ]
                            },
                            "type": "Verbatim"
                          },
                          {
                            "data": {
                              "value": " is contiguous.  If so, return 1.  Otherwise,     set a Python error and return 0."
                            },
                            "type": "Words"
                          }
                        ]
                      },
                      "type": "Paragraph"
                    }
                  ]
                },
                "type": "BlockQuote"
              },
              {
                "data": {
                  "children": [
                    {
                      "data": {
                        "content": {
                          "value": "require_native()"
                        }
                      },
                      "type": "Strong"
                    }
                  ]
                },
                "type": "Paragraph"
              },
              {
                "data": {
                  "children": [
                    {
                      "data": {
                        "children": [
                          {
                            "data": {
                              "value": "Return type: "
                            },
                            "type": "Words"
                          },
                          {
                            "data": {
                              "value": [
                                "int"
                              ]
                            },
                            "type": "Verbatim"
                          }
                        ]
                      },
                      "type": "Paragraph"
                    },
                    {
                      "data": {
                        "children": [
                          {
                            "data": {
                              "value": "Arguments:"
                            },
                            "type": "Words"
                          }
                        ]
                      },
                      "type": "Paragraph"
                    },
                    {
                      "data": {
                        "children": [
                          {
                            "children": [
                              {
                                "data": {
                                  "children": [
                                    {
                                      "data": {
                                        "value": [
                                          "PyArray_Object* ary"
                                        ]
                                      },
                                      "type": "Verbatim"
                                    },
                                    {
                                      "data": {
                                        "value": ", a NumPy array."
                                      },
                                      "type": "Words"
                                    }
                                  ]
                                },
                                "type": "Paragraph"
                              }
                            ]
                          }
                        ]
                      },
                      "type": "BulletList"
                    },
                    {
                      "data": {
                        "children": [
                          {
                            "data": {
                              "value": "Require that "
                            },
                            "type": "Words"
                          },
                          {
                            "data": {
                              "value": [
                                "ary"
                              ]
                            },
                            "type": "Verbatim"
                          },
                          {
                            "data": {
                              "value": " is not byte-swapped.  If the array is not     byte-swapped, return 1.  Otherwise, set a Python error and     return 0."
                            },
                            "type": "Words"
                          }
                        ]
                      },
                      "type": "Paragraph"
                    }
                  ]
                },
                "type": "BlockQuote"
              },
              {
                "data": {
                  "children": [
                    {
                      "data": {
                        "content": {
                          "value": "require_dimensions()"
                        }
                      },
                      "type": "Strong"
                    }
                  ]
                },
                "type": "Paragraph"
              },
              {
                "data": {
                  "children": [
                    {
                      "data": {
                        "children": [
                          {
                            "data": {
                              "value": "Return type: "
                            },
                            "type": "Words"
                          },
                          {
                            "data": {
                              "value": [
                                "int"
                              ]
                            },
                            "type": "Verbatim"
                          }
                        ]
                      },
                      "type": "Paragraph"
                    },
                    {
                      "data": {
                        "children": [
                          {
                            "data": {
                              "value": "Arguments:"
                            },
                            "type": "Words"
                          }
                        ]
                      },
                      "type": "Paragraph"
                    },
                    {
                      "data": {
                        "children": [
                          {
                            "children": [
                              {
                                "data": {
                                  "children": [
                                    {
                                      "data": {
                                        "value": [
                                          "PyArrayObject* ary"
                                        ]
                                      },
                                      "type": "Verbatim"
                                    },
                                    {
                                      "data": {
                                        "value": ", a NumPy array."
                                      },
                                      "type": "Words"
                                    }
                                  ]
                                },
                                "type": "Paragraph"
                              }
                            ]
                          },
                          {
                            "children": [
                              {
                                "data": {
                                  "children": [
                                    {
                                      "data": {
                                        "value": [
                                          "int exact_dimensions"
                                        ]
                                      },
                                      "type": "Verbatim"
                                    },
                                    {
                                      "data": {
                                        "value": ", the desired number of dimensions."
                                      },
                                      "type": "Words"
                                    }
                                  ]
                                },
                                "type": "Paragraph"
                              }
                            ]
                          }
                        ]
                      },
                      "type": "BulletList"
                    },
                    {
                      "data": {
                        "children": [
                          {
                            "data": {
                              "value": "Require "
                            },
                            "type": "Words"
                          },
                          {
                            "data": {
                              "value": [
                                "ary"
                              ]
                            },
                            "type": "Verbatim"
                          },
                          {
                            "data": {
                              "value": " to have a specified number of dimensions.  If the     array has the specified number of dimensions, return 1.     Otherwise, set a Python error and return 0."
                            },
                            "type": "Words"
                          }
                        ]
                      },
                      "type": "Paragraph"
                    }
                  ]
                },
                "type": "BlockQuote"
              },
              {
                "data": {
                  "children": [
                    {
                      "data": {
                        "content": {
                          "value": "require_dimensions_n()"
                        }
                      },
                      "type": "Strong"
                    }
                  ]
                },
                "type": "Paragraph"
              },
              {
                "data": {
                  "children": [
                    {
                      "data": {
                        "children": [
                          {
                            "data": {
                              "value": "Return type: "
                            },
                            "type": "Words"
                          },
                          {
                            "data": {
                              "value": [
                                "int"
                              ]
                            },
                            "type": "Verbatim"
                          }
                        ]
                      },
                      "type": "Paragraph"
                    },
                    {
                      "data": {
                        "children": [
                          {
                            "data": {
                              "value": "Arguments:"
                            },
                            "type": "Words"
                          }
                        ]
                      },
                      "type": "Paragraph"
                    },
                    {
                      "data": {
                        "children": [
                          {
                            "children": [
                              {
                                "data": {
                                  "children": [
                                    {
                                      "data": {
                                        "value": [
                                          "PyArrayObject* ary"
                                        ]
                                      },
                                      "type": "Verbatim"
                                    },
                                    {
                                      "data": {
                                        "value": ", a NumPy array."
                                      },
                                      "type": "Words"
                                    }
                                  ]
                                },
                                "type": "Paragraph"
                              }
                            ]
                          },
                          {
                            "children": [
                              {
                                "data": {
                                  "children": [
                                    {
                                      "data": {
                                        "value": [
                                          "int* exact_dimensions"
                                        ]
                                      },
                                      "type": "Verbatim"
                                    },
                                    {
                                      "data": {
                                        "value": ", an array of integers representing       acceptable numbers of dimensions."
                                      },
                                      "type": "Words"
                                    }
                                  ]
                                },
                                "type": "Paragraph"
                              }
                            ]
                          },
                          {
                            "children": [
                              {
                                "data": {
                                  "children": [
                                    {
                                      "data": {
                                        "value": [
                                          "int n"
                                        ]
                                      },
                                      "type": "Verbatim"
                                    },
                                    {
                                      "data": {
                                        "value": ", the length of "
                                      },
                                      "type": "Words"
                                    },
                                    {
                                      "data": {
                                        "value": [
                                          "exact_dimensions"
                                        ]
                                      },
                                      "type": "Verbatim"
                                    },
                                    {
                                      "data": {
                                        "value": "."
                                      },
                                      "type": "Words"
                                    }
                                  ]
                                },
                                "type": "Paragraph"
                              }
                            ]
                          }
                        ]
                      },
                      "type": "BulletList"
                    },
                    {
                      "data": {
                        "children": [
                          {
                            "data": {
                              "value": "Require "
                            },
                            "type": "Words"
                          },
                          {
                            "data": {
                              "value": [
                                "ary"
                              ]
                            },
                            "type": "Verbatim"
                          },
                          {
                            "data": {
                              "value": " to have one of a list of specified number of     dimensions.  If the array has one of the specified number of     dimensions, return 1.  Otherwise, set the Python error string     and return 0."
                            },
                            "type": "Words"
                          }
                        ]
                      },
                      "type": "Paragraph"
                    }
                  ]
                },
                "type": "BlockQuote"
              },
              {
                "data": {
                  "children": [
                    {
                      "data": {
                        "content": {
                          "value": "require_size()"
                        }
                      },
                      "type": "Strong"
                    }
                  ]
                },
                "type": "Paragraph"
              },
              {
                "data": {
                  "children": [
                    {
                      "data": {
                        "children": [
                          {
                            "data": {
                              "value": "Return type: "
                            },
                            "type": "Words"
                          },
                          {
                            "data": {
                              "value": [
                                "int"
                              ]
                            },
                            "type": "Verbatim"
                          }
                        ]
                      },
                      "type": "Paragraph"
                    },
                    {
                      "data": {
                        "children": [
                          {
                            "data": {
                              "value": "Arguments:"
                            },
                            "type": "Words"
                          }
                        ]
                      },
                      "type": "Paragraph"
                    },
                    {
                      "data": {
                        "children": [
                          {
                            "children": [
                              {
                                "data": {
                                  "children": [
                                    {
                                      "data": {
                                        "value": [
                                          "PyArrayObject* ary"
                                        ]
                                      },
                                      "type": "Verbatim"
                                    },
                                    {
                                      "data": {
                                        "value": ", a NumPy array."
                                      },
                                      "type": "Words"
                                    }
                                  ]
                                },
                                "type": "Paragraph"
                              }
                            ]
                          },
                          {
                            "children": [
                              {
                                "data": {
                                  "children": [
                                    {
                                      "data": {
                                        "value": [
                                          "npy_int* size"
                                        ]
                                      },
                                      "type": "Verbatim"
                                    },
                                    {
                                      "data": {
                                        "value": ", an array representing the desired lengths of       each dimension."
                                      },
                                      "type": "Words"
                                    }
                                  ]
                                },
                                "type": "Paragraph"
                              }
                            ]
                          },
                          {
                            "children": [
                              {
                                "data": {
                                  "children": [
                                    {
                                      "data": {
                                        "value": [
                                          "int n"
                                        ]
                                      },
                                      "type": "Verbatim"
                                    },
                                    {
                                      "data": {
                                        "value": ", the length of "
                                      },
                                      "type": "Words"
                                    },
                                    {
                                      "data": {
                                        "value": [
                                          "size"
                                        ]
                                      },
                                      "type": "Verbatim"
                                    },
                                    {
                                      "data": {
                                        "value": "."
                                      },
                                      "type": "Words"
                                    }
                                  ]
                                },
                                "type": "Paragraph"
                              }
                            ]
                          }
                        ]
                      },
                      "type": "BulletList"
                    },
                    {
                      "data": {
                        "children": [
                          {
                            "data": {
                              "value": "Require "
                            },
                            "type": "Words"
                          },
                          {
                            "data": {
                              "value": [
                                "ary"
                              ]
                            },
                            "type": "Verbatim"
                          },
                          {
                            "data": {
                              "value": " to have a specified shape.  If the array has the     specified shape, return 1.  Otherwise, set the Python error     string and return 0."
                            },
                            "type": "Words"
                          }
                        ]
                      },
                      "type": "Paragraph"
                    }
                  ]
                },
                "type": "BlockQuote"
              },
              {
                "data": {
                  "children": [
                    {
                      "data": {
                        "content": {
                          "value": "require_fortran()"
                        }
                      },
                      "type": "Strong"
                    }
                  ]
                },
                "type": "Paragraph"
              },
              {
                "data": {
                  "children": [
                    {
                      "data": {
                        "children": [
                          {
                            "data": {
                              "value": "Return type: "
                            },
                            "type": "Words"
                          },
                          {
                            "data": {
                              "value": [
                                "int"
                              ]
                            },
                            "type": "Verbatim"
                          }
                        ]
                      },
                      "type": "Paragraph"
                    },
                    {
                      "data": {
                        "children": [
                          {
                            "data": {
                              "value": "Arguments:"
                            },
                            "type": "Words"
                          }
                        ]
                      },
                      "type": "Paragraph"
                    },
                    {
                      "data": {
                        "children": [
                          {
                            "children": [
                              {
                                "data": {
                                  "children": [
                                    {
                                      "data": {
                                        "value": [
                                          "PyArrayObject* ary"
                                        ]
                                      },
                                      "type": "Verbatim"
                                    },
                                    {
                                      "data": {
                                        "value": ", a NumPy array."
                                      },
                                      "type": "Words"
                                    }
                                  ]
                                },
                                "type": "Paragraph"
                              }
                            ]
                          }
                        ]
                      },
                      "type": "BulletList"
                    },
                    {
                      "data": {
                        "children": [
                          {
                            "data": {
                              "value": "Require the given "
                            },
                            "type": "Words"
                          },
                          {
                            "data": {
                              "value": [
                                "PyArrayObject"
                              ]
                            },
                            "type": "Verbatim"
                          },
                          {
                            "data": {
                              "value": " to be Fortran ordered.  If     the "
                            },
                            "type": "Words"
                          },
                          {
                            "data": {
                              "value": [
                                "PyArrayObject"
                              ]
                            },
                            "type": "Verbatim"
                          },
                          {
                            "data": {
                              "value": " is already Fortran ordered, do nothing.     Else, set the Fortran ordering flag and recompute the strides."
                            },
                            "type": "Words"
                          }
                        ]
                      },
                      "type": "Paragraph"
                    }
                  ]
                },
                "type": "BlockQuote"
              }
            ]
          },
          "type": "BlockQuote"
        }
      ],
      "level": 2,
      "title": "Routines"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "There are many C or C++ array/NumPy array situations not covered by a simple "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "%include \"numpy.i\""
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " and subsequent "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "%apply"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " directives."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "level": 1,
      "title": "Beyond the Provided Typemaps"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Consider a reasonable prototype for a dot product function:      "
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": "double dot(int len, double* vec1, double* vec2);"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "The Python interface that we want is:      "
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": "def dot(vec1, vec2):\n    \"\"\"\n    dot(PyObject,PyObject) -> double\n    \"\"\""
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "The problem here is that there is one dimension argument and two array arguments, and our typemaps are set up for dimensions that apply to a single array (in fact, "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "SWIG"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " does not provide a mechanism for associating "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "len"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " with "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "vec2"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " that takes two Python input arguments).  The recommended solution is the following:      "
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": "%apply (int DIM1, double* IN_ARRAY1) {(int len1, double* vec1),\n                                      (int len2, double* vec2)}\n%rename (dot) my_dot;\n%exception my_dot {\n    $action\n(PyErr_Occurred()) SWIG_fail;\n}\n%inline %{\ndouble my_dot(int len1, double* vec1, int len2, double* vec2) {\n    if (len1 != len2) {\n PyErr_Format(PyExc_ValueError,\n                     \"Arrays of lengths (%d,%d) given\",\n                     len1, len2);\n return 0.0;\n    }\n    return dot(len1, vec1, vec2);\n}\n%}"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "If the header file that contains the prototype for "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "double dot()"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " also contains other prototypes that you want to wrap, so that you need to "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "%include"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " this header file, then you will also need a "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "%ignore\ndot;"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " directive, placed after the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "%rename"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " and before the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "%include"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " directives.  Or, if the function in question is a class method, you will want to use "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "%extend"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " rather than "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "%inline"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " in addition to "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "%ignore"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": "."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "content": {
                    "value": "A note on error handling:"
                  }
                },
                "type": "Strong"
              },
              {
                "data": {
                  "value": " Note that "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "my_dot"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " returns a "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "double"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " but that it can also raise a Python error.  The resulting wrapper function will return a Python float representation of 0.0 when the vector lengths do not match.  Since this is not "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "NULL"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", the Python interpreter will not know to check for an error.  For this reason, we add the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "%exception"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " directive above for "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "my_dot"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " to get the behavior we want (note that "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "$action"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " is a macro that gets expanded to a valid call to "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "my_dot"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ").  In general, you will probably want to write a "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "SWIG"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " macro to perform this task."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "level": 2,
      "title": "A Common Example"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "There are other wrapping situations in which "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "numpy.i"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " may be helpful when you encounter them."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "children": [
                    {
                      "children": [
                        {
                          "data": {
                            "children": [
                              {
                                "data": {
                                  "value": "In some situations, it is possible that you could use the     "
                                },
                                "type": "Words"
                              },
                              {
                                "data": {
                                  "value": [
                                    "%numpy_typemaps"
                                  ]
                                },
                                "type": "Verbatim"
                              },
                              {
                                "data": {
                                  "value": " macro to implement typemaps for your own     types.  See the "
                                },
                                "type": "Words"
                              },
                              {
                                "data": {
                                  "domain": null,
                                  "role": null,
                                  "value": "Other Common Types: bool"
                                },
                                "type": "Directive"
                              },
                              {
                                "data": {
                                  "value": " or "
                                },
                                "type": "Words"
                              },
                              {
                                "data": {
                                  "domain": null,
                                  "role": null,
                                  "value": "Other Common\n    Types: complex"
                                },
                                "type": "Directive"
                              },
                              {
                                "data": {
                                  "value": " sections for examples.  Another situation is if     your dimensions are of a type other than "
                                },
                                "type": "Words"
                              },
                              {
                                "data": {
                                  "value": [
                                    "int"
                                  ]
                                },
                                "type": "Verbatim"
                              },
                              {
                                "data": {
                                  "value": " (say "
                                },
                                "type": "Words"
                              },
                              {
                                "data": {
                                  "value": [
                                    "long"
                                  ]
                                },
                                "type": "Verbatim"
                              },
                              {
                                "data": {
                                  "value": " for     example):          "
                                },
                                "type": "Words"
                              }
                            ]
                          },
                          "type": "Paragraph"
                        },
                        {
                          "data": {
                            "value": "%numpy_typemaps(double, NPY_DOUBLE, long)"
                          },
                          "type": "BlockVerbatim"
                        }
                      ]
                    },
                    {
                      "children": [
                        {
                          "data": {
                            "children": [
                              {
                                "data": {
                                  "value": "You can use the code in "
                                },
                                "type": "Words"
                              },
                              {
                                "data": {
                                  "value": [
                                    "numpy.i"
                                  ]
                                },
                                "type": "Verbatim"
                              },
                              {
                                "data": {
                                  "value": " to write your own typemaps.     For example, if you had a five-dimensional array as a function     argument, you could cut-and-paste the appropriate four-dimensional     typemaps into your interface file.  The modifications for the     fourth dimension would be trivial."
                                },
                                "type": "Words"
                              }
                            ]
                          },
                          "type": "Paragraph"
                        }
                      ]
                    },
                    {
                      "children": [
                        {
                          "data": {
                            "children": [
                              {
                                "data": {
                                  "value": "Sometimes, the best approach is to use the "
                                },
                                "type": "Words"
                              },
                              {
                                "data": {
                                  "value": [
                                    "%extend"
                                  ]
                                },
                                "type": "Verbatim"
                              },
                              {
                                "data": {
                                  "value": " directive     to define new methods for your classes (or overload existing ones)     that take a "
                                },
                                "type": "Words"
                              },
                              {
                                "data": {
                                  "value": [
                                    "PyObject*"
                                  ]
                                },
                                "type": "Verbatim"
                              },
                              {
                                "data": {
                                  "value": " (that either is or can be converted to a     "
                                },
                                "type": "Words"
                              },
                              {
                                "data": {
                                  "value": [
                                    "PyArrayObject*"
                                  ]
                                },
                                "type": "Verbatim"
                              },
                              {
                                "data": {
                                  "value": ") instead of a pointer to a buffer.  In this     case, the helper routines in "
                                },
                                "type": "Words"
                              },
                              {
                                "data": {
                                  "value": [
                                    "numpy.i"
                                  ]
                                },
                                "type": "Verbatim"
                              },
                              {
                                "data": {
                                  "value": " can be very useful."
                                },
                                "type": "Words"
                              }
                            ]
                          },
                          "type": "Paragraph"
                        }
                      ]
                    },
                    {
                      "children": [
                        {
                          "data": {
                            "children": [
                              {
                                "data": {
                                  "value": "Writing typemaps can be a bit nonintuitive.  If you have specific     questions about writing "
                                },
                                "type": "Words"
                              },
                              {
                                "data": {
                                  "domain": null,
                                  "role": null,
                                  "value": "SWIG"
                                },
                                "type": "Directive"
                              },
                              {
                                "data": {
                                  "value": " typemaps for NumPy, the     developers of "
                                },
                                "type": "Words"
                              },
                              {
                                "data": {
                                  "value": [
                                    "numpy.i"
                                  ]
                                },
                                "type": "Verbatim"
                              },
                              {
                                "data": {
                                  "value": " do monitor the     "
                                },
                                "type": "Words"
                              },
                              {
                                "data": {
                                  "domain": null,
                                  "role": null,
                                  "value": "Numpy-discussion <mailto:Numpy-discussion@python.org>"
                                },
                                "type": "Directive"
                              },
                              {
                                "data": {
                                  "value": " and     "
                                },
                                "type": "Words"
                              },
                              {
                                "data": {
                                  "domain": null,
                                  "role": null,
                                  "value": "Swig-user <mailto:Swig-user@lists.sourceforge.net>"
                                },
                                "type": "Directive"
                              },
                              {
                                "data": {
                                  "value": " mail lists."
                                },
                                "type": "Words"
                              }
                            ]
                          },
                          "type": "Paragraph"
                        }
                      ]
                    }
                  ]
                },
                "type": "BulletList"
              }
            ]
          },
          "type": "BlockQuote"
        }
      ],
      "level": 2,
      "title": "Other Situations"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "When you use the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "%apply"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " directive, as is usually necessary to use "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "numpy.i"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", it will remain in effect until you tell "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "SWIG"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " that it shouldn't be.  If the arguments to the functions or methods that you are wrapping have common names, such as "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "length"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " or "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "vector"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", these typemaps may get applied in situations you do not expect or want.  Therefore, it is always a good idea to add a "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "%clear"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " directive after you are done with a specific typemap:      "
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": "%apply (double* IN_ARRAY1, int DIM1) {(double* vector, int length)}\n%include \"my_header.h\"\n%clear (double* vector, int length);"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "In general, you should target these typemap signatures specifically where you want them, and then clear them after you are done."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "level": 2,
      "title": "A Final Note"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Out of the box, "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "numpy.i"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " provides typemaps that support conversion between NumPy arrays and C arrays:"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "children": [
                    {
                      "children": [
                        {
                          "data": {
                            "children": [
                              {
                                "data": {
                                  "value": "That can be one of 12 different scalar types: "
                                },
                                "type": "Words"
                              },
                              {
                                "data": {
                                  "value": [
                                    "signed char"
                                  ]
                                },
                                "type": "Verbatim"
                              },
                              {
                                "data": {
                                  "value": ",     "
                                },
                                "type": "Words"
                              },
                              {
                                "data": {
                                  "value": [
                                    "unsigned char"
                                  ]
                                },
                                "type": "Verbatim"
                              },
                              {
                                "data": {
                                  "value": ", "
                                },
                                "type": "Words"
                              },
                              {
                                "data": {
                                  "value": [
                                    "short"
                                  ]
                                },
                                "type": "Verbatim"
                              },
                              {
                                "data": {
                                  "value": ", "
                                },
                                "type": "Words"
                              },
                              {
                                "data": {
                                  "value": [
                                    "unsigned short"
                                  ]
                                },
                                "type": "Verbatim"
                              },
                              {
                                "data": {
                                  "value": ", "
                                },
                                "type": "Words"
                              },
                              {
                                "data": {
                                  "value": [
                                    "int"
                                  ]
                                },
                                "type": "Verbatim"
                              },
                              {
                                "data": {
                                  "value": ",     "
                                },
                                "type": "Words"
                              },
                              {
                                "data": {
                                  "value": [
                                    "unsigned int"
                                  ]
                                },
                                "type": "Verbatim"
                              },
                              {
                                "data": {
                                  "value": ", "
                                },
                                "type": "Words"
                              },
                              {
                                "data": {
                                  "value": [
                                    "long"
                                  ]
                                },
                                "type": "Verbatim"
                              },
                              {
                                "data": {
                                  "value": ", "
                                },
                                "type": "Words"
                              },
                              {
                                "data": {
                                  "value": [
                                    "unsigned long"
                                  ]
                                },
                                "type": "Verbatim"
                              },
                              {
                                "data": {
                                  "value": ", "
                                },
                                "type": "Words"
                              },
                              {
                                "data": {
                                  "value": [
                                    "long long"
                                  ]
                                },
                                "type": "Verbatim"
                              },
                              {
                                "data": {
                                  "value": ",     "
                                },
                                "type": "Words"
                              },
                              {
                                "data": {
                                  "value": [
                                    "unsigned long long"
                                  ]
                                },
                                "type": "Verbatim"
                              },
                              {
                                "data": {
                                  "value": ", "
                                },
                                "type": "Words"
                              },
                              {
                                "data": {
                                  "value": [
                                    "float"
                                  ]
                                },
                                "type": "Verbatim"
                              },
                              {
                                "data": {
                                  "value": " and "
                                },
                                "type": "Words"
                              },
                              {
                                "data": {
                                  "value": [
                                    "double"
                                  ]
                                },
                                "type": "Verbatim"
                              },
                              {
                                "data": {
                                  "value": "."
                                },
                                "type": "Words"
                              }
                            ]
                          },
                          "type": "Paragraph"
                        }
                      ]
                    },
                    {
                      "children": [
                        {
                          "data": {
                            "children": [
                              {
                                "data": {
                                  "value": "That support 74 different argument signatures for each data type,     including:"
                                },
                                "type": "Words"
                              }
                            ]
                          },
                          "type": "Paragraph"
                        },
                        {
                          "data": {
                            "children": [
                              {
                                "children": [
                                  {
                                    "data": {
                                      "children": [
                                        {
                                          "data": {
                                            "value": "One-dimensional, two-dimensional, three-dimensional and       four-dimensional arrays."
                                          },
                                          "type": "Words"
                                        }
                                      ]
                                    },
                                    "type": "Paragraph"
                                  }
                                ]
                              },
                              {
                                "children": [
                                  {
                                    "data": {
                                      "children": [
                                        {
                                          "data": {
                                            "value": "Input-only, in-place, argout, argoutview, and memory managed       argoutview behavior."
                                          },
                                          "type": "Words"
                                        }
                                      ]
                                    },
                                    "type": "Paragraph"
                                  }
                                ]
                              },
                              {
                                "children": [
                                  {
                                    "data": {
                                      "children": [
                                        {
                                          "data": {
                                            "value": "Hard-coded dimensions, data-buffer-then-dimensions       specification, and dimensions-then-data-buffer specification."
                                          },
                                          "type": "Words"
                                        }
                                      ]
                                    },
                                    "type": "Paragraph"
                                  }
                                ]
                              },
                              {
                                "children": [
                                  {
                                    "data": {
                                      "children": [
                                        {
                                          "data": {
                                            "value": "Both C-ordering (\"last dimension fastest\") or Fortran-ordering       (\"first dimension fastest\") support for 2D, 3D and 4D arrays."
                                          },
                                          "type": "Words"
                                        }
                                      ]
                                    },
                                    "type": "Paragraph"
                                  }
                                ]
                              }
                            ]
                          },
                          "type": "BulletList"
                        }
                      ]
                    }
                  ]
                },
                "type": "BulletList"
              }
            ]
          },
          "type": "BlockQuote"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "The "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "numpy.i"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " interface file also provides additional tools for wrapper developers, including:"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "children": [
                    {
                      "children": [
                        {
                          "data": {
                            "children": [
                              {
                                "data": {
                                  "value": "A "
                                },
                                "type": "Words"
                              },
                              {
                                "data": {
                                  "domain": null,
                                  "role": null,
                                  "value": "SWIG"
                                },
                                "type": "Directive"
                              },
                              {
                                "data": {
                                  "value": " macro ("
                                },
                                "type": "Words"
                              },
                              {
                                "data": {
                                  "value": [
                                    "%numpy_typemaps"
                                  ]
                                },
                                "type": "Verbatim"
                              },
                              {
                                "data": {
                                  "value": ") with three arguments for     implementing the 74 argument signatures for the user's choice of     (1) C data type, (2) NumPy data type (assuming they match), and     (3) dimension type."
                                },
                                "type": "Words"
                              }
                            ]
                          },
                          "type": "Paragraph"
                        }
                      ]
                    },
                    {
                      "children": [
                        {
                          "data": {
                            "children": [
                              {
                                "data": {
                                  "value": "Fourteen C macros and fifteen C functions that can be used to     write specialized typemaps, extensions, or inlined functions that     handle cases not covered by the provided typemaps.  Note that the     macros and functions are coded specifically to work with the NumPy     C/API regardless of NumPy version number, both before and after     the deprecation of some aspects of the API after version 1.6."
                                },
                                "type": "Words"
                              }
                            ]
                          },
                          "type": "Paragraph"
                        }
                      ]
                    }
                  ]
                },
                "type": "BulletList"
              }
            ]
          },
          "type": "BlockQuote"
        }
      ],
      "level": 1,
      "title": "Summary"
    }
  ],
  "content": {},
  "example_section_data": {
    "children": [],
    "level": 0,
    "title": null
  },
  "item_file": null,
  "item_line": null,
  "item_type": null,
  "ordered_sections": [],
  "references": null,
  "see_also": [],
  "signature": {
    "value": null
  }
}