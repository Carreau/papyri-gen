{
  "aliases": [],
  "arbitrary": [
    {
      "children": [
        {
          "data": {
            "placeholder": "target",
            "value": ".. _basics.copies-and-views:"
          },
          "type": "Unimplemented"
        }
      ],
      "level": 0,
      "title": null
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "When operating on NumPy arrays, it is possible to access the internal data buffer directly using a "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "view <view>"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " without copying data around. This ensures good performance but can also cause unwanted problems if the user is not aware of how this works. Hence, it is important to know the difference between these two terms and to know which operations return copies and which return views."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "The NumPy array is a data structure consisting of two parts: the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "contiguous"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " data buffer with the actual data elements and the metadata that contains information about the data buffer. The metadata includes data type, strides, and other important information that helps manipulate the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    ".ndarray"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " easily. See the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "numpy-internals"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " section for a detailed look."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "placeholder": "target",
            "value": ".. _view:"
          },
          "type": "Unimplemented"
        }
      ],
      "level": 0,
      "title": "Copies and views"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "It is possible to access the array differently by just changing certain metadata like "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "stride"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " and "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "dtype"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " without changing the data buffer. This creates a new way of looking at the data and these new arrays are called views. The data buffer remains the same, so any changes made to a view reflects in the original copy. A view can be forced through the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    ".ndarray.view"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " method."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "level": 1,
      "title": "View"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "When a new array is created by duplicating the data buffer as well as the metadata, it is called a copy. Changes made to the copy do not reflect on the original array. Making a copy is slower and memory-consuming but sometimes necessary. A copy can be forced by using "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    ".ndarray.copy"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": "."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "placeholder": "target",
            "value": ".. _indexing-operations:"
          },
          "type": "Unimplemented"
        }
      ],
      "level": 1,
      "title": "Copy"
    },
    {
      "children": [
        {
          "data": {
            "argument": ":ref:`basics.indexing`",
            "content": "",
            "name": "seealso",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Views are created when elements can be addressed with offsets and strides in the original array. Hence, basic indexing always creates views. For example:      "
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": ">>> x = np.arange(10)\n>>> x\narray([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n>>> y = x[1:3]  # creates a view\n>>> y\narray([1, 2])\n>>> x[1:3] = [10, 11]\n>>> x\narray([ 0, 10, 11,  3,  4,  5,  6,  7,  8,  9])\n>>> y\narray([10, 11])"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Here, "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "y"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " gets changed when "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "x"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " is changed because it is a view."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": [
                    "advanced-indexing"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", on the other hand, always creates copies. For example:      "
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": ">>> x = np.arange(9).reshape(3, 3)\n>>> x\narray([[0, 1, 2],\n       [3, 4, 5],\n       [6, 7, 8]])\n>>> y = x[[1, 2]]\n>>> y\narray([[3, 4, 5],\n       [6, 7, 8]])\n>>> y.base is None\nTrue"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Here, "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "y"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " is a copy, as signified by the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "base <.ndarray.base>"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " attribute. We can also confirm this by assigning new values to "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "x[[1, 2]]"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " which in turn will not affect "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "y"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " at all:      "
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": ">>> x[[1, 2]] = [[10, 11, 12], [13, 14, 15]]\n>>> x\narray([[ 0,  1,  2],\n       [10, 11, 12],\n       [13, 14, 15]])\n>>> y\narray([[3, 4, 5],\n       [6, 7, 8]])"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "It must be noted here that during the assignment of "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "x[[1, 2]]"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " no view or copy is created as the assignment happens in-place."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "level": 1,
      "title": "Indexing operations"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "The "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "numpy.reshape"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " function creates a view where possible or a copy otherwise. In most cases, the strides can be modified to reshape the array with a view. However, in some cases where the array becomes non-contiguous (perhaps after a "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    ".ndarray.transpose"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " operation), the reshaping cannot be done by modifying strides and requires a copy. In these cases, we can raise an error by assigning the new shape to the shape attribute of the array. For example:      "
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": ">>> x = np.ones((2, 3))\n>>> y = x.T  # makes the array non-contiguous\n>>> y\narray([[1., 1.],\n       [1., 1.],\n       [1., 1.]])\n>>> z = y.view()\n>>> z.shape = 6\nTraceback (most recent call last):\n   ...\nAttributeError: Incompatible shape for in-place modification. Use\n`.reshape()` to make a copy with the desired shape."
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Taking the example of another operation, "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    ".ravel"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " returns a contiguous flattened view of the array wherever possible. On the other hand, "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    ".ndarray.flatten"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " always returns a flattened copy of the array. However, to guarantee a view in most cases, "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "x.reshape(-1)"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " may be preferable."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "level": 1,
      "title": "Other operations"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "The "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "base <.ndarray.base>"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " attribute of the ndarray makes it easy to tell if an array is a view or a copy. The base attribute of a view returns the original array while it returns "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "None"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " for a copy."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": ">>> x = np.arange(9)\n>>> x\narray([0, 1, 2, 3, 4, 5, 6, 7, 8])\n>>> y = x.reshape(3, 3)\n>>> y\narray([[0, 1, 2],\n       [3, 4, 5],\n       [6, 7, 8]])\n>>> y.base  # .reshape() creates a view\narray([0, 1, 2, 3, 4, 5, 6, 7, 8])\n>>> z = y[[2, 1]]\n>>> z\narray([[6, 7, 8],\n       [3, 4, 5]])\n>>> z.base is None  # advanced indexing creates a copy\nTrue"
                },
                "type": "BlockVerbatim"
              }
            ]
          },
          "type": "BlockQuote"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Note that the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "base"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " attribute should not be used to determine if an ndarray object is "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "new"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": "; only if it is a view or a copy of another ndarray."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "level": 1,
      "title": "How to tell if the array is a view or a copy"
    }
  ],
  "content": {},
  "example_section_data": {
    "children": [],
    "level": 0,
    "title": null
  },
  "item_file": null,
  "item_line": null,
  "item_type": null,
  "ordered_sections": [],
  "references": null,
  "see_also": [],
  "signature": {
    "value": null
  }
}