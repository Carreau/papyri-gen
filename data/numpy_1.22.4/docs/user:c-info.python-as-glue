{
  "aliases": [],
  "arbitrary": [
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Many people like to say that Python is a fantastic glue language. Hopefully, this Chapter will convince you that this is true. The first adopters of Python for science were typically people who used it to glue together large application codes running on super-computers. Not only was it much nicer to code in Python than in a shell script or Perl, in addition, the ability to easily extend Python made it relatively easy to create new classes and types specifically adapted to the problems being solved. From the interactions of these early contributors, Numeric emerged as an array-like object that could be used to pass data between these applications."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "As Numeric has matured and developed into NumPy, people have been able to write more code directly in NumPy. Often this code is fast-enough for production use, but there are still times that there is a need to access compiled code. Either to get that last bit of efficiency out of the algorithm or to make it easier to access widely-available codes written in C/C++ or Fortran."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "This chapter will review many of the tools that are available for the purpose of accessing code written in other compiled languages. There are many resources available for learning to call other compiled libraries from Python and the purpose of this Chapter is not to make you an expert. The main goal is to make you aware of some of the possibilities so that you will know what to \"Google\" in order to learn more."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": "Using Python as glue"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "While Python is a great language and a pleasure to code in, its dynamic nature results in overhead that can cause some code ( "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "i.e."
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": " raw computations inside of for loops) to be up 10-100 times slower than equivalent code written in a static compiled language. In addition, it can cause memory usage to be larger than necessary as temporary arrays are created and destroyed during computation. For many types of computing needs, the extra slow-down and memory consumption can often not be spared (at least for time- or memory- critical portions of your code). Therefore one of the most common needs is to call out from Python code to a fast, machine-code routine (e.g. compiled using C/C++ or Fortran). The fact that this is relatively easy to do is a big reason why Python is such an excellent high-level language for scientific and engineering programming."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Their are two basic approaches to calling compiled code: writing an extension module that is then imported to Python using the import command, or calling a shared-library subroutine directly from Python using the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "target": "https://docs.python.org/3/library/ctypes.html",
                  "value": "ctypes"
                },
                "type": "ExternalLink"
              },
              {
                "data": {
                  "value": " module.  Writing an extension module is the most common method."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "children": [
                    {
                      "data": {
                        "value": "Calling C-code from Python can result in Python crashes if you are not careful. None of the approaches in this chapter are immune. You have to know something about the way data is handled by both NumPy and by the third-party library being used."
                      },
                      "type": "Words"
                    }
                  ]
                },
                "type": "Paragraph"
              }
            ],
            "kind": "warning",
            "title": ""
          },
          "type": "Admonition"
        }
      ],
      "level": 1,
      "target": null,
      "title": "Calling other compiled libraries from Python"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Extension modules were discussed in "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "writing-an-extension"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ". The most basic way to interface with compiled code is to write an extension module and construct a module method that calls the compiled code. For improved readability, your method should take advantage of the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "PyArg_ParseTuple"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " call to convert between Python objects and C data-types. For standard C data-types there is probably already a built-in converter. For others you may need  to write your own converter and use the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "\"O&\""
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " format string which allows you to specify a function that will be used to perform the conversion from the Python object to whatever C-structures are needed."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Once the conversions to the appropriate C-structures and C data-types have been performed, the next step in the wrapper is to call the underlying function. This is straightforward if the underlying function is in C or C++. However, in order to call Fortran code you must be familiar with how Fortran subroutines are called from C/C++ using your compiler and platform. This can vary somewhat platforms and compilers (which is another reason f2py makes life much simpler for interfacing Fortran code) but generally involves underscore mangling of the name and the fact that all variables are passed by reference (i.e. all arguments are pointers)."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "The advantage of the hand-generated wrapper is that you have complete control over how the C-library gets used and called which can lead to a lean and tight interface with minimal over-head. The disadvantage is that you have to write, debug, and maintain C-code, although most of it can be adapted using the time-honored technique of \"cutting-pasting-and-modifying\" from other extension modules. Because, the procedure of calling out to additional C-code is fairly regimented, code-generation procedures have been developed to make this process easier. One of these code-generation techniques is distributed with NumPy and allows easy integration with Fortran and (simple) C code. This package, f2py, will be covered briefly in the next section."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "level": 1,
      "target": null,
      "title": "Hand-generated wrappers"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "F2py allows you to automatically construct an extension module that interfaces to routines in Fortran 77/90/95 code. It has the ability to parse Fortran 77/90/95 code and automatically generate Python signatures for the subroutines it encounters, or you can guide how the subroutine interfaces with Python by constructing an interface-definition-file (or modifying the f2py-produced one)."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "See the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "F2PY documentation <f2py>"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " for more information and examples."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "The f2py method of linking compiled code is currently the most sophisticated and integrated approach. It allows clean separation of Python with compiled code while still allowing for separate distribution of the extension module. The only draw-back is that it requires the existence of a Fortran compiler in order for a user to install the code. However, with the existence of the free-compilers g77, gfortran, and g95, as well as high-quality commercial compilers, this restriction is not particularly onerous. In our opinion, Fortran is still the easiest way to write fast and clear code for scientific computing. It handles complex numbers, and multi-dimensional indexing in the most straightforward way. Be aware, however, that some Fortran compilers will not be able to optimize code as well as good hand- written C-code."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "argument": "",
            "content": "single: f2py",
            "name": "index",
            "options": []
          },
          "type": "BlockDirective"
        }
      ],
      "level": 1,
      "target": null,
      "title": "f2py"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "target": "http://cython.org",
                  "value": "Cython"
                },
                "type": "ExternalLink"
              },
              {
                "data": {
                  "value": " is a compiler for a Python dialect that adds (optional) static typing for speed, and allows mixing C or C++ code into your modules. It produces C or C++ extensions that can be compiled and imported in Python code."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "If you are writing an extension module that will include quite a bit of your own algorithmic code as well, then Cython is a good match. Among its features is the ability to easily and quickly work with multidimensional arrays."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "argument": "",
            "content": "single: cython",
            "name": "index",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Notice that Cython is an extension-module generator only. Unlike f2py, it includes no automatic facility for compiling and linking the extension module (which must be done in the usual fashion). It does provide a modified distutils class called "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "build_ext"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " which lets you build an extension module from a "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    ".pyx"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " source. Thus, you could write in a "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "setup.py"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " file:"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "argument": "python",
            "content": "from Cython.Distutils import build_ext\nfrom distutils.extension import Extension\nfrom distutils.core import setup\nimport numpy\n\nsetup(name='mine', description='Nothing',\n      ext_modules=[Extension('filter', ['filter.pyx'],\n                             include_dirs=[numpy.get_include()])],\n      cmdclass = {'build_ext':build_ext})",
            "name": "code-block",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Adding the NumPy include directory is, of course, only necessary if you are using NumPy arrays in the extension module (which is what we assume you are using Cython for). The distutils extensions in NumPy also include support for automatically producing the extension-module and linking it from a "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    ".pyx"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " file. It works so that if the user does not have Cython installed, then it looks for a file with the same file-name but a "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    ".c"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " extension which it then uses instead of trying to produce the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    ".c"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " file again."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "If you just use Cython to compile a standard Python module, then you will get a C extension module that typically runs a bit faster than the equivalent Python module. Further speed increases can be gained by using the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "cdef"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " keyword to statically define C variables."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Let's look at two examples we've seen before to see how they might be implemented using Cython. These examples were compiled into extension modules using Cython 0.21.1."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "level": 1,
      "target": null,
      "title": "Cython"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Here is part of a Cython module named "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "add.pyx"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " which implements the complex addition functions we previously implemented using f2py:"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "argument": "cython",
            "content": "cimport cython\ncimport numpy as np\nimport numpy as np\n\n# We need to initialize NumPy.\nnp.import_array()\n\n#@cython.boundscheck(False)\ndef zadd(in1, in2):\n    cdef double complex[:] a = in1.ravel()\n    cdef double complex[:] b = in2.ravel()\n\n    out = np.empty(a.shape[0], np.complex64)\n    cdef double complex[:] c = out.ravel()\n\n    for i in range(c.shape[0]):\n        c[i].real = a[i].real + b[i].real\n        c[i].imag = a[i].imag + b[i].imag\n\n    return out",
            "name": "code-block",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "This module shows use of the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "cimport"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " statement to load the definitions from the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "numpy.pxd"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " header that ships with Cython. It looks like NumPy is imported twice; "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "cimport"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " only makes the NumPy C-API available, while the regular "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "import"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " causes a Python-style import at runtime and makes it possible to call into the familiar NumPy Python API."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "The example also demonstrates Cython's \"typed memoryviews\", which are like NumPy arrays at the C level, in the sense that they are shaped and strided arrays that know their own extent (unlike a C array addressed through a bare pointer). The syntax "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "double complex[:]"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " denotes a one-dimensional array (vector) of doubles, with arbitrary strides. A contiguous array of ints would be "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "int[::1]"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", while a matrix of floats would be "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "float[:, :]"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": "."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Shown commented is the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "cython.boundscheck"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " decorator, which turns bounds-checking for memory view accesses on or off on a per-function basis. We can use this to further speed up our code, at the expense of safety (or a manual check prior to entering the loop)."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Other than the view syntax, the function is immediately readable to a Python programmer. Static typing of the variable "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "i"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " is implicit. Instead of the view syntax, we could also have used Cython's special NumPy array syntax, but the view syntax is preferred."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "Complex addition in Cython"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "The two-dimensional example we created using Fortran is just as easy to write in Cython:"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "argument": "cython",
            "content": "cimport numpy as np\nimport numpy as np\n\nnp.import_array()\n\ndef filter(img):\n    cdef double[:, :] a = np.asarray(img, dtype=np.double)\n    out = np.zeros(img.shape, dtype=np.double)\n    cdef double[:, ::1] b = out\n\n    cdef np.npy_intp i, j\n\n    for i in range(1, a.shape[0] - 1):\n        for j in range(1, a.shape[1] - 1):\n            b[i, j] = (a[i, j]\n                       + .5 * (  a[i-1, j] + a[i+1, j]\n                               + a[i, j-1] + a[i, j+1])\n                       + .25 * (  a[i-1, j-1] + a[i-1, j+1]\n                                + a[i+1, j-1] + a[i+1, j+1]))\n\n    return out",
            "name": "code-block",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "This 2-d averaging filter runs quickly because the loop is in C and the pointer computations are done only as needed. If the code above is compiled as a module "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "image"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", then a 2-d image, "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "img"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", can be filtered using this code very quickly using:"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "argument": "python",
            "content": "import image\nout = image.filter(img)",
            "name": "code-block",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Regarding the code, two things are of note: firstly, it is impossible to return a memory view to Python. Instead, a NumPy array "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "out"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " is first created, and then a view "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "b"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " onto this array is used for the computation. Secondly, the view "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "b"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " is typed "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "double[:, ::1]"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ". This means 2-d array with contiguous rows, i.e., C matrix order. Specifying the order explicitly can speed up some algorithms since they can skip stride computations."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "Image filter in Cython"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Cython is the extension mechanism of choice for several scientific Python libraries, including Scipy, Pandas, SAGE, scikit-image and scikit-learn, as well as the XML processing library LXML. The language and compiler are well-maintained."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "There are several disadvantages of using Cython:"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "When coding custom algorithms, and sometimes when wrapping existing C    libraries, some familiarity with C is required. In particular, when using    C memory management ("
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "malloc"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " and friends), it's easy to introduce    memory leaks. However, just compiling a Python module renamed to "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              ".pyx"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": "    can already speed it up, and adding a few type declarations can give    dramatic speedups in some code."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "It is easy to lose a clean separation between Python and C which makes    re-using your C-code for other non-Python-related projects more    difficult."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "The C-code generated by Cython is hard to read and modify (and typically    compiles with annoying but harmless warnings)."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              }
            ]
          },
          "type": "EnumeratedList"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "One big advantage of Cython-generated extension modules is that they are easy to distribute. In summary, Cython is a very capable tool for either gluing C code or generating an extension module quickly and should not be over-looked. It is especially useful for people that can't or won't write C or Fortran code."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "argument": "",
            "content": "single: cython",
            "name": "index",
            "options": []
          },
          "type": "BlockDirective"
        }
      ],
      "level": 2,
      "target": null,
      "title": "Conclusion"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "target": "https://docs.python.org/3/library/ctypes.html",
                  "value": "Ctypes"
                },
                "type": "ExternalLink"
              },
              {
                "data": {
                  "value": " is a Python extension module, included in the stdlib, that allows you to call an arbitrary function in a shared library directly from Python. This approach allows you to interface with C-code directly from Python. This opens up an enormous number of libraries for use from Python. The drawback, however, is that coding mistakes can lead to ugly program crashes very easily (just as can happen in C) because there is little type or bounds checking done on the parameters. This is especially true when array data is passed in as a pointer to a raw memory location. The responsibility is then on you that the subroutine will not access memory outside the actual array area. But, if you don't mind living a little dangerously ctypes can be an effective tool for quickly taking advantage of a large shared library (or writing extended functionality in your own shared library)."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "argument": "",
            "content": "single: ctypes",
            "name": "index",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Because the ctypes approach exposes a raw interface to the compiled code it is not always tolerant of user mistakes. Robust use of the ctypes module typically involves an additional layer of Python code in order to check the data types and array bounds of objects passed to the underlying subroutine. This additional layer of checking (not to mention the conversion from ctypes objects to C-data-types that ctypes itself performs), will make the interface slower than a hand-written extension-module interface. However, this overhead should be negligible if the C-routine being called is doing any significant amount of work. If you are a great Python programmer with weak C skills, ctypes is an easy way to write a useful interface to a (shared) library of compiled code."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "To use ctypes you must"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Have a shared library."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Load the shared library."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Convert the Python objects to ctypes-understood arguments."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Call the function from the library with the ctypes arguments."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              }
            ]
          },
          "type": "EnumeratedList"
        }
      ],
      "level": 1,
      "target": null,
      "title": "ctypes"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "There are several requirements for a shared library that can be used with ctypes that are platform specific. This guide assumes you have some familiarity with making a shared library on your system (or simply have a shared library available to you). Items to remember are:"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "A shared library must be compiled in a special way ( "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": {
                              "value": "e.g."
                            }
                          },
                          "type": "Emph"
                        },
                        {
                          "data": {
                            "value": " using   the "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "-shared"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " flag with gcc)."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "On some platforms ("
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": {
                              "value": "e.g."
                            }
                          },
                          "type": "Emph"
                        },
                        {
                          "data": {
                            "value": " Windows), a shared library requires a   .def file that specifies the functions to be exported. For example a   mylib.def file might contain:        "
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  },
                  {
                    "data": {
                      "value": "LIBRARY mylib.dll\nEXPORTS\ncool_function1\ncool_function2"
                    },
                    "type": "BlockVerbatim"
                  },
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Alternatively, you may be able to use the storage-class specifier   "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "__declspec(dllexport)"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " in the C-definition of the function to avoid   the need for this "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              ".def"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " file."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              }
            ]
          },
          "type": "BulletList"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "There is no standard way in Python distutils to create a standard shared library (an extension module is a \"special\" shared library Python understands) in a cross-platform manner. Thus, a big disadvantage of ctypes at the time of writing this book is that it is difficult to distribute in a cross-platform manner a Python extension that uses ctypes and includes your own code which should be compiled as a shared library on the users system."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "Having a shared library"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "A simple, but robust way to load the shared library is to get the absolute path name and load it using the cdll object of ctypes:"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "argument": "python",
            "content": "lib = ctypes.cdll[<full_path_name>]",
            "name": "code-block",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "However, on Windows accessing an attribute of the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "cdll"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " method will load the first DLL by that name found in the current directory or on the PATH. Loading the absolute path name requires a little finesse for cross-platform work since the extension of shared libraries varies. There is a "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "ctypes.util.find_library"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " utility available that can simplify the process of finding the library to load but it is not foolproof. Complicating matters, different platforms have different default extensions used by shared libraries (e.g. .dll -- Windows, .so -- Linux, .dylib -- Mac OS X). This must also be taken into account if you are using ctypes to wrap code that needs to work on several platforms."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "NumPy provides a convenience function called "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "ctypeslib.load_library"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " (name, path). This function takes the name of the shared library (including any prefix like 'lib' but excluding the extension) and a path where the shared library can be located. It returns a ctypes library object or raises an "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "OSError"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " if the library cannot be found or raises an "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "ImportError"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " if the ctypes module is not available. (Windows users: the ctypes library object loaded using "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "load_library"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " is always loaded assuming cdecl calling convention. See the ctypes documentation under "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "ctypes.windll"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " and/or "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "ctypes.oledll"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " for ways to load libraries under other calling conventions)."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "The functions in the shared library are available as attributes of the ctypes library object (returned from "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "ctypeslib.load_library"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ") or as items using "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "lib['func_name']"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " syntax. The latter method for retrieving a function name is particularly useful if the function name contains characters that are not allowable in Python variable names."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "Loading the shared library"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Python ints/longs, strings, and unicode objects are automatically converted as needed to equivalent ctypes arguments The None object is also converted automatically to a NULL pointer. All other Python objects must be converted to ctypes-specific types. There are two ways around this restriction that allow ctypes to integrate with other objects."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Don't set the argtypes attribute of the function object and define an    "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "_as_parameter_"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " method for the object you want to pass in. The    "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "_as_parameter_"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " method must return a Python int which will be passed    directly to the function."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Set the argtypes attribute to a list whose entries contain objects    with a classmethod named from_param that knows how to convert your    object to an object that ctypes can understand (an int/long, string,    unicode, or object with the "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "_as_parameter_"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " attribute)."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              }
            ]
          },
          "type": "EnumeratedList"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "NumPy uses both methods with a preference for the second method because it can be safer. The ctypes attribute of the ndarray returns an object that has an "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "_as_parameter_"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " attribute which returns an integer representing the address of the ndarray to which it is associated. As a result, one can pass this ctypes attribute object directly to a function expecting a pointer to the data in your ndarray. The caller must be sure that the ndarray object is of the correct type, shape, and has the correct flags set or risk nasty crashes if the data-pointer to inappropriate arrays are passed in."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "To implement the second method, NumPy provides the class-factory function "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "ndpointer"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " in the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "numpy.ctypeslib"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " module. This class-factory function produces an appropriate class that can be placed in an argtypes attribute entry of a ctypes function. The class will contain a from_param method which ctypes will use to convert any ndarray passed in to the function to a ctypes-recognized object. In the process, the conversion will perform checking on any properties of the ndarray that were specified by the user in the call to "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "ndpointer"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ". Aspects of the ndarray that can be checked include the data-type, the number-of-dimensions, the shape, and/or the state of the flags on any array passed. The return value of the from_param method is the ctypes attribute of the array which (because it contains the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "_as_parameter_"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " attribute pointing to the array data area) can be used by ctypes directly."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "The ctypes attribute of an ndarray is also endowed with additional attributes that may be convenient when passing additional information about the array into a ctypes function. The attributes "
                },
                "type": "Words"
              },
              {
                "data": {
                  "content": {
                    "value": "data"
                  }
                },
                "type": "Strong"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "content": {
                    "value": "shape"
                  }
                },
                "type": "Strong"
              },
              {
                "data": {
                  "value": ", and "
                },
                "type": "Words"
              },
              {
                "data": {
                  "content": {
                    "value": "strides"
                  }
                },
                "type": "Strong"
              },
              {
                "data": {
                  "value": " can provide ctypes compatible types corresponding to the data-area, the shape, and the strides of the array. The data attribute returns a "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "c_void_p"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " representing a pointer to the data area. The shape and strides attributes each return an array of ctypes integers (or None representing a NULL pointer, if a 0-d array). The base ctype of the array is a ctype integer of the same size as a pointer on the platform. There are also methods "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "data_as({ctype})"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "shape_as(<base ctype>)"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", and "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "strides_as(<base\nctype>)"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ". These return the data as a ctype object of your choice and the shape/strides arrays using an underlying base type of your choice. For convenience, the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "ctypeslib"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " module also contains "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "c_intp"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " as a ctypes integer data-type whose size is the same as the size of "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "c_void_p"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " on the platform (its value is None if ctypes is not installed)."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "Converting arguments"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "The function is accessed as an attribute of or an item from the loaded shared-library. Thus, if "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "./mylib.so"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " has a function named "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "cool_function1"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", it may be accessed either as:"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "argument": "python",
            "content": "lib = numpy.ctypeslib.load_library('mylib','.')\nfunc1 = lib.cool_function1  # or equivalently\nfunc1 = lib['cool_function1']",
            "name": "code-block",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "In ctypes, the return-value of a function is set to be 'int' by default. This behavior can be changed by setting the restype attribute of the function. Use None for the restype if the function has no return value ('void'):"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "argument": "python",
            "content": "func1.restype = None",
            "name": "code-block",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "As previously discussed, you can also set the argtypes attribute of the function in order to have ctypes check the types of the input arguments when the function is called. Use the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "ndpointer"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " factory function to generate a ready-made class for data-type, shape, and flags checking on your new function. The "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "ndpointer"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " function has the signature"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "argument": "ndpointer(dtype=None, ndim=None, shape=None, flags=None)",
            "content": "Keyword arguments with the value ``None`` are not checked.\nSpecifying a keyword enforces checking of that aspect of the\nndarray on conversion to a ctypes-compatible object. The dtype\nkeyword can be any object understood as a data-type object. The\nndim keyword should be an integer, and the shape keyword should be\nan integer or a sequence of integers. The flags keyword specifies\nthe minimal flags that are required on any array passed in. This\ncan be specified as a string of comma separated requirements, an\ninteger indicating the requirement bits OR'd together, or a flags\nobject returned from the flags attribute of an array with the\nnecessary requirements.",
            "name": "function",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Using an ndpointer class in the argtypes method can make it significantly safer to call a C function using ctypes and the data- area of an ndarray. You may still want to wrap the function in an additional Python wrapper to make it user-friendly (hiding some obvious arguments and making some arguments output arguments). In this process, the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "requires"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " function in NumPy may be useful to return the right kind of array from a given input."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "Calling the function"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "In this example, we will demonstrate how the addition function and the filter function implemented previously using the other approaches can be implemented using ctypes. First, the C code which implements the algorithms contains the functions "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "zadd"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "dadd"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "sadd"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "cadd"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", and "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "dfilter2d"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ". The "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "zadd"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " function is:"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "argument": "c",
            "content": "/* Add arrays of contiguous data */\ntypedef struct {double real; double imag;} cdouble;\ntypedef struct {float real; float imag;} cfloat;\nvoid zadd(cdouble *a, cdouble *b, cdouble *c, long n)\n{\n    while (n--) {\n        c->real = a->real + b->real;\n        c->imag = a->imag + b->imag;\n        a++; b++; c++;\n    }\n}",
            "name": "code-block",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "with similar code for "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "cadd"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "dadd"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", and "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "sadd"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " that handles complex float, double, and float data-types, respectively:"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "argument": "c",
            "content": "void cadd(cfloat *a, cfloat *b, cfloat *c, long n)\n{\n        while (n--) {\n                c->real = a->real + b->real;\n                c->imag = a->imag + b->imag;\n                a++; b++; c++;\n        }\n}\nvoid dadd(double *a, double *b, double *c, long n)\n{\n        while (n--) {\n                *c++ = *a++ + *b++;\n        }\n}\nvoid sadd(float *a, float *b, float *c, long n)\n{\n        while (n--) {\n                *c++ = *a++ + *b++;\n        }\n}",
            "name": "code-block",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "The "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "code.c"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " file also contains the function "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "dfilter2d"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ":"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "argument": "c",
            "content": "/*\n * Assumes b is contiguous and has strides that are multiples of\n * sizeof(double)\n */\nvoid\ndfilter2d(double *a, double *b, ssize_t *astrides, ssize_t *dims)\n{\n    ssize_t i, j, M, N, S0, S1;\n    ssize_t r, c, rm1, rp1, cp1, cm1;\n\n    M = dims[0]; N = dims[1];\n    S0 = astrides[0]/sizeof(double);\n    S1 = astrides[1]/sizeof(double);\n    for (i = 1; i < M - 1; i++) {\n        r = i*S0;\n        rp1 = r + S0;\n        rm1 = r - S0;\n        for (j = 1; j < N - 1; j++) {\n            c = j*S1;\n            cp1 = j + S1;\n            cm1 = j - S1;\n            b[i*N + j] = a[r + c] +\n                (a[rp1 + c] + a[rm1 + c] +\n                 a[r + cp1] + a[r + cm1])*0.5 +\n                (a[rp1 + cp1] + a[rp1 + cm1] +\n                 a[rm1 + cp1] + a[rm1 + cp1])*0.25;\n        }\n    }\n}",
            "name": "code-block",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "A possible advantage this code has over the Fortran-equivalent code is that it takes arbitrarily strided (i.e. non-contiguous arrays) and may also run faster depending on the optimization capability of your compiler. But, it is an obviously more complicated than the simple code in "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "filter.f"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ". This code must be compiled into a shared library. On my Linux system this is accomplished using:      "
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": "gcc -o code.so -shared code.c"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Which creates a shared_library named code.so in the current directory. On Windows don't forget to either add "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "__declspec(dllexport)"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " in front of void on the line preceding each function definition, or write a "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "code.def"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " file that lists the names of the functions to be exported."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "A suitable Python interface to this shared library should be constructed. To do this create a file named interface.py with the following lines at the top:"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "argument": "python",
            "content": "__all__ = ['add', 'filter2d']\n\nimport numpy as np\nimport os\n\n_path = os.path.dirname('__file__')\nlib = np.ctypeslib.load_library('code', _path)\n_typedict = {'zadd' : complex, 'sadd' : np.single,\n             'cadd' : np.csingle, 'dadd' : float}\nfor name in _typedict.keys():\n    val = getattr(lib, name)\n    val.restype = None\n    _type = _typedict[name]\n    val.argtypes = [np.ctypeslib.ndpointer(_type,\n                      flags='aligned, contiguous'),\n                    np.ctypeslib.ndpointer(_type,\n                      flags='aligned, contiguous'),\n                    np.ctypeslib.ndpointer(_type,\n                      flags='aligned, contiguous,'\\\n                            'writeable'),\n                    np.ctypeslib.c_intp]",
            "name": "code-block",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "This code loads the shared library named "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "code.{ext}"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " located in the same path as this file. It then adds a return type of void to the functions contained in the library. It also adds argument checking to the functions in the library so that ndarrays can be passed as the first three arguments along with an integer (large enough to hold a pointer on the platform) as the fourth argument."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Setting up the filtering function is similar and allows the filtering function to be called with ndarray arguments as the first two arguments and with pointers to integers (large enough to handle the strides and shape of an ndarray) as the last two arguments.:"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "argument": "python",
            "content": "lib.dfilter2d.restype=None\nlib.dfilter2d.argtypes = [np.ctypeslib.ndpointer(float, ndim=2,\n                                       flags='aligned'),\n                          np.ctypeslib.ndpointer(float, ndim=2,\n                                 flags='aligned, contiguous,'\\\n                                       'writeable'),\n                          ctypes.POINTER(np.ctypeslib.c_intp),\n                          ctypes.POINTER(np.ctypeslib.c_intp)]",
            "name": "code-block",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Next, define a simple selection function that chooses which addition function to call in the shared library based on the data-type:"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "argument": "python",
            "content": "def select(dtype):\n    if dtype.char in ['?bBhHf']:\n        return lib.sadd, single\n    elif dtype.char in ['F']:\n        return lib.cadd, csingle\n    elif dtype.char in ['DG']:\n        return lib.zadd, complex\n    else:\n        return lib.dadd, float\n    return func, ntype",
            "name": "code-block",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Finally, the two functions to be exported by the interface can be written simply as:"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "argument": "python",
            "content": "def add(a, b):\n    requires = ['CONTIGUOUS', 'ALIGNED']\n    a = np.asanyarray(a)\n    func, dtype = select(a.dtype)\n    a = np.require(a, dtype, requires)\n    b = np.require(b, dtype, requires)\n    c = np.empty_like(a)\n    func(a,b,c,a.size)\n    return c",
            "name": "code-block",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "and:"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "argument": "python",
            "content": "def filter2d(a):\n    a = np.require(a, float, ['ALIGNED'])\n    b = np.zeros_like(a)\n    lib.dfilter2d(a, b, a.ctypes.strides, a.ctypes.shape)\n    return b",
            "name": "code-block",
            "options": []
          },
          "type": "BlockDirective"
        }
      ],
      "level": 2,
      "target": null,
      "title": "Complete example"
    },
    {
      "children": [
        {
          "data": {
            "argument": "",
            "content": "single: ctypes",
            "name": "index",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Using ctypes is a powerful way to connect Python with arbitrary C-code. Its advantages for extending Python include"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "clean separation of C code from Python code"
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  },
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "children": [
                              {
                                "children": [
                                  {
                                    "data": {
                                      "children": [
                                        {
                                          "data": {
                                            "value": "no need to learn a new syntax except Python and C"
                                          },
                                          "type": "Words"
                                        }
                                      ]
                                    },
                                    "type": "Paragraph"
                                  }
                                ]
                              },
                              {
                                "children": [
                                  {
                                    "data": {
                                      "children": [
                                        {
                                          "data": {
                                            "value": "allows re-use of C code"
                                          },
                                          "type": "Words"
                                        }
                                      ]
                                    },
                                    "type": "Paragraph"
                                  }
                                ]
                              },
                              {
                                "children": [
                                  {
                                    "data": {
                                      "children": [
                                        {
                                          "data": {
                                            "value": "functionality in shared libraries written for other purposes can be       obtained with a simple Python wrapper and search for the library."
                                          },
                                          "type": "Words"
                                        }
                                      ]
                                    },
                                    "type": "Paragraph"
                                  }
                                ]
                              }
                            ]
                          },
                          "type": "BulletList"
                        }
                      ]
                    },
                    "type": "BlockQuote"
                  }
                ]
              },
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "easy integration with NumPy through the ctypes attribute"
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "full argument checking with the ndpointer class factory"
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              }
            ]
          },
          "type": "BulletList"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Its disadvantages include"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "It is difficult to distribute an extension module made using ctypes   because of a lack of support for building shared libraries in   distutils."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "You must have shared-libraries of your code (no static libraries)."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Very little support for C++ code and its different library-calling   conventions. You will probably need a C wrapper around C++ code to use   with ctypes (or just use Boost.Python instead)."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              }
            ]
          },
          "type": "BulletList"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Because of the difficulty in distributing an extension module made using ctypes, f2py and Cython are still the easiest ways to extend Python for package creation. However, ctypes is in some cases a useful alternative. This should bring more features to ctypes that should eliminate the difficulty in extending Python and distributing the extension using ctypes."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "Conclusion"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "These tools have been found useful by others using Python and so are included here. They are discussed separately because they are either older ways to do things now handled by f2py, Cython, or ctypes (SWIG, PyFort) or because of a lack of reasonable documentation (SIP, Boost). Links to these methods are not included since the most relevant can be found using Google or some other search engine, and any links provided here would be quickly dated. Do not assume that inclusion in this list means that the package deserves attention. Information about these packages are collected here because many people have found them useful and we'd like to give you as many options as possible for tackling the problem of easily integrating your code."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "level": 1,
      "target": null,
      "title": "Additional tools you may find useful"
    },
    {
      "children": [
        {
          "data": {
            "argument": "",
            "content": "single: swig",
            "name": "index",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Simplified Wrapper and Interface Generator (SWIG) is an old and fairly stable method for wrapping C/C++-libraries to a large variety of other languages. It does not specifically understand NumPy arrays but can be made usable with NumPy through the use of typemaps. There are some sample typemaps in the numpy/tools/swig directory under numpy.i together with an example module that makes use of them. SWIG excels at wrapping large C/C++ libraries because it can (almost) parse their headers and auto-produce an interface. Technically, you need to generate a "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    ".i"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " file that defines the interface. Often, however, this "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    ".i"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " file can be parts of the header itself. The interface usually needs a bit of tweaking to be very useful. This ability to parse C/C++ headers and auto-generate the interface still makes SWIG a useful approach to adding functionalilty from C/C++ into Python, despite the other methods that have emerged that are more targeted to Python. SWIG can actually target extensions for several languages, but the typemaps usually have to be language-specific. Nonetheless, with modifications to the Python-specific typemaps, SWIG can be used to interface a library with other languages such as Perl, Tcl, and Ruby."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "My experience with SWIG has been generally positive in that it is relatively easy to use and quite powerful. It has been used often before becoming more proficient at writing C-extensions. However, writing custom interfaces with SWIG is often troublesome because it must be done using the concept of typemaps which are not Python specific and are written in a C-like syntax. Therefore, other gluing strategies are preferred and SWIG would be probably considered only to wrap a very-large C/C++ library. Nonetheless, there are others who use SWIG quite happily."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "SWIG"
    },
    {
      "children": [
        {
          "data": {
            "argument": "",
            "content": "single: SIP",
            "name": "index",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "SIP is another tool for wrapping C/C++ libraries that is Python specific and appears to have very good support for C++. Riverbank Computing developed SIP in order to create Python bindings to the QT library. An interface file must be written to generate the binding, but the interface file looks a lot like a C/C++ header file. While SIP is not a full C++ parser, it understands quite a bit of C++ syntax as well as its own special directives that allow modification of how the Python binding is accomplished. It also allows the user to define mappings between Python types and C/C++ structures and classes."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "SIP"
    },
    {
      "children": [
        {
          "data": {
            "argument": "",
            "content": "single: Boost.Python",
            "name": "index",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Boost is a repository of C++ libraries and Boost.Python is one of those libraries which provides a concise interface for binding C++ classes and functions to Python. The amazing part of the Boost.Python approach is that it works entirely in pure C++ without introducing a new syntax. Many users of C++ report that Boost.Python makes it possible to combine the best of both worlds in a seamless fashion. Using Boost to wrap simple C-subroutines is usually over-kill. Its primary purpose is to make C++ classes available in Python. So, if you have a set of C++ classes that need to be integrated cleanly into Python, consider learning about and using Boost.Python."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "Boost Python"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "PyFort is a nice tool for wrapping Fortran and Fortran-like C-code into Python with support for Numeric arrays. It was written by Paul Dubois, a distinguished computer scientist and the very first maintainer of Numeric (now retired). It is worth mentioning in the hopes that somebody will update PyFort to work with NumPy arrays as well which now support either Fortran or C-style contiguous arrays."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "PyFort"
    }
  ],
  "content": {},
  "example_section_data": {
    "children": [],
    "level": 0,
    "target": null,
    "title": null
  },
  "item_file": null,
  "item_line": null,
  "item_type": null,
  "ordered_sections": [],
  "references": null,
  "see_also": [],
  "signature": {
    "value": null
  }
}