{
  "aliases": [
    "numpy.chararray"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "title": null
    },
    "Extended Summary": {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "children": [
                    {
                      "data": {
                        "value": "The "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "domain": null,
                        "role": null,
                        "value": "chararray"
                      },
                      "type": "Directive"
                    },
                    {
                      "data": {
                        "value": " class exists for backwards compatibility with Numarray, it is not recommended for new development. Starting from numpy 1.4, if one needs arrays of strings, it is recommended to use arrays of "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "domain": null,
                        "role": null,
                        "value": "dtype"
                      },
                      "type": "Directive"
                    },
                    {
                      "data": {
                        "value": " "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "domain": null,
                        "role": null,
                        "value": "object_"
                      },
                      "type": "Directive"
                    },
                    {
                      "data": {
                        "value": ", "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "domain": null,
                        "role": null,
                        "value": "string_"
                      },
                      "type": "Directive"
                    },
                    {
                      "data": {
                        "value": " or "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "domain": null,
                        "role": null,
                        "value": "unicode_"
                      },
                      "type": "Directive"
                    },
                    {
                      "data": {
                        "value": ", and use the free functions in the "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "domain": null,
                        "role": null,
                        "value": "numpy.char"
                      },
                      "type": "Directive"
                    },
                    {
                      "data": {
                        "value": " module for fast vectorized string operations."
                      },
                      "type": "Words"
                    }
                  ]
                },
                "type": "Paragraph"
              }
            ],
            "kind": "note",
            "title": ""
          },
          "type": "Admonition"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Versus a regular NumPy array of type "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "str"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " or "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "unicode"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": ", this class adds the following functionality:"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "children": [
                    {
                      "children": [
                        {
                          "data": {
                            "children": [
                              {
                                "data": {
                                  "value": "values automatically have whitespace removed from the end      when indexed"
                                },
                                "type": "Words"
                              }
                            ]
                          },
                          "type": "Paragraph"
                        }
                      ]
                    },
                    {
                      "children": [
                        {
                          "data": {
                            "children": [
                              {
                                "data": {
                                  "value": "comparison operators automatically remove whitespace from the      end when comparing values"
                                },
                                "type": "Words"
                              }
                            ]
                          },
                          "type": "Paragraph"
                        }
                      ]
                    },
                    {
                      "children": [
                        {
                          "data": {
                            "children": [
                              {
                                "data": {
                                  "value": "vectorized string operations are provided as methods      (e.g. "
                                },
                                "type": "Words"
                              },
                              {
                                "data": {
                                  "domain": null,
                                  "role": null,
                                  "value": ".endswith"
                                },
                                "type": "Directive"
                              },
                              {
                                "data": {
                                  "value": ") and infix operators (e.g. "
                                },
                                "type": "Words"
                              },
                              {
                                "data": {
                                  "value": [
                                    "\"+\", \"*\", \"%\""
                                  ]
                                },
                                "type": "Verbatim"
                              },
                              {
                                "data": {
                                  "value": ")"
                                },
                                "type": "Words"
                              }
                            ]
                          },
                          "type": "Paragraph"
                        }
                      ]
                    }
                  ]
                },
                "type": "EnumeratedList"
              }
            ]
          },
          "type": "BlockQuote"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "chararrays should be created using "
                },
                "type": "Words"
              },
              {
                "data": {
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "module",
                    "module": "numpy",
                    "path": "numpy.char.array",
                    "version": "1.22.4"
                  },
                  "value": "numpy.char.array"
                },
                "type": "Link"
              },
              {
                "data": {
                  "value": " or "
                },
                "type": "Words"
              },
              {
                "data": {
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "module",
                    "module": "numpy",
                    "path": "numpy.char.asarray",
                    "version": "1.22.4"
                  },
                  "value": "numpy.char.asarray"
                },
                "type": "Link"
              },
              {
                "data": {
                  "value": ", rather than this constructor directly."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "This constructor creates the array, using "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "buffer"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " (with "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "offset"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " and "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "strides"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": ") if it is not "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "None"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ". If "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "buffer"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " is "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "None"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", then constructs a new array with "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "strides"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " in \"C order\", unless both "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "len(shape) >= 2"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " and "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "order='F'"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", in which case "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "strides"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " is in \"Fortran order\"."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "level": 0,
      "title": null
    },
    "Methods": {
      "children": [
        {
          "data": {
            "children": [
              {
                "desc": [],
                "param": "astype",
                "type_": ""
              },
              {
                "desc": [],
                "param": "argsort",
                "type_": ""
              },
              {
                "desc": [],
                "param": "copy",
                "type_": ""
              },
              {
                "desc": [],
                "param": "count",
                "type_": ""
              },
              {
                "desc": [],
                "param": "decode",
                "type_": ""
              },
              {
                "desc": [],
                "param": "dump",
                "type_": ""
              },
              {
                "desc": [],
                "param": "dumps",
                "type_": ""
              },
              {
                "desc": [],
                "param": "encode",
                "type_": ""
              },
              {
                "desc": [],
                "param": "endswith",
                "type_": ""
              },
              {
                "desc": [],
                "param": "expandtabs",
                "type_": ""
              },
              {
                "desc": [],
                "param": "fill",
                "type_": ""
              },
              {
                "desc": [],
                "param": "find",
                "type_": ""
              },
              {
                "desc": [],
                "param": "flatten",
                "type_": ""
              },
              {
                "desc": [],
                "param": "getfield",
                "type_": ""
              },
              {
                "desc": [],
                "param": "index",
                "type_": ""
              },
              {
                "desc": [],
                "param": "isalnum",
                "type_": ""
              },
              {
                "desc": [],
                "param": "isalpha",
                "type_": ""
              },
              {
                "desc": [],
                "param": "isdecimal",
                "type_": ""
              },
              {
                "desc": [],
                "param": "isdigit",
                "type_": ""
              },
              {
                "desc": [],
                "param": "islower",
                "type_": ""
              },
              {
                "desc": [],
                "param": "isnumeric",
                "type_": ""
              },
              {
                "desc": [],
                "param": "isspace",
                "type_": ""
              },
              {
                "desc": [],
                "param": "istitle",
                "type_": ""
              },
              {
                "desc": [],
                "param": "isupper",
                "type_": ""
              },
              {
                "desc": [],
                "param": "item",
                "type_": ""
              },
              {
                "desc": [],
                "param": "join",
                "type_": ""
              },
              {
                "desc": [],
                "param": "ljust",
                "type_": ""
              },
              {
                "desc": [],
                "param": "lower",
                "type_": ""
              },
              {
                "desc": [],
                "param": "lstrip",
                "type_": ""
              },
              {
                "desc": [],
                "param": "nonzero",
                "type_": ""
              },
              {
                "desc": [],
                "param": "put",
                "type_": ""
              },
              {
                "desc": [],
                "param": "ravel",
                "type_": ""
              },
              {
                "desc": [],
                "param": "repeat",
                "type_": ""
              },
              {
                "desc": [],
                "param": "replace",
                "type_": ""
              },
              {
                "desc": [],
                "param": "reshape",
                "type_": ""
              },
              {
                "desc": [],
                "param": "resize",
                "type_": ""
              },
              {
                "desc": [],
                "param": "rfind",
                "type_": ""
              },
              {
                "desc": [],
                "param": "rindex",
                "type_": ""
              },
              {
                "desc": [],
                "param": "rjust",
                "type_": ""
              },
              {
                "desc": [],
                "param": "rsplit",
                "type_": ""
              },
              {
                "desc": [],
                "param": "rstrip",
                "type_": ""
              },
              {
                "desc": [],
                "param": "searchsorted",
                "type_": ""
              },
              {
                "desc": [],
                "param": "setfield",
                "type_": ""
              },
              {
                "desc": [],
                "param": "setflags",
                "type_": ""
              },
              {
                "desc": [],
                "param": "sort",
                "type_": ""
              },
              {
                "desc": [],
                "param": "split",
                "type_": ""
              },
              {
                "desc": [],
                "param": "splitlines",
                "type_": ""
              },
              {
                "desc": [],
                "param": "squeeze",
                "type_": ""
              },
              {
                "desc": [],
                "param": "startswith",
                "type_": ""
              },
              {
                "desc": [],
                "param": "strip",
                "type_": ""
              },
              {
                "desc": [],
                "param": "swapaxes",
                "type_": ""
              },
              {
                "desc": [],
                "param": "swapcase",
                "type_": ""
              },
              {
                "desc": [],
                "param": "take",
                "type_": ""
              },
              {
                "desc": [],
                "param": "title",
                "type_": ""
              },
              {
                "desc": [],
                "param": "tofile",
                "type_": ""
              },
              {
                "desc": [],
                "param": "tolist",
                "type_": ""
              },
              {
                "desc": [],
                "param": "tostring",
                "type_": ""
              },
              {
                "desc": [],
                "param": "translate",
                "type_": ""
              },
              {
                "desc": [],
                "param": "transpose",
                "type_": ""
              },
              {
                "desc": [],
                "param": "upper",
                "type_": ""
              },
              {
                "desc": [],
                "param": "view",
                "type_": ""
              },
              {
                "desc": [],
                "param": "zfill",
                "type_": ""
              }
            ]
          },
          "type": "Parameters"
        }
      ],
      "level": 0,
      "title": null
    },
    "Notes": {
      "children": [],
      "level": 0,
      "title": null
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "title": null
    },
    "Parameters": {
      "children": [
        {
          "data": {
            "children": [
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Shape of the array."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "shape",
                "type_": "tuple"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Length of each array element, in number of characters. Default is 1."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "itemsize",
                "type_": "int, optional"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Are the array elements of type unicode (True) or string (False). Default is False."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "unicode",
                "type_": "bool, optional"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Memory address of the start of the array data.  Default is None, in which case a new array is created."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "buffer",
                "type_": "object exposing the buffer interface or str, optional"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Fixed stride displacement from the beginning of an axis? Default is 0. Needs to be >=0."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "offset",
                "type_": "int, optional"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Strides for the array (see "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "domain": null,
                            "role": null,
                            "value": "ndarray.strides"
                          },
                          "type": "Directive"
                        },
                        {
                          "data": {
                            "value": " for full description). Default is None."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "strides",
                "type_": "array_like of ints, optional"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "The order in which the array data is stored in memory: 'C' -> \"row major\" order (the default), 'F' -> \"column major\" (Fortran) order."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "order",
                "type_": "{'C', 'F'}, optional"
              }
            ]
          },
          "type": "Parameters"
        }
      ],
      "level": 0,
      "title": null
    },
    "Raises": {
      "children": [],
      "level": 0,
      "title": null
    },
    "Receives": {
      "children": [],
      "level": 0,
      "title": null
    },
    "Returns": {
      "children": [],
      "level": 0,
      "title": null
    },
    "Summary": {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Provides a convenient view on arrays of string and unicode values."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "level": 0,
      "title": null
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "title": null
    },
    "Warns": {
      "children": [],
      "level": 0,
      "title": null
    },
    "Yields": {
      "children": [],
      "level": 0,
      "title": null
    }
  },
  "example_section_data": {
    "children": [
      {
        "data": {
          "ce_status": "execed",
          "entries": [
            {
              "link": {
                "data": "charar",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": " ",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": "=",
                "type": "str"
              },
              "type": "o"
            },
            {
              "link": {
                "data": " ",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": "np",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": ".",
                "type": "str"
              },
              "type": "o"
            },
            {
              "link": {
                "data": "chararray",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": "(",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": "(",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": "3",
                "type": "str"
              },
              "type": "mi"
            },
            {
              "link": {
                "data": ",",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": " ",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": "3",
                "type": "str"
              },
              "type": "mi"
            },
            {
              "link": {
                "data": ")",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": ")",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": "\n",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": "charar",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": "[",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": ":",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": "]",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": " ",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": "=",
                "type": "str"
              },
              "type": "o"
            },
            {
              "link": {
                "data": " ",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": "'",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "a",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "'",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "\n",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": "charar",
                "type": "str"
              },
              "type": ""
            }
          ],
          "out": "chararray([[b'a', b'a', b'a'],\n           [b'a', b'a', b'a'],\n           [b'a', b'a', b'a']], dtype='|S1')"
        },
        "type": "Code2"
      },
      {
        "data": {
          "ce_status": "execed",
          "entries": [
            {
              "link": {
                "data": "charar",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": " ",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": "=",
                "type": "str"
              },
              "type": "o"
            },
            {
              "link": {
                "data": " ",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": "np",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": ".",
                "type": "str"
              },
              "type": "o"
            },
            {
              "link": {
                "data": "chararray",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": "(",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": "charar",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": ".",
                "type": "str"
              },
              "type": "o"
            },
            {
              "link": {
                "data": "shape",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": ",",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": " ",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": "itemsize",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": "=",
                "type": "str"
              },
              "type": "o"
            },
            {
              "link": {
                "data": "5",
                "type": "str"
              },
              "type": "mi"
            },
            {
              "link": {
                "data": ")",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": "\n",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": "charar",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": "[",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": ":",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": "]",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": " ",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": "=",
                "type": "str"
              },
              "type": "o"
            },
            {
              "link": {
                "data": " ",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": "'",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "abc",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "'",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "\n",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": "charar",
                "type": "str"
              },
              "type": ""
            }
          ],
          "out": "chararray([[b'abc', b'abc', b'abc'],\n           [b'abc', b'abc', b'abc'],\n           [b'abc', b'abc', b'abc']], dtype='|S5')"
        },
        "type": "Code2"
      }
    ],
    "level": 0,
    "title": null
  },
  "item_file": "/numpy/__init__.py",
  "item_line": null,
  "item_type": "<class 'type'>",
  "ordered_sections": [
    "Signature",
    "Summary",
    "Extended Summary",
    "Methods",
    "Parameters",
    "Examples"
  ],
  "references": null,
  "see_also": [],
  "signature": {
    "value": "chararray(shape, itemsize=1, unicode=False, buffer=None, offset=0, strides=None, order=None)"
  }
}