{
  "aliases": [
    "numpy.typing"
  ],
  "arbitrary": [
    {
      "children": [
        {
          "data": {
            "children": [],
            "kind": "versionadded",
            "title": "1.20"
          },
          "type": "Admonition"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Large parts of the NumPy API have PEP-484-style type annotations. In addition a number of type aliases are available to users, most prominently the two below:"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "domain": null,
                            "role": null,
                            "value": "ArrayLike"
                          },
                          "type": "Directive"
                        },
                        {
                          "data": {
                            "value": ": objects that can be converted to arrays"
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "domain": null,
                            "role": null,
                            "value": "DTypeLike"
                          },
                          "type": "Directive"
                        },
                        {
                          "data": {
                            "value": ": objects that can be converted to dtypes"
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              }
            ]
          },
          "type": "BulletList"
        },
        {
          "data": {
            "placeholder": "target",
            "value": ".. _typing-extensions: https://pypi.org/project/typing-extensions/"
          },
          "type": "Unimplemented"
        }
      ],
      "level": 0,
      "title": "Typing (:mod:`numpy.typing`)"
    },
    {
      "children": [
        {
          "data": {
            "children": [],
            "kind": "versionadded",
            "title": "1.21"
          },
          "type": "Admonition"
        },
        {
          "data": {
            "argument": "numpy.typing.mypy_plugin",
            "content": "",
            "name": "automodule",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "numpy.typing",
            "content": "",
            "name": "currentmodule",
            "options": []
          },
          "type": "BlockDirective"
        }
      ],
      "level": 1,
      "title": "Mypy plugin"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "NumPy is very flexible. Trying to describe the full range of possibilities statically would result in types that are not very helpful. For that reason, the typed NumPy API is often stricter than the runtime NumPy API. This section describes some notable differences."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "level": 1,
      "title": "Differences from the runtime NumPy API"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "The "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "ArrayLike"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " type tries to avoid creating object arrays. For example,"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "argument": "python",
            "content": ">>> np.array(x**2 for x in range(10))\narray(<generator object <genexpr> at ...>, dtype=object)",
            "name": "code-block",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "is valid NumPy code which will create a 0-dimensional object array. Type checkers will complain about the above example when using the NumPy types however. If you really intended to do the above, then you can either use a "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "# type: ignore"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " comment:"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "argument": "python",
            "content": ">>> np.array(x**2 for x in range(10))  # type: ignore",
            "name": "code-block",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "or explicitly type the array like object as "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "~typing.Any"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": ":"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "argument": "python",
            "content": ">>> from typing import Any\n>>> array_like: Any = (x**2 for x in range(10))\n>>> np.array(array_like)\narray(<generator object <genexpr> at ...>, dtype=object)",
            "name": "code-block",
            "options": []
          },
          "type": "BlockDirective"
        }
      ],
      "level": 2,
      "title": "ArrayLike"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "It's possible to mutate the dtype of an array at runtime. For example, the following code is valid:"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "argument": "python",
            "content": ">>> x = np.array([1, 2])\n>>> x.dtype = np.bool_",
            "name": "code-block",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "This sort of mutation is not allowed by the types. Users who want to write statically typed code should instead use the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "numpy.ndarray.view"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " method to create a view of the array with a different dtype."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "level": 2,
      "title": "ndarray"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "The "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "DTypeLike"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " type tries to avoid creation of dtype objects using dictionary of fields like below:"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "argument": "python",
            "content": ">>> x = np.dtype({\"field1\": (float, 1), \"field2\": (int, 3)})",
            "name": "code-block",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Although this is valid NumPy code, the type checker will complain about it, since its usage is discouraged. Please see : "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "Data type objects <arrays.dtypes>"
                  ]
                },
                "type": "Verbatim"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "level": 2,
      "title": "DTypeLike"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "The precision of "
                },
                "type": "Words"
              },
              {
                "data": {
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "module",
                    "module": "numpy",
                    "path": "numpy.number",
                    "version": "1.22.4"
                  },
                  "value": "numpy.number"
                },
                "type": "Link"
              },
              {
                "data": {
                  "value": " subclasses is treated as a covariant generic parameter (see "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "~NBitBase"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": "), simplifying the annotating of processes involving precision-based casting."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "argument": "python",
            "content": ">>> from typing import TypeVar\n>>> import numpy as np\n>>> import numpy.typing as npt\n\n>>> T = TypeVar(\"T\", bound=npt.NBitBase)\n>>> def func(a: \"np.floating[T]\", b: \"np.floating[T]\") -> \"np.floating[T]\":\n...     ...",
            "name": "code-block",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Consequently, the likes of "
                },
                "type": "Words"
              },
              {
                "data": {
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "module",
                    "module": "numpy",
                    "path": "numpy.float16",
                    "version": "1.22.4"
                  },
                  "value": "~numpy.float16"
                },
                "type": "Link"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "module",
                    "module": "numpy",
                    "path": "numpy.float32",
                    "version": "1.22.4"
                  },
                  "value": "~numpy.float32"
                },
                "type": "Link"
              },
              {
                "data": {
                  "value": " and "
                },
                "type": "Words"
              },
              {
                "data": {
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "module",
                    "module": "numpy",
                    "path": "numpy.float64",
                    "version": "1.22.4"
                  },
                  "value": "~numpy.float64"
                },
                "type": "Link"
              },
              {
                "data": {
                  "value": " are still sub-types of "
                },
                "type": "Words"
              },
              {
                "data": {
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "module",
                    "module": "numpy",
                    "path": "numpy.floating",
                    "version": "1.22.4"
                  },
                  "value": "~numpy.floating"
                },
                "type": "Link"
              },
              {
                "data": {
                  "value": ", but, contrary to runtime, they're not necessarily considered as sub-classes."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "level": 2,
      "title": "Number precision"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "The "
                },
                "type": "Words"
              },
              {
                "data": {
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "module",
                    "module": "numpy",
                    "path": "numpy.timedelta64",
                    "version": "1.22.4"
                  },
                  "value": "~numpy.timedelta64"
                },
                "type": "Link"
              },
              {
                "data": {
                  "value": " class is not considered a subclass of "
                },
                "type": "Words"
              },
              {
                "data": {
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "module",
                    "module": "numpy",
                    "path": "numpy.signedinteger",
                    "version": "1.22.4"
                  },
                  "value": "~numpy.signedinteger"
                },
                "type": "Link"
              },
              {
                "data": {
                  "value": ", the former only inheriting from "
                },
                "type": "Words"
              },
              {
                "data": {
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "module",
                    "module": "numpy",
                    "path": "numpy.generic",
                    "version": "1.22.4"
                  },
                  "value": "~numpy.generic"
                },
                "type": "Link"
              },
              {
                "data": {
                  "value": " while static type checking."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "level": 2,
      "title": "Timedelta64"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "During runtime numpy aggressively casts any passed 0D arrays into their corresponding "
                },
                "type": "Words"
              },
              {
                "data": {
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "module",
                    "module": "numpy",
                    "path": "numpy.generic",
                    "version": "1.22.4"
                  },
                  "value": "~numpy.generic"
                },
                "type": "Link"
              },
              {
                "data": {
                  "value": " instance. Until the introduction of shape typing (see "
                },
                "type": "Words"
              },
              {
                "data": {
                  "target": "https://peps.python.org/pep-0646/",
                  "value": "Pep 646"
                },
                "type": "ExternalLink"
              },
              {
                "data": {
                  "value": ") it is unfortunately not possible to make the necessary distinction between 0D and >0D arrays. While thus not strictly correct, all operations are that can potentially perform a 0D-array -> scalar cast are currently annotated as exclusively returning an "
                },
                "type": "Words"
              },
              {
                "data": {
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "module",
                    "module": "numpy",
                    "path": "numpy.ndarray",
                    "version": "1.22.4"
                  },
                  "value": "ndarray"
                },
                "type": "Link"
              },
              {
                "data": {
                  "value": "."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "If it is known in advance that an operation _will_ perform a 0D-array -> scalar cast, then one can consider manually remedying the situation with either "
                },
                "type": "Words"
              },
              {
                "data": {
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "api",
                    "module": "typing",
                    "path": "typing.cast",
                    "version": "*"
                  },
                  "value": "typing.cast"
                },
                "type": "Link"
              },
              {
                "data": {
                  "value": " or a "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "# type: ignore"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " comment."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "level": 2,
      "title": "0D arrays"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "The dtype of "
                },
                "type": "Words"
              },
              {
                "data": {
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "module",
                    "module": "numpy",
                    "path": "numpy.recarray",
                    "version": "1.22.4"
                  },
                  "value": "numpy.recarray"
                },
                "type": "Link"
              },
              {
                "data": {
                  "value": ", and the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "api",
                    "module": "numpy",
                    "path": "numpy.core.records",
                    "version": "*"
                  },
                  "value": "numpy.rec"
                },
                "type": "Link"
              },
              {
                "data": {
                  "value": " functions in general, can be specified in one of two ways:"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Directly via the "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "dtype"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " argument."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "With up to five helper arguments that operate via "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "exists": true,
                            "kind": "module",
                            "reference": {
                              "kind": "module",
                              "module": "numpy",
                              "path": "numpy.format_parser",
                              "version": "1.22.4"
                            },
                            "value": "numpy.format_parser"
                          },
                          "type": "Link"
                        },
                        {
                          "data": {
                            "value": ":   "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "formats"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": ", "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "names"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": ", "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "titles"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": ", "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "aligned"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " and "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "byteorder"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": "."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              }
            ]
          },
          "type": "BulletList"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "These two approaches are currently typed as being mutually exclusive, "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "i.e."
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": " if "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "dtype"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " is specified than one may not specify "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "formats"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ". While this mutual exclusivity is not (strictly) enforced during runtime, combining both dtype specifiers can lead to unexpected or even downright buggy behavior."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "level": 2,
      "title": "Record array dtypes"
    },
    {
      "children": [
        {
          "data": {
            "argument": "ArrayLike",
            "content": "A `~typing.Union` representing objects that can be coerced\ninto an `~numpy.ndarray`.\n\nAmong others this includes the likes of:\n\n* Scalars.\n* (Nested) sequences.\n* Objects implementing the `~class.__array__` protocol.\n\n.. versionadded:: 1.20\n\n.. admonition:: See Also\n\n    :term:`array_like`:\n        Any scalar or sequence that can be interpreted as an ndarray.\n\n.. rubric:: Examples\n\n.. code-block:: python\n\n    >>> import numpy as np\n    >>> import numpy.typing as npt\n\n    >>> def as_array(a: npt.ArrayLike) -> np.ndarray:\n    ...     return np.array(a)",
            "name": "data",
            "options": [
              [
                "value",
                "typing.Union[...]"
              ]
            ]
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "DTypeLike",
            "content": "A `~typing.Union` representing objects that can be coerced\ninto a `~numpy.dtype`.\n\nAmong others this includes the likes of:\n\n* :class:`type` objects.\n* Character codes or the names of :class:`type` objects.\n* Objects with the ``.dtype`` attribute.\n\n.. versionadded:: 1.20\n\n.. admonition:: See Also\n\n    :ref:`Specifying and constructing data types <arrays.dtypes.constructing>`\n        A comprehensive overview of all objects that can be coerced\n        into data types.\n\n.. rubric:: Examples\n\n.. code-block:: python\n\n    >>> import numpy as np\n    >>> import numpy.typing as npt\n\n    >>> def as_dtype(d: npt.DTypeLike) -> np.dtype:\n    ...     return np.dtype(d)",
            "name": "data",
            "options": [
              [
                "value",
                "typing.Union[...]"
              ]
            ]
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "NDArray",
            "content": "A :term:`generic <generic type>` version of\n`np.ndarray[Any, np.dtype[+ScalarType]] <numpy.ndarray>`.\n\nCan be used during runtime for typing arrays with a given dtype\nand unspecified shape.\n\n.. versionadded:: 1.21\n\n.. rubric:: Examples\n\n.. code-block:: python\n\n    >>> import numpy as np\n    >>> import numpy.typing as npt\n\n    >>> print(npt.NDArray)\n    numpy.ndarray[typing.Any, numpy.dtype[+ScalarType]]\n\n    >>> print(npt.NDArray[np.float64])\n    numpy.ndarray[typing.Any, numpy.dtype[numpy.float64]]\n\n    >>> NDArrayInt = npt.NDArray[np.int_]\n    >>> a: NDArrayInt = np.arange(10)\n\n    >>> def func(a: npt.ArrayLike) -> npt.NDArray[Any]:\n    ...     return np.array(a)",
            "name": "data",
            "options": [
              [
                "value",
                "numpy.ndarray[typing.Any, numpy.dtype[+ScalarType]]"
              ]
            ]
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "argument": "numpy.typing.NBitBase",
            "content": "",
            "name": "autoclass",
            "options": []
          },
          "type": "BlockDirective"
        }
      ],
      "level": 1,
      "title": "API"
    }
  ],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "title": null
    },
    "Extended Summary": {
      "children": [],
      "level": 0,
      "title": null
    },
    "Methods": {
      "children": [],
      "level": 0,
      "title": null
    },
    "Notes": {
      "children": [],
      "level": 0,
      "title": null
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "title": null
    },
    "Parameters": {
      "children": [],
      "level": 0,
      "title": null
    },
    "Raises": {
      "children": [],
      "level": 0,
      "title": null
    },
    "Receives": {
      "children": [],
      "level": 0,
      "title": null
    },
    "Returns": {
      "children": [],
      "level": 0,
      "title": null
    },
    "Summary": {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "To remove in the future \u2013\u2013 numpy.typing"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "level": 0,
      "title": null
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "title": null
    },
    "Warns": {
      "children": [],
      "level": 0,
      "title": null
    },
    "Yields": {
      "children": [],
      "level": 0,
      "title": null
    }
  },
  "example_section_data": {
    "children": [],
    "level": 0,
    "title": null
  },
  "item_file": "/numpy/typing/__init__.py",
  "item_line": 0,
  "item_type": "<class 'module'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary"
  ],
  "references": null,
  "see_also": [],
  "signature": {
    "value": null
  }
}