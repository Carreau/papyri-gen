{
  "aliases": [],
  "arbitrary": [
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "This document aims to explain some best practices for authoring a package that depends on NumPy."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": "for-downstream-package-authors",
      "title": "For downstream package authors",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "NumPy uses a standard, "
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "Pep 440"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://peps.python.org/pep-0440/"
            },
            {
              "type": "text",
              "value": " compliant, versioning scheme: "
            },
            {
              "type": "inlineCode",
              "value": "major.minor.bugfix"
            },
            {
              "type": "text",
              "value": ". A "
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "major"
                }
              ],
              "type": "emphasis"
            },
            {
              "type": "text",
              "value": " release is highly unusual (NumPy is still at version "
            },
            {
              "type": "inlineCode",
              "value": "1.xx"
            },
            {
              "type": "text",
              "value": ") and if it happens it will likely indicate an ABI break. "
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "Minor"
                }
              ],
              "type": "emphasis"
            },
            {
              "type": "text",
              "value": " versions are released regularly, typically every 6 months. Minor versions contain new features, deprecations, and removals of previously deprecated code. "
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "Bugfix"
                }
              ],
              "type": "emphasis"
            },
            {
              "type": "text",
              "value": " releases are made even more frequently; they do not contain any new features or deprecations."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "It is important to know that NumPy, like Python itself and most other well known scientific Python projects, does "
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "not"
                }
              ],
              "type": "strong"
            },
            {
              "type": "text",
              "value": " use semantic versioning. Instead, backwards incompatible API changes require deprecation warnings for at least two releases. For more details, see "
            },
            {
              "type": "inlineCode",
              "value": "NEP23"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "NumPy has both a Python API and a C API. The C API can be used directly or via Cython, f2py, or other such tools. If your package uses the C API, then ABI (application binary interface) stability of NumPy is important. NumPy's ABI is forward but not backward compatible. This means: binaries compiled against a given version of NumPy will still run correctly with newer NumPy versions, but not with older versions."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 1,
      "target": null,
      "title": "Understanding NumPy's versioning and API/ABI stability",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "For large, actively maintained packages that depend on NumPy, we recommend testing against the development version of NumPy in CI. To make this easy, nightly builds are provided as wheels at https://anaconda.org/scientific-python-nightly-wheels/. Example install command      "
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": "pip install -U --pre --only-binary :all: -i https://pypi.anaconda.org/scientific-python-nightly-wheels/simple numpy"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "This helps detect regressions in NumPy that need fixing before the next NumPy release.  Furthermore, we recommend to raise errors on warnings in CI for this job, either all warnings or otherwise at least "
            },
            {
              "type": "inlineCode",
              "value": "DeprecationWarning"
            },
            {
              "type": "text",
              "value": " and "
            },
            {
              "type": "inlineCode",
              "value": "FutureWarning"
            },
            {
              "type": "text",
              "value": ". This gives you an early warning about changes in NumPy to adapt your code."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 1,
      "target": null,
      "title": "Testing against the NumPy main branch or pre-releases",
      "type": "Section"
    },
    {
      "children": [],
      "level": 1,
      "target": "depending_on_numpy",
      "title": "Adding a dependency on NumPy",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "children": [
                {
                  "type": "text",
                  "value": "note "
                }
              ],
              "type": "admonitionTitle"
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "Before NumPy 1.25, the NumPy C-API was "
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "not"
                    }
                  ],
                  "type": "emphasis"
                },
                {
                  "type": "text",
                  "value": " backwards compatible.  This means that when compiling with a NumPy version earlier than 1.25 you have to compile with the oldest version you wish to support. This can be done by using "
                },
                {
                  "domain": null,
                  "role": null,
                  "type": "Directive",
                  "value": "oldest-supported-numpy <https://github.com/scipy/oldest-supported-numpy/>"
                },
                {
                  "type": "text",
                  "value": ". Please see the NumPy 1.24 documentation at "
                },
                {
                  "domain": null,
                  "role": null,
                  "type": "Directive",
                  "value": "https://numpy.org/doc/1.24/dev/depending_on_numpy.html"
                },
                {
                  "type": "text",
                  "value": "."
                }
              ],
              "type": "paragraph"
            }
          ],
          "kind": "note",
          "type": "admonition"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "If a package either uses the NumPy C API directly or it uses some other tool that depends on it like Cython or Pythran, NumPy is a "
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "build-time"
                }
              ],
              "type": "emphasis"
            },
            {
              "type": "text",
              "value": " dependency of the package."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "By default, NumPy will expose an API that is backwards compatible with the oldest NumPy version that supports the currently oldest compatible Python version.  NumPy 1.25.0 supports Python 3.9 and higher and NumPy 1.19 is the first version to support Python 3.9.  Thus, we guarantee that, when using defaults, NumPy 1.25 will expose a C-API compatible with NumPy 1.19. (the exact version is set within NumPy-internal header files)."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "NumPy is also forward compatible for all minor releases, but a major release will require recompilation."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "The default behavior can be customized for example by adding      "
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": "#define NPY_TARGET_VERSION NPY_1_22_API_VERSION"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "before including any NumPy headers (or the equivalent "
            },
            {
              "type": "inlineCode",
              "value": "-D"
            },
            {
              "type": "text",
              "value": " compiler flag) in every extension module that requires the NumPy C-API. This is mainly useful if you need to use newly added API at the cost of not being compatible with older versions."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "If for some reason you wish to compile for the currently installed NumPy version by default you can add      "
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": "#ifndef NPY_TARGET_VERSION\n    #define NPY_TARGET_VERSION NPY_API_VERSION\n#endif"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Which allows a user to override the default via "
            },
            {
              "type": "inlineCode",
              "value": "-DNPY_TARGET_VERSION"
            },
            {
              "type": "text",
              "value": ". This define must be consistent for each extension module (use of "
            },
            {
              "type": "inlineCode",
              "value": "import_array()"
            },
            {
              "type": "text",
              "value": ") and also applies to the umath module."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "When you compile against NumPy, you should add the proper version restrictions to your "
            },
            {
              "type": "inlineCode",
              "value": "pyproject.toml"
            },
            {
              "type": "text",
              "value": " (see PEP 517).  Since your extension will not be compatible with a new major release of NumPy and may not be compatible with very old versions."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "For conda-forge packages, please see "
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "here"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://conda-forge.org/docs/maintainer/knowledge_base.html#building-against-numpy"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "as of now, it is usually as easy as including      "
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": "host:\n  - numpy\nrun:\n  - {{ pin_compatible('numpy') }}"
        },
        {
          "children": [
            {
              "children": [
                {
                  "type": "text",
                  "value": "note "
                }
              ],
              "type": "admonitionTitle"
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "At the time of NumPy 1.25, NumPy 2.0 is expected to be the next release of NumPy.  The NumPy 2.0 release is expected to require a different pin, since NumPy 2+ will be needed in order to be compatible with both NumPy 1.x and 2.x."
                }
              ],
              "type": "paragraph"
            }
          ],
          "kind": "note",
          "type": "admonition"
        }
      ],
      "level": 2,
      "target": null,
      "title": "Build-time dependency",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "NumPy itself and many core scientific Python packages have agreed on a schedule for dropping support for old Python and NumPy versions: "
            },
            {
              "type": "inlineCode",
              "value": "NEP29"
            },
            {
              "type": "text",
              "value": ". We recommend all packages depending on NumPy to follow the recommendations in NEP 29."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "For "
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "run-time dependencies"
                }
              ],
              "type": "emphasis"
            },
            {
              "type": "text",
              "value": ", specify version bounds using "
            },
            {
              "type": "inlineCode",
              "value": "install_requires"
            },
            {
              "type": "text",
              "value": " in "
            },
            {
              "type": "inlineCode",
              "value": "setup.py"
            },
            {
              "type": "text",
              "value": " (assuming you use "
            },
            {
              "type": "inlineCode",
              "value": "numpy.distutils"
            },
            {
              "type": "text",
              "value": " or "
            },
            {
              "type": "inlineCode",
              "value": "setuptools"
            },
            {
              "type": "text",
              "value": " to build)."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Most libraries that rely on NumPy will not need to set an upper version bound: NumPy is careful to preserve backward-compatibility."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "That said, if you are (a) a project that is guaranteed to release frequently, (b) use a large part of NumPy's API surface, and (c) is worried that changes in NumPy may break your code, you can set an upper bound of "
            },
            {
              "type": "inlineCode",
              "value": "<MAJOR.MINOR + N"
            },
            {
              "type": "text",
              "value": " with N no less than 3, and "
            },
            {
              "type": "inlineCode",
              "value": "MAJOR.MINOR"
            },
            {
              "type": "text",
              "value": " being the current release of NumPy . If you use the NumPy C API (directly or via Cython), you can also pin the current major version to prevent ABI breakage. Note that setting an upper bound on NumPy may "
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "affect the ability of your library to be installed alongside other, newer packages"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://iscinumpy.dev/post/bound-version-constraints/"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        },
        {
          "placeholder": "footnote",
          "type": "Unimplemented",
          "value": ".. [*] The reason for setting ``N=3`` is that NumPy will, on the\n       rare occasion where it makes breaking changes, raise warnings\n       for at least two releases. (NumPy releases about once every six\n       months, so this translates to a window of at least a year;\n       hence the subsequent requirement that your project releases at\n       least on that cadence.)"
        },
        {
          "children": [
            {
              "children": [
                {
                  "type": "text",
                  "value": "note "
                }
              ],
              "type": "admonitionTitle"
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "SciPy has more documentation on how it builds wheels and deals with its build-time and runtime dependencies "
                },
                {
                  "domain": null,
                  "role": null,
                  "type": "Directive",
                  "value": "here <https://scipy.github.io/devdocs/dev/core-dev/index.html#distributing>"
                },
                {
                  "type": "text",
                  "value": "."
                }
              ],
              "type": "paragraph"
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "NumPy and SciPy wheel build CI may also be useful as a reference, it can be found "
                },
                {
                  "domain": null,
                  "role": null,
                  "type": "Directive",
                  "value": "here for NumPy <https://github.com/MacPython/numpy-wheels>"
                },
                {
                  "type": "text",
                  "value": " and "
                },
                {
                  "domain": null,
                  "role": null,
                  "type": "Directive",
                  "value": "here for SciPy <https://github.com/MacPython/scipy-wheels>"
                },
                {
                  "type": "text",
                  "value": "."
                }
              ],
              "type": "paragraph"
            }
          ],
          "kind": "note",
          "type": "admonition"
        }
      ],
      "level": 2,
      "target": null,
      "title": "Runtime dependency & version ranges",
      "type": "Section"
    }
  ],
  "content": {},
  "example_section_data": {
    "children": [],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": null,
  "item_line": null,
  "item_type": null,
  "ordered_sections": [],
  "references": null,
  "see_also": [],
  "signature": {
    "type": "Signature",
    "value": null
  },
  "type": "DocBlob"
}