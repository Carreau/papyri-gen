{
  "aliases": [],
  "arbitrary": [
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "You already have your own forked copy of the "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "NumPy_"
            },
            {
              "type": "text",
              "value": " repository, by following "
            },
            {
              "type": "inlineCode",
              "value": "forking"
            },
            {
              "type": "text",
              "value": ", "
            },
            {
              "type": "inlineCode",
              "value": "set-up-fork"
            },
            {
              "type": "text",
              "value": ", you have configured "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "git_"
            },
            {
              "type": "text",
              "value": " by following "
            },
            {
              "type": "inlineCode",
              "value": "configure-git"
            },
            {
              "type": "text",
              "value": ", and have linked the upstream repository as explained in "
            },
            {
              "type": "inlineCode",
              "value": "linking-to-upstream"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "What is described below is a recommended workflow with Git."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": "development-workflow",
      "title": "Development workflow",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "In short:"
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Start a new "
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "feature branch"
                        }
                      ],
                      "type": "emphasis"
                    },
                    {
                      "type": "text",
                      "value": " for each set of edits that you do.    See "
                    },
                    {
                      "type": "inlineCode",
                      "value": "below <making-a-new-feature-branch>"
                    },
                    {
                      "type": "text",
                      "value": "."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Hack away! See "
                    },
                    {
                      "type": "inlineCode",
                      "value": "below <editing-workflow>"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "When finished:"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "children": [
                        {
                          "children": [
                            {
                              "children": [
                                {
                                  "type": "text",
                                  "value": "Contributors"
                                }
                              ],
                              "type": "emphasis"
                            },
                            {
                              "type": "text",
                              "value": ": push your feature branch to your own Github repo, and      "
                            },
                            {
                              "type": "inlineCode",
                              "value": "create a pull request <asking-for-merging>"
                            },
                            {
                              "type": "text",
                              "value": "."
                            }
                          ],
                          "type": "paragraph"
                        }
                      ],
                      "spread": false,
                      "type": "listItem"
                    },
                    {
                      "children": [
                        {
                          "children": [
                            {
                              "children": [
                                {
                                  "type": "text",
                                  "value": "Core developers"
                                }
                              ],
                              "type": "emphasis"
                            },
                            {
                              "type": "text",
                              "value": ": If you want to push changes without      further review, see the notes "
                            },
                            {
                              "type": "inlineCode",
                              "value": "below <pushing-to-main>"
                            },
                            {
                              "type": "text",
                              "value": "."
                            }
                          ],
                          "type": "paragraph"
                        }
                      ],
                      "spread": false,
                      "type": "listItem"
                    }
                  ],
                  "ordered": false,
                  "spread": false,
                  "start": 1,
                  "type": "list"
                }
              ],
              "spread": false,
              "type": "listItem"
            }
          ],
          "ordered": true,
          "spread": false,
          "start": 1,
          "type": "list"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "This way of working helps to keep work well organized and the history as clear as possible."
            }
          ],
          "type": "paragraph"
        },
        {
          "args": "",
          "children": [],
          "name": "seealso",
          "options": {},
          "type": "mystDirective",
          "value": "There are many online tutorials to help you `learn git`_. For discussions\nof specific git workflows, see these discussions on `linux git workflow`_,\nand `ipython git workflow`_."
        }
      ],
      "level": 1,
      "target": null,
      "title": "Basic workflow",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "First, fetch new commits from the "
            },
            {
              "type": "inlineCode",
              "value": "upstream"
            },
            {
              "type": "text",
              "value": " repository:"
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": "git fetch upstream"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Then, create a new branch based on the main branch of the upstream repository     "
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": "git checkout -b my-new-feature upstream/main"
        }
      ],
      "level": 2,
      "target": "making-a-new-feature-branch",
      "title": "Making a new feature branch",
      "type": "Section"
    },
    {
      "children": [],
      "level": 2,
      "target": "editing-workflow",
      "title": "The editing workflow",
      "type": "Section"
    },
    {
      "children": [
        {
          "type": "code",
          "value": "# hack hack\ngit status # Optional\ngit diff # Optional\ngit add modified_file\ngit commit\n# push the branch to your own Github repo\ngit push origin my-new-feature"
        }
      ],
      "level": 3,
      "target": null,
      "title": "Overview",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Make some changes. When you feel that you've made a complete, working set    of related changes, move on to the next steps."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Optional: Check which files have changed with "
                    },
                    {
                      "type": "inlineCode",
                      "value": "git status"
                    },
                    {
                      "type": "text",
                      "value": " (see "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "git\n   status"
                    },
                    {
                      "type": "text",
                      "value": ").  You'll see a listing like this one       "
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "type": "code",
                  "value": "# On branch my-new-feature\n# Changed but not updated:\n#   (use \"git add <file>...\" to update what will be committed)\n#   (use \"git checkout -- <file>...\" to discard changes in working directory)\n#\n#\tmodified:   README\n#\n# Untracked files:\n#   (use \"git add <file>...\" to include in what will be committed)\n#\n#\tINSTALL\nno changes added to commit (use \"git add\" and/or \"git commit -a\")"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Optional: Compare the changes with the previous version using with "
                    },
                    {
                      "type": "inlineCode",
                      "value": "git\n   diff"
                    },
                    {
                      "type": "text",
                      "value": " ("
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "git diff"
                    },
                    {
                      "type": "text",
                      "value": "). This brings up a simple text browser interface that    highlights the difference between your files and the previous version."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Add any relevant modified or new files using  "
                    },
                    {
                      "type": "inlineCode",
                      "value": "git add modified_file"
                    },
                    {
                      "type": "text",
                      "value": "    (see "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "git add"
                    },
                    {
                      "type": "text",
                      "value": "). This puts the files into a staging area, which is a queue    of files that will be added to your next commit. Only add files that have    related, complete changes. Leave files with unfinished changes for later    commits."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "To commit the staged files into the local copy of your repo, do "
                    },
                    {
                      "type": "inlineCode",
                      "value": "git\n   commit"
                    },
                    {
                      "type": "text",
                      "value": ". At this point, a text editor will open up to allow you to write a    commit message. Read the "
                    },
                    {
                      "type": "inlineCode",
                      "value": "commit message\n   section<writing-the-commit-message>"
                    },
                    {
                      "type": "text",
                      "value": " to be sure that you are writing a    properly formatted and sufficiently detailed commit message. After saving    your message and closing the editor, your commit will be saved. For trivial    commits, a short commit message can be passed in through the command line    using the "
                    },
                    {
                      "type": "inlineCode",
                      "value": "-m"
                    },
                    {
                      "type": "text",
                      "value": " flag. For example, "
                    },
                    {
                      "type": "inlineCode",
                      "value": "git commit -am \"ENH: Some message\""
                    },
                    {
                      "type": "text",
                      "value": "."
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "In some cases, you will see this form of the commit command: "
                    },
                    {
                      "type": "inlineCode",
                      "value": "git commit\n   -a"
                    },
                    {
                      "type": "text",
                      "value": ". The extra "
                    },
                    {
                      "type": "inlineCode",
                      "value": "-a"
                    },
                    {
                      "type": "text",
                      "value": " flag automatically commits all modified files and    removes all deleted files. This can save you some typing of numerous "
                    },
                    {
                      "type": "inlineCode",
                      "value": "git\n   add"
                    },
                    {
                      "type": "text",
                      "value": " commands; however, it can add unwanted changes to a commit if you're    not careful. For more information, see "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "why the -a flag?"
                    },
                    {
                      "type": "text",
                      "value": " - and the    helpful use-case description in the "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "tangled working copy problem"
                    },
                    {
                      "type": "text",
                      "value": "."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Push the changes to your forked repo on "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "github_"
                    },
                    {
                      "type": "text",
                      "value": ":        "
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "type": "code",
                  "value": "git push origin my-new-feature"
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "For more information, see "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "git push"
                    },
                    {
                      "type": "text",
                      "value": "."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            }
          ],
          "ordered": true,
          "spread": false,
          "start": 1,
          "type": "list"
        },
        {
          "children": [
            {
              "children": [
                {
                  "type": "text",
                  "value": "note "
                }
              ],
              "type": "admonitionTitle"
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "Assuming you have followed the instructions in these pages, git will create a default link to your "
                },
                {
                  "domain": null,
                  "role": null,
                  "type": "Directive",
                  "value": "github_"
                },
                {
                  "type": "text",
                  "value": " repo called "
                },
                {
                  "type": "inlineCode",
                  "value": "origin"
                },
                {
                  "type": "text",
                  "value": ".  In git >= 1.7 you can ensure that the link to origin is permanently set by using the "
                },
                {
                  "type": "inlineCode",
                  "value": "--set-upstream"
                },
                {
                  "type": "text",
                  "value": " option     "
                }
              ],
              "type": "paragraph"
            },
            {
              "type": "code",
              "value": "git push --set-upstream origin my-new-feature"
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "From now on "
                },
                {
                  "domain": null,
                  "role": null,
                  "type": "Directive",
                  "value": "git_"
                },
                {
                  "type": "text",
                  "value": " will know that "
                },
                {
                  "type": "inlineCode",
                  "value": "my-new-feature"
                },
                {
                  "type": "text",
                  "value": " is related to the "
                },
                {
                  "type": "inlineCode",
                  "value": "my-new-feature"
                },
                {
                  "type": "text",
                  "value": " branch in your own "
                },
                {
                  "domain": null,
                  "role": null,
                  "type": "Directive",
                  "value": "github_"
                },
                {
                  "type": "text",
                  "value": " repo. Subsequent push calls are then simplified to the following     "
                }
              ],
              "type": "paragraph"
            },
            {
              "type": "code",
              "value": "git push"
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "You have to use "
                },
                {
                  "type": "inlineCode",
                  "value": "--set-upstream"
                },
                {
                  "type": "text",
                  "value": " for each new branch that you create."
                }
              ],
              "type": "paragraph"
            }
          ],
          "kind": "note",
          "type": "admonition"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "It may be the case that while you were working on your edits, new commits have been added to "
            },
            {
              "type": "inlineCode",
              "value": "upstream"
            },
            {
              "type": "text",
              "value": " that affect your work. In this case, follow the "
            },
            {
              "type": "inlineCode",
              "value": "rebasing-on-main"
            },
            {
              "type": "text",
              "value": " section of this document to apply those changes to your branch."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 3,
      "target": null,
      "title": "In more detail",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Commit messages should be clear and follow a few basic rules.  Example     "
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": "ENH: add functionality X to numpy.<submodule>.\n\nThe first line of the commit message starts with a capitalized acronym\n(options listed below) indicating what type of commit this is.  Then a blank\nline, then more text if needed.  Lines shouldn't be longer than 72\ncharacters.  If the commit is related to a ticket, indicate that with\n\"See #3456\", \"See ticket 3456\", \"Closes #3456\" or similar."
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Describing the motivation for a change, the nature of a bug for bug fixes or some details on what an enhancement does are also good to include in a commit message.  Messages should be understandable without looking at the code changes.  A commit message like "
            },
            {
              "type": "inlineCode",
              "value": "MAINT: fixed another one"
            },
            {
              "type": "text",
              "value": " is an example of what not to do; the reader has to go look for context elsewhere."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Standard acronyms to start the commit message with are     "
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": "API: an (incompatible) API change\nBENCH: changes to the benchmark suite\nBLD: change related to building numpy\nBUG: bug fix\nDEP: deprecate something, or remove a deprecated object\nDEV: development tool or utility\nDOC: documentation\nENH: enhancement\nMAINT: maintenance commit (refactoring, typos, etc.)\nREV: revert an earlier commit\nSTY: style fix (whitespace, PEP8)\nTST: addition or modification of tests\nTYP: static typing\nREL: related to releasing numpy"
        }
      ],
      "level": 3,
      "target": "writing-the-commit-message",
      "title": "Writing the commit message",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "By default a lot of continuous integration (CI) jobs are run for every PR, from running the test suite on different operating systems and hardware platforms to building the docs. In some cases you already know that CI isn't needed (or not all of it), for example if you work on CI config files, text in the README, or other files that aren't involved in regular build, test or docs sequences. In such cases you may explicitly skip CI by including one of these fragments in your commit message:"
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "inlineCode",
                      "value": "[skip ci]"
                    },
                    {
                      "type": "text",
                      "value": ": skip all CI"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Only recommended if you are still not ready for the checks to run on your PR   (for example, if this is only a draft.)"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "inlineCode",
                      "value": "[skip actions]"
                    },
                    {
                      "type": "text",
                      "value": ": skip GitHub Actions jobs"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "GitHub Actions"
                        }
                      ],
                      "title": "",
                      "type": "link",
                      "url": "https://docs.github.com/actions"
                    },
                    {
                      "type": "text",
                      "value": " is where most of the CI   checks are run, including the linter, benchmarking, running basic tests for   most architectures and OSs, and several compiler and CPU optimization   settings.   "
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "See the configuration files for these checks."
                        }
                      ],
                      "title": "",
                      "type": "link",
                      "url": "https://github.com/numpy/numpy/tree/main/.github/workflows"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "inlineCode",
                      "value": "[skip travis]"
                    },
                    {
                      "type": "text",
                      "value": ": skip TravisCI jobs"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "TravisCI"
                        }
                      ],
                      "title": "",
                      "type": "link",
                      "url": "https://www.travis-ci.com/"
                    },
                    {
                      "type": "text",
                      "value": " will test your changes against   Python 3.9 on the PowerPC and s390x architectures.   "
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "See the configuration file for these checks."
                        }
                      ],
                      "title": "",
                      "type": "link",
                      "url": "https://github.com/numpy/numpy/blob/main/.travis.yml"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "inlineCode",
                      "value": "[skip azp]"
                    },
                    {
                      "type": "text",
                      "value": ": skip Azure jobs"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "Azure"
                        }
                      ],
                      "title": "",
                      "type": "link",
                      "url": "https://azure.microsoft.com/en-us/products/devops/pipelines"
                    },
                    {
                      "type": "text",
                      "value": " is   where all comprehensive tests are run. This is an expensive run, and one you   could typically skip if you do documentation-only changes, for example.   "
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "See the main configuration file for these checks."
                        }
                      ],
                      "title": "",
                      "type": "link",
                      "url": "https://github.com/numpy/numpy/blob/main/azure-pipelines.yml"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "inlineCode",
                      "value": "[skip circle]"
                    },
                    {
                      "type": "text",
                      "value": ": skip CircleCI jobs"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "CircleCI"
                        }
                      ],
                      "title": "",
                      "type": "link",
                      "url": "https://circleci.com/"
                    },
                    {
                      "type": "text",
                      "value": " is where we build the documentation and   store the generated artifact for preview in each PR. This check will also run   all the docstrings examples and verify their results. If you don't make   documentation changes, but you make changes to a function's API, for example,   you may need to run these tests to verify that the doctests are still valid.   "
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "See the configuration file for these checks."
                        }
                      ],
                      "title": "",
                      "type": "link",
                      "url": "https://github.com/numpy/numpy/blob/main/.circleci/config.yml"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "inlineCode",
                      "value": "[skip cirrus]"
                    },
                    {
                      "type": "text",
                      "value": ": skip Cirrus jobs"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "CirrusCI"
                        }
                      ],
                      "title": "",
                      "type": "link",
                      "url": "https://cirrus-ci.org/"
                    },
                    {
                      "type": "text",
                      "value": " mostly triggers Linux aarch64 and MacOS Arm64 wheels   uploads.   "
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "See the configuration file for these checks."
                        }
                      ],
                      "title": "",
                      "type": "link",
                      "url": "https://github.com/numpy/numpy/blob/main/.cirrus.star"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            }
          ],
          "ordered": false,
          "spread": false,
          "start": 1,
          "type": "list"
        }
      ],
      "level": 4,
      "target": null,
      "title": "Commands to skip continuous integration",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Numpy currently uses "
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "cibuildwheel"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://https://cibuildwheel.readthedocs.io/en/stable/"
            },
            {
              "type": "text",
              "value": " in order to build wheels through continuous integration services. To save resources, the cibuildwheel wheel builders are not run by default on every single PR or commit to main."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "If you would like to test that your pull request do not break the wheel builders, you may either append "
            },
            {
              "type": "inlineCode",
              "value": "[wheel build]"
            },
            {
              "type": "text",
              "value": " to the end of the commit message of the commit or add one of the following labels to the pull request(if you have the permissions to do so):"
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "inlineCode",
                      "value": "36 - Build"
                    },
                    {
                      "type": "text",
                      "value": ": for pull requests changing build processes/configurations"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "inlineCode",
                      "value": "03 - Maintenance"
                    },
                    {
                      "type": "text",
                      "value": ": for pull requests upgrading dependencies"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "inlineCode",
                      "value": "14 - Release"
                    },
                    {
                      "type": "text",
                      "value": ": for pull requests preparing for a release"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            }
          ],
          "ordered": false,
          "spread": false,
          "start": 1,
          "type": "list"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "The wheels built via github actions (including 64-bit linux, macOS, and windows, arm64 macOS, and 32-bit windows) will be uploaded as artifacts in zip files. You can access them from the Summary page of the \"Wheel builder\" "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "Action_"
            },
            {
              "type": "text",
              "value": ". The aarch64 wheels built via "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "travis_"
            },
            {
              "type": "text",
              "value": " CI are not available as artifacts. Additionally, the wheels will be uploaded to https://anaconda.org/scientific-python-nightly-wheels/ on the following conditions:"
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "by a weekly cron job or"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "if the github action or travis build has been manually triggered, which requires appropriate permissions"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            }
          ],
          "ordered": false,
          "spread": false,
          "start": 1,
          "type": "list"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "The wheels will be uploaded to https://anaconda.org/multibuild-wheels-staging/ if the build was triggered by a tag to the repo that begins with "
            },
            {
              "type": "inlineCode",
              "value": "v"
            }
          ],
          "type": "paragraph"
        },
        {
          "placeholder": "target",
          "type": "Unimplemented",
          "value": ".. _Action: https://github.com/numpy/numpy/actions"
        },
        {
          "placeholder": "target",
          "type": "Unimplemented",
          "value": ".. _travis: https://app.travis-ci.com/github/numpy/numpy/builds"
        }
      ],
      "level": 4,
      "target": null,
      "title": "Test building wheels",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "If you plan a new feature or API change, it's wisest to first email the NumPy "
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "mailing list"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://mail.python.org/mailman/listinfo/numpy-discussion"
            },
            {
              "type": "text",
              "value": " asking for comment. If you haven't heard back in a week, it's OK to ping the list again."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": "workflow_mailing_list",
      "title": "Get the mailing list's opinion",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "When you feel your work is finished, you can create a pull request (PR). Github has a nice help page that outlines the process for "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "filing pull requests"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "If your changes involve modifications to the API or addition/modification of a function, add a release note to the "
            },
            {
              "type": "inlineCode",
              "value": "doc/release/upcoming_changes/"
            },
            {
              "type": "text",
              "value": " directory, following the instructions and format in the "
            },
            {
              "type": "inlineCode",
              "value": "doc/release/upcoming_changes/README.rst"
            },
            {
              "type": "text",
              "value": " file."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": "asking-for-merging",
      "title": "Asking for your changes to be merged with the main repo",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "We review pull requests as soon as we can, typically within a week. If you get no review comments within two weeks, feel free to ask for feedback by adding a comment on your PR (this will notify maintainers)."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "If your PR is large or complicated, asking for input on the numpy-discussion mailing list may also be useful."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": "workflow_PR_timeline",
      "title": "Getting your PR reviewed",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "This updates your feature branch with changes from the upstream "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "NumPy\ngithub"
            },
            {
              "type": "text",
              "value": " repo. If you do not absolutely need to do this, try to avoid doing it, except perhaps when you are finished. The first step will be to update the remote repository with new commits from upstream     "
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": "git fetch upstream"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Next, you need to update the feature branch     "
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": "# go to the feature branch\ngit checkout my-new-feature\n# make a backup in case you mess up\ngit branch tmp my-new-feature\n# rebase on upstream main branch\ngit rebase upstream/main"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "If you have made changes to files that have changed also upstream, this may generate merge conflicts that you need to resolve. See "
            },
            {
              "type": "inlineCode",
              "value": "below<recovering-from-mess-up>"
            },
            {
              "type": "text",
              "value": " for help in this case."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Finally, remove the backup branch upon a successful rebase     "
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": "git branch -D tmp"
        },
        {
          "children": [
            {
              "children": [
                {
                  "type": "text",
                  "value": "note "
                }
              ],
              "type": "admonitionTitle"
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "Rebasing on main is preferred over merging upstream back to your branch. Using "
                },
                {
                  "type": "inlineCode",
                  "value": "git merge"
                },
                {
                  "type": "text",
                  "value": " and "
                },
                {
                  "type": "inlineCode",
                  "value": "git pull"
                },
                {
                  "type": "text",
                  "value": " is discouraged when working on feature branches."
                }
              ],
              "type": "paragraph"
            }
          ],
          "kind": "note",
          "type": "admonition"
        }
      ],
      "level": 2,
      "target": "rebasing-on-main",
      "title": "Rebasing on main",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Sometimes, you mess up merges or rebases. Luckily, in Git it is relatively straightforward to recover from such mistakes."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "If you mess up during a rebase     "
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": "git rebase --abort"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "If you notice you messed up after the rebase     "
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": "# reset branch back to the saved point\ngit reset --hard tmp"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "If you forgot to make a backup branch     "
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": "# look at the reflog of the branch\ngit reflog show my-feature-branch\n\n8630830 my-feature-branch@{0}: commit: BUG: io: close file handles immediately\n278dd2a my-feature-branch@{1}: rebase finished: refs/heads/my-feature-branch onto 11ee694744f2552d\n26aa21a my-feature-branch@{2}: commit: BUG: lib: make seek_gzip_factory not leak gzip obj\n...\n\n# reset the branch to where it was before the botched rebase\ngit reset --hard my-feature-branch@{2}"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "If you didn't actually mess up but there are merge conflicts, you need to resolve those.  This can be one of the trickier things to get right.  For a good description of how to do this, see "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "this article on merging conflicts"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": "recovering-from-mess-up",
      "title": "Recovering from mess-ups",
      "type": "Section"
    },
    {
      "children": [],
      "level": 1,
      "target": null,
      "title": "Additional things you might want to do",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "children": [
                {
                  "type": "text",
                  "value": "note "
                }
              ],
              "type": "admonitionTitle"
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "Do this only for your own feature branches."
                }
              ],
              "type": "paragraph"
            }
          ],
          "kind": "note",
          "type": "admonition"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "There's an embarrassing typo in a commit you made? Or perhaps you made several false starts you would like the posterity not to see."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "This can be done via "
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "interactive rebasing"
                }
              ],
              "type": "emphasis"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Suppose that the commit history looks like this      "
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": "git log --oneline\neadc391 Fix some remaining bugs\na815645 Modify it so that it works\n2dec1ac Fix a few bugs + disable\n13d7934 First implementation\n6ad92e5 * masked is now an instance of a new object, MaskedConstant\n29001ed Add pre-nep for a couple of structured_array_extensions.\n..."
        },
        {
          "children": [
            {
              "type": "text",
              "value": "and "
            },
            {
              "type": "inlineCode",
              "value": "6ad92e5"
            },
            {
              "type": "text",
              "value": " is the last commit in the "
            },
            {
              "type": "inlineCode",
              "value": "main"
            },
            {
              "type": "text",
              "value": " branch. Suppose we want to make the following changes:"
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Rewrite the commit message for "
                    },
                    {
                      "type": "inlineCode",
                      "value": "13d7934"
                    },
                    {
                      "type": "text",
                      "value": " to something more sensible."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Combine the commits "
                    },
                    {
                      "type": "inlineCode",
                      "value": "2dec1ac"
                    },
                    {
                      "type": "text",
                      "value": ", "
                    },
                    {
                      "type": "inlineCode",
                      "value": "a815645"
                    },
                    {
                      "type": "text",
                      "value": ", "
                    },
                    {
                      "type": "inlineCode",
                      "value": "eadc391"
                    },
                    {
                      "type": "text",
                      "value": " into a single one."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            }
          ],
          "ordered": false,
          "spread": false,
          "start": 1,
          "type": "list"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "We do as follows      "
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": "# make a backup of the current state\ngit branch tmp HEAD\n# interactive rebase\ngit rebase -i 6ad92e5"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "This will open an editor with the following text in it      "
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": "pick 13d7934 First implementation\npick 2dec1ac Fix a few bugs + disable\npick a815645 Modify it so that it works\npick eadc391 Fix some remaining bugs\n\n# Rebase 6ad92e5..eadc391 onto 6ad92e5\n#\n# Commands:\n#  p, pick = use commit\n#  r, reword = use commit, but edit the commit message\n#  e, edit = use commit, but stop for amending\n#  s, squash = use commit, but meld into previous commit\n#  f, fixup = like \"squash\", but discard this commit's log message\n#\n# If you remove a line here THAT COMMIT WILL BE LOST.\n# However, if you remove everything, the rebase will be aborted.\n#"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "To achieve what we want, we will make the following changes to it      "
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": "r 13d7934 First implementation\npick 2dec1ac Fix a few bugs + disable\nf a815645 Modify it so that it works\nf eadc391 Fix some remaining bugs"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "This means that (i) we want to edit the commit message for "
            },
            {
              "type": "inlineCode",
              "value": "13d7934"
            },
            {
              "type": "text",
              "value": ", and (ii) collapse the last three commits into one. Now we save and quit the editor."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Git will then immediately bring up an editor for editing the commit message. After revising it, we get the output      "
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": "[detached HEAD 721fc64] FOO: First implementation\n 2 files changed, 199 insertions(+), 66 deletions(-)\n[detached HEAD 0f22701] Fix a few bugs + disable\n 1 files changed, 79 insertions(+), 61 deletions(-)\nSuccessfully rebased and updated refs/heads/my-feature-branch."
        },
        {
          "children": [
            {
              "type": "text",
              "value": "and the history looks now like this       "
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": "0f22701 Fix a few bugs + disable\n721fc64 ENH: Sophisticated feature\n6ad92e5 * masked is now an instance of a new object, MaskedConstant"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "If it went wrong, recovery is again possible as explained "
            },
            {
              "type": "inlineCode",
              "value": "above\n<recovering-from-mess-up>"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": "rewriting-commit-history",
      "title": "Rewriting commit history",
      "type": "Section"
    },
    {
      "children": [
        {
          "type": "code",
          "value": "git checkout main\n# delete branch locally\ngit branch -D my-unwanted-branch\n# delete branch on github\ngit push origin --delete my-unwanted-branch"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "See also: https://stackoverflow.com/questions/2003505/how-do-i-delete-a-git-branch-locally-and-remotely"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "Deleting a branch on github_",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "If you want to work on some stuff with other people, where you are all committing into the same repository, or even the same branch, then just share it via "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "github_"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "First fork NumPy into your account, as from "
            },
            {
              "type": "inlineCode",
              "value": "forking"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Then, go to your forked repository github page, say "
            },
            {
              "type": "inlineCode",
              "value": "https://github.com/your-user-name/numpy"
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Click on the 'Admin' button, and add anyone else to the repo as a collaborator:"
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "args": "pull_button.png",
              "children": [],
              "name": "image",
              "options": {},
              "type": "mystDirective",
              "value": ""
            }
          ],
          "type": "blockquote"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Now all those people can do      "
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": "git clone git@github.com:your-user-name/numpy.git"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Remember that links starting with "
            },
            {
              "type": "inlineCode",
              "value": "git@"
            },
            {
              "type": "text",
              "value": " use the ssh protocol and are read-write; links starting with "
            },
            {
              "type": "inlineCode",
              "value": "git://"
            },
            {
              "type": "text",
              "value": " are read-only."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Your collaborators can then commit directly into that repo with the usual       "
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": "git commit -am 'ENH - much better code'\ngit push origin my-feature-branch # pushes directly into your repo"
        }
      ],
      "level": 2,
      "target": null,
      "title": "Several people sharing a single repository",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "If you want to test the changes in a pull request or continue the work in a new pull request, the commits are to be cloned into a local branch in your forked repository"
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "First ensure your upstream points to the main repo, as from "
            },
            {
              "type": "inlineCode",
              "value": "linking-to-upstream"
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Then, fetch the changes and create a local branch. Assuming "
            },
            {
              "type": "inlineCode",
              "value": "$ID"
            },
            {
              "type": "text",
              "value": " is the pull request number and "
            },
            {
              "type": "inlineCode",
              "value": "$BRANCHNAME"
            },
            {
              "type": "text",
              "value": " is the name of the "
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "new local"
                }
              ],
              "type": "emphasis"
            },
            {
              "type": "text",
              "value": " branch you wish to create      "
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": "git fetch upstream pull/$ID/head:$BRANCHNAME"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Checkout the newly created branch      "
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": "git checkout $BRANCHNAME"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "You now have the changes in the pull request."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "Checkout changes from an existing pull request",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "To see a graphical representation of the repository branches and commits     "
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": "gitk --all"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "To see a linear list of commits for this branch     "
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": "git log"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "You can also look at the "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "network graph visualizer"
            },
            {
              "type": "text",
              "value": " for your "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "github_"
            },
            {
              "type": "text",
              "value": " repo."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "Exploring your repository",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Backporting is the process of copying new feature/fixes committed in "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "numpy/main"
            },
            {
              "type": "text",
              "value": " back to stable release branches. To do this you make a branch off the branch you are backporting to, cherry pick the commits you want from "
            },
            {
              "type": "inlineCode",
              "value": "numpy/main"
            },
            {
              "type": "text",
              "value": ", and then submit a pull request for the branch containing the backport."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "First, you need to make the branch you will work on. This needs to be    based on the older version of NumPy (not main)      "
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "type": "code",
                  "value": "# Make a new branch based on numpy/maintenance/1.8.x,\n# backport-3324 is our new name for the branch.\ngit checkout -b backport-3324 upstream/maintenance/1.8.x"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Now you need to apply the changes from main to this branch using    "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "git cherry-pick"
                    },
                    {
                      "type": "text",
                      "value": ":      "
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "type": "code",
                  "value": "# Update remote\ngit fetch upstream\n# Check the commit log for commits to cherry pick\ngit log upstream/main\n# This pull request included commits aa7a047 to c098283 (inclusive)\n# so you use the .. syntax (for a range of commits), the ^ makes the\n# range inclusive.\ngit cherry-pick aa7a047^..c098283\n...\n# Fix any conflicts, then if needed:\ngit cherry-pick --continue"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "You might run into some conflicts cherry picking here. These are    resolved the same way as merge/rebase conflicts. Except here you can    use "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "git blame"
                    },
                    {
                      "type": "text",
                      "value": " to see the difference between main and the    backported branch to make sure nothing gets screwed up."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Push the new branch to your Github repository      "
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "type": "code",
                  "value": "git push -u origin backport-3324"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Finally make a pull request using Github. Make sure it is against the    maintenance branch and not main, Github will usually suggest you    make the pull request against main."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            }
          ],
          "ordered": true,
          "spread": false,
          "start": 1,
          "type": "list"
        }
      ],
      "level": 2,
      "target": null,
      "title": "Backporting",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "children": [
                {
                  "type": "text",
                  "value": "Requires commit rights to the main NumPy repo."
                }
              ],
              "type": "emphasis"
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "When you have a set of \"ready\" changes in a feature branch ready for NumPy's "
            },
            {
              "type": "inlineCode",
              "value": "main"
            },
            {
              "type": "text",
              "value": " or "
            },
            {
              "type": "inlineCode",
              "value": "maintenance"
            },
            {
              "type": "text",
              "value": " branches, you can push them to "
            },
            {
              "type": "inlineCode",
              "value": "upstream"
            },
            {
              "type": "text",
              "value": " as follows:"
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "First, merge or rebase on the target branch."
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "children": [
                        {
                          "children": [
                            {
                              "type": "text",
                              "value": "Only a few, unrelated commits then prefer rebasing          "
                            }
                          ],
                          "type": "paragraph"
                        },
                        {
                          "type": "code",
                          "value": "git fetch upstream\ngit rebase upstream/main"
                        },
                        {
                          "children": [
                            {
                              "type": "text",
                              "value": "See "
                            },
                            {
                              "type": "inlineCode",
                              "value": "rebasing-on-main"
                            },
                            {
                              "type": "text",
                              "value": "."
                            }
                          ],
                          "type": "paragraph"
                        }
                      ],
                      "spread": false,
                      "type": "listItem"
                    },
                    {
                      "children": [
                        {
                          "children": [
                            {
                              "type": "text",
                              "value": "If all of the commits are related, create a merge commit          "
                            }
                          ],
                          "type": "paragraph"
                        },
                        {
                          "type": "code",
                          "value": "git fetch upstream\ngit merge --no-ff upstream/main"
                        }
                      ],
                      "spread": false,
                      "type": "listItem"
                    }
                  ],
                  "ordered": true,
                  "spread": false,
                  "start": 1,
                  "type": "list"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Check that what you are going to push looks sensible          "
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "type": "code",
                  "value": "git log -p upstream/main..\ngit log --oneline --graph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Push to upstream          "
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "type": "code",
                  "value": "git push upstream my-feature-branch:main"
                }
              ],
              "spread": false,
              "type": "listItem"
            }
          ],
          "ordered": true,
          "spread": false,
          "start": 1,
          "type": "list"
        },
        {
          "children": [
            {
              "children": [
                {
                  "type": "text",
                  "value": "note "
                }
              ],
              "type": "admonitionTitle"
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "It's usually a good idea to use the "
                },
                {
                  "type": "inlineCode",
                  "value": "-n"
                },
                {
                  "type": "text",
                  "value": " flag to "
                },
                {
                  "type": "inlineCode",
                  "value": "git push"
                },
                {
                  "type": "text",
                  "value": " to check first that you're about to push the changes you want to the place you want."
                }
              ],
              "type": "paragraph"
            }
          ],
          "kind": "note",
          "type": "admonition"
        },
        {
          "args": "gitwash/git_links.inc",
          "children": [],
          "name": "include",
          "options": {},
          "type": "mystDirective",
          "value": ""
        }
      ],
      "level": 2,
      "target": "pushing-to-main",
      "title": "Pushing changes to the main repo",
      "type": "Section"
    }
  ],
  "content": {},
  "example_section_data": {
    "children": [],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": null,
  "item_line": null,
  "item_type": null,
  "ordered_sections": [],
  "references": null,
  "see_also": [],
  "signature": {
    "type": "Signature",
    "value": null
  },
  "type": "DocBlob"
}