{
  "aliases": [],
  "arbitrary": [
    {
      "children": [
        {
          "args": "numpy",
          "children": [],
          "name": "currentmodule",
          "options": {},
          "type": "mystDirective",
          "value": ""
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "It helps to understand a bit about how NumPy arrays are handled under the covers to help understand NumPy better. This section will not go into great detail. Those wishing to understand the full details are requested to refer to Travis Oliphant's book "
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "Guide to NumPy"
                }
              ],
              "title": "",
              "type": "link",
              "url": "http://web.mit.edu/dvp/Public/numpybook.pdf"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "NumPy arrays consist of two major components: the raw array data (from now on, referred to as the data buffer), and the information about the raw array data. The data buffer is typically what people think of as arrays in C or Fortran, a "
            },
            {
              "type": "inlineCode",
              "value": "contiguous"
            },
            {
              "type": "text",
              "value": " (and fixed) block of memory containing fixed-sized data items. NumPy also contains a significant set of data that describes how to interpret the data in the data buffer. This extra information contains (among other things):"
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "children": [
                {
                  "children": [
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "The basic data element's size in bytes."
                        }
                      ],
                      "type": "paragraph"
                    }
                  ],
                  "spread": false,
                  "type": "listItem"
                },
                {
                  "children": [
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "The start of the data within the data buffer (an offset relative to the     beginning of the data buffer)."
                        }
                      ],
                      "type": "paragraph"
                    }
                  ],
                  "spread": false,
                  "type": "listItem"
                },
                {
                  "children": [
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "The number of "
                        },
                        {
                          "type": "inlineCode",
                          "value": "dimensions <dimension>"
                        },
                        {
                          "type": "text",
                          "value": " and the size of each dimension."
                        }
                      ],
                      "type": "paragraph"
                    }
                  ],
                  "spread": false,
                  "type": "listItem"
                },
                {
                  "children": [
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "The separation between elements for each dimension (the "
                        },
                        {
                          "type": "inlineCode",
                          "value": "stride"
                        },
                        {
                          "type": "text",
                          "value": ").     This does not have to be a multiple of the element size."
                        }
                      ],
                      "type": "paragraph"
                    }
                  ],
                  "spread": false,
                  "type": "listItem"
                },
                {
                  "children": [
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "The byte order of the data (which may not be the native byte order)."
                        }
                      ],
                      "type": "paragraph"
                    }
                  ],
                  "spread": false,
                  "type": "listItem"
                },
                {
                  "children": [
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "Whether the buffer is read-only."
                        }
                      ],
                      "type": "paragraph"
                    }
                  ],
                  "spread": false,
                  "type": "listItem"
                },
                {
                  "children": [
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "Information (via the "
                        },
                        {
                          "type": "inlineCode",
                          "value": "dtype"
                        },
                        {
                          "type": "text",
                          "value": " object) about the interpretation of the     basic data element. The basic data element may be as simple as an int or a     float, or it may be a compound object (e.g.,     "
                        },
                        {
                          "type": "inlineCode",
                          "value": "struct-like <structured data type>"
                        },
                        {
                          "type": "text",
                          "value": "), a fixed character field,     or Python object pointers."
                        }
                      ],
                      "type": "paragraph"
                    }
                  ],
                  "spread": false,
                  "type": "listItem"
                },
                {
                  "children": [
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "Whether the array is to be interpreted as "
                        },
                        {
                          "type": "inlineCode",
                          "value": "C-order <C order>"
                        },
                        {
                          "type": "text",
                          "value": "     or "
                        },
                        {
                          "type": "inlineCode",
                          "value": "Fortran-order <Fortran order>"
                        },
                        {
                          "type": "text",
                          "value": "."
                        }
                      ],
                      "type": "paragraph"
                    }
                  ],
                  "spread": false,
                  "type": "listItem"
                }
              ],
              "ordered": true,
              "spread": false,
              "start": 1,
              "type": "list"
            }
          ],
          "type": "blockquote"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "This arrangement allows for the very flexible use of arrays. One thing that it allows is simple changes to the metadata to change the interpretation of the array buffer. Changing the byteorder of the array is a simple change involving no rearrangement of the data. The "
            },
            {
              "type": "inlineCode",
              "value": "shape"
            },
            {
              "type": "text",
              "value": " of the array can be changed very easily without changing anything in the data buffer or any data copying at all."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Among other things that are made possible is one can create a new array metadata object that uses the same data buffer to create a new "
            },
            {
              "type": "inlineCode",
              "value": "view"
            },
            {
              "type": "text",
              "value": " of that data buffer that has a different interpretation of the buffer (e.g., different shape, offset, byte order, strides, etc) but shares the same data bytes. Many operations in NumPy do just this such as "
            },
            {
              "type": "inlineCode",
              "value": "slicing <python:slice>"
            },
            {
              "type": "text",
              "value": ". Other operations, such as transpose, don't move data elements around in the array, but rather change the information about the shape and strides so that the indexing of the array changes, but the data in the doesn't move."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Typically these new versions of the array metadata but the same data buffer are new views into the data buffer. There is a different "
            },
            {
              "type": "inlineCode",
              "value": "ndarray"
            },
            {
              "type": "text",
              "value": " object, but it uses the same data buffer. This is why it is necessary to force copies through the use of the "
            },
            {
              "type": "inlineCode",
              "value": "copy"
            },
            {
              "type": "text",
              "value": " method if one really wants to make a new and independent copy of the data buffer."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "New views into arrays mean the object reference counts for the data buffer increase. Simply doing away with the original array object will not remove the data buffer if other views of it still exist."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": "numpy-internals",
      "title": "Internal organization of NumPy arrays",
      "type": "Section"
    },
    {
      "children": [
        {
          "args": ":ref:`basics.indexing`",
          "children": [],
          "name": "seealso",
          "options": {},
          "type": "mystDirective",
          "value": ""
        },
        {
          "children": [
            {
              "type": "text",
              "value": "What is the right way to index multi-dimensional arrays? Before you jump to conclusions about the one and true way to index multi-dimensional arrays, it pays to understand why this is a confusing issue. This section will try to explain in detail how NumPy indexing works and why we adopt the convention we do for images, and when it may be appropriate to adopt other conventions."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "The first thing to understand is that there are two conflicting conventions for indexing 2-dimensional arrays. Matrix notation uses the first index to indicate which row is being selected and the second index to indicate which column is selected. This is opposite the geometrically oriented-convention for images where people generally think the first index represents x position (i.e., column) and the second represents y position (i.e., row). This alone is the source of much confusion; matrix-oriented users and image-oriented users expect two different things with regard to indexing."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "The second issue to understand is how indices correspond to the order in which the array is stored in memory. In Fortran, the first index is the most rapidly varying index when moving through the elements of a two-dimensional array as it is stored in memory. If you adopt the matrix convention for indexing, then this means the matrix is stored one column at a time (since the first index moves to the next row as it changes). Thus Fortran is considered a Column-major language. C has just the opposite convention. In C, the last index changes most rapidly as one moves through the array as stored in memory. Thus C is a Row-major language. The matrix is stored by rows. Note that in both cases it presumes that the matrix convention for indexing is being used, i.e., for both Fortran and C, the first index is the row. Note this convention implies that the indexing convention is invariant and that the data order changes to keep that so."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "But that's not the only way to look at it. Suppose one has large two-dimensional arrays (images or matrices) stored in data files. Suppose the data are stored by rows rather than by columns. If we are to preserve our index convention (whether matrix or image) that means that depending on the language we use, we may be forced to reorder the data if it is read into memory to preserve our indexing convention. For example, if we read row-ordered data into memory without reordering, it will match the matrix indexing convention for C, but not for Fortran. Conversely, it will match the image indexing convention for Fortran, but not for C. For C, if one is using data stored in row order, and one wants to preserve the image index convention, the data must be reordered when reading into memory."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "In the end, what you do for Fortran or C depends on which is more important, not reordering data or preserving the indexing convention. For large images, reordering data is potentially expensive, and often the indexing convention is inverted to avoid that."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "The situation with NumPy makes this issue yet more complicated. The internal machinery of NumPy arrays is flexible enough to accept any ordering of indices. One can simply reorder indices by manipulating the internal "
            },
            {
              "type": "inlineCode",
              "value": "stride"
            },
            {
              "type": "text",
              "value": " information for arrays without reordering the data at all. NumPy will know how to map the new index order to the data without moving the data."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "So if this is true, why not choose the index order that matches what you most expect? In particular, why not define row-ordered images to use the image convention? (This is sometimes referred to as the Fortran convention vs the C convention, thus the 'C' and 'FORTRAN' order options for array ordering in NumPy.) The drawback of doing this is potential performance penalties. It's common to access the data sequentially, either implicitly in array operations or explicitly by looping over rows of an image. When that is done, then the data will be accessed in non-optimal order. As the first index is incremented, what is actually happening is that elements spaced far apart in memory are being sequentially accessed, with usually poor memory access speeds. For example, for a two-dimensional image "
            },
            {
              "type": "inlineCode",
              "value": "im"
            },
            {
              "type": "text",
              "value": " defined so that "
            },
            {
              "type": "inlineCode",
              "value": "im[0, 10]"
            },
            {
              "type": "text",
              "value": " represents the value at "
            },
            {
              "type": "inlineCode",
              "value": "x = 0"
            },
            {
              "type": "text",
              "value": ", "
            },
            {
              "type": "inlineCode",
              "value": "y = 10"
            },
            {
              "type": "text",
              "value": ". To be consistent with usual Python behavior then "
            },
            {
              "type": "inlineCode",
              "value": "im[0]"
            },
            {
              "type": "text",
              "value": " would represent a column at "
            },
            {
              "type": "inlineCode",
              "value": "x = 0"
            },
            {
              "type": "text",
              "value": ". Yet that data would be spread over the whole array since the data are stored in row order. Despite the flexibility of NumPy's indexing, it can't really paper over the fact basic operations are rendered inefficient because of data order or that getting contiguous subarrays is still awkward (e.g., "
            },
            {
              "type": "inlineCode",
              "value": "im[:, 0]"
            },
            {
              "type": "text",
              "value": " for the first row, vs "
            },
            {
              "type": "inlineCode",
              "value": "im[0]"
            },
            {
              "type": "text",
              "value": "). Thus one can't use an idiom such as for row in "
            },
            {
              "type": "inlineCode",
              "value": "im"
            },
            {
              "type": "text",
              "value": "; for col in "
            },
            {
              "type": "inlineCode",
              "value": "im"
            },
            {
              "type": "text",
              "value": " does work, but doesn't yield contiguous column data."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "As it turns out, NumPy is smart enough when dealing with "
            },
            {
              "type": "inlineCode",
              "value": "ufuncs <ufuncs-internals>"
            },
            {
              "type": "text",
              "value": " to determine which index is the most rapidly varying one in memory and uses that for the innermost loop. Thus for ufuncs, there is no large intrinsic advantage to either approach in most cases. On the other hand, use of "
            },
            {
              "type": "inlineCode",
              "value": "ndarray.flat"
            },
            {
              "type": "text",
              "value": " with a FORTRAN ordered array will lead to non-optimal memory access as adjacent elements in the flattened array (iterator, actually) are not contiguous in memory."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Indeed, the fact is that Python indexing on lists and other sequences naturally leads to an outside-to-inside ordering (the first index gets the largest grouping, the next largest, and the last gets the smallest element). Since image data are normally stored in rows, this corresponds to the position within rows being the last item indexed."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "If you do want to use Fortran ordering realize that there are two approaches to consider: 1) accept that the first index is just not the most rapidly changing in memory and have all your I/O routines reorder your data when going from memory to disk or visa versa, or use NumPy's mechanism for mapping the first index to the most rapidly varying data. We recommend the former if possible. The disadvantage of the latter is that many of NumPy's functions will yield arrays without Fortran ordering unless you are careful to use the "
            },
            {
              "type": "inlineCode",
              "value": "order"
            },
            {
              "type": "text",
              "value": " keyword. Doing this would be highly inconvenient."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Otherwise, we recommend simply learning to reverse the usual order of indices when accessing elements of an array. Granted, it goes against the grain, but it is more in line with Python semantics and the natural order of the data."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 1,
      "target": null,
      "title": "Multidimensional array indexing order issues",
      "type": "Section"
    }
  ],
  "content": {},
  "example_section_data": {
    "children": [],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": null,
  "item_line": null,
  "item_type": null,
  "ordered_sections": [],
  "references": null,
  "see_also": [],
  "signature": {
    "type": "Signature",
    "value": null
  },
  "type": "DocBlob"
}