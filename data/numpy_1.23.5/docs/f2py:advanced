{
  "aliases": [],
  "arbitrary": [
    {
      "children": [],
      "level": 0,
      "target": null,
      "title": "Advanced F2PY use cases",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "User-defined Python C/API functions can be defined inside signature files using "
            },
            {
              "type": "inlineCode",
              "value": "usercode"
            },
            {
              "type": "text",
              "value": " and "
            },
            {
              "type": "inlineCode",
              "value": "pymethoddef"
            },
            {
              "type": "text",
              "value": " statements (they must be used inside the "
            },
            {
              "type": "inlineCode",
              "value": "python module"
            },
            {
              "type": "text",
              "value": " block). For example, the following signature file "
            },
            {
              "type": "inlineCode",
              "value": "spam.pyf"
            }
          ],
          "type": "paragraph"
        },
        {
          "args": "./code/spam.pyf",
          "children": [],
          "name": "include",
          "options": {
            "literal": ""
          },
          "type": "mystDirective",
          "value": ""
        },
        {
          "children": [
            {
              "type": "text",
              "value": "wraps the C library function "
            },
            {
              "type": "inlineCode",
              "value": "system()"
            },
            {
              "type": "text",
              "value": "    "
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": "f2py -c spam.pyf"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "In Python this can then be used as:"
            }
          ],
          "type": "paragraph"
        },
        {
          "args": "./code/results/spam_session.dat",
          "children": [],
          "name": "literalinclude",
          "options": {
            "language": "python"
          },
          "type": "mystDirective",
          "value": ""
        }
      ],
      "level": 1,
      "target": null,
      "title": "Adding user-defined functions to F2PY generated modules",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "The following example illustrates how to add user-defined variables to a F2PY generated extension module by modifying the dictionary of a F2PY generated module. Consider the following signature file (compiled with "
            },
            {
              "type": "inlineCode",
              "value": "f2py -c var.pyf"
            },
            {
              "type": "text",
              "value": "):"
            }
          ],
          "type": "paragraph"
        },
        {
          "args": "./code/var.pyf",
          "children": [],
          "name": "literalinclude",
          "options": {
            "language": "fortran"
          },
          "type": "mystDirective",
          "value": ""
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Notice that the second "
            },
            {
              "type": "inlineCode",
              "value": "usercode"
            },
            {
              "type": "text",
              "value": " statement must be defined inside an "
            },
            {
              "type": "inlineCode",
              "value": "interface"
            },
            {
              "type": "text",
              "value": " block and the module dictionary is available through the variable "
            },
            {
              "type": "inlineCode",
              "value": "d"
            },
            {
              "type": "text",
              "value": " (see "
            },
            {
              "type": "inlineCode",
              "value": "varmodule.c"
            },
            {
              "type": "text",
              "value": " generated by "
            },
            {
              "type": "inlineCode",
              "value": "f2py var.pyf"
            },
            {
              "type": "text",
              "value": " for additional details)."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Usage in Python:"
            }
          ],
          "type": "paragraph"
        },
        {
          "args": "./code/results/var_session.dat",
          "children": [],
          "name": "literalinclude",
          "options": {
            "language": "python"
          },
          "type": "mystDirective",
          "value": ""
        }
      ],
      "level": 1,
      "target": null,
      "title": "Adding user-defined variables",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Currently, F2PY can handle only "
            },
            {
              "type": "inlineCode",
              "value": "<type spec>(kind=<kindselector>)"
            },
            {
              "type": "text",
              "value": " declarations where "
            },
            {
              "type": "inlineCode",
              "value": "<kindselector>"
            },
            {
              "type": "text",
              "value": " is a numeric integer (e.g. 1, 2, 4,...), but not a function call "
            },
            {
              "type": "inlineCode",
              "value": "KIND(..)"
            },
            {
              "type": "text",
              "value": " or any other expression. F2PY needs to know what would be the corresponding C type and a general solution for that would be too complicated to implement."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "However, F2PY provides a hook to overcome this difficulty, namely, users can define their own <Fortran type> to <C type> maps. For example, if Fortran 90 code contains      "
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": "REAL(kind=KIND(0.0D0)) ..."
        },
        {
          "children": [
            {
              "type": "text",
              "value": "then create a mapping file containing a Python dictionary      "
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": "{'real': {'KIND(0.0D0)': 'double'}}"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "for instance."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Use the "
            },
            {
              "type": "inlineCode",
              "value": "--f2cmap"
            },
            {
              "type": "text",
              "value": " command-line option to pass the file name to F2PY. By default, F2PY assumes file name is "
            },
            {
              "type": "inlineCode",
              "value": ".f2py_f2cmap"
            },
            {
              "type": "text",
              "value": " in the current working directory."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "More generally, the f2cmap file must contain a dictionary with items      "
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": "<Fortran typespec> : {<selector_expr>:<C type>}"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "that defines mapping between Fortran type      "
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": "<Fortran typespec>([kind=]<selector_expr>)"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "and the corresponding <C type>. The <C type> can be one of the following      "
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": "double\nfloat\nlong_double\nchar\nsigned_char\nunsigned_char\nshort\nunsigned_short\nint\nlong\nlong_long\nunsigned\ncomplex_float\ncomplex_double\ncomplex_long_double\nstring"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "For example, for a Fortran file "
            },
            {
              "type": "inlineCode",
              "value": "func1.f"
            },
            {
              "type": "text",
              "value": " containing:"
            }
          ],
          "type": "paragraph"
        },
        {
          "args": "./code/f2cmap_demo.f",
          "children": [],
          "name": "literalinclude",
          "options": {
            "language": "fortran"
          },
          "type": "mystDirective",
          "value": ""
        },
        {
          "children": [
            {
              "type": "text",
              "value": "In order to convert "
            },
            {
              "type": "inlineCode",
              "value": "int64"
            },
            {
              "type": "text",
              "value": " and "
            },
            {
              "type": "inlineCode",
              "value": "real64"
            },
            {
              "type": "text",
              "value": " to valid "
            },
            {
              "type": "inlineCode",
              "value": "C"
            },
            {
              "type": "text",
              "value": " data types, a "
            },
            {
              "type": "inlineCode",
              "value": ".f2py_f2cmap"
            },
            {
              "type": "text",
              "value": " file with the following content can be created in the current directory:"
            }
          ],
          "type": "paragraph"
        },
        {
          "args": "python",
          "children": [],
          "name": "code-block",
          "options": {},
          "type": "mystDirective",
          "value": "dict(real=dict(real64='double'), integer=dict(int64='long long'))"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "and create the module as usual. F2PY checks if a "
            },
            {
              "type": "inlineCode",
              "value": ".f2py_f2cmap"
            },
            {
              "type": "text",
              "value": " file is present in the current directory and will use it to map "
            },
            {
              "type": "inlineCode",
              "value": "KIND"
            },
            {
              "type": "text",
              "value": " specifiers to "
            },
            {
              "type": "inlineCode",
              "value": "C"
            },
            {
              "type": "text",
              "value": " data types."
            }
          ],
          "type": "paragraph"
        },
        {
          "args": "sh",
          "children": [],
          "name": "code-block",
          "options": {},
          "type": "mystDirective",
          "value": "f2py -c func1.f -m func1"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Alternatively, the mapping file can be saved with any other name, for example  "
            },
            {
              "type": "inlineCode",
              "value": "mapfile.txt"
            },
            {
              "type": "text",
              "value": ", and this information can be passed to F2PY by using the "
            },
            {
              "type": "inlineCode",
              "value": "--f2cmap"
            },
            {
              "type": "text",
              "value": " option."
            }
          ],
          "type": "paragraph"
        },
        {
          "args": "sh",
          "children": [],
          "name": "code-block",
          "options": {},
          "type": "mystDirective",
          "value": "f2py -c func1.f -m func1 --f2cmap mapfile.txt"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "For more information, see F2Py source code "
            },
            {
              "type": "inlineCode",
              "value": "numpy/f2py/capi_maps.py"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 1,
      "target": null,
      "title": "Dealing with KIND specifiers",
      "type": "Section"
    },
    {
      "children": [],
      "level": 1,
      "target": "Character strings",
      "title": "Character strings",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "In Fortran, assumed length character string arguments are declared as "
            },
            {
              "type": "inlineCode",
              "value": "character*(*)"
            },
            {
              "type": "text",
              "value": " or "
            },
            {
              "type": "inlineCode",
              "value": "character(len=*)"
            },
            {
              "type": "text",
              "value": ", that is, the length of such arguments are determined by the actual string arguments at runtime. For "
            },
            {
              "type": "inlineCode",
              "value": "intent(in)"
            },
            {
              "type": "text",
              "value": " arguments, this lack of length information poses no problems for f2py to construct functional wrapper functions. However, for "
            },
            {
              "type": "inlineCode",
              "value": "intent(out)"
            },
            {
              "type": "text",
              "value": " arguments, the lack of length information is problematic for f2py generated wrappers because there is no size information available for creating memory buffers for such arguments and F2PY assumes the length is 0.  Depending on how the length of assumed length character strings are specified, there exist ways to workaround this problem, as exemplified below."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "If the length of the "
            },
            {
              "type": "inlineCode",
              "value": "character*(*)"
            },
            {
              "type": "text",
              "value": " output argument is determined by the state of other input arguments, the required connection can be established in a signature file or within a f2py-comment by adding an extra declaration for the corresponding argument that specifies the length in character selector part. For example, consider a Fortran file "
            },
            {
              "type": "inlineCode",
              "value": "asterisk1.f90"
            },
            {
              "type": "text",
              "value": ":"
            }
          ],
          "type": "paragraph"
        },
        {
          "args": "./code/asterisk1.f90",
          "children": [],
          "name": "include",
          "options": {
            "literal": ""
          },
          "type": "mystDirective",
          "value": ""
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Compile it with "
            },
            {
              "type": "inlineCode",
              "value": "f2py -c asterisk1.f90 -m asterisk1"
            },
            {
              "type": "text",
              "value": " and then in Python:"
            }
          ],
          "type": "paragraph"
        },
        {
          "args": "./code/results/asterisk1_session.dat",
          "children": [],
          "name": "include",
          "options": {
            "literal": ""
          },
          "type": "mystDirective",
          "value": ""
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Notice that the extra declaration "
            },
            {
              "type": "inlineCode",
              "value": "character(f2py_len=12) s"
            },
            {
              "type": "text",
              "value": " is interpreted only by f2py and in the "
            },
            {
              "type": "inlineCode",
              "value": "f2py_len="
            },
            {
              "type": "text",
              "value": " specification one can use C-expressions as a length value."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "In the following example:"
            }
          ],
          "type": "paragraph"
        },
        {
          "args": "./code/asterisk2.f90",
          "children": [],
          "name": "include",
          "options": {
            "literal": ""
          },
          "type": "mystDirective",
          "value": ""
        },
        {
          "children": [
            {
              "type": "text",
              "value": "the length of the output assumed length string depends on an input argument "
            },
            {
              "type": "inlineCode",
              "value": "n"
            },
            {
              "type": "text",
              "value": ", after wrapping with F2PY, in Python:"
            }
          ],
          "type": "paragraph"
        },
        {
          "args": "./code/results/asterisk2_session.dat",
          "children": [],
          "name": "include",
          "options": {
            "literal": ""
          },
          "type": "mystDirective",
          "value": ""
        }
      ],
      "level": 2,
      "target": null,
      "title": "Assumed length character strings",
      "type": "Section"
    }
  ],
  "content": {},
  "example_section_data": {
    "children": [],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": null,
  "item_line": null,
  "item_type": null,
  "ordered_sections": [],
  "references": null,
  "see_also": [],
  "signature": {
    "type": "Signature",
    "value": null
  },
  "type": "DocBlob"
}