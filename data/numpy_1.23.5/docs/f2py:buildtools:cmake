{
  "aliases": [],
  "arbitrary": [
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "In terms of complexity, "
            },
            {
              "type": "inlineCode",
              "value": "cmake"
            },
            {
              "type": "text",
              "value": " falls between "
            },
            {
              "type": "inlineCode",
              "value": "make"
            },
            {
              "type": "text",
              "value": " and "
            },
            {
              "type": "inlineCode",
              "value": "meson"
            },
            {
              "type": "text",
              "value": ". The learning curve is steeper since CMake syntax is not pythonic and is closer to "
            },
            {
              "type": "inlineCode",
              "value": "make"
            },
            {
              "type": "text",
              "value": " with environment variables."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "However, the trade-off is enhanced flexibility and support for most architectures and compilers. An introduction to the syntax is out of scope for this document, but this "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "extensive CMake collection"
            },
            {
              "type": "text",
              "value": " of resources is great."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "children": [
                {
                  "type": "text",
                  "value": "note "
                }
              ],
              "type": "admonitionTitle"
            },
            {
              "children": [
                {
                  "type": "inlineCode",
                  "value": "cmake"
                },
                {
                  "type": "text",
                  "value": " is very popular for mixed-language systems, however support for "
                },
                {
                  "type": "inlineCode",
                  "value": "f2py"
                },
                {
                  "type": "text",
                  "value": " is not particularly native or pleasant; and a more natural approach is to consider "
                },
                {
                  "domain": null,
                  "role": "ref",
                  "type": "Directive",
                  "value": "f2py-skbuild"
                }
              ],
              "type": "paragraph"
            }
          ],
          "kind": "note",
          "type": "admonition"
        }
      ],
      "level": 0,
      "target": "f2py-cmake",
      "title": "Using via ``cmake``",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Returning to the "
            },
            {
              "type": "inlineCode",
              "value": "fib"
            },
            {
              "type": "text",
              "value": "  example from "
            },
            {
              "type": "inlineCode",
              "value": "f2py-getting-started"
            },
            {
              "type": "text",
              "value": " section."
            }
          ],
          "type": "paragraph"
        },
        {
          "args": "./../code/fib1.f",
          "children": [],
          "name": "literalinclude",
          "options": {
            "language": "fortran"
          },
          "type": "mystDirective",
          "value": ""
        },
        {
          "children": [
            {
              "type": "text",
              "value": "We do not need to explicitly generate the "
            },
            {
              "type": "inlineCode",
              "value": "python -m numpy.f2py fib1.f"
            },
            {
              "type": "text",
              "value": " output, which is "
            },
            {
              "type": "inlineCode",
              "value": "fib1module.c"
            },
            {
              "type": "text",
              "value": ", which is beneficial. With this; we can now initialize a "
            },
            {
              "type": "inlineCode",
              "value": "CMakeLists.txt"
            },
            {
              "type": "text",
              "value": " file as follows:"
            }
          ],
          "type": "paragraph"
        },
        {
          "args": "./../code/CMakeLists.txt",
          "children": [],
          "name": "literalinclude",
          "options": {
            "language": "cmake"
          },
          "type": "mystDirective",
          "value": ""
        },
        {
          "children": [
            {
              "type": "text",
              "value": "A key element of the "
            },
            {
              "type": "inlineCode",
              "value": "CMakeLists.txt"
            },
            {
              "type": "text",
              "value": " file defined above is that the "
            },
            {
              "type": "inlineCode",
              "value": "add_custom_command"
            },
            {
              "type": "text",
              "value": " is used to generate the wrapper "
            },
            {
              "type": "inlineCode",
              "value": "C"
            },
            {
              "type": "text",
              "value": " files and then added as a dependency of the actual shared library target via a "
            },
            {
              "type": "inlineCode",
              "value": "add_custom_target"
            },
            {
              "type": "text",
              "value": " directive which prevents the command from running every time. Additionally, the method used for obtaining the "
            },
            {
              "type": "inlineCode",
              "value": "fortranobject.c"
            },
            {
              "type": "text",
              "value": " file can also be used to grab the "
            },
            {
              "type": "inlineCode",
              "value": "numpy"
            },
            {
              "type": "text",
              "value": " headers on older "
            },
            {
              "type": "inlineCode",
              "value": "cmake"
            },
            {
              "type": "text",
              "value": " versions."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "This then works in the same manner as the other modules, although the naming conventions are different and the output library is not automatically prefixed with the "
            },
            {
              "type": "inlineCode",
              "value": "cython"
            },
            {
              "type": "text",
              "value": " information."
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": "ls .\n# CMakeLists.txt fib1.f\ncmake -S . -B build\ncmake --build build\ncd build\npython -c \"import numpy as np; import fibby; a = np.zeros(9); fibby.fib(a); print (a)\"\n# [ 0.  1.  1.  2.  3.  5.  8. 13. 21.]"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "This is particularly useful where an existing toolchain already exists and "
            },
            {
              "type": "inlineCode",
              "value": "scikit-build"
            },
            {
              "type": "text",
              "value": " or other additional "
            },
            {
              "type": "inlineCode",
              "value": "python"
            },
            {
              "type": "text",
              "value": " dependencies are discouraged."
            }
          ],
          "type": "paragraph"
        },
        {
          "placeholder": "target",
          "type": "Unimplemented",
          "value": ".. _extensive CMake collection: https://cliutils.gitlab.io/modern-cmake/"
        }
      ],
      "level": 1,
      "target": null,
      "title": "Fibonacci walkthrough (F77)",
      "type": "Section"
    }
  ],
  "content": {},
  "example_section_data": {
    "children": [],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": null,
  "item_line": null,
  "item_type": null,
  "ordered_sections": [],
  "references": null,
  "see_also": [],
  "signature": {
    "type": "Signature",
    "value": null
  },
  "type": "DocBlob"
}