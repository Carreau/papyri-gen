{
  "aliases": [],
  "arbitrary": [
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "The key advantage gained by leveraging "
            },
            {
              "type": "inlineCode",
              "value": "meson"
            },
            {
              "type": "text",
              "value": " over the techniques described in "
            },
            {
              "type": "inlineCode",
              "value": "f2py-distutils"
            },
            {
              "type": "text",
              "value": " is that this feeds into existing systems and larger projects with ease. "
            },
            {
              "type": "inlineCode",
              "value": "meson"
            },
            {
              "type": "text",
              "value": " has a rather pythonic syntax which makes it more comfortable and amenable to extension for "
            },
            {
              "type": "inlineCode",
              "value": "python"
            },
            {
              "type": "text",
              "value": " users."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "children": [
                {
                  "type": "text",
                  "value": "note "
                }
              ],
              "type": "admonitionTitle"
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "Meson needs to be at-least "
                },
                {
                  "type": "inlineCode",
                  "value": "0.46.0"
                },
                {
                  "type": "text",
                  "value": " in order to resolve the "
                },
                {
                  "type": "inlineCode",
                  "value": "python"
                },
                {
                  "type": "text",
                  "value": " include directories."
                }
              ],
              "type": "paragraph"
            }
          ],
          "kind": "note",
          "type": "admonition"
        }
      ],
      "level": 0,
      "target": "f2py-meson",
      "title": "Using via ``meson``",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "We will need the generated "
            },
            {
              "type": "inlineCode",
              "value": "C"
            },
            {
              "type": "text",
              "value": " wrapper before we can use a general purpose build system like "
            },
            {
              "type": "inlineCode",
              "value": "meson"
            },
            {
              "type": "text",
              "value": ". We will acquire this by:"
            }
          ],
          "type": "paragraph"
        },
        {
          "args": "bash",
          "children": [],
          "name": "code-block",
          "options": {},
          "type": "mystDirective",
          "value": "python -m numpy.f2py fib1.f -m fib2"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Now, consider the following "
            },
            {
              "type": "inlineCode",
              "value": "meson.build"
            },
            {
              "type": "text",
              "value": " file for the "
            },
            {
              "type": "inlineCode",
              "value": "fib"
            },
            {
              "type": "text",
              "value": " and "
            },
            {
              "type": "inlineCode",
              "value": "scalar"
            },
            {
              "type": "text",
              "value": " examples from "
            },
            {
              "type": "inlineCode",
              "value": "f2py-getting-started"
            },
            {
              "type": "text",
              "value": " section:"
            }
          ],
          "type": "paragraph"
        },
        {
          "args": "../code/meson.build",
          "children": [],
          "name": "literalinclude",
          "options": {},
          "type": "mystDirective",
          "value": ""
        },
        {
          "children": [
            {
              "type": "text",
              "value": "At this point the build will complete, but the import will fail:"
            }
          ],
          "type": "paragraph"
        },
        {
          "args": "bash",
          "children": [],
          "name": "code-block",
          "options": {},
          "type": "mystDirective",
          "value": "meson setup builddir\nmeson compile -C builddir\ncd builddir\npython -c 'import fib2'\nTraceback (most recent call last):\nFile \"<string>\", line 1, in <module>\nImportError: fib2.cpython-39-x86_64-linux-gnu.so: undefined symbol: FIB_\n# Check this isn't a false positive\nnm -A fib2.cpython-39-x86_64-linux-gnu.so | grep FIB_\nfib2.cpython-39-x86_64-linux-gnu.so: U FIB_"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Recall that the original example, as reproduced below, was in SCREAMCASE:"
            }
          ],
          "type": "paragraph"
        },
        {
          "args": "./../code/fib1.f",
          "children": [],
          "name": "literalinclude",
          "options": {
            "language": "fortran"
          },
          "type": "mystDirective",
          "value": ""
        },
        {
          "children": [
            {
              "type": "text",
              "value": "With the standard approach, the subroutine exposed to "
            },
            {
              "type": "inlineCode",
              "value": "python"
            },
            {
              "type": "text",
              "value": " is "
            },
            {
              "type": "inlineCode",
              "value": "fib"
            },
            {
              "type": "text",
              "value": " and not "
            },
            {
              "type": "inlineCode",
              "value": "FIB"
            },
            {
              "type": "text",
              "value": ". This means we have a few options. One approach (where possible) is to lowercase the original Fortran file with say:"
            }
          ],
          "type": "paragraph"
        },
        {
          "args": "bash",
          "children": [],
          "name": "code-block",
          "options": {},
          "type": "mystDirective",
          "value": "tr \"[:upper:]\" \"[:lower:]\" < fib1.f > fib1.f\npython -m numpy.f2py fib1.f -m fib2\nmeson --wipe builddir\nmeson compile -C builddir\ncd builddir\npython -c 'import fib2'"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "However this requires the ability to modify the source which is not always possible. The easiest way to solve this is to let "
            },
            {
              "type": "inlineCode",
              "value": "f2py"
            },
            {
              "type": "text",
              "value": " deal with it:"
            }
          ],
          "type": "paragraph"
        },
        {
          "args": "bash",
          "children": [],
          "name": "code-block",
          "options": {},
          "type": "mystDirective",
          "value": "python -m numpy.f2py fib1.f -m fib2 --lower\nmeson --wipe builddir\nmeson compile -C builddir\ncd builddir\npython -c 'import fib2'"
        }
      ],
      "level": 1,
      "target": null,
      "title": "Fibonacci Walkthrough (F77)",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "A major pain point in the workflow defined above, is the manual tracking of inputs. Although it would require more effort to figure out the actual outputs for reasons discussed in "
            },
            {
              "type": "inlineCode",
              "value": "f2py-bldsys"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "children": [
                {
                  "type": "text",
                  "value": "note "
                }
              ],
              "type": "admonitionTitle"
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "From NumPy "
                },
                {
                  "type": "inlineCode",
                  "value": "1.22.4"
                },
                {
                  "type": "text",
                  "value": " onwards, "
                },
                {
                  "type": "inlineCode",
                  "value": "f2py"
                },
                {
                  "type": "text",
                  "value": " will deterministically generate wrapper files based on the input file Fortran standard (F77 or greater). "
                },
                {
                  "type": "inlineCode",
                  "value": "--skip-empty-wrappers"
                },
                {
                  "type": "text",
                  "value": " can be passed to "
                },
                {
                  "type": "inlineCode",
                  "value": "f2py"
                },
                {
                  "type": "text",
                  "value": " to restore the previous behaviour of only generating wrappers when needed by the input ."
                }
              ],
              "type": "paragraph"
            }
          ],
          "kind": "note",
          "type": "admonition"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "However, we can augment our workflow in a straightforward to take into account files for which the outputs are known when the build system is set up."
            }
          ],
          "type": "paragraph"
        },
        {
          "args": "../code/meson_upd.build",
          "children": [],
          "name": "literalinclude",
          "options": {},
          "type": "mystDirective",
          "value": ""
        },
        {
          "children": [
            {
              "type": "text",
              "value": "This can be compiled and run as before."
            }
          ],
          "type": "paragraph"
        },
        {
          "args": "bash",
          "children": [],
          "name": "code-block",
          "options": {},
          "type": "mystDirective",
          "value": "rm -rf builddir\nmeson setup builddir\nmeson compile -C builddir\ncd builddir\npython -c \"import numpy as np; import fibby; a = np.zeros(9); fibby.fib(a); print (a)\"\n# [ 0.  1.  1.  2.  3.  5.  8. 13. 21.]"
        }
      ],
      "level": 2,
      "target": null,
      "title": "Automating wrapper generation",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "It is worth keeping in mind the following:"
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "inlineCode",
                      "value": "meson"
                    },
                    {
                      "type": "text",
                      "value": " will default to passing "
                    },
                    {
                      "type": "inlineCode",
                      "value": "-fimplicit-none"
                    },
                    {
                      "type": "text",
                      "value": " under "
                    },
                    {
                      "type": "inlineCode",
                      "value": "gfortran"
                    },
                    {
                      "type": "text",
                      "value": " by   default, which differs from that of the standard "
                    },
                    {
                      "type": "inlineCode",
                      "value": "np.distutils"
                    },
                    {
                      "type": "text",
                      "value": " behaviour"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "It is not possible to use SCREAMCASE in this context, so either the contents   of the "
                    },
                    {
                      "type": "inlineCode",
                      "value": ".f"
                    },
                    {
                      "type": "text",
                      "value": " file or the generated wrapper "
                    },
                    {
                      "type": "inlineCode",
                      "value": ".c"
                    },
                    {
                      "type": "text",
                      "value": " needs to be lowered to   regular letters; which can be facilitated by the "
                    },
                    {
                      "type": "inlineCode",
                      "value": "--lower"
                    },
                    {
                      "type": "text",
                      "value": " option of   "
                    },
                    {
                      "type": "inlineCode",
                      "value": "F2PY"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            }
          ],
          "ordered": false,
          "spread": false,
          "start": 1,
          "type": "list"
        }
      ],
      "level": 1,
      "target": null,
      "title": "Salient points",
      "type": "Section"
    }
  ],
  "content": {},
  "example_section_data": {
    "children": [],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": null,
  "item_line": null,
  "item_type": null,
  "ordered_sections": [],
  "references": null,
  "see_also": [],
  "signature": {
    "type": "Signature",
    "value": null
  },
  "type": "DocBlob"
}