{
  "aliases": [],
  "arbitrary": [
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Wrapping Fortran or C functions to Python using F2PY consists of the following steps:"
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Creating the so-called "
                    },
                    {
                      "type": "inlineCode",
                      "value": "signature file <signature-file>"
                    },
                    {
                      "type": "text",
                      "value": " that contains   descriptions of wrappers to Fortran or C functions, also called the signatures   of the functions. For Fortran routines, F2PY can create an initial signature   file by scanning Fortran source codes and tracking all relevant information   needed to create wrapper functions."
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "children": [
                        {
                          "children": [
                            {
                              "type": "text",
                              "value": "Optionally, F2PY-created signature files can be edited to optimize wrapper     functions, which can make them \"smarter\" and more \"Pythonic\"."
                            }
                          ],
                          "type": "paragraph"
                        }
                      ],
                      "spread": false,
                      "type": "listItem"
                    }
                  ],
                  "ordered": false,
                  "spread": false,
                  "start": 1,
                  "type": "list"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "F2PY reads a signature file and writes a Python C/API module containing   Fortran/C/Python bindings."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "F2PY compiles all sources and builds an extension module containing   the wrappers."
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "children": [
                        {
                          "children": [
                            {
                              "type": "text",
                              "value": "In building the extension modules, F2PY uses "
                            },
                            {
                              "type": "inlineCode",
                              "value": "numpy_distutils"
                            },
                            {
                              "type": "text",
                              "value": " which     supports a number of Fortran 77/90/95 compilers, including Gnu, Intel, Sun     Fortran, SGI MIPSpro, Absoft, NAG, Compaq etc. For different build systems,     see "
                            },
                            {
                              "type": "inlineCode",
                              "value": "f2py-bldsys"
                            },
                            {
                              "type": "text",
                              "value": "."
                            }
                          ],
                          "type": "paragraph"
                        }
                      ],
                      "spread": false,
                      "type": "listItem"
                    },
                    {
                      "children": [
                        {
                          "children": [
                            {
                              "type": "text",
                              "value": "Depending on your operating system, you may need to install the Python     development headers (which provide the file "
                            },
                            {
                              "type": "inlineCode",
                              "value": "Python.h"
                            },
                            {
                              "type": "text",
                              "value": ") separately. In     Linux Debian-based distributions this package should be called "
                            },
                            {
                              "type": "inlineCode",
                              "value": "python3-dev"
                            },
                            {
                              "type": "text",
                              "value": ",     in Fedora-based distributions it is "
                            },
                            {
                              "type": "inlineCode",
                              "value": "python3-devel"
                            },
                            {
                              "type": "text",
                              "value": ". For macOS, depending     how Python was installed, your mileage may vary. In Windows, the headers are     typically installed already."
                            }
                          ],
                          "type": "paragraph"
                        }
                      ],
                      "spread": false,
                      "type": "listItem"
                    }
                  ],
                  "ordered": false,
                  "spread": false,
                  "start": 1,
                  "type": "list"
                }
              ],
              "spread": false,
              "type": "listItem"
            }
          ],
          "ordered": false,
          "spread": false,
          "start": 1,
          "type": "list"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Depending on the situation, these steps can be carried out in a single composite command or step-by-step; in which case some steps can be omitted or combined with others."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Below, we describe three typical approaches of using F2PY. These can be read in order of increasing effort, but also cater to different access levels depending on whether the Fortran code can be freely modified."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "The following example Fortran 77 code will be used for illustration, save it as "
            },
            {
              "type": "inlineCode",
              "value": "fib1.f"
            },
            {
              "type": "text",
              "value": ":"
            }
          ],
          "type": "paragraph"
        },
        {
          "args": "./code/fib1.f",
          "children": [],
          "name": "literalinclude",
          "options": {
            "language": "fortran"
          },
          "type": "mystDirective",
          "value": ""
        },
        {
          "children": [
            {
              "children": [
                {
                  "type": "text",
                  "value": "note "
                }
              ],
              "type": "admonitionTitle"
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "F2PY parses Fortran/C signatures to build wrapper functions to be used with Python. However, it is not a compiler, and does not check for additional errors in source code, nor does it implement the entire language standards. Some errors may pass silently (or as warnings) and need to be verified by the user."
                }
              ],
              "type": "paragraph"
            }
          ],
          "kind": "note",
          "type": "admonition"
        }
      ],
      "level": 0,
      "target": "f2py-getting-started",
      "title": "Three ways to wrap - getting started",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "The quickest way to wrap the Fortran subroutine "
            },
            {
              "type": "inlineCode",
              "value": "FIB"
            },
            {
              "type": "text",
              "value": " for use in Python is to run"
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": "python -m numpy.f2py -c fib1.f -m fib1"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "or, alternatively, if the "
            },
            {
              "type": "inlineCode",
              "value": "f2py"
            },
            {
              "type": "text",
              "value": " command-line tool is available,"
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": "f2py -c fib1.f -m fib1"
        },
        {
          "children": [
            {
              "children": [
                {
                  "type": "text",
                  "value": "note "
                }
              ],
              "type": "admonitionTitle"
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "Because the "
                },
                {
                  "type": "inlineCode",
                  "value": "f2py"
                },
                {
                  "type": "text",
                  "value": " command might not be available in all system, notably on Windows, we will use the "
                },
                {
                  "type": "inlineCode",
                  "value": "python -m numpy.f2py"
                },
                {
                  "type": "text",
                  "value": " command throughout this guide."
                }
              ],
              "type": "paragraph"
            }
          ],
          "kind": "note",
          "type": "admonition"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "This command compiles and wraps "
            },
            {
              "type": "inlineCode",
              "value": "fib1.f"
            },
            {
              "type": "text",
              "value": " ("
            },
            {
              "type": "inlineCode",
              "value": "-c"
            },
            {
              "type": "text",
              "value": ") to create the extension module "
            },
            {
              "type": "inlineCode",
              "value": "fib1.so"
            },
            {
              "type": "text",
              "value": " ("
            },
            {
              "type": "inlineCode",
              "value": "-m"
            },
            {
              "type": "text",
              "value": ") in the current directory. A list of command line options can be seen by executing "
            },
            {
              "type": "inlineCode",
              "value": "python -m numpy.f2py"
            },
            {
              "type": "text",
              "value": ".  Now, in Python the Fortran subroutine "
            },
            {
              "type": "inlineCode",
              "value": "FIB"
            },
            {
              "type": "text",
              "value": " is accessible via "
            },
            {
              "type": "inlineCode",
              "value": "fib1.fib"
            },
            {
              "type": "text",
              "value": "    "
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": ">>> import numpy as np\n>>> import fib1\n>>> print(fib1.fib.__doc__)\nfib(a,[n])\n\nWrapper for ``fib``.\n\nParameters\n----------\na : input rank-1 array('d') with bounds (n)\n\nOther Parameters\n----------------\nn : input int, optional\n    Default: len(a)\n\n>>> a = np.zeros(8, 'd')\n>>> fib1.fib(a)\n>>> print(a)\n[  0.   1.   1.   2.   3.   5.   8.  13.]"
        },
        {
          "children": [
            {
              "children": [
                {
                  "type": "text",
                  "value": "note "
                }
              ],
              "type": "admonitionTitle"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "Note that F2PY recognized that the second argument "
                        },
                        {
                          "type": "inlineCode",
                          "value": "n"
                        },
                        {
                          "type": "text",
                          "value": " is the   dimension of the first array argument "
                        },
                        {
                          "type": "inlineCode",
                          "value": "a"
                        },
                        {
                          "type": "text",
                          "value": ". Since by default all   arguments are input-only arguments, F2PY concludes that "
                        },
                        {
                          "type": "inlineCode",
                          "value": "n"
                        },
                        {
                          "type": "text",
                          "value": " can   be optional with the default value "
                        },
                        {
                          "type": "inlineCode",
                          "value": "len(a)"
                        },
                        {
                          "type": "text",
                          "value": "."
                        }
                      ],
                      "type": "paragraph"
                    }
                  ],
                  "spread": false,
                  "type": "listItem"
                },
                {
                  "children": [
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "One can use different values for optional "
                        },
                        {
                          "type": "inlineCode",
                          "value": "n"
                        },
                        {
                          "type": "text",
                          "value": "      "
                        }
                      ],
                      "type": "paragraph"
                    },
                    {
                      "type": "code",
                      "value": ">>> a1 = np.zeros(8, 'd')\n>>> fib1.fib(a1, 6)\n>>> print(a1)\n[ 0.  1.  1.  2.  3.  5.  0.  0.]"
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "but an exception is raised when it is incompatible with the input   array "
                        },
                        {
                          "type": "inlineCode",
                          "value": "a"
                        },
                        {
                          "type": "text",
                          "value": "      "
                        }
                      ],
                      "type": "paragraph"
                    },
                    {
                      "type": "code",
                      "value": ">>> fib1.fib(a, 10)\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nfib.error: (len(a)>=n) failed for 1st keyword n: fib:n=10\n>>>"
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "F2PY implements basic compatibility checks between related   arguments in order to avoid unexpected crashes."
                        }
                      ],
                      "type": "paragraph"
                    }
                  ],
                  "spread": false,
                  "type": "listItem"
                },
                {
                  "children": [
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "When a NumPy array that is "
                        },
                        {
                          "domain": null,
                          "role": "term",
                          "type": "Directive",
                          "value": "Fortran <Fortran order>"
                        },
                        {
                          "type": "text",
                          "value": "   "
                        },
                        {
                          "domain": null,
                          "role": "term",
                          "type": "Directive",
                          "value": "contiguous"
                        },
                        {
                          "type": "text",
                          "value": " and has a "
                        },
                        {
                          "type": "inlineCode",
                          "value": "dtype"
                        },
                        {
                          "type": "text",
                          "value": " corresponding to a presumed Fortran   type is used as an input array argument, then its C pointer is directly   passed to Fortran."
                        }
                      ],
                      "type": "paragraph"
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "Otherwise, F2PY makes a contiguous copy (with the proper "
                        },
                        {
                          "type": "inlineCode",
                          "value": "dtype"
                        },
                        {
                          "type": "text",
                          "value": ") of the   input array and passes a C pointer of the copy to the Fortran subroutine. As   a result, any possible changes to the (copy of) input array have no effect   on the original argument, as demonstrated below      "
                        }
                      ],
                      "type": "paragraph"
                    },
                    {
                      "type": "code",
                      "value": ">>> a = np.ones(8, 'i')\n>>> fib1.fib(a)\n>>> print(a)\n[1 1 1 1 1 1 1 1]"
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "Clearly, this is unexpected, as Fortran typically passes by reference. That   the above example worked with "
                        },
                        {
                          "type": "inlineCode",
                          "value": "dtype=float"
                        },
                        {
                          "type": "text",
                          "value": " is considered accidental."
                        }
                      ],
                      "type": "paragraph"
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "F2PY provides an "
                        },
                        {
                          "type": "inlineCode",
                          "value": "intent(inplace)"
                        },
                        {
                          "type": "text",
                          "value": " attribute that modifies the attributes   of an input array so that any changes made by the Fortran routine will be   reflected in the input argument. For example, if one specifies the   "
                        },
                        {
                          "type": "inlineCode",
                          "value": "intent(inplace) a"
                        },
                        {
                          "type": "text",
                          "value": " directive (see "
                        },
                        {
                          "domain": null,
                          "role": "ref",
                          "type": "Directive",
                          "value": "f2py-attributes"
                        },
                        {
                          "type": "text",
                          "value": " for details),   then the example above would read      "
                        }
                      ],
                      "type": "paragraph"
                    },
                    {
                      "type": "code",
                      "value": ">>> a = np.ones(8, 'i')\n>>> fib1.fib(a)\n>>> print(a)\n[  0.   1.   1.   2.   3.   5.   8.  13.]"
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "However, the recommended way to have changes made by Fortran subroutine   propagate to Python is to use the "
                        },
                        {
                          "type": "inlineCode",
                          "value": "intent(out)"
                        },
                        {
                          "type": "text",
                          "value": " attribute. That approach   is more efficient and also cleaner."
                        }
                      ],
                      "type": "paragraph"
                    }
                  ],
                  "spread": false,
                  "type": "listItem"
                },
                {
                  "children": [
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "The usage of "
                        },
                        {
                          "type": "inlineCode",
                          "value": "fib1.fib"
                        },
                        {
                          "type": "text",
                          "value": " in Python is very similar to using "
                        },
                        {
                          "type": "inlineCode",
                          "value": "FIB"
                        },
                        {
                          "type": "text",
                          "value": " in   Fortran. However, using "
                        },
                        {
                          "children": [
                            {
                              "type": "text",
                              "value": "in situ"
                            }
                          ],
                          "type": "emphasis"
                        },
                        {
                          "type": "text",
                          "value": " output arguments in Python is poor style,   as there are no safety mechanisms in Python to protect against wrong   argument types. When using Fortran or C, compilers discover any type   mismatches during the compilation process, but in Python the types must be   checked at runtime. Consequently, using "
                        },
                        {
                          "children": [
                            {
                              "type": "text",
                              "value": "in situ"
                            }
                          ],
                          "type": "emphasis"
                        },
                        {
                          "type": "text",
                          "value": " output arguments in Python   may lead to difficult to find bugs, not to mention the fact that the   codes will be less readable when all required type checks are implemented."
                        }
                      ],
                      "type": "paragraph"
                    }
                  ],
                  "spread": false,
                  "type": "listItem"
                }
              ],
              "ordered": false,
              "spread": false,
              "start": 1,
              "type": "list"
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "Though the approach to wrapping Fortran routines for Python discussed so far is very straightforward, it has several drawbacks (see the comments above). The drawbacks are due to the fact that there is no way for F2PY to determine the actual intention of the arguments; that is, there is ambiguity in distinguishing between input and output arguments. Consequently, F2PY assumes that all arguments are input arguments by default."
                }
              ],
              "type": "paragraph"
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "There are ways (see below) to remove this ambiguity by \"teaching\" F2PY about the true intentions of function arguments, and F2PY is then able to generate more explicit, easier to use, and less error prone wrappers for Fortran functions."
                }
              ],
              "type": "paragraph"
            }
          ],
          "kind": "note",
          "type": "admonition"
        }
      ],
      "level": 1,
      "target": null,
      "title": "The quick way",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "If we want to have more control over how F2PY will treat the interface to our Fortran code, we can apply the wrapping steps one by one."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "First, we create a signature file from "
                    },
                    {
                      "type": "inlineCode",
                      "value": "fib1.f"
                    },
                    {
                      "type": "text",
                      "value": " by running:"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "type": "code",
                  "value": "python -m numpy.f2py fib1.f -m fib2 -h fib1.pyf"
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The signature file is saved to "
                    },
                    {
                      "type": "inlineCode",
                      "value": "fib1.pyf"
                    },
                    {
                      "type": "text",
                      "value": " (see the "
                    },
                    {
                      "type": "inlineCode",
                      "value": "-h"
                    },
                    {
                      "type": "text",
                      "value": " flag) and its   contents are shown below."
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "args": "./code/fib1.pyf",
                  "children": [],
                  "name": "literalinclude",
                  "options": {
                    "language": "fortran"
                  },
                  "type": "mystDirective",
                  "value": ""
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Next, we'll teach F2PY that the argument "
                    },
                    {
                      "type": "inlineCode",
                      "value": "n"
                    },
                    {
                      "type": "text",
                      "value": " is an input argument (using the   "
                    },
                    {
                      "type": "inlineCode",
                      "value": "intent(in)"
                    },
                    {
                      "type": "text",
                      "value": " attribute) and that the result, i.e., the contents of "
                    },
                    {
                      "type": "inlineCode",
                      "value": "a"
                    },
                    {
                      "type": "text",
                      "value": "   after calling the Fortran function "
                    },
                    {
                      "type": "inlineCode",
                      "value": "FIB"
                    },
                    {
                      "type": "text",
                      "value": ", should be returned to Python   (using the "
                    },
                    {
                      "type": "inlineCode",
                      "value": "intent(out)"
                    },
                    {
                      "type": "text",
                      "value": " attribute). In addition, an array "
                    },
                    {
                      "type": "inlineCode",
                      "value": "a"
                    },
                    {
                      "type": "text",
                      "value": " should be   created dynamically using the size determined by the input argument "
                    },
                    {
                      "type": "inlineCode",
                      "value": "n"
                    },
                    {
                      "type": "text",
                      "value": "   (using the "
                    },
                    {
                      "type": "inlineCode",
                      "value": "depend(n)"
                    },
                    {
                      "type": "text",
                      "value": " attribute to indicate this dependence relation)."
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The contents of a suitably modified version of "
                    },
                    {
                      "type": "inlineCode",
                      "value": "fib1.pyf"
                    },
                    {
                      "type": "text",
                      "value": " (saved as   "
                    },
                    {
                      "type": "inlineCode",
                      "value": "fib2.pyf"
                    },
                    {
                      "type": "text",
                      "value": ") are as follows:"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "args": "./code/fib2.pyf",
                  "children": [],
                  "name": "literalinclude",
                  "options": {
                    "language": "fortran"
                  },
                  "type": "mystDirective",
                  "value": ""
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Finally, we build the extension module with "
                    },
                    {
                      "type": "inlineCode",
                      "value": "numpy.distutils"
                    },
                    {
                      "type": "text",
                      "value": " by running:"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "type": "code",
                  "value": "python -m numpy.f2py -c fib2.pyf fib1.f"
                }
              ],
              "spread": false,
              "type": "listItem"
            }
          ],
          "ordered": false,
          "spread": false,
          "start": 1,
          "type": "list"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "In Python    "
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": ">>> import fib2\n>>> print(fib2.fib.__doc__)\na = fib(n)\n\nWrapper for ``fib``.\n\nParameters\n----------\nn : input int\n\nReturns\n-------\na : rank-1 array('d') with bounds (n)\n\n>>> print(fib2.fib(8))\n[  0.   1.   1.   2.   3.   5.   8.  13.]"
        },
        {
          "children": [
            {
              "children": [
                {
                  "type": "text",
                  "value": "note "
                }
              ],
              "type": "admonitionTitle"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "The signature of "
                        },
                        {
                          "type": "inlineCode",
                          "value": "fib2.fib"
                        },
                        {
                          "type": "text",
                          "value": " now more closely corresponds to the intention   of the Fortran subroutine "
                        },
                        {
                          "type": "inlineCode",
                          "value": "FIB"
                        },
                        {
                          "type": "text",
                          "value": ": given the number "
                        },
                        {
                          "type": "inlineCode",
                          "value": "n"
                        },
                        {
                          "type": "text",
                          "value": ", "
                        },
                        {
                          "type": "inlineCode",
                          "value": "fib2.fib"
                        },
                        {
                          "type": "text",
                          "value": "   returns the first "
                        },
                        {
                          "type": "inlineCode",
                          "value": "n"
                        },
                        {
                          "type": "text",
                          "value": " Fibonacci numbers as a NumPy array. The new Python   signature "
                        },
                        {
                          "type": "inlineCode",
                          "value": "fib2.fib"
                        },
                        {
                          "type": "text",
                          "value": " also rules out the unexpected behaviour in   "
                        },
                        {
                          "type": "inlineCode",
                          "value": "fib1.fib"
                        },
                        {
                          "type": "text",
                          "value": "."
                        }
                      ],
                      "type": "paragraph"
                    }
                  ],
                  "spread": false,
                  "type": "listItem"
                },
                {
                  "children": [
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "Note that by default, using a single "
                        },
                        {
                          "type": "inlineCode",
                          "value": "intent(out)"
                        },
                        {
                          "type": "text",
                          "value": " also implies   "
                        },
                        {
                          "type": "inlineCode",
                          "value": "intent(hide)"
                        },
                        {
                          "type": "text",
                          "value": ". Arguments that have the "
                        },
                        {
                          "type": "inlineCode",
                          "value": "intent(hide)"
                        },
                        {
                          "type": "text",
                          "value": " attribute   specified will not be listed in the argument list of a wrapper function."
                        }
                      ],
                      "type": "paragraph"
                    }
                  ],
                  "spread": false,
                  "type": "listItem"
                }
              ],
              "ordered": false,
              "spread": false,
              "start": 1,
              "type": "list"
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "For more details, see "
                },
                {
                  "domain": null,
                  "role": "doc",
                  "type": "Directive",
                  "value": "signature-file"
                },
                {
                  "type": "text",
                  "value": "."
                }
              ],
              "type": "paragraph"
            }
          ],
          "kind": "note",
          "type": "admonition"
        }
      ],
      "level": 1,
      "target": null,
      "title": "The smart way",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "The \"smart way\" of wrapping Fortran functions, as explained above, is suitable for wrapping (e.g. third party) Fortran codes for which modifications to their source codes are not desirable nor even possible."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "However, if editing Fortran codes is acceptable, then the generation of an intermediate signature file can be skipped in most cases. F2PY specific attributes can be inserted directly into Fortran source codes using F2PY directives. A F2PY directive consists of special comment lines (starting with "
            },
            {
              "type": "inlineCode",
              "value": "Cf2py"
            },
            {
              "type": "text",
              "value": " or "
            },
            {
              "type": "inlineCode",
              "value": "!f2py"
            },
            {
              "type": "text",
              "value": ", for example) which are ignored by Fortran compilers but interpreted by F2PY as normal lines."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Consider a modified version of the previous Fortran code with F2PY directives, saved as "
            },
            {
              "type": "inlineCode",
              "value": "fib3.f"
            },
            {
              "type": "text",
              "value": ":"
            }
          ],
          "type": "paragraph"
        },
        {
          "args": "./code/fib3.f",
          "children": [],
          "name": "literalinclude",
          "options": {
            "language": "fortran"
          },
          "type": "mystDirective",
          "value": ""
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Building the extension module can be now carried out in one command    "
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": "python -m numpy.f2py -c -m fib3 fib3.f"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Notice that the resulting wrapper to "
            },
            {
              "type": "inlineCode",
              "value": "FIB"
            },
            {
              "type": "text",
              "value": " is as \"smart\" (unambiguous) as in the previous case    "
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": ">>> import fib3\n>>> print(fib3.fib.__doc__)\na = fib(n)\n\nWrapper for ``fib``.\n\nParameters\n----------\nn : input int\n\nReturns\n-------\na : rank-1 array('d') with bounds (n)\n\n>>> print(fib3.fib(8))\n[  0.   1.   1.   2.   3.   5.   8.  13.]"
        }
      ],
      "level": 1,
      "target": null,
      "title": "The quick and smart way",
      "type": "Section"
    }
  ],
  "content": {},
  "example_section_data": {
    "children": [],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": null,
  "item_line": null,
  "item_type": null,
  "ordered_sections": [],
  "references": null,
  "see_also": [],
  "signature": {
    "type": "Signature",
    "value": null
  },
  "type": "DocBlob"
}