{
  "aliases": [],
  "arbitrary": [
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "The interface definition file (.pyf) is how you can fine-tune the interface between Python and Fortran. The syntax specification for signature files ("
            },
            {
              "type": "inlineCode",
              "value": ".pyf"
            },
            {
              "type": "text",
              "value": " files) is modeled on the Fortran 90/95 language specification. Almost all Fortran 90/95 standard constructs are understood, both in free and fixed format (recall that Fortran 77 is a subset of Fortran 90/95). F2PY introduces some extensions to the Fortran 90/95 language specification that help in the design of the Fortran to Python interface, making it more \"Pythonic\"."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Signature files may contain arbitrary Fortran code so that any Fortran 90/95 codes can be treated as signature files. F2PY silently ignores Fortran constructs that are irrelevant for creating the interface. However, this also means that syntax errors are not caught by F2PY and will only be caught when the library is built."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "children": [
                {
                  "type": "text",
                  "value": "note "
                }
              ],
              "type": "admonitionTitle"
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "Currently, F2PY may fail with valid Fortran constructs, such as intrinsic modules. If this happens, you can check the "
                },
                {
                  "domain": null,
                  "role": null,
                  "type": "Directive",
                  "value": "NumPy GitHub issue tracker <https://github.com/numpy/numpy/issues>"
                },
                {
                  "type": "text",
                  "value": " for possible workarounds or work-in-progress ideas."
                }
              ],
              "type": "paragraph"
            }
          ],
          "kind": "note",
          "type": "admonition"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "In general, the contents of the signature files are case-sensitive. When scanning Fortran codes to generate a signature file, F2PY lowers all cases automatically except in multi-line blocks or when the "
            },
            {
              "type": "inlineCode",
              "value": "--no-lower"
            },
            {
              "type": "text",
              "value": " option is used."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "The syntax of signature files is presented below."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": "Signature file",
      "type": "Section"
    },
    {
      "children": [],
      "level": 1,
      "target": null,
      "title": "Signature files syntax",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "A signature file may contain one (recommended) or more "
            },
            {
              "type": "inlineCode",
              "value": "python\nmodule"
            },
            {
              "type": "text",
              "value": " blocks. The "
            },
            {
              "type": "inlineCode",
              "value": "python module"
            },
            {
              "type": "text",
              "value": " block describes the contents of a Python/C extension module "
            },
            {
              "type": "inlineCode",
              "value": "<modulename>module.c"
            },
            {
              "type": "text",
              "value": " that F2PY generates."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "children": [
                {
                  "type": "text",
                  "value": "warning "
                }
              ],
              "type": "admonitionTitle"
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "Exception: if "
                },
                {
                  "type": "inlineCode",
                  "value": "<modulename>"
                },
                {
                  "type": "text",
                  "value": " contains a substring "
                },
                {
                  "type": "inlineCode",
                  "value": "__user__"
                },
                {
                  "type": "text",
                  "value": ", then the corresponding "
                },
                {
                  "type": "inlineCode",
                  "value": "python module"
                },
                {
                  "type": "text",
                  "value": " block describes the signatures of call-back functions (see "
                },
                {
                  "domain": null,
                  "role": "ref",
                  "type": "Directive",
                  "value": "Call-back arguments"
                },
                {
                  "type": "text",
                  "value": ")."
                }
              ],
              "type": "paragraph"
            }
          ],
          "kind": "note",
          "type": "admonition"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "A "
            },
            {
              "type": "inlineCode",
              "value": "python module"
            },
            {
              "type": "text",
              "value": " block has the following structure    "
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": "python module <modulename>\n  [<usercode statement>]...\n  [\n  interface\n    <usercode statement>\n    <Fortran block data signatures>\n    <Fortran/C routine signatures>\n  end [interface]\n  ]...\n  [\n  interface\n    module <F90 modulename>\n      [<F90 module data type declarations>]\n      [<F90 module routine signatures>]\n    end [module [<F90 modulename>]]\n  end [interface]\n  ]...\nend [python module [<modulename>]]"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Here brackets "
            },
            {
              "type": "inlineCode",
              "value": "[]"
            },
            {
              "type": "text",
              "value": " indicate an optional section, dots "
            },
            {
              "type": "inlineCode",
              "value": "..."
            },
            {
              "type": "text",
              "value": " indicate one or more of a previous section. So, "
            },
            {
              "type": "inlineCode",
              "value": "[]..."
            },
            {
              "type": "text",
              "value": " is to be read as zero or more of a previous section."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "Python module block",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "The signature of a Fortran routine has the following structure    "
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": "[<typespec>] function | subroutine <routine name> \\\n              [ ( [<arguments>] ) ] [ result ( <entityname> ) ]\n  [<argument/variable type declarations>]\n  [<argument/variable attribute statements>]\n  [<use statements>]\n  [<common block statements>]\n  [<other statements>]\nend [ function | subroutine [<routine name>] ]"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "From a Fortran routine signature F2PY generates a Python/C extension function that has the following signature    "
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": "def <routine name>(<required arguments>[,<optional arguments>]):\n     ...\n     return <return variables>"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "The signature of a Fortran block data has the following structure    "
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": "block data [ <block data name> ]\n  [<variable type declarations>]\n  [<variable attribute statements>]\n  [<use statements>]\n  [<common block statements>]\n  [<include statements>]\nend [ block data [<block data name>] ]"
        }
      ],
      "level": 2,
      "target": null,
      "title": "Fortran/C routine signatures",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "The definition of the "
            },
            {
              "type": "inlineCode",
              "value": "<argument/variable type declaration>"
            },
            {
              "type": "text",
              "value": " part is"
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": "<typespec> [ [<attrspec>] :: ] <entitydecl>"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "where"
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": "<typespec> := byte | character [<charselector>]\n           | complex [<kindselector>] | real [<kindselector>]\n           | double complex | double precision\n           | integer [<kindselector>] | logical [<kindselector>]\n\n<charselector> := * <charlen>\n               | ( [len=] <len> [ , [kind=] <kind>] )\n               | ( kind= <kind> [ , len= <len> ] )\n<kindselector> := * <intlen> | ( [kind=] <kind> )\n\n<entitydecl> := <name> [ [ * <charlen> ] [ ( <arrayspec> ) ]\n                      | [ ( <arrayspec> ) ] * <charlen> ]\n                     | [ / <init_expr> / | = <init_expr> ] \\\n                       [ , <entitydecl> ]"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "and"
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "inlineCode",
                      "value": "<attrspec>"
                    },
                    {
                      "type": "text",
                      "value": " is a comma separated list of "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "attributes_"
                    },
                    {
                      "type": "text",
                      "value": ";"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "inlineCode",
                      "value": "<arrayspec>"
                    },
                    {
                      "type": "text",
                      "value": " is a comma separated list of dimension bounds;"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "inlineCode",
                      "value": "<init_expr>"
                    },
                    {
                      "type": "text",
                      "value": " is a "
                    },
                    {
                      "type": "inlineCode",
                      "value": "C expression <c-expressions>"
                    },
                    {
                      "type": "text",
                      "value": ";"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "inlineCode",
                      "value": "<intlen>"
                    },
                    {
                      "type": "text",
                      "value": " may be negative integer for "
                    },
                    {
                      "type": "inlineCode",
                      "value": "integer"
                    },
                    {
                      "type": "text",
                      "value": " type   specifications. In such cases "
                    },
                    {
                      "type": "inlineCode",
                      "value": "integer*<negintlen>"
                    },
                    {
                      "type": "text",
                      "value": " represents   unsigned C integers;"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            }
          ],
          "ordered": false,
          "spread": false,
          "start": 1,
          "type": "list"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "If an argument has no "
            },
            {
              "type": "inlineCode",
              "value": "<argument type declaration>"
            },
            {
              "type": "text",
              "value": ", its type is determined by applying "
            },
            {
              "type": "inlineCode",
              "value": "implicit"
            },
            {
              "type": "text",
              "value": " rules to its name."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": "type-declarations",
      "title": "Type declarations",
      "type": "Section"
    },
    {
      "children": [],
      "level": 2,
      "target": null,
      "title": "Statements",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "The "
            },
            {
              "type": "inlineCode",
              "value": "<argument/variable attribute statement>"
            },
            {
              "type": "text",
              "value": " is similar to the "
            },
            {
              "type": "inlineCode",
              "value": "<argument/variable type declaration>"
            },
            {
              "type": "text",
              "value": ", but without "
            },
            {
              "type": "inlineCode",
              "value": "<typespec>"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "An attribute statement cannot contain other attributes, and "
            },
            {
              "type": "inlineCode",
              "value": "<entitydecl>"
            },
            {
              "type": "text",
              "value": " can be only a list of names. See "
            },
            {
              "type": "inlineCode",
              "value": "f2py-attributes"
            },
            {
              "type": "text",
              "value": " for more details on the attributes that can be used by F2PY."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 3,
      "target": null,
      "title": "Attribute statements",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The definition of the "
                    },
                    {
                      "type": "inlineCode",
                      "value": "<use statement>"
                    },
                    {
                      "type": "text",
                      "value": " part is"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "type": "code",
                  "value": "use <modulename> [ , <rename_list> | , ONLY : <only_list> ]"
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "where"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "type": "code",
                  "value": "<rename_list> := <local_name> => <use_name> [ , <rename_list> ]"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Currently F2PY uses "
                    },
                    {
                      "type": "inlineCode",
                      "value": "use"
                    },
                    {
                      "type": "text",
                      "value": " statements only for linking call-back modules and   "
                    },
                    {
                      "type": "inlineCode",
                      "value": "external"
                    },
                    {
                      "type": "text",
                      "value": " arguments (call-back functions). See "
                    },
                    {
                      "type": "inlineCode",
                      "value": "Call-back arguments"
                    },
                    {
                      "type": "text",
                      "value": "."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            }
          ],
          "ordered": false,
          "spread": false,
          "start": 1,
          "type": "list"
        }
      ],
      "level": 3,
      "target": null,
      "title": "Use statements",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The definition of the "
                    },
                    {
                      "type": "inlineCode",
                      "value": "<common block statement>"
                    },
                    {
                      "type": "text",
                      "value": " part is"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "type": "code",
                  "value": "common / <common name> / <shortentitydecl>"
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "where"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "type": "code",
                  "value": "<shortentitydecl> := <name> [ ( <arrayspec> ) ] [ , <shortentitydecl> ]"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "If a "
                    },
                    {
                      "type": "inlineCode",
                      "value": "python module"
                    },
                    {
                      "type": "text",
                      "value": " block contains two or more "
                    },
                    {
                      "type": "inlineCode",
                      "value": "common"
                    },
                    {
                      "type": "text",
                      "value": " blocks   with the same name, the variables from the additional declarations   are appended.  The types of variables in "
                    },
                    {
                      "type": "inlineCode",
                      "value": "<shortentitydecl>"
                    },
                    {
                      "type": "text",
                      "value": " are   defined using "
                    },
                    {
                      "type": "inlineCode",
                      "value": "<argument type declarations>"
                    },
                    {
                      "type": "text",
                      "value": ". Note that the   corresponding "
                    },
                    {
                      "type": "inlineCode",
                      "value": "<argument type declarations>"
                    },
                    {
                      "type": "text",
                      "value": " may contain array   specifications; then these need not be specified in "
                    },
                    {
                      "type": "inlineCode",
                      "value": "<shortentitydecl>"
                    },
                    {
                      "type": "text",
                      "value": "."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            }
          ],
          "ordered": false,
          "spread": false,
          "start": 1,
          "type": "list"
        }
      ],
      "level": 3,
      "target": null,
      "title": "Common block statements",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The "
                    },
                    {
                      "type": "inlineCode",
                      "value": "<other statement>"
                    },
                    {
                      "type": "text",
                      "value": " part refers to any other Fortran language   constructs that are not described above. F2PY ignores most of them   except the following:"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "children": [
                        {
                          "children": [
                            {
                              "type": "inlineCode",
                              "value": "call"
                            },
                            {
                              "type": "text",
                              "value": " statements and function calls of "
                            },
                            {
                              "type": "inlineCode",
                              "value": "external"
                            },
                            {
                              "type": "text",
                              "value": " arguments     (see "
                            },
                            {
                              "type": "inlineCode",
                              "value": "more details on external arguments <external>"
                            },
                            {
                              "type": "text",
                              "value": ");"
                            }
                          ],
                          "type": "paragraph"
                        }
                      ],
                      "spread": false,
                      "type": "listItem"
                    },
                    {
                      "children": [
                        {
                          "children": [
                            {
                              "dd": [
                                {
                                  "type": "code",
                                  "value": "include '<filename>'\ninclude \"<filename>\""
                                },
                                {
                                  "children": [
                                    {
                                      "type": "text",
                                      "value": "If a file "
                                    },
                                    {
                                      "type": "inlineCode",
                                      "value": "<filename>"
                                    },
                                    {
                                      "type": "text",
                                      "value": " does not exist, the "
                                    },
                                    {
                                      "type": "inlineCode",
                                      "value": "include"
                                    },
                                    {
                                      "type": "text",
                                      "value": "       statement is ignored. Otherwise, the file "
                                    },
                                    {
                                      "type": "inlineCode",
                                      "value": "<filename>"
                                    },
                                    {
                                      "type": "text",
                                      "value": " is       included to a signature file.  "
                                    },
                                    {
                                      "type": "inlineCode",
                                      "value": "include"
                                    },
                                    {
                                      "type": "text",
                                      "value": " statements can be used       in any part of a signature file, also outside the Fortran/C       routine signature blocks."
                                    }
                                  ],
                                  "type": "paragraph"
                                }
                              ],
                              "dt": {
                                "children": [
                                  {
                                    "type": "inlineCode",
                                    "value": "include"
                                  },
                                  {
                                    "type": "text",
                                    "value": " statements"
                                  }
                                ],
                                "type": "paragraph"
                              },
                              "type": "DefListItem"
                            }
                          ],
                          "type": "DefList"
                        }
                      ],
                      "spread": false,
                      "type": "listItem"
                    },
                    {
                      "children": [
                        {
                          "children": [
                            {
                              "dd": [
                                {
                                  "type": "code",
                                  "value": "        implicit none\n\timplicit <list of implicit maps>"
                                },
                                {
                                  "children": [
                                    {
                                      "type": "text",
                                      "value": "where"
                                    }
                                  ],
                                  "type": "paragraph"
                                },
                                {
                                  "type": "code",
                                  "value": "<implicit map> := <typespec> ( <list of letters or range of letters> )"
                                },
                                {
                                  "children": [
                                    {
                                      "type": "text",
                                      "value": "Implicit rules are used to determine the type specification of       a variable (from the first-letter of its name) if the variable       is not defined using "
                                    },
                                    {
                                      "type": "inlineCode",
                                      "value": "<variable type declaration>"
                                    },
                                    {
                                      "type": "text",
                                      "value": ".  Default       implicit rules are given by:"
                                    }
                                  ],
                                  "type": "paragraph"
                                },
                                {
                                  "type": "code",
                                  "value": "implicit real (a-h,o-z,$_), integer (i-m)"
                                }
                              ],
                              "dt": {
                                "children": [
                                  {
                                    "type": "inlineCode",
                                    "value": "implicit"
                                  },
                                  {
                                    "type": "text",
                                    "value": " statements"
                                  }
                                ],
                                "type": "paragraph"
                              },
                              "type": "DefListItem"
                            }
                          ],
                          "type": "DefList"
                        }
                      ],
                      "spread": false,
                      "type": "listItem"
                    },
                    {
                      "children": [
                        {
                          "children": [
                            {
                              "dd": [
                                {
                                  "type": "code",
                                  "value": "entry <entry name> [([<arguments>])]"
                                },
                                {
                                  "children": [
                                    {
                                      "type": "text",
                                      "value": "F2PY generates wrappers for all entry names using the signature       of the routine block."
                                    }
                                  ],
                                  "type": "paragraph"
                                },
                                {
                                  "children": [
                                    {
                                      "children": [
                                        {
                                          "type": "text",
                                          "value": "note "
                                        }
                                      ],
                                      "type": "admonitionTitle"
                                    },
                                    {
                                      "children": [
                                        {
                                          "dd": [
                                            {
                                              "children": [
                                                {
                                                  "type": "text",
                                                  "value": "arbitrary subroutine or function allowing F2PY to generate a number of       wrappers from only one routine block signature. There are few       restrictions while doing this: "
                                                },
                                                {
                                                  "type": "inlineCode",
                                                  "value": "fortranname"
                                                },
                                                {
                                                  "type": "text",
                                                  "value": " cannot be used,       "
                                                },
                                                {
                                                  "type": "inlineCode",
                                                  "value": "callstatement"
                                                },
                                                {
                                                  "type": "text",
                                                  "value": " and "
                                                },
                                                {
                                                  "type": "inlineCode",
                                                  "value": "callprotoargument"
                                                },
                                                {
                                                  "type": "text",
                                                  "value": " can be used only if they are       valid for all entry routines, etc."
                                                }
                                              ],
                                              "type": "paragraph"
                                            }
                                          ],
                                          "dt": {
                                            "children": [
                                              {
                                                "type": "text",
                                                "value": "The "
                                              },
                                              {
                                                "type": "inlineCode",
                                                "value": "entry"
                                              },
                                              {
                                                "type": "text",
                                                "value": " statement can be used to describe the signature of an"
                                              }
                                            ],
                                            "type": "paragraph"
                                          },
                                          "type": "DefListItem"
                                        }
                                      ],
                                      "type": "DefList"
                                    }
                                  ],
                                  "kind": "note",
                                  "type": "admonition"
                                }
                              ],
                              "dt": {
                                "children": [
                                  {
                                    "type": "inlineCode",
                                    "value": "entry"
                                  },
                                  {
                                    "type": "text",
                                    "value": " statements"
                                  }
                                ],
                                "type": "paragraph"
                              },
                              "type": "DefListItem"
                            }
                          ],
                          "type": "DefList"
                        }
                      ],
                      "spread": false,
                      "type": "listItem"
                    }
                  ],
                  "ordered": false,
                  "spread": false,
                  "start": 1,
                  "type": "list"
                }
              ],
              "spread": false,
              "type": "listItem"
            }
          ],
          "ordered": false,
          "spread": false,
          "start": 1,
          "type": "list"
        }
      ],
      "level": 3,
      "target": null,
      "title": "Other statements",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "In addition, F2PY introduces the following statements:"
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "dd": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Uses a "
                    },
                    {
                      "type": "inlineCode",
                      "value": "Py_BEGIN_ALLOW_THREADS .. Py_END_ALLOW_THREADS"
                    },
                    {
                      "type": "text",
                      "value": " block   around the call to Fortran/C function."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "dt": {
                "children": [
                  {
                    "type": "inlineCode",
                    "value": "threadsafe"
                  }
                ],
                "type": "paragraph"
              },
              "type": "DefListItem"
            },
            {
              "dd": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Replaces the  F2PY generated call statement to Fortran/C function with   "
                    },
                    {
                      "type": "inlineCode",
                      "value": "<C-expr|multi-line block>"
                    },
                    {
                      "type": "text",
                      "value": ". The wrapped Fortran/C function is available   as "
                    },
                    {
                      "type": "inlineCode",
                      "value": "(*f2py_func)"
                    },
                    {
                      "type": "text",
                      "value": "."
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "To raise an exception, set "
                    },
                    {
                      "type": "inlineCode",
                      "value": "f2py_success = 0"
                    },
                    {
                      "type": "text",
                      "value": " in "
                    },
                    {
                      "type": "inlineCode",
                      "value": "<C-expr|multi-line\n  block>"
                    },
                    {
                      "type": "text",
                      "value": "."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "dt": {
                "children": [
                  {
                    "type": "inlineCode",
                    "value": "callstatement <C-expr|multi-line block>"
                  }
                ],
                "type": "paragraph"
              },
              "type": "DefListItem"
            },
            {
              "dd": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "When the "
                    },
                    {
                      "type": "inlineCode",
                      "value": "callstatement"
                    },
                    {
                      "type": "text",
                      "value": " statement is used, F2PY may not generate proper   prototypes for Fortran/C functions (because "
                    },
                    {
                      "type": "inlineCode",
                      "value": "<C-expr>"
                    },
                    {
                      "type": "text",
                      "value": " may contain function   calls, and F2PY has no way to determine what should be the proper prototype)."
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "With this statement you can explicitly specify the arguments of the   corresponding prototype      "
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "type": "code",
                  "value": "extern <return type> FUNC_F(<routine name>,<ROUTINE NAME>)(<callprotoargument>);"
                }
              ],
              "dt": {
                "children": [
                  {
                    "type": "inlineCode",
                    "value": "callprotoargument <C-typespecs>"
                  }
                ],
                "type": "paragraph"
              },
              "type": "DefListItem"
            },
            {
              "dd": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "F2PY allows for the use of an arbitrary "
                    },
                    {
                      "type": "inlineCode",
                      "value": "<routine name>"
                    },
                    {
                      "type": "text",
                      "value": " for a given   Fortran/C function. Then this statement is used for the "
                    },
                    {
                      "type": "inlineCode",
                      "value": "<actual\n  Fortran/C routine name>"
                    },
                    {
                      "type": "text",
                      "value": "."
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "If "
                    },
                    {
                      "type": "inlineCode",
                      "value": "fortranname"
                    },
                    {
                      "type": "text",
                      "value": " statement is used without   "
                    },
                    {
                      "type": "inlineCode",
                      "value": "<actual Fortran/C routine name>"
                    },
                    {
                      "type": "text",
                      "value": " then a dummy wrapper is   generated."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "dt": {
                "children": [
                  {
                    "type": "inlineCode",
                    "value": "fortranname [<actual Fortran/C routine name>]"
                  }
                ],
                "type": "paragraph"
              },
              "type": "DefListItem"
            },
            {
              "dd": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "When this is used inside a "
                    },
                    {
                      "type": "inlineCode",
                      "value": "python module"
                    },
                    {
                      "type": "text",
                      "value": " block, the given C code will   be inserted to generated C/API source just before wrapper function   definitions."
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Here you can define arbitrary C functions to be used for the   initialization of optional arguments."
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "For example, if "
                    },
                    {
                      "type": "inlineCode",
                      "value": "usercode"
                    },
                    {
                      "type": "text",
                      "value": " is used twice inside "
                    },
                    {
                      "type": "inlineCode",
                      "value": "python module"
                    },
                    {
                      "type": "text",
                      "value": " block   then the second multi-line block is inserted after the definition of   the external routines."
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "When used inside "
                    },
                    {
                      "type": "inlineCode",
                      "value": "<routine signature>"
                    },
                    {
                      "type": "text",
                      "value": ", then the given C code will be   inserted into the corresponding wrapper function just after the   declaration of  variables but before any C statements. So, the   "
                    },
                    {
                      "type": "inlineCode",
                      "value": "usercode"
                    },
                    {
                      "type": "text",
                      "value": " follow-up can contain both declarations and C statements."
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "When used inside the first "
                    },
                    {
                      "type": "inlineCode",
                      "value": "interface"
                    },
                    {
                      "type": "text",
                      "value": " block, then the given C code will   be inserted at the end of the initialization function of the extension   module. This is how the extension modules dictionary can be modified and   has many use-cases; for example, to define additional variables."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "dt": {
                "children": [
                  {
                    "type": "inlineCode",
                    "value": "usercode <multi-line block>"
                  }
                ],
                "type": "paragraph"
              },
              "type": "DefListItem"
            },
            {
              "dd": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "This is a multi-line block which will be inserted into the definition of a   module methods "
                    },
                    {
                      "type": "inlineCode",
                      "value": "PyMethodDef"
                    },
                    {
                      "type": "text",
                      "value": "-array. It must be a comma-separated list of   C arrays (see "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "Extending and Embedding"
                    },
                    {
                      "type": "text",
                      "value": " Python documentation for   details).  "
                    },
                    {
                      "type": "inlineCode",
                      "value": "pymethoddef"
                    },
                    {
                      "type": "text",
                      "value": " statement can be used only inside "
                    },
                    {
                      "type": "inlineCode",
                      "value": "python\n  module"
                    },
                    {
                      "type": "text",
                      "value": " block."
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "placeholder": "target",
                  "type": "Unimplemented",
                  "value": "__ https://docs.python.org/extending/index.html"
                }
              ],
              "dt": {
                "children": [
                  {
                    "type": "inlineCode",
                    "value": "pymethoddef <multiline block>"
                  }
                ],
                "type": "paragraph"
              },
              "type": "DefListItem"
            }
          ],
          "type": "DefList"
        }
      ],
      "level": 3,
      "target": null,
      "title": "F2PY statements",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "The following attributes can be used by F2PY."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "dd": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The corresponding argument is moved to the end of "
                    },
                    {
                      "type": "inlineCode",
                      "value": "<optional arguments>"
                    },
                    {
                      "type": "text",
                      "value": "   list. A default value for an optional argument can be specified via   "
                    },
                    {
                      "type": "inlineCode",
                      "value": "<init_expr>"
                    },
                    {
                      "type": "text",
                      "value": " (see the "
                    },
                    {
                      "type": "inlineCode",
                      "value": "entitydecl"
                    },
                    {
                      "type": "text",
                      "value": " "
                    },
                    {
                      "type": "inlineCode",
                      "value": "definition <type-declarations>"
                    },
                    {
                      "type": "text",
                      "value": ")"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "note "
                        }
                      ],
                      "type": "admonitionTitle"
                    },
                    {
                      "children": [
                        {
                          "children": [
                            {
                              "children": [
                                {
                                  "type": "text",
                                  "value": "The default value must be given as a valid C expression.   * Whenever "
                                },
                                {
                                  "type": "inlineCode",
                                  "value": "<init_expr>"
                                },
                                {
                                  "type": "text",
                                  "value": " is used, the "
                                },
                                {
                                  "type": "inlineCode",
                                  "value": "optional"
                                },
                                {
                                  "type": "text",
                                  "value": " attribute is set     automatically by F2PY.   * For an optional array argument, all its dimensions must be bounded."
                                }
                              ],
                              "type": "paragraph"
                            }
                          ],
                          "spread": false,
                          "type": "listItem"
                        }
                      ],
                      "ordered": false,
                      "spread": false,
                      "start": 1,
                      "type": "list"
                    }
                  ],
                  "kind": "note",
                  "type": "admonition"
                }
              ],
              "dt": {
                "children": [
                  {
                    "type": "inlineCode",
                    "value": "optional"
                  }
                ],
                "type": "paragraph"
              },
              "type": "DefListItem"
            },
            {
              "dd": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The corresponding argument with this attribute is considered mandatory. This   is the default. "
                    },
                    {
                      "type": "inlineCode",
                      "value": "required"
                    },
                    {
                      "type": "text",
                      "value": " should only be specified if there is a need to   disable the automatic "
                    },
                    {
                      "type": "inlineCode",
                      "value": "optional"
                    },
                    {
                      "type": "text",
                      "value": " setting when "
                    },
                    {
                      "type": "inlineCode",
                      "value": "<init_expr>"
                    },
                    {
                      "type": "text",
                      "value": " is used."
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "If a Python "
                    },
                    {
                      "type": "inlineCode",
                      "value": "None"
                    },
                    {
                      "type": "text",
                      "value": " object is used as a required argument, the argument is   treated as optional. That is, in the case of array arguments, the memory is   allocated. If "
                    },
                    {
                      "type": "inlineCode",
                      "value": "<init_expr>"
                    },
                    {
                      "type": "text",
                      "value": " is given, then the corresponding initialization   is carried out."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "dt": {
                "children": [
                  {
                    "type": "inlineCode",
                    "value": "required"
                  }
                ],
                "type": "paragraph"
              },
              "type": "DefListItem"
            },
            {
              "dd": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The corresponding variable is considered as an array with dimensions given in   "
                    },
                    {
                      "type": "inlineCode",
                      "value": "<arrayspec>"
                    },
                    {
                      "type": "text",
                      "value": "."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "dt": {
                "children": [
                  {
                    "type": "inlineCode",
                    "value": "dimension(<arrayspec>)"
                  }
                ],
                "type": "paragraph"
              },
              "type": "DefListItem"
            },
            {
              "dd": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "This specifies the \"intention\" of the corresponding argument. "
                    },
                    {
                      "type": "inlineCode",
                      "value": "<intentspec>"
                    },
                    {
                      "type": "text",
                      "value": "   is a comma separated list of the following keys:"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "children": [
                        {
                          "children": [
                            {
                              "dd": [
                                {
                                  "children": [
                                    {
                                      "type": "text",
                                      "value": "The corresponding argument is considered to be input-only. This means that       the value of the argument is passed to a Fortran/C function and that the       function is expected to not change the value of this argument."
                                    }
                                  ],
                                  "type": "paragraph"
                                }
                              ],
                              "dt": {
                                "children": [
                                  {
                                    "type": "inlineCode",
                                    "value": "in"
                                  }
                                ],
                                "type": "paragraph"
                              },
                              "type": "DefListItem"
                            }
                          ],
                          "type": "DefList"
                        }
                      ],
                      "spread": false,
                      "type": "listItem"
                    },
                    {
                      "children": [
                        {
                          "children": [
                            {
                              "dd": [
                                {
                                  "children": [
                                    {
                                      "type": "text",
                                      "value": "The corresponding argument is marked for input/output or as an "
                                    },
                                    {
                                      "children": [
                                        {
                                          "type": "text",
                                          "value": "in situ"
                                        }
                                      ],
                                      "type": "emphasis"
                                    },
                                    {
                                      "type": "text",
                                      "value": "       output argument. "
                                    },
                                    {
                                      "type": "inlineCode",
                                      "value": "intent(inout)"
                                    },
                                    {
                                      "type": "text",
                                      "value": " arguments can be only       "
                                    },
                                    {
                                      "type": "inlineCode",
                                      "value": "contiguous"
                                    },
                                    {
                                      "type": "text",
                                      "value": " NumPy arrays (in either the Fortran or C sense) with       proper type and size. The latter coincides with the default contiguous       concept used in NumPy and is effective only if "
                                    },
                                    {
                                      "type": "inlineCode",
                                      "value": "intent(c)"
                                    },
                                    {
                                      "type": "text",
                                      "value": " is used. F2PY       assumes Fortran contiguous arguments by default."
                                    }
                                  ],
                                  "type": "paragraph"
                                },
                                {
                                  "children": [
                                    {
                                      "children": [
                                        {
                                          "type": "text",
                                          "value": "note "
                                        }
                                      ],
                                      "type": "admonitionTitle"
                                    },
                                    {
                                      "children": [
                                        {
                                          "dd": [
                                            {
                                              "children": [
                                                {
                                                  "type": "text",
                                                  "value": "unexpected results. For example, scalar arguments using       "
                                                },
                                                {
                                                  "type": "inlineCode",
                                                  "value": "intent(inout)"
                                                },
                                                {
                                                  "type": "text",
                                                  "value": " are assumed to be array objects in order to have       "
                                                },
                                                {
                                                  "children": [
                                                    {
                                                      "type": "text",
                                                      "value": "in situ"
                                                    }
                                                  ],
                                                  "type": "emphasis"
                                                },
                                                {
                                                  "type": "text",
                                                  "value": " changes be effective. Use "
                                                },
                                                {
                                                  "type": "inlineCode",
                                                  "value": "intent(in,out)"
                                                },
                                                {
                                                  "type": "text",
                                                  "value": " instead."
                                                }
                                              ],
                                              "type": "paragraph"
                                            }
                                          ],
                                          "dt": {
                                            "children": [
                                              {
                                                "type": "text",
                                                "value": "Using "
                                              },
                                              {
                                                "type": "inlineCode",
                                                "value": "intent(inout)"
                                              },
                                              {
                                                "type": "text",
                                                "value": " is generally not recommended, as it can cause"
                                              }
                                            ],
                                            "type": "paragraph"
                                          },
                                          "type": "DefListItem"
                                        }
                                      ],
                                      "type": "DefList"
                                    }
                                  ],
                                  "kind": "note",
                                  "type": "admonition"
                                },
                                {
                                  "children": [
                                    {
                                      "type": "text",
                                      "value": "See also the "
                                    },
                                    {
                                      "type": "inlineCode",
                                      "value": "intent(inplace)"
                                    },
                                    {
                                      "type": "text",
                                      "value": " attribute."
                                    }
                                  ],
                                  "type": "paragraph"
                                }
                              ],
                              "dt": {
                                "children": [
                                  {
                                    "type": "inlineCode",
                                    "value": "inout"
                                  }
                                ],
                                "type": "paragraph"
                              },
                              "type": "DefListItem"
                            }
                          ],
                          "type": "DefList"
                        }
                      ],
                      "spread": false,
                      "type": "listItem"
                    },
                    {
                      "children": [
                        {
                          "children": [
                            {
                              "dd": [
                                {
                                  "children": [
                                    {
                                      "type": "text",
                                      "value": "The corresponding argument is considered to be an input/output or "
                                    },
                                    {
                                      "children": [
                                        {
                                          "type": "text",
                                          "value": "in situ"
                                        }
                                      ],
                                      "type": "emphasis"
                                    },
                                    {
                                      "type": "text",
                                      "value": " output       argument. "
                                    },
                                    {
                                      "type": "inlineCode",
                                      "value": "intent(inplace)"
                                    },
                                    {
                                      "type": "text",
                                      "value": " arguments must be NumPy arrays of a proper       size. If the type of an array is not \"proper\" or the array is       non-contiguous then the array will be modified in-place to fix the type and       make it contiguous."
                                    }
                                  ],
                                  "type": "paragraph"
                                },
                                {
                                  "children": [
                                    {
                                      "children": [
                                        {
                                          "type": "text",
                                          "value": "note "
                                        }
                                      ],
                                      "type": "admonitionTitle"
                                    },
                                    {
                                      "children": [
                                        {
                                          "type": "text",
                                          "value": "Using "
                                        },
                                        {
                                          "type": "inlineCode",
                                          "value": "intent(inplace)"
                                        },
                                        {
                                          "type": "text",
                                          "value": " is generally not recommended either."
                                        }
                                      ],
                                      "type": "paragraph"
                                    },
                                    {
                                      "children": [
                                        {
                                          "children": [
                                            {
                                              "type": "text",
                                              "value": "For example, when slices have been taken from an "
                                            },
                                            {
                                              "type": "inlineCode",
                                              "value": "intent(inplace)"
                                            },
                                            {
                                              "type": "text",
                                              "value": " argument       then after in-place changes, the data pointers for the slices may point to       an unallocated memory area."
                                            }
                                          ],
                                          "type": "paragraph"
                                        }
                                      ],
                                      "type": "blockquote"
                                    }
                                  ],
                                  "kind": "note",
                                  "type": "admonition"
                                }
                              ],
                              "dt": {
                                "children": [
                                  {
                                    "type": "inlineCode",
                                    "value": "inplace"
                                  }
                                ],
                                "type": "paragraph"
                              },
                              "type": "DefListItem"
                            }
                          ],
                          "type": "DefList"
                        }
                      ],
                      "spread": false,
                      "type": "listItem"
                    },
                    {
                      "children": [
                        {
                          "children": [
                            {
                              "dd": [
                                {
                                  "children": [
                                    {
                                      "type": "text",
                                      "value": "The corresponding argument is considered to be a return variable. It is appended to the       "
                                    },
                                    {
                                      "type": "inlineCode",
                                      "value": "<returned variables>"
                                    },
                                    {
                                      "type": "text",
                                      "value": " list. Using "
                                    },
                                    {
                                      "type": "inlineCode",
                                      "value": "intent(out)"
                                    },
                                    {
                                      "type": "text",
                                      "value": " sets "
                                    },
                                    {
                                      "type": "inlineCode",
                                      "value": "intent(hide)"
                                    },
                                    {
                                      "type": "text",
                                      "value": "       automatically, unless  "
                                    },
                                    {
                                      "type": "inlineCode",
                                      "value": "intent(in)"
                                    },
                                    {
                                      "type": "text",
                                      "value": " or "
                                    },
                                    {
                                      "type": "inlineCode",
                                      "value": "intent(inout)"
                                    },
                                    {
                                      "type": "text",
                                      "value": " are specified       as well."
                                    }
                                  ],
                                  "type": "paragraph"
                                },
                                {
                                  "children": [
                                    {
                                      "type": "text",
                                      "value": "By default, returned multidimensional arrays are Fortran-contiguous. If       "
                                    },
                                    {
                                      "type": "inlineCode",
                                      "value": "intent(c)"
                                    },
                                    {
                                      "type": "text",
                                      "value": " attribute is used, then the returned multidimensional arrays       are C-contiguous."
                                    }
                                  ],
                                  "type": "paragraph"
                                }
                              ],
                              "dt": {
                                "children": [
                                  {
                                    "type": "inlineCode",
                                    "value": "out"
                                  }
                                ],
                                "type": "paragraph"
                              },
                              "type": "DefListItem"
                            }
                          ],
                          "type": "DefList"
                        }
                      ],
                      "spread": false,
                      "type": "listItem"
                    },
                    {
                      "children": [
                        {
                          "children": [
                            {
                              "dd": [
                                {
                                  "children": [
                                    {
                                      "type": "text",
                                      "value": "The corresponding argument is removed from the list of required or optional       arguments. Typically "
                                    },
                                    {
                                      "type": "inlineCode",
                                      "value": "intent(hide)"
                                    },
                                    {
                                      "type": "text",
                                      "value": " is used with "
                                    },
                                    {
                                      "type": "inlineCode",
                                      "value": "intent(out)"
                                    },
                                    {
                                      "type": "text",
                                      "value": "       or when "
                                    },
                                    {
                                      "type": "inlineCode",
                                      "value": "<init_expr>"
                                    },
                                    {
                                      "type": "text",
                                      "value": " completely determines the value of the       argument like in the following example          "
                                    }
                                  ],
                                  "type": "paragraph"
                                },
                                {
                                  "type": "code",
                                  "value": "integer intent(hide),depend(a) :: n = len(a)\nreal intent(in),dimension(n) :: a"
                                }
                              ],
                              "dt": {
                                "children": [
                                  {
                                    "type": "inlineCode",
                                    "value": "hide"
                                  }
                                ],
                                "type": "paragraph"
                              },
                              "type": "DefListItem"
                            }
                          ],
                          "type": "DefList"
                        }
                      ],
                      "spread": false,
                      "type": "listItem"
                    },
                    {
                      "children": [
                        {
                          "children": [
                            {
                              "dd": [
                                {
                                  "children": [
                                    {
                                      "type": "text",
                                      "value": "The corresponding argument is treated as a C scalar or C array argument. For the case       of a scalar argument, its value is passed to a C function as a C scalar       argument (recall that Fortran scalar arguments are actually C pointer       arguments).  For array arguments, the wrapper function is assumed to treat       multidimensional arrays as C-contiguous arrays."
                                    }
                                  ],
                                  "type": "paragraph"
                                },
                                {
                                  "children": [
                                    {
                                      "type": "text",
                                      "value": "There is no need to use "
                                    },
                                    {
                                      "type": "inlineCode",
                                      "value": "intent(c)"
                                    },
                                    {
                                      "type": "text",
                                      "value": " for one-dimensional       arrays, irrespective of whether the wrapped function is in Fortran or C.       This is because the concepts of Fortran- and C contiguity overlap in       one-dimensional cases."
                                    }
                                  ],
                                  "type": "paragraph"
                                },
                                {
                                  "children": [
                                    {
                                      "type": "text",
                                      "value": "If "
                                    },
                                    {
                                      "type": "inlineCode",
                                      "value": "intent(c)"
                                    },
                                    {
                                      "type": "text",
                                      "value": " is used as a statement but without an entity       declaration list, then F2PY adds the "
                                    },
                                    {
                                      "type": "inlineCode",
                                      "value": "intent(c)"
                                    },
                                    {
                                      "type": "text",
                                      "value": " attribute to all       arguments."
                                    }
                                  ],
                                  "type": "paragraph"
                                },
                                {
                                  "children": [
                                    {
                                      "type": "text",
                                      "value": "Also, when wrapping C functions, one must use "
                                    },
                                    {
                                      "type": "inlineCode",
                                      "value": "intent(c)"
                                    },
                                    {
                                      "type": "text",
                                      "value": "       attribute for "
                                    },
                                    {
                                      "type": "inlineCode",
                                      "value": "<routine name>"
                                    },
                                    {
                                      "type": "text",
                                      "value": " in order to disable Fortran       specific "
                                    },
                                    {
                                      "type": "inlineCode",
                                      "value": "F_FUNC(..,..)"
                                    },
                                    {
                                      "type": "text",
                                      "value": " macros."
                                    }
                                  ],
                                  "type": "paragraph"
                                }
                              ],
                              "dt": {
                                "children": [
                                  {
                                    "type": "inlineCode",
                                    "value": "c"
                                  }
                                ],
                                "type": "paragraph"
                              },
                              "type": "DefListItem"
                            }
                          ],
                          "type": "DefList"
                        }
                      ],
                      "spread": false,
                      "type": "listItem"
                    },
                    {
                      "children": [
                        {
                          "children": [
                            {
                              "dd": [
                                {
                                  "children": [
                                    {
                                      "type": "text",
                                      "value": "The corresponding argument is treated as junk memory. No Fortran nor C contiguity       checks are carried out. Using "
                                    },
                                    {
                                      "type": "inlineCode",
                                      "value": "intent(cache)"
                                    },
                                    {
                                      "type": "text",
                                      "value": " makes sense only for array       arguments, also in conjunction with "
                                    },
                                    {
                                      "type": "inlineCode",
                                      "value": "intent(hide)"
                                    },
                                    {
                                      "type": "text",
                                      "value": " or "
                                    },
                                    {
                                      "type": "inlineCode",
                                      "value": "optional"
                                    },
                                    {
                                      "type": "text",
                                      "value": "       attributes."
                                    }
                                  ],
                                  "type": "paragraph"
                                }
                              ],
                              "dt": {
                                "children": [
                                  {
                                    "type": "inlineCode",
                                    "value": "cache"
                                  }
                                ],
                                "type": "paragraph"
                              },
                              "type": "DefListItem"
                            }
                          ],
                          "type": "DefList"
                        }
                      ],
                      "spread": false,
                      "type": "listItem"
                    },
                    {
                      "children": [
                        {
                          "children": [
                            {
                              "dd": [
                                {
                                  "children": [
                                    {
                                      "type": "text",
                                      "value": "Ensures that the original contents of "
                                    },
                                    {
                                      "type": "inlineCode",
                                      "value": "intent(in)"
                                    },
                                    {
                                      "type": "text",
                                      "value": " argument is       preserved. Typically used with the "
                                    },
                                    {
                                      "type": "inlineCode",
                                      "value": "intent(in,out)"
                                    },
                                    {
                                      "type": "text",
                                      "value": " attribute. F2PY       creates an optional argument "
                                    },
                                    {
                                      "type": "inlineCode",
                                      "value": "overwrite_<argument name>"
                                    },
                                    {
                                      "type": "text",
                                      "value": " with the       default value "
                                    },
                                    {
                                      "type": "inlineCode",
                                      "value": "0"
                                    },
                                    {
                                      "type": "text",
                                      "value": "."
                                    }
                                  ],
                                  "type": "paragraph"
                                }
                              ],
                              "dt": {
                                "children": [
                                  {
                                    "type": "inlineCode",
                                    "value": "copy"
                                  }
                                ],
                                "type": "paragraph"
                              },
                              "type": "DefListItem"
                            }
                          ],
                          "type": "DefList"
                        }
                      ],
                      "spread": false,
                      "type": "listItem"
                    },
                    {
                      "children": [
                        {
                          "children": [
                            {
                              "dd": [
                                {
                                  "children": [
                                    {
                                      "type": "text",
                                      "value": "This indicates that the original contents of the "
                                    },
                                    {
                                      "type": "inlineCode",
                                      "value": "intent(in)"
                                    },
                                    {
                                      "type": "text",
                                      "value": " argument       may be altered by the Fortran/C function.  F2PY creates an optional       argument "
                                    },
                                    {
                                      "type": "inlineCode",
                                      "value": "overwrite_<argument name>"
                                    },
                                    {
                                      "type": "text",
                                      "value": " with the default value "
                                    },
                                    {
                                      "type": "inlineCode",
                                      "value": "1"
                                    },
                                    {
                                      "type": "text",
                                      "value": "."
                                    }
                                  ],
                                  "type": "paragraph"
                                }
                              ],
                              "dt": {
                                "children": [
                                  {
                                    "type": "inlineCode",
                                    "value": "overwrite"
                                  }
                                ],
                                "type": "paragraph"
                              },
                              "type": "DefListItem"
                            }
                          ],
                          "type": "DefList"
                        }
                      ],
                      "spread": false,
                      "type": "listItem"
                    },
                    {
                      "children": [
                        {
                          "children": [
                            {
                              "dd": [
                                {
                                  "children": [
                                    {
                                      "type": "text",
                                      "value": "Replaces the returned name with "
                                    },
                                    {
                                      "type": "inlineCode",
                                      "value": "<new name>"
                                    },
                                    {
                                      "type": "text",
                                      "value": " in the "
                                    },
                                    {
                                      "type": "inlineCode",
                                      "value": "__doc__"
                                    },
                                    {
                                      "type": "text",
                                      "value": " string       of the wrapper function."
                                    }
                                  ],
                                  "type": "paragraph"
                                }
                              ],
                              "dt": {
                                "children": [
                                  {
                                    "type": "inlineCode",
                                    "value": "out=<new name>"
                                  }
                                ],
                                "type": "paragraph"
                              },
                              "type": "DefListItem"
                            }
                          ],
                          "type": "DefList"
                        }
                      ],
                      "spread": false,
                      "type": "listItem"
                    },
                    {
                      "children": [
                        {
                          "children": [
                            {
                              "dd": [
                                {
                                  "children": [
                                    {
                                      "type": "text",
                                      "value": "Constructs an external function suitable for calling Python functions       from Fortran. "
                                    },
                                    {
                                      "type": "inlineCode",
                                      "value": "intent(callback)"
                                    },
                                    {
                                      "type": "text",
                                      "value": " must be specified before the       corresponding "
                                    },
                                    {
                                      "type": "inlineCode",
                                      "value": "external"
                                    },
                                    {
                                      "type": "text",
                                      "value": " statement. If the 'argument' is not in       the argument list then it will be added to Python wrapper but only       by initializing an external function."
                                    }
                                  ],
                                  "type": "paragraph"
                                },
                                {
                                  "children": [
                                    {
                                      "children": [
                                        {
                                          "type": "text",
                                          "value": "note "
                                        }
                                      ],
                                      "type": "admonitionTitle"
                                    },
                                    {
                                      "children": [
                                        {
                                          "dd": [
                                            {
                                              "children": [
                                                {
                                                  "type": "text",
                                                  "value": "that the user implemented a function with a given prototype and linked       it to an executable. Don't use "
                                                },
                                                {
                                                  "type": "inlineCode",
                                                  "value": "intent(callback)"
                                                },
                                                {
                                                  "type": "text",
                                                  "value": " if the function       appears in the argument list of a Fortran routine."
                                                }
                                              ],
                                              "type": "paragraph"
                                            }
                                          ],
                                          "dt": {
                                            "children": [
                                              {
                                                "type": "text",
                                                "value": "Use "
                                              },
                                              {
                                                "type": "inlineCode",
                                                "value": "intent(callback)"
                                              },
                                              {
                                                "type": "text",
                                                "value": " in situations where the Fortran/C code assumes"
                                              }
                                            ],
                                            "type": "paragraph"
                                          },
                                          "type": "DefListItem"
                                        }
                                      ],
                                      "type": "DefList"
                                    }
                                  ],
                                  "kind": "note",
                                  "type": "admonition"
                                },
                                {
                                  "children": [
                                    {
                                      "type": "text",
                                      "value": "With "
                                    },
                                    {
                                      "type": "inlineCode",
                                      "value": "intent(hide)"
                                    },
                                    {
                                      "type": "text",
                                      "value": " or "
                                    },
                                    {
                                      "type": "inlineCode",
                                      "value": "optional"
                                    },
                                    {
                                      "type": "text",
                                      "value": " attributes specified and using a       wrapper function without specifying the callback argument in the argument       list; then the call-back function is assumed to be found in the  namespace       of the F2PY generated extension module where it can be set as a module       attribute by a user."
                                    }
                                  ],
                                  "type": "paragraph"
                                }
                              ],
                              "dt": {
                                "children": [
                                  {
                                    "type": "inlineCode",
                                    "value": "callback"
                                  }
                                ],
                                "type": "paragraph"
                              },
                              "type": "DefListItem"
                            }
                          ],
                          "type": "DefList"
                        }
                      ],
                      "spread": false,
                      "type": "listItem"
                    },
                    {
                      "children": [
                        {
                          "children": [
                            {
                              "dd": [
                                {
                                  "children": [
                                    {
                                      "type": "text",
                                      "value": "Defines an auxiliary C variable in the F2PY generated wrapper function.       Useful to save parameter values so that they can be accessed in       initialization expressions for other variables."
                                    }
                                  ],
                                  "type": "paragraph"
                                },
                                {
                                  "children": [
                                    {
                                      "children": [
                                        {
                                          "type": "text",
                                          "value": "note "
                                        }
                                      ],
                                      "type": "admonitionTitle"
                                    },
                                    {
                                      "children": [
                                        {
                                          "type": "inlineCode",
                                          "value": "intent(aux)"
                                        },
                                        {
                                          "type": "text",
                                          "value": " silently implies "
                                        },
                                        {
                                          "type": "inlineCode",
                                          "value": "intent(c)"
                                        },
                                        {
                                          "type": "text",
                                          "value": "."
                                        }
                                      ],
                                      "type": "paragraph"
                                    }
                                  ],
                                  "kind": "note",
                                  "type": "admonition"
                                }
                              ],
                              "dt": {
                                "children": [
                                  {
                                    "type": "inlineCode",
                                    "value": "aux"
                                  }
                                ],
                                "type": "paragraph"
                              },
                              "type": "DefListItem"
                            }
                          ],
                          "type": "DefList"
                        }
                      ],
                      "spread": false,
                      "type": "listItem"
                    }
                  ],
                  "ordered": false,
                  "spread": false,
                  "start": 1,
                  "type": "list"
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The following rules apply:"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "children": [
                        {
                          "children": [
                            {
                              "type": "text",
                              "value": "If none of "
                            },
                            {
                              "type": "inlineCode",
                              "value": "intent(in | inout | out | hide)"
                            },
                            {
                              "type": "text",
                              "value": " are specified,     "
                            },
                            {
                              "type": "inlineCode",
                              "value": "intent(in)"
                            },
                            {
                              "type": "text",
                              "value": " is assumed."
                            }
                          ],
                          "type": "paragraph"
                        },
                        {
                          "children": [
                            {
                              "children": [
                                {
                                  "children": [
                                    {
                                      "type": "inlineCode",
                                      "value": "intent(in,inout)"
                                    },
                                    {
                                      "type": "text",
                                      "value": " is "
                                    },
                                    {
                                      "type": "inlineCode",
                                      "value": "intent(in)"
                                    },
                                    {
                                      "type": "text",
                                      "value": ";"
                                    }
                                  ],
                                  "type": "paragraph"
                                }
                              ],
                              "spread": false,
                              "type": "listItem"
                            },
                            {
                              "children": [
                                {
                                  "children": [
                                    {
                                      "type": "inlineCode",
                                      "value": "intent(in,hide)"
                                    },
                                    {
                                      "type": "text",
                                      "value": " or "
                                    },
                                    {
                                      "type": "inlineCode",
                                      "value": "intent(inout,hide)"
                                    },
                                    {
                                      "type": "text",
                                      "value": " is "
                                    },
                                    {
                                      "type": "inlineCode",
                                      "value": "intent(hide)"
                                    },
                                    {
                                      "type": "text",
                                      "value": ";"
                                    }
                                  ],
                                  "type": "paragraph"
                                }
                              ],
                              "spread": false,
                              "type": "listItem"
                            },
                            {
                              "children": [
                                {
                                  "children": [
                                    {
                                      "type": "inlineCode",
                                      "value": "intent(out)"
                                    },
                                    {
                                      "type": "text",
                                      "value": " is "
                                    },
                                    {
                                      "type": "inlineCode",
                                      "value": "intent(out,hide)"
                                    },
                                    {
                                      "type": "text",
                                      "value": " unless "
                                    },
                                    {
                                      "type": "inlineCode",
                                      "value": "intent(in)"
                                    },
                                    {
                                      "type": "text",
                                      "value": " or       "
                                    },
                                    {
                                      "type": "inlineCode",
                                      "value": "intent(inout)"
                                    },
                                    {
                                      "type": "text",
                                      "value": " is specified."
                                    }
                                  ],
                                  "type": "paragraph"
                                }
                              ],
                              "spread": false,
                              "type": "listItem"
                            }
                          ],
                          "ordered": false,
                          "spread": false,
                          "start": 1,
                          "type": "list"
                        }
                      ],
                      "spread": false,
                      "type": "listItem"
                    },
                    {
                      "children": [
                        {
                          "children": [
                            {
                              "type": "text",
                              "value": "If "
                            },
                            {
                              "type": "inlineCode",
                              "value": "intent(copy)"
                            },
                            {
                              "type": "text",
                              "value": " or "
                            },
                            {
                              "type": "inlineCode",
                              "value": "intent(overwrite)"
                            },
                            {
                              "type": "text",
                              "value": " is used, then an additional     optional argument is introduced with a name "
                            },
                            {
                              "type": "inlineCode",
                              "value": "overwrite_<argument name>"
                            },
                            {
                              "type": "text",
                              "value": "     and a default value 0 or 1, respectively."
                            }
                          ],
                          "type": "paragraph"
                        },
                        {
                          "children": [
                            {
                              "children": [
                                {
                                  "children": [
                                    {
                                      "type": "inlineCode",
                                      "value": "intent(inout,inplace)"
                                    },
                                    {
                                      "type": "text",
                                      "value": " is "
                                    },
                                    {
                                      "type": "inlineCode",
                                      "value": "intent(inplace)"
                                    },
                                    {
                                      "type": "text",
                                      "value": ";"
                                    }
                                  ],
                                  "type": "paragraph"
                                }
                              ],
                              "spread": false,
                              "type": "listItem"
                            },
                            {
                              "children": [
                                {
                                  "children": [
                                    {
                                      "type": "inlineCode",
                                      "value": "intent(in,inplace)"
                                    },
                                    {
                                      "type": "text",
                                      "value": " is "
                                    },
                                    {
                                      "type": "inlineCode",
                                      "value": "intent(inplace)"
                                    },
                                    {
                                      "type": "text",
                                      "value": ";"
                                    }
                                  ],
                                  "type": "paragraph"
                                }
                              ],
                              "spread": false,
                              "type": "listItem"
                            },
                            {
                              "children": [
                                {
                                  "children": [
                                    {
                                      "type": "inlineCode",
                                      "value": "intent(hide)"
                                    },
                                    {
                                      "type": "text",
                                      "value": " disables "
                                    },
                                    {
                                      "type": "inlineCode",
                                      "value": "optional"
                                    },
                                    {
                                      "type": "text",
                                      "value": " and "
                                    },
                                    {
                                      "type": "inlineCode",
                                      "value": "required"
                                    },
                                    {
                                      "type": "text",
                                      "value": "."
                                    }
                                  ],
                                  "type": "paragraph"
                                }
                              ],
                              "spread": false,
                              "type": "listItem"
                            }
                          ],
                          "ordered": false,
                          "spread": false,
                          "start": 1,
                          "type": "list"
                        }
                      ],
                      "spread": false,
                      "type": "listItem"
                    }
                  ],
                  "ordered": false,
                  "spread": false,
                  "start": 1,
                  "type": "list"
                }
              ],
              "dt": {
                "children": [
                  {
                    "type": "inlineCode",
                    "value": "intent(<intentspec>)"
                  }
                ],
                "type": "paragraph"
              },
              "type": "DefListItem"
            },
            {
              "dd": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Performs a consistency check on the arguments by evaluating   "
                    },
                    {
                      "type": "inlineCode",
                      "value": "<C-booleanexpr>"
                    },
                    {
                      "type": "text",
                      "value": "; if "
                    },
                    {
                      "type": "inlineCode",
                      "value": "<C-booleanexpr>"
                    },
                    {
                      "type": "text",
                      "value": " returns 0, an exception is raised."
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "note "
                        }
                      ],
                      "type": "admonitionTitle"
                    },
                    {
                      "children": [
                        {
                          "dd": [
                            {
                              "children": [
                                {
                                  "type": "text",
                                  "value": "standard checks (e.g.  in a case of an array argument, it checks for the   proper shape and size). Use "
                                },
                                {
                                  "type": "inlineCode",
                                  "value": "check()"
                                },
                                {
                                  "type": "text",
                                  "value": " to disable checks   generated by F2PY."
                                }
                              ],
                              "type": "paragraph"
                            }
                          ],
                          "dt": {
                            "children": [
                              {
                                "type": "text",
                                "value": "If "
                              },
                              {
                                "type": "inlineCode",
                                "value": "check(..)"
                              },
                              {
                                "type": "text",
                                "value": " is not used then F2PY automatically generates a few"
                              }
                            ],
                            "type": "paragraph"
                          },
                          "type": "DefListItem"
                        }
                      ],
                      "type": "DefList"
                    }
                  ],
                  "kind": "note",
                  "type": "admonition"
                }
              ],
              "dt": {
                "children": [
                  {
                    "type": "inlineCode",
                    "value": "check([<C-booleanexpr>])"
                  }
                ],
                "type": "paragraph"
              },
              "type": "DefListItem"
            },
            {
              "dd": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "This declares that the corresponding argument depends on the values   of variables in the "
                    },
                    {
                      "type": "inlineCode",
                      "value": "<names>"
                    },
                    {
                      "type": "text",
                      "value": " list. For example, "
                    },
                    {
                      "type": "inlineCode",
                      "value": "<init_expr>"
                    },
                    {
                      "type": "text",
                      "value": "   may use the values of other arguments.  Using information given by   "
                    },
                    {
                      "type": "inlineCode",
                      "value": "depend(..)"
                    },
                    {
                      "type": "text",
                      "value": " attributes, F2PY ensures that arguments are   initialized in a proper order. If the "
                    },
                    {
                      "type": "inlineCode",
                      "value": "depend(..)"
                    },
                    {
                      "type": "text",
                      "value": " attribute is not   used then F2PY determines dependence relations automatically. Use   "
                    },
                    {
                      "type": "inlineCode",
                      "value": "depend()"
                    },
                    {
                      "type": "text",
                      "value": " to disable the dependence relations generated by F2PY."
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "When you edit dependence relations that were initially generated by   F2PY, be careful not to break the dependence relations of other   relevant variables. Another thing to watch out for is cyclic   dependencies. F2PY is able to detect cyclic dependencies   when constructing wrappers and it complains if any are found."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "dt": {
                "children": [
                  {
                    "type": "inlineCode",
                    "value": "depend([<names>])"
                  }
                ],
                "type": "paragraph"
              },
              "type": "DefListItem"
            },
            {
              "dd": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The corresponding variable is a Fortran 90 allocatable array defined as   Fortran 90 module data."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "dt": {
                "children": [
                  {
                    "type": "inlineCode",
                    "value": "allocatable"
                  }
                ],
                "type": "paragraph"
              },
              "type": "DefListItem"
            }
          ],
          "type": "DefList"
        },
        {
          "placeholder": "untarget",
          "type": "Unimplemented",
          "value": "_external:"
        },
        {
          "children": [
            {
              "dd": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The corresponding argument is a function provided by user. The   signature of this call-back function can be defined"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "children": [
                        {
                          "children": [
                            {
                              "type": "text",
                              "value": "in "
                            },
                            {
                              "type": "inlineCode",
                              "value": "__user__"
                            },
                            {
                              "type": "text",
                              "value": " module block,"
                            }
                          ],
                          "type": "paragraph"
                        }
                      ],
                      "spread": false,
                      "type": "listItem"
                    },
                    {
                      "children": [
                        {
                          "children": [
                            {
                              "type": "text",
                              "value": "or by demonstrative (or real, if the signature file is a real Fortran     code) call in the "
                            },
                            {
                              "type": "inlineCode",
                              "value": "<other statements>"
                            },
                            {
                              "type": "text",
                              "value": " block."
                            }
                          ],
                          "type": "paragraph"
                        }
                      ],
                      "spread": false,
                      "type": "listItem"
                    }
                  ],
                  "ordered": false,
                  "spread": false,
                  "start": 1,
                  "type": "list"
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "For example, F2PY generates from:"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "args": "fortran",
                  "children": [],
                  "name": "code-block",
                  "options": {},
                  "type": "mystDirective",
                  "value": "external cb_sub, cb_fun\n  integer n\n  real a(n),r\n  call cb_sub(a,n)\n  r = cb_fun(4)"
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "the following call-back signatures:"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "args": "fortran",
                  "children": [],
                  "name": "code-block",
                  "options": {},
                  "type": "mystDirective",
                  "value": "subroutine cb_sub(a,n)\n      real dimension(n) :: a\n      integer optional,check(len(a)>=n),depend(a) :: n=len(a)\n  end subroutine cb_sub\n  function cb_fun(e_4_e) result (r)\n      integer :: e_4_e\n      real :: r\n  end function cb_fun"
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The corresponding user-provided Python function are then:"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "args": "python",
                  "children": [],
                  "name": "code-block",
                  "options": {},
                  "type": "mystDirective",
                  "value": "def cb_sub(a,[n]):\n      ...\n      return\n  def cb_fun(e_4_e):\n      ...\n      return r"
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "See also the "
                    },
                    {
                      "type": "inlineCode",
                      "value": "intent(callback)"
                    },
                    {
                      "type": "text",
                      "value": " attribute."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "dt": {
                "children": [
                  {
                    "type": "inlineCode",
                    "value": "external"
                  }
                ],
                "type": "paragraph"
              },
              "type": "DefListItem"
            },
            {
              "dd": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "This indicates that the corresponding variable is a parameter and it must have   a fixed value. F2PY replaces all parameter occurrences by their corresponding   values."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "dt": {
                "children": [
                  {
                    "type": "inlineCode",
                    "value": "parameter"
                  }
                ],
                "type": "paragraph"
              },
              "type": "DefListItem"
            }
          ],
          "type": "DefList"
        }
      ],
      "level": 2,
      "target": "f2py-attributes",
      "title": "Attributes",
      "type": "Section"
    },
    {
      "children": [],
      "level": 2,
      "target": null,
      "title": "Extensions",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "The F2PY directives allow using F2PY signature file constructs in Fortran 77/90 source codes. With this feature one  can (almost) completely skip the intermediate signature file generation and apply F2PY directly to Fortran source codes."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "F2PY directives have the following form    "
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": "<comment char>f2py ..."
        },
        {
          "children": [
            {
              "type": "text",
              "value": "where allowed comment characters for fixed and free format Fortran codes are "
            },
            {
              "type": "inlineCode",
              "value": "cC*!#"
            },
            {
              "type": "text",
              "value": " and "
            },
            {
              "type": "inlineCode",
              "value": "!"
            },
            {
              "type": "text",
              "value": ", respectively. Everything that follows "
            },
            {
              "type": "inlineCode",
              "value": "<comment char>f2py"
            },
            {
              "type": "text",
              "value": " is ignored by a compiler but read by F2PY as a normal non-comment  Fortran line:"
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "children": [
                {
                  "type": "text",
                  "value": "note "
                }
              ],
              "type": "admonitionTitle"
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "When F2PY finds a line with F2PY directive, the directive is first replaced by 5 spaces and then the line is reread."
                }
              ],
              "type": "paragraph"
            }
          ],
          "kind": "note",
          "type": "admonition"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "For fixed format Fortran codes, "
            },
            {
              "type": "inlineCode",
              "value": "<comment char>"
            },
            {
              "type": "text",
              "value": " must be at the first column of a file, of course. For free format Fortran codes, the F2PY directives can appear anywhere in a file."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 3,
      "target": null,
      "title": "F2PY directives",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "C expressions are used in the following parts of signature files:"
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "inlineCode",
                      "value": "<init_expr>"
                    },
                    {
                      "type": "text",
                      "value": " for variable initialization;"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "inlineCode",
                      "value": "<C-booleanexpr>"
                    },
                    {
                      "type": "text",
                      "value": " of the "
                    },
                    {
                      "type": "inlineCode",
                      "value": "check"
                    },
                    {
                      "type": "text",
                      "value": " attribute;"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "inlineCode",
                      "value": "<arrayspec>"
                    },
                    {
                      "type": "text",
                      "value": " of the "
                    },
                    {
                      "type": "inlineCode",
                      "value": "dimension"
                    },
                    {
                      "type": "text",
                      "value": " attribute;"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "inlineCode",
                      "value": "callstatement"
                    },
                    {
                      "type": "text",
                      "value": " statement, here also a C multi-line block can be used."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            }
          ],
          "ordered": false,
          "spread": false,
          "start": 1,
          "type": "list"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "A C expression may contain:"
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "standard C constructs;"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "functions from "
                    },
                    {
                      "type": "inlineCode",
                      "value": "math.h"
                    },
                    {
                      "type": "text",
                      "value": " and "
                    },
                    {
                      "type": "inlineCode",
                      "value": "Python.h"
                    },
                    {
                      "type": "text",
                      "value": ";"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "variables from the argument list, presumably initialized before   according to given dependence relations;"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "the following CPP macros:"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "dd": [
                        {
                          "children": [
                            {
                              "type": "text",
                              "value": "Returns the rank of an array "
                            },
                            {
                              "type": "inlineCode",
                              "value": "<name>"
                            },
                            {
                              "type": "text",
                              "value": "."
                            }
                          ],
                          "type": "paragraph"
                        }
                      ],
                      "dt": {
                        "children": [
                          {
                            "type": "inlineCode",
                            "value": "f2py_rank(<name>)"
                          }
                        ],
                        "type": "paragraph"
                      },
                      "type": "DefListItem"
                    },
                    {
                      "dd": [
                        {
                          "children": [
                            {
                              "type": "text",
                              "value": "Returns the "
                            },
                            {
                              "type": "inlineCode",
                              "value": "<n>"
                            },
                            {
                              "type": "text",
                              "value": "-th dimension of an array "
                            },
                            {
                              "type": "inlineCode",
                              "value": "<name>"
                            },
                            {
                              "type": "text",
                              "value": "."
                            }
                          ],
                          "type": "paragraph"
                        }
                      ],
                      "dt": {
                        "children": [
                          {
                            "type": "inlineCode",
                            "value": "f2py_shape(<name>, <n>)"
                          }
                        ],
                        "type": "paragraph"
                      },
                      "type": "DefListItem"
                    },
                    {
                      "dd": [
                        {
                          "children": [
                            {
                              "type": "text",
                              "value": "Returns the length of an array "
                            },
                            {
                              "type": "inlineCode",
                              "value": "<name>"
                            },
                            {
                              "type": "text",
                              "value": "."
                            }
                          ],
                          "type": "paragraph"
                        }
                      ],
                      "dt": {
                        "children": [
                          {
                            "type": "inlineCode",
                            "value": "f2py_len(<name>)"
                          }
                        ],
                        "type": "paragraph"
                      },
                      "type": "DefListItem"
                    },
                    {
                      "dd": [
                        {
                          "children": [
                            {
                              "type": "text",
                              "value": "Returns the size of an array "
                            },
                            {
                              "type": "inlineCode",
                              "value": "<name>"
                            },
                            {
                              "type": "text",
                              "value": "."
                            }
                          ],
                          "type": "paragraph"
                        }
                      ],
                      "dt": {
                        "children": [
                          {
                            "type": "inlineCode",
                            "value": "f2py_size(<name>)"
                          }
                        ],
                        "type": "paragraph"
                      },
                      "type": "DefListItem"
                    },
                    {
                      "dd": [
                        {
                          "children": [
                            {
                              "type": "text",
                              "value": "Returns the itemsize of an array "
                            },
                            {
                              "type": "inlineCode",
                              "value": "<name>"
                            },
                            {
                              "type": "text",
                              "value": "."
                            }
                          ],
                          "type": "paragraph"
                        }
                      ],
                      "dt": {
                        "children": [
                          {
                            "type": "inlineCode",
                            "value": "f2py_itemsize(<name>)"
                          }
                        ],
                        "type": "paragraph"
                      },
                      "type": "DefListItem"
                    },
                    {
                      "dd": [
                        {
                          "children": [
                            {
                              "type": "text",
                              "value": "Returns the length of a string "
                            },
                            {
                              "type": "inlineCode",
                              "value": "<name>"
                            },
                            {
                              "type": "text",
                              "value": "."
                            }
                          ],
                          "type": "paragraph"
                        }
                      ],
                      "dt": {
                        "children": [
                          {
                            "type": "inlineCode",
                            "value": "f2py_slen(<name>)"
                          }
                        ],
                        "type": "paragraph"
                      },
                      "type": "DefListItem"
                    }
                  ],
                  "type": "DefList"
                }
              ],
              "spread": false,
              "type": "listItem"
            }
          ],
          "ordered": false,
          "spread": false,
          "start": 1,
          "type": "list"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "For initializing an array "
            },
            {
              "type": "inlineCode",
              "value": "<array name>"
            },
            {
              "type": "text",
              "value": ", F2PY generates a loop over all indices and dimensions that executes the following pseudo-statement    "
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": "<array name>(_i[0],_i[1],...) = <init_expr>;"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "where "
            },
            {
              "type": "inlineCode",
              "value": "_i[<i>]"
            },
            {
              "type": "text",
              "value": " refers to the "
            },
            {
              "type": "inlineCode",
              "value": "<i>"
            },
            {
              "type": "text",
              "value": "-th index value and that runs from "
            },
            {
              "type": "inlineCode",
              "value": "0"
            },
            {
              "type": "text",
              "value": " to "
            },
            {
              "type": "inlineCode",
              "value": "shape(<array name>,<i>)-1"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "For example, a function "
            },
            {
              "type": "inlineCode",
              "value": "myrange(n)"
            },
            {
              "type": "text",
              "value": " generated from the following signature"
            }
          ],
          "type": "paragraph"
        },
        {
          "args": "",
          "children": [],
          "name": "code-block",
          "options": {},
          "type": "mystDirective",
          "value": "subroutine myrange(a,n)\n  fortranname        ! myrange is a dummy wrapper\n  integer intent(in) :: n\n  real*8 intent(c,out),dimension(n),depend(n) :: a = _i[0]\nend subroutine myrange"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "is equivalent to "
            },
            {
              "type": "inlineCode",
              "value": "numpy.arange(n,dtype=float)"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "children": [
                {
                  "type": "text",
                  "value": "warning "
                }
              ],
              "type": "admonitionTitle"
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "F2PY may lower cases also in C expressions when scanning Fortran codes (see "
                },
                {
                  "type": "inlineCode",
                  "value": "--[no]-lower"
                },
                {
                  "type": "text",
                  "value": " option)."
                }
              ],
              "type": "paragraph"
            }
          ],
          "kind": "note",
          "type": "admonition"
        }
      ],
      "level": 3,
      "target": "c-expressions",
      "title": "C expressions",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "A multi-line block starts with "
            },
            {
              "type": "inlineCode",
              "value": "'''"
            },
            {
              "type": "text",
              "value": " (triple single-quotes) and ends with "
            },
            {
              "type": "inlineCode",
              "value": "'''"
            },
            {
              "type": "text",
              "value": " in some "
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "strictly"
                }
              ],
              "type": "emphasis"
            },
            {
              "type": "text",
              "value": " subsequent line.  Multi-line blocks can be used only within .pyf files. The contents of a multi-line block can be arbitrary (except that it cannot contain "
            },
            {
              "type": "inlineCode",
              "value": "'''"
            },
            {
              "type": "text",
              "value": ") and no transformations (e.g. lowering cases) are applied to it."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Currently, multi-line blocks can be used in the following constructs:"
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "as a C expression of the "
                    },
                    {
                      "type": "inlineCode",
                      "value": "callstatement"
                    },
                    {
                      "type": "text",
                      "value": " statement;"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "as a C type specification of the "
                    },
                    {
                      "type": "inlineCode",
                      "value": "callprotoargument"
                    },
                    {
                      "type": "text",
                      "value": " statement;"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "as a C code block of the "
                    },
                    {
                      "type": "inlineCode",
                      "value": "usercode"
                    },
                    {
                      "type": "text",
                      "value": " statement;"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "as a list of C arrays of the "
                    },
                    {
                      "type": "inlineCode",
                      "value": "pymethoddef"
                    },
                    {
                      "type": "text",
                      "value": " statement;"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "as documentation string."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            }
          ],
          "ordered": false,
          "spread": false,
          "start": 1,
          "type": "list"
        }
      ],
      "level": 3,
      "target": null,
      "title": "Multi-line blocks",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "F2PY extends char-selector specification, usable within a signature file or a F2PY directive, as follows    "
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": "<extended-charselector> := <charselector>\n                        | (f2py_len= <len>)"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "See "
            },
            {
              "type": "inlineCode",
              "value": "Character Strings"
            },
            {
              "type": "text",
              "value": " for usage."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "Extended char-selector",
      "type": "Section"
    }
  ],
  "content": {},
  "example_section_data": {
    "children": [],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": null,
  "item_line": null,
  "item_type": null,
  "ordered_sections": [],
  "references": null,
  "see_also": [],
  "signature": {
    "type": "Signature",
    "value": null
  },
  "type": "DocBlob"
}