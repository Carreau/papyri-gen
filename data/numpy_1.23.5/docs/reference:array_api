{
  "aliases": [],
  "arbitrary": [
    {
      "children": [
        {
          "children": [
            {
              "children": [
                {
                  "type": "text",
                  "value": "note "
                }
              ],
              "type": "admonitionTitle"
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "The "
                },
                {
                  "type": "inlineCode",
                  "value": "numpy.array_api"
                },
                {
                  "type": "text",
                  "value": " module is still experimental. See "
                },
                {
                  "domain": null,
                  "role": null,
                  "type": "Directive",
                  "value": "NEP 47\n<https://numpy.org/neps/nep-0047-array-api-standard.html>"
                },
                {
                  "type": "text",
                  "value": "."
                }
              ],
              "type": "paragraph"
            }
          ],
          "kind": "note",
          "type": "admonition"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "NumPy includes a reference implementation of the "
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "array API standard"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://data-apis.org/array-api/latest/"
            },
            {
              "type": "text",
              "value": " in "
            },
            {
              "type": "inlineCode",
              "value": "numpy.array_api"
            },
            {
              "type": "text",
              "value": ". "
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "NEP 47"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://numpy.org/neps/nep-0047-array-api-standard.html"
            },
            {
              "type": "text",
              "value": " describes the motivation and scope for implementing the array API standard in NumPy."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "The "
            },
            {
              "type": "inlineCode",
              "value": "numpy.array_api"
            },
            {
              "type": "text",
              "value": " module serves as a minimal, reference implementation of the array API standard. In being minimal, the module only implements those things that are explicitly required by the specification. Certain things are allowed by the specification but are explicitly disallowed in "
            },
            {
              "type": "inlineCode",
              "value": "numpy.array_api"
            },
            {
              "type": "text",
              "value": ". This is so that the module can serve as a reference implementation for users of the array API standard. Any consumer of the array API can test their code against "
            },
            {
              "type": "inlineCode",
              "value": "numpy.array_api"
            },
            {
              "type": "text",
              "value": " and be sure that they aren't using any features that aren't guaranteed by the spec, and which may not be present in other conforming libraries."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "The "
            },
            {
              "type": "inlineCode",
              "value": "numpy.array_api"
            },
            {
              "type": "text",
              "value": " module is not documented here. For a listing of the functions present in the array API specification, refer to the "
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "array API standard"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://data-apis.org/array-api/latest/"
            },
            {
              "type": "text",
              "value": ". The "
            },
            {
              "type": "inlineCode",
              "value": "numpy.array_api"
            },
            {
              "type": "text",
              "value": " implementation is functionally complete, so all functionality described in the standard is implemented."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": "array_api",
      "title": "Array API Standard Compatibility",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "This table outlines the primary differences between "
            },
            {
              "type": "inlineCode",
              "value": "numpy.array_api"
            },
            {
              "type": "text",
              "value": " from the main "
            },
            {
              "type": "inlineCode",
              "value": "numpy"
            },
            {
              "type": "text",
              "value": " namespace. There are three types of differences:"
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "children": [
                {
                  "children": [
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "Strictness"
                        }
                      ],
                      "type": "strong"
                    },
                    {
                      "type": "text",
                      "value": ". Things that are only done so that "
                    },
                    {
                      "type": "inlineCode",
                      "value": "numpy.array_api"
                    },
                    {
                      "type": "text",
                      "value": " is a    strict, minimal implementation. They aren't actually required by the spec,    and other conforming libraries may not follow them. In most cases, spec    does not specify or require any behavior outside of the given domain. The    main "
                    },
                    {
                      "type": "inlineCode",
                      "value": "numpy"
                    },
                    {
                      "type": "text",
                      "value": " namespace would not need to change in any way to be    spec-compatible for these."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "Compatible"
                        }
                      ],
                      "type": "strong"
                    },
                    {
                      "type": "text",
                      "value": ". Things that could be added to the main "
                    },
                    {
                      "type": "inlineCode",
                      "value": "numpy"
                    },
                    {
                      "type": "text",
                      "value": " namespace    without breaking backwards compatibility."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "Breaking"
                        }
                      ],
                      "type": "strong"
                    },
                    {
                      "type": "text",
                      "value": ". Things that would break backwards compatibility if    implemented in the main "
                    },
                    {
                      "type": "inlineCode",
                      "value": "numpy"
                    },
                    {
                      "type": "text",
                      "value": " namespace."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            }
          ],
          "ordered": true,
          "spread": false,
          "start": 1,
          "type": "list"
        }
      ],
      "level": 1,
      "target": "array_api-differences",
      "title": "Table of Differences between ``numpy.array_api`` and ``numpy``",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Many functions have been renamed in the spec from NumPy. These are otherwise identical in behavior, and are thus all "
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "compatible"
                }
              ],
              "type": "strong"
            },
            {
              "type": "text",
              "value": " changes, unless otherwise noted."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "Name Differences",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "The following functions are named differently in the array API"
            }
          ],
          "type": "paragraph"
        },
        {
          "args": "",
          "children": [],
          "name": "list-table",
          "options": {
            "header-rows": "1"
          },
          "type": "mystDirective",
          "value": "* - Array API name\n  - NumPy namespace name\n  - Notes\n* - ``acos``\n  - ``arccos``\n  -\n* - ``acosh``\n  - ``arccosh``\n  -\n* - ``asin``\n  - ``arcsin``\n  -\n* - ``asinh``\n  - ``arcsinh``\n  -\n* - ``atan``\n  - ``arctan``\n  -\n* - ``atan2``\n  - ``arctan2``\n  -\n* - ``atanh``\n  - ``arctanh``\n  -\n* - ``bitwise_left_shift``\n  - ``left_shift``\n  -\n* - ``bitwise_invert``\n  - ``invert``\n  -\n* - ``bitwise_right_shift``\n  - ``right_shift``\n  -\n* - ``bool``\n  - ``bool_``\n  - This is **breaking** because ``np.bool`` is currently a deprecated\n    alias for the built-in ``bool``.\n* - ``concat``\n  - ``concatenate``\n  -\n* - ``matrix_norm`` and ``vector_norm``\n  - ``norm``\n  - ``matrix_norm`` and ``vector_norm`` each do a limited subset of what\n    ``np.norm`` does.\n* - ``permute_dims``\n  - ``transpose``\n  - Unlike ``np.transpose``, the ``axis`` keyword-argument to\n    ``permute_dims`` is required.\n* - ``pow``\n  - ``power``\n  -\n* - ``unique_all``, ``unique_counts``, ``unique_inverse``, and\n    ``unique_values``\n  - ``unique``\n  - Each is equivalent to ``np.unique`` with certain flags set."
        }
      ],
      "level": 3,
      "target": "array_api-name-changes",
      "title": "Function Name Changes",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "inlineCode",
                      "value": "astype"
                    },
                    {
                      "type": "text",
                      "value": " is a function in the array API, whereas it is a method on   "
                    },
                    {
                      "type": "inlineCode",
                      "value": "ndarray"
                    },
                    {
                      "type": "text",
                      "value": " in "
                    },
                    {
                      "type": "inlineCode",
                      "value": "numpy"
                    },
                    {
                      "type": "text",
                      "value": "."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            }
          ],
          "ordered": false,
          "spread": false,
          "start": 1,
          "type": "list"
        }
      ],
      "level": 3,
      "target": null,
      "title": "Function instead of method",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "These functions are in the "
            },
            {
              "type": "inlineCode",
              "value": "linalg"
            },
            {
              "type": "text",
              "value": " sub-namespace in the array API, but are only in the top-level namespace in NumPy:"
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "inlineCode",
                      "value": "cross"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "inlineCode",
                      "value": "diagonal"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "inlineCode",
                      "value": "matmul"
                    },
                    {
                      "type": "text",
                      "value": " (*)"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "inlineCode",
                      "value": "outer"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "inlineCode",
                      "value": "tensordot"
                    },
                    {
                      "type": "text",
                      "value": " (*)"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "inlineCode",
                      "value": "trace"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            }
          ],
          "ordered": false,
          "spread": false,
          "start": 1,
          "type": "list"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "(*): These functions are also in the top-level namespace in the array API."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 3,
      "target": null,
      "title": "``linalg`` Namespace Differences",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "The following functions have keyword arguments that have been renamed. The functionality of the keyword argument is identical unless otherwise stated. Renamed keyword arguments with the same semantic definition may be considered either "
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "compatible"
                }
              ],
              "type": "strong"
            },
            {
              "type": "text",
              "value": " or "
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "breaking"
                }
              ],
              "type": "strong"
            },
            {
              "type": "text",
              "value": ", depending on how the change is implemented."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Note, this page does not list function keyword arguments that are in the main "
            },
            {
              "type": "inlineCode",
              "value": "numpy"
            },
            {
              "type": "text",
              "value": " namespace but not in the array API. Such keyword arguments are omitted from "
            },
            {
              "type": "inlineCode",
              "value": "numpy.array_api"
            },
            {
              "type": "text",
              "value": " for "
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "strictness"
                }
              ],
              "type": "strong"
            },
            {
              "type": "text",
              "value": ", as the spec allows functions to include additional keyword arguments from those required."
            }
          ],
          "type": "paragraph"
        },
        {
          "args": "",
          "children": [],
          "name": "list-table",
          "options": {
            "header-rows": "1"
          },
          "type": "mystDirective",
          "value": "* - Function\n  - Array API keyword name\n  - NumPy keyword name\n  - Notes\n* - ``argsort`` and ``sort``\n  - ``stable``\n  - ``kind``\n  - The definitions of ``stable`` and ``kind`` differ, as do the default\n    values. The change of the default value makes this **breaking**. See\n    :ref:`array_api-set-functions-differences`.\n* - ``matrix_rank``\n  - ``rtol``\n  - ``tol``\n  - The definitions of ``rtol`` and ``tol`` differ, as do the default\n    values. The change of the default value makes this **breaking**. See\n    :ref:`array_api-linear-algebra-differences`.\n* - ``pinv``\n  - ``rtol``\n  - ``rcond``\n  - The definitions of ``rtol`` and ``rcond`` are the same, but their\n    default values differ, making this **breaking**. See\n    :ref:`array_api-linear-algebra-differences`.\n* - ``std`` and ``var``\n  - ``correction``\n  - ``ddof``\n  -\n* - ``reshape``\n  - ``shape``\n  - ``newshape``\n  - The argument may be passed as a positional or keyword argument for both\n    NumPy and the array API."
        }
      ],
      "level": 3,
      "target": null,
      "title": "Keyword Argument Renames",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Type promotion is the biggest area where NumPy deviates from the spec. The most notable difference is that NumPy does value-based casting in many cases. The spec explicitly disallows value-based casting. In the array API, the result type of any operation is always determined entirely by the input types, independently of values or shapes."
            }
          ],
          "type": "paragraph"
        },
        {
          "args": "",
          "children": [],
          "name": "list-table",
          "options": {
            "header-rows": "1"
          },
          "type": "mystDirective",
          "value": "* - Feature\n  - Type\n  - Notes\n* - Limited set of dtypes.\n  - **Strictness**\n  - ``numpy.array_api`` only implements those `dtypes that are required by\n    the spec\n    <https://data-apis.org/array-api/latest/API_specification/data_types.html>`__.\n* - Operators (like ``+``) with Python scalars only accept matching\n    scalar types.\n  - **Strictness**\n  - For example, ``<int32 array> + 1.0`` is not allowed. See `the spec\n    rules for mixing arrays and Python scalars\n    <https://data-apis.org/array-api/latest/API_specification/type_promotion.html#mixing-arrays-with-python-scalars>`__.\n* - Operators (like ``+``) with Python scalars always return the same dtype\n    as the array.\n  - **Breaking**\n  - For example, ``numpy.array_api.asarray(0., dtype=float32) + 1e64`` is a\n    ``float32`` array.\n* - In-place operators are disallowed when the left-hand side would be\n    promoted.\n  - **Breaking**\n  - Example: ``a = np.array(1, dtype=np.int8); a += np.array(1, dtype=np.int16)``. The spec explicitly disallows this.\n* - In-place operators are disallowed when the right-hand side operand\n    cannot broadcast to the shape of the left-hand side operand.\n  - **Strictness**\n  - This so-called \"reverse broadcasting\" should not be allowed. Example:\n    ``a = np.empty((2, 3, 4)); a += np.empty((3, 4))`` should error. See\n    https://github.com/numpy/numpy/issues/10404.\n* - ``int`` promotion for operators is only specified for integers within\n    the bounds of the dtype.\n  - **Strictness**\n  - ``numpy.array_api`` fallsback to ``np.ndarray`` behavior (either\n    cast or raise ``OverflowError``).\n* - ``__pow__`` and ``__rpow__`` do not do value-based casting for 0-D\n    arrays.\n  - **Breaking**\n  - For example, ``np.array(0., dtype=float32)**np.array(0.,\n    dtype=float64)`` is ``float32``. Note that this is value-based casting\n    on 0-D arrays, not scalars.\n* - No cross-kind casting.\n  - **Strictness**\n  - Namely, boolean, integer, and floating-point data types do not cast to\n    each other, except explicitly with ``astype`` (this is separate from\n    the behavior with Python scalars).\n* - No casting unsigned integer dtypes to floating dtypes (e.g., ``int64 +\n    uint64 -> float64``.\n  - **Strictness**\n  -\n* - ``can_cast`` and ``result_type`` are restricted.\n  - **Strictness**\n  - The ``numpy.array_api`` implementations disallow cross-kind casting.\n* - ``sum`` and ``prod`` always upcast ``float32`` to ``float64`` when\n    ``dtype=None``.\n  - **Breaking**\n  -"
        }
      ],
      "level": 2,
      "target": "array_api-type-promotion-differences",
      "title": "Type Promotion Differences",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "The spec requires only a subset of indexing, but all indexing rules in the spec are compatible with NumPy's more broad indexing rules."
            }
          ],
          "type": "paragraph"
        },
        {
          "args": "",
          "children": [],
          "name": "list-table",
          "options": {
            "header-rows": "1"
          },
          "type": "mystDirective",
          "value": "* - Feature\n  - Type\n  - Notes\n* - No implicit ellipses (``...``).\n  - **Strictness**\n  - If an index does not include an ellipsis, all axes must be indexed.\n* - The start and stop of a slice may not be out of bounds.\n  - **Strictness**\n  - For a slice ``i:j:k``, only the following are allowed:\n\n    - ``i`` or ``j`` omitted (``None``).\n    - ``-n <= i <= max(0, n - 1)``.\n    - For ``k > 0`` or ``k`` omitted (``None``), ``-n <= j <= n``.\n    - For ``k < 0``, ``-n - 1 <= j <= max(0, n - 1)``.\n* - Boolean array indices are only allowed as the sole index.\n  - **Strictness**\n  -\n* - Integer array indices are not allowed at all.\n  - **Strictness**\n  - With the exception of 0-D arrays, which are treated like integers."
        }
      ],
      "level": 2,
      "target": null,
      "title": "Indexing Differences",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Functions in "
            },
            {
              "type": "inlineCode",
              "value": "numpy.array_api"
            },
            {
              "type": "text",
              "value": " restrict their inputs to only those dtypes that are explicitly required by the spec, even when the wrapped corresponding NumPy function would allow a broader set. Here, we list each function and the dtypes that are allowed in "
            },
            {
              "type": "inlineCode",
              "value": "numpy.array_api"
            },
            {
              "type": "text",
              "value": ". These are "
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "strictness"
                }
              ],
              "type": "strong"
            },
            {
              "type": "text",
              "value": " differences because the spec does not require that other dtypes result in an error. The categories here are defined as follows:"
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "children": [
                {
                  "children": [
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "Floating-point"
                        }
                      ],
                      "type": "strong"
                    },
                    {
                      "type": "text",
                      "value": ": "
                    },
                    {
                      "type": "inlineCode",
                      "value": "float32"
                    },
                    {
                      "type": "text",
                      "value": " or "
                    },
                    {
                      "type": "inlineCode",
                      "value": "float64"
                    },
                    {
                      "type": "text",
                      "value": "."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "Integer"
                        }
                      ],
                      "type": "strong"
                    },
                    {
                      "type": "text",
                      "value": ": Any signed or unsigned integer dtype ("
                    },
                    {
                      "type": "inlineCode",
                      "value": "int8"
                    },
                    {
                      "type": "text",
                      "value": ", "
                    },
                    {
                      "type": "inlineCode",
                      "value": "int16"
                    },
                    {
                      "type": "text",
                      "value": ",   "
                    },
                    {
                      "type": "inlineCode",
                      "value": "int32"
                    },
                    {
                      "type": "text",
                      "value": ", "
                    },
                    {
                      "type": "inlineCode",
                      "value": "int64"
                    },
                    {
                      "type": "text",
                      "value": ", "
                    },
                    {
                      "type": "inlineCode",
                      "value": "uint8"
                    },
                    {
                      "type": "text",
                      "value": ", "
                    },
                    {
                      "type": "inlineCode",
                      "value": "uint16"
                    },
                    {
                      "type": "text",
                      "value": ", "
                    },
                    {
                      "type": "inlineCode",
                      "value": "uint32"
                    },
                    {
                      "type": "text",
                      "value": ", or "
                    },
                    {
                      "type": "inlineCode",
                      "value": "uint64"
                    },
                    {
                      "type": "text",
                      "value": ")."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "Boolean"
                        }
                      ],
                      "type": "strong"
                    },
                    {
                      "type": "text",
                      "value": ": "
                    },
                    {
                      "type": "inlineCode",
                      "value": "bool"
                    },
                    {
                      "type": "text",
                      "value": "."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "Integer or boolean"
                        }
                      ],
                      "type": "strong"
                    },
                    {
                      "type": "text",
                      "value": ": Any signed or unsigned integer dtype, or "
                    },
                    {
                      "type": "inlineCode",
                      "value": "bool"
                    },
                    {
                      "type": "text",
                      "value": ".   For two-argument functions, both arguments must be integer or both must be   "
                    },
                    {
                      "type": "inlineCode",
                      "value": "bool"
                    },
                    {
                      "type": "text",
                      "value": "."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "Numeric"
                        }
                      ],
                      "type": "strong"
                    },
                    {
                      "type": "text",
                      "value": ": Any integer or floating-point dtype. For two-argument   functions, both arguments must be integer or both must be   floating-point."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "All"
                        }
                      ],
                      "type": "strong"
                    },
                    {
                      "type": "text",
                      "value": ": Any of the above dtype categories. For two-argument functions, both   arguments must be the same kind (integer, floating-point, or boolean)."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            }
          ],
          "ordered": false,
          "spread": false,
          "start": 1,
          "type": "list"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "In all cases, the return dtype is chosen according to "
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "the rules outlined in the spec"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://data-apis.org/array-api/latest/API_specification/type_promotion.html"
            },
            {
              "type": "text",
              "value": ", and does not differ from NumPy's return dtype for any of the allowed input dtypes, except in the cases mentioned specifically in the subsections below."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": "array_api-type-strictness",
      "title": "Type Strictness",
      "type": "Section"
    },
    {
      "children": [
        {
          "args": "",
          "children": [],
          "name": "list-table",
          "options": {
            "header-rows": "1"
          },
          "type": "mystDirective",
          "value": "* - Function Name\n  - Dtypes\n* - ``abs``\n  - Numeric\n* - ``acos``\n  - Floating-point\n* - ``acosh``\n  - Floating-point\n* - ``add``\n  - Numeric\n* - ``asin`` (*)\n  - Floating-point\n* - ``asinh`` (*)\n  - Floating-point\n* - ``atan`` (*)\n  - Floating-point\n* - ``atan2`` (*)\n  - Floating-point\n* - ``atanh`` (*)\n  - Floating-point\n* - ``bitwise_and``\n  - Integer or boolean\n* - ``bitwise_invert``\n  - Integer or boolean\n* - ``bitwise_left_shift`` (*)\n  - Integer\n* - ``bitwise_or``\n  - Integer or boolean\n* - ``bitwise_right_shift`` (*)\n  - Integer\n* - ``bitwise_xor``\n  - Integer or boolean\n* - ``ceil``\n  - Numeric\n* - ``cos``\n  - Floating-point\n* - ``cosh``\n  - Floating-point\n* - ``divide``\n  - Floating-point\n* - ``equal``\n  - All\n* - ``exp``\n  - Floating-point\n* - ``expm1``\n  - Floating-point\n* - ``floor``\n  - Numeric\n* - ``floor_divide``\n  - Numeric\n* - ``greater``\n  - Numeric\n* - ``greater_equal``\n  - Numeric\n* - ``isfinite``\n  - Numeric\n* - ``isinf``\n  - Numeric\n* - ``isnan``\n  - Numeric\n* - ``less``\n  - Numeric\n* - ``less_equal``\n  - Numeric\n* - ``log``\n  - Floating-point\n* - ``logaddexp``\n  - Floating-point\n* - ``log10``\n  - Floating-point\n* - ``log1p``\n  - Floating-point\n* - ``log2``\n  - Floating-point\n* - ``logical_and``\n  - Boolean\n* - ``logical_not``\n  - Boolean\n* - ``logical_or``\n  - Boolean\n* - ``logical_xor``\n  - Boolean\n* - ``multiply``\n  - Numeric\n* - ``negative``\n  - Numeric\n* - ``not_equal``\n  - All\n* - ``positive``\n  - Numeric\n* - ``pow`` (*)\n  - Numeric\n* - ``remainder``\n  - Numeric\n* - ``round``\n  - Numeric\n* - ``sign``\n  - Numeric\n* - ``sin``\n  - Floating-point\n* - ``sinh``\n  - Floating-point\n* - ``sqrt``\n  - Floating-point\n* - ``square``\n  - Numeric\n* - ``subtract``\n  - Numeric\n* - ``tan``\n  - Floating-point\n* - ``tanh``\n  - Floating-point\n* - ``trunc``\n  - Numeric"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "(*) These functions have different names from the main "
            },
            {
              "type": "inlineCode",
              "value": "numpy"
            },
            {
              "type": "text",
              "value": " namespace. See "
            },
            {
              "type": "inlineCode",
              "value": "array_api-name-changes"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 3,
      "target": null,
      "title": "Elementwise Functions",
      "type": "Section"
    },
    {
      "children": [
        {
          "args": "",
          "children": [],
          "name": "list-table",
          "options": {
            "header-rows": "1"
          },
          "type": "mystDirective",
          "value": "* - Function Name\n  - Dtypes\n* - ``meshgrid``\n  - Any (all input dtypes must be the same)"
        }
      ],
      "level": 3,
      "target": null,
      "title": "Creation Functions",
      "type": "Section"
    },
    {
      "children": [
        {
          "args": "",
          "children": [],
          "name": "list-table",
          "options": {
            "header-rows": "1"
          },
          "type": "mystDirective",
          "value": "* - Function Name\n  - Dtypes\n* - ``cholesky``\n  - Floating-point\n* - ``cross``\n  - Numeric\n* - ``det``\n  - Floating-point\n* - ``diagonal``\n  - Any\n* - ``eigh``\n  - Floating-point\n* - ``eighvals``\n  - Floating-point\n* - ``inv``\n  - Floating-point\n* - ``matmul``\n  - Numeric\n* - ``matrix_norm`` (*)\n  - Floating-point\n* - ``matrix_power``\n  - Floating-point\n* - ``matrix_rank``\n  - Floating-point\n* - ``matrix_transpose`` (**)\n  - Any\n* - ``outer``\n  - Numeric\n* - ``pinv``\n  - Floating-point\n* - ``qr``\n  - Floating-point\n* - ``slogdet``\n  - Floating-point\n* - ``solve``\n  - Floating-point\n* - ``svd``\n  - Floating-point\n* - ``svdvals`` (**)\n  - Floating-point\n* - ``tensordot``\n  - Numeric\n* - ``trace``\n  - Numeric\n* - ``vecdot`` (**)\n  - Numeric\n* - ``vector_norm`` (*)\n  - Floating-point"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "(*) These functions are split from "
            },
            {
              "type": "inlineCode",
              "value": "norm"
            },
            {
              "type": "text",
              "value": " from the main "
            },
            {
              "type": "inlineCode",
              "value": "numpy"
            },
            {
              "type": "text",
              "value": " namespace. See "
            },
            {
              "type": "inlineCode",
              "value": "array_api-name-changes"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "(**) These functions are new in the array API and are not in the main "
            },
            {
              "type": "inlineCode",
              "value": "numpy"
            },
            {
              "type": "text",
              "value": " namespace."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 3,
      "target": null,
      "title": "Linear Algebra Functions",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "All the special "
            },
            {
              "type": "inlineCode",
              "value": "__operator__"
            },
            {
              "type": "text",
              "value": " methods on the array object behave identically to their corresponding functions (see "
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "the spec"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://data-apis.org/array-api/latest/API_specification/array_object.html#methods"
            },
            {
              "type": "text",
              "value": " for a list of which methods correspond to which functions). The exception is that operators explicitly allow Python scalars according to the "
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "rules outlined in the spec"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://data-apis.org/array-api/latest/API_specification/type_promotion.html#mixing-arrays-with-python-scalars"
            },
            {
              "type": "text",
              "value": " (see "
            },
            {
              "type": "inlineCode",
              "value": "array_api-type-promotion-differences"
            },
            {
              "type": "text",
              "value": ")."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 3,
      "target": null,
      "title": "Array Object",
      "type": "Section"
    },
    {
      "children": [
        {
          "args": "",
          "children": [],
          "name": "list-table",
          "options": {
            "header-rows": "1"
          },
          "type": "mystDirective",
          "value": "* - Feature\n  - Type\n  - Notes\n* - No array scalars\n  - **Strictness**\n  - The spec does not have array scalars, only 0-D arrays. However, other\n    than the promotion differences outlined in\n    :ref:`array_api-type-promotion-differences`, scalars duck type as 0-D\n    arrays for the purposes of the spec. The are immutable, but the spec\n    `does not require mutability\n    <https://data-apis.org/array-api/latest/design_topics/copies_views_and_mutation.html>`__.\n* - ``bool()``, ``int()``, and ``float()`` only work on 0-D arrays.\n  - **Strictness**\n  - See https://github.com/numpy/numpy/issues/10404.\n* - ``__imatmul__``\n  - **Compatible**\n  - ``np.ndarray`` does not currently implement ``__imatmul``. Note that\n    ``a @= b`` should only defined when it does not change the shape of\n    ``a``.\n* - The ``mT`` attribute for matrix transpose.\n  - **Compatible**\n  - See `the spec definition\n    <https://data-apis.org/array-api/latest/API_specification/generated/signatures.array_object.array.mT.html>`__\n    for ``mT``.\n* - The ``T`` attribute should error if the input is not 2-dimensional.\n  - **Breaking**\n  - See `the note in the spec\n    <https://data-apis.org/array-api/latest/API_specification/generated/signatures.array_object.array.T.html>`__.\n* - New method ``to_device`` and attribute ``device``\n  - **Compatible**\n  - The methods would effectively not do anything since NumPy is CPU only"
        }
      ],
      "level": 2,
      "target": null,
      "title": "Array Object Differences",
      "type": "Section"
    },
    {
      "children": [
        {
          "args": "",
          "children": [],
          "name": "list-table",
          "options": {
            "header-rows": "1"
          },
          "type": "mystDirective",
          "value": "* - Feature\n  - Type\n  - Notes\n* - ``copy`` keyword argument to ``asarray``\n  - **Compatible**\n  -\n* - New ``device`` keyword argument to all array creation functions\n    (``asarray``, ``arange``, ``empty``, ``empty_like``, ``eye``, ``full``,\n    ``full_like``, ``linspace``, ``ones``, ``ones_like``, ``zeros``, and\n    ``zeros_like``).\n  - **Compatible**\n  - ``device`` would effectively do nothing, since NumPy is CPU only."
        }
      ],
      "level": 2,
      "target": null,
      "title": "Creation Functions Differences",
      "type": "Section"
    },
    {
      "children": [
        {
          "args": "",
          "children": [],
          "name": "list-table",
          "options": {
            "header-rows": "1"
          },
          "type": "mystDirective",
          "value": "* - Feature\n  - Type\n  - Notes\n* - Various functions have been renamed.\n  - **Compatible**\n  - See :ref:`array_api-name-changes`.\n* - Elementwise functions are only defined for given input type\n    combinations.\n  - **Strictness**\n  - See :ref:`array_api-type-strictness`.\n* - ``bitwise_left_shift`` and ``bitwise_right_shift`` are only defined for\n    ``x2`` nonnegative.\n  - **Strictness**\n  -\n* - ``ceil``, ``floor``, and ``trunc`` return an integer with integer\n    input.\n  - **Breaking**\n  - ``np.ceil``, ``np.floor``, and ``np.trunc`` return a floating-point\n    dtype on integer dtype input."
        }
      ],
      "level": 2,
      "target": null,
      "title": "Elementwise Functions Differences",
      "type": "Section"
    },
    {
      "children": [
        {
          "args": "",
          "children": [],
          "name": "list-table",
          "options": {
            "header-rows": "1"
          },
          "type": "mystDirective",
          "value": "* - Feature\n  - Type\n  - Notes\n* - ``cholesky`` includes an ``upper`` keyword argument.\n  - **Compatible**\n  -\n* - ``cross`` does not allow size 2 vectors (only size 3).\n  - **Breaking**\n  -\n* - ``diagonal`` operates on the last two axes.\n  - **Breaking**\n  - Strictly speaking this can be **compatible** because ``diagonal`` is\n    moved to the ``linalg`` namespace.\n* - ``eigh``, ``qr``, ``slogdet`` and ``svd`` return a named tuple.\n  - **Compatible**\n  - The corresponding ``numpy`` functions return a ``tuple``, with the\n    resulting arrays in the same order.\n* - New functions ``matrix_norm`` and ``vector_norm``.\n  - **Compatible**\n  - The ``norm`` function has been omitted from the array API and split\n    into ``matrix_norm`` for matrix norms and ``vector_norm`` for vector\n    norms. Note that ``vector_norm`` supports any number of axes, whereas\n    ``np.linalg.norm`` only supports a single axis for vector norms.\n* - ``matrix_rank`` has an ``rtol`` keyword argument instead of ``tol``.\n  - **Breaking**\n  - In the array API, ``rtol`` filters singular values smaller than\n    ``rtol * largest_singular_value``. In ``np.linalg.matrix_rank``,\n    ``tol`` filters singular values smaller than ``tol``. Furthermore, the\n    default value for ``rtol`` is ``max(M, N) * eps``, whereas the default\n    value of ``tol`` in ``np.linalg.matrix_rank`` is ``S.max() *\n    max(M, N) * eps``, where ``S`` is the singular values of the input. The\n    new flag name is compatible but the default change is breaking\n* - ``matrix_rank`` does not support 1-dimensional arrays.\n  - **Breaking**\n  -\n* - New function ``matrix_transpose``.\n  - **Compatible**\n  - Unlike ``np.transpose``, ``matrix_transpose`` only transposes the last\n    two axes. See `the spec definition\n    <https://data-apis.org/array-api/latest/API_specification/generated/signatures.linear_algebra_functions.matrix_transpose.html#signatures.linear_algebra_functions.matrix_transpose>`__\n* - ``outer`` only supports 1-dimensional arrays.\n  - **Breaking**\n  - The spec currently only specifies behavior on 1-D arrays but future\n    behavior will likely be to broadcast, rather than flatten, which is\n    what ``np.outer`` does.\n* - ``pinv`` has an ``rtol`` keyword argument instead of ``rcond``\n  - **Breaking**\n  - The meaning of ``rtol`` and ``rcond`` is the same, but the default\n    value for ``rtol`` is ``max(M, N) * eps``, whereas the default value\n    for ``rcond`` is ``1e-15``. The new flag name is compatible but the\n    default change is breaking.\n* - ``solve`` only accepts ``x2`` as a vector when it is exactly\n    1-dimensional.\n  - **Breaking**\n  - The ``np.linalg.solve`` behavior is ambiguous. See `this numpy issue\n    <https://github.com/numpy/numpy/issues/15349>`__ and `this array API\n    specification issue\n    <https://github.com/data-apis/array-api/issues/285>`__ for more\n    details.\n* - New function ``svdvals``.\n  - **Compatible**\n  - Equivalent to ``np.linalg.svd(compute_uv=False)``.\n* - The ``axis`` keyword to ``tensordot`` must be a tuple.\n  - **Compatible**\n  - In ``np.tensordot``, it can also be an array or array-like.\n* - ``trace`` operates on the last two axes.\n  - **Breaking**\n  - ``np.trace`` operates on the first two axes by default. Note that the\n    array API ``trace`` does not allow specifying which axes to operate on."
        }
      ],
      "level": 2,
      "target": "array_api-linear-algebra-differences",
      "title": "Linear Algebra Differences",
      "type": "Section"
    },
    {
      "children": [
        {
          "args": "",
          "children": [],
          "name": "list-table",
          "options": {
            "header-rows": "1"
          },
          "type": "mystDirective",
          "value": "* - Feature\n  - Type\n  - Notes\n* - Various functions have been renamed\n  - **Compatible**\n  - See :ref:`array_api-name-changes`.\n* - ``concat`` has different default casting rules from ``np.concatenate``\n  - **Strictness**\n  - No cross-kind casting. No value-based casting on scalars (when axis=None).\n* - ``stack`` has different default casting rules from ``np.stack``\n  - **Strictness**\n  - No cross-kind casting.\n* - New function ``permute_dims``.\n  - **Compatible**\n  - Unlike ``np.transpose``, the ``axis`` keyword argument to\n    ``permute_dims`` is required.\n* - ``reshape`` function has a ``copy`` keyword argument\n  - **Compatible**\n  - See https://github.com/numpy/numpy/issues/9818."
        }
      ],
      "level": 2,
      "target": null,
      "title": "Manipulation Functions Differences",
      "type": "Section"
    },
    {
      "children": [
        {
          "args": "",
          "children": [],
          "name": "list-table",
          "options": {
            "header-rows": "1"
          },
          "type": "mystDirective",
          "value": "* - Feature\n  - Type\n  - Notes\n* - New functions ``unique_all``, ``unique_counts``, ``unique_inverse``,\n    and ``unique_values``.\n  - **Compatible**\n  - See :ref:`array_api-name-changes`.\n* - The four ``unique_*`` functions return a named tuple.\n  - **Compatible**\n  -\n* - ``unique_all`` and ``unique_indices`` return indices with the same\n    shape as ``x``.\n  - **Compatible**\n  - See https://github.com/numpy/numpy/issues/20638."
        }
      ],
      "level": 2,
      "target": null,
      "title": "Set Functions Differences",
      "type": "Section"
    },
    {
      "children": [
        {
          "args": "",
          "children": [],
          "name": "list-table",
          "options": {
            "header-rows": "1"
          },
          "type": "mystDirective",
          "value": "* - Feature\n  - Type\n  - Notes\n* - ``argsort`` and ``sort`` have a ``stable`` keyword argument instead of\n    ``kind``.\n  - **Breaking**\n  - ``stable`` is a boolean keyword argument, defaulting to ``True``.\n    ``kind`` takes a string, defaulting to ``\"quicksort\"``. ``stable=True``\n    is equivalent to ``kind=\"stable\"`` and ``kind=False`` is equivalent to\n    ``kind=\"quicksort\"``, although any sorting algorithm is allowed by the\n    spec when ``stable=False``. The new flag name is compatible but the\n    default change is breaking.\n* - ``argsort`` and ``sort`` have a ``descending`` keyword argument.\n  - **Compatible**\n  -"
        }
      ],
      "level": 2,
      "target": "array_api-set-functions-differences",
      "title": "Set Functions Differences",
      "type": "Section"
    },
    {
      "children": [
        {
          "args": "",
          "children": [],
          "name": "list-table",
          "options": {
            "header-rows": "1"
          },
          "type": "mystDirective",
          "value": "* - Feature\n  - Type\n  - Notes\n* - ``sum`` and ``prod`` always upcast ``float32`` to ``float64`` when\n    ``dtype=None``.\n  - **Breaking**\n  -\n* - The ``std`` and ``var`` functions have a ``correction`` keyword\n    argument instead of ``ddof``.\n  - **Compatible**\n  -"
        }
      ],
      "level": 2,
      "target": null,
      "title": "Statistical Functions Differences",
      "type": "Section"
    },
    {
      "children": [
        {
          "args": "",
          "children": [],
          "name": "list-table",
          "options": {
            "header-rows": "1"
          },
          "type": "mystDirective",
          "value": "* - Feature\n  - Type\n  - Notes\n* - Dtypes can only be spelled as dtype objects.\n  - **Strictness**\n  - For example, ``numpy.array_api.asarray([0], dtype='int32')`` is not\n    allowed.\n* - ``asarray`` is not implicitly called in any function.\n  - **Strictness**\n  - The exception is Python operators, which accept Python scalars in\n    certain cases (see :ref:`array_api-type-promotion-differences`).\n* - ``tril`` and ``triu`` require the input to be at least 2-D.\n  - **Strictness**\n  -\n* - finfo() return type uses ``float`` for the various attributes.\n  - **Strictness**\n  - The spec allows duck typing, so ``finfo`` returning dtype\n    scalars is considered type compatible with ``float``.\n* - Positional arguments in every function are positional-only.\n  - **Breaking**\n  - See the spec for the exact signature of each function. Note that NumPy\n    ufuncs already use positional-only arguments, but non-ufuncs like\n    ``asarray`` generally do not."
        }
      ],
      "level": 2,
      "target": null,
      "title": "Other Differences",
      "type": "Section"
    }
  ],
  "content": {},
  "example_section_data": {
    "children": [],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": null,
  "item_line": null,
  "item_type": null,
  "ordered_sections": [],
  "references": null,
  "see_also": [],
  "signature": {
    "type": "Signature",
    "value": null
  },
  "type": "DocBlob"
}