{
  "aliases": [],
  "arbitrary": [
    {
      "children": [
        {
          "args": "Travis E. Oliphant",
          "children": [],
          "name": "sectionauthor",
          "options": {},
          "type": "mystDirective",
          "value": ""
        },
        {
          "args": "",
          "children": [],
          "name": "index",
          "options": {},
          "type": "mystDirective",
          "value": "pair: ufunc; C-API"
        }
      ],
      "level": 0,
      "target": null,
      "title": "UFunc API",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "dd": [
                {
                  "args": "UFUNC_ERR_IGNORE",
                  "children": [],
                  "name": "c:macro",
                  "options": {},
                  "type": "mystDirective",
                  "value": ""
                },
                {
                  "args": "UFUNC_ERR_WARN",
                  "children": [],
                  "name": "c:macro",
                  "options": {},
                  "type": "mystDirective",
                  "value": ""
                },
                {
                  "args": "UFUNC_ERR_RAISE",
                  "children": [],
                  "name": "c:macro",
                  "options": {},
                  "type": "mystDirective",
                  "value": ""
                },
                {
                  "args": "UFUNC_ERR_CALL",
                  "children": [],
                  "name": "c:macro",
                  "options": {},
                  "type": "mystDirective",
                  "value": ""
                }
              ],
              "dt": {
                "children": [
                  {
                    "type": "inlineCode",
                    "value": "UFUNC_ERR_{HANDLER}"
                  }
                ],
                "type": "paragraph"
              },
              "type": "DefListItem"
            },
            {
              "dd": [
                {
                  "args": "UFUNC_MASK_DIVIDEBYZERO",
                  "children": [],
                  "name": "c:macro",
                  "options": {},
                  "type": "mystDirective",
                  "value": ""
                },
                {
                  "args": "UFUNC_MASK_OVERFLOW",
                  "children": [],
                  "name": "c:macro",
                  "options": {},
                  "type": "mystDirective",
                  "value": ""
                },
                {
                  "args": "UFUNC_MASK_UNDERFLOW",
                  "children": [],
                  "name": "c:macro",
                  "options": {},
                  "type": "mystDirective",
                  "value": ""
                },
                {
                  "args": "UFUNC_MASK_INVALID",
                  "children": [],
                  "name": "c:macro",
                  "options": {},
                  "type": "mystDirective",
                  "value": ""
                },
                {
                  "args": "UFUNC_SHIFT_DIVIDEBYZERO",
                  "children": [],
                  "name": "c:macro",
                  "options": {},
                  "type": "mystDirective",
                  "value": ""
                },
                {
                  "args": "UFUNC_SHIFT_OVERFLOW",
                  "children": [],
                  "name": "c:macro",
                  "options": {},
                  "type": "mystDirective",
                  "value": ""
                },
                {
                  "args": "UFUNC_SHIFT_UNDERFLOW",
                  "children": [],
                  "name": "c:macro",
                  "options": {},
                  "type": "mystDirective",
                  "value": ""
                },
                {
                  "args": "UFUNC_SHIFT_INVALID",
                  "children": [],
                  "name": "c:macro",
                  "options": {},
                  "type": "mystDirective",
                  "value": ""
                },
                {
                  "args": "UFUNC_FPE_DIVIDEBYZERO",
                  "children": [],
                  "name": "c:macro",
                  "options": {},
                  "type": "mystDirective",
                  "value": ""
                },
                {
                  "args": "UFUNC_FPE_OVERFLOW",
                  "children": [],
                  "name": "c:macro",
                  "options": {},
                  "type": "mystDirective",
                  "value": ""
                },
                {
                  "args": "UFUNC_FPE_UNDERFLOW",
                  "children": [],
                  "name": "c:macro",
                  "options": {},
                  "type": "mystDirective",
                  "value": ""
                },
                {
                  "args": "UFUNC_FPE_INVALID",
                  "children": [],
                  "name": "c:macro",
                  "options": {},
                  "type": "mystDirective",
                  "value": ""
                }
              ],
              "dt": {
                "children": [
                  {
                    "type": "inlineCode",
                    "value": "UFUNC_{THING}_{ERR}"
                  }
                ],
                "type": "paragraph"
              },
              "type": "DefListItem"
            },
            {
              "dd": [
                {
                  "args": "PyUFunc_One",
                  "children": [],
                  "name": "c:macro",
                  "options": {},
                  "type": "mystDirective",
                  "value": ""
                },
                {
                  "args": "PyUFunc_Zero",
                  "children": [],
                  "name": "c:macro",
                  "options": {},
                  "type": "mystDirective",
                  "value": ""
                },
                {
                  "args": "PyUFunc_MinusOne",
                  "children": [],
                  "name": "c:macro",
                  "options": {},
                  "type": "mystDirective",
                  "value": ""
                },
                {
                  "args": "PyUFunc_ReorderableNone",
                  "children": [],
                  "name": "c:macro",
                  "options": {},
                  "type": "mystDirective",
                  "value": ""
                },
                {
                  "args": "PyUFunc_None",
                  "children": [],
                  "name": "c:macro",
                  "options": {},
                  "type": "mystDirective",
                  "value": ""
                },
                {
                  "args": "PyUFunc_IdentityValue",
                  "children": [],
                  "name": "c:macro",
                  "options": {},
                  "type": "mystDirective",
                  "value": ""
                }
              ],
              "dt": {
                "children": [
                  {
                    "type": "inlineCode",
                    "value": "PyUFunc_{VALUE}"
                  }
                ],
                "type": "paragraph"
              },
              "type": "DefListItem"
            }
          ],
          "type": "DefList"
        }
      ],
      "level": 1,
      "target": null,
      "title": "Constants",
      "type": "Section"
    },
    {
      "children": [
        {
          "args": "NPY_LOOP_BEGIN_THREADS",
          "children": [],
          "name": "c:macro",
          "options": {},
          "type": "mystDirective",
          "value": "Used in universal function code to only release the Python GIL if\nloop->obj is not true (*i.e.* this is not an OBJECT array\nloop). Requires use of :c:macro:`NPY_BEGIN_THREADS_DEF` in variable\ndeclaration area."
        },
        {
          "args": "NPY_LOOP_END_THREADS",
          "children": [],
          "name": "c:macro",
          "options": {},
          "type": "mystDirective",
          "value": "Used in universal function code to re-acquire the Python GIL if it\nwas released (because loop->obj was not true)."
        }
      ],
      "level": 1,
      "target": null,
      "title": "Macros",
      "type": "Section"
    },
    {
      "children": [
        {
          "args": "PyUFuncGenericFunction",
          "children": [],
          "name": "c:type",
          "options": {},
          "type": "mystDirective",
          "value": "Pointers to functions that actually implement the underlying\n(element-by-element) function :math:`N` times with the following\nsignature:\n\n.. c:function:: void loopfunc(\\\n        char** args, npy_intp const *dimensions, npy_intp const *steps, void* data)\n\n    *args*\n\n        An array of pointers to the actual data for the input and output\n        arrays. The input arguments are given first followed by the output\n        arguments.\n\n    *dimensions*\n\n        A pointer to the size of the dimension over which this function is\n        looping.\n\n    *steps*\n\n        A pointer to the number of bytes to jump to get to the\n        next element in this dimension for each of the input and\n        output arguments.\n\n    *data*\n\n        Arbitrary data (extra arguments, function names, *etc.* )\n        that can be stored with the ufunc and will be passed in\n        when it is called. May be ``NULL``.\n\n        .. versionchanged:: 1.23.0\n           Accepts ``NULL`` `data` in addition to array of ``NULL`` values.\n\n    This is an example of a func specialized for addition of doubles\n    returning doubles.\n\n    .. code-block:: c\n\n        static void\n        double_add(char **args,\n                   npy_intp const *dimensions,\n                   npy_intp const *steps,\n                   void *extra)\n        {\n            npy_intp i;\n            npy_intp is1 = steps[0], is2 = steps[1];\n            npy_intp os = steps[2], n = dimensions[0];\n            char *i1 = args[0], *i2 = args[1], *op = args[2];\n            for (i = 0; i < n; i++) {\n                *((double *)op) = *((double *)i1) +\n                                  *((double *)i2);\n                i1 += is1;\n                i2 += is2;\n                op += os;\n             }\n        }"
        }
      ],
      "level": 1,
      "target": null,
      "title": "Types",
      "type": "Section"
    },
    {
      "children": [
        {
          "args": "PyObject* PyUFunc_FromFuncAndData( \\",
          "children": [],
          "name": "c:function",
          "options": {},
          "type": "mystDirective",
          "value": "PyUFuncGenericFunction* func, void** data, char* types, int ntypes, \\\nint nin, int nout, int identity, char* name, char* doc, int unused)"
        },
        {
          "children": [
            {
              "children": [
                {
                  "type": "text",
                  "value": "Create a new broadcasting universal function from required variables.     Each ufunc builds around the notion of an element-by-element     operation. Each ufunc object contains pointers to 1-d loops     implementing the basic functionality for each supported type."
                }
              ],
              "type": "paragraph"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "note "
                    }
                  ],
                  "type": "admonitionTitle"
                },
                {
                  "children": [
                    {
                      "dd": [
                        {
                          "children": [
                            {
                              "type": "text",
                              "value": "copied by "
                            },
                            {
                              "domain": "c",
                              "role": "func",
                              "type": "Directive",
                              "value": "PyUFunc_FromFuncAndData"
                            },
                            {
                              "type": "text",
                              "value": ". The caller must ensure     that the memory used by these arrays is not freed as long as the     ufunc object is alive."
                            }
                          ],
                          "type": "paragraph"
                        }
                      ],
                      "dt": {
                        "children": [
                          {
                            "type": "text",
                            "value": "The "
                          },
                          {
                            "children": [
                              {
                                "type": "text",
                                "value": "func"
                              }
                            ],
                            "type": "emphasis"
                          },
                          {
                            "type": "text",
                            "value": ", "
                          },
                          {
                            "children": [
                              {
                                "type": "text",
                                "value": "data"
                              }
                            ],
                            "type": "emphasis"
                          },
                          {
                            "type": "text",
                            "value": ", "
                          },
                          {
                            "children": [
                              {
                                "type": "text",
                                "value": "types"
                              }
                            ],
                            "type": "emphasis"
                          },
                          {
                            "type": "text",
                            "value": ", "
                          },
                          {
                            "children": [
                              {
                                "type": "text",
                                "value": "name"
                              }
                            ],
                            "type": "emphasis"
                          },
                          {
                            "type": "text",
                            "value": ", and "
                          },
                          {
                            "children": [
                              {
                                "type": "text",
                                "value": "doc"
                              }
                            ],
                            "type": "emphasis"
                          },
                          {
                            "type": "text",
                            "value": " arguments are not"
                          }
                        ],
                        "type": "paragraph"
                      },
                      "type": "DefListItem"
                    }
                  ],
                  "type": "DefList"
                }
              ],
              "kind": "note",
              "type": "admonition"
            },
            {
              "children": [
                {
                  "body": [
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "Must point to an array containing "
                        },
                        {
                          "children": [
                            {
                              "type": "text",
                              "value": "ntypes"
                            }
                          ],
                          "type": "emphasis"
                        },
                        {
                          "type": "text",
                          "value": "         "
                        },
                        {
                          "type": "inlineCode",
                          "value": "PyUFuncGenericFunction"
                        },
                        {
                          "type": "text",
                          "value": " elements."
                        }
                      ],
                      "type": "paragraph"
                    }
                  ],
                  "name": [
                    {
                      "type": "text",
                      "value": "paramfunc"
                    }
                  ],
                  "type": "FieldListItem"
                },
                {
                  "body": [
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "Should be "
                        },
                        {
                          "type": "inlineCode",
                          "value": "NULL"
                        },
                        {
                          "type": "text",
                          "value": " or a pointer to an array of size "
                        },
                        {
                          "children": [
                            {
                              "type": "text",
                              "value": "ntypes"
                            }
                          ],
                          "type": "emphasis"
                        },
                        {
                          "type": "text",
                          "value": ".         This array may contain arbitrary extra-data to be passed to         the corresponding loop function in the func array, including         "
                        },
                        {
                          "type": "inlineCode",
                          "value": "NULL"
                        },
                        {
                          "type": "text",
                          "value": "."
                        }
                      ],
                      "type": "paragraph"
                    }
                  ],
                  "name": [
                    {
                      "type": "text",
                      "value": "paramdata"
                    }
                  ],
                  "type": "FieldListItem"
                },
                {
                  "body": [
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "Length "
                        },
                        {
                          "type": "inlineCode",
                          "value": "(nin + nout) * ntypes"
                        },
                        {
                          "type": "text",
                          "value": " array of "
                        },
                        {
                          "type": "inlineCode",
                          "value": "char"
                        },
                        {
                          "type": "text",
                          "value": " encoding the        "
                        },
                        {
                          "domain": null,
                          "role": null,
                          "type": "Directive",
                          "value": "numpy.dtype.num"
                        },
                        {
                          "type": "text",
                          "value": " (built-in only) that the corresponding        function in the "
                        },
                        {
                          "type": "inlineCode",
                          "value": "func"
                        },
                        {
                          "type": "text",
                          "value": " array accepts. For instance, for a comparison        ufunc with three "
                        },
                        {
                          "type": "inlineCode",
                          "value": "ntypes"
                        },
                        {
                          "type": "text",
                          "value": ", two "
                        },
                        {
                          "type": "inlineCode",
                          "value": "nin"
                        },
                        {
                          "type": "text",
                          "value": " and one "
                        },
                        {
                          "type": "inlineCode",
                          "value": "nout"
                        },
                        {
                          "type": "text",
                          "value": ", where the        first function accepts "
                        },
                        {
                          "anchor": null,
                          "exists": true,
                          "kind": "module",
                          "reference": {
                            "kind": "api",
                            "module": "numpy:int32",
                            "path": "numpy:int32",
                            "type": "RefInfo",
                            "version": "*"
                          },
                          "type": "Link",
                          "value": "numpy.int32"
                        },
                        {
                          "type": "text",
                          "value": " and the second        "
                        },
                        {
                          "anchor": null,
                          "exists": true,
                          "kind": "module",
                          "reference": {
                            "kind": "api",
                            "module": "numpy:int64",
                            "path": "numpy:int64",
                            "type": "RefInfo",
                            "version": "*"
                          },
                          "type": "Link",
                          "value": "numpy.int64"
                        },
                        {
                          "type": "text",
                          "value": ", with both returning "
                        },
                        {
                          "anchor": null,
                          "exists": true,
                          "kind": "module",
                          "reference": {
                            "kind": "api",
                            "module": "numpy:bool_",
                            "path": "numpy:bool_",
                            "type": "RefInfo",
                            "version": "*"
                          },
                          "type": "Link",
                          "value": "numpy.bool_"
                        },
                        {
                          "type": "text",
                          "value": ", "
                        },
                        {
                          "type": "inlineCode",
                          "value": "types"
                        },
                        {
                          "type": "text",
                          "value": " would        be "
                        },
                        {
                          "type": "inlineCode",
                          "value": "(char[]) {5, 5, 0, 7, 7, 0}"
                        },
                        {
                          "type": "text",
                          "value": " since "
                        },
                        {
                          "type": "inlineCode",
                          "value": "NPY_INT32"
                        },
                        {
                          "type": "text",
                          "value": " is 5,        "
                        },
                        {
                          "type": "inlineCode",
                          "value": "NPY_INT64"
                        },
                        {
                          "type": "text",
                          "value": " is 7, and "
                        },
                        {
                          "type": "inlineCode",
                          "value": "NPY_BOOL"
                        },
                        {
                          "type": "text",
                          "value": " is 0."
                        }
                      ],
                      "type": "paragraph"
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "The bit-width names can also be used (e.g. "
                        },
                        {
                          "type": "inlineCode",
                          "value": "NPY_INT32"
                        },
                        {
                          "type": "text",
                          "value": ",        "
                        },
                        {
                          "type": "inlineCode",
                          "value": "NPY_COMPLEX128"
                        },
                        {
                          "type": "text",
                          "value": " ) if desired."
                        }
                      ],
                      "type": "paragraph"
                    },
                    {
                      "children": [
                        {
                          "type": "inlineCode",
                          "value": "ufuncs.casting"
                        },
                        {
                          "type": "text",
                          "value": " will be used at runtime to find the first        "
                        },
                        {
                          "type": "inlineCode",
                          "value": "func"
                        },
                        {
                          "type": "text",
                          "value": " callable by the input/output provided."
                        }
                      ],
                      "type": "paragraph"
                    }
                  ],
                  "name": [
                    {
                      "type": "text",
                      "value": "paramtypes"
                    }
                  ],
                  "type": "FieldListItem"
                },
                {
                  "body": [
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "How many different data-type-specific functions the ufunc has implemented."
                        }
                      ],
                      "type": "paragraph"
                    }
                  ],
                  "name": [
                    {
                      "type": "text",
                      "value": "paramntypes"
                    }
                  ],
                  "type": "FieldListItem"
                },
                {
                  "body": [
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "The number of inputs to this operation."
                        }
                      ],
                      "type": "paragraph"
                    }
                  ],
                  "name": [
                    {
                      "type": "text",
                      "value": "paramnin"
                    }
                  ],
                  "type": "FieldListItem"
                },
                {
                  "body": [
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "The number of outputs"
                        }
                      ],
                      "type": "paragraph"
                    }
                  ],
                  "name": [
                    {
                      "type": "text",
                      "value": "paramnout"
                    }
                  ],
                  "type": "FieldListItem"
                },
                {
                  "body": [
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "Either "
                        },
                        {
                          "type": "inlineCode",
                          "value": "PyUFunc_One"
                        },
                        {
                          "type": "text",
                          "value": ", "
                        },
                        {
                          "type": "inlineCode",
                          "value": "PyUFunc_Zero"
                        },
                        {
                          "type": "text",
                          "value": ",         "
                        },
                        {
                          "type": "inlineCode",
                          "value": "PyUFunc_MinusOne"
                        },
                        {
                          "type": "text",
                          "value": ", or "
                        },
                        {
                          "type": "inlineCode",
                          "value": "PyUFunc_None"
                        },
                        {
                          "type": "text",
                          "value": ".         This specifies what should be returned when         an empty array is passed to the reduce method of the ufunc.         The special value "
                        },
                        {
                          "type": "inlineCode",
                          "value": "PyUFunc_IdentityValue"
                        },
                        {
                          "type": "text",
                          "value": " may only be used with         the "
                        },
                        {
                          "type": "inlineCode",
                          "value": "PyUFunc_FromFuncAndDataAndSignatureAndIdentity"
                        },
                        {
                          "type": "text",
                          "value": " method, to         allow an arbitrary python object to be used as the identity."
                        }
                      ],
                      "type": "paragraph"
                    }
                  ],
                  "name": [
                    {
                      "type": "text",
                      "value": "paramidentity"
                    }
                  ],
                  "type": "FieldListItem"
                },
                {
                  "body": [
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "The name for the ufunc as a "
                        },
                        {
                          "type": "inlineCode",
                          "value": "NULL"
                        },
                        {
                          "type": "text",
                          "value": " terminated string.  Specifying         a name of 'add' or 'multiply' enables a special behavior for         integer-typed reductions when no dtype is given. If the input type is an         integer (or boolean) data type smaller than the size of the "
                        },
                        {
                          "anchor": null,
                          "exists": true,
                          "kind": "module",
                          "reference": {
                            "kind": "api",
                            "module": "numpy:int64",
                            "path": "numpy:int64",
                            "type": "RefInfo",
                            "version": "*"
                          },
                          "type": "Link",
                          "value": "numpy.int_"
                        },
                        {
                          "type": "text",
                          "value": "         data type, it will be internally upcast to the "
                        },
                        {
                          "anchor": null,
                          "exists": true,
                          "kind": "module",
                          "reference": {
                            "kind": "api",
                            "module": "numpy:int64",
                            "path": "numpy:int64",
                            "type": "RefInfo",
                            "version": "*"
                          },
                          "type": "Link",
                          "value": "numpy.int_"
                        },
                        {
                          "type": "text",
                          "value": " (or         "
                        },
                        {
                          "anchor": null,
                          "exists": true,
                          "kind": "module",
                          "reference": {
                            "kind": "api",
                            "module": "numpy:uint64",
                            "path": "numpy:uint64",
                            "type": "RefInfo",
                            "version": "*"
                          },
                          "type": "Link",
                          "value": "numpy.uint"
                        },
                        {
                          "type": "text",
                          "value": ") data type."
                        }
                      ],
                      "type": "paragraph"
                    }
                  ],
                  "name": [
                    {
                      "type": "text",
                      "value": "paramname"
                    }
                  ],
                  "type": "FieldListItem"
                },
                {
                  "body": [
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "Allows passing in a documentation string to be stored with the         ufunc.  The documentation string should not contain the name         of the function or the calling signature as that will be         dynamically determined from the object and available when         accessing the "
                        },
                        {
                          "children": [
                            {
                              "type": "text",
                              "value": "__doc__"
                            }
                          ],
                          "type": "strong"
                        },
                        {
                          "type": "text",
                          "value": " attribute of the ufunc."
                        }
                      ],
                      "type": "paragraph"
                    }
                  ],
                  "name": [
                    {
                      "type": "text",
                      "value": "paramdoc"
                    }
                  ],
                  "type": "FieldListItem"
                },
                {
                  "body": [
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "Unused and present for backwards compatibility of the C-API."
                        }
                      ],
                      "type": "paragraph"
                    }
                  ],
                  "name": [
                    {
                      "type": "text",
                      "value": "paramunused"
                    }
                  ],
                  "type": "FieldListItem"
                }
              ],
              "type": "FieldList"
            }
          ],
          "type": "blockquote"
        },
        {
          "args": "PyObject* PyUFunc_FromFuncAndDataAndSignature( \\",
          "children": [],
          "name": "c:function",
          "options": {},
          "type": "mystDirective",
          "value": "PyUFuncGenericFunction* func, void** data, char* types, int ntypes, \\\nint nin, int nout, int identity, char* name, char* doc, int unused, char *signature)"
        },
        {
          "children": [
            {
              "children": [
                {
                  "type": "text",
                  "value": "This function is very similar to PyUFunc_FromFuncAndData above, but has    an extra "
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "signature"
                    }
                  ],
                  "type": "emphasis"
                },
                {
                  "type": "text",
                  "value": " argument, to define a    "
                },
                {
                  "type": "inlineCode",
                  "value": "generalized universal functions <c-api.generalized-ufuncs>"
                },
                {
                  "type": "text",
                  "value": ".    Similarly to how ufuncs are built around an element-by-element operation,    gufuncs are around subarray-by-subarray operations, the    "
                },
                {
                  "type": "inlineCode",
                  "value": "signature <details-of-signature>"
                },
                {
                  "type": "text",
                  "value": " defining the subarrays to operate on."
                }
              ],
              "type": "paragraph"
            },
            {
              "children": [
                {
                  "body": [
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "The signature for the new gufunc. Setting it to NULL is equivalent         to calling PyUFunc_FromFuncAndData. A copy of the string is made,         so the passed in buffer can be freed."
                        }
                      ],
                      "type": "paragraph"
                    }
                  ],
                  "name": [
                    {
                      "type": "text",
                      "value": "paramsignature"
                    }
                  ],
                  "type": "FieldListItem"
                }
              ],
              "type": "FieldList"
            }
          ],
          "type": "blockquote"
        },
        {
          "args": "PyObject* PyUFunc_FromFuncAndDataAndSignatureAndIdentity( \\",
          "children": [],
          "name": "c:function",
          "options": {},
          "type": "mystDirective",
          "value": "PyUFuncGenericFunction *func, void **data, char *types, int ntypes, \\\nint nin, int nout, int identity, char *name, char *doc, int unused, \\\nchar *signature, PyObject *identity_value)"
        },
        {
          "children": [
            {
              "children": [
                {
                  "type": "text",
                  "value": "This function is very similar to "
                },
                {
                  "domain": null,
                  "role": null,
                  "type": "Directive",
                  "value": "PyUFunc_FromFuncAndDataAndSignature"
                },
                {
                  "type": "text",
                  "value": " above,    but has an extra "
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "identity_value"
                    }
                  ],
                  "type": "emphasis"
                },
                {
                  "type": "text",
                  "value": " argument, to define an arbitrary identity    for the ufunc when "
                },
                {
                  "type": "inlineCode",
                  "value": "identity"
                },
                {
                  "type": "text",
                  "value": " is passed as "
                },
                {
                  "type": "inlineCode",
                  "value": "PyUFunc_IdentityValue"
                },
                {
                  "type": "text",
                  "value": "."
                }
              ],
              "type": "paragraph"
            },
            {
              "children": [
                {
                  "body": [
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "The identity for the new gufunc. Must be passed as "
                        },
                        {
                          "type": "inlineCode",
                          "value": "NULL"
                        },
                        {
                          "type": "text",
                          "value": " unless the         "
                        },
                        {
                          "type": "inlineCode",
                          "value": "identity"
                        },
                        {
                          "type": "text",
                          "value": " argument is "
                        },
                        {
                          "type": "inlineCode",
                          "value": "PyUFunc_IdentityValue"
                        },
                        {
                          "type": "text",
                          "value": ". Setting it to NULL         is equivalent to calling PyUFunc_FromFuncAndDataAndSignature."
                        }
                      ],
                      "type": "paragraph"
                    }
                  ],
                  "name": [
                    {
                      "type": "text",
                      "value": "paramidentity_value"
                    }
                  ],
                  "type": "FieldListItem"
                }
              ],
              "type": "FieldList"
            }
          ],
          "type": "blockquote"
        },
        {
          "args": "int PyUFunc_RegisterLoopForType( \\",
          "children": [],
          "name": "c:function",
          "options": {},
          "type": "mystDirective",
          "value": "PyUFuncObject* ufunc, int usertype, PyUFuncGenericFunction function, \\\nint* arg_types, void* data)"
        },
        {
          "children": [
            {
              "children": [
                {
                  "type": "text",
                  "value": "This function allows the user to register a 1-d loop with an     already- created ufunc to be used whenever the ufunc is called     with any of its input arguments as the user-defined     data-type. This is needed in order to make ufuncs work with     built-in data-types. The data-type must have been previously     registered with the numpy system. The loop is passed in as     "
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "function"
                    }
                  ],
                  "type": "emphasis"
                },
                {
                  "type": "text",
                  "value": ". This loop can take arbitrary data which should be     passed in as "
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "data"
                    }
                  ],
                  "type": "emphasis"
                },
                {
                  "type": "text",
                  "value": ". The data-types the loop requires are passed     in as "
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "arg_types"
                    }
                  ],
                  "type": "emphasis"
                },
                {
                  "type": "text",
                  "value": " which must be a pointer to memory at least as     large as ufunc->nargs."
                }
              ],
              "type": "paragraph"
            }
          ],
          "type": "blockquote"
        },
        {
          "args": "int PyUFunc_RegisterLoopForDescr( \\",
          "children": [],
          "name": "c:function",
          "options": {},
          "type": "mystDirective",
          "value": "PyUFuncObject* ufunc, PyArray_Descr* userdtype, \\\nPyUFuncGenericFunction function, PyArray_Descr** arg_dtypes, void* data)"
        },
        {
          "children": [
            {
              "children": [
                {
                  "type": "text",
                  "value": "This function behaves like PyUFunc_RegisterLoopForType above, except    that it allows the user to register a 1-d loop using PyArray_Descr    objects instead of dtype type num values. This allows a 1-d loop to be    registered for structured array data-dtypes and custom data-types    instead of scalar data-types."
                }
              ],
              "type": "paragraph"
            }
          ],
          "type": "blockquote"
        },
        {
          "args": "int PyUFunc_ReplaceLoopBySignature( \\",
          "children": [],
          "name": "c:function",
          "options": {},
          "type": "mystDirective",
          "value": "PyUFuncObject* ufunc, PyUFuncGenericFunction newfunc, int* signature, \\\nPyUFuncGenericFunction* oldfunc)"
        },
        {
          "children": [
            {
              "children": [
                {
                  "type": "text",
                  "value": "Replace a 1-d loop matching the given "
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "signature"
                    }
                  ],
                  "type": "emphasis"
                },
                {
                  "type": "text",
                  "value": " in the     already-created "
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "ufunc"
                    }
                  ],
                  "type": "emphasis"
                },
                {
                  "type": "text",
                  "value": " with the new 1-d loop newfunc. Return the     old 1-d loop function in "
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "oldfunc"
                    }
                  ],
                  "type": "emphasis"
                },
                {
                  "type": "text",
                  "value": ". Return 0 on success and -1 on     failure. This function works only with built-in types (use     "
                },
                {
                  "type": "inlineCode",
                  "value": "PyUFunc_RegisterLoopForType"
                },
                {
                  "type": "text",
                  "value": " for user-defined types). A     signature is an array of data-type numbers indicating the inputs     followed by the outputs assumed by the 1-d loop."
                }
              ],
              "type": "paragraph"
            }
          ],
          "type": "blockquote"
        },
        {
          "args": "int PyUFunc_checkfperr(int errmask, PyObject* errobj)",
          "children": [],
          "name": "c:function",
          "options": {},
          "type": "mystDirective",
          "value": "A simple interface to the IEEE error-flag checking support. The\n*errmask* argument is a mask of ``UFUNC_MASK_{ERR}`` bitmasks\nindicating which errors to check for (and how to check for\nthem). The *errobj* must be a Python tuple with two elements: a\nstring containing the name which will be used in any communication\nof error and either a callable Python object (call-back function)\nor :c:data:`Py_None`. The callable object will only be used if\n:c:data:`UFUNC_ERR_CALL` is set as the desired error checking\nmethod. This routine manages the GIL and is safe to call even\nafter releasing the GIL. If an error in the IEEE-compatible\nhardware is determined a -1 is returned, otherwise a 0 is\nreturned."
        },
        {
          "args": "void PyUFunc_clearfperr()",
          "children": [],
          "name": "c:function",
          "options": {},
          "type": "mystDirective",
          "value": "Clear the IEEE error flags."
        },
        {
          "args": "void PyUFunc_GetPyValues( \\",
          "children": [],
          "name": "c:function",
          "options": {},
          "type": "mystDirective",
          "value": "char* name, int* bufsize, int* errmask, PyObject** errobj)"
        },
        {
          "children": [
            {
              "children": [
                {
                  "type": "text",
                  "value": "Get the Python values used for ufunc processing from the     thread-local storage area unless the defaults have been set in     which case the name lookup is bypassed. The name is placed as a     string in the first element of "
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "\\*errobj"
                    }
                  ],
                  "type": "emphasis"
                },
                {
                  "type": "text",
                  "value": ". The second element is     the looked-up function to call on error callback. The value of the     looked-up buffer-size to use is passed into "
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "bufsize"
                    }
                  ],
                  "type": "emphasis"
                },
                {
                  "type": "text",
                  "value": ", and the     value of the error mask is placed into "
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "errmask"
                    }
                  ],
                  "type": "emphasis"
                },
                {
                  "type": "text",
                  "value": "."
                }
              ],
              "type": "paragraph"
            }
          ],
          "type": "blockquote"
        }
      ],
      "level": 1,
      "target": null,
      "title": "Functions",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "At the core of every ufunc is a collection of type-specific functions that defines the basic functionality for each of the supported types. These functions must evaluate the underlying function "
            },
            {
              "type": "inlineMath",
              "value": "N\\geq1"
            },
            {
              "type": "text",
              "value": " times. Extra-data may be passed in that may be used during the calculation. This feature allows some general functions to be used as these basic looping functions. The general function has all the code needed to point variables to the right place and set up a function call. The general function assumes that the actual function to call is passed in as the extra data and calls it with the correct values. All of these functions are suitable for placing directly in the array of functions stored in the functions member of the PyUFuncObject structure."
            }
          ],
          "type": "paragraph"
        },
        {
          "args": "void PyUFunc_f_f_As_d_d( \\",
          "children": [],
          "name": "c:function",
          "options": {},
          "type": "mystDirective",
          "value": "char** args, npy_intp const *dimensions, npy_intp const *steps, void* func)"
        },
        {
          "args": "void PyUFunc_d_d( \\",
          "children": [],
          "name": "c:function",
          "options": {},
          "type": "mystDirective",
          "value": "char** args, npy_intp const *dimensions, npy_intp const *steps, void* func)"
        },
        {
          "args": "void PyUFunc_f_f( \\",
          "children": [],
          "name": "c:function",
          "options": {},
          "type": "mystDirective",
          "value": "char** args, npy_intp const *dimensions, npy_intp const *steps, void* func)"
        },
        {
          "args": "void PyUFunc_g_g( \\",
          "children": [],
          "name": "c:function",
          "options": {},
          "type": "mystDirective",
          "value": "char** args, npy_intp const *dimensions, npy_intp const *steps, void* func)"
        },
        {
          "args": "void PyUFunc_F_F_As_D_D( \\",
          "children": [],
          "name": "c:function",
          "options": {},
          "type": "mystDirective",
          "value": "char** args, npy_intp const *dimensions, npy_intp const *steps, void* func)"
        },
        {
          "args": "void PyUFunc_F_F( \\",
          "children": [],
          "name": "c:function",
          "options": {},
          "type": "mystDirective",
          "value": "char** args, npy_intp const *dimensions, npy_intp const *steps, void* func)"
        },
        {
          "args": "void PyUFunc_D_D( \\",
          "children": [],
          "name": "c:function",
          "options": {},
          "type": "mystDirective",
          "value": "char** args, npy_intp const *dimensions, npy_intp const *steps, void* func)"
        },
        {
          "args": "void PyUFunc_G_G( \\",
          "children": [],
          "name": "c:function",
          "options": {},
          "type": "mystDirective",
          "value": "char** args, npy_intp const *dimensions, npy_intp const *steps, void* func)"
        },
        {
          "args": "void PyUFunc_e_e( \\",
          "children": [],
          "name": "c:function",
          "options": {},
          "type": "mystDirective",
          "value": "char** args, npy_intp const *dimensions, npy_intp const *steps, void* func)"
        },
        {
          "args": "void PyUFunc_e_e_As_f_f( \\",
          "children": [],
          "name": "c:function",
          "options": {},
          "type": "mystDirective",
          "value": "char** args, npy_intp const *dimensions, npy_intp const *steps, void* func)"
        },
        {
          "args": "void PyUFunc_e_e_As_d_d( \\",
          "children": [],
          "name": "c:function",
          "options": {},
          "type": "mystDirective",
          "value": "char** args, npy_intp const *dimensions, npy_intp const *steps, void* func)"
        },
        {
          "children": [
            {
              "children": [
                {
                  "type": "text",
                  "value": "Type specific, core 1-d functions for ufuncs where each     calculation is obtained by calling a function taking one input     argument and returning one output. This function is passed in     "
                },
                {
                  "type": "inlineCode",
                  "value": "func"
                },
                {
                  "type": "text",
                  "value": ". The letters correspond to dtypechar's of the supported     data types ( "
                },
                {
                  "type": "inlineCode",
                  "value": "e"
                },
                {
                  "type": "text",
                  "value": " - half, "
                },
                {
                  "type": "inlineCode",
                  "value": "f"
                },
                {
                  "type": "text",
                  "value": " - float, "
                },
                {
                  "type": "inlineCode",
                  "value": "d"
                },
                {
                  "type": "text",
                  "value": " - double,     "
                },
                {
                  "type": "inlineCode",
                  "value": "g"
                },
                {
                  "type": "text",
                  "value": " - long double, "
                },
                {
                  "type": "inlineCode",
                  "value": "F"
                },
                {
                  "type": "text",
                  "value": " - cfloat, "
                },
                {
                  "type": "inlineCode",
                  "value": "D"
                },
                {
                  "type": "text",
                  "value": " - cdouble,     "
                },
                {
                  "type": "inlineCode",
                  "value": "G"
                },
                {
                  "type": "text",
                  "value": " - clongdouble). The argument "
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "func"
                    }
                  ],
                  "type": "emphasis"
                },
                {
                  "type": "text",
                  "value": " must support the same     signature. The _As_X_X variants assume ndarray's of one data type     but cast the values to use an underlying function that takes a     different data type. Thus, "
                },
                {
                  "type": "inlineCode",
                  "value": "PyUFunc_f_f_As_d_d"
                },
                {
                  "type": "text",
                  "value": " uses     ndarrays of data type "
                },
                {
                  "type": "inlineCode",
                  "value": "NPY_FLOAT"
                },
                {
                  "type": "text",
                  "value": " but calls out to a     C-function that takes double and returns double."
                }
              ],
              "type": "paragraph"
            }
          ],
          "type": "blockquote"
        },
        {
          "args": "void PyUFunc_ff_f_As_dd_d( \\",
          "children": [],
          "name": "c:function",
          "options": {},
          "type": "mystDirective",
          "value": "char** args, npy_intp const *dimensions, npy_intp const *steps, void* func)"
        },
        {
          "args": "void PyUFunc_ff_f( \\",
          "children": [],
          "name": "c:function",
          "options": {},
          "type": "mystDirective",
          "value": "char** args, npy_intp const *dimensions, npy_intp const *steps, void* func)"
        },
        {
          "args": "void PyUFunc_dd_d( \\",
          "children": [],
          "name": "c:function",
          "options": {},
          "type": "mystDirective",
          "value": "char** args, npy_intp const *dimensions, npy_intp const *steps, void* func)"
        },
        {
          "args": "void PyUFunc_gg_g( \\",
          "children": [],
          "name": "c:function",
          "options": {},
          "type": "mystDirective",
          "value": "char** args, npy_intp const *dimensions, npy_intp const *steps, void* func)"
        },
        {
          "args": "void PyUFunc_FF_F_As_DD_D( \\",
          "children": [],
          "name": "c:function",
          "options": {},
          "type": "mystDirective",
          "value": "char** args, npy_intp const *dimensions, npy_intp const *steps, void* func)"
        },
        {
          "args": "void PyUFunc_DD_D( \\",
          "children": [],
          "name": "c:function",
          "options": {},
          "type": "mystDirective",
          "value": "char** args, npy_intp const *dimensions, npy_intp const *steps, void* func)"
        },
        {
          "args": "void PyUFunc_FF_F( \\",
          "children": [],
          "name": "c:function",
          "options": {},
          "type": "mystDirective",
          "value": "char** args, npy_intp const *dimensions, npy_intp const *steps, void* func)"
        },
        {
          "args": "void PyUFunc_GG_G( \\",
          "children": [],
          "name": "c:function",
          "options": {},
          "type": "mystDirective",
          "value": "char** args, npy_intp const *dimensions, npy_intp const *steps, void* func)"
        },
        {
          "args": "void PyUFunc_ee_e( \\",
          "children": [],
          "name": "c:function",
          "options": {},
          "type": "mystDirective",
          "value": "char** args, npy_intp const *dimensions, npy_intp const *steps, void* func)"
        },
        {
          "args": "void PyUFunc_ee_e_As_ff_f( \\",
          "children": [],
          "name": "c:function",
          "options": {},
          "type": "mystDirective",
          "value": "char** args, npy_intp const *dimensions, npy_intp const *steps, void* func)"
        },
        {
          "args": "void PyUFunc_ee_e_As_dd_d( \\",
          "children": [],
          "name": "c:function",
          "options": {},
          "type": "mystDirective",
          "value": "char** args, npy_intp const *dimensions, npy_intp const *steps, void* func)"
        },
        {
          "children": [
            {
              "children": [
                {
                  "type": "text",
                  "value": "Type specific, core 1-d functions for ufuncs where each     calculation is obtained by calling a function taking two input     arguments and returning one output. The underlying function to     call is passed in as "
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "func"
                    }
                  ],
                  "type": "emphasis"
                },
                {
                  "type": "text",
                  "value": ". The letters correspond to     dtypechar's of the specific data type supported by the     general-purpose function. The argument "
                },
                {
                  "type": "inlineCode",
                  "value": "func"
                },
                {
                  "type": "text",
                  "value": " must support the     corresponding signature. The "
                },
                {
                  "type": "inlineCode",
                  "value": "_As_XX_X"
                },
                {
                  "type": "text",
                  "value": " variants assume ndarrays     of one data type but cast the values at each iteration of the loop     to use the underlying function that takes a different data type."
                }
              ],
              "type": "paragraph"
            }
          ],
          "type": "blockquote"
        },
        {
          "args": "void PyUFunc_O_O( \\",
          "children": [],
          "name": "c:function",
          "options": {},
          "type": "mystDirective",
          "value": "char** args, npy_intp const *dimensions, npy_intp const *steps, void* func)"
        },
        {
          "args": "void PyUFunc_OO_O( \\",
          "children": [],
          "name": "c:function",
          "options": {},
          "type": "mystDirective",
          "value": "char** args, npy_intp const *dimensions, npy_intp const *steps, void* func)"
        },
        {
          "children": [
            {
              "children": [
                {
                  "type": "text",
                  "value": "One-input, one-output, and two-input, one-output core 1-d functions     for the "
                },
                {
                  "type": "inlineCode",
                  "value": "NPY_OBJECT"
                },
                {
                  "type": "text",
                  "value": " data type. These functions handle reference     count issues and return early on error. The actual function to call is     "
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "func"
                    }
                  ],
                  "type": "emphasis"
                },
                {
                  "type": "text",
                  "value": " and it must accept calls with the signature "
                },
                {
                  "type": "inlineCode",
                  "value": "(PyObject*)\n    (PyObject*)"
                },
                {
                  "type": "text",
                  "value": " for "
                },
                {
                  "type": "inlineCode",
                  "value": "PyUFunc_O_O"
                },
                {
                  "type": "text",
                  "value": " or "
                },
                {
                  "type": "inlineCode",
                  "value": "(PyObject*)(PyObject *,\n    PyObject *)"
                },
                {
                  "type": "text",
                  "value": " for "
                },
                {
                  "type": "inlineCode",
                  "value": "PyUFunc_OO_O"
                },
                {
                  "type": "text",
                  "value": "."
                }
              ],
              "type": "paragraph"
            }
          ],
          "type": "blockquote"
        },
        {
          "args": "void PyUFunc_O_O_method( \\",
          "children": [],
          "name": "c:function",
          "options": {},
          "type": "mystDirective",
          "value": "char** args, npy_intp const *dimensions, npy_intp const *steps, void* func)"
        },
        {
          "children": [
            {
              "children": [
                {
                  "type": "text",
                  "value": "This general purpose 1-d core function assumes that "
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "func"
                    }
                  ],
                  "type": "emphasis"
                },
                {
                  "type": "text",
                  "value": " is a string     representing a method of the input object. For each     iteration of the loop, the Python object is extracted from the array     and its "
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "func"
                    }
                  ],
                  "type": "emphasis"
                },
                {
                  "type": "text",
                  "value": " method is called returning the result to the output array."
                }
              ],
              "type": "paragraph"
            }
          ],
          "type": "blockquote"
        },
        {
          "args": "void PyUFunc_OO_O_method( \\",
          "children": [],
          "name": "c:function",
          "options": {},
          "type": "mystDirective",
          "value": "char** args, npy_intp const *dimensions, npy_intp const *steps, void* func)"
        },
        {
          "children": [
            {
              "children": [
                {
                  "type": "text",
                  "value": "This general purpose 1-d core function assumes that "
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "func"
                    }
                  ],
                  "type": "emphasis"
                },
                {
                  "type": "text",
                  "value": " is a     string representing a method of the input object that takes one     argument. The first argument in "
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "args"
                    }
                  ],
                  "type": "emphasis"
                },
                {
                  "type": "text",
                  "value": " is the method whose function is     called, the second argument in "
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "args"
                    }
                  ],
                  "type": "emphasis"
                },
                {
                  "type": "text",
                  "value": " is the argument passed to the     function. The output of the function is stored in the third entry     of "
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "args"
                    }
                  ],
                  "type": "emphasis"
                },
                {
                  "type": "text",
                  "value": "."
                }
              ],
              "type": "paragraph"
            }
          ],
          "type": "blockquote"
        },
        {
          "args": "void PyUFunc_On_Om( \\",
          "children": [],
          "name": "c:function",
          "options": {},
          "type": "mystDirective",
          "value": "char** args, npy_intp const *dimensions, npy_intp const *steps, void* func)"
        },
        {
          "children": [
            {
              "children": [
                {
                  "type": "text",
                  "value": "This is the 1-d core function used by the dynamic ufuncs created     by umath.frompyfunc(function, nin, nout). In this case "
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "func"
                    }
                  ],
                  "type": "emphasis"
                },
                {
                  "type": "text",
                  "value": " is a     pointer to a "
                },
                {
                  "type": "inlineCode",
                  "value": "PyUFunc_PyFuncData"
                },
                {
                  "type": "text",
                  "value": " structure which has definition"
                }
              ],
              "type": "paragraph"
            },
            {
              "args": "PyUFunc_PyFuncData",
              "children": [],
              "name": "c:type",
              "options": {},
              "type": "mystDirective",
              "value": ".. code-block:: c\n\n        typedef struct {\n            int nin;\n            int nout;\n            PyObject *callable;\n        } PyUFunc_PyFuncData;"
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "At each iteration of the loop, the "
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "nin"
                    }
                  ],
                  "type": "emphasis"
                },
                {
                  "type": "text",
                  "value": " input objects are extracted     from their object arrays and placed into an argument tuple, the Python     "
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "callable"
                    }
                  ],
                  "type": "emphasis"
                },
                {
                  "type": "text",
                  "value": " is called with the input arguments, and the nout     outputs are placed into their object arrays."
                }
              ],
              "type": "paragraph"
            }
          ],
          "type": "blockquote"
        }
      ],
      "level": 1,
      "target": null,
      "title": "Generic functions",
      "type": "Section"
    },
    {
      "children": [
        {
          "args": "PY_UFUNC_UNIQUE_SYMBOL",
          "children": [],
          "name": "c:macro",
          "options": {},
          "type": "mystDirective",
          "value": ""
        },
        {
          "args": "NO_IMPORT_UFUNC",
          "children": [],
          "name": "c:macro",
          "options": {},
          "type": "mystDirective",
          "value": ""
        },
        {
          "args": "void import_ufunc(void)",
          "children": [],
          "name": "c:function",
          "options": {},
          "type": "mystDirective",
          "value": "These are the constants and functions for accessing the ufunc\nC-API from extension modules in precisely the same way as the\narray C-API can be accessed. The ``import_ufunc`` () function must\nalways be called (in the initialization subroutine of the\nextension module). If your extension module is in one file then\nthat is all that is required. The other two constants are useful\nif your extension module makes use of multiple files. In that\ncase, define :c:data:`PY_UFUNC_UNIQUE_SYMBOL` to something unique to\nyour code and then in source files that do not contain the module\ninitialization function but still need access to the UFUNC API,\ndefine :c:data:`PY_UFUNC_UNIQUE_SYMBOL` to the same name used previously\nand also define :c:data:`NO_IMPORT_UFUNC`.\n\nThe C-API is actually an array of function pointers. This array is\ncreated (and pointed to by a global variable) by import_ufunc. The\nglobal variable is either statically defined or allowed to be seen\nby other files depending on the state of\n:c:data:`PY_UFUNC_UNIQUE_SYMBOL` and :c:data:`NO_IMPORT_UFUNC`."
        },
        {
          "args": "",
          "children": [],
          "name": "index",
          "options": {},
          "type": "mystDirective",
          "value": "pair: ufunc; C-API"
        }
      ],
      "level": 1,
      "target": null,
      "title": "Importing the API",
      "type": "Section"
    }
  ],
  "content": {},
  "example_section_data": {
    "children": [],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": null,
  "item_line": null,
  "item_type": null,
  "ordered_sections": [],
  "references": null,
  "see_also": [],
  "signature": {
    "type": "Signature",
    "value": null
  },
  "type": "DocBlob"
}