{
  "aliases": [],
  "arbitrary": [
    {
      "children": [
        {
          "args": "numpy.ma",
          "children": [],
          "name": "currentmodule",
          "options": {},
          "type": "mystDirective",
          "value": ""
        },
        {
          "type": "mystComment",
          "value": ".. for doctests\n   >>> from numpy import ma"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "In addition to the "
            },
            {
              "type": "inlineCode",
              "value": "MaskedArray"
            },
            {
              "type": "text",
              "value": " class, the "
            },
            {
              "type": "inlineCode",
              "value": "numpy.ma"
            },
            {
              "type": "text",
              "value": " module defines several constants."
            }
          ],
          "type": "paragraph"
        },
        {
          "args": "masked",
          "children": [],
          "name": "data",
          "options": {},
          "type": "mystDirective",
          "value": "The :attr:`masked` constant is a special case of :class:`MaskedArray`,\nwith a float datatype and a null shape. It is used to test whether a\nspecific entry of a masked array is masked, or to mask one or several\nentries of a masked array::\n\n   >>> x = ma.array([1, 2, 3], mask=[0, 1, 0])\n   >>> x[1] is ma.masked\n   True\n   >>> x[-1] = ma.masked\n   >>> x\n   masked_array(data=[1, --, --],\n                mask=[False,  True,  True],\n          fill_value=999999)"
        },
        {
          "args": "nomask",
          "children": [],
          "name": "data",
          "options": {},
          "type": "mystDirective",
          "value": "Value indicating that a masked array has no invalid entry.\n:attr:`nomask` is used internally to speed up computations when the mask\nis not needed. It is represented internally as ``np.False_``."
        },
        {
          "args": "masked_print_option",
          "children": [],
          "name": "data",
          "options": {},
          "type": "mystDirective",
          "value": "String used in lieu of missing data when a masked array is printed.\nBy default, this string is ``'--'``.\n\nUse ``set_display()`` to change the default string.\nExample usage: ``numpy.ma.masked_print_option.set_display('X')`` \nreplaces missing data with ``'X'``."
        }
      ],
      "level": 0,
      "target": "numpy.ma.constants",
      "title": "Constants of the :mod:`numpy.ma` module",
      "type": "Section"
    },
    {
      "children": [
        {
          "args": "MaskedArray",
          "children": [],
          "name": "class",
          "options": {},
          "type": "mystDirective",
          "value": ""
        },
        {
          "children": [
            {
              "type": "text",
              "value": "A subclass of "
            },
            {
              "type": "inlineCode",
              "value": "~numpy.ndarray"
            },
            {
              "type": "text",
              "value": " designed to manipulate numerical arrays with missing data."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "An instance of "
            },
            {
              "type": "inlineCode",
              "value": "MaskedArray"
            },
            {
              "type": "text",
              "value": " can be thought as the combination of several elements:"
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The "
                    },
                    {
                      "type": "inlineCode",
                      "value": "~MaskedArray.data"
                    },
                    {
                      "type": "text",
                      "value": ", as a regular "
                    },
                    {
                      "type": "inlineCode",
                      "value": "numpy.ndarray"
                    },
                    {
                      "type": "text",
                      "value": " of any shape or datatype (the data)."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "A boolean "
                    },
                    {
                      "type": "inlineCode",
                      "value": "~numpy.ma.MaskedArray.mask"
                    },
                    {
                      "type": "text",
                      "value": " with the same shape as the data, where a "
                    },
                    {
                      "type": "inlineCode",
                      "value": "True"
                    },
                    {
                      "type": "text",
                      "value": " value indicates that the corresponding element of the data is invalid.   The special value "
                    },
                    {
                      "type": "inlineCode",
                      "value": "nomask"
                    },
                    {
                      "type": "text",
                      "value": " is also acceptable for arrays without named fields, and indicates that no data is invalid."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "A "
                    },
                    {
                      "type": "inlineCode",
                      "value": "~numpy.ma.MaskedArray.fill_value"
                    },
                    {
                      "type": "text",
                      "value": ", a value that may be used to replace the invalid entries in order to return a standard "
                    },
                    {
                      "type": "inlineCode",
                      "value": "numpy.ndarray"
                    },
                    {
                      "type": "text",
                      "value": "."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            }
          ],
          "ordered": false,
          "spread": false,
          "start": 1,
          "type": "list"
        }
      ],
      "level": 0,
      "target": "maskedarray.baseclass",
      "title": "The :class:`MaskedArray` class",
      "type": "Section"
    },
    {
      "children": [
        {
          "args": ":ref:`Array Attributes <arrays.ndarray.attributes>`",
          "children": [],
          "name": "seealso",
          "options": {},
          "type": "mystDirective",
          "value": ""
        },
        {
          "args": "numpy::ma.MaskedArray.data",
          "children": [],
          "name": "autoattribute",
          "options": {},
          "type": "mystDirective",
          "value": ""
        },
        {
          "args": "numpy::ma.MaskedArray.mask",
          "children": [],
          "name": "autoattribute",
          "options": {},
          "type": "mystDirective",
          "value": ""
        },
        {
          "args": "numpy::ma.MaskedArray.recordmask",
          "children": [],
          "name": "autoattribute",
          "options": {},
          "type": "mystDirective",
          "value": ""
        },
        {
          "args": "numpy::ma.MaskedArray.fill_value",
          "children": [],
          "name": "autoattribute",
          "options": {},
          "type": "mystDirective",
          "value": ""
        },
        {
          "args": "numpy::ma.MaskedArray.baseclass",
          "children": [],
          "name": "autoattribute",
          "options": {},
          "type": "mystDirective",
          "value": ""
        },
        {
          "args": "numpy::ma.MaskedArray.sharedmask",
          "children": [],
          "name": "autoattribute",
          "options": {},
          "type": "mystDirective",
          "value": ""
        },
        {
          "args": "numpy::ma.MaskedArray.hardmask",
          "children": [],
          "name": "autoattribute",
          "options": {},
          "type": "mystDirective",
          "value": ""
        },
        {
          "children": [
            {
              "type": "text",
              "value": "As "
            },
            {
              "type": "inlineCode",
              "value": "MaskedArray"
            },
            {
              "type": "text",
              "value": " is a subclass of "
            },
            {
              "type": "inlineCode",
              "value": "~numpy.ndarray"
            },
            {
              "type": "text",
              "value": ", a masked array also inherits all the attributes and properties of a  "
            },
            {
              "type": "inlineCode",
              "value": "~numpy.ndarray"
            },
            {
              "type": "text",
              "value": " instance."
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": ".. autosummary:: \n    :toctree:generated/\n    MaskedArray.base\n    MaskedArray.ctypes\n    MaskedArray.dtype\n    MaskedArray.flags\n\n    MaskedArray.itemsize\n    MaskedArray.nbytes\n    MaskedArray.ndim\n    MaskedArray.shape\n    MaskedArray.size\n    MaskedArray.strides\n\n    MaskedArray.imag\n    MaskedArray.real\n\n    MaskedArray.flat\n    MaskedArray.__array_priority__"
        }
      ],
      "level": 1,
      "target": "ma-attributes",
      "title": "Attributes and properties of masked arrays",
      "type": "Section"
    },
    {
      "children": [
        {
          "args": ":ref:`Array methods <array.ndarray.methods>`",
          "children": [],
          "name": "seealso",
          "options": {},
          "type": "mystDirective",
          "value": ""
        }
      ],
      "level": 0,
      "target": null,
      "title": ":class:`MaskedArray` methods",
      "type": "Section"
    },
    {
      "children": [
        {
          "type": "code",
          "value": ".. autosummary:: \n    :toctree:generated/\n    MaskedArray.__float__\n    MaskedArray.__int__\n\n    MaskedArray.view\n    MaskedArray.astype\n    MaskedArray.byteswap\n\n    MaskedArray.compressed\n    MaskedArray.filled\n    MaskedArray.tofile\n    MaskedArray.toflex\n    MaskedArray.tolist\n    MaskedArray.torecords\n    MaskedArray.tostring\n    MaskedArray.tobytes"
        }
      ],
      "level": 1,
      "target": null,
      "title": "Conversion",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "For reshape, resize, and transpose, the single tuple argument may be replaced with "
            },
            {
              "type": "inlineCode",
              "value": "n"
            },
            {
              "type": "text",
              "value": " integers which will be interpreted as an n-tuple."
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": ".. autosummary:: \n    :toctree:generated/\n    MaskedArray.flatten\n    MaskedArray.ravel\n    MaskedArray.reshape\n    MaskedArray.resize\n    MaskedArray.squeeze\n    MaskedArray.swapaxes\n    MaskedArray.transpose\n    MaskedArray.T"
        }
      ],
      "level": 1,
      "target": null,
      "title": "Shape manipulation",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "For array methods that take an "
            },
            {
              "type": "inlineCode",
              "value": "axis"
            },
            {
              "type": "text",
              "value": " keyword, it defaults to None. If axis is None, then the array is treated as a 1-D array. Any other value for "
            },
            {
              "type": "inlineCode",
              "value": "axis"
            },
            {
              "type": "text",
              "value": " represents the dimension along which the operation should proceed."
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": ".. autosummary:: \n    :toctree:generated/\n    MaskedArray.argmax\n    MaskedArray.argmin\n    MaskedArray.argsort\n    MaskedArray.choose\n    MaskedArray.compress\n    MaskedArray.diagonal\n    MaskedArray.fill\n    MaskedArray.item\n    MaskedArray.nonzero\n    MaskedArray.put\n    MaskedArray.repeat\n    MaskedArray.searchsorted\n    MaskedArray.sort\n    MaskedArray.take"
        }
      ],
      "level": 1,
      "target": null,
      "title": "Item selection and manipulation",
      "type": "Section"
    },
    {
      "children": [
        {
          "type": "code",
          "value": ".. autosummary:: \n    :toctree:generated/\n    MaskedArray.copy\n    MaskedArray.dump\n    MaskedArray.dumps"
        }
      ],
      "level": 1,
      "target": null,
      "title": "Pickling and copy",
      "type": "Section"
    },
    {
      "children": [
        {
          "type": "code",
          "value": ".. autosummary:: \n    :toctree:generated/\n    MaskedArray.all\n    MaskedArray.anom\n    MaskedArray.any\n    MaskedArray.clip\n    MaskedArray.conj\n    MaskedArray.conjugate\n    MaskedArray.cumprod\n    MaskedArray.cumsum\n    MaskedArray.max\n    MaskedArray.mean\n    MaskedArray.min\n    MaskedArray.prod\n    MaskedArray.product\n    MaskedArray.ptp\n    MaskedArray.round\n    MaskedArray.std\n    MaskedArray.sum\n    MaskedArray.trace\n    MaskedArray.var"
        }
      ],
      "level": 1,
      "target": null,
      "title": "Calculations",
      "type": "Section"
    },
    {
      "children": [
        {
          "args": "comparison, arithmetic, operation, operator",
          "children": [],
          "name": "index",
          "options": {},
          "type": "mystDirective",
          "value": ""
        }
      ],
      "level": 1,
      "target": null,
      "title": "Arithmetic and comparison operations",
      "type": "Section"
    },
    {
      "children": [
        {
          "type": "code",
          "value": ".. autosummary:: \n    :toctree:generated/\n    MaskedArray.__lt__\n    MaskedArray.__le__\n    MaskedArray.__gt__\n    MaskedArray.__ge__\n    MaskedArray.__eq__\n    MaskedArray.__ne__"
        }
      ],
      "level": 2,
      "target": null,
      "title": "Comparison operators:",
      "type": "Section"
    },
    {
      "children": [
        {
          "type": "code",
          "value": ".. autosummary:: \n    :toctree:generated/\n    MaskedArray.__bool__"
        }
      ],
      "level": 2,
      "target": null,
      "title": "Truth value of an array (:class:`bool() <bool>`):",
      "type": "Section"
    },
    {
      "children": [
        {
          "type": "code",
          "value": ".. autosummary:: \n    :toctree:generated/\n    MaskedArray.__abs__\n    MaskedArray.__add__\n    MaskedArray.__radd__\n    MaskedArray.__sub__\n    MaskedArray.__rsub__\n    MaskedArray.__mul__\n    MaskedArray.__rmul__\n    MaskedArray.__div__\n    MaskedArray.__truediv__\n    MaskedArray.__rtruediv__\n    MaskedArray.__floordiv__\n    MaskedArray.__rfloordiv__\n    MaskedArray.__mod__\n    MaskedArray.__rmod__\n    MaskedArray.__divmod__\n    MaskedArray.__rdivmod__\n    MaskedArray.__pow__\n    MaskedArray.__rpow__\n    MaskedArray.__lshift__\n    MaskedArray.__rlshift__\n    MaskedArray.__rshift__\n    MaskedArray.__rrshift__\n    MaskedArray.__and__\n    MaskedArray.__rand__\n    MaskedArray.__or__\n    MaskedArray.__ror__\n    MaskedArray.__xor__\n    MaskedArray.__rxor__"
        }
      ],
      "level": 2,
      "target": null,
      "title": "Arithmetic:",
      "type": "Section"
    },
    {
      "children": [
        {
          "type": "code",
          "value": ".. autosummary:: \n    :toctree:generated/\n    MaskedArray.__iadd__\n    MaskedArray.__isub__\n    MaskedArray.__imul__\n    MaskedArray.__idiv__\n    MaskedArray.__itruediv__\n    MaskedArray.__ifloordiv__\n    MaskedArray.__imod__\n    MaskedArray.__ipow__\n    MaskedArray.__ilshift__\n    MaskedArray.__irshift__\n    MaskedArray.__iand__\n    MaskedArray.__ior__\n    MaskedArray.__ixor__"
        }
      ],
      "level": 2,
      "target": null,
      "title": "Arithmetic, in-place:",
      "type": "Section"
    },
    {
      "children": [
        {
          "type": "code",
          "value": ".. autosummary:: \n    :toctree:generated/\n    MaskedArray.__repr__\n    MaskedArray.__str__\n\n    MaskedArray.ids\n    MaskedArray.iscontiguous"
        }
      ],
      "level": 1,
      "target": null,
      "title": "Representation",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "For standard library functions:"
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": ".. autosummary:: \n    :toctree:generated/\n    MaskedArray.__copy__\n    MaskedArray.__deepcopy__\n    MaskedArray.__getstate__\n    MaskedArray.__reduce__\n    MaskedArray.__setstate__"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Basic customization:"
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": ".. autosummary:: \n    :toctree:generated/\n    MaskedArray.__new__\n    MaskedArray.__array__\n    MaskedArray.__array_wrap__"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Container customization: (see "
            },
            {
              "type": "inlineCode",
              "value": "Indexing <arrays.indexing>"
            },
            {
              "type": "text",
              "value": ")"
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": ".. autosummary:: \n    :toctree:generated/\n    MaskedArray.__len__\n    MaskedArray.__getitem__\n    MaskedArray.__setitem__\n    MaskedArray.__delitem__\n    MaskedArray.__contains__"
        }
      ],
      "level": 1,
      "target": null,
      "title": "Special methods",
      "type": "Section"
    },
    {
      "children": [],
      "level": 1,
      "target": null,
      "title": "Specific methods",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "The following methods can be used to access information about the mask or to manipulate the mask."
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": ".. autosummary:: \n    :toctree:generated/\n    MaskedArray.__setmask__\n\n    MaskedArray.harden_mask\n    MaskedArray.soften_mask\n    MaskedArray.unshare_mask\n    MaskedArray.shrink_mask"
        }
      ],
      "level": 2,
      "target": null,
      "title": "Handling the mask",
      "type": "Section"
    },
    {
      "children": [
        {
          "type": "code",
          "value": ".. autosummary:: \n    :toctree:generated/\n    MaskedArray.get_fill_value\n    MaskedArray.set_fill_value"
        }
      ],
      "level": 2,
      "target": null,
      "title": "Handling the `fill_value`",
      "type": "Section"
    },
    {
      "children": [
        {
          "type": "code",
          "value": ".. autosummary:: \n    :toctree:generated/\n    MaskedArray.count"
        }
      ],
      "level": 2,
      "target": null,
      "title": "Counting the missing elements",
      "type": "Section"
    }
  ],
  "content": {},
  "example_section_data": {
    "children": [],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": null,
  "item_line": null,
  "item_type": null,
  "ordered_sections": [],
  "references": null,
  "see_also": [],
  "signature": {
    "type": "Signature",
    "value": null
  },
  "type": "DocBlob"
}