{
  "aliases": [],
  "arbitrary": [
    {
      "children": [
        {
          "args": "numpy.random",
          "children": [],
          "name": "currentmodule",
          "options": {},
          "type": "mystDirective",
          "value": ""
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "The BitGenerators have been designed to be extendable using standard tools for high-performance Python -- numba and Cython.  The "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "~Generator"
            },
            {
              "type": "text",
              "value": " object can also be used with user-provided BitGenerators as long as these export a small set of required functions."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": "extending",
      "title": "Extending",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Numba can be used with either CTypes or CFFI.  The current iteration of the BitGenerators all export a small set of functions through both interfaces."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "This example shows how numba can be used to produce gaussian samples using a pure Python implementation which is then compiled.  The random numbers are provided by "
            },
            {
              "type": "inlineCode",
              "value": "ctypes.next_double"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        },
        {
          "args": "../../../../numpy/random/_examples/numba/extending.py",
          "children": [],
          "name": "literalinclude",
          "options": {
            "end-before": "example 2",
            "language": "python"
          },
          "type": "mystDirective",
          "value": ""
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Both CTypes and CFFI allow the more complicated distributions to be used directly in Numba after compiling the file distributions.c into a "
            },
            {
              "type": "inlineCode",
              "value": "DLL"
            },
            {
              "type": "text",
              "value": " or "
            },
            {
              "type": "inlineCode",
              "value": "so"
            },
            {
              "type": "text",
              "value": ".  An example showing the use of a more complicated distribution is in the "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "Examples"
            },
            {
              "type": "text",
              "value": " section below."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 1,
      "target": null,
      "title": "Numba",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Cython can be used to unpack the "
            },
            {
              "type": "inlineCode",
              "value": "PyCapsule"
            },
            {
              "type": "text",
              "value": " provided by a BitGenerator. This example uses "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "PCG64"
            },
            {
              "type": "text",
              "value": " and the example from above.  The usual caveats for writing high-performance code using Cython -- removing bounds checks and wrap around, providing array alignment information -- still apply."
            }
          ],
          "type": "paragraph"
        },
        {
          "args": "../../../../numpy/random/_examples/cython/extending_distributions.pyx",
          "children": [],
          "name": "literalinclude",
          "options": {
            "end-before": "example 2",
            "language": "cython"
          },
          "type": "mystDirective",
          "value": ""
        },
        {
          "children": [
            {
              "type": "text",
              "value": "The BitGenerator can also be directly accessed using the members of the "
            },
            {
              "type": "inlineCode",
              "value": "bitgen_t"
            },
            {
              "type": "text",
              "value": " struct."
            }
          ],
          "type": "paragraph"
        },
        {
          "args": "../../../../numpy/random/_examples/cython/extending_distributions.pyx",
          "children": [],
          "name": "literalinclude",
          "options": {
            "end-before": "example 3",
            "language": "cython",
            "start-after": "example 2"
          },
          "type": "mystDirective",
          "value": ""
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Cython can be used to directly access the functions in "
            },
            {
              "type": "inlineCode",
              "value": "numpy/random/c_distributions.pxd"
            },
            {
              "type": "text",
              "value": ". This requires linking with the "
            },
            {
              "type": "inlineCode",
              "value": "npyrandom"
            },
            {
              "type": "text",
              "value": " library located in "
            },
            {
              "type": "inlineCode",
              "value": "numpy/random/lib"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        },
        {
          "args": "../../../../numpy/random/_examples/cython/extending_distributions.pyx",
          "children": [],
          "name": "literalinclude",
          "options": {
            "language": "cython",
            "start-after": "example 3"
          },
          "type": "mystDirective",
          "value": ""
        },
        {
          "children": [
            {
              "type": "text",
              "value": "See "
            },
            {
              "type": "inlineCode",
              "value": "extending_cython_example"
            },
            {
              "type": "text",
              "value": " for the complete listings of these examples and a minimal "
            },
            {
              "type": "inlineCode",
              "value": "setup.py"
            },
            {
              "type": "text",
              "value": " to build the c-extension modules."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 1,
      "target": "random_cython",
      "title": "Cython",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "CFFI can be used to directly access the functions in "
            },
            {
              "type": "inlineCode",
              "value": "include/numpy/random/distributions.h"
            },
            {
              "type": "text",
              "value": ". Some \"massaging\" of the header file is required:"
            }
          ],
          "type": "paragraph"
        },
        {
          "args": "../../../../numpy/random/_examples/cffi/extending.py",
          "children": [],
          "name": "literalinclude",
          "options": {
            "end-before": "dlopen",
            "language": "python"
          },
          "type": "mystDirective",
          "value": ""
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Once the header is parsed by "
            },
            {
              "type": "inlineCode",
              "value": "ffi.cdef"
            },
            {
              "type": "text",
              "value": ", the functions can be accessed directly from the "
            },
            {
              "type": "inlineCode",
              "value": "_generator"
            },
            {
              "type": "text",
              "value": " shared object, using the "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "BitGenerator.cffi"
            },
            {
              "type": "text",
              "value": " interface."
            }
          ],
          "type": "paragraph"
        },
        {
          "args": "../../../../numpy/random/_examples/cffi/extending.py",
          "children": [],
          "name": "literalinclude",
          "options": {
            "language": "python",
            "start-after": "dlopen"
          },
          "type": "mystDirective",
          "value": ""
        }
      ],
      "level": 1,
      "target": null,
      "title": "CFFI",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "~Generator"
            },
            {
              "type": "text",
              "value": " can be used with user-provided "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "~BitGenerator"
            },
            {
              "type": "text",
              "value": "\\ s. The simplest way to write a new BitGenerator is to examine the pyx file of one of the existing BitGenerators. The key structure that must be provided is the "
            },
            {
              "type": "inlineCode",
              "value": "capsule"
            },
            {
              "type": "text",
              "value": " which contains a "
            },
            {
              "type": "inlineCode",
              "value": "PyCapsule"
            },
            {
              "type": "text",
              "value": " to a struct pointer of type "
            },
            {
              "type": "inlineCode",
              "value": "bitgen_t"
            },
            {
              "type": "text",
              "value": ","
            }
          ],
          "type": "paragraph"
        },
        {
          "args": "c",
          "children": [],
          "name": "code-block",
          "options": {},
          "type": "mystDirective",
          "value": "typedef struct bitgen {\n  void *state;\n  uint64_t (*next_uint64)(void *st);\n  uint32_t (*next_uint32)(void *st);\n  double (*next_double)(void *st);\n  uint64_t (*next_raw)(void *st);\n} bitgen_t;"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "which provides 5 pointers. The first is an opaque pointer to the data structure used by the BitGenerators.  The next three are function pointers which return the next 64- and 32-bit unsigned integers, the next random double and the next raw value.  This final function is used for testing and so can be set to the next 64-bit unsigned integer function if not needed. Functions inside "
            },
            {
              "type": "inlineCode",
              "value": "Generator"
            },
            {
              "type": "text",
              "value": " use this structure as in"
            }
          ],
          "type": "paragraph"
        },
        {
          "args": "c",
          "children": [],
          "name": "code-block",
          "options": {},
          "type": "mystDirective",
          "value": "bitgen_state->next_uint64(bitgen_state->state)"
        }
      ],
      "level": 1,
      "target": null,
      "title": "New Bit Generators",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "children": [
                {
                  "children": [
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "exists",
                      "reference": {
                        "kind": "?",
                        "module": "",
                        "path": "examples/numba",
                        "type": "RefInfo",
                        "version": ""
                      },
                      "type": "Link",
                      "value": "Numba"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "exists",
                      "reference": {
                        "kind": "?",
                        "module": "",
                        "path": "examples/numba_cffi",
                        "type": "RefInfo",
                        "version": ""
                      },
                      "type": "Link",
                      "value": "CFFI + Numba"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "exists",
                      "reference": {
                        "kind": "?",
                        "module": "",
                        "path": "examples/cython/index",
                        "type": "RefInfo",
                        "version": ""
                      },
                      "type": "Link",
                      "value": "Cython"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "exists",
                      "reference": {
                        "kind": "?",
                        "module": "",
                        "path": "examples/cffi",
                        "type": "RefInfo",
                        "version": ""
                      },
                      "type": "Link",
                      "value": "CFFI"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            }
          ],
          "ordered": false,
          "spread": false,
          "start": 1,
          "type": "list"
        }
      ],
      "level": 1,
      "target": null,
      "title": "Examples",
      "type": "Section"
    }
  ],
  "content": {},
  "example_section_data": {
    "children": [],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": null,
  "item_line": null,
  "item_type": null,
  "ordered_sections": [],
  "references": null,
  "see_also": [],
  "signature": {
    "type": "Signature",
    "value": null
  },
  "type": "DocBlob"
}