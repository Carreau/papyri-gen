{
  "aliases": [],
  "arbitrary": [
    {
      "children": [
        {
          "args": "numpy.random",
          "children": [],
          "name": "currentmodule",
          "options": {},
          "type": "mystDirective",
          "value": ""
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "The "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "~Generator"
            },
            {
              "type": "text",
              "value": " provides access to a wide range of distributions, and served as a replacement for "
            },
            {
              "type": "inlineCode",
              "value": "~numpy.random.RandomState"
            },
            {
              "type": "text",
              "value": ".  The main difference between the two is that "
            },
            {
              "type": "inlineCode",
              "value": "Generator"
            },
            {
              "type": "text",
              "value": " relies on an additional BitGenerator to manage state and generate the random bits, which are then transformed into random values from useful distributions. The default BitGenerator used by "
            },
            {
              "type": "inlineCode",
              "value": "Generator"
            },
            {
              "type": "text",
              "value": " is "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "~PCG64"
            },
            {
              "type": "text",
              "value": ".  The BitGenerator can be changed by passing an instantized BitGenerator to "
            },
            {
              "type": "inlineCode",
              "value": "Generator"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        },
        {
          "args": "default_rng",
          "children": [],
          "name": "autofunction",
          "options": {},
          "type": "mystDirective",
          "value": ""
        },
        {
          "args": "Generator",
          "children": [],
          "name": "autoclass",
          "options": {
            "exclude-members": "__init__",
            "members": "__init__"
          },
          "type": "mystDirective",
          "value": ""
        }
      ],
      "level": 0,
      "target": null,
      "title": "Random Generator",
      "type": "Section"
    },
    {
      "children": [
        {
          "type": "code",
          "value": ".. autosummary:: \n    :toctree:generated/\n    ~numpy.random.Generator.bit_generator\n    ~numpy.random.Generator.spawn"
        }
      ],
      "level": 1,
      "target": null,
      "title": "Accessing the BitGenerator and Spawning",
      "type": "Section"
    },
    {
      "children": [
        {
          "type": "code",
          "value": ".. autosummary:: \n    :toctree:generated/\n    ~numpy.random.Generator.integers\n    ~numpy.random.Generator.random\n    ~numpy.random.Generator.choice\n    ~numpy.random.Generator.bytes"
        }
      ],
      "level": 1,
      "target": null,
      "title": "Simple random data",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "The methods for randomly permuting a sequence are"
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": ".. autosummary:: \n    :toctree:generated/\n    ~numpy.random.Generator.shuffle\n    ~numpy.random.Generator.permutation\n    ~numpy.random.Generator.permuted"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "The following table summarizes the behaviors of the methods."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "+--------------+-------------------+------------------+ | method       | copy/in-place     | axis handling    | +==============+===================+==================+ | shuffle      | in-place          | as if 1d         | +--------------+-------------------+------------------+ | permutation  | copy              | as if 1d         | +--------------+-------------------+------------------+ | permuted     | either (use 'out' | axis independent | |              | for in-place)     |                  | +--------------+-------------------+------------------+"
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "The following subsections provide more details about the differences."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 1,
      "target": null,
      "title": "Permutations",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "The main difference between "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "Generator.shuffle"
            },
            {
              "type": "text",
              "value": " and "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "Generator.permutation"
            },
            {
              "type": "text",
              "value": " is that "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "Generator.shuffle"
            },
            {
              "type": "text",
              "value": " operates in-place, while "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "Generator.permutation"
            },
            {
              "type": "text",
              "value": " returns a copy."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "By default, "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "Generator.permuted"
            },
            {
              "type": "text",
              "value": " returns a copy.  To operate in-place with "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "Generator.permuted"
            },
            {
              "type": "text",
              "value": ", pass the same array as the first argument "
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "and"
                }
              ],
              "type": "emphasis"
            },
            {
              "type": "text",
              "value": " as the value of the "
            },
            {
              "type": "inlineCode",
              "value": "out"
            },
            {
              "type": "text",
              "value": " parameter.  For example,"
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "code",
              "value": ">>> rng = np.random.default_rng()\n>>> x = np.arange(0, 15).reshape(3, 5)\n>>> x #doctest: +SKIP\narray([[ 0,  1,  2,  3,  4],\n       [ 5,  6,  7,  8,  9],\n       [10, 11, 12, 13, 14]])\n>>> y = rng.permuted(x, axis=1, out=x)\n>>> x #doctest: +SKIP\narray([[ 1,  0,  2,  4,  3],  # random\n       [ 6,  7,  8,  9,  5],\n       [10, 14, 11, 13, 12]])"
            }
          ],
          "type": "blockquote"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Note that when "
            },
            {
              "type": "inlineCode",
              "value": "out"
            },
            {
              "type": "text",
              "value": " is given, the return value is "
            },
            {
              "type": "inlineCode",
              "value": "out"
            },
            {
              "type": "text",
              "value": ":"
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "code",
              "value": ">>> y is x\nTrue"
            }
          ],
          "type": "blockquote"
        }
      ],
      "level": 2,
      "target": null,
      "title": "In-place vs. copy",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "An important distinction for these methods is how they handle the "
            },
            {
              "type": "inlineCode",
              "value": "axis"
            },
            {
              "type": "text",
              "value": " parameter.  Both "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "Generator.shuffle"
            },
            {
              "type": "text",
              "value": " and "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "Generator.permutation"
            },
            {
              "type": "text",
              "value": " treat the input as a one-dimensional sequence, and the "
            },
            {
              "type": "inlineCode",
              "value": "axis"
            },
            {
              "type": "text",
              "value": " parameter determines which dimension of the input array to use as the sequence. In the case of a two-dimensional array, "
            },
            {
              "type": "inlineCode",
              "value": "axis=0"
            },
            {
              "type": "text",
              "value": " will, in effect, rearrange the rows of the array, and  "
            },
            {
              "type": "inlineCode",
              "value": "axis=1"
            },
            {
              "type": "text",
              "value": " will rearrange the columns.  For example"
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "code",
              "value": ">>> rng = np.random.default_rng()\n>>> x = np.arange(0, 15).reshape(3, 5)\n>>> x\narray([[ 0,  1,  2,  3,  4],\n       [ 5,  6,  7,  8,  9],\n       [10, 11, 12, 13, 14]])\n>>> rng.permutation(x, axis=1) #doctest: +SKIP\narray([[ 1,  3,  2,  0,  4],  # random\n       [ 6,  8,  7,  5,  9],\n       [11, 13, 12, 10, 14]])"
            }
          ],
          "type": "blockquote"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Note that the columns have been rearranged \"in bulk\": the values within each column have not changed."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "The method "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "Generator.permuted"
            },
            {
              "type": "text",
              "value": " treats the "
            },
            {
              "type": "inlineCode",
              "value": "axis"
            },
            {
              "type": "text",
              "value": " parameter similar to how "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "module",
              "reference": {
                "kind": "api",
                "module": "numpy:sort",
                "path": "numpy:sort",
                "type": "RefInfo",
                "version": "*"
              },
              "type": "Link",
              "value": "numpy.sort"
            },
            {
              "type": "text",
              "value": " treats it.  Each slice along the given axis is shuffled independently of the others.  Compare the following example of the use of "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "Generator.permuted"
            },
            {
              "type": "text",
              "value": " to the above example of "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "Generator.permutation"
            },
            {
              "type": "text",
              "value": ":"
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "code",
              "value": ">>> rng.permuted(x, axis=1) #doctest: +SKIP\narray([[ 1,  0,  2,  4,  3],  # random\n       [ 5,  7,  6,  9,  8],\n       [10, 14, 12, 13, 11]])"
            }
          ],
          "type": "blockquote"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "In this example, the values within each row (i.e. the values along "
            },
            {
              "type": "inlineCode",
              "value": "axis=1"
            },
            {
              "type": "text",
              "value": ") have been shuffled independently.  This is not a \"bulk\" shuffle of the columns."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": "generator-handling-axis-parameter",
      "title": "Handling the ``axis`` parameter",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "Generator.shuffle"
            },
            {
              "type": "text",
              "value": " works on non-NumPy sequences.  That is, if it is given a sequence that is not a NumPy array, it shuffles that sequence in-place. For example,"
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "code",
              "value": ">>> rng = np.random.default_rng()\n>>> a = ['A', 'B', 'C', 'D', 'E']\n>>> rng.shuffle(a)  # shuffle the list in-place\n>>> a #doctest: +SKIP\n['B', 'D', 'A', 'E', 'C']  # random"
            }
          ],
          "type": "blockquote"
        }
      ],
      "level": 2,
      "target": null,
      "title": "Shuffling non-NumPy sequences",
      "type": "Section"
    },
    {
      "children": [
        {
          "type": "code",
          "value": ".. autosummary:: \n    :toctree:generated/\n    ~numpy.random.Generator.beta\n    ~numpy.random.Generator.binomial\n    ~numpy.random.Generator.chisquare\n    ~numpy.random.Generator.dirichlet\n    ~numpy.random.Generator.exponential\n    ~numpy.random.Generator.f\n    ~numpy.random.Generator.gamma\n    ~numpy.random.Generator.geometric\n    ~numpy.random.Generator.gumbel\n    ~numpy.random.Generator.hypergeometric\n    ~numpy.random.Generator.laplace\n    ~numpy.random.Generator.logistic\n    ~numpy.random.Generator.lognormal\n    ~numpy.random.Generator.logseries\n    ~numpy.random.Generator.multinomial\n    ~numpy.random.Generator.multivariate_hypergeometric\n    ~numpy.random.Generator.multivariate_normal\n    ~numpy.random.Generator.negative_binomial\n    ~numpy.random.Generator.noncentral_chisquare\n    ~numpy.random.Generator.noncentral_f\n    ~numpy.random.Generator.normal\n    ~numpy.random.Generator.pareto\n    ~numpy.random.Generator.poisson\n    ~numpy.random.Generator.power\n    ~numpy.random.Generator.rayleigh\n    ~numpy.random.Generator.standard_cauchy\n    ~numpy.random.Generator.standard_exponential\n    ~numpy.random.Generator.standard_gamma\n    ~numpy.random.Generator.standard_normal\n    ~numpy.random.Generator.standard_t\n    ~numpy.random.Generator.triangular\n    ~numpy.random.Generator.uniform\n    ~numpy.random.Generator.vonmises\n    ~numpy.random.Generator.wald\n    ~numpy.random.Generator.weibull\n    ~numpy.random.Generator.zipf"
        }
      ],
      "level": 1,
      "target": null,
      "title": "Distributions",
      "type": "Section"
    }
  ],
  "content": {},
  "example_section_data": {
    "children": [],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": null,
  "item_line": null,
  "item_type": null,
  "ordered_sections": [],
  "references": null,
  "see_also": [],
  "signature": {
    "type": "Signature",
    "value": null
  },
  "type": "DocBlob"
}