{
  "aliases": [],
  "arbitrary": [
    {
      "children": [
        {
          "placeholder": "untarget",
          "type": "Unimplemented",
          "value": "_new-or-different:"
        },
        {
          "args": "numpy.random",
          "children": [],
          "name": "currentmodule",
          "options": {},
          "type": "mystDirective",
          "value": ""
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "NumPy 1.17.0 introduced "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "Generator"
            },
            {
              "type": "text",
              "value": " as an improved replacement for the "
            },
            {
              "type": "inlineCode",
              "value": "legacy <legacy>"
            },
            {
              "type": "text",
              "value": " "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "RandomState"
            },
            {
              "type": "text",
              "value": ". Here is a quick comparison of the two implementations."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "================== ==================== ============= Feature            Older Equivalent     Notes ------------------ -------------------- ------------- "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "~.Generator"
            },
            {
              "type": "text",
              "value": "      "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "~.RandomState"
            },
            {
              "type": "text",
              "value": "      "
            },
            {
              "type": "inlineCode",
              "value": "Generator"
            },
            {
              "type": "text",
              "value": " requires a stream                                         source, called a "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "BitGenerator"
            },
            {
              "type": "text",
              "value": "                                         A number of these are provided.                                         "
            },
            {
              "type": "inlineCode",
              "value": "RandomState"
            },
            {
              "type": "text",
              "value": " uses                                         the Mersenne Twister "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "~.MT19937"
            },
            {
              "type": "text",
              "value": " by                                         default, but can also be instantiated                                         with any BitGenerator. ------------------ -------------------- ------------- "
            },
            {
              "type": "inlineCode",
              "value": "random"
            },
            {
              "type": "text",
              "value": "         "
            },
            {
              "type": "inlineCode",
              "value": "random_sample"
            },
            {
              "type": "text",
              "value": ",   Access the values in a BitGenerator,                    "
            },
            {
              "type": "inlineCode",
              "value": "rand"
            },
            {
              "type": "text",
              "value": "             convert them to "
            },
            {
              "type": "inlineCode",
              "value": "float64"
            },
            {
              "type": "text",
              "value": " in the                                         interval "
            },
            {
              "type": "inlineCode",
              "value": "[0.0.,"
            },
            {
              "type": "text",
              "value": " `` 1.0)``.                                         In addition to the "
            },
            {
              "type": "inlineCode",
              "value": "size"
            },
            {
              "type": "text",
              "value": " kwarg, now                                         supports "
            },
            {
              "type": "inlineCode",
              "value": "dtype='d'"
            },
            {
              "type": "text",
              "value": " or "
            },
            {
              "type": "inlineCode",
              "value": "dtype='f'"
            },
            {
              "type": "text",
              "value": ",                                         and an "
            },
            {
              "type": "inlineCode",
              "value": "out"
            },
            {
              "type": "text",
              "value": " kwarg to fill a user-                                         supplied array."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "children": [
                {
                  "type": "text",
                  "value": "Many other distributions are also                                         supported."
                }
              ],
              "type": "paragraph"
            }
          ],
          "type": "blockquote"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "------------------ -------------------- ------------- "
            },
            {
              "type": "inlineCode",
              "value": "integers"
            },
            {
              "type": "text",
              "value": "       "
            },
            {
              "type": "inlineCode",
              "value": "randint"
            },
            {
              "type": "text",
              "value": ",         Use the "
            },
            {
              "type": "inlineCode",
              "value": "endpoint"
            },
            {
              "type": "text",
              "value": " kwarg to adjust                    "
            },
            {
              "type": "inlineCode",
              "value": "random_integers"
            },
            {
              "type": "text",
              "value": "  the inclusion or exclusion of the                                         "
            },
            {
              "type": "inlineCode",
              "value": "high"
            },
            {
              "type": "text",
              "value": " interval endpoint ================== ==================== ============="
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The normal, exponential and gamma generators use 256-step Ziggurat   methods which are 2-10 times faster than NumPy's default implementation in   "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "~.Generator.standard_normal"
                    },
                    {
                      "type": "text",
                      "value": ", "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "~.Generator.standard_exponential"
                    },
                    {
                      "type": "text",
                      "value": " or   "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "~.Generator.standard_gamma"
                    },
                    {
                      "type": "text",
                      "value": ". Because of the change in algorithms, it is not   possible to reproduce the exact random values using "
                    },
                    {
                      "type": "inlineCode",
                      "value": "Generator"
                    },
                    {
                      "type": "text",
                      "value": " for these   distributions or any distribution method that relies on them."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            }
          ],
          "ordered": false,
          "spread": false,
          "start": 1,
          "type": "list"
        },
        {
          "args": "python",
          "children": [],
          "name": "ipython",
          "options": {},
          "type": "mystDirective",
          "value": "import numpy.random\nrng = np.random.default_rng()\n%timeit -n 1 rng.standard_normal(100000)\n%timeit -n 1 numpy.random.standard_normal(100000)"
        },
        {
          "args": "python",
          "children": [],
          "name": "ipython",
          "options": {},
          "type": "mystDirective",
          "value": "%timeit -n 1 rng.standard_exponential(100000)\n%timeit -n 1 numpy.random.standard_exponential(100000)"
        },
        {
          "args": "python",
          "children": [],
          "name": "ipython",
          "options": {},
          "type": "mystDirective",
          "value": "%timeit -n 1 rng.standard_gamma(3.0, 100000)\n%timeit -n 1 numpy.random.standard_gamma(3.0, 100000)"
        },
        {
          "children": [
            {
              "children": [
                {
                  "children": [
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "~.Generator.integers"
                    },
                    {
                      "type": "text",
                      "value": " is now the canonical way to generate integer   random numbers from a discrete uniform distribution. This replaces both   "
                    },
                    {
                      "type": "inlineCode",
                      "value": "randint"
                    },
                    {
                      "type": "text",
                      "value": " and the deprecated "
                    },
                    {
                      "type": "inlineCode",
                      "value": "random_integers"
                    },
                    {
                      "type": "text",
                      "value": "."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The "
                    },
                    {
                      "type": "inlineCode",
                      "value": "rand"
                    },
                    {
                      "type": "text",
                      "value": " and "
                    },
                    {
                      "type": "inlineCode",
                      "value": "randn"
                    },
                    {
                      "type": "text",
                      "value": " methods are only available through the legacy   "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "~.RandomState"
                    },
                    {
                      "type": "text",
                      "value": "."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "Generator.random"
                    },
                    {
                      "type": "text",
                      "value": " is now the canonical way to generate floating-point   random numbers, which replaces "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "RandomState.random_sample"
                    },
                    {
                      "type": "text",
                      "value": ",   "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "sample"
                    },
                    {
                      "type": "text",
                      "value": ", and "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "ranf"
                    },
                    {
                      "type": "text",
                      "value": ", all of which were aliases. This is consistent with   Python's "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "random.random"
                    },
                    {
                      "type": "text",
                      "value": "."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "All bit generators can produce doubles, uint64s and   uint32s via CTypes ("
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "~PCG64.ctypes"
                    },
                    {
                      "type": "text",
                      "value": ") and CFFI ("
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "~PCG64.cffi"
                    },
                    {
                      "type": "text",
                      "value": ").   This allows these bit generators to be used in numba."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The bit generators can be used in downstream projects via   Cython."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "All bit generators use "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "SeedSequence"
                    },
                    {
                      "type": "text",
                      "value": " to "
                    },
                    {
                      "type": "inlineCode",
                      "value": "convert seed integers to\n  initialized states <seeding_and_entropy>"
                    },
                    {
                      "type": "text",
                      "value": "."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Optional "
                    },
                    {
                      "type": "inlineCode",
                      "value": "dtype"
                    },
                    {
                      "type": "text",
                      "value": " argument that accepts "
                    },
                    {
                      "type": "inlineCode",
                      "value": "np.float32"
                    },
                    {
                      "type": "text",
                      "value": " or "
                    },
                    {
                      "type": "inlineCode",
                      "value": "np.float64"
                    },
                    {
                      "type": "text",
                      "value": "   to produce either single or double precision uniform random variables for   select distributions. "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "~.Generator.integers"
                    },
                    {
                      "type": "text",
                      "value": " accepts a "
                    },
                    {
                      "type": "inlineCode",
                      "value": "dtype"
                    },
                    {
                      "type": "text",
                      "value": " argument   with any signed or unsigned integer dtype."
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "children": [
                        {
                          "children": [
                            {
                              "type": "text",
                              "value": "Uniforms ("
                            },
                            {
                              "domain": null,
                              "role": null,
                              "type": "Directive",
                              "value": "~.Generator.random"
                            },
                            {
                              "type": "text",
                              "value": " and "
                            },
                            {
                              "domain": null,
                              "role": null,
                              "type": "Directive",
                              "value": "~.Generator.integers"
                            },
                            {
                              "type": "text",
                              "value": ")"
                            }
                          ],
                          "type": "paragraph"
                        }
                      ],
                      "spread": false,
                      "type": "listItem"
                    },
                    {
                      "children": [
                        {
                          "children": [
                            {
                              "type": "text",
                              "value": "Normals ("
                            },
                            {
                              "domain": null,
                              "role": null,
                              "type": "Directive",
                              "value": "~.Generator.standard_normal"
                            },
                            {
                              "type": "text",
                              "value": ")"
                            }
                          ],
                          "type": "paragraph"
                        }
                      ],
                      "spread": false,
                      "type": "listItem"
                    },
                    {
                      "children": [
                        {
                          "children": [
                            {
                              "type": "text",
                              "value": "Standard Gammas ("
                            },
                            {
                              "domain": null,
                              "role": null,
                              "type": "Directive",
                              "value": "~.Generator.standard_gamma"
                            },
                            {
                              "type": "text",
                              "value": ")"
                            }
                          ],
                          "type": "paragraph"
                        }
                      ],
                      "spread": false,
                      "type": "listItem"
                    },
                    {
                      "children": [
                        {
                          "children": [
                            {
                              "type": "text",
                              "value": "Standard Exponentials ("
                            },
                            {
                              "domain": null,
                              "role": null,
                              "type": "Directive",
                              "value": "~.Generator.standard_exponential"
                            },
                            {
                              "type": "text",
                              "value": ")"
                            }
                          ],
                          "type": "paragraph"
                        }
                      ],
                      "spread": false,
                      "type": "listItem"
                    }
                  ],
                  "ordered": false,
                  "spread": false,
                  "start": 1,
                  "type": "list"
                }
              ],
              "spread": false,
              "type": "listItem"
            }
          ],
          "ordered": false,
          "spread": false,
          "start": 1,
          "type": "list"
        },
        {
          "args": "python",
          "children": [],
          "name": "ipython",
          "options": {},
          "type": "mystDirective",
          "value": "rng = np.random.default_rng()\nrng.random(3, dtype=np.float64)\nrng.random(3, dtype=np.float32)\nrng.integers(0, 256, size=3, dtype=np.uint8)"
        },
        {
          "children": [
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Optional "
                    },
                    {
                      "type": "inlineCode",
                      "value": "out"
                    },
                    {
                      "type": "text",
                      "value": " argument that allows existing arrays to be filled for   select distributions"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "children": [
                        {
                          "children": [
                            {
                              "type": "text",
                              "value": "Uniforms ("
                            },
                            {
                              "domain": null,
                              "role": null,
                              "type": "Directive",
                              "value": "~.Generator.random"
                            },
                            {
                              "type": "text",
                              "value": ")"
                            }
                          ],
                          "type": "paragraph"
                        }
                      ],
                      "spread": false,
                      "type": "listItem"
                    },
                    {
                      "children": [
                        {
                          "children": [
                            {
                              "type": "text",
                              "value": "Normals ("
                            },
                            {
                              "domain": null,
                              "role": null,
                              "type": "Directive",
                              "value": "~.Generator.standard_normal"
                            },
                            {
                              "type": "text",
                              "value": ")"
                            }
                          ],
                          "type": "paragraph"
                        }
                      ],
                      "spread": false,
                      "type": "listItem"
                    },
                    {
                      "children": [
                        {
                          "children": [
                            {
                              "type": "text",
                              "value": "Standard Gammas ("
                            },
                            {
                              "domain": null,
                              "role": null,
                              "type": "Directive",
                              "value": "~.Generator.standard_gamma"
                            },
                            {
                              "type": "text",
                              "value": ")"
                            }
                          ],
                          "type": "paragraph"
                        }
                      ],
                      "spread": false,
                      "type": "listItem"
                    },
                    {
                      "children": [
                        {
                          "children": [
                            {
                              "type": "text",
                              "value": "Standard Exponentials ("
                            },
                            {
                              "domain": null,
                              "role": null,
                              "type": "Directive",
                              "value": "~.Generator.standard_exponential"
                            },
                            {
                              "type": "text",
                              "value": ")"
                            }
                          ],
                          "type": "paragraph"
                        }
                      ],
                      "spread": false,
                      "type": "listItem"
                    }
                  ],
                  "ordered": false,
                  "spread": false,
                  "start": 1,
                  "type": "list"
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "This allows multithreading to fill large arrays in chunks using suitable   BitGenerators in parallel."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            }
          ],
          "ordered": false,
          "spread": false,
          "start": 1,
          "type": "list"
        },
        {
          "args": "python",
          "children": [],
          "name": "ipython",
          "options": {},
          "type": "mystDirective",
          "value": "rng = np.random.default_rng()\nexisting = np.zeros(4)\nrng.random(out=existing[:2])\nprint(existing)"
        },
        {
          "children": [
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Optional "
                    },
                    {
                      "type": "inlineCode",
                      "value": "axis"
                    },
                    {
                      "type": "text",
                      "value": " argument for methods like "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "~.Generator.choice"
                    },
                    {
                      "type": "text",
                      "value": ",   "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "~.Generator.permutation"
                    },
                    {
                      "type": "text",
                      "value": " and "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "~.Generator.shuffle"
                    },
                    {
                      "type": "text",
                      "value": " that controls which   axis an operation is performed over for multi-dimensional arrays."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            }
          ],
          "ordered": false,
          "spread": false,
          "start": 1,
          "type": "list"
        },
        {
          "args": "python",
          "children": [],
          "name": "ipython",
          "options": {},
          "type": "mystDirective",
          "value": "rng = np.random.default_rng()\na = np.arange(12).reshape((3, 4))\na\nrng.choice(a, axis=1, size=5)\nrng.shuffle(a, axis=1)        # Shuffle in-place\na"
        },
        {
          "children": [
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Added a method to sample from the complex normal distribution   ("
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "~.Generator.complex_normal"
                    },
                    {
                      "type": "text",
                      "value": ")"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            }
          ],
          "ordered": false,
          "spread": false,
          "start": 1,
          "type": "list"
        }
      ],
      "level": 0,
      "target": null,
      "title": "What's New or Different",
      "type": "Section"
    }
  ],
  "content": {},
  "example_section_data": {
    "children": [],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": null,
  "item_line": null,
  "item_type": null,
  "ordered_sections": [],
  "references": null,
  "see_also": [],
  "signature": {
    "type": "Signature",
    "value": null
  },
  "type": "DocBlob"
}