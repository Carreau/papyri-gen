{
  "aliases": [],
  "arbitrary": [
    {
      "children": [
        {
          "args": "numpy.char",
          "children": [],
          "name": "currentmodule",
          "options": {},
          "type": "mystDirective",
          "value": ""
        },
        {
          "args": "numpy.char",
          "children": [],
          "name": "module",
          "options": {},
          "type": "mystDirective",
          "value": ""
        },
        {
          "children": [
            {
              "type": "text",
              "value": "The "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "module",
              "reference": {
                "kind": "api",
                "module": "numpy",
                "path": "numpy.core.defchararray",
                "type": "RefInfo",
                "version": "*"
              },
              "type": "Link",
              "value": "numpy.char"
            },
            {
              "type": "text",
              "value": " module provides a set of vectorized string operations for arrays of type "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "module",
              "reference": {
                "kind": "api",
                "module": "numpy:str_",
                "path": "numpy:str_",
                "type": "RefInfo",
                "version": "*"
              },
              "type": "Link",
              "value": "numpy.str_"
            },
            {
              "type": "text",
              "value": " or "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "module",
              "reference": {
                "kind": "api",
                "module": "numpy:bytes_",
                "path": "numpy:bytes_",
                "type": "RefInfo",
                "version": "*"
              },
              "type": "Link",
              "value": "numpy.bytes_"
            },
            {
              "type": "text",
              "value": ". For example"
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "code",
              "value": ">>> np.char.capitalize([\"python\", \"numpy\"])\narray(['Python', 'Numpy'], dtype='<U6')\n>>> np.char.add([\"num\", \"doc\"], [\"py\", \"umentation\"])\narray(['numpy', 'documentation'], dtype='<U13')"
            }
          ],
          "type": "blockquote"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "The methods in this module are based on the methods in "
            },
            {
              "type": "inlineCode",
              "value": "String"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": "String operations",
      "type": "Section"
    },
    {
      "children": [
        {
          "type": "code",
          "value": ".. autosummary:: \n    :toctree:generated/\n    add\n    multiply\n    mod\n    capitalize\n    center\n    decode\n    encode\n    expandtabs\n    join\n    ljust\n    lower\n    lstrip\n    partition\n    replace\n    rjust\n    rpartition\n    rsplit\n    rstrip\n    split\n    splitlines\n    strip\n    swapcase\n    title\n    translate\n    upper\n    zfill"
        }
      ],
      "level": 1,
      "target": null,
      "title": "String operations",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Unlike the standard numpy comparison operators, the ones in the "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "char"
            },
            {
              "type": "text",
              "value": " module strip trailing whitespace characters before performing the comparison."
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": ".. autosummary:: \n    :toctree:generated/\n    equal\n    not_equal\n    greater_equal\n    less_equal\n    greater\n    less\n    compare_chararrays"
        }
      ],
      "level": 1,
      "target": null,
      "title": "Comparison",
      "type": "Section"
    },
    {
      "children": [
        {
          "type": "code",
          "value": ".. autosummary:: \n    :toctree:generated/\n    count\n    endswith\n    find\n    index\n    isalpha\n    isalnum\n    isdecimal\n    isdigit\n    islower\n    isnumeric\n    isspace\n    istitle\n    isupper\n    rfind\n    rindex\n    startswith\n    str_len"
        }
      ],
      "level": 1,
      "target": null,
      "title": "String information",
      "type": "Section"
    },
    {
      "children": [
        {
          "type": "code",
          "value": ".. autosummary:: \n    :toctree:generated/\n    array\n    asarray\n    chararray"
        }
      ],
      "level": 1,
      "target": null,
      "title": "Convenience class",
      "type": "Section"
    }
  ],
  "content": {},
  "example_section_data": {
    "children": [],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": null,
  "item_line": null,
  "item_type": null,
  "ordered_sections": [],
  "references": null,
  "see_also": [],
  "signature": {
    "type": "Signature",
    "value": null
  },
  "type": "DocBlob"
}