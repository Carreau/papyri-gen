{
  "aliases": [],
  "arbitrary": [
    {
      "children": [],
      "level": 0,
      "target": null,
      "title": "Testing the numpy.i Typemaps",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Writing tests for the "
            },
            {
              "type": "inlineCode",
              "value": "numpy.i"
            },
            {
              "type": "text",
              "value": " "
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "SWIG"
                }
              ],
              "title": "",
              "type": "link",
              "url": "http://www.swig.org"
            },
            {
              "type": "text",
              "value": " interface file is a combinatorial headache.  At present, 12 different data types are supported, each with 74 different argument signatures, for a total of 888 typemaps supported \"out of the box\".  Each of these typemaps, in turn, might require several unit tests in order to verify expected behavior for both proper and improper inputs.  Currently, this results in more than 1,000 individual unit tests executed when "
            },
            {
              "type": "inlineCode",
              "value": "make test"
            },
            {
              "type": "text",
              "value": " is run in the "
            },
            {
              "type": "inlineCode",
              "value": "numpy/tools/swig"
            },
            {
              "type": "text",
              "value": " subdirectory."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "To facilitate this many similar unit tests, some high-level programming techniques are employed, including C and "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "SWIG"
            },
            {
              "type": "text",
              "value": " macros, as well as Python inheritance.  The purpose of this document is to describe the testing infrastructure employed to verify that the "
            },
            {
              "type": "inlineCode",
              "value": "numpy.i"
            },
            {
              "type": "text",
              "value": " typemaps are working as expected."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 1,
      "target": null,
      "title": "Introduction",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "There are three independent testing frameworks supported, for one-, two-, and three-dimensional arrays respectively.  For one-dimensional arrays, there are two C++ files, a header and a source, named      "
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": "Vector.h\nVector.cxx"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "that contain prototypes and code for a variety of functions that have one-dimensional arrays as function arguments.  The file      "
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": "Vector.i"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "is a "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "SWIG"
            },
            {
              "type": "text",
              "value": " interface file that defines a python module "
            },
            {
              "type": "inlineCode",
              "value": "Vector"
            },
            {
              "type": "text",
              "value": " that wraps the functions in "
            },
            {
              "type": "inlineCode",
              "value": "Vector.h"
            },
            {
              "type": "text",
              "value": " while utilizing the typemaps in "
            },
            {
              "type": "inlineCode",
              "value": "numpy.i"
            },
            {
              "type": "text",
              "value": " to correctly handle the C arrays."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "The "
            },
            {
              "type": "inlineCode",
              "value": "Makefile"
            },
            {
              "type": "text",
              "value": " calls "
            },
            {
              "type": "inlineCode",
              "value": "swig"
            },
            {
              "type": "text",
              "value": " to generate "
            },
            {
              "type": "inlineCode",
              "value": "Vector.py"
            },
            {
              "type": "text",
              "value": " and "
            },
            {
              "type": "inlineCode",
              "value": "Vector_wrap.cxx"
            },
            {
              "type": "text",
              "value": ", and also executes the "
            },
            {
              "type": "inlineCode",
              "value": "setup.py"
            },
            {
              "type": "text",
              "value": " script that compiles "
            },
            {
              "type": "inlineCode",
              "value": "Vector_wrap.cxx"
            },
            {
              "type": "text",
              "value": " and links together the extension module "
            },
            {
              "type": "inlineCode",
              "value": "_Vector.so"
            },
            {
              "type": "text",
              "value": " or "
            },
            {
              "type": "inlineCode",
              "value": "_Vector.dylib"
            },
            {
              "type": "text",
              "value": ", depending on the platform.  This extension module and the proxy file "
            },
            {
              "type": "inlineCode",
              "value": "Vector.py"
            },
            {
              "type": "text",
              "value": " are both placed in a subdirectory under the "
            },
            {
              "type": "inlineCode",
              "value": "build"
            },
            {
              "type": "text",
              "value": " directory."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "The actual testing takes place with a Python script named      "
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": "testVector.py"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "that uses the standard Python library module "
            },
            {
              "type": "inlineCode",
              "value": "unittest"
            },
            {
              "type": "text",
              "value": ", which performs several tests of each function defined in "
            },
            {
              "type": "inlineCode",
              "value": "Vector.h"
            },
            {
              "type": "text",
              "value": " for each data type supported."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Two-dimensional arrays are tested in exactly the same manner.  The above description applies, but with "
            },
            {
              "type": "inlineCode",
              "value": "Matrix"
            },
            {
              "type": "text",
              "value": " substituted for "
            },
            {
              "type": "inlineCode",
              "value": "Vector"
            },
            {
              "type": "text",
              "value": ".  For three-dimensional tests, substitute "
            },
            {
              "type": "inlineCode",
              "value": "Tensor"
            },
            {
              "type": "text",
              "value": " for "
            },
            {
              "type": "inlineCode",
              "value": "Vector"
            },
            {
              "type": "text",
              "value": ".  For four-dimensional tests, substitute "
            },
            {
              "type": "inlineCode",
              "value": "SuperTensor"
            },
            {
              "type": "text",
              "value": " for "
            },
            {
              "type": "inlineCode",
              "value": "Vector"
            },
            {
              "type": "text",
              "value": ". For flat in-place array tests, substitute "
            },
            {
              "type": "inlineCode",
              "value": "Flat"
            },
            {
              "type": "text",
              "value": " for "
            },
            {
              "type": "inlineCode",
              "value": "Vector"
            },
            {
              "type": "text",
              "value": ". For the descriptions that follow, we will reference the "
            },
            {
              "type": "inlineCode",
              "value": "Vector"
            },
            {
              "type": "text",
              "value": " tests, but the same information applies to "
            },
            {
              "type": "inlineCode",
              "value": "Matrix"
            },
            {
              "type": "text",
              "value": ", "
            },
            {
              "type": "inlineCode",
              "value": "Tensor"
            },
            {
              "type": "text",
              "value": " and "
            },
            {
              "type": "inlineCode",
              "value": "SuperTensor"
            },
            {
              "type": "text",
              "value": " tests."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "The command "
            },
            {
              "type": "inlineCode",
              "value": "make test"
            },
            {
              "type": "text",
              "value": " will ensure that all of the test software is built and then run all three test scripts."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 1,
      "target": null,
      "title": "Testing Organization",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "inlineCode",
              "value": "Vector.h"
            },
            {
              "type": "text",
              "value": " is a C++ header file that defines a C macro called "
            },
            {
              "type": "inlineCode",
              "value": "TEST_FUNC_PROTOS"
            },
            {
              "type": "text",
              "value": " that takes two arguments: "
            },
            {
              "type": "inlineCode",
              "value": "TYPE"
            },
            {
              "type": "text",
              "value": ", which is a data type name such as "
            },
            {
              "type": "inlineCode",
              "value": "unsigned int"
            },
            {
              "type": "text",
              "value": "; and "
            },
            {
              "type": "inlineCode",
              "value": "SNAME"
            },
            {
              "type": "text",
              "value": ", which is a short name for the same data type with no spaces, e.g. "
            },
            {
              "type": "inlineCode",
              "value": "uint"
            },
            {
              "type": "text",
              "value": ".  This macro defines several function prototypes that have the prefix "
            },
            {
              "type": "inlineCode",
              "value": "SNAME"
            },
            {
              "type": "text",
              "value": " and have at least one argument that is an array of type "
            },
            {
              "type": "inlineCode",
              "value": "TYPE"
            },
            {
              "type": "text",
              "value": ".  Those functions that have return arguments return a "
            },
            {
              "type": "inlineCode",
              "value": "TYPE"
            },
            {
              "type": "text",
              "value": " value."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "inlineCode",
              "value": "TEST_FUNC_PROTOS"
            },
            {
              "type": "text",
              "value": " is then implemented for all of the data types supported by "
            },
            {
              "type": "inlineCode",
              "value": "numpy.i"
            },
            {
              "type": "text",
              "value": ":"
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "children": [
                {
                  "children": [
                    {
                      "children": [
                        {
                          "type": "inlineCode",
                          "value": "signed char"
                        }
                      ],
                      "type": "paragraph"
                    }
                  ],
                  "spread": false,
                  "type": "listItem"
                },
                {
                  "children": [
                    {
                      "children": [
                        {
                          "type": "inlineCode",
                          "value": "unsigned char"
                        }
                      ],
                      "type": "paragraph"
                    }
                  ],
                  "spread": false,
                  "type": "listItem"
                },
                {
                  "children": [
                    {
                      "children": [
                        {
                          "type": "inlineCode",
                          "value": "short"
                        }
                      ],
                      "type": "paragraph"
                    }
                  ],
                  "spread": false,
                  "type": "listItem"
                },
                {
                  "children": [
                    {
                      "children": [
                        {
                          "type": "inlineCode",
                          "value": "unsigned short"
                        }
                      ],
                      "type": "paragraph"
                    }
                  ],
                  "spread": false,
                  "type": "listItem"
                },
                {
                  "children": [
                    {
                      "children": [
                        {
                          "type": "inlineCode",
                          "value": "int"
                        }
                      ],
                      "type": "paragraph"
                    }
                  ],
                  "spread": false,
                  "type": "listItem"
                },
                {
                  "children": [
                    {
                      "children": [
                        {
                          "type": "inlineCode",
                          "value": "unsigned int"
                        }
                      ],
                      "type": "paragraph"
                    }
                  ],
                  "spread": false,
                  "type": "listItem"
                },
                {
                  "children": [
                    {
                      "children": [
                        {
                          "type": "inlineCode",
                          "value": "long"
                        }
                      ],
                      "type": "paragraph"
                    }
                  ],
                  "spread": false,
                  "type": "listItem"
                },
                {
                  "children": [
                    {
                      "children": [
                        {
                          "type": "inlineCode",
                          "value": "unsigned long"
                        }
                      ],
                      "type": "paragraph"
                    }
                  ],
                  "spread": false,
                  "type": "listItem"
                },
                {
                  "children": [
                    {
                      "children": [
                        {
                          "type": "inlineCode",
                          "value": "long long"
                        }
                      ],
                      "type": "paragraph"
                    }
                  ],
                  "spread": false,
                  "type": "listItem"
                },
                {
                  "children": [
                    {
                      "children": [
                        {
                          "type": "inlineCode",
                          "value": "unsigned long long"
                        }
                      ],
                      "type": "paragraph"
                    }
                  ],
                  "spread": false,
                  "type": "listItem"
                },
                {
                  "children": [
                    {
                      "children": [
                        {
                          "type": "inlineCode",
                          "value": "float"
                        }
                      ],
                      "type": "paragraph"
                    }
                  ],
                  "spread": false,
                  "type": "listItem"
                },
                {
                  "children": [
                    {
                      "children": [
                        {
                          "type": "inlineCode",
                          "value": "double"
                        }
                      ],
                      "type": "paragraph"
                    }
                  ],
                  "spread": false,
                  "type": "listItem"
                }
              ],
              "ordered": false,
              "spread": false,
              "start": 1,
              "type": "list"
            }
          ],
          "type": "blockquote"
        }
      ],
      "level": 1,
      "target": null,
      "title": "Testing Header Files",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "inlineCode",
              "value": "Vector.cxx"
            },
            {
              "type": "text",
              "value": " is a C++ source file that implements compilable code for each of the function prototypes specified in "
            },
            {
              "type": "inlineCode",
              "value": "Vector.h"
            },
            {
              "type": "text",
              "value": ".  It defines a C macro "
            },
            {
              "type": "inlineCode",
              "value": "TEST_FUNCS"
            },
            {
              "type": "text",
              "value": " that has the same arguments and works in the same way as "
            },
            {
              "type": "inlineCode",
              "value": "TEST_FUNC_PROTOS"
            },
            {
              "type": "text",
              "value": " does in "
            },
            {
              "type": "inlineCode",
              "value": "Vector.h"
            },
            {
              "type": "text",
              "value": ". "
            },
            {
              "type": "inlineCode",
              "value": "TEST_FUNCS"
            },
            {
              "type": "text",
              "value": " is implemented for each of the 12 data types as above."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 1,
      "target": null,
      "title": "Testing Source Files",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "inlineCode",
              "value": "Vector.i"
            },
            {
              "type": "text",
              "value": " is a "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "SWIG"
            },
            {
              "type": "text",
              "value": " interface file that defines python module "
            },
            {
              "type": "inlineCode",
              "value": "Vector"
            },
            {
              "type": "text",
              "value": ".  It follows the conventions for using "
            },
            {
              "type": "inlineCode",
              "value": "numpy.i"
            },
            {
              "type": "text",
              "value": " as described in this chapter.  It defines a "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "SWIG"
            },
            {
              "type": "text",
              "value": " macro "
            },
            {
              "type": "inlineCode",
              "value": "%apply_numpy_typemaps"
            },
            {
              "type": "text",
              "value": " that has a single argument "
            },
            {
              "type": "inlineCode",
              "value": "TYPE"
            },
            {
              "type": "text",
              "value": ". It uses the "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "SWIG"
            },
            {
              "type": "text",
              "value": " directive "
            },
            {
              "type": "inlineCode",
              "value": "%apply"
            },
            {
              "type": "text",
              "value": " to apply the provided typemaps to the argument signatures found in "
            },
            {
              "type": "inlineCode",
              "value": "Vector.h"
            },
            {
              "type": "text",
              "value": ".  This macro is then implemented for all of the data types supported by "
            },
            {
              "type": "inlineCode",
              "value": "numpy.i"
            },
            {
              "type": "text",
              "value": ".  It then does a "
            },
            {
              "type": "inlineCode",
              "value": "%include \"Vector.h\""
            },
            {
              "type": "text",
              "value": " to wrap all of the function prototypes in "
            },
            {
              "type": "inlineCode",
              "value": "Vector.h"
            },
            {
              "type": "text",
              "value": " using the typemaps in "
            },
            {
              "type": "inlineCode",
              "value": "numpy.i"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 1,
      "target": null,
      "title": "Testing SWIG Interface Files",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "After "
            },
            {
              "type": "inlineCode",
              "value": "make"
            },
            {
              "type": "text",
              "value": " is used to build the testing extension modules, "
            },
            {
              "type": "inlineCode",
              "value": "testVector.py"
            },
            {
              "type": "text",
              "value": " can be run to execute the tests.  As with other scripts that use "
            },
            {
              "type": "inlineCode",
              "value": "unittest"
            },
            {
              "type": "text",
              "value": " to facilitate unit testing, "
            },
            {
              "type": "inlineCode",
              "value": "testVector.py"
            },
            {
              "type": "text",
              "value": " defines a class that inherits from "
            },
            {
              "type": "inlineCode",
              "value": "unittest.TestCase"
            },
            {
              "type": "text",
              "value": "      "
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": "class VectorTestCase(unittest.TestCase):"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "However, this class is not run directly.  Rather, it serves as a base class to several other python classes, each one specific to a particular data type.  The "
            },
            {
              "type": "inlineCode",
              "value": "VectorTestCase"
            },
            {
              "type": "text",
              "value": " class stores two strings for typing information:"
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "children": [
                {
                  "dd": [
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "A string that matches one of the "
                        },
                        {
                          "type": "inlineCode",
                          "value": "SNAME"
                        },
                        {
                          "type": "text",
                          "value": " prefixes used in       "
                        },
                        {
                          "type": "inlineCode",
                          "value": "Vector.h"
                        },
                        {
                          "type": "text",
                          "value": " and "
                        },
                        {
                          "type": "inlineCode",
                          "value": "Vector.cxx"
                        },
                        {
                          "type": "text",
                          "value": ".  For example, "
                        },
                        {
                          "type": "inlineCode",
                          "value": "\"double\""
                        },
                        {
                          "type": "text",
                          "value": "."
                        }
                      ],
                      "type": "paragraph"
                    }
                  ],
                  "dt": {
                    "children": [
                      {
                        "children": [
                          {
                            "type": "text",
                            "value": "self.typeStr"
                          }
                        ],
                        "type": "strong"
                      }
                    ],
                    "type": "paragraph"
                  },
                  "type": "DefListItem"
                },
                {
                  "dd": [
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "A short (typically single-character) string that represents a       data type in numpy and corresponds to "
                        },
                        {
                          "type": "inlineCode",
                          "value": "self.typeStr"
                        },
                        {
                          "type": "text",
                          "value": ".  For       example, if "
                        },
                        {
                          "type": "inlineCode",
                          "value": "self.typeStr"
                        },
                        {
                          "type": "text",
                          "value": " is "
                        },
                        {
                          "type": "inlineCode",
                          "value": "\"double\""
                        },
                        {
                          "type": "text",
                          "value": ", then       "
                        },
                        {
                          "type": "inlineCode",
                          "value": "self.typeCode"
                        },
                        {
                          "type": "text",
                          "value": " should be "
                        },
                        {
                          "type": "inlineCode",
                          "value": "\"d\""
                        },
                        {
                          "type": "text",
                          "value": "."
                        }
                      ],
                      "type": "paragraph"
                    }
                  ],
                  "dt": {
                    "children": [
                      {
                        "children": [
                          {
                            "type": "text",
                            "value": "self.typeCode"
                          }
                        ],
                        "type": "strong"
                      }
                    ],
                    "type": "paragraph"
                  },
                  "type": "DefListItem"
                }
              ],
              "type": "DefList"
            }
          ],
          "type": "blockquote"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Each test defined by the "
            },
            {
              "type": "inlineCode",
              "value": "VectorTestCase"
            },
            {
              "type": "text",
              "value": " class extracts the python function it is trying to test by accessing the "
            },
            {
              "type": "inlineCode",
              "value": "Vector"
            },
            {
              "type": "text",
              "value": " module's dictionary      "
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": "length = Vector.__dict__[self.typeStr + \"Length\"]"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "In the case of double precision tests, this will return the python function "
            },
            {
              "type": "inlineCode",
              "value": "Vector.doubleLength"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "We then define a new test case class for each supported data type with a short definition such as      "
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": "class doubleTestCase(VectorTestCase):\n    def __init__(self, methodName=\"runTest\"):\n        VectorTestCase.__init__(self, methodName)\n        self.typeStr  = \"double\"\n        self.typeCode = \"d\""
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Each of these 12 classes is collected into a "
            },
            {
              "type": "inlineCode",
              "value": "unittest.TestSuite"
            },
            {
              "type": "text",
              "value": ", which is then executed.  Errors and failures are summed together and returned as the exit argument.  Any non-zero result indicates that at least one test did not pass."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 1,
      "target": null,
      "title": "Testing Python Scripts",
      "type": "Section"
    }
  ],
  "content": {},
  "example_section_data": {
    "children": [],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": null,
  "item_line": null,
  "item_type": null,
  "ordered_sections": [],
  "references": null,
  "see_also": [],
  "signature": {
    "type": "Signature",
    "value": null
  },
  "type": "DocBlob"
}