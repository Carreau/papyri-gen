{
  "aliases": [],
  "arbitrary": [
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Numpy 1.14.0 is the result of seven months of work and contains a large number of bug fixes and new features, along with several changes with potential compatibility issues. The major change that users will notice are the stylistic changes in the way numpy arrays and scalars are printed, a change that will affect doctests. See below for details on how to preserve the old style printing when needed."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "A major decision affecting future development concerns the schedule for dropping Python 2.7 support in the runup to 2020. The decision has been made to support 2.7 for all releases made in 2018, with the last release being designated a long term release with support for bug fixes extending through 2019. In 2019 support for 2.7 will be dropped in all new releases. More details can be found in "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "NEP 12"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "This release supports Python 2.7 and 3.4 - 3.6."
            }
          ],
          "type": "paragraph"
        },
        {
          "placeholder": "target",
          "type": "Unimplemented",
          "value": ".. _`NEP 12`: http://www.numpy.org/neps/nep-0014-dropping-python2.7-proposal.html"
        }
      ],
      "level": 0,
      "target": null,
      "title": "NumPy 1.14.0 Release Notes",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "np.einsum"
                    },
                    {
                      "type": "text",
                      "value": " function uses BLAS when possible"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "inlineCode",
                      "value": "genfromtxt"
                    },
                    {
                      "type": "text",
                      "value": ", "
                    },
                    {
                      "type": "inlineCode",
                      "value": "loadtxt"
                    },
                    {
                      "type": "text",
                      "value": ", "
                    },
                    {
                      "type": "inlineCode",
                      "value": "fromregex"
                    },
                    {
                      "type": "text",
                      "value": " and "
                    },
                    {
                      "type": "inlineCode",
                      "value": "savetxt"
                    },
                    {
                      "type": "text",
                      "value": " can now handle   files with arbitrary Python supported encoding."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Major improvements to printing of NumPy arrays and scalars."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            }
          ],
          "ordered": false,
          "spread": false,
          "start": 1,
          "type": "list"
        }
      ],
      "level": 1,
      "target": null,
      "title": "Highlights",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "inlineCode",
                      "value": "parametrize"
                    },
                    {
                      "type": "text",
                      "value": ": decorator added to numpy.testing"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "inlineCode",
                      "value": "chebinterpolate"
                    },
                    {
                      "type": "text",
                      "value": ": Interpolate function at Chebyshev points."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "dd": [
                        {
                          "children": [
                            {
                              "type": "inlineCode",
                              "value": "format_float_positional"
                            },
                            {
                              "type": "text",
                              "value": " and "
                            },
                            {
                              "type": "inlineCode",
                              "value": "format_float_scientific"
                            }
                          ],
                          "type": "paragraph"
                        }
                      ],
                      "dt": {
                        "children": [
                          {
                            "type": "inlineCode",
                            "value": "format_float_positional"
                          },
                          {
                            "type": "text",
                            "value": "and"
                          },
                          {
                            "type": "inlineCode",
                            "value": "format_float_scientific"
                          }
                        ],
                        "type": "paragraph"
                      },
                      "type": "DefListItem"
                    }
                  ],
                  "type": "DefList"
                }
              ],
              "spread": false,
              "type": "listItem"
            }
          ],
          "ordered": false,
          "spread": false,
          "start": 1,
          "type": "list"
        }
      ],
      "level": 1,
      "target": null,
      "title": "New functions",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Previously, "
            },
            {
              "type": "inlineCode",
              "value": "np.ma.default_fill_value"
            },
            {
              "type": "text",
              "value": " would return a 0d array, but "
            },
            {
              "type": "inlineCode",
              "value": "np.ma.minimum_fill_value"
            },
            {
              "type": "text",
              "value": " and "
            },
            {
              "type": "inlineCode",
              "value": "np.ma.maximum_fill_value"
            },
            {
              "type": "text",
              "value": " would return a tuple of the fields. Instead, all three methods return a structured "
            },
            {
              "type": "inlineCode",
              "value": "np.void"
            },
            {
              "type": "text",
              "value": " object, which is what you would already find in the "
            },
            {
              "type": "inlineCode",
              "value": ".fill_value"
            },
            {
              "type": "text",
              "value": " attribute."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Additionally, the dtype guessing now matches that of "
            },
            {
              "type": "inlineCode",
              "value": "np.array"
            },
            {
              "type": "text",
              "value": " - so when passing a python scalar "
            },
            {
              "type": "inlineCode",
              "value": "x"
            },
            {
              "type": "text",
              "value": ", "
            },
            {
              "type": "inlineCode",
              "value": "maximum_fill_value(x)"
            },
            {
              "type": "text",
              "value": " is always the same as "
            },
            {
              "type": "inlineCode",
              "value": "maximum_fill_value(np.array(x))"
            },
            {
              "type": "text",
              "value": ". Previously "
            },
            {
              "type": "inlineCode",
              "value": "x = long(1)"
            },
            {
              "type": "text",
              "value": " on Python 2 violated this assumption."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "``np.ma`` functions producing ``fill_value`` s have changed",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "The intent is that the UPDATEIFCOPY array previously returned when "
            },
            {
              "type": "inlineCode",
              "value": "a"
            },
            {
              "type": "text",
              "value": " was non-contiguous will be replaced by a writeable copy in the future. This temporary measure is aimed to notify folks who expect the underlying array be modified in this situation that that will no longer be the case. The most likely places for this to be noticed is when expressions of the form "
            },
            {
              "type": "inlineCode",
              "value": "np.asarray(a.flat)"
            },
            {
              "type": "text",
              "value": " are used, or when "
            },
            {
              "type": "inlineCode",
              "value": "a.flat"
            },
            {
              "type": "text",
              "value": " is passed as the out parameter to a ufunc."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "``a.flat.__array__()`` returns non-writeable arrays when ``a`` is non-contiguous",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Previously "
            },
            {
              "type": "inlineCode",
              "value": "np.tensordot"
            },
            {
              "type": "text",
              "value": " raised a ValueError when contracting over 0-length dimension. Now it returns a zero array, which is consistent with the behaviour of "
            },
            {
              "type": "inlineCode",
              "value": "np.dot"
            },
            {
              "type": "text",
              "value": " and "
            },
            {
              "type": "inlineCode",
              "value": "np.einsum"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "``np.tensordot`` now returns zero array when contracting over 0-length dimension",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "This is not expected to cause problems, but possibly something has been left out. If you experience an unexpected import problem using "
            },
            {
              "type": "inlineCode",
              "value": "numpy.testing"
            },
            {
              "type": "text",
              "value": " let us know."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "``numpy.testing`` reorganized",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "This previously would accept "
            },
            {
              "type": "inlineCode",
              "value": "dtype=some_array"
            },
            {
              "type": "text",
              "value": ", with the implied semantics of "
            },
            {
              "type": "inlineCode",
              "value": "dtype=some_array.dtype"
            },
            {
              "type": "text",
              "value": ". This was undocumented, unique across the numpy functions, and if used would likely correspond to a typo."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "``np.asfarray`` no longer accepts non-dtypes through the ``dtype`` argument",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Previously, this would promote to "
            },
            {
              "type": "inlineCode",
              "value": "float64"
            },
            {
              "type": "text",
              "value": " when arbitrary orders were passed, despite not doing so under the simple cases      "
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": ">>> f32 = np.float32([[1, 2]])\n>>> np.linalg.norm(f32, 2.0, axis=-1).dtype\ndtype('float32')\n>>> np.linalg.norm(f32, 2.0001, axis=-1).dtype\ndtype('float64')  # numpy 1.13\ndtype('float32')  # numpy 1.14"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "This change affects only "
            },
            {
              "type": "inlineCode",
              "value": "float32"
            },
            {
              "type": "text",
              "value": " and "
            },
            {
              "type": "inlineCode",
              "value": "float16"
            },
            {
              "type": "text",
              "value": " arrays."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "1D ``np.linalg.norm`` preserves float input types, even for arbitrary orders",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Elsewhere, "
            },
            {
              "type": "inlineCode",
              "value": "axis==()"
            },
            {
              "type": "text",
              "value": " is always understood as \"no axes\", but "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "count_nonzero"
            },
            {
              "type": "text",
              "value": " had a special case to treat this as \"all axes\". This was inconsistent and surprising. The correct way to count over all axes has always been to pass "
            },
            {
              "type": "inlineCode",
              "value": "axis == None"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "``count_nonzero(arr, axis=())`` now counts over no axes, not all axes",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "This is for pytest compatibility in the case of duplicate test file names in the different directories. As a result, "
            },
            {
              "type": "inlineCode",
              "value": "run_module_suite"
            },
            {
              "type": "text",
              "value": " no longer works, i.e., "
            },
            {
              "type": "inlineCode",
              "value": "python <path-to-test-file>"
            },
            {
              "type": "text",
              "value": " results in an error."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "``__init__.py`` files added to test directories",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "On Python 2, "
            },
            {
              "type": "inlineCode",
              "value": "void_array.astype(bool)"
            },
            {
              "type": "text",
              "value": " would always return an array of "
            },
            {
              "type": "inlineCode",
              "value": "True"
            },
            {
              "type": "text",
              "value": ", unless the dtype is "
            },
            {
              "type": "inlineCode",
              "value": "V0"
            },
            {
              "type": "text",
              "value": ". On Python 3, this operation would usually crash. Going forwards, "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "astype"
            },
            {
              "type": "text",
              "value": " matches the behavior of "
            },
            {
              "type": "inlineCode",
              "value": "bool(np.void)"
            },
            {
              "type": "text",
              "value": ", considering a buffer of all zeros as false, and anything else as true. Checks for "
            },
            {
              "type": "inlineCode",
              "value": "V0"
            },
            {
              "type": "text",
              "value": " can still be done with "
            },
            {
              "type": "inlineCode",
              "value": "arr.dtype.itemsize == 0"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "``.astype(bool)`` on unstructured void arrays now calls ``bool`` on each element",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "inlineCode",
              "value": "np.squeeze"
            },
            {
              "type": "text",
              "value": " is documented as returning a view, but the masked variant would sometimes return "
            },
            {
              "type": "inlineCode",
              "value": "masked"
            },
            {
              "type": "text",
              "value": ", which is not a view. This has been fixed, so that the result is always a view on the original masked array. This breaks any code that used "
            },
            {
              "type": "inlineCode",
              "value": "masked_arr.squeeze() is np.ma.masked"
            },
            {
              "type": "text",
              "value": ", but fixes code that writes to the result of "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": ".squeeze()"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "``MaskedArray.squeeze`` never returns ``np.ma.masked``",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "The previous parameter name "
            },
            {
              "type": "inlineCode",
              "value": "from"
            },
            {
              "type": "text",
              "value": " is a reserved keyword in Python, which made it difficult to pass the argument by name. This has been fixed by renaming the parameter to "
            },
            {
              "type": "inlineCode",
              "value": "from_"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "Renamed first parameter of ``can_cast`` from ``from`` to ``from_``",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "The ufunc "
            },
            {
              "type": "inlineCode",
              "value": "isnat"
            },
            {
              "type": "text",
              "value": " used to raise a "
            },
            {
              "type": "inlineCode",
              "value": "ValueError"
            },
            {
              "type": "text",
              "value": " when it was not passed variables of type "
            },
            {
              "type": "inlineCode",
              "value": "datetime"
            },
            {
              "type": "text",
              "value": " or "
            },
            {
              "type": "inlineCode",
              "value": "timedelta"
            },
            {
              "type": "text",
              "value": ". This has been changed to raising a "
            },
            {
              "type": "inlineCode",
              "value": "TypeError"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "``isnat`` raises ``TypeError`` when passed wrong type",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "When indexed with a float, the dtype object used to raise "
            },
            {
              "type": "inlineCode",
              "value": "ValueError"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "``dtype.__getitem__`` raises ``TypeError`` when passed wrong type",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Previously, user-defined types could fall back to a default implementation of "
            },
            {
              "type": "inlineCode",
              "value": "__str__"
            },
            {
              "type": "text",
              "value": " and "
            },
            {
              "type": "inlineCode",
              "value": "__repr__"
            },
            {
              "type": "text",
              "value": " implemented in numpy, but this has now been removed. Now user-defined types will fall back to the python default "
            },
            {
              "type": "inlineCode",
              "value": "object.__str__"
            },
            {
              "type": "text",
              "value": " and "
            },
            {
              "type": "inlineCode",
              "value": "object.__repr__"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "User-defined types now need to implement ``__str__`` and ``__repr__``",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "The "
            },
            {
              "type": "inlineCode",
              "value": "str"
            },
            {
              "type": "text",
              "value": " and "
            },
            {
              "type": "inlineCode",
              "value": "repr"
            },
            {
              "type": "text",
              "value": " of ndarrays and numpy scalars have been changed in a variety of ways. These changes are likely to break downstream user's doctests."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "These new behaviors can be disabled to mostly reproduce numpy 1.13 behavior by enabling the new 1.13 \"legacy\" printing mode. This is enabled by calling "
            },
            {
              "type": "inlineCode",
              "value": "np.set_printoptions(legacy=\"1.13\")"
            },
            {
              "type": "text",
              "value": ", or using the new "
            },
            {
              "type": "inlineCode",
              "value": "legacy"
            },
            {
              "type": "text",
              "value": " argument to "
            },
            {
              "type": "inlineCode",
              "value": "np.array2string"
            },
            {
              "type": "text",
              "value": ", as "
            },
            {
              "type": "inlineCode",
              "value": "np.array2string(arr, legacy='1.13')"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "In summary, the major changes are:"
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "For floating-point types:"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "children": [
                        {
                          "children": [
                            {
                              "type": "text",
                              "value": "The "
                            },
                            {
                              "type": "inlineCode",
                              "value": "repr"
                            },
                            {
                              "type": "text",
                              "value": " of float arrays often omits a space previously printed     in the sign position. See the new "
                            },
                            {
                              "type": "inlineCode",
                              "value": "sign"
                            },
                            {
                              "type": "text",
                              "value": " option to "
                            },
                            {
                              "type": "inlineCode",
                              "value": "np.set_printoptions"
                            },
                            {
                              "type": "text",
                              "value": "."
                            }
                          ],
                          "type": "paragraph"
                        }
                      ],
                      "spread": false,
                      "type": "listItem"
                    },
                    {
                      "children": [
                        {
                          "children": [
                            {
                              "type": "text",
                              "value": "Floating-point arrays and scalars use a new algorithm for decimal     representations, giving the shortest unique representation. This will     usually shorten "
                            },
                            {
                              "type": "inlineCode",
                              "value": "float16"
                            },
                            {
                              "type": "text",
                              "value": " fractional output, and sometimes "
                            },
                            {
                              "type": "inlineCode",
                              "value": "float32"
                            },
                            {
                              "type": "text",
                              "value": " and     "
                            },
                            {
                              "type": "inlineCode",
                              "value": "float128"
                            },
                            {
                              "type": "text",
                              "value": " output. "
                            },
                            {
                              "type": "inlineCode",
                              "value": "float64"
                            },
                            {
                              "type": "text",
                              "value": " should be unaffected.  See the new     "
                            },
                            {
                              "type": "inlineCode",
                              "value": "floatmode"
                            },
                            {
                              "type": "text",
                              "value": " option to "
                            },
                            {
                              "type": "inlineCode",
                              "value": "np.set_printoptions"
                            },
                            {
                              "type": "text",
                              "value": "."
                            }
                          ],
                          "type": "paragraph"
                        }
                      ],
                      "spread": false,
                      "type": "listItem"
                    },
                    {
                      "children": [
                        {
                          "children": [
                            {
                              "type": "text",
                              "value": "Float arrays printed in scientific notation no longer use fixed-precision,     and now instead show the shortest unique representation."
                            }
                          ],
                          "type": "paragraph"
                        }
                      ],
                      "spread": false,
                      "type": "listItem"
                    },
                    {
                      "children": [
                        {
                          "children": [
                            {
                              "type": "text",
                              "value": "The "
                            },
                            {
                              "type": "inlineCode",
                              "value": "str"
                            },
                            {
                              "type": "text",
                              "value": " of floating-point scalars is no longer truncated in python2."
                            }
                          ],
                          "type": "paragraph"
                        }
                      ],
                      "spread": false,
                      "type": "listItem"
                    }
                  ],
                  "ordered": false,
                  "spread": false,
                  "start": 1,
                  "type": "list"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "For other data types:"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "children": [
                        {
                          "children": [
                            {
                              "type": "text",
                              "value": "Non-finite complex scalars print like "
                            },
                            {
                              "type": "inlineCode",
                              "value": "nanj"
                            },
                            {
                              "type": "text",
                              "value": " instead of "
                            },
                            {
                              "type": "inlineCode",
                              "value": "nan*j"
                            },
                            {
                              "type": "text",
                              "value": "."
                            }
                          ],
                          "type": "paragraph"
                        }
                      ],
                      "spread": false,
                      "type": "listItem"
                    },
                    {
                      "children": [
                        {
                          "children": [
                            {
                              "type": "inlineCode",
                              "value": "NaT"
                            },
                            {
                              "type": "text",
                              "value": " values in datetime arrays are now properly aligned."
                            }
                          ],
                          "type": "paragraph"
                        }
                      ],
                      "spread": false,
                      "type": "listItem"
                    },
                    {
                      "children": [
                        {
                          "children": [
                            {
                              "type": "text",
                              "value": "Arrays and scalars of "
                            },
                            {
                              "type": "inlineCode",
                              "value": "np.void"
                            },
                            {
                              "type": "text",
                              "value": " datatype are now printed using hex     notation."
                            }
                          ],
                          "type": "paragraph"
                        }
                      ],
                      "spread": false,
                      "type": "listItem"
                    }
                  ],
                  "ordered": false,
                  "spread": false,
                  "start": 1,
                  "type": "list"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "For line-wrapping:"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "children": [
                        {
                          "children": [
                            {
                              "type": "text",
                              "value": "The \"dtype\" part of ndarray reprs will now be printed on the next line     if there isn't space on the last line of array output."
                            }
                          ],
                          "type": "paragraph"
                        }
                      ],
                      "spread": false,
                      "type": "listItem"
                    },
                    {
                      "children": [
                        {
                          "children": [
                            {
                              "type": "text",
                              "value": "The "
                            },
                            {
                              "type": "inlineCode",
                              "value": "linewidth"
                            },
                            {
                              "type": "text",
                              "value": " format option is now always respected.     The "
                            },
                            {
                              "domain": null,
                              "role": null,
                              "type": "Directive",
                              "value": "repr"
                            },
                            {
                              "type": "text",
                              "value": " or "
                            },
                            {
                              "domain": null,
                              "role": null,
                              "type": "Directive",
                              "value": "str"
                            },
                            {
                              "type": "text",
                              "value": " of an array will never exceed this, unless a single     element is too wide."
                            }
                          ],
                          "type": "paragraph"
                        }
                      ],
                      "spread": false,
                      "type": "listItem"
                    },
                    {
                      "children": [
                        {
                          "children": [
                            {
                              "type": "text",
                              "value": "The last line of an array string will never have more elements than earlier     lines."
                            }
                          ],
                          "type": "paragraph"
                        }
                      ],
                      "spread": false,
                      "type": "listItem"
                    },
                    {
                      "children": [
                        {
                          "children": [
                            {
                              "type": "text",
                              "value": "An extra space is no longer inserted on the first line if the elements are     too wide."
                            }
                          ],
                          "type": "paragraph"
                        }
                      ],
                      "spread": false,
                      "type": "listItem"
                    }
                  ],
                  "ordered": false,
                  "spread": false,
                  "start": 1,
                  "type": "list"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "For summarization (the use of "
                    },
                    {
                      "type": "inlineCode",
                      "value": "..."
                    },
                    {
                      "type": "text",
                      "value": " to shorten long arrays):"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "children": [
                        {
                          "children": [
                            {
                              "type": "text",
                              "value": "A trailing comma is no longer inserted for "
                            },
                            {
                              "type": "inlineCode",
                              "value": "str"
                            },
                            {
                              "type": "text",
                              "value": ".     Previously, "
                            },
                            {
                              "type": "inlineCode",
                              "value": "str(np.arange(1001))"
                            },
                            {
                              "type": "text",
                              "value": " gave     "
                            },
                            {
                              "type": "inlineCode",
                              "value": "'[   0    1    2 ...,  998  999 1000]'"
                            },
                            {
                              "type": "text",
                              "value": ", which has an extra comma."
                            }
                          ],
                          "type": "paragraph"
                        }
                      ],
                      "spread": false,
                      "type": "listItem"
                    },
                    {
                      "children": [
                        {
                          "children": [
                            {
                              "type": "text",
                              "value": "For arrays of 2-D and beyond, when "
                            },
                            {
                              "type": "inlineCode",
                              "value": "..."
                            },
                            {
                              "type": "text",
                              "value": " is printed on its own line in     order to summarize any but the last axis, newlines are now appended to that     line to match its leading newlines and a trailing space character is     removed."
                            }
                          ],
                          "type": "paragraph"
                        }
                      ],
                      "spread": false,
                      "type": "listItem"
                    }
                  ],
                  "ordered": false,
                  "spread": false,
                  "start": 1,
                  "type": "list"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "inlineCode",
                      "value": "MaskedArray"
                    },
                    {
                      "type": "text",
                      "value": " arrays now separate printed elements with commas, always   print the dtype, and correctly wrap the elements of long arrays to multiple   lines. If there is more than 1 dimension, the array attributes are now   printed in a new \"left-justified\" printing style."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "inlineCode",
                      "value": "recarray"
                    },
                    {
                      "type": "text",
                      "value": " arrays no longer print a trailing space before their dtype, and   wrap to the right number of columns."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "0d arrays no longer have their own idiosyncratic implementations of "
                    },
                    {
                      "type": "inlineCode",
                      "value": "str"
                    },
                    {
                      "type": "text",
                      "value": "   and "
                    },
                    {
                      "type": "inlineCode",
                      "value": "repr"
                    },
                    {
                      "type": "text",
                      "value": ". The "
                    },
                    {
                      "type": "inlineCode",
                      "value": "style"
                    },
                    {
                      "type": "text",
                      "value": " argument to "
                    },
                    {
                      "type": "inlineCode",
                      "value": "np.array2string"
                    },
                    {
                      "type": "text",
                      "value": " is deprecated."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Arrays of "
                    },
                    {
                      "type": "inlineCode",
                      "value": "bool"
                    },
                    {
                      "type": "text",
                      "value": " datatype will omit the datatype in the "
                    },
                    {
                      "type": "inlineCode",
                      "value": "repr"
                    },
                    {
                      "type": "text",
                      "value": "."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "User-defined "
                    },
                    {
                      "type": "inlineCode",
                      "value": "dtypes"
                    },
                    {
                      "type": "text",
                      "value": " (subclasses of "
                    },
                    {
                      "type": "inlineCode",
                      "value": "np.generic"
                    },
                    {
                      "type": "text",
                      "value": ") now need to   implement "
                    },
                    {
                      "type": "inlineCode",
                      "value": "__str__"
                    },
                    {
                      "type": "text",
                      "value": " and "
                    },
                    {
                      "type": "inlineCode",
                      "value": "__repr__"
                    },
                    {
                      "type": "text",
                      "value": "."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            }
          ],
          "ordered": false,
          "spread": false,
          "start": 1,
          "type": "list"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Some of these changes are described in more detail below. If you need to retain the previous behavior for doctests or other reasons, you may want to do something like      "
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": "# FIXME: We need the str/repr formatting used in Numpy < 1.14.\ntry:\n    np.set_printoptions(legacy='1.13')\nexcept TypeError:\n    pass"
        }
      ],
      "level": 2,
      "target": null,
      "title": "Many changes to array printing, disableable with the new \"legacy\" printing mode",
      "type": "Section"
    },
    {
      "children": [],
      "level": 1,
      "target": null,
      "title": "C API changes",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "inlineCode",
              "value": "UPDATEIFCOPY"
            },
            {
              "type": "text",
              "value": " arrays are contiguous copies of existing arrays, possibly with different dimensions, whose contents are copied back to the original array when their refcount goes to zero and they are deallocated. Because PyPy does not use refcounts, they do not function correctly with PyPy. NumPy is in the process of eliminating their use internally and two new C-API functions,"
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "inlineCode",
                      "value": "PyArray_SetWritebackIfCopyBase"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "inlineCode",
                      "value": "PyArray_ResolveWritebackIfCopy"
                    },
                    {
                      "type": "text",
                      "value": ","
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            }
          ],
          "ordered": false,
          "spread": false,
          "start": 1,
          "type": "list"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "have been added together with a complementary flag, "
            },
            {
              "type": "inlineCode",
              "value": "NPY_ARRAY_WRITEBACKIFCOPY"
            },
            {
              "type": "text",
              "value": ". Using the new functionality also requires that some flags be changed when new arrays are created, to wit: "
            },
            {
              "type": "inlineCode",
              "value": "NPY_ARRAY_INOUT_ARRAY"
            },
            {
              "type": "text",
              "value": " should be replaced by "
            },
            {
              "type": "inlineCode",
              "value": "NPY_ARRAY_INOUT_ARRAY2"
            },
            {
              "type": "text",
              "value": " and "
            },
            {
              "type": "inlineCode",
              "value": "NPY_ARRAY_INOUT_FARRAY"
            },
            {
              "type": "text",
              "value": " should be replaced by "
            },
            {
              "type": "inlineCode",
              "value": "NPY_ARRAY_INOUT_FARRAY2"
            },
            {
              "type": "text",
              "value": ". Arrays created with these new flags will then have the "
            },
            {
              "type": "inlineCode",
              "value": "WRITEBACKIFCOPY"
            },
            {
              "type": "text",
              "value": " semantics."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "If PyPy compatibility is not a concern, these new functions can be ignored, although there will be a "
            },
            {
              "type": "inlineCode",
              "value": "DeprecationWarning"
            },
            {
              "type": "text",
              "value": ". If you do wish to pursue PyPy compatibility, more information on these functions and their use may be found in the "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "c-api_"
            },
            {
              "type": "text",
              "value": " documentation and the example in "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "how-to-extend_"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        },
        {
          "placeholder": "target",
          "type": "Unimplemented",
          "value": ".. _c-api: https://github.com/numpy/numpy/blob/master/doc/source/reference/c-api.array.rst"
        },
        {
          "placeholder": "target",
          "type": "Unimplemented",
          "value": ".. _how-to-extend: https://github.com/numpy/numpy/blob/master/doc/source/user/c-info.how-to-extend.rst"
        }
      ],
      "level": 2,
      "target": null,
      "title": "PyPy compatible alternative to ``UPDATEIFCOPY`` arrays",
      "type": "Section"
    },
    {
      "children": [],
      "level": 1,
      "target": null,
      "title": "New Features",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "inlineCode",
              "value": "genfromtxt"
            },
            {
              "type": "text",
              "value": ", "
            },
            {
              "type": "inlineCode",
              "value": "loadtxt"
            },
            {
              "type": "text",
              "value": ", "
            },
            {
              "type": "inlineCode",
              "value": "fromregex"
            },
            {
              "type": "text",
              "value": " and "
            },
            {
              "type": "inlineCode",
              "value": "savetxt"
            },
            {
              "type": "text",
              "value": " can now handle files with arbitrary encoding supported by Python via the encoding argument. For backward compatibility the argument defaults to the special "
            },
            {
              "type": "inlineCode",
              "value": "bytes"
            },
            {
              "type": "text",
              "value": " value which continues to treat text as raw byte values and continues to pass latin1 encoded bytes to custom converters. Using any other value (including "
            },
            {
              "type": "inlineCode",
              "value": "None"
            },
            {
              "type": "text",
              "value": " for system default) will switch the functions to real text IO so one receives unicode strings instead of bytes in the resulting arrays."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "Encoding argument for text IO functions",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "inlineCode",
              "value": "numpy.testing.Tester"
            },
            {
              "type": "text",
              "value": " is now aware of "
            },
            {
              "type": "inlineCode",
              "value": "nose"
            },
            {
              "type": "text",
              "value": " plugins that are outside the "
            },
            {
              "type": "inlineCode",
              "value": "nose"
            },
            {
              "type": "text",
              "value": " built-in ones.  This allows using, for example, "
            },
            {
              "type": "inlineCode",
              "value": "nose-timer"
            },
            {
              "type": "text",
              "value": " like so:  "
            },
            {
              "type": "inlineCode",
              "value": "np.test(extra_argv=['--with-timer', '--timer-top-n', '20'])"
            },
            {
              "type": "text",
              "value": " to obtain the runtime of the 20 slowest tests.  An extra keyword "
            },
            {
              "type": "inlineCode",
              "value": "timer"
            },
            {
              "type": "text",
              "value": " was also added to "
            },
            {
              "type": "inlineCode",
              "value": "Tester.test"
            },
            {
              "type": "text",
              "value": ", so "
            },
            {
              "type": "inlineCode",
              "value": "np.test(timer=20)"
            },
            {
              "type": "text",
              "value": " will also report the 20 slowest tests."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "External ``nose`` plugins are usable by ``numpy.testing.Tester``",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "A basic "
            },
            {
              "type": "inlineCode",
              "value": "parametrize"
            },
            {
              "type": "text",
              "value": " decorator is now available in "
            },
            {
              "type": "inlineCode",
              "value": "numpy.testing"
            },
            {
              "type": "text",
              "value": ". It is intended to allow rewriting yield based tests that have been deprecated in pytest so as to facilitate the transition to pytest in the future. The nose testing framework has not been supported for several years and looks like abandonware."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "The new "
            },
            {
              "type": "inlineCode",
              "value": "parametrize"
            },
            {
              "type": "text",
              "value": " decorator does not have the full functionality of the one in pytest. It doesn't work for classes, doesn't support nesting, and does not substitute variable names. Even so, it should be adequate to rewrite the NumPy tests."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "``parametrize`` decorator added to ``numpy.testing``",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "The new "
            },
            {
              "type": "inlineCode",
              "value": "chebinterpolate"
            },
            {
              "type": "text",
              "value": " function interpolates a given function at the Chebyshev points of the first kind. A new "
            },
            {
              "type": "inlineCode",
              "value": "Chebyshev.interpolate"
            },
            {
              "type": "text",
              "value": " class method adds support for interpolation over arbitrary intervals using the scaled and shifted Chebyshev points of the first kind."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "``chebinterpolate`` function added to ``numpy.polynomial.chebyshev``",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "With Python versions containing the "
            },
            {
              "type": "inlineCode",
              "value": "lzma"
            },
            {
              "type": "text",
              "value": " module the text IO functions can now transparently read from files with "
            },
            {
              "type": "inlineCode",
              "value": "xz"
            },
            {
              "type": "text",
              "value": " or "
            },
            {
              "type": "inlineCode",
              "value": "lzma"
            },
            {
              "type": "text",
              "value": " extension."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "Support for reading lzma compressed text files in Python 3",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "This option controls printing of the sign of floating-point types, and may be one of the characters '-', '+' or ' '. With '+' numpy always prints the sign of positive values, with ' ' it always prints a space (whitespace character) in the sign position of positive values, and with '-' it will omit the sign character for positive values. The new default is '-'."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "This new default changes the float output relative to numpy 1.13. The old behavior can be obtained in 1.13 \"legacy\" printing mode, see compatibility notes above."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "``sign`` option added to ``np.setprintoptions`` and ``np.array2string``",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "The new "
            },
            {
              "type": "inlineCode",
              "value": "hermitian"
            },
            {
              "type": "text",
              "value": " option allows choosing between standard SVD based matrix rank calculation and the more efficient eigenvalue based method for symmetric/hermitian matrices."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "``hermitian`` option added to``np.linalg.matrix_rank``",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "These options could previously be controlled using "
            },
            {
              "type": "inlineCode",
              "value": "np.set_printoptions"
            },
            {
              "type": "text",
              "value": ", but now can be changed on a per-call basis as arguments to "
            },
            {
              "type": "inlineCode",
              "value": "np.array2string"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "``threshold`` and ``edgeitems`` options added to ``np.array2string``",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "A preallocated buffer of the desired dtype can now be used for the output of these functions."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "``concatenate`` and ``stack`` gained an ``out`` argument",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "The PGI flang compiler is a Fortran front end for LLVM released by NVIDIA under the Apache 2 license. It can be invoked by       "
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": "python setup.py config --compiler=clang --fcompiler=flang install"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "There is little experience with this new compiler, so any feedback from people using it will be appreciated."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "Support for PGI flang compiler on Windows",
      "type": "Section"
    },
    {
      "children": [],
      "level": 1,
      "target": null,
      "title": "Improvements",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Prior to NumPy 1.14.0, the numerator degrees of freedom needed to be > 1, but the distribution is valid for values > 0, which is the new requirement."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "Numerator degrees of freedom in ``random.noncentral_f`` need only be positive.",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Some specific loop structures which have an accelerated loop version did not release the GIL prior to NumPy 1.14.0.  This oversight has been fixed."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "The GIL is released for all ``np.einsum`` variations",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "The "
            },
            {
              "type": "inlineCode",
              "value": "np.einsum"
            },
            {
              "type": "text",
              "value": " function will now call "
            },
            {
              "type": "inlineCode",
              "value": "np.tensordot"
            },
            {
              "type": "text",
              "value": " when appropriate. Because "
            },
            {
              "type": "inlineCode",
              "value": "np.tensordot"
            },
            {
              "type": "text",
              "value": " uses BLAS when possible, that will speed up execution. By default, "
            },
            {
              "type": "inlineCode",
              "value": "np.einsum"
            },
            {
              "type": "text",
              "value": " will also attempt optimization as the overhead is small relative to the potential improvement in speed."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "The `np.einsum` function will use BLAS when possible and optimize by default",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "inlineCode",
              "value": "f2py"
            },
            {
              "type": "text",
              "value": " now allows for the allocation of arrays of dimension 0. This allows for more consistent handling of corner cases downstream."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "``f2py`` now handles arrays of dimension 0",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Numpy distutils now supports using Mingw64 gfortran and MSVC compilers together. This enables the production of Python extension modules on Windows containing Fortran code while retaining compatibility with the binaries distributed by Python.org. Not all use cases are supported, but most common ways to wrap Fortran for Python are functional."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Compilation in this mode is usually enabled automatically, and can be selected via the "
            },
            {
              "type": "inlineCode",
              "value": "--fcompiler"
            },
            {
              "type": "text",
              "value": " and "
            },
            {
              "type": "inlineCode",
              "value": "--compiler"
            },
            {
              "type": "text",
              "value": " options to "
            },
            {
              "type": "inlineCode",
              "value": "setup.py"
            },
            {
              "type": "text",
              "value": ". Moreover, linking Fortran codes to static OpenBLAS is supported; by default a gfortran compatible static archive "
            },
            {
              "type": "inlineCode",
              "value": "openblas.a"
            },
            {
              "type": "text",
              "value": " is looked for."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "``numpy.distutils`` supports using MSVC and mingw64-gfortran together",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Previously it was limited to a single 2d array."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "``np.linalg.pinv`` now works on stacked matrices",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Saving NumPy arrays in the "
            },
            {
              "type": "inlineCode",
              "value": "npy"
            },
            {
              "type": "text",
              "value": " format with "
            },
            {
              "type": "inlineCode",
              "value": "numpy.save"
            },
            {
              "type": "text",
              "value": " inserts padding before the array data to align it at 64 bytes.  Previously this was only 16 bytes (and sometimes less due to a bug in the code for version 2).  Now the alignment is 64 bytes, which matches the widest SIMD instruction set commonly available, and is also the most common cache line size.  This makes "
            },
            {
              "type": "inlineCode",
              "value": "npy"
            },
            {
              "type": "text",
              "value": " files easier to use in programs which open them with "
            },
            {
              "type": "inlineCode",
              "value": "mmap"
            },
            {
              "type": "text",
              "value": ", especially on Linux where an "
            },
            {
              "type": "inlineCode",
              "value": "mmap"
            },
            {
              "type": "text",
              "value": " offset must be a multiple of the page size."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "``numpy.save`` aligns data to 64 bytes instead of 16",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "In Python 3.6+ "
            },
            {
              "type": "inlineCode",
              "value": "numpy.savez"
            },
            {
              "type": "text",
              "value": " and "
            },
            {
              "type": "inlineCode",
              "value": "numpy.savez_compressed"
            },
            {
              "type": "text",
              "value": " now write directly to a ZIP file, without creating intermediate temporary files."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "NPZ files now can be written without using temporary files",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Structured types can contain zero fields, and string dtypes can contain zero characters. Zero-length strings still cannot be created directly, and must be constructed through structured dtypes      "
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": "str0 = np.empty(10, np.dtype([('v', str, N)]))['v']\nvoid0 = np.empty(10, np.void)"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "It was always possible to work with these, but the following operations are now supported for these arrays:"
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "children": [
                {
                  "children": [
                    {
                      "children": [
                        {
                          "domain": null,
                          "role": null,
                          "type": "Directive",
                          "value": "arr.sort()"
                        }
                      ],
                      "type": "paragraph"
                    }
                  ],
                  "spread": false,
                  "type": "listItem"
                },
                {
                  "children": [
                    {
                      "children": [
                        {
                          "domain": null,
                          "role": null,
                          "type": "Directive",
                          "value": "arr.view(bytes)"
                        }
                      ],
                      "type": "paragraph"
                    }
                  ],
                  "spread": false,
                  "type": "listItem"
                },
                {
                  "children": [
                    {
                      "children": [
                        {
                          "domain": null,
                          "role": null,
                          "type": "Directive",
                          "value": "arr.resize(...)"
                        }
                      ],
                      "type": "paragraph"
                    }
                  ],
                  "spread": false,
                  "type": "listItem"
                },
                {
                  "children": [
                    {
                      "children": [
                        {
                          "domain": null,
                          "role": null,
                          "type": "Directive",
                          "value": "pickle.dumps(arr)"
                        }
                      ],
                      "type": "paragraph"
                    }
                  ],
                  "spread": false,
                  "type": "listItem"
                }
              ],
              "ordered": false,
              "spread": false,
              "start": 1,
              "type": "list"
            }
          ],
          "type": "blockquote"
        }
      ],
      "level": 2,
      "target": null,
      "title": "Better support for empty structured and string types",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Unless otherwise stated all functions within the "
            },
            {
              "type": "inlineCode",
              "value": "financial"
            },
            {
              "type": "text",
              "value": " package now support using the "
            },
            {
              "type": "inlineCode",
              "value": "decimal.Decimal"
            },
            {
              "type": "text",
              "value": " built-in type."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "Support for ``decimal.Decimal`` in ``np.lib.financial``",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "The "
            },
            {
              "type": "inlineCode",
              "value": "str"
            },
            {
              "type": "text",
              "value": " and "
            },
            {
              "type": "inlineCode",
              "value": "repr"
            },
            {
              "type": "text",
              "value": " of floating-point values (16, 32, 64 and 128 bit) are now printed to give the shortest decimal representation which uniquely identifies the value from others of the same type. Previously this was only true for "
            },
            {
              "type": "inlineCode",
              "value": "float64"
            },
            {
              "type": "text",
              "value": " values. The remaining float types will now often be shorter than in numpy 1.13. Arrays printed in scientific notation now also use the shortest scientific representation, instead of fixed precision as before."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "children": [
                {
                  "type": "text",
                  "value": "Additionally, the "
                },
                {
                  "domain": null,
                  "role": null,
                  "type": "Directive",
                  "value": "str"
                },
                {
                  "type": "text",
                  "value": " of float scalars scalars will no longer be truncated  in python2, unlike python2 "
                },
                {
                  "domain": null,
                  "role": null,
                  "type": "Directive",
                  "value": "float's.  'np.double"
                },
                {
                  "type": "text",
                  "value": " scalars now have a "
                },
                {
                  "type": "inlineCode",
                  "value": "str"
                },
                {
                  "type": "text",
                  "value": "  and "
                },
                {
                  "type": "inlineCode",
                  "value": "repr"
                },
                {
                  "type": "text",
                  "value": " identical to that of a python3 float."
                }
              ],
              "type": "paragraph"
            }
          ],
          "type": "blockquote"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "New functions "
            },
            {
              "type": "inlineCode",
              "value": "np.format_float_scientific"
            },
            {
              "type": "text",
              "value": " and "
            },
            {
              "type": "inlineCode",
              "value": "np.format_float_positional"
            },
            {
              "type": "text",
              "value": " are provided to generate these decimal representations."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "A new option "
            },
            {
              "type": "inlineCode",
              "value": "floatmode"
            },
            {
              "type": "text",
              "value": " has been added to "
            },
            {
              "type": "inlineCode",
              "value": "np.set_printoptions"
            },
            {
              "type": "text",
              "value": " and "
            },
            {
              "type": "inlineCode",
              "value": "np.array2string"
            },
            {
              "type": "text",
              "value": ", which gives control over uniqueness and rounding of printed elements in an array. The new default is "
            },
            {
              "type": "inlineCode",
              "value": "floatmode='maxprec'"
            },
            {
              "type": "text",
              "value": " with "
            },
            {
              "type": "inlineCode",
              "value": "precision=8"
            },
            {
              "type": "text",
              "value": ", which will print at most 8 fractional digits, or fewer if an element can be uniquely represented with fewer. A useful new mode is "
            },
            {
              "type": "inlineCode",
              "value": "floatmode=\"unique\""
            },
            {
              "type": "text",
              "value": ", which will output enough digits to specify the array elements uniquely."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Numpy complex-floating-scalars with values like "
            },
            {
              "type": "inlineCode",
              "value": "inf*j"
            },
            {
              "type": "text",
              "value": " or "
            },
            {
              "type": "inlineCode",
              "value": "nan*j"
            },
            {
              "type": "text",
              "value": " now print as "
            },
            {
              "type": "inlineCode",
              "value": "infj"
            },
            {
              "type": "text",
              "value": " and "
            },
            {
              "type": "inlineCode",
              "value": "nanj"
            },
            {
              "type": "text",
              "value": ", like the pure-python "
            },
            {
              "type": "inlineCode",
              "value": "complex"
            },
            {
              "type": "text",
              "value": " type."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "The "
            },
            {
              "type": "inlineCode",
              "value": "FloatFormat"
            },
            {
              "type": "text",
              "value": " and "
            },
            {
              "type": "inlineCode",
              "value": "LongFloatFormat"
            },
            {
              "type": "text",
              "value": " classes are deprecated and should both be replaced by "
            },
            {
              "type": "inlineCode",
              "value": "FloatingFormat"
            },
            {
              "type": "text",
              "value": ". Similarly "
            },
            {
              "type": "inlineCode",
              "value": "ComplexFormat"
            },
            {
              "type": "text",
              "value": " and "
            },
            {
              "type": "inlineCode",
              "value": "LongComplexFormat"
            },
            {
              "type": "text",
              "value": " should be replaced by "
            },
            {
              "type": "inlineCode",
              "value": "ComplexFloatingFormat"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "Float printing now uses \"dragon4\" algorithm for shortest decimal representation",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "A hex representation compatible with the python "
            },
            {
              "type": "inlineCode",
              "value": "bytes"
            },
            {
              "type": "text",
              "value": " type is now printed for unstructured "
            },
            {
              "type": "inlineCode",
              "value": "np.void"
            },
            {
              "type": "text",
              "value": " elements, e.g., "
            },
            {
              "type": "inlineCode",
              "value": "V4"
            },
            {
              "type": "text",
              "value": " datatype. Previously, in python2 the raw void data of the element was printed to stdout, or in python3 the integer byte values were shown."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "``void`` datatype elements are now printed in hex notation",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "The printing style of "
            },
            {
              "type": "inlineCode",
              "value": "np.void"
            },
            {
              "type": "text",
              "value": " arrays is now independently customizable using the "
            },
            {
              "type": "inlineCode",
              "value": "formatter"
            },
            {
              "type": "text",
              "value": " argument to "
            },
            {
              "type": "inlineCode",
              "value": "np.set_printoptions"
            },
            {
              "type": "text",
              "value": ", using the "
            },
            {
              "type": "inlineCode",
              "value": "'void'"
            },
            {
              "type": "text",
              "value": " key, instead of the catch-all "
            },
            {
              "type": "inlineCode",
              "value": "numpystr"
            },
            {
              "type": "text",
              "value": " key as before."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "printing style for ``void`` datatypes is now independently customizable",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "inlineCode",
              "value": "np.loadtxt"
            },
            {
              "type": "text",
              "value": " now reads files in chunks instead of all at once which decreases its memory usage significantly for large files."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "Reduced memory usage of ``np.loadtxt``",
      "type": "Section"
    },
    {
      "children": [],
      "level": 1,
      "target": null,
      "title": "Changes",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "The indexing and assignment of structured arrays with multiple fields has changed in a number of ways, as warned about in previous releases."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "First, indexing a structured array with multiple fields, e.g., "
            },
            {
              "type": "inlineCode",
              "value": "arr[['f1', 'f3']]"
            },
            {
              "type": "text",
              "value": ", returns a view into the original array instead of a copy. The returned view will have extra padding bytes corresponding to intervening fields in the original array, unlike the copy in 1.13, which will affect code such as "
            },
            {
              "type": "inlineCode",
              "value": "arr[['f1', 'f3']].view(newdtype)"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Second, assignment between structured arrays will now occur \"by position\" instead of \"by field name\". The Nth field of the destination will be set to the Nth field of the source regardless of field name, unlike in numpy versions 1.6 to 1.13 in which fields in the destination array were set to the identically-named field in the source array or to 0 if the source did not have a field."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Correspondingly, the order of fields in a structured dtypes now matters when computing dtype equality. For example, with the dtypes       "
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": "x = dtype({'names': ['A', 'B'], 'formats': ['i4', 'f4'], 'offsets': [0, 4]})\ny = dtype({'names': ['B', 'A'], 'formats': ['f4', 'i4'], 'offsets': [4, 0]})"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "the expression "
            },
            {
              "type": "inlineCode",
              "value": "x == y"
            },
            {
              "type": "text",
              "value": " will now return "
            },
            {
              "type": "inlineCode",
              "value": "False"
            },
            {
              "type": "text",
              "value": ", unlike before. This makes dictionary based dtype specifications like "
            },
            {
              "type": "inlineCode",
              "value": "dtype({'a': ('i4', 0), 'b': ('f4', 4)})"
            },
            {
              "type": "text",
              "value": " dangerous in python < 3.6 since dict key order is not preserved in those versions."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Assignment from a structured array to a boolean array now raises a ValueError, unlike in 1.13, where it always set the destination elements to "
            },
            {
              "type": "inlineCode",
              "value": "True"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Assignment from structured array with more than one field to a non-structured array now raises a ValueError. In 1.13 this copied just the first field of the source to the destination."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Using field \"titles\" in multiple-field indexing is now disallowed, as is repeating a field name in a multiple-field index."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "The documentation for structured arrays in the user guide has been significantly updated to reflect these changes."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "Multiple-field indexing/assignment of structured arrays",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Previously, unlike most other numpy scalars, the "
            },
            {
              "type": "inlineCode",
              "value": "str"
            },
            {
              "type": "text",
              "value": " and "
            },
            {
              "type": "inlineCode",
              "value": "repr"
            },
            {
              "type": "text",
              "value": " of integer and void scalars could be controlled by "
            },
            {
              "type": "inlineCode",
              "value": "np.set_string_function"
            },
            {
              "type": "text",
              "value": ". This is no longer possible."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "Integer and Void scalars are now unaffected by ``np.set_string_function``",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Previously the "
            },
            {
              "type": "inlineCode",
              "value": "str"
            },
            {
              "type": "text",
              "value": " and "
            },
            {
              "type": "inlineCode",
              "value": "repr"
            },
            {
              "type": "text",
              "value": " of 0d arrays had idiosyncratic implementations which returned "
            },
            {
              "type": "inlineCode",
              "value": "str(a.item())"
            },
            {
              "type": "text",
              "value": " and "
            },
            {
              "type": "inlineCode",
              "value": "'array(' +\nrepr(a.item()) + ')'"
            },
            {
              "type": "text",
              "value": " respectively for 0d array "
            },
            {
              "type": "inlineCode",
              "value": "a"
            },
            {
              "type": "text",
              "value": ", unlike both numpy scalars and higher dimension ndarrays."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Now, the "
            },
            {
              "type": "inlineCode",
              "value": "str"
            },
            {
              "type": "text",
              "value": " of a 0d array acts like a numpy scalar using "
            },
            {
              "type": "inlineCode",
              "value": "str(a[()])"
            },
            {
              "type": "text",
              "value": " and the "
            },
            {
              "type": "inlineCode",
              "value": "repr"
            },
            {
              "type": "text",
              "value": " acts like higher dimension arrays using "
            },
            {
              "type": "inlineCode",
              "value": "formatter(a[()])"
            },
            {
              "type": "text",
              "value": ", where  "
            },
            {
              "type": "inlineCode",
              "value": "formatter"
            },
            {
              "type": "text",
              "value": "  can be specified using "
            },
            {
              "type": "inlineCode",
              "value": "np.set_printoptions"
            },
            {
              "type": "text",
              "value": ". The "
            },
            {
              "type": "inlineCode",
              "value": "style"
            },
            {
              "type": "text",
              "value": " argument of "
            },
            {
              "type": "inlineCode",
              "value": "np.array2string"
            },
            {
              "type": "text",
              "value": " is deprecated."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "This new behavior is disabled in 1.13 legacy printing mode, see compatibility notes above."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "0d array printing changed, ``style`` arg of array2string deprecated",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "inlineCode",
              "value": "RandomState"
            },
            {
              "type": "text",
              "value": " previously would accept empty arrays or arrays with 2 or more dimensions, which resulted in either a failure to seed (empty arrays) or for some of the passed values to be ignored when setting the seed."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "Seeding ``RandomState`` using an array requires a 1-d array",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "The "
            },
            {
              "type": "inlineCode",
              "value": "repr"
            },
            {
              "type": "text",
              "value": " of a "
            },
            {
              "type": "inlineCode",
              "value": "MaskedArray"
            },
            {
              "type": "text",
              "value": " is now closer to the python code that would produce it, with arrays now being shown with commas and dtypes. Like the other formatting changes, this can be disabled with the 1.13 legacy printing mode in order to help transition doctests."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "``MaskedArray`` objects show a more useful ``repr``",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "It now shows the domain and window parameters as keyword arguments to make them more clear      "
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": ">>> np.polynomial.Polynomial(range(4))\nPolynomial([0.,  1.,  2.,  3.], domain=[-1,  1], window=[-1,  1])"
        }
      ],
      "level": 2,
      "target": null,
      "title": "The ``repr`` of ``np.polynomial`` classes is more explicit",
      "type": "Section"
    }
  ],
  "content": {},
  "example_section_data": {
    "children": [],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": null,
  "item_line": null,
  "item_type": null,
  "ordered_sections": [],
  "references": null,
  "see_also": [],
  "signature": {
    "type": "Signature",
    "value": null
  },
  "type": "DocBlob"
}