{
  "aliases": [],
  "arbitrary": [
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "This NumPy release is the last one to support Python 2.7 and will be maintained as a long term release with bug fixes until 2020.  Support for Python 3.4 been dropped, the supported Python versions are 2.7 and 3.5-3.7. The wheels on PyPI are linked with OpenBLAS v0.3.4+,  which should fix the known threading issues found in previous OpenBLAS versions."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Downstream developers building this release should use Cython >= 0.29 and, if using OpenBLAS, OpenBLAS > v0.3.4."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "This release has seen a lot of refactoring and features many bug fixes, improved code organization, and better cross platform compatibility. Not all of these improvements will be visible to users, but they should help make maintenance easier going forward."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": "NumPy 1.16.0 Release Notes",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Experimental (opt-in only) support for overriding numpy functions,   see "
                    },
                    {
                      "type": "inlineCode",
                      "value": "__array_function__"
                    },
                    {
                      "type": "text",
                      "value": " below."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The "
                    },
                    {
                      "type": "inlineCode",
                      "value": "matmul"
                    },
                    {
                      "type": "text",
                      "value": " function is now a ufunc. This provides better   performance and allows overriding with "
                    },
                    {
                      "type": "inlineCode",
                      "value": "__array_ufunc__"
                    },
                    {
                      "type": "text",
                      "value": "."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Improved support for the ARM and POWER architectures."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Improved support for AIX and PyPy."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Improved interop with ctypes."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Improved support for PEP 3118."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            }
          ],
          "ordered": false,
          "spread": false,
          "start": 1,
          "type": "list"
        }
      ],
      "level": 1,
      "target": null,
      "title": "Highlights",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "New functions added to the "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "numpy.lib.recfuntions"
                    },
                    {
                      "type": "text",
                      "value": " module to ease the   structured assignment changes:"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "children": [
                        {
                          "children": [
                            {
                              "children": [
                                {
                                  "type": "inlineCode",
                                  "value": "assign_fields_by_name"
                                }
                              ],
                              "type": "paragraph"
                            }
                          ],
                          "spread": false,
                          "type": "listItem"
                        },
                        {
                          "children": [
                            {
                              "children": [
                                {
                                  "type": "inlineCode",
                                  "value": "structured_to_unstructured"
                                }
                              ],
                              "type": "paragraph"
                            }
                          ],
                          "spread": false,
                          "type": "listItem"
                        },
                        {
                          "children": [
                            {
                              "children": [
                                {
                                  "type": "inlineCode",
                                  "value": "unstructured_to_structured"
                                }
                              ],
                              "type": "paragraph"
                            }
                          ],
                          "spread": false,
                          "type": "listItem"
                        },
                        {
                          "children": [
                            {
                              "children": [
                                {
                                  "type": "inlineCode",
                                  "value": "apply_along_fields"
                                }
                              ],
                              "type": "paragraph"
                            }
                          ],
                          "spread": false,
                          "type": "listItem"
                        },
                        {
                          "children": [
                            {
                              "children": [
                                {
                                  "type": "inlineCode",
                                  "value": "require_fields"
                                }
                              ],
                              "type": "paragraph"
                            }
                          ],
                          "spread": false,
                          "type": "listItem"
                        }
                      ],
                      "ordered": false,
                      "spread": false,
                      "start": 1,
                      "type": "list"
                    }
                  ],
                  "type": "blockquote"
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "See the user guide at <https://docs.scipy.org/doc/numpy/user/basics.rec.html>   for more info."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            }
          ],
          "ordered": false,
          "spread": false,
          "start": 1,
          "type": "list"
        }
      ],
      "level": 1,
      "target": null,
      "title": "New functions",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The type dictionaries "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "numpy.core.typeNA"
                    },
                    {
                      "type": "text",
                      "value": " and "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "numpy.core.sctypeNA"
                    },
                    {
                      "type": "text",
                      "value": " are   deprecated. They were buggy and not documented and will be removed in the   1.18 release. Use`numpy.sctypeDict` instead."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "numpy.asscalar"
                    },
                    {
                      "type": "text",
                      "value": " function is deprecated. It is an alias to the more   powerful "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "numpy.ndarray.item"
                    },
                    {
                      "type": "text",
                      "value": ", not tested, and fails for scalars."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "numpy.set_array_ops"
                    },
                    {
                      "type": "text",
                      "value": " and "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "numpy.get_array_ops"
                    },
                    {
                      "type": "text",
                      "value": " functions are deprecated.   As part of "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "NEP 15"
                    },
                    {
                      "type": "text",
                      "value": ", they have been deprecated along with the C-API functions   "
                    },
                    {
                      "type": "inlineCode",
                      "value": "PyArray_SetNumericOps"
                    },
                    {
                      "type": "text",
                      "value": " and "
                    },
                    {
                      "type": "inlineCode",
                      "value": "PyArray_GetNumericOps"
                    },
                    {
                      "type": "text",
                      "value": ". Users   who wish to override the inner loop functions in built-in ufuncs should use   "
                    },
                    {
                      "type": "inlineCode",
                      "value": "PyUFunc_ReplaceLoopBySignature"
                    },
                    {
                      "type": "text",
                      "value": "."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "module",
                      "reference": {
                        "kind": "api",
                        "module": "numpy:unravel_index",
                        "path": "numpy:unravel_index",
                        "type": "RefInfo",
                        "version": "*"
                      },
                      "type": "Link",
                      "value": "numpy.unravel_index"
                    },
                    {
                      "type": "text",
                      "value": " keyword argument "
                    },
                    {
                      "type": "inlineCode",
                      "value": "dims"
                    },
                    {
                      "type": "text",
                      "value": " is deprecated, use   "
                    },
                    {
                      "type": "inlineCode",
                      "value": "shape"
                    },
                    {
                      "type": "text",
                      "value": " instead."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "module",
                      "reference": {
                        "kind": "api",
                        "module": "numpy:histogram",
                        "path": "numpy:histogram",
                        "type": "RefInfo",
                        "version": "*"
                      },
                      "type": "Link",
                      "value": "numpy.histogram"
                    },
                    {
                      "type": "text",
                      "value": " "
                    },
                    {
                      "type": "inlineCode",
                      "value": "normed"
                    },
                    {
                      "type": "text",
                      "value": " argument is deprecated.  It was deprecated   previously, but no warning was issued."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The "
                    },
                    {
                      "type": "inlineCode",
                      "value": "positive"
                    },
                    {
                      "type": "text",
                      "value": " operator ("
                    },
                    {
                      "type": "inlineCode",
                      "value": "+"
                    },
                    {
                      "type": "text",
                      "value": ") applied to non-numerical arrays is   deprecated. See below for details."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Passing an iterator to the stack functions is deprecated"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            }
          ],
          "ordered": false,
          "spread": false,
          "start": 1,
          "type": "list"
        }
      ],
      "level": 1,
      "target": null,
      "title": "New deprecations",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "NaT comparisons now return "
                    },
                    {
                      "type": "inlineCode",
                      "value": "False"
                    },
                    {
                      "type": "text",
                      "value": " without a warning, finishing a   deprecation cycle begun in NumPy 1.11."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "inlineCode",
                      "value": "np.lib.function_base.unique"
                    },
                    {
                      "type": "text",
                      "value": " was removed, finishing a deprecation cycle   begun in NumPy 1.4. Use "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "module",
                      "reference": {
                        "kind": "api",
                        "module": "numpy:unique",
                        "path": "numpy:unique",
                        "type": "RefInfo",
                        "version": "*"
                      },
                      "type": "Link",
                      "value": "numpy.unique"
                    },
                    {
                      "type": "text",
                      "value": " instead."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "multi-field indexing now returns views instead of copies, finishing a   deprecation cycle begun in NumPy 1.7. The change was previously attempted in   NumPy 1.14 but reverted until now."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "inlineCode",
                      "value": "np.PackageLoader"
                    },
                    {
                      "type": "text",
                      "value": " and "
                    },
                    {
                      "type": "inlineCode",
                      "value": "np.pkgload"
                    },
                    {
                      "type": "text",
                      "value": " have been removed. These were   deprecated in 1.10, had no tests, and seem to no longer work in 1.15."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            }
          ],
          "ordered": false,
          "spread": false,
          "start": 1,
          "type": "list"
        }
      ],
      "level": 1,
      "target": null,
      "title": "Expired deprecations",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "NumPy 1.17 will drop support for Python 2.7."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            }
          ],
          "ordered": false,
          "spread": false,
          "start": 1,
          "type": "list"
        }
      ],
      "level": 1,
      "target": null,
      "title": "Future changes",
      "type": "Section"
    },
    {
      "children": [],
      "level": 1,
      "target": null,
      "title": "Compatibility notes",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "On Windows, the installed script for running f2py is now an "
            },
            {
              "type": "inlineCode",
              "value": ".exe"
            },
            {
              "type": "text",
              "value": " file rather than a "
            },
            {
              "type": "inlineCode",
              "value": "*.py"
            },
            {
              "type": "text",
              "value": " file and should be run from the command line as "
            },
            {
              "type": "inlineCode",
              "value": "f2py"
            },
            {
              "type": "text",
              "value": " whenever the "
            },
            {
              "type": "inlineCode",
              "value": "Scripts"
            },
            {
              "type": "text",
              "value": " directory is in the path. Running "
            },
            {
              "type": "inlineCode",
              "value": "f2py"
            },
            {
              "type": "text",
              "value": " as a module "
            },
            {
              "type": "inlineCode",
              "value": "python -m numpy.f2py [...]"
            },
            {
              "type": "text",
              "value": " will work without path modification in any version of NumPy."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "f2py script on Windows",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Consistent with the behavior of NaN, all comparisons other than inequality checks with datetime64 or timedelta64 NaT (\"not-a-time\") values now always return "
            },
            {
              "type": "inlineCode",
              "value": "False"
            },
            {
              "type": "text",
              "value": ", and inequality checks with NaT now always return "
            },
            {
              "type": "inlineCode",
              "value": "True"
            },
            {
              "type": "text",
              "value": ". This includes comparisons between NaT values. For compatibility with the old behavior, use "
            },
            {
              "type": "inlineCode",
              "value": "np.isnat"
            },
            {
              "type": "text",
              "value": " to explicitly check for NaT or convert datetime64/timedelta64 arrays with "
            },
            {
              "type": "inlineCode",
              "value": ".astype(np.int64)"
            },
            {
              "type": "text",
              "value": " before making comparisons."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "NaT comparisons",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "The memory alignment of complex types is now the same as a C-struct composed of two floating point values, while before it was equal to the size of the type. For many users (for instance on x64/unix/gcc) this means that complex64 is now 4-byte aligned instead of 8-byte aligned. An important consequence is that aligned structured dtypes may now have a different size. For instance, "
            },
            {
              "type": "inlineCode",
              "value": "np.dtype('c8,u1', align=True)"
            },
            {
              "type": "text",
              "value": " used to have an itemsize of 16 (on x64/gcc) but now it is 12."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "More in detail, the complex64 type now has the same alignment as a C-struct "
            },
            {
              "type": "inlineCode",
              "value": "struct {float r, i;}"
            },
            {
              "type": "text",
              "value": ", according to the compiler used to compile numpy, and similarly for the complex128 and complex256 types."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "complex64/128 alignment has changed",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "inlineCode",
              "value": "len(np.mgrid)"
            },
            {
              "type": "text",
              "value": " and "
            },
            {
              "type": "inlineCode",
              "value": "len(np.ogrid)"
            },
            {
              "type": "text",
              "value": " are now considered nonsensical and raise a "
            },
            {
              "type": "inlineCode",
              "value": "TypeError"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "nd_grid __len__ removal",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Previously, only the "
            },
            {
              "type": "inlineCode",
              "value": "dims"
            },
            {
              "type": "text",
              "value": " keyword argument was accepted for specification of the shape of the array to be used for unraveling. "
            },
            {
              "type": "inlineCode",
              "value": "dims"
            },
            {
              "type": "text",
              "value": " remains supported, but is now deprecated."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "``np.unravel_index`` now accepts ``shape`` keyword argument",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Indexing a structured array with multiple fields, e.g., "
            },
            {
              "type": "inlineCode",
              "value": "arr[['f1', 'f3']]"
            },
            {
              "type": "text",
              "value": ", returns a view into the original array instead of a copy. The returned view will often have extra padding bytes corresponding to intervening fields in the original array, unlike before, which will affect code such as "
            },
            {
              "type": "inlineCode",
              "value": "arr[['f1', 'f3']].view('float64')"
            },
            {
              "type": "text",
              "value": ". This change has been planned since numpy 1.7. Operations hitting this path have emitted "
            },
            {
              "type": "inlineCode",
              "value": "FutureWarnings"
            },
            {
              "type": "text",
              "value": " since then. Additional "
            },
            {
              "type": "inlineCode",
              "value": "FutureWarnings"
            },
            {
              "type": "text",
              "value": " about this change were added in 1.12."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "To help users update their code to account for these changes, a number of functions have been added to the "
            },
            {
              "type": "inlineCode",
              "value": "numpy.lib.recfunctions"
            },
            {
              "type": "text",
              "value": " module which safely allow such operations. For instance, the code above can be replaced with "
            },
            {
              "type": "inlineCode",
              "value": "structured_to_unstructured(arr[['f1', 'f3']], dtype='float64')"
            },
            {
              "type": "text",
              "value": ". See the \"accessing multiple fields\" section of the "
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "user guide"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://docs.scipy.org/doc/numpy/user/basics.rec.html#accessing-multiple-fields"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "multi-field views return a view instead of a copy",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "The "
            },
            {
              "type": "inlineCode",
              "value": "NPY_FEATURE_VERSION"
            },
            {
              "type": "text",
              "value": " was incremented to 0x0000D, due to the addition of:"
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "inlineCode",
                      "value": "PyUFuncObject.core_dim_flags"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "inlineCode",
                      "value": "PyUFuncObject.core_dim_sizes"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "inlineCode",
                      "value": "PyUFuncObject.identity_value"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "inlineCode",
                      "value": "PyUFunc_FromFuncAndDataAndSignatureAndIdentity"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            }
          ],
          "ordered": false,
          "spread": false,
          "start": 1,
          "type": "list"
        }
      ],
      "level": 1,
      "target": null,
      "title": "C API changes",
      "type": "Section"
    },
    {
      "children": [],
      "level": 1,
      "target": null,
      "title": "New Features",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "This method ("
            },
            {
              "type": "inlineCode",
              "value": "bins='stone'"
            },
            {
              "type": "text",
              "value": ") for optimizing the bin number is a generalization of the Scott's rule. The Scott's rule assumes the distribution is approximately Normal, while the "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "ISE_"
            },
            {
              "type": "text",
              "value": " is a non-parametric method based on cross-validation."
            }
          ],
          "type": "paragraph"
        },
        {
          "placeholder": "target",
          "type": "Unimplemented",
          "value": ".. _ISE: https://en.wikipedia.org/wiki/Histogram#Minimizing_cross-validation_estimated_squared_error"
        }
      ],
      "level": 2,
      "target": null,
      "title": "Integrated squared error (ISE) estimator added to ``histogram``",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "New keyword "
            },
            {
              "type": "inlineCode",
              "value": "max_rows"
            },
            {
              "type": "text",
              "value": " in "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "module",
              "reference": {
                "kind": "api",
                "module": "numpy:loadtxt",
                "path": "numpy:loadtxt",
                "type": "RefInfo",
                "version": "*"
              },
              "type": "Link",
              "value": "numpy.loadtxt"
            },
            {
              "type": "text",
              "value": " sets the maximum rows of the content to be read after "
            },
            {
              "type": "inlineCode",
              "value": "skiprows"
            },
            {
              "type": "text",
              "value": ", as in "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "module",
              "reference": {
                "kind": "api",
                "module": "numpy:genfromtxt",
                "path": "numpy:genfromtxt",
                "type": "RefInfo",
                "version": "*"
              },
              "type": "Link",
              "value": "numpy.genfromtxt"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "``max_rows`` keyword added for ``np.loadtxt``",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "The modulus (remainder) operator is now supported for two operands of type "
            },
            {
              "type": "inlineCode",
              "value": "np.timedelta64"
            },
            {
              "type": "text",
              "value": ". The operands may have different units and the return value will match the type of the operands."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "modulus operator support added for ``np.timedelta64`` operands",
      "type": "Section"
    },
    {
      "children": [],
      "level": 1,
      "target": null,
      "title": "Improvements",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Up to protocol 4, numpy array pickling created 2 spurious copies of the data being serialized.  With pickle protocol 5, and the "
            },
            {
              "type": "inlineCode",
              "value": "PickleBuffer"
            },
            {
              "type": "text",
              "value": " API, a large variety of numpy arrays can now be serialized without any copy using out-of-band buffers, and with one less copy using in-band buffers. This results, for large arrays, in an up to 66% drop in peak memory usage."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "no-copy pickling of numpy arrays",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "NumPy builds should no longer interact with the host machine shell directly. "
            },
            {
              "type": "inlineCode",
              "value": "exec_command"
            },
            {
              "type": "text",
              "value": " has been replaced with "
            },
            {
              "type": "inlineCode",
              "value": "subprocess.check_output"
            },
            {
              "type": "text",
              "value": " where appropriate."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "build shell independence",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "When used in a front-end that supports it, "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "Polynomial"
            },
            {
              "type": "text",
              "value": " instances are now rendered through LaTeX. The current format is experimental, and is subject to change."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "`np.polynomial.Polynomial` classes render in LaTeX in Jupyter notebooks",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Even when no elements needed to be drawn, "
            },
            {
              "type": "inlineCode",
              "value": "np.random.randint"
            },
            {
              "type": "text",
              "value": " and "
            },
            {
              "type": "inlineCode",
              "value": "np.random.choice"
            },
            {
              "type": "text",
              "value": " raised an error when the arguments described an empty distribution. This has been fixed so that e.g. "
            },
            {
              "type": "inlineCode",
              "value": "np.random.choice([], 0) == np.array([], dtype=float64)"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "``randint`` and ``choice`` now work on empty distributions",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Previously, a "
            },
            {
              "type": "inlineCode",
              "value": "LinAlgError"
            },
            {
              "type": "text",
              "value": " would be raised when an empty matrix/empty matrices (with zero rows and/or columns) is/are passed in. Now outputs of appropriate shapes are returned."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "``linalg.lstsq``, ``linalg.qr``, and ``linalg.svd`` now work with empty arrays",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "This should help track down problems."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "Chain exceptions to give better error messages for invalid PEP3118 format strings",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Einsum was synchronized with the current upstream work."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "Einsum optimization path updates and efficiency improvements",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "In particular, they now work for masked arrays."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "`numpy.angle` and `numpy.expand_dims` now work on ``ndarray`` subclasses",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Setting "
            },
            {
              "type": "inlineCode",
              "value": "NPY_NO_DEPRECATED_API"
            },
            {
              "type": "text",
              "value": " to a value of 0 will suppress the current compiler warnings when the deprecated numpy API is used."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "``NPY_NO_DEPRECATED_API`` compiler warning suppression",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "New kwargs "
            },
            {
              "type": "inlineCode",
              "value": "prepend"
            },
            {
              "type": "text",
              "value": " and "
            },
            {
              "type": "inlineCode",
              "value": "append"
            },
            {
              "type": "text",
              "value": ", allow for values to be inserted on either end of the differences.  Similar to options for "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "ediff1d"
            },
            {
              "type": "text",
              "value": ". Now the inverse of "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "cumsum"
            },
            {
              "type": "text",
              "value": " can be obtained easily via "
            },
            {
              "type": "inlineCode",
              "value": "prepend=0"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "``np.diff`` Added kwargs prepend and append",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Support for ARM CPUs has been updated to accommodate 32 and 64 bit targets, and also big and little endian byte ordering. AARCH32 memory alignment issues have been addressed. CI testing has been expanded to include AARCH64 targets via the services of shippable.com."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "ARM support updated",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "anchor": null,
              "exists": true,
              "kind": "module",
              "reference": {
                "kind": "api",
                "module": "numpy",
                "path": "numpy.distutils",
                "type": "RefInfo",
                "version": "*"
              },
              "type": "Link",
              "value": "numpy.distutils"
            },
            {
              "type": "text",
              "value": " has always overridden rather than appended to "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "LDFLAGS"
            },
            {
              "type": "text",
              "value": " and other similar such environment variables for compiling Fortran extensions. Now, if the "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "NPY_DISTUTILS_APPEND_FLAGS"
            },
            {
              "type": "text",
              "value": " environment variable is set to 1, the behavior will be appending.  This applied to: "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "LDFLAGS"
            },
            {
              "type": "text",
              "value": ", "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "F77FLAGS"
            },
            {
              "type": "text",
              "value": ", "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "F90FLAGS"
            },
            {
              "type": "text",
              "value": ", "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "FREEFLAGS"
            },
            {
              "type": "text",
              "value": ", "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "FOPT"
            },
            {
              "type": "text",
              "value": ", "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "FDEBUG"
            },
            {
              "type": "text",
              "value": ", and "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "FFLAGS"
            },
            {
              "type": "text",
              "value": ".  See gh-11525 for more details."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "Appending to build flags",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "By using a numerical value in the signature of a generalized ufunc, one can indicate that the given function requires input or output to have dimensions with the given size. E.g., the signature of a function that converts a polar angle to a two-dimensional cartesian unit vector would be "
            },
            {
              "type": "inlineCode",
              "value": "()->(2)"
            },
            {
              "type": "text",
              "value": "; that for one that converts two spherical angles to a three-dimensional unit vector would be "
            },
            {
              "type": "inlineCode",
              "value": "(),()->(3)"
            },
            {
              "type": "text",
              "value": "; and that for the cross product of two three-dimensional vectors would be "
            },
            {
              "type": "inlineCode",
              "value": "(3),(3)->(3)"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Note that to the elementary function these dimensions are not treated any differently from variable ones indicated with a name starting with a letter; the loop still is passed the corresponding size, but it can now count on that size being equal to the fixed one given in the signature."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "Generalized ufunc signatures now allow fixed-size dimensions",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Some functions, in particular numpy's implementation of "
            },
            {
              "type": "inlineCode",
              "value": "@"
            },
            {
              "type": "text",
              "value": " as "
            },
            {
              "type": "inlineCode",
              "value": "matmul"
            },
            {
              "type": "text",
              "value": ", are very similar to generalized ufuncs in that they operate over core dimensions, but one could not present them as such because they were able to deal with inputs in which a dimension is missing. To support this, it is now allowed to postfix a dimension name with a question mark to indicate that the dimension does not necessarily have to be present."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "With this addition, the signature for "
            },
            {
              "type": "inlineCode",
              "value": "matmul"
            },
            {
              "type": "text",
              "value": " can be expressed as "
            },
            {
              "type": "inlineCode",
              "value": "(m?,n),(n,p?)->(m?,p?)"
            },
            {
              "type": "text",
              "value": ".  This indicates that if, e.g., the second operand has only one dimension, for the purposes of the elementary function it will be treated as if that input has core shape "
            },
            {
              "type": "inlineCode",
              "value": "(n, 1)"
            },
            {
              "type": "text",
              "value": ", and the output has the corresponding core shape of "
            },
            {
              "type": "inlineCode",
              "value": "(m, 1)"
            },
            {
              "type": "text",
              "value": ". The actual output array, however, has the flexible dimension removed, i.e., it will have shape "
            },
            {
              "type": "inlineCode",
              "value": "(..., m)"
            },
            {
              "type": "text",
              "value": ". Similarly, if both arguments have only a single dimension, the inputs will be presented as having shapes "
            },
            {
              "type": "inlineCode",
              "value": "(1, n)"
            },
            {
              "type": "text",
              "value": " and "
            },
            {
              "type": "inlineCode",
              "value": "(n, 1)"
            },
            {
              "type": "text",
              "value": " to the elementary function, and the output as "
            },
            {
              "type": "inlineCode",
              "value": "(1, 1)"
            },
            {
              "type": "text",
              "value": ", while the actual output array returned will have shape "
            },
            {
              "type": "inlineCode",
              "value": "()"
            },
            {
              "type": "text",
              "value": ". In this way, the signature allows one to use a single elementary function for four related but different signatures, "
            },
            {
              "type": "inlineCode",
              "value": "(m,n),(n,p)->(m,p)"
            },
            {
              "type": "text",
              "value": ", "
            },
            {
              "type": "inlineCode",
              "value": "(n),(n,p)->(p)"
            },
            {
              "type": "text",
              "value": ", "
            },
            {
              "type": "inlineCode",
              "value": "(m,n),(n)->(m)"
            },
            {
              "type": "text",
              "value": " and "
            },
            {
              "type": "inlineCode",
              "value": "(n),(n)->()"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "Generalized ufunc signatures now allow flexible dimensions",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "The "
            },
            {
              "type": "inlineCode",
              "value": "out"
            },
            {
              "type": "text",
              "value": " argument to these functions is now always tested for memory overlap to avoid corrupted results when memory overlap occurs."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "``np.clip`` and the ``clip`` method check for memory overlap",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "A further possible value has been added to the "
            },
            {
              "type": "inlineCode",
              "value": "cov"
            },
            {
              "type": "text",
              "value": " parameter of the "
            },
            {
              "type": "inlineCode",
              "value": "np.polyfit"
            },
            {
              "type": "text",
              "value": " function. With "
            },
            {
              "type": "inlineCode",
              "value": "cov='unscaled'"
            },
            {
              "type": "text",
              "value": " the scaling of the covariance matrix is disabled completely (similar to setting "
            },
            {
              "type": "inlineCode",
              "value": "absolute_sigma=True"
            },
            {
              "type": "text",
              "value": " in "
            },
            {
              "type": "inlineCode",
              "value": "scipy.optimize.curve_fit"
            },
            {
              "type": "text",
              "value": "). This would be useful in occasions, where the weights are given by 1/sigma with sigma being the (known) standard errors of (Gaussian distributed) data points, in which case the unscaled matrix is already a correct estimate for the covariance matrix."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "New value ``unscaled`` for option ``cov`` in ``np.polyfit``",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "The "
            },
            {
              "type": "inlineCode",
              "value": "help"
            },
            {
              "type": "text",
              "value": " function, when applied to numeric types such as "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "module",
              "reference": {
                "kind": "api",
                "module": "numpy:int32",
                "path": "numpy:int32",
                "type": "RefInfo",
                "version": "*"
              },
              "type": "Link",
              "value": "numpy.intc"
            },
            {
              "type": "text",
              "value": ", "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "module",
              "reference": {
                "kind": "api",
                "module": "numpy:int64",
                "path": "numpy:int64",
                "type": "RefInfo",
                "version": "*"
              },
              "type": "Link",
              "value": "numpy.int_"
            },
            {
              "type": "text",
              "value": ", and "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "module",
              "reference": {
                "kind": "api",
                "module": "numpy:longlong",
                "path": "numpy:longlong",
                "type": "RefInfo",
                "version": "*"
              },
              "type": "Link",
              "value": "numpy.longlong"
            },
            {
              "type": "text",
              "value": ", now lists all of the aliased names for that type, distinguishing between platform -dependent and -independent aliases."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "Detailed docstrings for scalar numeric types",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "The "
            },
            {
              "type": "inlineCode",
              "value": "__module__"
            },
            {
              "type": "text",
              "value": " attribute on most NumPy functions has been updated to refer to the preferred public module from which to access a function, rather than the module in which the function happens to be defined. This produces more informative displays for functions in tools such as IPython, e.g., instead of "
            },
            {
              "type": "inlineCode",
              "value": "<function 'numpy.core.fromnumeric.sum'>"
            },
            {
              "type": "text",
              "value": " you now see "
            },
            {
              "type": "inlineCode",
              "value": "<function 'numpy.sum'>"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "``__module__`` attribute now points to public modules",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "On systems that support transparent hugepages over the madvise system call numpy now marks that large memory allocations can be backed by hugepages which reduces page fault overhead and can in some fault heavy cases improve performance significantly. On Linux the setting for huge pages to be used, "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "/sys/kernel/mm/transparent_hugepage/enabled"
            },
            {
              "type": "text",
              "value": ", must be at least "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "madvise"
            },
            {
              "type": "text",
              "value": ". Systems which already have it set to "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "always"
            },
            {
              "type": "text",
              "value": " will not see much difference as the kernel will automatically use huge pages where appropriate."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Users of very old Linux kernels (~3.x and older) should make sure that "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "/sys/kernel/mm/transparent_hugepage/defrag"
            },
            {
              "type": "text",
              "value": " is not set to "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "always"
            },
            {
              "type": "text",
              "value": " to avoid performance problems due concurrency issues in the memory defragmentation."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "Large allocations marked as suitable for transparent hugepages",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "We now default to use "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "fenv.h"
            },
            {
              "type": "text",
              "value": " for floating point status error reporting. Previously we had a broken default that sometimes would not report underflow, overflow, and invalid floating point operations. Now we can support non-glibc distributions like Alpine Linux as long as they ship "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "fenv.h"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "Alpine Linux (and other musl c library distros) support",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Large arrays (greater than "
            },
            {
              "type": "inlineCode",
              "value": "512 * 512"
            },
            {
              "type": "text",
              "value": ") now use a blocking algorithm based on copying the data directly into the appropriate slice of the resulting array. This results in significant speedups for these large arrays, particularly for arrays being blocked along more than 2 dimensions."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "Speedup ``np.block`` for large arrays",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Previously the caller was responsible for keeping the array alive for the lifetime of the pointer."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 3,
      "target": null,
      "title": "``arr.ctypes.data_as(...)`` holds a reference to arr",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "The implementation of "
            },
            {
              "type": "inlineCode",
              "value": "np.take"
            },
            {
              "type": "text",
              "value": " no longer makes an unnecessary copy of the source array when its "
            },
            {
              "type": "inlineCode",
              "value": "writeable"
            },
            {
              "type": "text",
              "value": " flag is set to "
            },
            {
              "type": "inlineCode",
              "value": "False"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "Speedup ``np.take`` for read-only arrays",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "The "
            },
            {
              "type": "inlineCode",
              "value": "np.core.records.fromfile"
            },
            {
              "type": "text",
              "value": " function now supports "
            },
            {
              "type": "inlineCode",
              "value": "pathlib.Path"
            },
            {
              "type": "text",
              "value": " and other path-like objects in addition to a file object. Furthermore, the "
            },
            {
              "type": "inlineCode",
              "value": "np.load"
            },
            {
              "type": "text",
              "value": " function now also supports path-like objects when using memory mapping ("
            },
            {
              "type": "inlineCode",
              "value": "mmap_mode"
            },
            {
              "type": "text",
              "value": " keyword argument)."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "Support path-like objects for more functions",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Universal functions have an "
            },
            {
              "type": "inlineCode",
              "value": ".identity"
            },
            {
              "type": "text",
              "value": " which is used when "
            },
            {
              "type": "inlineCode",
              "value": ".reduce"
            },
            {
              "type": "text",
              "value": " is called on an empty axis."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "As of this release, the logical binary ufuncs, "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "logical_and"
            },
            {
              "type": "text",
              "value": ", "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "logical_or"
            },
            {
              "type": "text",
              "value": ", and "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "logical_xor"
            },
            {
              "type": "text",
              "value": ", now have "
            },
            {
              "type": "inlineCode",
              "value": "identity"
            },
            {
              "type": "text",
              "value": " s of type "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "bool"
            },
            {
              "type": "text",
              "value": ", where previously they were of type "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "int"
            },
            {
              "type": "text",
              "value": ". This restores the 1.14 behavior of getting "
            },
            {
              "type": "inlineCode",
              "value": "bool"
            },
            {
              "type": "text",
              "value": " s when reducing empty object arrays with these ufuncs, while also keeping the 1.15 behavior of getting "
            },
            {
              "type": "inlineCode",
              "value": "int"
            },
            {
              "type": "text",
              "value": " s when reducing empty object arrays with arithmetic ufuncs like "
            },
            {
              "type": "inlineCode",
              "value": "add"
            },
            {
              "type": "text",
              "value": " and "
            },
            {
              "type": "inlineCode",
              "value": "multiply"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Additionally, "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "logaddexp"
            },
            {
              "type": "text",
              "value": " now has an identity of "
            },
            {
              "type": "inlineCode",
              "value": "-inf"
            },
            {
              "type": "text",
              "value": ", allowing it to be called on empty sequences, where previously it could not be."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "This is possible thanks to the new "
            },
            {
              "type": "inlineCode",
              "value": "PyUFunc_FromFuncAndDataAndSignatureAndIdentity"
            },
            {
              "type": "text",
              "value": ", which allows arbitrary values to be used as identities now."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "Better behaviour of ufunc identities during reductions",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Numpy has always supported taking a value or type from "
            },
            {
              "type": "inlineCode",
              "value": "ctypes"
            },
            {
              "type": "text",
              "value": " and converting it into an array or dtype, but only behaved correctly for simpler types. As of this release, this caveat is lifted - now:"
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The "
                    },
                    {
                      "type": "inlineCode",
                      "value": "_pack_"
                    },
                    {
                      "type": "text",
                      "value": " attribute of "
                    },
                    {
                      "type": "inlineCode",
                      "value": "ctypes.Structure"
                    },
                    {
                      "type": "text",
                      "value": ", used to emulate C's   "
                    },
                    {
                      "type": "inlineCode",
                      "value": "__attribute__((packed))"
                    },
                    {
                      "type": "text",
                      "value": ", is respected."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Endianness of all ctypes objects is preserved"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "inlineCode",
                      "value": "ctypes.Union"
                    },
                    {
                      "type": "text",
                      "value": " is supported"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Non-representable constructs raise exceptions, rather than producing   dangerously incorrect results:"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "children": [
                        {
                          "children": [
                            {
                              "type": "text",
                              "value": "Bitfields are no longer interpreted as sub-arrays"
                            }
                          ],
                          "type": "paragraph"
                        }
                      ],
                      "spread": false,
                      "type": "listItem"
                    },
                    {
                      "children": [
                        {
                          "children": [
                            {
                              "type": "text",
                              "value": "Pointers are no longer replaced with the type that they point to"
                            }
                          ],
                          "type": "paragraph"
                        }
                      ],
                      "spread": false,
                      "type": "listItem"
                    }
                  ],
                  "ordered": false,
                  "spread": false,
                  "start": 1,
                  "type": "list"
                }
              ],
              "spread": false,
              "type": "listItem"
            }
          ],
          "ordered": false,
          "spread": false,
          "start": 1,
          "type": "list"
        }
      ],
      "level": 2,
      "target": null,
      "title": "Improved conversion from ctypes objects",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "This matches the "
            },
            {
              "type": "inlineCode",
              "value": ".contents"
            },
            {
              "type": "text",
              "value": " member of normal ctypes arrays, and can be used to construct an "
            },
            {
              "type": "inlineCode",
              "value": "np.array"
            },
            {
              "type": "text",
              "value": " around the pointers contents.  This replaces "
            },
            {
              "type": "inlineCode",
              "value": "np.array(some_nd_pointer)"
            },
            {
              "type": "text",
              "value": ", which stopped working in 1.15.  As a side effect of this change, "
            },
            {
              "type": "inlineCode",
              "value": "ndpointer"
            },
            {
              "type": "text",
              "value": " now supports dtypes with overlapping fields and padding."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "A new ``ndpointer.contents`` member",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "numpy.matmul"
            },
            {
              "type": "text",
              "value": " is now a ufunc which means that both the function and the "
            },
            {
              "type": "inlineCode",
              "value": "__matmul__"
            },
            {
              "type": "text",
              "value": " operator can now be overridden by "
            },
            {
              "type": "inlineCode",
              "value": "__array_ufunc__"
            },
            {
              "type": "text",
              "value": ". Its implementation has also changed. It uses the same BLAS routines as "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "module",
              "reference": {
                "kind": "api",
                "module": "numpy:dot",
                "path": "numpy:dot",
                "type": "RefInfo",
                "version": "*"
              },
              "type": "Link",
              "value": "numpy.dot"
            },
            {
              "type": "text",
              "value": ", ensuring its performance is similar for large matrices."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "``matmul`` is now a ``ufunc``",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "These functions used to be limited to scalar stop and start values, but can now take arrays, which will be properly broadcast and result in an output which has one axis prepended.  This can be used, e.g., to obtain linearly interpolated points between sets of points."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "Start and stop arrays for ``linspace``, ``logspace`` and ``geomspace``",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "We now use additional free CI services, thanks to the companies that provide:"
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Codecoverage testing via codecov.io"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Arm testing via shippable.com"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Additional test runs on azure pipelines"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            }
          ],
          "ordered": false,
          "spread": false,
          "start": 1,
          "type": "list"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "These are in addition to our continued use of travis, appveyor (for wheels) and LGTM"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "CI extended with additional services",
      "type": "Section"
    },
    {
      "children": [],
      "level": 1,
      "target": null,
      "title": "Changes",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Previously, comparison ufuncs such as "
            },
            {
              "type": "inlineCode",
              "value": "np.equal"
            },
            {
              "type": "text",
              "value": " would return "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "NotImplemented"
            },
            {
              "type": "text",
              "value": " if their arguments had structured dtypes, to help comparison operators such as "
            },
            {
              "type": "inlineCode",
              "value": "__eq__"
            },
            {
              "type": "text",
              "value": " deal with those.  This is no longer needed, as the relevant logic has moved to the comparison operators proper (which thus do continue to return "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "NotImplemented"
            },
            {
              "type": "text",
              "value": " as needed). Hence, like all other ufuncs, the comparison ufuncs will now error on structured dtypes."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "Comparison ufuncs will now error rather than return NotImplemented",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Previously, "
            },
            {
              "type": "inlineCode",
              "value": "+array"
            },
            {
              "type": "text",
              "value": " unconditionally returned a copy. Now, it will raise a "
            },
            {
              "type": "inlineCode",
              "value": "DeprecationWarning"
            },
            {
              "type": "text",
              "value": " if the array is not numerical (i.e., if "
            },
            {
              "type": "inlineCode",
              "value": "np.positive(array)"
            },
            {
              "type": "text",
              "value": " raises a "
            },
            {
              "type": "inlineCode",
              "value": "TypeError"
            },
            {
              "type": "text",
              "value": ". For "
            },
            {
              "type": "inlineCode",
              "value": "ndarray"
            },
            {
              "type": "text",
              "value": " subclasses that override the default "
            },
            {
              "type": "inlineCode",
              "value": "__array_ufunc__"
            },
            {
              "type": "text",
              "value": " implementation, the "
            },
            {
              "type": "inlineCode",
              "value": "TypeError"
            },
            {
              "type": "text",
              "value": " is passed on."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "Positive will now raise a deprecation warning for non-numerical arrays",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Previously, "
            },
            {
              "type": "inlineCode",
              "value": "np.lib.mixins.NDArrayOperatorsMixin"
            },
            {
              "type": "text",
              "value": " did not implement the special methods for Python's matrix multiplication operator ("
            },
            {
              "type": "inlineCode",
              "value": "@"
            },
            {
              "type": "text",
              "value": "). This has changed now that "
            },
            {
              "type": "inlineCode",
              "value": "matmul"
            },
            {
              "type": "text",
              "value": " is a ufunc and can be overridden using "
            },
            {
              "type": "inlineCode",
              "value": "__array_ufunc__"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "``NDArrayOperatorsMixin`` now implements matrix multiplication",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "So far, "
            },
            {
              "type": "inlineCode",
              "value": "np.polyfit"
            },
            {
              "type": "text",
              "value": " used a non-standard factor in the scaling of the the covariance matrix. Namely, rather than using the standard "
            },
            {
              "type": "inlineCode",
              "value": "chisq/(M-N)"
            },
            {
              "type": "text",
              "value": ", it scaled it with "
            },
            {
              "type": "inlineCode",
              "value": "chisq/(M-N-2)"
            },
            {
              "type": "text",
              "value": " where M is the number of data points and N is the number of parameters.  This scaling is inconsistent with other fitting programs such as e.g. "
            },
            {
              "type": "inlineCode",
              "value": "scipy.optimize.curve_fit"
            },
            {
              "type": "text",
              "value": " and was changed to "
            },
            {
              "type": "inlineCode",
              "value": "chisq/(M-N)"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "The scaling of the covariance matrix in ``np.polyfit`` is different",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "As part of code introduced in 1.10,  "
            },
            {
              "type": "inlineCode",
              "value": "float32"
            },
            {
              "type": "text",
              "value": " and "
            },
            {
              "type": "inlineCode",
              "value": "float64"
            },
            {
              "type": "text",
              "value": " set invalid float status when a Nan is encountered in "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "numpy.maximum"
            },
            {
              "type": "text",
              "value": " and "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "numpy.minimum"
            },
            {
              "type": "text",
              "value": ", when using SSE2 semantics. This caused a "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "RuntimeWarning"
            },
            {
              "type": "text",
              "value": " to sometimes be emitted. In 1.15 we fixed the inconsistencies which caused the warnings to become more conspicuous. Now no warnings will be emitted."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "``maximum`` and ``minimum`` no longer emit warnings",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "The two modules were merged, according to "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "NEP 15"
            },
            {
              "type": "text",
              "value": ". Previously "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "np.core.umath"
            },
            {
              "type": "text",
              "value": " and "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "np.core.multiarray"
            },
            {
              "type": "text",
              "value": " were separate c-extension modules. They are now python wrappers to the single "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "np.core/_multiarray_math"
            },
            {
              "type": "text",
              "value": " c-extension module."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "Umath and multiarray c-extension modules merged into a single module",
      "type": "Section"
    }
  ],
  "content": {},
  "example_section_data": {
    "children": [],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": null,
  "item_line": null,
  "item_type": null,
  "ordered_sections": [],
  "references": null,
  "see_also": [],
  "signature": {
    "type": "Signature",
    "value": null
  },
  "type": "DocBlob"
}