{
  "aliases": [],
  "arbitrary": [
    {
      "children": [
        {
          "args": "numpy",
          "children": [],
          "name": "currentmodule",
          "options": {},
          "type": "mystDirective",
          "value": ""
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "This NumPy release is marked by the removal of much technical debt: support for Python 2 has been removed, many deprecations have been expired, and documentation has been improved. The polishing of the random module continues apace with bug fixes and better usability from Cython."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "The Python versions supported for this release are 3.6-3.8. Downstream developers should use Cython >= 0.29.16 for Python 3.8 support and OpenBLAS >= 3.7 to avoid problems on the Skylake architecture."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": "NumPy 1.19.0 Release Notes",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Code compatibility with Python versions < 3.6 (including Python 2) was   dropped from both the python and C code. The shims in "
                    },
                    {
                      "type": "inlineCode",
                      "value": "numpy.compat"
                    },
                    {
                      "type": "text",
                      "value": " will   remain to support third-party packages, but they may be deprecated in a   future release. Note that 1.19.x will "
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "not"
                        }
                      ],
                      "type": "emphasis"
                    },
                    {
                      "type": "text",
                      "value": " compile with earlier versions of   Python due to the use of f-strings."
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "("
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "gh-15233"
                        }
                      ],
                      "title": "",
                      "type": "link",
                      "url": "https://github.com/numpy/numpy/pull/15233"
                    },
                    {
                      "type": "text",
                      "value": ")"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            }
          ],
          "ordered": false,
          "spread": false,
          "start": 1,
          "type": "list"
        }
      ],
      "level": 1,
      "target": null,
      "title": "Highlights",
      "type": "Section"
    },
    {
      "children": [],
      "level": 1,
      "target": null,
      "title": "Expired deprecations",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "This concludes a deprecation from 1.9, where when an "
            },
            {
              "type": "inlineCode",
              "value": "axis"
            },
            {
              "type": "text",
              "value": " argument was passed to a call to "
            },
            {
              "type": "inlineCode",
              "value": "~numpy.insert"
            },
            {
              "type": "text",
              "value": " and "
            },
            {
              "type": "inlineCode",
              "value": "~numpy.delete"
            },
            {
              "type": "text",
              "value": " on a 0d array, the "
            },
            {
              "type": "inlineCode",
              "value": "axis"
            },
            {
              "type": "text",
              "value": " and "
            },
            {
              "type": "inlineCode",
              "value": "obj"
            },
            {
              "type": "text",
              "value": " argument and indices would be completely ignored. In these cases, "
            },
            {
              "type": "inlineCode",
              "value": "insert(arr, \"nonsense\", 42, axis=0)"
            },
            {
              "type": "text",
              "value": " would actually overwrite the entire array, while "
            },
            {
              "type": "inlineCode",
              "value": "delete(arr, \"nonsense\", axis=0)"
            },
            {
              "type": "text",
              "value": " would be "
            },
            {
              "type": "inlineCode",
              "value": "arr.copy()"
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Now passing "
            },
            {
              "type": "inlineCode",
              "value": "axis"
            },
            {
              "type": "text",
              "value": " on a 0d array raises "
            },
            {
              "type": "inlineCode",
              "value": "~numpy.AxisError"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "("
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "gh-15802"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://github.com/numpy/numpy/pull/15802"
            },
            {
              "type": "text",
              "value": ")"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "``numpy.insert`` and ``numpy.delete`` can no longer be passed an axis on 0d arrays",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "This concludes deprecations from 1.8 and 1.9, where "
            },
            {
              "type": "inlineCode",
              "value": "np.delete"
            },
            {
              "type": "text",
              "value": " would ignore both negative and out-of-bounds items in a sequence of indices. This was at odds with its behavior when passed a single index."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Now out-of-bounds items throw "
            },
            {
              "type": "inlineCode",
              "value": "IndexError"
            },
            {
              "type": "text",
              "value": ", and negative items index from the end."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "("
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "gh-15804"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://github.com/numpy/numpy/pull/15804"
            },
            {
              "type": "text",
              "value": ")"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "``numpy.delete`` no longer ignores out-of-bounds indices",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "This concludes a deprecation from 1.9, where sequences of non-integers indices were allowed and cast to integers. Now passing sequences of non-integral indices raises "
            },
            {
              "type": "inlineCode",
              "value": "IndexError"
            },
            {
              "type": "text",
              "value": ", just like it does when passing a single non-integral scalar."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "("
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "gh-15805"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://github.com/numpy/numpy/pull/15805"
            },
            {
              "type": "text",
              "value": ")"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "``numpy.insert`` and ``numpy.delete`` no longer accept non-integral indices",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "This concludes a deprecation from 1.8, where "
            },
            {
              "type": "inlineCode",
              "value": "np.delete"
            },
            {
              "type": "text",
              "value": " would cast boolean arrays and scalars passed as an index argument into integer indices. The behavior now is to treat boolean arrays as a mask, and to raise an error on boolean scalars."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "("
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "gh-15815"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://github.com/numpy/numpy/pull/15815"
            },
            {
              "type": "text",
              "value": ")"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "``numpy.delete`` no longer casts boolean indices to integers",
      "type": "Section"
    },
    {
      "children": [],
      "level": 1,
      "target": null,
      "title": "Compatibility notes",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "A bug in the generation of random variates for the Dirichlet distribution with small 'alpha' values was fixed by using a different algorithm when "
            },
            {
              "type": "inlineCode",
              "value": "max(alpha) < 0.1"
            },
            {
              "type": "text",
              "value": ".  Because of the change, the stream of variates generated by "
            },
            {
              "type": "inlineCode",
              "value": "dirichlet"
            },
            {
              "type": "text",
              "value": " in this case will be different from previous releases."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "("
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "gh-14924"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://github.com/numpy/numpy/pull/14924"
            },
            {
              "type": "text",
              "value": ")"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "Changed random variate stream from ``numpy.random.Generator.dirichlet``",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "The promotion of mixed scalars and arrays in "
            },
            {
              "type": "inlineCode",
              "value": "PyArray_ConvertToCommonType"
            },
            {
              "type": "text",
              "value": " has been changed to adhere to those used by "
            },
            {
              "type": "inlineCode",
              "value": "np.result_type"
            },
            {
              "type": "text",
              "value": ". This means that input such as "
            },
            {
              "type": "inlineCode",
              "value": "(1000, np.array([1], dtype=np.uint8)))"
            },
            {
              "type": "text",
              "value": " will now return "
            },
            {
              "type": "inlineCode",
              "value": "uint16"
            },
            {
              "type": "text",
              "value": " dtypes. In most cases the behaviour is unchanged. Note that the use of this C-API function is generally discouraged. This also fixes "
            },
            {
              "type": "inlineCode",
              "value": "np.choose"
            },
            {
              "type": "text",
              "value": " to behave the same way as the rest of NumPy in this respect."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "("
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "gh-14933"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://github.com/numpy/numpy/pull/14933"
            },
            {
              "type": "text",
              "value": ")"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "Scalar promotion in ``PyArray_ConvertToCommonType``",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "The fasttake and fastputmask slots are now never used and must always be set to NULL. This will result in no change in behaviour. However, if a user dtype should set one of these a DeprecationWarning will be given."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "("
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "gh-14942"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://github.com/numpy/numpy/pull/14942"
            },
            {
              "type": "text",
              "value": ")"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "Fasttake and fastputmask slots are deprecated and NULL'ed",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "inlineCode",
              "value": "np.ediff1d"
            },
            {
              "type": "text",
              "value": " now uses the "
            },
            {
              "type": "inlineCode",
              "value": "\"same_kind\""
            },
            {
              "type": "text",
              "value": " casting rule for its additional "
            },
            {
              "type": "inlineCode",
              "value": "to_end"
            },
            {
              "type": "text",
              "value": " and "
            },
            {
              "type": "inlineCode",
              "value": "to_begin"
            },
            {
              "type": "text",
              "value": " arguments. This ensures type safety except when the input array has a smaller integer type than "
            },
            {
              "type": "inlineCode",
              "value": "to_begin"
            },
            {
              "type": "text",
              "value": " or "
            },
            {
              "type": "inlineCode",
              "value": "to_end"
            },
            {
              "type": "text",
              "value": ". In rare cases, the behaviour will be more strict than it was previously in 1.16 and 1.17. This is necessary to solve issues with floating point NaN."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "("
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "gh-14981"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://github.com/numpy/numpy/pull/14981"
            },
            {
              "type": "text",
              "value": ")"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "``np.ediff1d`` casting behaviour with ``to_end`` and ``to_begin``",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Objects with "
            },
            {
              "type": "inlineCode",
              "value": "len(obj) == 0"
            },
            {
              "type": "text",
              "value": " which implement an \"array-like\" interface, meaning an object implementing "
            },
            {
              "type": "inlineCode",
              "value": "obj.__array__()"
            },
            {
              "type": "text",
              "value": ", "
            },
            {
              "type": "inlineCode",
              "value": "obj.__array_interface__"
            },
            {
              "type": "text",
              "value": ", "
            },
            {
              "type": "inlineCode",
              "value": "obj.__array_struct__"
            },
            {
              "type": "text",
              "value": ", or the python buffer interface and which are also sequences (i.e. Pandas objects) will now always retain there shape correctly when converted to an array. If such an object has a shape of "
            },
            {
              "type": "inlineCode",
              "value": "(0, 1)"
            },
            {
              "type": "text",
              "value": " previously, it could be converted into an array of shape "
            },
            {
              "type": "inlineCode",
              "value": "(0,)"
            },
            {
              "type": "text",
              "value": " (losing all dimensions after the first 0)."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "("
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "gh-14995"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://github.com/numpy/numpy/pull/14995"
            },
            {
              "type": "text",
              "value": ")"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "Converting of empty array-like objects to NumPy arrays",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "As part of the continued removal of Python 2 compatibility, "
            },
            {
              "type": "inlineCode",
              "value": "multiarray.int_asbuffer"
            },
            {
              "type": "text",
              "value": " was removed. On Python 3, it threw a "
            },
            {
              "type": "inlineCode",
              "value": "NotImplementedError"
            },
            {
              "type": "text",
              "value": " and was unused internally. It is expected that there are no downstream use cases for this method with Python 3."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "("
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "gh-15229"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://github.com/numpy/numpy/pull/15229"
            },
            {
              "type": "text",
              "value": ")"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "Removed ``multiarray.int_asbuffer``",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "This module contained only the function "
            },
            {
              "type": "inlineCode",
              "value": "get_exception()"
            },
            {
              "type": "text",
              "value": ", which was used as      "
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": "try:\n    ...\nexcept Exception:\n    e = get_exception()"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Its purpose was to handle the change in syntax introduced in Python 2.6, from "
            },
            {
              "type": "inlineCode",
              "value": "except Exception, e:"
            },
            {
              "type": "text",
              "value": " to "
            },
            {
              "type": "inlineCode",
              "value": "except Exception as e:"
            },
            {
              "type": "text",
              "value": ", meaning it was only necessary for codebases supporting Python 2.5 and older."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "("
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "gh-15255"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://github.com/numpy/numpy/pull/15255"
            },
            {
              "type": "text",
              "value": ")"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "``numpy.distutils.compat`` has been removed",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "inlineCode",
              "value": "numpy.issubdtype"
            },
            {
              "type": "text",
              "value": " had a FutureWarning since NumPy 1.14 which has expired now. This means that certain input where the second argument was neither a datatype nor a NumPy scalar type (such as a string or a python type like "
            },
            {
              "type": "inlineCode",
              "value": "int"
            },
            {
              "type": "text",
              "value": " or "
            },
            {
              "type": "inlineCode",
              "value": "float"
            },
            {
              "type": "text",
              "value": ") will now be consistent with passing in "
            },
            {
              "type": "inlineCode",
              "value": "np.dtype(arg2).type"
            },
            {
              "type": "text",
              "value": ". This makes the result consistent with expectations and leads to a false result in some cases which previously returned true."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "("
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "gh-15773"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://github.com/numpy/numpy/pull/15773"
            },
            {
              "type": "text",
              "value": ")"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "``issubdtype`` no longer interprets ``float`` as ``np.floating``",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Output of the "
            },
            {
              "type": "inlineCode",
              "value": "__round__"
            },
            {
              "type": "text",
              "value": " dunder method and consequently the Python built-in "
            },
            {
              "type": "inlineCode",
              "value": "round"
            },
            {
              "type": "text",
              "value": " has been changed to be a Python "
            },
            {
              "type": "inlineCode",
              "value": "int"
            },
            {
              "type": "text",
              "value": " to be consistent with calling it on Python "
            },
            {
              "type": "inlineCode",
              "value": "float"
            },
            {
              "type": "text",
              "value": " objects when called with no arguments. Previously, it would return a scalar of the "
            },
            {
              "type": "inlineCode",
              "value": "np.dtype"
            },
            {
              "type": "text",
              "value": " that was passed in."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "("
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "gh-15840"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://github.com/numpy/numpy/pull/15840"
            },
            {
              "type": "text",
              "value": ")"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "Change output of ``round`` on scalars to be consistent with Python",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "The former has changed to have the expected meaning of setting "
            },
            {
              "type": "inlineCode",
              "value": "numpy.ndarray.strides"
            },
            {
              "type": "text",
              "value": " to "
            },
            {
              "type": "inlineCode",
              "value": "()"
            },
            {
              "type": "text",
              "value": ", while the latter continues to result in strides being chosen automatically."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "("
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "gh-15882"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://github.com/numpy/numpy/pull/15882"
            },
            {
              "type": "text",
              "value": ")"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "The ``numpy.ndarray`` constructor no longer interprets ``strides=()`` as ``strides=None``",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "The C-level casts from strings were simplified. This changed also fixes string to datetime and timedelta casts to behave correctly (i.e. like Python casts using "
            },
            {
              "type": "inlineCode",
              "value": "string_arr.astype(\"M8\")"
            },
            {
              "type": "text",
              "value": " while previously the cast would behave like "
            },
            {
              "type": "inlineCode",
              "value": "string_arr.astype(np.int_).astype(\"M8\")"
            },
            {
              "type": "text",
              "value": ". This only affects code using low-level C-API to do manual casts (not full array casts) of single scalar values or using e.g. "
            },
            {
              "type": "inlineCode",
              "value": "PyArray_GetCastFunc"
            },
            {
              "type": "text",
              "value": ", and should thus not affect the vast majority of users."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "("
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "gh-16068"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://github.com/numpy/numpy/pull/16068"
            },
            {
              "type": "text",
              "value": ")"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "C-Level string to datetime casts changed",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Small seeds (less than "
            },
            {
              "type": "inlineCode",
              "value": "2**96"
            },
            {
              "type": "text",
              "value": ") were previously implicitly 0-padded out to 128 bits, the size of the internal entropy pool. When spawned, the spawn key was concatenated before the 0-padding. Since the first spawn key is "
            },
            {
              "type": "inlineCode",
              "value": "(0,)"
            },
            {
              "type": "text",
              "value": ", small seeds before the spawn created the same states as the first spawned "
            },
            {
              "type": "inlineCode",
              "value": "SeedSequence"
            },
            {
              "type": "text",
              "value": ".  Now, the seed is explicitly 0-padded out to the internal pool size before concatenating the spawn key. Spawned "
            },
            {
              "type": "inlineCode",
              "value": "SeedSequences"
            },
            {
              "type": "text",
              "value": " will produce different results than in the previous release. Unspawned "
            },
            {
              "type": "inlineCode",
              "value": "SeedSequences"
            },
            {
              "type": "text",
              "value": " will still produce the same results."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "("
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "gh-16551"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://github.com/numpy/numpy/pull/16551"
            },
            {
              "type": "text",
              "value": ")"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "``SeedSequence`` with small seeds no longer conflicts with spawning",
      "type": "Section"
    },
    {
      "children": [],
      "level": 1,
      "target": null,
      "title": "Deprecations",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Calling "
            },
            {
              "type": "inlineCode",
              "value": "np.array([[1, [1, 2, 3]])"
            },
            {
              "type": "text",
              "value": " will issue a "
            },
            {
              "type": "inlineCode",
              "value": "DeprecationWarning"
            },
            {
              "type": "text",
              "value": " as per "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "NEP 34"
            },
            {
              "type": "text",
              "value": ". Users should explicitly use "
            },
            {
              "type": "inlineCode",
              "value": "dtype=object"
            },
            {
              "type": "text",
              "value": " to avoid the warning."
            }
          ],
          "type": "paragraph"
        },
        {
          "placeholder": "target",
          "type": "Unimplemented",
          "value": ".. _`NEP 34`: https://numpy.org/neps/nep-0034.html"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "("
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "gh-15119"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://github.com/numpy/numpy/pull/15119"
            },
            {
              "type": "text",
              "value": ")"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "Deprecate automatic ``dtype=object`` for ragged input",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "inlineCode",
              "value": "0"
            },
            {
              "type": "text",
              "value": " is treated as a special case and is aliased to "
            },
            {
              "type": "inlineCode",
              "value": "None"
            },
            {
              "type": "text",
              "value": " in the functions:"
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "inlineCode",
                      "value": "numpy.core.records.fromarrays"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "inlineCode",
                      "value": "numpy.core.records.fromrecords"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "inlineCode",
                      "value": "numpy.core.records.fromstring"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "inlineCode",
                      "value": "numpy.core.records.fromfile"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            }
          ],
          "ordered": false,
          "spread": false,
          "start": 1,
          "type": "list"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "In future, "
            },
            {
              "type": "inlineCode",
              "value": "0"
            },
            {
              "type": "text",
              "value": " will not be special cased, and will be treated as an array length like any other integer."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "("
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "gh-15217"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://github.com/numpy/numpy/pull/15217"
            },
            {
              "type": "text",
              "value": ")"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "Passing ``shape=0`` to factory functions in ``numpy.rec`` is deprecated",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "The following C-API functions are probably unused and have been deprecated:"
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "inlineCode",
                      "value": "PyArray_GetArrayParamsFromObject"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "inlineCode",
                      "value": "PyUFunc_GenericFunction"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "inlineCode",
                      "value": "PyUFunc_SetUsesArraysAsData"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            }
          ],
          "ordered": false,
          "spread": false,
          "start": 1,
          "type": "list"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "In most cases "
            },
            {
              "type": "inlineCode",
              "value": "PyArray_GetArrayParamsFromObject"
            },
            {
              "type": "text",
              "value": " should be replaced by converting to an array, while "
            },
            {
              "type": "inlineCode",
              "value": "PyUFunc_GenericFunction"
            },
            {
              "type": "text",
              "value": " can be replaced with "
            },
            {
              "type": "inlineCode",
              "value": "PyObject_Call"
            },
            {
              "type": "text",
              "value": " (see documentation for details)."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "("
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "gh-15427"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://github.com/numpy/numpy/pull/15427"
            },
            {
              "type": "text",
              "value": ")"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "Deprecation of probably unused C-API functions",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "The super classes of scalar types, such as "
            },
            {
              "type": "inlineCode",
              "value": "np.integer"
            },
            {
              "type": "text",
              "value": ", "
            },
            {
              "type": "inlineCode",
              "value": "np.generic"
            },
            {
              "type": "text",
              "value": ", or "
            },
            {
              "type": "inlineCode",
              "value": "np.inexact"
            },
            {
              "type": "text",
              "value": " will now give a deprecation warning when converted to a dtype (or used in a dtype keyword argument). The reason for this is that "
            },
            {
              "type": "inlineCode",
              "value": "np.integer"
            },
            {
              "type": "text",
              "value": " is converted to "
            },
            {
              "type": "inlineCode",
              "value": "np.int_"
            },
            {
              "type": "text",
              "value": ", while it would be expected to represent "
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "any"
                }
              ],
              "type": "emphasis"
            },
            {
              "type": "text",
              "value": " integer (e.g. also "
            },
            {
              "type": "inlineCode",
              "value": "int8"
            },
            {
              "type": "text",
              "value": ", "
            },
            {
              "type": "inlineCode",
              "value": "int16"
            },
            {
              "type": "text",
              "value": ", etc. For example, "
            },
            {
              "type": "inlineCode",
              "value": "dtype=np.floating"
            },
            {
              "type": "text",
              "value": " is currently identical to "
            },
            {
              "type": "inlineCode",
              "value": "dtype=np.float64"
            },
            {
              "type": "text",
              "value": ", even though also "
            },
            {
              "type": "inlineCode",
              "value": "np.float32"
            },
            {
              "type": "text",
              "value": " is a subclass of "
            },
            {
              "type": "inlineCode",
              "value": "np.floating"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "("
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "gh-15534"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://github.com/numpy/numpy/pull/15534"
            },
            {
              "type": "text",
              "value": ")"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "Converting certain types to dtypes is Deprecated",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Output of the "
            },
            {
              "type": "inlineCode",
              "value": "__round__"
            },
            {
              "type": "text",
              "value": " dunder method and consequently the Python built-in "
            },
            {
              "type": "inlineCode",
              "value": "round"
            },
            {
              "type": "text",
              "value": " has been deprecated on complex scalars. This does not affect "
            },
            {
              "type": "inlineCode",
              "value": "np.round"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "("
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "gh-15840"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://github.com/numpy/numpy/pull/15840"
            },
            {
              "type": "text",
              "value": ")"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "Deprecation of ``round`` for ``np.complexfloating`` scalars",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "inlineCode",
              "value": "~numpy.ndarray.tobytes"
            },
            {
              "type": "text",
              "value": " has existed since the 1.9 release, but until this release "
            },
            {
              "type": "inlineCode",
              "value": "~numpy.ndarray.tostring"
            },
            {
              "type": "text",
              "value": " emitted no warning. The change to emit a warning brings NumPy in line with the builtin "
            },
            {
              "type": "inlineCode",
              "value": "array.array"
            },
            {
              "type": "text",
              "value": " methods of the same name."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "("
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "gh-15867"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://github.com/numpy/numpy/pull/15867"
            },
            {
              "type": "text",
              "value": ")"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "``numpy.ndarray.tostring()`` is deprecated in favor of ``tobytes()``",
      "type": "Section"
    },
    {
      "children": [],
      "level": 1,
      "target": null,
      "title": "C API changes",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "The following functions now accept a constant array of "
            },
            {
              "type": "inlineCode",
              "value": "npy_intp"
            },
            {
              "type": "text",
              "value": ":"
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "inlineCode",
                      "value": "PyArray_BroadcastToShape"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "inlineCode",
                      "value": "PyArray_IntTupleFromIntp"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "inlineCode",
                      "value": "PyArray_OverflowMultiplyList"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            }
          ],
          "ordered": false,
          "spread": false,
          "start": 1,
          "type": "list"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Previously the caller would have to cast away the const-ness to call these functions."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "("
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "gh-15251"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://github.com/numpy/numpy/pull/15251"
            },
            {
              "type": "text",
              "value": ")"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "Better support for ``const`` dimensions in API functions",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "inlineCode",
              "value": "UFuncGenericFunction"
            },
            {
              "type": "text",
              "value": " now expects pointers to const "
            },
            {
              "type": "inlineCode",
              "value": "dimension"
            },
            {
              "type": "text",
              "value": " and "
            },
            {
              "type": "inlineCode",
              "value": "strides"
            },
            {
              "type": "text",
              "value": " as arguments. This means inner loops may no longer modify either "
            },
            {
              "type": "inlineCode",
              "value": "dimension"
            },
            {
              "type": "text",
              "value": " or "
            },
            {
              "type": "inlineCode",
              "value": "strides"
            },
            {
              "type": "text",
              "value": ". This change leads to an "
            },
            {
              "type": "inlineCode",
              "value": "incompatible-pointer-types"
            },
            {
              "type": "text",
              "value": " warning forcing users to either ignore the compiler warnings or to const qualify their own loop signatures."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "("
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "gh-15355"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://github.com/numpy/numpy/pull/15355"
            },
            {
              "type": "text",
              "value": ")"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "Const qualify UFunc inner loops",
      "type": "Section"
    },
    {
      "children": [],
      "level": 1,
      "target": null,
      "title": "New Features",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "This allows the "
            },
            {
              "type": "inlineCode",
              "value": "numpy.ufunc.identity"
            },
            {
              "type": "text",
              "value": " attribute to be set on the resulting ufunc, meaning it can be used for empty and multi-dimensional calls to "
            },
            {
              "type": "inlineCode",
              "value": "numpy.ufunc.reduce"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "("
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "gh-8255"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://github.com/numpy/numpy/pull/8255"
            },
            {
              "type": "text",
              "value": ")"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "``numpy.frompyfunc`` now accepts an identity argument",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "inlineCode",
              "value": "np.str_"
            },
            {
              "type": "text",
              "value": " arrays are always stored as UCS4, so the corresponding scalars now expose this through the buffer interface, meaning "
            },
            {
              "type": "inlineCode",
              "value": "memoryview(np.str_('test'))"
            },
            {
              "type": "text",
              "value": " now works."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "("
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "gh-15385"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://github.com/numpy/numpy/pull/15385"
            },
            {
              "type": "text",
              "value": ")"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "``np.str_`` scalars now support the buffer protocol",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "A new kwarg, "
            },
            {
              "type": "inlineCode",
              "value": "subok"
            },
            {
              "type": "text",
              "value": ", was added to "
            },
            {
              "type": "inlineCode",
              "value": "numpy.copy"
            },
            {
              "type": "text",
              "value": " to allow users to toggle the behavior of "
            },
            {
              "type": "inlineCode",
              "value": "numpy.copy"
            },
            {
              "type": "text",
              "value": " with respect to array subclasses. The default value is "
            },
            {
              "type": "inlineCode",
              "value": "False"
            },
            {
              "type": "text",
              "value": " which is consistent with the behavior of "
            },
            {
              "type": "inlineCode",
              "value": "numpy.copy"
            },
            {
              "type": "text",
              "value": " for previous numpy versions. To create a copy that preserves an array subclass with "
            },
            {
              "type": "inlineCode",
              "value": "numpy.copy"
            },
            {
              "type": "text",
              "value": ", call "
            },
            {
              "type": "inlineCode",
              "value": "np.copy(arr, subok=True)"
            },
            {
              "type": "text",
              "value": ". This addition better documents that the default behavior of "
            },
            {
              "type": "inlineCode",
              "value": "numpy.copy"
            },
            {
              "type": "text",
              "value": " differs from the "
            },
            {
              "type": "inlineCode",
              "value": "numpy.ndarray.copy"
            },
            {
              "type": "text",
              "value": " method which respects array subclasses by default."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "("
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "gh-15685"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://github.com/numpy/numpy/pull/15685"
            },
            {
              "type": "text",
              "value": ")"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "``subok`` option for ``numpy.copy``",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "inlineCode",
              "value": "out"
            },
            {
              "type": "text",
              "value": " can be used to avoid creating unnecessary copies of the final product computed by "
            },
            {
              "type": "inlineCode",
              "value": "numpy.linalg.multidot"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "("
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "gh-15715"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://github.com/numpy/numpy/pull/15715"
            },
            {
              "type": "text",
              "value": ")"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "``numpy.linalg.multi_dot`` now accepts an ``out`` argument",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "The parameter "
            },
            {
              "type": "inlineCode",
              "value": "keepdims"
            },
            {
              "type": "text",
              "value": " was added to "
            },
            {
              "type": "inlineCode",
              "value": "numpy.count_nonzero"
            },
            {
              "type": "text",
              "value": ". The parameter has the same meaning as it does in reduction functions such as "
            },
            {
              "type": "inlineCode",
              "value": "numpy.sum"
            },
            {
              "type": "text",
              "value": " or "
            },
            {
              "type": "inlineCode",
              "value": "numpy.mean"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "("
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "gh-15870"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://github.com/numpy/numpy/pull/15870"
            },
            {
              "type": "text",
              "value": ")"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "``keepdims`` parameter for ``numpy.count_nonzero``",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "The keyword argument "
            },
            {
              "type": "inlineCode",
              "value": "equal_nan"
            },
            {
              "type": "text",
              "value": " was added to "
            },
            {
              "type": "inlineCode",
              "value": "numpy.array_equal"
            },
            {
              "type": "text",
              "value": ". "
            },
            {
              "type": "inlineCode",
              "value": "equal_nan"
            },
            {
              "type": "text",
              "value": " is a boolean value that toggles whether or not "
            },
            {
              "type": "inlineCode",
              "value": "nan"
            },
            {
              "type": "text",
              "value": " values are considered equal in comparison (default is "
            },
            {
              "type": "inlineCode",
              "value": "False"
            },
            {
              "type": "text",
              "value": "). This matches API used in related functions such as "
            },
            {
              "type": "inlineCode",
              "value": "numpy.isclose"
            },
            {
              "type": "text",
              "value": " and "
            },
            {
              "type": "inlineCode",
              "value": "numpy.allclose"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "("
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "gh-16128"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://github.com/numpy/numpy/pull/16128"
            },
            {
              "type": "text",
              "value": ")"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "``equal_nan`` parameter for ``numpy.array_equal``",
      "type": "Section"
    },
    {
      "children": [],
      "level": 1,
      "target": null,
      "title": "Improvements",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Replace "
            },
            {
              "type": "inlineCode",
              "value": "npy_cpu_supports"
            },
            {
              "type": "text",
              "value": " which was a gcc specific mechanism to test support of AVX with more general functions "
            },
            {
              "type": "inlineCode",
              "value": "npy_cpu_init"
            },
            {
              "type": "text",
              "value": " and "
            },
            {
              "type": "inlineCode",
              "value": "npy_cpu_have"
            },
            {
              "type": "text",
              "value": ", and expose the results via a "
            },
            {
              "type": "inlineCode",
              "value": "NPY_CPU_HAVE"
            },
            {
              "type": "text",
              "value": " c-macro as well as a python-level "
            },
            {
              "type": "inlineCode",
              "value": "__cpu_features__"
            },
            {
              "type": "text",
              "value": " dictionary."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "("
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "gh-13421"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://github.com/numpy/numpy/pull/13421"
            },
            {
              "type": "text",
              "value": ")"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 1,
      "target": null,
      "title": "Improve detection of CPU features",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Use 64-bit integer size on 64-bit platforms in the fallback LAPACK library, which is used when the system has no LAPACK installed, allowing it to deal with linear algebra for large arrays."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "("
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "gh-15218"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://github.com/numpy/numpy/pull/15218"
            },
            {
              "type": "text",
              "value": ")"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "Use 64-bit integer size on 64-bit platforms in fallback lapack_lite",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Use AVX512 intrinsic to implement "
            },
            {
              "type": "inlineCode",
              "value": "np.exp"
            },
            {
              "type": "text",
              "value": " when input is "
            },
            {
              "type": "inlineCode",
              "value": "np.float64"
            },
            {
              "type": "text",
              "value": ", which can improve the performance of "
            },
            {
              "type": "inlineCode",
              "value": "np.exp"
            },
            {
              "type": "text",
              "value": " with "
            },
            {
              "type": "inlineCode",
              "value": "np.float64"
            },
            {
              "type": "text",
              "value": " input 5-7x faster than before. The "
            },
            {
              "type": "inlineCode",
              "value": "_multiarray_umath.so"
            },
            {
              "type": "text",
              "value": " module has grown about 63 KB on linux64."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "("
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "gh-15648"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://github.com/numpy/numpy/pull/15648"
            },
            {
              "type": "text",
              "value": ")"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "Use AVX512 intrinsic to implement ``np.exp`` when input is ``np.float64``",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "On Linux NumPy has previously added support for madavise hugepages which can improve performance for very large arrays.  Unfortunately, on older Kernel versions this led to performance regressions, thus by default the support has been disabled on kernels before version 4.6. To override the default, you can use the environment variable      "
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": "NUMPY_MADVISE_HUGEPAGE=0"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "or set it to 1 to force enabling support. Note that this only makes a difference if the operating system is set up to use madvise transparent hugepage."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "("
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "gh-15769"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://github.com/numpy/numpy/pull/15769"
            },
            {
              "type": "text",
              "value": ")"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "Ability to disable madvise hugepages",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "There is no longer a type error thrown when "
            },
            {
              "type": "inlineCode",
              "value": "numpy.einsum"
            },
            {
              "type": "text",
              "value": " is passed a NumPy "
            },
            {
              "type": "inlineCode",
              "value": "int64"
            },
            {
              "type": "text",
              "value": " array as its subscript list."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "("
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "gh-16080"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://github.com/numpy/numpy/pull/16080"
            },
            {
              "type": "text",
              "value": ")"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "``numpy.einsum`` accepts NumPy ``int64`` type in subscript list",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "The ufunc "
            },
            {
              "type": "inlineCode",
              "value": "~numpy.logaddexp2"
            },
            {
              "type": "text",
              "value": " now has an identity of "
            },
            {
              "type": "inlineCode",
              "value": "-inf"
            },
            {
              "type": "text",
              "value": ", allowing it to be called on empty sequences.  This matches the identity of "
            },
            {
              "type": "inlineCode",
              "value": "~numpy.logaddexp"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "("
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "gh-16102"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://github.com/numpy/numpy/pull/16102"
            },
            {
              "type": "text",
              "value": ")"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "``np.logaddexp2.identity`` changed to ``-inf``",
      "type": "Section"
    },
    {
      "children": [],
      "level": 1,
      "target": null,
      "title": "Changes",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "A code path and test have been in the code since NumPy 0.4 for a two-argument variant of "
            },
            {
              "type": "inlineCode",
              "value": "__array__(dtype=None, context=None)"
            },
            {
              "type": "text",
              "value": ". It was activated when calling "
            },
            {
              "type": "inlineCode",
              "value": "ufunc(op)"
            },
            {
              "type": "text",
              "value": " or "
            },
            {
              "type": "inlineCode",
              "value": "ufunc.reduce(op)"
            },
            {
              "type": "text",
              "value": " if "
            },
            {
              "type": "inlineCode",
              "value": "op.__array__"
            },
            {
              "type": "text",
              "value": " existed. However that variant is not documented, and it is not clear what the intention was for its use. It has been removed."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "("
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "gh-15118"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://github.com/numpy/numpy/pull/15118"
            },
            {
              "type": "text",
              "value": ")"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "Remove handling of extra argument to ``__array__``",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "In order to expose "
            },
            {
              "type": "inlineCode",
              "value": "numpy.random.BitGenerator"
            },
            {
              "type": "text",
              "value": " and "
            },
            {
              "type": "inlineCode",
              "value": "numpy.random.SeedSequence"
            },
            {
              "type": "text",
              "value": " to Cython, the "
            },
            {
              "type": "inlineCode",
              "value": "_bitgenerator"
            },
            {
              "type": "text",
              "value": " module is now public as "
            },
            {
              "type": "inlineCode",
              "value": "numpy.random.bit_generator"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "``numpy.random._bit_generator`` moved to ``numpy.random.bit_generator``",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "inlineCode",
              "value": "c_distributions.pxd"
            },
            {
              "type": "text",
              "value": " provides access to the c functions behind many of the random distributions from Cython, making it convenient to use and extend them."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "("
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "gh-15463"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://github.com/numpy/numpy/pull/15463"
            },
            {
              "type": "text",
              "value": ")"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "Cython access to the random distributions is provided via a ``pxd`` file",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Previously, when passing "
            },
            {
              "type": "inlineCode",
              "value": "method='eigh'"
            },
            {
              "type": "text",
              "value": " or "
            },
            {
              "type": "inlineCode",
              "value": "method='cholesky'"
            },
            {
              "type": "text",
              "value": ", "
            },
            {
              "type": "inlineCode",
              "value": "numpy.random.multivariate_normal"
            },
            {
              "type": "text",
              "value": " produced samples from the wrong distribution. This is now fixed."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "("
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "gh-15872"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://github.com/numpy/numpy/pull/15872"
            },
            {
              "type": "text",
              "value": ")"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "Fixed ``eigh`` and ``cholesky`` methods in ``numpy.random.multivariate_normal``",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "This fix changes the stream produced from jumped MT19937 generators. It does not affect the stream produced using "
            },
            {
              "type": "inlineCode",
              "value": "RandomState"
            },
            {
              "type": "text",
              "value": " or "
            },
            {
              "type": "inlineCode",
              "value": "MT19937"
            },
            {
              "type": "text",
              "value": " that are directly seeded."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "The translation of the jumping code for the MT19937 contained a reversed loop ordering. "
            },
            {
              "type": "inlineCode",
              "value": "MT19937.jumped"
            },
            {
              "type": "text",
              "value": " matches the Makoto Matsumoto's original implementation of the Horner and Sliding Window jump methods."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "("
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "gh-16153"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://github.com/numpy/numpy/pull/16153"
            },
            {
              "type": "text",
              "value": ")"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "Fixed the jumping implementation in ``MT19937.jumped``",
      "type": "Section"
    }
  ],
  "content": {},
  "example_section_data": {
    "children": [],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": null,
  "item_line": null,
  "item_type": null,
  "ordered_sections": [],
  "references": null,
  "see_also": [],
  "signature": {
    "type": "Signature",
    "value": null
  },
  "type": "DocBlob"
}