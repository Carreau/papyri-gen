{
  "aliases": [],
  "arbitrary": [
    {
      "children": [
        {
          "args": "numpy",
          "children": [],
          "name": "currentmodule",
          "options": {},
          "type": "mystDirective",
          "value": ""
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "The NumPy 1.23.0 release continues the ongoing work to improve the handling and promotion of dtypes, increase the execution speed, clarify the documentation, and expire old deprecations. The highlights are:"
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Implementation of "
                    },
                    {
                      "type": "inlineCode",
                      "value": "loadtxt"
                    },
                    {
                      "type": "text",
                      "value": " in C, greatly improving its performance."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Exposing DLPack at the Python level for easy data exchange."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Changes to the promotion and comparisons of structured dtypes."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Improvements to f2py."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            }
          ],
          "ordered": false,
          "spread": false,
          "start": 1,
          "type": "list"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "See below for the details,"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": "NumPy 1.23.0 Release Notes",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "A masked array specialization of "
                    },
                    {
                      "type": "inlineCode",
                      "value": "ndenumerate"
                    },
                    {
                      "type": "text",
                      "value": " is now available as   "
                    },
                    {
                      "type": "inlineCode",
                      "value": "numpy.ma.ndenumerate"
                    },
                    {
                      "type": "text",
                      "value": ". It provides an alternative to "
                    },
                    {
                      "type": "inlineCode",
                      "value": "numpy.ndenumerate"
                    },
                    {
                      "type": "text",
                      "value": "   and skips masked values by default."
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "("
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "gh-20020"
                        }
                      ],
                      "title": "",
                      "type": "link",
                      "url": "https://github.com/numpy/numpy/pull/20020"
                    },
                    {
                      "type": "text",
                      "value": ")"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "inlineCode",
                      "value": "numpy.from_dlpack"
                    },
                    {
                      "type": "text",
                      "value": " has been added to allow easy exchange of data using the   DLPack protocol.  It accepts Python objects that implement the "
                    },
                    {
                      "type": "inlineCode",
                      "value": "__dlpack__"
                    },
                    {
                      "type": "text",
                      "value": "   and "
                    },
                    {
                      "type": "inlineCode",
                      "value": "__dlpack_device__"
                    },
                    {
                      "type": "text",
                      "value": " methods and returns a ndarray object which is   generally the view of the data of the input object."
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "("
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "gh-21145"
                        }
                      ],
                      "title": "",
                      "type": "link",
                      "url": "https://github.com/numpy/numpy/pull/21145"
                    },
                    {
                      "type": "text",
                      "value": ")"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            }
          ],
          "ordered": false,
          "spread": false,
          "start": 1,
          "type": "list"
        }
      ],
      "level": 1,
      "target": null,
      "title": "New functions",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Setting "
                    },
                    {
                      "type": "inlineCode",
                      "value": "__array_finalize__"
                    },
                    {
                      "type": "text",
                      "value": " to "
                    },
                    {
                      "type": "inlineCode",
                      "value": "None"
                    },
                    {
                      "type": "text",
                      "value": " is deprecated.  It must now be   a method and may wish to call "
                    },
                    {
                      "type": "inlineCode",
                      "value": "super().__array_finalize__(obj)"
                    },
                    {
                      "type": "text",
                      "value": " after   checking for "
                    },
                    {
                      "type": "inlineCode",
                      "value": "None"
                    },
                    {
                      "type": "text",
                      "value": " or if the NumPy version is sufficiently new."
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "("
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "gh-20766"
                        }
                      ],
                      "title": "",
                      "type": "link",
                      "url": "https://github.com/numpy/numpy/pull/20766"
                    },
                    {
                      "type": "text",
                      "value": ")"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Using "
                    },
                    {
                      "type": "inlineCode",
                      "value": "axis=32"
                    },
                    {
                      "type": "text",
                      "value": " ("
                    },
                    {
                      "type": "inlineCode",
                      "value": "axis=np.MAXDIMS"
                    },
                    {
                      "type": "text",
                      "value": ") in many cases had the   same meaning as "
                    },
                    {
                      "type": "inlineCode",
                      "value": "axis=None"
                    },
                    {
                      "type": "text",
                      "value": ".  This is deprecated and "
                    },
                    {
                      "type": "inlineCode",
                      "value": "axis=None"
                    },
                    {
                      "type": "text",
                      "value": "   must be used instead."
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "("
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "gh-20920"
                        }
                      ],
                      "title": "",
                      "type": "link",
                      "url": "https://github.com/numpy/numpy/pull/20920"
                    },
                    {
                      "type": "text",
                      "value": ")"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The hook function "
                    },
                    {
                      "type": "inlineCode",
                      "value": "PyDataMem_SetEventHook"
                    },
                    {
                      "type": "text",
                      "value": " has been deprecated and the   demonstration of its use in tool/allocation_tracking has been removed.  The   ability to track allocations is now built-in to python via "
                    },
                    {
                      "type": "inlineCode",
                      "value": "tracemalloc"
                    },
                    {
                      "type": "text",
                      "value": "."
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "("
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "gh-20394"
                        }
                      ],
                      "title": "",
                      "type": "link",
                      "url": "https://github.com/numpy/numpy/pull/20394"
                    },
                    {
                      "type": "text",
                      "value": ")"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "inlineCode",
                      "value": "numpy.distutils"
                    },
                    {
                      "type": "text",
                      "value": " has been deprecated, as a result of "
                    },
                    {
                      "type": "inlineCode",
                      "value": "distutils"
                    },
                    {
                      "type": "text",
                      "value": " itself   being deprecated. It will not be present in NumPy for Python >= 3.12, and   will be removed completely 2 years after the release of Python 3.12 For more   details, see "
                    },
                    {
                      "type": "inlineCode",
                      "value": "distutils-status-migration"
                    },
                    {
                      "type": "text",
                      "value": "."
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "("
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "gh-20875"
                        }
                      ],
                      "title": "",
                      "type": "link",
                      "url": "https://github.com/numpy/numpy/pull/20875"
                    },
                    {
                      "type": "text",
                      "value": ")"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "inlineCode",
                      "value": "numpy.loadtxt"
                    },
                    {
                      "type": "text",
                      "value": " will now give a "
                    },
                    {
                      "type": "inlineCode",
                      "value": "DeprecationWarning"
                    },
                    {
                      "type": "text",
                      "value": " when an integer   "
                    },
                    {
                      "type": "inlineCode",
                      "value": "dtype"
                    },
                    {
                      "type": "text",
                      "value": " is requested but the value is formatted as a floating point number."
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "("
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "gh-21663"
                        }
                      ],
                      "title": "",
                      "type": "link",
                      "url": "https://github.com/numpy/numpy/pull/21663"
                    },
                    {
                      "type": "text",
                      "value": ")"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            }
          ],
          "ordered": false,
          "spread": false,
          "start": 1,
          "type": "list"
        }
      ],
      "level": 1,
      "target": null,
      "title": "Deprecations",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The "
                    },
                    {
                      "type": "inlineCode",
                      "value": "NpzFile.iteritems()"
                    },
                    {
                      "type": "text",
                      "value": " and "
                    },
                    {
                      "type": "inlineCode",
                      "value": "NpzFile.iterkeys()"
                    },
                    {
                      "type": "text",
                      "value": " methods have been   removed as part of the continued removal of Python 2 compatibility. This   concludes the deprecation from 1.15."
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "("
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "gh-16830"
                        }
                      ],
                      "title": "",
                      "type": "link",
                      "url": "https://github.com/numpy/numpy/pull/16830"
                    },
                    {
                      "type": "text",
                      "value": ")"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The "
                    },
                    {
                      "type": "inlineCode",
                      "value": "alen"
                    },
                    {
                      "type": "text",
                      "value": " and "
                    },
                    {
                      "type": "inlineCode",
                      "value": "asscalar"
                    },
                    {
                      "type": "text",
                      "value": " functions have been removed."
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "("
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "gh-20414"
                        }
                      ],
                      "title": "",
                      "type": "link",
                      "url": "https://github.com/numpy/numpy/pull/20414"
                    },
                    {
                      "type": "text",
                      "value": ")"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The "
                    },
                    {
                      "type": "inlineCode",
                      "value": "UPDATEIFCOPY"
                    },
                    {
                      "type": "text",
                      "value": " array flag has been removed together with the enum   "
                    },
                    {
                      "type": "inlineCode",
                      "value": "NPY_ARRAY_UPDATEIFCOPY"
                    },
                    {
                      "type": "text",
                      "value": ". The associated (and deprecated)   "
                    },
                    {
                      "type": "inlineCode",
                      "value": "PyArray_XDECREF_ERR"
                    },
                    {
                      "type": "text",
                      "value": " was also removed. These were all deprecated in 1.14. They   are replaced by "
                    },
                    {
                      "type": "inlineCode",
                      "value": "NPY_ARRAY_WRITEBACKIFCOPY"
                    },
                    {
                      "type": "text",
                      "value": ", that requires calling   "
                    },
                    {
                      "type": "inlineCode",
                      "value": "PyArray_ResolveWritebackIfCopy"
                    },
                    {
                      "type": "text",
                      "value": " before the array is deallocated."
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "("
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "gh-20589"
                        }
                      ],
                      "title": "",
                      "type": "link",
                      "url": "https://github.com/numpy/numpy/pull/20589"
                    },
                    {
                      "type": "text",
                      "value": ")"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Exceptions will be raised during array-like creation.  When an object raised   an exception during access of the special attributes "
                    },
                    {
                      "type": "inlineCode",
                      "value": "__array__"
                    },
                    {
                      "type": "text",
                      "value": " or   "
                    },
                    {
                      "type": "inlineCode",
                      "value": "__array_interface__"
                    },
                    {
                      "type": "text",
                      "value": ", this exception was usually ignored.  This behaviour   was deprecated in 1.21, and the exception will now be raised."
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "("
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "gh-20835"
                        }
                      ],
                      "title": "",
                      "type": "link",
                      "url": "https://github.com/numpy/numpy/pull/20835"
                    },
                    {
                      "type": "text",
                      "value": ")"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Multidimensional indexing with non-tuple values is not allowed.  Previously,   code such as "
                    },
                    {
                      "type": "inlineCode",
                      "value": "arr[ind]"
                    },
                    {
                      "type": "text",
                      "value": " where "
                    },
                    {
                      "type": "inlineCode",
                      "value": "ind = [[0, 1], [0, 1]]"
                    },
                    {
                      "type": "text",
                      "value": " produced a   "
                    },
                    {
                      "type": "inlineCode",
                      "value": "FutureWarning"
                    },
                    {
                      "type": "text",
                      "value": " and was interpreted as a multidimensional index (i.e.,   "
                    },
                    {
                      "type": "inlineCode",
                      "value": "arr[tuple(ind)]"
                    },
                    {
                      "type": "text",
                      "value": "). Now this example is treated like an array index over a   single dimension ("
                    },
                    {
                      "type": "inlineCode",
                      "value": "arr[array(ind)]"
                    },
                    {
                      "type": "text",
                      "value": ").  Multidimensional indexing with   anything but a tuple was deprecated in NumPy 1.15."
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "("
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "gh-21029"
                        }
                      ],
                      "title": "",
                      "type": "link",
                      "url": "https://github.com/numpy/numpy/pull/21029"
                    },
                    {
                      "type": "text",
                      "value": ")"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Changing to a dtype of different size in F-contiguous arrays is no longer   permitted. Deprecated since Numpy 1.11.0. See below for an extended   explanation of the effects of this change."
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "("
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "gh-20722"
                        }
                      ],
                      "title": "",
                      "type": "link",
                      "url": "https://github.com/numpy/numpy/pull/20722"
                    },
                    {
                      "type": "text",
                      "value": ")"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            }
          ],
          "ordered": false,
          "spread": false,
          "start": 1,
          "type": "list"
        }
      ],
      "level": 1,
      "target": null,
      "title": "Expired deprecations",
      "type": "Section"
    },
    {
      "children": [],
      "level": 1,
      "target": null,
      "title": "New Features",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "inlineCode",
              "value": "crackfortran"
            },
            {
              "type": "text",
              "value": " parser now understands operator and assignment definitions in a module. They are added in the "
            },
            {
              "type": "inlineCode",
              "value": "body"
            },
            {
              "type": "text",
              "value": " list of the module which contains a new key "
            },
            {
              "type": "inlineCode",
              "value": "implementedby"
            },
            {
              "type": "text",
              "value": " listing the names of the subroutines or functions implementing the operator or assignment."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "("
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "gh-15006"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://github.com/numpy/numpy/pull/15006"
            },
            {
              "type": "text",
              "value": ")"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "crackfortran has support for operator and assignment overloading",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "As a result, one does not need to use "
            },
            {
              "type": "inlineCode",
              "value": "public"
            },
            {
              "type": "text",
              "value": " or "
            },
            {
              "type": "inlineCode",
              "value": "private"
            },
            {
              "type": "text",
              "value": " statements to specify derived type access properties."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "("
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "gh-15844"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://github.com/numpy/numpy/pull/15844"
            },
            {
              "type": "text",
              "value": ")"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "f2py supports reading access type attributes from derived type statements",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "This parameter behaves the same as "
            },
            {
              "type": "inlineCode",
              "value": "ndmin"
            },
            {
              "type": "text",
              "value": " from "
            },
            {
              "type": "inlineCode",
              "value": "numpy.loadtxt"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "("
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "gh-20500"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://github.com/numpy/numpy/pull/20500"
            },
            {
              "type": "text",
              "value": ")"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "New parameter ``ndmin`` added to ``genfromtxt``",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "inlineCode",
              "value": "numpy.loadtxt"
            },
            {
              "type": "text",
              "value": " now supports an additional "
            },
            {
              "type": "inlineCode",
              "value": "quotechar"
            },
            {
              "type": "text",
              "value": " keyword argument which is not set by default.  Using "
            },
            {
              "type": "inlineCode",
              "value": "quotechar='\"'"
            },
            {
              "type": "text",
              "value": " will read quoted fields as used by the Excel CSV dialect."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Further, it is now possible to pass a single callable rather than a dictionary for the "
            },
            {
              "type": "inlineCode",
              "value": "converters"
            },
            {
              "type": "text",
              "value": " argument."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "("
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "gh-20580"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://github.com/numpy/numpy/pull/20580"
            },
            {
              "type": "text",
              "value": ")"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "``np.loadtxt`` now supports quote character and single converter function",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Previously, viewing an array with a dtype of a different item size required that the entire array be C-contiguous. This limitation would unnecessarily force the user to make contiguous copies of non-contiguous arrays before being able to change the dtype."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "This change affects not only "
            },
            {
              "type": "inlineCode",
              "value": "ndarray.view"
            },
            {
              "type": "text",
              "value": ", but other construction mechanisms, including the discouraged direct assignment to "
            },
            {
              "type": "inlineCode",
              "value": "ndarray.dtype"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "This change expires the deprecation regarding the viewing of F-contiguous arrays, described elsewhere in the release notes."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "("
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "gh-20722"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://github.com/numpy/numpy/pull/20722"
            },
            {
              "type": "text",
              "value": ")"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "Changing to dtype of a different size now requires contiguity of only the last axis",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "For F77 inputs, "
            },
            {
              "type": "inlineCode",
              "value": "f2py"
            },
            {
              "type": "text",
              "value": " will generate "
            },
            {
              "type": "inlineCode",
              "value": "modname-f2pywrappers.f"
            },
            {
              "type": "text",
              "value": " unconditionally, though these may be empty.  For free-form inputs, "
            },
            {
              "type": "inlineCode",
              "value": "modname-f2pywrappers.f"
            },
            {
              "type": "text",
              "value": ", "
            },
            {
              "type": "inlineCode",
              "value": "modname-f2pywrappers2.f90"
            },
            {
              "type": "text",
              "value": " will both be generated unconditionally, and may be empty. This allows writing generic output rules in "
            },
            {
              "type": "inlineCode",
              "value": "cmake"
            },
            {
              "type": "text",
              "value": " or "
            },
            {
              "type": "inlineCode",
              "value": "meson"
            },
            {
              "type": "text",
              "value": " and other build systems. Older behavior can be restored by passing "
            },
            {
              "type": "inlineCode",
              "value": "--skip-empty-wrappers"
            },
            {
              "type": "text",
              "value": " to "
            },
            {
              "type": "inlineCode",
              "value": "f2py"
            },
            {
              "type": "text",
              "value": ". "
            },
            {
              "type": "inlineCode",
              "value": "f2py-meson"
            },
            {
              "type": "text",
              "value": " details usage."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "("
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "gh-21187"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://github.com/numpy/numpy/pull/21187"
            },
            {
              "type": "text",
              "value": ")"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "Deterministic output files for F2PY",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "The parameter "
            },
            {
              "type": "inlineCode",
              "value": "keepdims"
            },
            {
              "type": "text",
              "value": " was added to the functions "
            },
            {
              "type": "inlineCode",
              "value": "numpy.average"
            },
            {
              "type": "text",
              "value": " and "
            },
            {
              "type": "inlineCode",
              "value": "numpy.ma.average"
            },
            {
              "type": "text",
              "value": ".  The parameter has the same meaning as it does in reduction functions such as "
            },
            {
              "type": "inlineCode",
              "value": "numpy.sum"
            },
            {
              "type": "text",
              "value": " or "
            },
            {
              "type": "inlineCode",
              "value": "numpy.mean"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "("
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "gh-21485"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://github.com/numpy/numpy/pull/21485"
            },
            {
              "type": "text",
              "value": ")"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "``keepdims`` parameter for ``average``",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "inlineCode",
              "value": "np.unique"
            },
            {
              "type": "text",
              "value": " was changed in 1.21 to treat all "
            },
            {
              "type": "inlineCode",
              "value": "NaN"
            },
            {
              "type": "text",
              "value": " values as equal and return a single "
            },
            {
              "type": "inlineCode",
              "value": "NaN"
            },
            {
              "type": "text",
              "value": ". Setting "
            },
            {
              "type": "inlineCode",
              "value": "equal_nan=False"
            },
            {
              "type": "text",
              "value": " will restore pre-1.21 behavior to treat "
            },
            {
              "type": "inlineCode",
              "value": "NaNs"
            },
            {
              "type": "text",
              "value": " as unique. Defaults to "
            },
            {
              "type": "inlineCode",
              "value": "True"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "("
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "gh-21623"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://github.com/numpy/numpy/pull/21623"
            },
            {
              "type": "text",
              "value": ")"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "New parameter ``equal_nan`` added to ``np.unique``",
      "type": "Section"
    },
    {
      "children": [],
      "level": 1,
      "target": null,
      "title": "Compatibility notes",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Previously, this would promote to "
            },
            {
              "type": "inlineCode",
              "value": "float64"
            },
            {
              "type": "text",
              "value": " when the "
            },
            {
              "type": "inlineCode",
              "value": "ord"
            },
            {
              "type": "text",
              "value": " argument was not one of the explicitly listed values, e.g. "
            },
            {
              "type": "inlineCode",
              "value": "ord=3"
            },
            {
              "type": "text",
              "value": "      "
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": ">>> f32 = np.float32([1, 2])\n>>> np.linalg.norm(f32, 2).dtype\ndtype('float32')\n>>> np.linalg.norm(f32, 3)\ndtype('float64')  # numpy 1.22\ndtype('float32')  # numpy 1.23"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "This change affects only "
            },
            {
              "type": "inlineCode",
              "value": "float32"
            },
            {
              "type": "text",
              "value": " and "
            },
            {
              "type": "inlineCode",
              "value": "float16"
            },
            {
              "type": "text",
              "value": " vectors with "
            },
            {
              "type": "inlineCode",
              "value": "ord"
            },
            {
              "type": "text",
              "value": " other than "
            },
            {
              "type": "inlineCode",
              "value": "-Inf"
            },
            {
              "type": "text",
              "value": ", "
            },
            {
              "type": "inlineCode",
              "value": "0"
            },
            {
              "type": "text",
              "value": ", "
            },
            {
              "type": "inlineCode",
              "value": "1"
            },
            {
              "type": "text",
              "value": ", "
            },
            {
              "type": "inlineCode",
              "value": "2"
            },
            {
              "type": "text",
              "value": ", and "
            },
            {
              "type": "inlineCode",
              "value": "Inf"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "("
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "gh-17709"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://github.com/numpy/numpy/pull/17709"
            },
            {
              "type": "text",
              "value": ")"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "1D ``np.linalg.norm`` preserves float input types, even for scalar results",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "In general, NumPy now defines correct, but slightly limited, promotion for structured dtypes by promoting the subtypes of each field instead of raising an exception      "
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": ">>> np.result_type(np.dtype(\"i,i\"), np.dtype(\"i,d\"))\ndtype([('f0', '<i4'), ('f1', '<f8')])"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "For promotion matching field names, order, and titles are enforced, however padding is ignored. Promotion involving structured dtypes now always ensures native byte-order for all fields (which may change the result of "
            },
            {
              "type": "inlineCode",
              "value": "np.concatenate"
            },
            {
              "type": "text",
              "value": ") and ensures that the result will be \"packed\", i.e. all fields are ordered contiguously and padding is removed. See "
            },
            {
              "type": "inlineCode",
              "value": "structured_dtype_comparison_and_promotion"
            },
            {
              "type": "text",
              "value": " for further details."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "The "
            },
            {
              "type": "inlineCode",
              "value": "repr"
            },
            {
              "type": "text",
              "value": " of aligned structures will now never print the long form including "
            },
            {
              "type": "inlineCode",
              "value": "offsets"
            },
            {
              "type": "text",
              "value": " and "
            },
            {
              "type": "inlineCode",
              "value": "itemsize"
            },
            {
              "type": "text",
              "value": " unless the structure includes padding not guaranteed by "
            },
            {
              "type": "inlineCode",
              "value": "align=True"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "In alignment with the above changes to the promotion logic, the casting safety has been updated:"
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "inlineCode",
                      "value": "\"equiv\""
                    },
                    {
                      "type": "text",
                      "value": " enforces matching names and titles. The itemsize   is allowed to differ due to padding."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "inlineCode",
                      "value": "\"safe\""
                    },
                    {
                      "type": "text",
                      "value": " allows mismatching field names and titles"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The cast safety is limited by the cast safety of each included   field."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The order of fields is used to decide cast safety of each   individual field.  Previously, the field names were used and   only unsafe casts were possible when names mismatched."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            }
          ],
          "ordered": false,
          "spread": false,
          "start": 1,
          "type": "list"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "The main important change here is that name mismatches are now considered \"safe\" casts."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "("
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "gh-19226"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://github.com/numpy/numpy/pull/19226"
            },
            {
              "type": "text",
              "value": ")"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "Changes to structured (void) dtype promotion and comparisons",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "NumPy cannot be compiled with "
            },
            {
              "type": "inlineCode",
              "value": "NPY_RELAXED_STRIDES_CHECKING=0"
            },
            {
              "type": "text",
              "value": " anymore.  Relaxed strides have been the default for many years and the option was initially introduced to allow a smoother transition."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "("
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "gh-20220"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://github.com/numpy/numpy/pull/20220"
            },
            {
              "type": "text",
              "value": ")"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "``NPY_RELAXED_STRIDES_CHECKING`` has been removed",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "The row counting of "
            },
            {
              "type": "inlineCode",
              "value": "numpy.loadtxt"
            },
            {
              "type": "text",
              "value": " was fixed.  "
            },
            {
              "type": "inlineCode",
              "value": "loadtxt"
            },
            {
              "type": "text",
              "value": " ignores fully empty lines in the file, but counted them towards "
            },
            {
              "type": "inlineCode",
              "value": "max_rows"
            },
            {
              "type": "text",
              "value": ". When "
            },
            {
              "type": "inlineCode",
              "value": "max_rows"
            },
            {
              "type": "text",
              "value": " is used and the file contains empty lines, these will now not be counted.  Previously, it was possible that the result contained fewer than "
            },
            {
              "type": "inlineCode",
              "value": "max_rows"
            },
            {
              "type": "text",
              "value": " rows even though more data was available to be read. If the old behaviour is required, "
            },
            {
              "type": "inlineCode",
              "value": "itertools.islice"
            },
            {
              "type": "text",
              "value": " may be used      "
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": "import itertools\nlines = itertools.islice(open(\"file\"), 0, max_rows)\nresult = np.loadtxt(lines, ...)"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "While generally much faster and improved, "
            },
            {
              "type": "inlineCode",
              "value": "numpy.loadtxt"
            },
            {
              "type": "text",
              "value": " may now fail to converter certain strings to numbers that were previously successfully read. The most important cases for this are:"
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Parsing floating point values such as "
                    },
                    {
                      "type": "inlineCode",
                      "value": "1.0"
                    },
                    {
                      "type": "text",
                      "value": " into integers is now deprecated."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Parsing hexadecimal floats such as "
                    },
                    {
                      "type": "inlineCode",
                      "value": "0x3p3"
                    },
                    {
                      "type": "text",
                      "value": " will fail"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "An "
                    },
                    {
                      "type": "inlineCode",
                      "value": "_"
                    },
                    {
                      "type": "text",
                      "value": " was previously accepted as a thousands delimiter "
                    },
                    {
                      "type": "inlineCode",
                      "value": "100_000"
                    },
                    {
                      "type": "text",
                      "value": ".   This will now result in an error."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            }
          ],
          "ordered": false,
          "spread": false,
          "start": 1,
          "type": "list"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "If you experience these limitations, they can all be worked around by passing appropriate "
            },
            {
              "type": "inlineCode",
              "value": "converters="
            },
            {
              "type": "text",
              "value": ".  NumPy now supports passing a single converter to be used for all columns to make this more convenient. For example, "
            },
            {
              "type": "inlineCode",
              "value": "converters=float.fromhex"
            },
            {
              "type": "text",
              "value": " can read hexadecimal float numbers and "
            },
            {
              "type": "inlineCode",
              "value": "converters=int"
            },
            {
              "type": "text",
              "value": " will be able to read "
            },
            {
              "type": "inlineCode",
              "value": "100_000"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Further, the error messages have been generally improved.  However, this means that error types may differ.  In particularly, a "
            },
            {
              "type": "inlineCode",
              "value": "ValueError"
            },
            {
              "type": "text",
              "value": " is now always raised when parsing of a single entry fails."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "("
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "gh-20580"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://github.com/numpy/numpy/pull/20580"
            },
            {
              "type": "text",
              "value": ")"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "``np.loadtxt`` has recieved several changes",
      "type": "Section"
    },
    {
      "children": [],
      "level": 1,
      "target": null,
      "title": "Improvements",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "This means subclasses can now use "
            },
            {
              "type": "inlineCode",
              "value": "super().__array_finalize__(obj)"
            },
            {
              "type": "text",
              "value": " without worrying whether "
            },
            {
              "type": "inlineCode",
              "value": "ndarray"
            },
            {
              "type": "text",
              "value": " is their superclass or not. The actual call remains a no-op."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "("
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "gh-20766"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://github.com/numpy/numpy/pull/20766"
            },
            {
              "type": "text",
              "value": ")"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "``ndarray.__array_finalize__`` is now callable",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "With VSX4/Power10 enablement, the new instructions available in Power ISA 3.1 can be used to accelerate some NumPy operations, e.g., floor_divide, modulo, etc."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "("
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "gh-20821"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://github.com/numpy/numpy/pull/20821"
            },
            {
              "type": "text",
              "value": ")"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "Add support for VSX4/Power10",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "The "
            },
            {
              "type": "inlineCode",
              "value": "numpy.fromiter"
            },
            {
              "type": "text",
              "value": " function now supports object and subarray dtypes. Please see he function documentation for examples."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "("
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "gh-20993"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://github.com/numpy/numpy/pull/20993"
            },
            {
              "type": "text",
              "value": ")"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "``np.fromiter`` now accepts objects and subarrays",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Compiling is preceded by a detection phase to determine whether the underlying libc supports certain math operations. Previously this code did not respect the proper signatures. Fixing this enables compilation for the "
            },
            {
              "type": "inlineCode",
              "value": "wasm-ld"
            },
            {
              "type": "text",
              "value": " backend (compilation for web assembly) and reduces the number of warnings."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "("
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "gh-21154"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://github.com/numpy/numpy/pull/21154"
            },
            {
              "type": "text",
              "value": ")"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "Math C library feature detection now uses correct signatures",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "inlineCode",
              "value": "np.kron"
            },
            {
              "type": "text",
              "value": " maintains subclass information now such as masked arrays while computing the Kronecker product of the inputs"
            }
          ],
          "type": "paragraph"
        },
        {
          "args": "python",
          "children": [],
          "name": "code-block",
          "options": {},
          "type": "mystDirective",
          "value": ">>> x = ma.array([[1, 2], [3, 4]], mask=[[0, 1], [1, 0]])\n>>> np.kron(x,x)\nmasked_array(\n  data=[[1, --, --, --],\n        [--, 4, --, --],\n        [--, --, 4, --],\n        [--, --, --, 16]],\n  mask=[[False,  True,  True,  True],\n        [ True, False,  True,  True],\n        [ True,  True, False,  True],\n        [ True,  True,  True, False]],\n  fill_value=999999)"
        },
        {
          "children": [
            {
              "children": [
                {
                  "type": "text",
                  "value": "warning "
                }
              ],
              "type": "admonitionTitle"
            },
            {
              "children": [
                {
                  "type": "inlineCode",
                  "value": "np.kron"
                },
                {
                  "type": "text",
                  "value": " output now follows "
                },
                {
                  "type": "inlineCode",
                  "value": "ufunc"
                },
                {
                  "type": "text",
                  "value": " ordering ("
                },
                {
                  "type": "inlineCode",
                  "value": "multiply"
                },
                {
                  "type": "text",
                  "value": ") to determine the output class type"
                }
              ],
              "type": "paragraph"
            },
            {
              "args": "python",
              "children": [],
              "name": "code-block",
              "options": {},
              "type": "mystDirective",
              "value": ">>> class myarr(np.ndarray):\n>>>    __array_priority__ = -1\n>>> a = np.ones([2, 2])\n>>> ma = myarray(a.shape, a.dtype, a.data)\n>>> type(np.kron(a, ma)) == np.ndarray\nFalse # Before it was True\n>>> type(np.kron(a, ma)) == myarr\nTrue"
            }
          ],
          "kind": "note",
          "type": "admonition"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "("
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "gh-21262"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://github.com/numpy/numpy/pull/21262"
            },
            {
              "type": "text",
              "value": ")"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "``np.kron`` now maintains subclass information",
      "type": "Section"
    },
    {
      "children": [],
      "level": 1,
      "target": null,
      "title": "Performance improvements and changes",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "inlineCode",
              "value": "numpy.loadtxt"
            },
            {
              "type": "text",
              "value": " is now generally much faster than previously as most of it is now implemented in C."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "("
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "gh-20580"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://github.com/numpy/numpy/pull/20580"
            },
            {
              "type": "text",
              "value": ")"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "Faster ``np.loadtxt``",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Reduction operations like "
            },
            {
              "type": "inlineCode",
              "value": "numpy.sum"
            },
            {
              "type": "text",
              "value": ", "
            },
            {
              "type": "inlineCode",
              "value": "numpy.prod"
            },
            {
              "type": "text",
              "value": ", "
            },
            {
              "type": "inlineCode",
              "value": "numpy.add.reduce"
            },
            {
              "type": "text",
              "value": ", "
            },
            {
              "type": "inlineCode",
              "value": "numpy.logical_and.reduce"
            },
            {
              "type": "text",
              "value": " on contiguous integer-based arrays are now much faster."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "("
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "gh-21001"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://github.com/numpy/numpy/pull/21001"
            },
            {
              "type": "text",
              "value": ")"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "Faster reduction operators",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "inlineCode",
              "value": "numpy.where"
            },
            {
              "type": "text",
              "value": " is now much faster than previously on unpredictable/random input data."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "("
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "gh-21130"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://github.com/numpy/numpy/pull/21130"
            },
            {
              "type": "text",
              "value": ")"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "Faster ``np.where``",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Many operations on NumPy scalars are now significantly faster, although rare operations (e.g. with 0-D arrays rather than scalars) may be slower in some cases. However, even with these improvements users who want the best performance for their scalars, may want to convert a known NumPy scalar into a Python one using "
            },
            {
              "type": "inlineCode",
              "value": "scalar.item()"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "("
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "gh-21188"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://github.com/numpy/numpy/pull/21188"
            },
            {
              "type": "text",
              "value": ")"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "Faster operations on NumPy scalars",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "inlineCode",
              "value": "numpy.kron"
            },
            {
              "type": "text",
              "value": " is about 80% faster as the product is now computed using broadcasting."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "("
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "gh-21354"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://github.com/numpy/numpy/pull/21354"
            },
            {
              "type": "text",
              "value": ")"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "Faster ``np.kron``",
      "type": "Section"
    }
  ],
  "content": {},
  "example_section_data": {
    "children": [],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": null,
  "item_line": null,
  "item_type": null,
  "ordered_sections": [],
  "references": null,
  "see_also": [],
  "signature": {
    "type": "Signature",
    "value": null
  },
  "type": "DocBlob"
}