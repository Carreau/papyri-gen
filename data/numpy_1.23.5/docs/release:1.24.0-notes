{
  "aliases": [],
  "arbitrary": [
    {
      "children": [
        {
          "args": "numpy",
          "children": [],
          "name": "currentmodule",
          "options": {},
          "type": "mystDirective",
          "value": ""
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "The NumPy 1.24.0 release continues the ongoing work to improve the handling and promotion of dtypes, increase the execution speed, and clarify the documentation.  There are also a large number of new and expired deprecations due to changes in promotion and cleanups. This might be called a deprecation release. Highlights are"
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Many new deprecations, check them out."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Many expired deprecations,"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "New F2PY features and fixes."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "New \"dtype\" and \"casting\" keywords for stacking functions."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            }
          ],
          "ordered": false,
          "spread": false,
          "start": 1,
          "type": "list"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "See below for the details,"
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "This release supports Python versions 3.8-3.11."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": "NumPy 1.24 Release Notes",
      "type": "Section"
    },
    {
      "children": [],
      "level": 1,
      "target": null,
      "title": "Deprecations",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "The "
            },
            {
              "type": "inlineCode",
              "value": "numpy.fastCopyAndTranspose"
            },
            {
              "type": "text",
              "value": " function has been deprecated. Use the corresponding copy and transpose methods directly      "
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": "arr.T.copy()"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "The underlying C function "
            },
            {
              "type": "inlineCode",
              "value": "PyArray_CopyAndTranspose"
            },
            {
              "type": "text",
              "value": " has also been deprecated from the NumPy C-API."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "("
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "gh-22313"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://github.com/numpy/numpy/pull/22313"
            },
            {
              "type": "text",
              "value": ")"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "Deprecate fastCopyAndTranspose and PyArray_CopyAndTranspose",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Attempting a conversion from a Python integer to a NumPy value will now always check whether the result can be represented by NumPy.  This means the following examples will fail in the future and give a "
            },
            {
              "type": "inlineCode",
              "value": "DeprecationWarning"
            },
            {
              "type": "text",
              "value": " now      "
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": "np.uint8(-1)\nnp.array([3000], dtype=np.int8)"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Many of these did succeed before.  Such code was mainly useful for unsigned integers with negative values such as "
            },
            {
              "type": "inlineCode",
              "value": "np.uint8(-1)"
            },
            {
              "type": "text",
              "value": " giving "
            },
            {
              "type": "inlineCode",
              "value": "np.iinfo(np.uint8).max"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Note that conversion between NumPy integers is unaffected, so that "
            },
            {
              "type": "inlineCode",
              "value": "np.array(-1).astype(np.uint8)"
            },
            {
              "type": "text",
              "value": " continues to work and use C integer overflow logic.  For negative values, it will also work to view the array: "
            },
            {
              "type": "inlineCode",
              "value": "np.array(-1, dtype=np.int8).view(np.uint8)"
            },
            {
              "type": "text",
              "value": ". In some cases, using "
            },
            {
              "type": "inlineCode",
              "value": "np.iinfo(np.uint8).max"
            },
            {
              "type": "text",
              "value": " or "
            },
            {
              "type": "inlineCode",
              "value": "val % 2**8"
            },
            {
              "type": "text",
              "value": " may also work well."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "In rare cases input data may mix both negative values and very large unsigned values (i.e. "
            },
            {
              "type": "inlineCode",
              "value": "-1"
            },
            {
              "type": "text",
              "value": " and "
            },
            {
              "type": "inlineCode",
              "value": "2**63"
            },
            {
              "type": "text",
              "value": ").  There it is unfortunately necessary to use "
            },
            {
              "type": "inlineCode",
              "value": "%"
            },
            {
              "type": "text",
              "value": " on the Python value or use signed or unsigned conversion depending on whether negative values are expected."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "("
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "gh-22385"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://github.com/numpy/numpy/pull/22385"
            },
            {
              "type": "text",
              "value": ")"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "Conversion of out-of-bound Python integers",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "The "
            },
            {
              "type": "inlineCode",
              "value": "numpy.msort"
            },
            {
              "type": "text",
              "value": " function is deprecated. Use "
            },
            {
              "type": "inlineCode",
              "value": "np.sort(a, axis=0)"
            },
            {
              "type": "text",
              "value": " instead."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "("
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "gh-22456"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://github.com/numpy/numpy/pull/22456"
            },
            {
              "type": "text",
              "value": ")"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "Deprecate ``msort``",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "The scalar type aliases ending in a 0 bit size: "
            },
            {
              "type": "inlineCode",
              "value": "np.object0"
            },
            {
              "type": "text",
              "value": ", "
            },
            {
              "type": "inlineCode",
              "value": "np.str0"
            },
            {
              "type": "text",
              "value": ", "
            },
            {
              "type": "inlineCode",
              "value": "np.bytes0"
            },
            {
              "type": "text",
              "value": ", "
            },
            {
              "type": "inlineCode",
              "value": "np.void0"
            },
            {
              "type": "text",
              "value": ", "
            },
            {
              "type": "inlineCode",
              "value": "np.int0"
            },
            {
              "type": "text",
              "value": ", "
            },
            {
              "type": "inlineCode",
              "value": "np.uint0"
            },
            {
              "type": "text",
              "value": " as well as "
            },
            {
              "type": "inlineCode",
              "value": "np.bool8"
            },
            {
              "type": "text",
              "value": " are now deprecated and will eventually be removed."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "("
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "gh-22607"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://github.com/numpy/numpy/pull/22607"
            },
            {
              "type": "text",
              "value": ")"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "``np.str0`` and similar are now deprecated",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The "
                    },
                    {
                      "type": "inlineCode",
                      "value": "normed"
                    },
                    {
                      "type": "text",
                      "value": " keyword argument has been removed from   "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "np.histogram"
                    },
                    {
                      "type": "text",
                      "value": ", "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "np.histogram2d"
                    },
                    {
                      "type": "text",
                      "value": ", and "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "np.histogramdd"
                    },
                    {
                      "type": "text",
                      "value": ".   Use "
                    },
                    {
                      "type": "inlineCode",
                      "value": "density"
                    },
                    {
                      "type": "text",
                      "value": " instead.  If "
                    },
                    {
                      "type": "inlineCode",
                      "value": "normed"
                    },
                    {
                      "type": "text",
                      "value": " was passed by   position, "
                    },
                    {
                      "type": "inlineCode",
                      "value": "density"
                    },
                    {
                      "type": "text",
                      "value": " is now used."
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "("
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "gh-21645"
                        }
                      ],
                      "title": "",
                      "type": "link",
                      "url": "https://github.com/numpy/numpy/pull/21645"
                    },
                    {
                      "type": "text",
                      "value": ")"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Ragged array creation will now always raise a "
                    },
                    {
                      "type": "inlineCode",
                      "value": "ValueError"
                    },
                    {
                      "type": "text",
                      "value": " unless   "
                    },
                    {
                      "type": "inlineCode",
                      "value": "dtype=object"
                    },
                    {
                      "type": "text",
                      "value": " is passed.  This includes very deeply nested sequences."
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "("
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "gh-22004"
                        }
                      ],
                      "title": "",
                      "type": "link",
                      "url": "https://github.com/numpy/numpy/pull/22004"
                    },
                    {
                      "type": "text",
                      "value": ")"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Support for Visual Studio 2015 and earlier has been removed."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Support for the Windows Interix POSIX interop layer has been removed."
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "("
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "gh-22139"
                        }
                      ],
                      "title": "",
                      "type": "link",
                      "url": "https://github.com/numpy/numpy/pull/22139"
                    },
                    {
                      "type": "text",
                      "value": ")"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Support for Cygwin < 3.3 has been removed."
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "("
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "gh-22159"
                        }
                      ],
                      "title": "",
                      "type": "link",
                      "url": "https://github.com/numpy/numpy/pull/22159"
                    },
                    {
                      "type": "text",
                      "value": ")"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The mini() method of "
                    },
                    {
                      "type": "inlineCode",
                      "value": "np.ma.MaskedArray"
                    },
                    {
                      "type": "text",
                      "value": " has been removed. Use either   "
                    },
                    {
                      "type": "inlineCode",
                      "value": "np.ma.MaskedArray.min()"
                    },
                    {
                      "type": "text",
                      "value": " or "
                    },
                    {
                      "type": "inlineCode",
                      "value": "np.ma.minimum.reduce()"
                    },
                    {
                      "type": "text",
                      "value": "."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The single-argument form of "
                    },
                    {
                      "type": "inlineCode",
                      "value": "np.ma.minimum"
                    },
                    {
                      "type": "text",
                      "value": " and "
                    },
                    {
                      "type": "inlineCode",
                      "value": "np.ma.maximum"
                    },
                    {
                      "type": "text",
                      "value": " has been   removed. Use "
                    },
                    {
                      "type": "inlineCode",
                      "value": "np.ma.minimum.reduce()"
                    },
                    {
                      "type": "text",
                      "value": " or "
                    },
                    {
                      "type": "inlineCode",
                      "value": "np.ma.maximum.reduce()"
                    },
                    {
                      "type": "text",
                      "value": "   instead."
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "("
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "gh-22228"
                        }
                      ],
                      "title": "",
                      "type": "link",
                      "url": "https://github.com/numpy/numpy/pull/22228"
                    },
                    {
                      "type": "text",
                      "value": ")"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Passing dtype instances other than the canonical (mainly native byte-order)   ones to "
                    },
                    {
                      "type": "inlineCode",
                      "value": "dtype="
                    },
                    {
                      "type": "text",
                      "value": " or "
                    },
                    {
                      "type": "inlineCode",
                      "value": "signature="
                    },
                    {
                      "type": "text",
                      "value": " in ufuncs will now raise a   "
                    },
                    {
                      "type": "inlineCode",
                      "value": "TypeError"
                    },
                    {
                      "type": "text",
                      "value": ".  We recommend passing the strings "
                    },
                    {
                      "type": "inlineCode",
                      "value": "\"int8\""
                    },
                    {
                      "type": "text",
                      "value": " or scalar types   "
                    },
                    {
                      "type": "inlineCode",
                      "value": "np.int8"
                    },
                    {
                      "type": "text",
                      "value": " since the byte-order, datetime/timedelta unit, etc. are never   enforced.  (Initially deprecated in NumPy 1.21.)"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "("
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "gh-22540"
                        }
                      ],
                      "title": "",
                      "type": "link",
                      "url": "https://github.com/numpy/numpy/pull/22540"
                    },
                    {
                      "type": "text",
                      "value": ")"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The "
                    },
                    {
                      "type": "inlineCode",
                      "value": "dtype="
                    },
                    {
                      "type": "text",
                      "value": " argument to comparison ufuncs is now applied correctly.  That   means that only "
                    },
                    {
                      "type": "inlineCode",
                      "value": "bool"
                    },
                    {
                      "type": "text",
                      "value": " and "
                    },
                    {
                      "type": "inlineCode",
                      "value": "object"
                    },
                    {
                      "type": "text",
                      "value": " are valid values and "
                    },
                    {
                      "type": "inlineCode",
                      "value": "dtype=object"
                    },
                    {
                      "type": "text",
                      "value": "   is enforced."
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "("
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "gh-22541"
                        }
                      ],
                      "title": "",
                      "type": "link",
                      "url": "https://github.com/numpy/numpy/pull/22541"
                    },
                    {
                      "type": "text",
                      "value": ")"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The deprecation for the aliases "
                    },
                    {
                      "type": "inlineCode",
                      "value": "np.object"
                    },
                    {
                      "type": "text",
                      "value": ", "
                    },
                    {
                      "type": "inlineCode",
                      "value": "np.bool"
                    },
                    {
                      "type": "text",
                      "value": ", "
                    },
                    {
                      "type": "inlineCode",
                      "value": "np.float"
                    },
                    {
                      "type": "text",
                      "value": ",   "
                    },
                    {
                      "type": "inlineCode",
                      "value": "np.complex"
                    },
                    {
                      "type": "text",
                      "value": ", "
                    },
                    {
                      "type": "inlineCode",
                      "value": "np.str"
                    },
                    {
                      "type": "text",
                      "value": ", and "
                    },
                    {
                      "type": "inlineCode",
                      "value": "np.int"
                    },
                    {
                      "type": "text",
                      "value": " is expired (introduces NumPy   1.20).  Some of these will now give a FutureWarning in addition to raising an   error since they will be mapped to the NumPy scalars in the future."
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "("
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "gh-22607"
                        }
                      ],
                      "title": "",
                      "type": "link",
                      "url": "https://github.com/numpy/numpy/pull/22607"
                    },
                    {
                      "type": "text",
                      "value": ")"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            }
          ],
          "ordered": false,
          "spread": false,
          "start": 1,
          "type": "list"
        }
      ],
      "level": 1,
      "target": null,
      "title": "Expired deprecations",
      "type": "Section"
    },
    {
      "children": [],
      "level": 1,
      "target": null,
      "title": "Compatibility notes",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "inlineCode",
              "value": "numpy.ndarray.fill"
            },
            {
              "type": "text",
              "value": " may in some cases behave slightly different now due to the fact that the logic is aligned with item assignment      "
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": "arr = np.array([1])  # with any dtype/value\narr.fill(scalar)\n# is now identical to:\narr[0] = scalar"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Previously casting may have produced slightly different answers when using values that could not be represented in the target "
            },
            {
              "type": "inlineCode",
              "value": "dtype"
            },
            {
              "type": "text",
              "value": " or when the target had "
            },
            {
              "type": "inlineCode",
              "value": "object"
            },
            {
              "type": "text",
              "value": " dtype."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "("
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "gh-20924"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://github.com/numpy/numpy/pull/20924"
            },
            {
              "type": "text",
              "value": ")"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "``array.fill(scalar)`` may behave slightly different",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Casting a dtype that includes a subarray to an object will now ensure a copy of the subarray.  Previously an unsafe view was returned      "
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": "arr = np.ones(3, dtype=[(\"f\", \"i\", 3)])\nsubarray_fields = arr.astype(object)[0]\nsubarray = subarray_fields[0]  # \"f\" field\n\nnp.may_share_memory(subarray, arr)"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Is now always false.  While previously it was true for the specific cast."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "("
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "gh-21925"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://github.com/numpy/numpy/pull/21925"
            },
            {
              "type": "text",
              "value": ")"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "Subarray to object cast now copies",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "When the "
            },
            {
              "type": "inlineCode",
              "value": "dtype"
            },
            {
              "type": "text",
              "value": " keyword argument is used with "
            },
            {
              "type": "inlineCode",
              "value": "np.array()"
            },
            {
              "type": "text",
              "value": " or "
            },
            {
              "type": "inlineCode",
              "value": "asarray()"
            },
            {
              "type": "text",
              "value": ", the dtype of the returned array now always exactly matches the dtype provided by the caller."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "In some cases this change means that a "
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "view"
                }
              ],
              "type": "emphasis"
            },
            {
              "type": "text",
              "value": " rather than the input array is returned.  The following is an example for this on 64bit Linux where "
            },
            {
              "type": "inlineCode",
              "value": "long"
            },
            {
              "type": "text",
              "value": " and "
            },
            {
              "type": "inlineCode",
              "value": "longlong"
            },
            {
              "type": "text",
              "value": " are the same precision but different "
            },
            {
              "type": "inlineCode",
              "value": "dtypes"
            },
            {
              "type": "text",
              "value": "      "
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": ">>> arr = np.array([1, 2, 3], dtype=\"long\")\n>>> new_dtype = np.dtype(\"longlong\")\n>>> new = np.asarray(arr, dtype=new_dtype)\n>>> new.dtype is new_dtype\nTrue\n>>> new is arr\nFalse"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Before the change, the "
            },
            {
              "type": "inlineCode",
              "value": "dtype"
            },
            {
              "type": "text",
              "value": " did not match because "
            },
            {
              "type": "inlineCode",
              "value": "new is arr"
            },
            {
              "type": "text",
              "value": " was "
            },
            {
              "type": "inlineCode",
              "value": "True"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "("
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "gh-21995"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://github.com/numpy/numpy/pull/21995"
            },
            {
              "type": "text",
              "value": ")"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "Returned arrays respect uniqueness of dtype kwarg objects",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "When an array buffer cannot be exported via DLPack a "
            },
            {
              "type": "inlineCode",
              "value": "BufferError"
            },
            {
              "type": "text",
              "value": " is now always raised where previously "
            },
            {
              "type": "inlineCode",
              "value": "TypeError"
            },
            {
              "type": "text",
              "value": " or "
            },
            {
              "type": "inlineCode",
              "value": "RuntimeError"
            },
            {
              "type": "text",
              "value": " was raised. This allows falling back to the buffer protocol or "
            },
            {
              "type": "inlineCode",
              "value": "__array_interface__"
            },
            {
              "type": "text",
              "value": " when DLPack was tried first."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "("
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "gh-22542"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://github.com/numpy/numpy/pull/22542"
            },
            {
              "type": "text",
              "value": ")"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "DLPack export raises ``BufferError``",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Ubuntu 18.04 is deprecated for GitHub actions and GCC-6 is not available on Ubuntu 20.04, so builds using that compiler are no longer tested. We still test builds using GCC-7 and GCC-8."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "("
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "gh-22598"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://github.com/numpy/numpy/pull/22598"
            },
            {
              "type": "text",
              "value": ")"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "NumPy builds are no longer tested on GCC-6",
      "type": "Section"
    },
    {
      "children": [],
      "level": 1,
      "target": null,
      "title": "New Features",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "The polynomial classes in the "
            },
            {
              "type": "inlineCode",
              "value": "numpy.polynomial"
            },
            {
              "type": "text",
              "value": " package have a new "
            },
            {
              "type": "inlineCode",
              "value": "symbol"
            },
            {
              "type": "text",
              "value": " attribute which is used to represent the indeterminate of the polynomial.  This can be used to change the value of the variable when printing      "
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": ">>> P_y = np.polynomial.Polynomial([1, 0, -1], symbol=\"y\")\n>>> print(P_y)\n1.0 + 0.0\u00b7y\u00b9 - 1.0\u00b7y\u00b2"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Note that the polynomial classes only support 1D polynomials, so operations that involve polynomials with different symbols are disallowed when the result would be multivariate      "
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": ">>> P = np.polynomial.Polynomial([1, -1])  # default symbol is \"x\"\n>>> P_z = np.polynomial.Polynomial([1, 1], symbol=\"z\")\n>>> P * P_z\nTraceback (most recent call last)\n   ...\nValueError: Polynomial symbols differ"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "The symbol can be any valid Python identifier. The default is "
            },
            {
              "type": "inlineCode",
              "value": "symbol=x"
            },
            {
              "type": "text",
              "value": ", consistent with existing behavior."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "("
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "gh-16154"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://github.com/numpy/numpy/pull/16154"
            },
            {
              "type": "text",
              "value": ")"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "New attribute ``symbol`` added to polynomial classes",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "F2PY now supports wrapping Fortran functions with:"
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "character (e.g. "
                    },
                    {
                      "type": "inlineCode",
                      "value": "character x"
                    },
                    {
                      "type": "text",
                      "value": ")"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "character array (e.g. "
                    },
                    {
                      "type": "inlineCode",
                      "value": "character, dimension(n) :: x"
                    },
                    {
                      "type": "text",
                      "value": ")"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "character string (e.g. "
                    },
                    {
                      "type": "inlineCode",
                      "value": "character(len=10) x"
                    },
                    {
                      "type": "text",
                      "value": ")"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "and character string array (e.g. "
                    },
                    {
                      "type": "inlineCode",
                      "value": "character(len=10), dimension(n, m) :: x"
                    },
                    {
                      "type": "text",
                      "value": ")"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            }
          ],
          "ordered": false,
          "spread": false,
          "start": 1,
          "type": "list"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "arguments, including passing Python unicode strings as Fortran character string arguments."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "("
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "gh-19388"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://github.com/numpy/numpy/pull/19388"
            },
            {
              "type": "text",
              "value": ")"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "F2PY support for Fortran ``character`` strings",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "A new function "
            },
            {
              "type": "inlineCode",
              "value": "numpy.show_runtime"
            },
            {
              "type": "text",
              "value": " has been added to display the runtime information of the machine in addition to "
            },
            {
              "type": "inlineCode",
              "value": "numpy.show_config"
            },
            {
              "type": "text",
              "value": " which displays the build-related information."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "("
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "gh-21468"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://github.com/numpy/numpy/pull/21468"
            },
            {
              "type": "text",
              "value": ")"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "New function ``np.show_runtime``",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "The "
            },
            {
              "type": "inlineCode",
              "value": "strict"
            },
            {
              "type": "text",
              "value": " option is now available for "
            },
            {
              "type": "inlineCode",
              "value": "testing.assert_array_equal"
            },
            {
              "type": "text",
              "value": ". Setting "
            },
            {
              "type": "inlineCode",
              "value": "strict=True"
            },
            {
              "type": "text",
              "value": " will disable the broadcasting behaviour for scalars and ensure that input arrays have the same data type."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "("
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "gh-21595"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://github.com/numpy/numpy/pull/21595"
            },
            {
              "type": "text",
              "value": ")"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "``strict`` option for ``testing.assert_array_equal``",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "inlineCode",
              "value": "np.unique"
            },
            {
              "type": "text",
              "value": " was changed in 1.21 to treat all "
            },
            {
              "type": "inlineCode",
              "value": "NaN"
            },
            {
              "type": "text",
              "value": " values as equal and return a single "
            },
            {
              "type": "inlineCode",
              "value": "NaN"
            },
            {
              "type": "text",
              "value": ". Setting "
            },
            {
              "type": "inlineCode",
              "value": "equal_nan=False"
            },
            {
              "type": "text",
              "value": " will restore pre-1.21 behavior to treat "
            },
            {
              "type": "inlineCode",
              "value": "NaNs"
            },
            {
              "type": "text",
              "value": " as unique. Defaults to "
            },
            {
              "type": "inlineCode",
              "value": "True"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "("
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "gh-21623"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://github.com/numpy/numpy/pull/21623"
            },
            {
              "type": "text",
              "value": ")"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "New parameter ``equal_nan`` added to ``np.unique``",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "The "
            },
            {
              "type": "inlineCode",
              "value": "casting"
            },
            {
              "type": "text",
              "value": " and "
            },
            {
              "type": "inlineCode",
              "value": "dtype"
            },
            {
              "type": "text",
              "value": " keyword arguments are now available for "
            },
            {
              "type": "inlineCode",
              "value": "numpy.stack"
            },
            {
              "type": "text",
              "value": ".  To use them, write "
            },
            {
              "type": "inlineCode",
              "value": "np.stack(..., dtype=None,\ncasting='same_kind')"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "``casting`` and ``dtype`` keyword arguments for ``numpy.stack``",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "The "
            },
            {
              "type": "inlineCode",
              "value": "casting"
            },
            {
              "type": "text",
              "value": " and "
            },
            {
              "type": "inlineCode",
              "value": "dtype"
            },
            {
              "type": "text",
              "value": " keyword arguments are now available for "
            },
            {
              "type": "inlineCode",
              "value": "numpy.vstack"
            },
            {
              "type": "text",
              "value": ".  To use them, write "
            },
            {
              "type": "inlineCode",
              "value": "np.vstack(..., dtype=None,\ncasting='same_kind')"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "``casting`` and ``dtype`` keyword arguments for ``numpy.vstack``",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "The "
            },
            {
              "type": "inlineCode",
              "value": "casting"
            },
            {
              "type": "text",
              "value": " and "
            },
            {
              "type": "inlineCode",
              "value": "dtype"
            },
            {
              "type": "text",
              "value": " keyword arguments are now available for "
            },
            {
              "type": "inlineCode",
              "value": "numpy.hstack"
            },
            {
              "type": "text",
              "value": ".  To use them, write "
            },
            {
              "type": "inlineCode",
              "value": "np.hstack(..., dtype=None,\ncasting='same_kind')"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "("
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "gh-21627"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://github.com/numpy/numpy/pull/21627"
            },
            {
              "type": "text",
              "value": ")"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "``casting`` and ``dtype`` keyword arguments for ``numpy.hstack``",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "The singleton "
            },
            {
              "type": "inlineCode",
              "value": "RandomState"
            },
            {
              "type": "text",
              "value": " instance exposed in the "
            },
            {
              "type": "inlineCode",
              "value": "numpy.random"
            },
            {
              "type": "text",
              "value": " module is initialized at startup with the "
            },
            {
              "type": "inlineCode",
              "value": "MT19937"
            },
            {
              "type": "text",
              "value": " bit generator. The new function "
            },
            {
              "type": "inlineCode",
              "value": "set_bit_generator"
            },
            {
              "type": "text",
              "value": " allows the default bit generator to be replaced with a user-provided bit generator. This function has been introduced to provide a method allowing seamless integration of a high-quality, modern bit generator in new code with existing code that makes use of the singleton-provided random variate generating functions. The companion function "
            },
            {
              "type": "inlineCode",
              "value": "get_bit_generator"
            },
            {
              "type": "text",
              "value": " returns the current bit generator being used by the singleton "
            },
            {
              "type": "inlineCode",
              "value": "RandomState"
            },
            {
              "type": "text",
              "value": ". This is provided to simplify restoring the original source of randomness if required."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "The preferred method to generate reproducible random numbers is to use a modern bit generator in an instance of "
            },
            {
              "type": "inlineCode",
              "value": "Generator"
            },
            {
              "type": "text",
              "value": ". The function "
            },
            {
              "type": "inlineCode",
              "value": "default_rng"
            },
            {
              "type": "text",
              "value": " simplifies instantiation     "
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": ">>> rg = np.random.default_rng(3728973198)\n>>> rg.random()"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "The same bit generator can then be shared with the singleton instance so that calling functions in the "
            },
            {
              "type": "inlineCode",
              "value": "random"
            },
            {
              "type": "text",
              "value": " module will use the same bit generator     "
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": ">>> orig_bit_gen = np.random.get_bit_generator()\n>>> np.random.set_bit_generator(rg.bit_generator)\n>>> np.random.normal()"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "The swap is permanent (until reversed) and so any call to functions in the "
            },
            {
              "type": "inlineCode",
              "value": "random"
            },
            {
              "type": "text",
              "value": " module will use the new bit generator. The original can be restored if required for code to run correctly     "
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": ">>> np.random.set_bit_generator(orig_bit_gen)"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "("
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "gh-21976"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://github.com/numpy/numpy/pull/21976"
            },
            {
              "type": "text",
              "value": ")"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "The bit generator underlying the singleton RandomState can be changed",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "NumPy now allows constructing structured void scalars directly by passing the "
            },
            {
              "type": "inlineCode",
              "value": "dtype"
            },
            {
              "type": "text",
              "value": " argument to "
            },
            {
              "type": "inlineCode",
              "value": "np.void"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "("
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "gh-22316"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://github.com/numpy/numpy/pull/22316"
            },
            {
              "type": "text",
              "value": ")"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "``np.void`` now has a ``dtype`` argument",
      "type": "Section"
    },
    {
      "children": [],
      "level": 1,
      "target": null,
      "title": "Improvements",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The generated extension modules don't use the deprecated NumPy-C API anymore"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Improved "
                    },
                    {
                      "type": "inlineCode",
                      "value": "f2py"
                    },
                    {
                      "type": "text",
                      "value": " generated exception messages"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Numerous bug and "
                    },
                    {
                      "type": "inlineCode",
                      "value": "flake8"
                    },
                    {
                      "type": "text",
                      "value": " warning fixes"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "various CPP macros that one can use within C-expressions of signature files   are prefixed with "
                    },
                    {
                      "type": "inlineCode",
                      "value": "f2py_"
                    },
                    {
                      "type": "text",
                      "value": ". For example, one should use "
                    },
                    {
                      "type": "inlineCode",
                      "value": "f2py_len(x)"
                    },
                    {
                      "type": "text",
                      "value": "   instead of "
                    },
                    {
                      "type": "inlineCode",
                      "value": "len(x)"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "A new construct "
                    },
                    {
                      "type": "inlineCode",
                      "value": "character(f2py_len=...)"
                    },
                    {
                      "type": "text",
                      "value": " is introduced to support   returning assumed length character strings (e.g. "
                    },
                    {
                      "type": "inlineCode",
                      "value": "character(len=*)"
                    },
                    {
                      "type": "text",
                      "value": ") from   wrapper functions"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            }
          ],
          "ordered": false,
          "spread": false,
          "start": 1,
          "type": "list"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "A hook to support rewriting "
            },
            {
              "type": "inlineCode",
              "value": "f2py"
            },
            {
              "type": "text",
              "value": " internal data structures after reading all its input files is introduced. This is required, for instance, for BC of SciPy support where character arguments are treated as character strings arguments in "
            },
            {
              "type": "inlineCode",
              "value": "C"
            },
            {
              "type": "text",
              "value": " expressions."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "("
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "gh-19388"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://github.com/numpy/numpy/pull/19388"
            },
            {
              "type": "text",
              "value": ")"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "F2PY Improvements",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Added support for SIMD extensions of zSystem (z13, z14, z15), through the universal intrinsics interface. This support leads to performance improvements for all SIMD kernels implemented using the universal intrinsics, including the following operations: rint, floor, trunc, ceil, sqrt, absolute, square, reciprocal, tanh, sin, cos, equal, not_equal, greater, greater_equal, less, less_equal, maximum, minimum, fmax, fmin, argmax, argmin, add, subtract, multiply, divide."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "("
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "gh-20913"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://github.com/numpy/numpy/pull/20913"
            },
            {
              "type": "text",
              "value": ")"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "IBM zSystems Vector Extension Facility (SIMD)",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "In most cases, NumPy previously did not give floating point warnings or errors when these happened during casts.  For examples, casts like      "
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": "np.array([2e300]).astype(np.float32)  # overflow for float32\nnp.array([np.inf]).astype(np.int64)"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Should now generally give floating point warnings.  These warnings should warn that floating point overflow occurred.  For errors when converting floating point values to integers users should expect invalid value warnings."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Users can modify the behavior of these warnings using "
            },
            {
              "type": "inlineCode",
              "value": "np.errstate"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Note that for float to int casts, the exact warnings that are given may be platform dependent.  For example      "
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": "arr = np.full(100, fill_value=1000, dtype=np.float64)\narr.astype(np.int8)"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "May give a result equivalent to (the intermediate cast means no warning is given)      "
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": "arr.astype(np.int64).astype(np.int8)"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "May return an undefined result, with a warning set      "
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": "RuntimeWarning: invalid value encountered in cast"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "The precise behavior is subject to the C99 standard and its implementation in both software and hardware."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "("
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "gh-21437"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://github.com/numpy/numpy/pull/21437"
            },
            {
              "type": "text",
              "value": ")"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "NumPy now gives floating point errors in casts",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "The Fortran standard requires that variables declared with the "
            },
            {
              "type": "inlineCode",
              "value": "value"
            },
            {
              "type": "text",
              "value": " attribute must be passed by value instead of reference. F2PY now supports this use pattern correctly. So "
            },
            {
              "type": "inlineCode",
              "value": "integer, intent(in), value :: x"
            },
            {
              "type": "text",
              "value": " in Fortran codes will have correct wrappers generated."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "("
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "gh-21807"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://github.com/numpy/numpy/pull/21807"
            },
            {
              "type": "text",
              "value": ")"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "F2PY supports the value attribute",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "The pickle format for bit generators was extended to allow each bit generator to supply its own constructor when during pickling. Previous  versions of NumPy only supported unpickling "
            },
            {
              "type": "inlineCode",
              "value": "Generator"
            },
            {
              "type": "text",
              "value": " instances created with one of the core set of bit generators supplied with NumPy. Attempting to unpickle a "
            },
            {
              "type": "inlineCode",
              "value": "Generator"
            },
            {
              "type": "text",
              "value": " that used a third-party bit generators would fail since the constructor used during the unpickling was only aware of the bit generators included in NumPy."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "("
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "gh-22014"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://github.com/numpy/numpy/pull/22014"
            },
            {
              "type": "text",
              "value": ")"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "Added pickle support for third-party BitGenerators",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Previously, the "
            },
            {
              "type": "inlineCode",
              "value": "np.arange(n, dtype=str)"
            },
            {
              "type": "text",
              "value": " function worked for "
            },
            {
              "type": "inlineCode",
              "value": "n=1"
            },
            {
              "type": "text",
              "value": " and "
            },
            {
              "type": "inlineCode",
              "value": "n=2"
            },
            {
              "type": "text",
              "value": ", but would raise a non-specific exception message for other values of "
            },
            {
              "type": "inlineCode",
              "value": "n"
            },
            {
              "type": "text",
              "value": ". Now, it raises a "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "TypeError"
            },
            {
              "type": "text",
              "value": " informing that "
            },
            {
              "type": "inlineCode",
              "value": "arange"
            },
            {
              "type": "text",
              "value": " does not support string dtypes      "
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": ">>> np.arange(2, dtype=str)\nTraceback (most recent call last)\n   ...\nTypeError: arange() not supported for inputs with DType <class 'numpy.dtype[str_]'>."
        },
        {
          "children": [
            {
              "type": "text",
              "value": "("
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "gh-22055"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://github.com/numpy/numpy/pull/22055"
            },
            {
              "type": "text",
              "value": ")"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "arange() now explicitly fails with dtype=str",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "The protocols used in "
            },
            {
              "type": "inlineCode",
              "value": "numpy.typing.ArrayLike"
            },
            {
              "type": "text",
              "value": " and "
            },
            {
              "type": "inlineCode",
              "value": "numpy.typing.DTypeLike"
            },
            {
              "type": "text",
              "value": " are now properly marked as runtime checkable, making them easier to use for runtime type checkers."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "("
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "gh-22357"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://github.com/numpy/numpy/pull/22357"
            },
            {
              "type": "text",
              "value": ")"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "``numpy.typing`` protocols are now runtime checkable",
      "type": "Section"
    },
    {
      "children": [],
      "level": 1,
      "target": null,
      "title": "Performance improvements and changes",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "inlineCode",
              "value": "np.in1d"
            },
            {
              "type": "text",
              "value": " (used by "
            },
            {
              "type": "inlineCode",
              "value": "np.isin"
            },
            {
              "type": "text",
              "value": ") can now switch to a faster algorithm (up to >10x faster) when it is passed two integer arrays.  This is often automatically used, but you can use "
            },
            {
              "type": "inlineCode",
              "value": "kind=\"sort\""
            },
            {
              "type": "text",
              "value": " or "
            },
            {
              "type": "inlineCode",
              "value": "kind=\"table\""
            },
            {
              "type": "text",
              "value": " to force the old or new method, respectively."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "("
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "gh-12065"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://github.com/numpy/numpy/pull/12065"
            },
            {
              "type": "text",
              "value": ")"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "Faster version of ``np.isin`` and ``np.in1d`` for integer arrays",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "The comparison functions ("
            },
            {
              "type": "inlineCode",
              "value": "numpy.equal"
            },
            {
              "type": "text",
              "value": ", "
            },
            {
              "type": "inlineCode",
              "value": "numpy.not_equal"
            },
            {
              "type": "text",
              "value": ", "
            },
            {
              "type": "inlineCode",
              "value": "numpy.less"
            },
            {
              "type": "text",
              "value": ", "
            },
            {
              "type": "inlineCode",
              "value": "numpy.less_equal"
            },
            {
              "type": "text",
              "value": ", "
            },
            {
              "type": "inlineCode",
              "value": "numpy.greater"
            },
            {
              "type": "text",
              "value": " and "
            },
            {
              "type": "inlineCode",
              "value": "numpy.greater_equal"
            },
            {
              "type": "text",
              "value": ") are now much faster as they are now vectorized with universal intrinsics. For a CPU with SIMD extension AVX512BW, the performance gain is up to 2.57x, 1.65x and 19.15x for integer, float and boolean data types, respectively (with N=50000)."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "("
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "gh-21483"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://github.com/numpy/numpy/pull/21483"
            },
            {
              "type": "text",
              "value": ")"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "Faster comparison operators",
      "type": "Section"
    },
    {
      "children": [],
      "level": 1,
      "target": null,
      "title": "Changes",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Integer division overflow of scalars and arrays used to provide a "
            },
            {
              "type": "inlineCode",
              "value": "RuntimeWarning"
            },
            {
              "type": "text",
              "value": " and the return value was undefined leading to crashes at rare occasions      "
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": ">>> np.array([np.iinfo(np.int32).min]*10, dtype=np.int32) // np.int32(-1)\n<stdin>:1: RuntimeWarning: divide by zero encountered in floor_divide\narray([0, 0, 0, 0, 0, 0, 0, 0, 0, 0], dtype=int32)"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Integer division overflow now returns the input dtype's minimum value and raise the following "
            },
            {
              "type": "inlineCode",
              "value": "RuntimeWarning"
            },
            {
              "type": "text",
              "value": "      "
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": ">>> np.array([np.iinfo(np.int32).min]*10, dtype=np.int32) // np.int32(-1)\n<stdin>:1: RuntimeWarning: overflow encountered in floor_divide\narray([-2147483648, -2147483648, -2147483648, -2147483648, -2147483648,\n       -2147483648, -2147483648, -2147483648, -2147483648, -2147483648],\n      dtype=int32)"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "("
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "gh-21506"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://github.com/numpy/numpy/pull/21506"
            },
            {
              "type": "text",
              "value": ")"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "Better reporting of integer division overflow",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "When used with "
            },
            {
              "type": "inlineCode",
              "value": "copy=False"
            },
            {
              "type": "text",
              "value": ", "
            },
            {
              "type": "inlineCode",
              "value": "numpy.ma.masked_invalid"
            },
            {
              "type": "text",
              "value": " now modifies the input masked array in-place.  This makes it behave identically to "
            },
            {
              "type": "inlineCode",
              "value": "masked_where"
            },
            {
              "type": "text",
              "value": " and better matches the documentation."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "("
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "gh-22046"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://github.com/numpy/numpy/pull/22046"
            },
            {
              "type": "text",
              "value": ")"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "``masked_invalid`` now modifies the mask in-place",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "The NumPy iterator available through "
            },
            {
              "type": "inlineCode",
              "value": "np.nditer"
            },
            {
              "type": "text",
              "value": " in Python and as "
            },
            {
              "type": "inlineCode",
              "value": "NpyIter"
            },
            {
              "type": "text",
              "value": " in C now supports allocating all arrays.  The iterator shape defaults to "
            },
            {
              "type": "inlineCode",
              "value": "()"
            },
            {
              "type": "text",
              "value": " in this case.  The operands dtype must be provided, since a \"common dtype\" cannot be inferred from the other inputs."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "("
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "gh-22457"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://github.com/numpy/numpy/pull/22457"
            },
            {
              "type": "text",
              "value": ")"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "``nditer``/``NpyIter`` allows all allocating all operands",
      "type": "Section"
    }
  ],
  "content": {},
  "example_section_data": {
    "children": [],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": null,
  "item_line": null,
  "item_type": null,
  "ordered_sections": [],
  "references": null,
  "see_also": [],
  "signature": {
    "type": "Signature",
    "value": null
  },
  "type": "DocBlob"
}