{
  "aliases": [],
  "arbitrary": [
    {
      "children": [
        {
          "args": ":ref:`Data type objects <arrays.dtypes>`",
          "children": [],
          "name": "seealso",
          "options": {},
          "type": "mystDirective",
          "value": ""
        }
      ],
      "level": 0,
      "target": "basics.types",
      "title": "Data types",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "NumPy supports a much greater variety of numerical types than Python does. This section shows which are available, and how to modify an array's data-type."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "The primitive types supported are tied closely to those in C:"
            }
          ],
          "type": "paragraph"
        },
        {
          "args": "",
          "children": [],
          "name": "list-table",
          "options": {
            "header-rows": "1"
          },
          "type": "mystDirective",
          "value": "* - Numpy type\n  - C type\n  - Description\n\n* - `numpy.bool_`\n  - ``bool``\n  - Boolean (True or False) stored as a byte\n\n* - `numpy.byte`\n  - ``signed char``\n  - Platform-defined\n\n* - `numpy.ubyte`\n  - ``unsigned char``\n  - Platform-defined\n\n* - `numpy.short`\n  - ``short``\n  - Platform-defined\n\n* - `numpy.ushort`\n  - ``unsigned short``\n  - Platform-defined\n\n* - `numpy.intc`\n  - ``int``\n  - Platform-defined\n\n* - `numpy.uintc`\n  - ``unsigned int``\n  - Platform-defined\n\n* - `numpy.int_`\n  - ``long``\n  - Platform-defined\n\n* - `numpy.uint`\n  - ``unsigned long``\n  - Platform-defined\n\n* - `numpy.longlong`\n  - ``long long``\n  - Platform-defined\n\n* - `numpy.ulonglong`\n  - ``unsigned long long``\n  - Platform-defined\n\n* - `numpy.half` / `numpy.float16`\n  -\n  - Half precision float:\n    sign bit, 5 bits exponent, 10 bits mantissa\n\n* - `numpy.single`\n  - ``float``\n  - Platform-defined single precision float:\n    typically sign bit, 8 bits exponent, 23 bits mantissa\n\n* - `numpy.double`\n  - ``double``\n  - Platform-defined double precision float:\n    typically sign bit, 11 bits exponent, 52 bits mantissa.\n\n* - `numpy.longdouble`\n  - ``long double``\n  - Platform-defined extended-precision float\n\n* - `numpy.csingle`\n  - ``float complex``\n  - Complex number, represented by two single-precision floats (real and imaginary components)\n\n* - `numpy.cdouble`\n  - ``double complex``\n  - Complex number, represented by two double-precision floats (real and imaginary components).\n\n* - `numpy.clongdouble`\n  - ``long double complex``\n  - Complex number, represented by two extended-precision floats (real and imaginary components)."
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Since many of these have platform-dependent definitions, a set of fixed-size aliases are provided (See "
            },
            {
              "type": "inlineCode",
              "value": "sized-aliases"
            },
            {
              "type": "text",
              "value": ")."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "NumPy numerical types are instances of "
            },
            {
              "type": "inlineCode",
              "value": "dtype"
            },
            {
              "type": "text",
              "value": " (data-type) objects, each having unique characteristics.  Once you have imported NumPy using "
            },
            {
              "type": "inlineCode",
              "value": ">>> import numpy as np"
            },
            {
              "type": "text",
              "value": " the dtypes are available as "
            },
            {
              "type": "inlineCode",
              "value": "np.bool_"
            },
            {
              "type": "text",
              "value": ", "
            },
            {
              "type": "inlineCode",
              "value": "np.float32"
            },
            {
              "type": "text",
              "value": ", etc."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Advanced types, not listed above, are explored in section "
            },
            {
              "type": "inlineCode",
              "value": "structured_arrays"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "There are 5 basic numerical types representing booleans (bool), integers (int), unsigned integers (uint) floating point (float) and complex. Those with numbers in their name indicate the bitsize of the type (i.e. how many bits are needed to represent a single value in memory).  Some types, such as "
            },
            {
              "type": "inlineCode",
              "value": "int"
            },
            {
              "type": "text",
              "value": " and "
            },
            {
              "type": "inlineCode",
              "value": "intp"
            },
            {
              "type": "text",
              "value": ", have differing bitsizes, dependent on the platforms (e.g. 32-bit vs. 64-bit machines).  This should be taken into account when interfacing with low-level code (such as C or Fortran) where the raw memory is addressed."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Data-types can be used as functions to convert python numbers to array scalars (see the array scalar section for an explanation), python sequences of numbers to arrays of that type, or as arguments to the dtype keyword that many numpy functions or methods accept. Some examples      "
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": ">>> x = np.float32(1.0)\n>>> x\n1.0\n>>> y = np.int_([1,2,4])\n>>> y\narray([1, 2, 4])\n>>> z = np.arange(3, dtype=np.uint8)\n>>> z\narray([0, 1, 2], dtype=uint8)"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Array types can also be referred to by character codes, mostly to retain backward compatibility with older packages such as Numeric.  Some documentation may still refer to these, for example    "
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": ">>> np.array([1, 2, 3], dtype='f')\narray([1.,  2.,  3.], dtype=float32)"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "We recommend using dtype objects instead."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "To convert the type of an array, use the .astype() method (preferred) or the type itself as a function. For example:       "
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": ">>> z.astype(float)                 #doctest: +NORMALIZE_WHITESPACE\narray([0.,  1.,  2.])\n>>> np.int8(z)\narray([0, 1, 2], dtype=int8)"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Note that, above, we use the "
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "Python"
                }
              ],
              "type": "emphasis"
            },
            {
              "type": "text",
              "value": " float object as a dtype.  NumPy knows that "
            },
            {
              "type": "inlineCode",
              "value": "int"
            },
            {
              "type": "text",
              "value": " refers to "
            },
            {
              "type": "inlineCode",
              "value": "np.int_"
            },
            {
              "type": "text",
              "value": ", "
            },
            {
              "type": "inlineCode",
              "value": "bool"
            },
            {
              "type": "text",
              "value": " means "
            },
            {
              "type": "inlineCode",
              "value": "np.bool_"
            },
            {
              "type": "text",
              "value": ", that "
            },
            {
              "type": "inlineCode",
              "value": "float"
            },
            {
              "type": "text",
              "value": " is "
            },
            {
              "type": "inlineCode",
              "value": "np.float_"
            },
            {
              "type": "text",
              "value": " and "
            },
            {
              "type": "inlineCode",
              "value": "complex"
            },
            {
              "type": "text",
              "value": " is "
            },
            {
              "type": "inlineCode",
              "value": "np.complex_"
            },
            {
              "type": "text",
              "value": ". The other data-types do not have Python equivalents."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "To determine the type of an array, look at the dtype attribute      "
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": ">>> z.dtype\ndtype('uint8')"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "dtype objects also contain information about the type, such as its bit-width and its byte-order.  The data type can also be used indirectly to query properties of the type, such as whether it is an integer      "
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": ">>> d = np.dtype(int)\n>>> d #doctest: +SKIP\ndtype('int32')\n\n>>> np.issubdtype(d, np.integer)\nTrue\n\n>>> np.issubdtype(d, np.floating)\nFalse"
        }
      ],
      "level": 1,
      "target": null,
      "title": "Array types and conversions between types",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "NumPy generally returns elements of arrays as array scalars (a scalar with an associated dtype).  Array scalars differ from Python scalars, but for the most part they can be used interchangeably (the primary exception is for versions of Python older than v2.x, where integer array scalars cannot act as indices for lists and tuples).  There are some exceptions, such as when code requires very specific attributes of a scalar or when it checks specifically whether a value is a Python scalar. Generally, problems are easily fixed by explicitly converting array scalars to Python scalars, using the corresponding Python type function (e.g., "
            },
            {
              "type": "inlineCode",
              "value": "int"
            },
            {
              "type": "text",
              "value": ", "
            },
            {
              "type": "inlineCode",
              "value": "float"
            },
            {
              "type": "text",
              "value": ", "
            },
            {
              "type": "inlineCode",
              "value": "complex"
            },
            {
              "type": "text",
              "value": ", "
            },
            {
              "type": "inlineCode",
              "value": "str"
            },
            {
              "type": "text",
              "value": ", "
            },
            {
              "type": "inlineCode",
              "value": "unicode"
            },
            {
              "type": "text",
              "value": ")."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "The primary advantage of using array scalars is that they preserve the array type (Python may not have a matching scalar type available, e.g. "
            },
            {
              "type": "inlineCode",
              "value": "int16"
            },
            {
              "type": "text",
              "value": ").  Therefore, the use of array scalars ensures identical behaviour between arrays and scalars, irrespective of whether the value is inside an array or not.  NumPy scalars also have many of the same methods arrays do."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 1,
      "target": null,
      "title": "Array Scalars",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "The fixed size of NumPy numeric types may cause overflow errors when a value requires more memory than available in the data type. For example,  "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "numpy.power"
            },
            {
              "type": "text",
              "value": " evaluates "
            },
            {
              "type": "inlineCode",
              "value": "100 ** 8"
            },
            {
              "type": "text",
              "value": " correctly for 64-bit integers, but gives 1874919424 (incorrect) for a 32-bit integer."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "code",
              "value": ">>> np.power(100, 8, dtype=np.int64)\n10000000000000000\n>>> np.power(100, 8, dtype=np.int32)\n1874919424"
            }
          ],
          "type": "blockquote"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "The behaviour of NumPy and Python integer types differs significantly for integer overflows and may confuse users expecting NumPy integers to behave similar to Python's "
            },
            {
              "type": "inlineCode",
              "value": "int"
            },
            {
              "type": "text",
              "value": ". Unlike NumPy, the size of Python's "
            },
            {
              "type": "inlineCode",
              "value": "int"
            },
            {
              "type": "text",
              "value": " is flexible. This means Python integers may expand to accommodate any integer and will not overflow."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "NumPy provides "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "module",
              "reference": {
                "kind": "api",
                "module": "numpy:iinfo",
                "path": "numpy:iinfo",
                "type": "RefInfo",
                "version": "*"
              },
              "type": "Link",
              "value": "numpy.iinfo"
            },
            {
              "type": "text",
              "value": " and "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "module",
              "reference": {
                "kind": "api",
                "module": "numpy:finfo",
                "path": "numpy:finfo",
                "type": "RefInfo",
                "version": "*"
              },
              "type": "Link",
              "value": "numpy.finfo"
            },
            {
              "type": "text",
              "value": " to verify the minimum or maximum values of NumPy integer and floating point values respectively       "
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": ">>> np.iinfo(int) # Bounds of the default integer on this system.\niinfo(min=-9223372036854775808, max=9223372036854775807, dtype=int64)\n>>> np.iinfo(np.int32) # Bounds of a 32-bit integer\niinfo(min=-2147483648, max=2147483647, dtype=int32)\n>>> np.iinfo(np.int64) # Bounds of a 64-bit integer\niinfo(min=-9223372036854775808, max=9223372036854775807, dtype=int64)"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "If 64-bit integers are still too small the result may be cast to a floating point number. Floating point numbers offer a larger, but inexact, range of possible values."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "code",
              "value": ">>> np.power(100, 100, dtype=np.int64) # Incorrect even with 64-bit int\n0\n>>> np.power(100, 100, dtype=np.float64)\n1e+200"
            }
          ],
          "type": "blockquote"
        }
      ],
      "level": 1,
      "target": "overflow-errors",
      "title": "Overflow Errors",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Python's floating-point numbers are usually 64-bit floating-point numbers, nearly equivalent to "
            },
            {
              "type": "inlineCode",
              "value": "np.float64"
            },
            {
              "type": "text",
              "value": ". In some unusual situations it may be useful to use floating-point numbers with more precision. Whether this is possible in numpy depends on the hardware and on the development environment: specifically, x86 machines provide hardware floating-point with 80-bit precision, and while most C compilers provide this as their "
            },
            {
              "type": "inlineCode",
              "value": "long double"
            },
            {
              "type": "text",
              "value": " type, MSVC (standard for Windows builds) makes "
            },
            {
              "type": "inlineCode",
              "value": "long double"
            },
            {
              "type": "text",
              "value": " identical to "
            },
            {
              "type": "inlineCode",
              "value": "double"
            },
            {
              "type": "text",
              "value": " (64 bits). NumPy makes the compiler's "
            },
            {
              "type": "inlineCode",
              "value": "long double"
            },
            {
              "type": "text",
              "value": " available as "
            },
            {
              "type": "inlineCode",
              "value": "np.longdouble"
            },
            {
              "type": "text",
              "value": " (and "
            },
            {
              "type": "inlineCode",
              "value": "np.clongdouble"
            },
            {
              "type": "text",
              "value": " for the complex numbers). You can find out what your numpy provides with "
            },
            {
              "type": "inlineCode",
              "value": "np.finfo(np.longdouble)"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "NumPy does not provide a dtype with more precision than C's "
            },
            {
              "type": "inlineCode",
              "value": "long double"
            },
            {
              "type": "text",
              "value": "; in particular, the 128-bit IEEE quad precision data type (FORTRAN's "
            },
            {
              "type": "inlineCode",
              "value": "REAL*16"
            },
            {
              "type": "text",
              "value": ") is not available."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "For efficient memory alignment, "
            },
            {
              "type": "inlineCode",
              "value": "np.longdouble"
            },
            {
              "type": "text",
              "value": " is usually stored padded with zero bits, either to 96 or 128 bits. Which is more efficient depends on hardware and development environment; typically on 32-bit systems they are padded to 96 bits, while on 64-bit systems they are typically padded to 128 bits. "
            },
            {
              "type": "inlineCode",
              "value": "np.longdouble"
            },
            {
              "type": "text",
              "value": " is padded to the system default; "
            },
            {
              "type": "inlineCode",
              "value": "np.float96"
            },
            {
              "type": "text",
              "value": " and "
            },
            {
              "type": "inlineCode",
              "value": "np.float128"
            },
            {
              "type": "text",
              "value": " are provided for users who want specific padding. In spite of the names, "
            },
            {
              "type": "inlineCode",
              "value": "np.float96"
            },
            {
              "type": "text",
              "value": " and "
            },
            {
              "type": "inlineCode",
              "value": "np.float128"
            },
            {
              "type": "text",
              "value": " provide only as much precision as "
            },
            {
              "type": "inlineCode",
              "value": "np.longdouble"
            },
            {
              "type": "text",
              "value": ", that is, 80 bits on most x86 machines and 64 bits in standard Windows builds."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Be warned that even if "
            },
            {
              "type": "inlineCode",
              "value": "np.longdouble"
            },
            {
              "type": "text",
              "value": " offers more precision than python "
            },
            {
              "type": "inlineCode",
              "value": "float"
            },
            {
              "type": "text",
              "value": ", it is easy to lose that extra precision, since python often forces values to pass through "
            },
            {
              "type": "inlineCode",
              "value": "float"
            },
            {
              "type": "text",
              "value": ". For example, the "
            },
            {
              "type": "inlineCode",
              "value": "%"
            },
            {
              "type": "text",
              "value": " formatting operator requires its arguments to be converted to standard python types, and it is therefore impossible to preserve extended precision even if many decimal places are requested. It can be useful to test your code with the value "
            },
            {
              "type": "inlineCode",
              "value": "1 + np.finfo(np.longdouble).eps"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 1,
      "target": null,
      "title": "Extended Precision",
      "type": "Section"
    }
  ],
  "content": {},
  "example_section_data": {
    "children": [],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": null,
  "item_line": null,
  "item_type": null,
  "ordered_sections": [],
  "references": null,
  "see_also": [],
  "signature": {
    "type": "Signature",
    "value": null
  },
  "type": "DocBlob"
}