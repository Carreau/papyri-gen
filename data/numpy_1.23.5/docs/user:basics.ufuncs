{
  "aliases": [],
  "arbitrary": [
    {
      "children": [
        {
          "args": "adapted from \"Guide to NumPy\" by Travis E. Oliphant",
          "children": [],
          "name": "sectionauthor",
          "options": {},
          "type": "mystDirective",
          "value": ""
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    {
      "children": [
        {
          "args": ":ref:`ufuncs`",
          "children": [],
          "name": "seealso",
          "options": {},
          "type": "mystDirective",
          "value": ""
        },
        {
          "type": "mystComment",
          "value": ".. index: ufunc, universal function, arithmetic, operation"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "A universal function (or "
            },
            {
              "type": "inlineCode",
              "value": "ufunc"
            },
            {
              "type": "text",
              "value": " for short) is a function that operates on "
            },
            {
              "type": "inlineCode",
              "value": "ndarrays <numpy.ndarray>"
            },
            {
              "type": "text",
              "value": " in an element-by-element fashion, supporting "
            },
            {
              "type": "inlineCode",
              "value": "array broadcasting <ufuncs.broadcasting>"
            },
            {
              "type": "text",
              "value": ", "
            },
            {
              "type": "inlineCode",
              "value": "type\ncasting <ufuncs.casting>"
            },
            {
              "type": "text",
              "value": ", and several other standard features. That is, a ufunc is a \""
            },
            {
              "type": "inlineCode",
              "value": "vectorized <vectorization>"
            },
            {
              "type": "text",
              "value": "\" wrapper for a function that takes a fixed number of specific inputs and produces a fixed number of specific outputs."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "In NumPy, universal functions are instances of the "
            },
            {
              "type": "inlineCode",
              "value": "numpy.ufunc"
            },
            {
              "type": "text",
              "value": " class. Many of the built-in functions are implemented in compiled C code. The basic ufuncs operate on scalars, but there is also a generalized kind for which the basic elements are sub-arrays (vectors, matrices, etc.), and broadcasting is done over other dimensions. The simplest example is the addition operator      "
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": ">>> np.array([0,2,3,4]) + np.array([1,1,-1,2])\narray([1, 3, 2, 6])"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "One can also produce custom "
            },
            {
              "type": "inlineCode",
              "value": "numpy.ufunc"
            },
            {
              "type": "text",
              "value": " instances using the "
            },
            {
              "type": "inlineCode",
              "value": "numpy.frompyfunc"
            },
            {
              "type": "text",
              "value": " factory function."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": "ufuncs-basics",
      "title": "Universal functions (:class:`.ufunc`) basics",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "All ufuncs have four methods. They can be found at "
            },
            {
              "type": "inlineCode",
              "value": "ufuncs.methods"
            },
            {
              "type": "text",
              "value": ". However, these methods only make sense on scalar ufuncs that take two input arguments and return one output argument. Attempting to call these methods on other ufuncs will cause a "
            },
            {
              "type": "inlineCode",
              "value": "ValueError"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "The reduce-like methods all take an "
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "axis"
                }
              ],
              "type": "emphasis"
            },
            {
              "type": "text",
              "value": " keyword, a "
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "dtype"
                }
              ],
              "type": "emphasis"
            },
            {
              "type": "text",
              "value": " keyword, and an "
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "out"
                }
              ],
              "type": "emphasis"
            },
            {
              "type": "text",
              "value": " keyword, and the arrays must all have dimension >= 1. The "
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "axis"
                }
              ],
              "type": "emphasis"
            },
            {
              "type": "text",
              "value": " keyword specifies the axis of the array over which the reduction will take place (with negative values counting backwards). Generally, it is an integer, though for "
            },
            {
              "type": "inlineCode",
              "value": "numpy.ufunc.reduce"
            },
            {
              "type": "text",
              "value": ", it can also be a tuple of "
            },
            {
              "type": "inlineCode",
              "value": "int"
            },
            {
              "type": "text",
              "value": " to reduce over several axes at once, or "
            },
            {
              "type": "inlineCode",
              "value": "None"
            },
            {
              "type": "text",
              "value": ", to reduce over all axes. For example     "
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": ">>> x = np.arange(9).reshape(3,3)\n>>> x\narray([[0, 1, 2],\n      [3, 4, 5],\n      [6, 7, 8]])\n>>> np.add.reduce(x, 1)\narray([ 3, 12, 21])\n>>> np.add.reduce(x, (0, 1))\n36"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "The "
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "dtype"
                }
              ],
              "type": "emphasis"
            },
            {
              "type": "text",
              "value": " keyword allows you to manage a very common problem that arises when naively using "
            },
            {
              "type": "inlineCode",
              "value": ".ufunc.reduce"
            },
            {
              "type": "text",
              "value": ". Sometimes you may have an array of a certain data type and wish to add up all of its elements, but the result does not fit into the data type of the array. This commonly happens if you have an array of single-byte integers. The "
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "dtype"
                }
              ],
              "type": "emphasis"
            },
            {
              "type": "text",
              "value": " keyword allows you to alter the data type over which the reduction takes place (and therefore the type of the output). Thus, you can ensure that the output is a data type with precision large enough to handle your output. The responsibility of altering the reduce type is mostly up to you. There is one exception: if no "
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "dtype"
                }
              ],
              "type": "emphasis"
            },
            {
              "type": "text",
              "value": " is given for a reduction on the \"add\" or \"multiply\" operations, then if the input type is an integer (or Boolean) data-type and smaller than the size of the "
            },
            {
              "type": "inlineCode",
              "value": "numpy.int_"
            },
            {
              "type": "text",
              "value": " data type, it will be internally upcast to the "
            },
            {
              "type": "inlineCode",
              "value": ".int_"
            },
            {
              "type": "text",
              "value": " (or "
            },
            {
              "type": "inlineCode",
              "value": "numpy.uint"
            },
            {
              "type": "text",
              "value": ") data-type. In the previous example     "
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": ">>> x.dtype \ndtype('int64')\n>>> np.multiply.reduce(x, dtype=float)\narray([ 0., 28., 80.])"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Finally, the "
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "out"
                }
              ],
              "type": "emphasis"
            },
            {
              "type": "text",
              "value": " keyword allows you to provide an output array (for single-output ufuncs, which are currently the only ones supported; for future extension, however, a tuple with a single argument can be passed in). If "
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "out"
                }
              ],
              "type": "emphasis"
            },
            {
              "type": "text",
              "value": " is given, the "
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "dtype"
                }
              ],
              "type": "emphasis"
            },
            {
              "type": "text",
              "value": " argument is ignored. Considering "
            },
            {
              "type": "inlineCode",
              "value": "x"
            },
            {
              "type": "text",
              "value": " from the previous example     "
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": ">>> y = np.zeros(3, dtype=int)\n>>> y\narray([0, 0, 0])\n>>> np.multiply.reduce(x, dtype=float, out=y)\narray([ 0, 28, 80])"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Ufuncs also have a fifth method, "
            },
            {
              "type": "inlineCode",
              "value": "numpy.ufunc.at"
            },
            {
              "type": "text",
              "value": ", that allows in place operations to be performed using advanced indexing. No "
            },
            {
              "type": "inlineCode",
              "value": "buffering <use-of-internal-buffers>"
            },
            {
              "type": "text",
              "value": " is used on the dimensions where advanced indexing is used, so the advanced index can list an item more than once and the operation will be performed on the result of the previous operation for that item."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 1,
      "target": null,
      "title": "Ufunc methods",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "The output of the ufunc (and its methods) is not necessarily an "
            },
            {
              "type": "inlineCode",
              "value": "ndarray <numpy.ndarray>"
            },
            {
              "type": "text",
              "value": ", if all input arguments are not "
            },
            {
              "type": "inlineCode",
              "value": "ndarrays <numpy.ndarray>"
            },
            {
              "type": "text",
              "value": ". Indeed, if any input defines an "
            },
            {
              "type": "inlineCode",
              "value": "~.class.__array_ufunc__"
            },
            {
              "type": "text",
              "value": " method, control will be passed completely to that function, i.e., the ufunc is "
            },
            {
              "type": "inlineCode",
              "value": "overridden <ufuncs.overrides>"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "If none of the inputs overrides the ufunc, then all output arrays will be passed to the "
            },
            {
              "type": "inlineCode",
              "value": "~.class.__array_prepare__"
            },
            {
              "type": "text",
              "value": " and "
            },
            {
              "type": "inlineCode",
              "value": "~.class.__array_wrap__"
            },
            {
              "type": "text",
              "value": " methods of the input (besides "
            },
            {
              "type": "inlineCode",
              "value": "ndarrays <.ndarray>"
            },
            {
              "type": "text",
              "value": ", and scalars) that defines it "
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "and"
                }
              ],
              "type": "strong"
            },
            {
              "type": "text",
              "value": " has the highest "
            },
            {
              "type": "inlineCode",
              "value": "~.class.__array_priority__"
            },
            {
              "type": "text",
              "value": " of any other input to the universal function. The default "
            },
            {
              "type": "inlineCode",
              "value": "~.class.__array_priority__"
            },
            {
              "type": "text",
              "value": " of the ndarray is 0.0, and the default "
            },
            {
              "type": "inlineCode",
              "value": "~.class.__array_priority__"
            },
            {
              "type": "text",
              "value": " of a subtype is 0.0. Matrices have "
            },
            {
              "type": "inlineCode",
              "value": "~.class.__array_priority__"
            },
            {
              "type": "text",
              "value": " equal to 10.0."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "All ufuncs can also take output arguments. If necessary, output will be cast to the data-type(s) of the provided output array(s). If a class with an "
            },
            {
              "type": "inlineCode",
              "value": "~.class.__array__"
            },
            {
              "type": "text",
              "value": " method is used for the output, results will be written to the object returned by "
            },
            {
              "type": "inlineCode",
              "value": "~.class.__array__"
            },
            {
              "type": "text",
              "value": ". Then, if the class also has an "
            },
            {
              "type": "inlineCode",
              "value": "~.class.__array_prepare__"
            },
            {
              "type": "text",
              "value": " method, it is called so metadata may be determined based on the context of the ufunc (the context consisting of the ufunc itself, the arguments passed to the ufunc, and the ufunc domain.) The array object returned by "
            },
            {
              "type": "inlineCode",
              "value": "~.class.__array_prepare__"
            },
            {
              "type": "text",
              "value": " is passed to the ufunc for computation. Finally, if the class also has an "
            },
            {
              "type": "inlineCode",
              "value": "~.class.__array_wrap__"
            },
            {
              "type": "text",
              "value": " method, the returned "
            },
            {
              "type": "inlineCode",
              "value": ".ndarray"
            },
            {
              "type": "text",
              "value": " result will be passed to that method just before passing control back to the caller."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 1,
      "target": "ufuncs-output-type",
      "title": "Output type determination",
      "type": "Section"
    },
    {
      "children": [
        {
          "args": ":doc:`Broadcasting basics <basics.broadcasting>`",
          "children": [],
          "name": "seealso",
          "options": {},
          "type": "mystDirective",
          "value": ""
        },
        {
          "args": "broadcasting",
          "children": [],
          "name": "index",
          "options": {},
          "type": "mystDirective",
          "value": ""
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Each universal function takes array inputs and produces array outputs by performing the core function element-wise on the inputs (where an element is generally a scalar, but can be a vector or higher-order sub-array for generalized ufuncs). Standard "
            },
            {
              "type": "inlineCode",
              "value": "broadcasting rules <general-broadcasting-rules>"
            },
            {
              "type": "text",
              "value": " are applied so that inputs not sharing exactly the same shapes can still be usefully operated on."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "By these rules, if an input has a dimension size of 1 in its shape, the first data entry in that dimension will be used for all calculations along that dimension. In other words, the stepping machinery of the "
            },
            {
              "type": "inlineCode",
              "value": "ufunc"
            },
            {
              "type": "text",
              "value": " will simply not step along that dimension (the "
            },
            {
              "type": "inlineCode",
              "value": "stride <memory-layout>"
            },
            {
              "type": "text",
              "value": " will be 0 for that dimension)."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 1,
      "target": "ufuncs.broadcasting",
      "title": "Broadcasting",
      "type": "Section"
    },
    {
      "children": [
        {
          "args": "",
          "children": [],
          "name": "index",
          "options": {},
          "type": "mystDirective",
          "value": "pair: ufunc; casting rules"
        },
        {
          "children": [
            {
              "children": [
                {
                  "type": "text",
                  "value": "note "
                }
              ],
              "type": "admonitionTitle"
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "In NumPy 1.6.0, a type promotion API was created to encapsulate the mechanism for determining output types. See the functions "
                },
                {
                  "domain": null,
                  "role": "func",
                  "type": "Directive",
                  "value": "numpy.result_type"
                },
                {
                  "type": "text",
                  "value": ", "
                },
                {
                  "domain": null,
                  "role": "func",
                  "type": "Directive",
                  "value": "numpy.promote_types"
                },
                {
                  "type": "text",
                  "value": ", and "
                },
                {
                  "domain": null,
                  "role": "func",
                  "type": "Directive",
                  "value": "numpy.min_scalar_type"
                },
                {
                  "type": "text",
                  "value": " for more details."
                }
              ],
              "type": "paragraph"
            }
          ],
          "kind": "note",
          "type": "admonition"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "At the core of every ufunc is a one-dimensional strided loop that implements the actual function for a specific type combination. When a ufunc is created, it is given a static list of inner loops and a corresponding list of type signatures over which the ufunc operates. The ufunc machinery uses this list to determine which inner loop to use for a particular case. You can inspect the "
            },
            {
              "type": "inlineCode",
              "value": ".types\n<.ufunc.types>"
            },
            {
              "type": "text",
              "value": " attribute for a particular ufunc to see which type combinations have a defined inner loop and which output type they produce ("
            },
            {
              "type": "inlineCode",
              "value": "character codes <arrays.scalars.character-codes>"
            },
            {
              "type": "text",
              "value": " are used in said output for brevity)."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Casting must be done on one or more of the inputs whenever the ufunc does not have a core loop implementation for the input types provided. If an implementation for the input types cannot be found, then the algorithm searches for an implementation with a type signature to which all of the inputs can be cast \"safely.\" The first one it finds in its internal list of loops is selected and performed, after all necessary type casting. Recall that internal copies during ufuncs (even for casting) are limited to the size of an internal buffer (which is user settable)."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "children": [
                {
                  "type": "text",
                  "value": "note "
                }
              ],
              "type": "admonitionTitle"
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "Universal functions in NumPy are flexible enough to have mixed type signatures. Thus, for example, a universal function could be defined that works with floating-point and integer values. See "
                },
                {
                  "domain": null,
                  "role": "func",
                  "type": "Directive",
                  "value": "numpy.ldexp"
                },
                {
                  "type": "text",
                  "value": " for an example."
                }
              ],
              "type": "paragraph"
            }
          ],
          "kind": "note",
          "type": "admonition"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "By the above description, the casting rules are essentially implemented by the question of when a data type can be cast \"safely\" to another data type. The answer to this question can be determined in Python with a function call: "
            },
            {
              "type": "inlineCode",
              "value": "can_cast(fromtype, totype)\n<numpy.can_cast>"
            },
            {
              "type": "text",
              "value": ". The example below shows the results of this call for the 24 internally supported types on the author's 64-bit system. You can generate this table for your system with the code given in the example."
            }
          ],
          "type": "paragraph"
        },
        {
          "args": "Example",
          "children": [],
          "name": "rubric",
          "options": {},
          "type": "mystDirective",
          "value": ""
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Code segment showing the \"can cast safely\" table for a 64-bit system. Generally the output depends on the system; your system might result in a different table."
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": ">>> mark = {False: ' -', True: ' Y'}\n>>> def print_table(ntypes):\n...     print('X ' + ' '.join(ntypes))\n...     for row in ntypes:\n...         print(row, end='')\n...         for col in ntypes:\n...             print(mark[np.can_cast(row, col)], end='')\n...         print()\n...\n>>> print_table(np.typecodes['All'])\nX ? b h i l q p B H I L Q P e f d g F D G S U V O M m\n? Y Y Y Y Y Y Y Y Y Y Y Y Y Y Y Y Y Y Y Y Y Y Y Y - Y\nb - Y Y Y Y Y Y - - - - - - Y Y Y Y Y Y Y Y Y Y Y - Y\nh - - Y Y Y Y Y - - - - - - - Y Y Y Y Y Y Y Y Y Y - Y\ni - - - Y Y Y Y - - - - - - - - Y Y - Y Y Y Y Y Y - Y\nl - - - - Y Y Y - - - - - - - - Y Y - Y Y Y Y Y Y - Y\nq - - - - Y Y Y - - - - - - - - Y Y - Y Y Y Y Y Y - Y\np - - - - Y Y Y - - - - - - - - Y Y - Y Y Y Y Y Y - Y\nB - - Y Y Y Y Y Y Y Y Y Y Y Y Y Y Y Y Y Y Y Y Y Y - Y\nH - - - Y Y Y Y - Y Y Y Y Y - Y Y Y Y Y Y Y Y Y Y - Y\nI - - - - Y Y Y - - Y Y Y Y - - Y Y - Y Y Y Y Y Y - Y\nL - - - - - - - - - - Y Y Y - - Y Y - Y Y Y Y Y Y - -\nQ - - - - - - - - - - Y Y Y - - Y Y - Y Y Y Y Y Y - -\nP - - - - - - - - - - Y Y Y - - Y Y - Y Y Y Y Y Y - -\ne - - - - - - - - - - - - - Y Y Y Y Y Y Y Y Y Y Y - -\nf - - - - - - - - - - - - - - Y Y Y Y Y Y Y Y Y Y - -\nd - - - - - - - - - - - - - - - Y Y - Y Y Y Y Y Y - -\ng - - - - - - - - - - - - - - - - Y - - Y Y Y Y Y - -\nF - - - - - - - - - - - - - - - - - Y Y Y Y Y Y Y - -\nD - - - - - - - - - - - - - - - - - - Y Y Y Y Y Y - -\nG - - - - - - - - - - - - - - - - - - - Y Y Y Y Y - -\nS - - - - - - - - - - - - - - - - - - - - Y Y Y Y - -\nU - - - - - - - - - - - - - - - - - - - - - Y Y Y - -\nV - - - - - - - - - - - - - - - - - - - - - - Y Y - -\nO - - - - - - - - - - - - - - - - - - - - - - - Y - -\nM - - - - - - - - - - - - - - - - - - - - - - Y Y Y -\nm - - - - - - - - - - - - - - - - - - - - - - Y Y - Y"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "You should note that, while included in the table for completeness, the 'S', 'U', and 'V' types cannot be operated on by ufuncs. Also, note that on a 32-bit system the integer types may have different sizes, resulting in a slightly altered table."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Mixed scalar-array operations use a different set of casting rules that ensure that a scalar cannot \"upcast\" an array unless the scalar is of a fundamentally different kind of data (i.e., under a different hierarchy in the data-type hierarchy) than the array.  This rule enables you to use scalar constants in your code (which, as Python types, are interpreted accordingly in ufuncs) without worrying about whether the precision of the scalar constant will cause upcasting on your large (small precision) array."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 1,
      "target": "ufuncs.casting",
      "title": "Type casting rules",
      "type": "Section"
    },
    {
      "children": [
        {
          "args": "buffers",
          "children": [],
          "name": "index",
          "options": {},
          "type": "mystDirective",
          "value": ""
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Internally, buffers are used for misaligned data, swapped data, and data that has to be converted from one data type to another. The size of internal buffers is settable on a per-thread basis. There can be up to "
            },
            {
              "type": "inlineMath",
              "value": "2 (n_{\\mathrm{inputs}} + n_{\\mathrm{outputs}})"
            },
            {
              "type": "text",
              "value": " buffers of the specified size created to handle the data from all the inputs and outputs of a ufunc. The default size of a buffer is 10,000 elements. Whenever buffer-based calculation would be needed, but all input arrays are smaller than the buffer size, those misbehaved or incorrectly-typed arrays will be copied before the calculation proceeds. Adjusting the size of the buffer may therefore alter the speed at which ufunc calculations of various sorts are completed. A simple interface for setting this variable is accessible using the function "
            },
            {
              "type": "inlineCode",
              "value": "numpy.setbufsize"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 1,
      "target": "use-of-internal-buffers",
      "title": "Use of internal buffers",
      "type": "Section"
    },
    {
      "children": [
        {
          "args": "error handling",
          "children": [],
          "name": "index",
          "options": {},
          "type": "mystDirective",
          "value": ""
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Universal functions can trip special floating-point status registers in your hardware (such as divide-by-zero). If available on your platform, these registers will be regularly checked during calculation. Error handling is controlled on a per-thread basis, and can be configured using the functions "
            },
            {
              "type": "inlineCode",
              "value": "numpy.seterr"
            },
            {
              "type": "text",
              "value": " and "
            },
            {
              "type": "inlineCode",
              "value": "numpy.seterrcall"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 1,
      "target": null,
      "title": "Error handling",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Classes (including ndarray subclasses) can override how ufuncs act on them by defining certain special methods.  For details, see "
            },
            {
              "type": "inlineCode",
              "value": "arrays.classes"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 1,
      "target": "ufuncs.overrides",
      "title": "Overriding ufunc behavior",
      "type": "Section"
    }
  ],
  "content": {},
  "example_section_data": {
    "children": [],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": null,
  "item_line": null,
  "item_type": null,
  "ordered_sections": [],
  "references": null,
  "see_also": [],
  "signature": {
    "type": "Signature",
    "value": null
  },
  "type": "DocBlob"
}