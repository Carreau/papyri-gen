{
  "aliases": [],
  "arbitrary": [
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "There are a few NumPy functions that are similar in application, but which provide slightly different results, which may cause confusion if one is not sure when and how to use them. The following guide aims to list these functions and describe their recommended usage."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "The functions mentioned here are"
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "children": [
                {
                  "children": [
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "module",
                      "reference": {
                        "kind": "api",
                        "module": "numpy:linspace",
                        "path": "numpy:linspace",
                        "type": "RefInfo",
                        "version": "*"
                      },
                      "type": "Link",
                      "value": "numpy.linspace"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "module",
                      "reference": {
                        "kind": "api",
                        "module": "numpy:arange",
                        "path": "numpy:arange",
                        "type": "RefInfo",
                        "version": "*"
                      },
                      "type": "Link",
                      "value": "numpy.arange"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "module",
                      "reference": {
                        "kind": "api",
                        "module": "numpy:geomspace",
                        "path": "numpy:geomspace",
                        "type": "RefInfo",
                        "version": "*"
                      },
                      "type": "Link",
                      "value": "numpy.geomspace"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "module",
                      "reference": {
                        "kind": "api",
                        "module": "numpy:logspace",
                        "path": "numpy:logspace",
                        "type": "RefInfo",
                        "version": "*"
                      },
                      "type": "Link",
                      "value": "numpy.logspace"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "module",
                      "reference": {
                        "kind": "api",
                        "module": "numpy:meshgrid",
                        "path": "numpy:meshgrid",
                        "type": "RefInfo",
                        "version": "*"
                      },
                      "type": "Link",
                      "value": "numpy.meshgrid"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "numpy.mgrid"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "numpy.ogrid"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            }
          ],
          "ordered": false,
          "spread": false,
          "start": 1,
          "type": "list"
        }
      ],
      "level": 0,
      "target": "how-to-partition",
      "title": "How to create arrays with regularly-spaced values",
      "type": "Section"
    },
    {
      "children": [],
      "level": 1,
      "target": null,
      "title": "1D domains (intervals)",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Both "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "module",
              "reference": {
                "kind": "api",
                "module": "numpy:linspace",
                "path": "numpy:linspace",
                "type": "RefInfo",
                "version": "*"
              },
              "type": "Link",
              "value": "numpy.linspace"
            },
            {
              "type": "text",
              "value": " and "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "module",
              "reference": {
                "kind": "api",
                "module": "numpy:arange",
                "path": "numpy:arange",
                "type": "RefInfo",
                "version": "*"
              },
              "type": "Link",
              "value": "numpy.arange"
            },
            {
              "type": "text",
              "value": " provide ways to partition an interval (a 1D domain) into equal-length subintervals. These partitions will vary depending on the chosen starting and ending points, and the "
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "step"
                }
              ],
              "type": "strong"
            },
            {
              "type": "text",
              "value": " (the length  of the subintervals)."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "children": [
                {
                  "children": [
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "Use"
                        }
                      ],
                      "type": "strong"
                    },
                    {
                      "type": "text",
                      "value": " "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "module",
                      "reference": {
                        "kind": "api",
                        "module": "numpy:arange",
                        "path": "numpy:arange",
                        "type": "RefInfo",
                        "version": "*"
                      },
                      "type": "Link",
                      "value": "numpy.arange"
                    },
                    {
                      "type": "text",
                      "value": " "
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "if you want integer steps."
                        }
                      ],
                      "type": "strong"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "module",
                      "reference": {
                        "kind": "api",
                        "module": "numpy:arange",
                        "path": "numpy:arange",
                        "type": "RefInfo",
                        "version": "*"
                      },
                      "type": "Link",
                      "value": "numpy.arange"
                    },
                    {
                      "type": "text",
                      "value": " relies on step size to determine how many elements are in the   returned array, which excludes the endpoint. This is determined through the   "
                    },
                    {
                      "type": "inlineCode",
                      "value": "step"
                    },
                    {
                      "type": "text",
                      "value": " argument to "
                    },
                    {
                      "type": "inlineCode",
                      "value": "arange"
                    },
                    {
                      "type": "text",
                      "value": "."
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Example      "
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "type": "code",
                  "value": ">>> np.arange(0, 10, 2)  # np.arange(start, stop, step)\narray([0, 2, 4, 6, 8])"
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The arguments "
                    },
                    {
                      "type": "inlineCode",
                      "value": "start"
                    },
                    {
                      "type": "text",
                      "value": " and "
                    },
                    {
                      "type": "inlineCode",
                      "value": "stop"
                    },
                    {
                      "type": "text",
                      "value": " should be integer or real, but not   complex numbers. "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "module",
                      "reference": {
                        "kind": "api",
                        "module": "numpy:arange",
                        "path": "numpy:arange",
                        "type": "RefInfo",
                        "version": "*"
                      },
                      "type": "Link",
                      "value": "numpy.arange"
                    },
                    {
                      "type": "text",
                      "value": " is similar to the Python built-in   "
                    },
                    {
                      "type": "inlineCode",
                      "value": "range"
                    },
                    {
                      "type": "text",
                      "value": "."
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Floating-point inaccuracies can make "
                    },
                    {
                      "type": "inlineCode",
                      "value": "arange"
                    },
                    {
                      "type": "text",
                      "value": " results with floating-point   numbers confusing. In this case, you should use "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "module",
                      "reference": {
                        "kind": "api",
                        "module": "numpy:linspace",
                        "path": "numpy:linspace",
                        "type": "RefInfo",
                        "version": "*"
                      },
                      "type": "Link",
                      "value": "numpy.linspace"
                    },
                    {
                      "type": "text",
                      "value": " instead."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "Use"
                        }
                      ],
                      "type": "strong"
                    },
                    {
                      "type": "text",
                      "value": " "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "module",
                      "reference": {
                        "kind": "api",
                        "module": "numpy:linspace",
                        "path": "numpy:linspace",
                        "type": "RefInfo",
                        "version": "*"
                      },
                      "type": "Link",
                      "value": "numpy.linspace"
                    },
                    {
                      "type": "text",
                      "value": " "
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "if you want the endpoint to be included in the\n  result, or if you are using a non-integer step size."
                        }
                      ],
                      "type": "strong"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "module",
                      "reference": {
                        "kind": "api",
                        "module": "numpy:linspace",
                        "path": "numpy:linspace",
                        "type": "RefInfo",
                        "version": "*"
                      },
                      "type": "Link",
                      "value": "numpy.linspace"
                    },
                    {
                      "type": "text",
                      "value": " "
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "can"
                        }
                      ],
                      "type": "emphasis"
                    },
                    {
                      "type": "text",
                      "value": " include the endpoint and determines step size from the   "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "num"
                    },
                    {
                      "type": "text",
                      "value": " argument, which specifies the number of elements in the returned   array."
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The inclusion of the endpoint is determined by an optional boolean   argument "
                    },
                    {
                      "type": "inlineCode",
                      "value": "endpoint"
                    },
                    {
                      "type": "text",
                      "value": ", which defaults to "
                    },
                    {
                      "type": "inlineCode",
                      "value": "True"
                    },
                    {
                      "type": "text",
                      "value": ". Note that selecting   "
                    },
                    {
                      "type": "inlineCode",
                      "value": "endpoint=False"
                    },
                    {
                      "type": "text",
                      "value": " will change the step size computation, and the subsequent   output for the function."
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Example      "
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "type": "code",
                  "value": ">>> np.linspace(0.1, 0.2, num=5)  # np.linspace(start, stop, num)\narray([0.1  , 0.125, 0.15 , 0.175, 0.2  ])\n>>> np.linspace(0.1, 0.2, num=5, endpoint=False)\narray([0.1, 0.12, 0.14, 0.16, 0.18])"
                },
                {
                  "children": [
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "module",
                      "reference": {
                        "kind": "api",
                        "module": "numpy:linspace",
                        "path": "numpy:linspace",
                        "type": "RefInfo",
                        "version": "*"
                      },
                      "type": "Link",
                      "value": "numpy.linspace"
                    },
                    {
                      "type": "text",
                      "value": " can also be used with complex arguments      "
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "type": "code",
                  "value": ">>> np.linspace(1+1.j, 4, 5, dtype=np.complex64)\narray([1.  +1.j  , 1.75+0.75j, 2.5 +0.5j , 3.25+0.25j, 4.  +0.j  ],\n      dtype=complex64)"
                }
              ],
              "spread": false,
              "type": "listItem"
            }
          ],
          "ordered": false,
          "spread": false,
          "start": 1,
          "type": "list"
        }
      ],
      "level": 2,
      "target": null,
      "title": "``linspace`` vs. ``arange``",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Unexpected results may happen if floating point values are used as "
                    },
                    {
                      "type": "inlineCode",
                      "value": "step"
                    },
                    {
                      "type": "text",
                      "value": "    in "
                    },
                    {
                      "type": "inlineCode",
                      "value": "numpy.arange"
                    },
                    {
                      "type": "text",
                      "value": ". To avoid this, make sure all floating point conversion    happens after the computation of results. For example, replace"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "type": "code",
                  "value": ">>> list(np.arange(0.1,0.4,0.1).round(1))\n[0.1, 0.2, 0.3, 0.4]  # endpoint should not be included!"
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "with"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "type": "code",
                  "value": ">>> list(np.arange(1, 4, 1) / 10.0)\n[0.1, 0.2, 0.3]  # expected result"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Note that"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "type": "code",
                  "value": ">>> np.arange(0, 1.12, 0.04)\narray([0.  , 0.04, 0.08, 0.12, 0.16, 0.2 , 0.24, 0.28, 0.32, 0.36, 0.4 ,\n       0.44, 0.48, 0.52, 0.56, 0.6 , 0.64, 0.68, 0.72, 0.76, 0.8 , 0.84,\n       0.88, 0.92, 0.96, 1.  , 1.04, 1.08, 1.12])"
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "and"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "type": "code",
                  "value": ">>> np.arange(0, 1.08, 0.04)\narray([0.  , 0.04, 0.08, 0.12, 0.16, 0.2 , 0.24, 0.28, 0.32, 0.36, 0.4 ,\n       0.44, 0.48, 0.52, 0.56, 0.6 , 0.64, 0.68, 0.72, 0.76, 0.8 , 0.84,\n       0.88, 0.92, 0.96, 1.  , 1.04])"
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "These differ because of numeric noise. When using floating point values, it    is possible that "
                    },
                    {
                      "type": "inlineCode",
                      "value": "0 + 0.04 * 28 < 1.12"
                    },
                    {
                      "type": "text",
                      "value": ", and so "
                    },
                    {
                      "type": "inlineCode",
                      "value": "1.12"
                    },
                    {
                      "type": "text",
                      "value": " is in the    interval. In fact, this is exactly the case       "
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "type": "code",
                  "value": ">>> 1.12/0.04\n28.000000000000004"
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "But "
                    },
                    {
                      "type": "inlineCode",
                      "value": "0 + 0.04 * 27 >= 1.08"
                    },
                    {
                      "type": "text",
                      "value": " so that 1.08 is excluded       "
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "type": "code",
                  "value": ">>> 1.08/0.04\n27.0"
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Alternatively, you could use "
                    },
                    {
                      "type": "inlineCode",
                      "value": "np.arange(0, 28)*0.04"
                    },
                    {
                      "type": "text",
                      "value": " which would always    give you precise control of the end point since it is integral      "
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "type": "code",
                  "value": ">>> np.arange(0, 28)*0.04\narray([0.  , 0.04, 0.08, 0.12, 0.16, 0.2 , 0.24, 0.28, 0.32, 0.36, 0.4 ,\n       0.44, 0.48, 0.52, 0.56, 0.6 , 0.64, 0.68, 0.72, 0.76, 0.8 , 0.84,\n       0.88, 0.92, 0.96, 1.  , 1.04, 1.08])"
                }
              ],
              "spread": false,
              "type": "listItem"
            }
          ],
          "ordered": true,
          "spread": false,
          "start": 1,
          "type": "list"
        }
      ],
      "level": 2,
      "target": null,
      "title": "Other examples",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "inlineCode",
              "value": "numpy.geomspace"
            },
            {
              "type": "text",
              "value": " is similar to "
            },
            {
              "type": "inlineCode",
              "value": "numpy.linspace"
            },
            {
              "type": "text",
              "value": ", but with numbers spaced evenly on a log scale (a geometric progression). The endpoint is included in the result."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Example    "
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": ">>> np.geomspace(2, 3, num=5)\narray([2.        , 2.21336384, 2.44948974, 2.71080601, 3.        ])"
        },
        {
          "children": [
            {
              "type": "inlineCode",
              "value": "numpy.logspace"
            },
            {
              "type": "text",
              "value": " is similar to "
            },
            {
              "type": "inlineCode",
              "value": "numpy.geomspace"
            },
            {
              "type": "text",
              "value": ", but with the start and end points specified as logarithms (with base 10 as default)    "
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": ">>> np.logspace(2, 3, num=5)\narray([ 100.        ,  177.827941  ,  316.22776602,  562.34132519, 1000.        ])"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "In linear space, the sequence starts at "
            },
            {
              "type": "inlineCode",
              "value": "base ** start"
            },
            {
              "type": "text",
              "value": " ("
            },
            {
              "type": "inlineCode",
              "value": "base"
            },
            {
              "type": "text",
              "value": " to the power of "
            },
            {
              "type": "inlineCode",
              "value": "start"
            },
            {
              "type": "text",
              "value": ") and ends with "
            },
            {
              "type": "inlineCode",
              "value": "base ** stop"
            },
            {
              "type": "text",
              "value": "    "
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": ">>> np.logspace(2, 3, num=5, base=2)\narray([4.        , 4.75682846, 5.65685425, 6.72717132, 8.        ])"
        }
      ],
      "level": 2,
      "target": null,
      "title": "``geomspace`` and ``logspace``",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "nD domains can be partitioned into "
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "grids"
                }
              ],
              "type": "emphasis"
            },
            {
              "type": "text",
              "value": ". This can be done using one of the following functions."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 1,
      "target": null,
      "title": "nD domains",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "The purpose of "
            },
            {
              "type": "inlineCode",
              "value": "numpy.meshgrid"
            },
            {
              "type": "text",
              "value": " is to create a rectangular grid out of a set of one-dimensional coordinate arrays."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Given arrays"
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "code",
              "value": ">>> x = np.array([0, 1, 2, 3])\n>>> y = np.array([0, 1, 2, 3, 4, 5])"
            }
          ],
          "type": "blockquote"
        },
        {
          "children": [
            {
              "type": "inlineCode",
              "value": "meshgrid"
            },
            {
              "type": "text",
              "value": " will create two coordinate arrays, which can be used to generate the coordinate pairs determining this grid."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "code",
              "value": ">>> xx, yy = np.meshgrid(x, y)\n>>> xx\narray([[0, 1, 2, 3],\n       [0, 1, 2, 3],\n       [0, 1, 2, 3],\n       [0, 1, 2, 3],\n       [0, 1, 2, 3],\n       [0, 1, 2, 3]])\n>>> yy\narray([[0, 0, 0, 0],\n       [1, 1, 1, 1],\n       [2, 2, 2, 2],\n       [3, 3, 3, 3],\n       [4, 4, 4, 4],\n       [5, 5, 5, 5]])\n\n>>> import matplotlib.pyplot as plt\n>>> plt.plot(xx, yy, marker='.', color='k', linestyle='none')"
            }
          ],
          "type": "blockquote"
        },
        {
          "args": "user/plots/meshgrid_plot.py",
          "children": [],
          "name": "plot",
          "options": {
            "align": "center",
            "include-source": "0"
          },
          "type": "mystDirective",
          "value": ""
        }
      ],
      "level": 2,
      "target": null,
      "title": "``meshgrid``",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "inlineCode",
              "value": "numpy.mgrid"
            },
            {
              "type": "text",
              "value": " can be used as a shortcut for creating meshgrids. It is not a function, but when indexed, returns a multidimensional meshgrid."
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": ">>> xx, yy = np.meshgrid(np.array([0, 1, 2, 3]), np.array([0, 1, 2, 3, 4, 5]))\n>>> xx.T, yy.T\n(array([[0, 0, 0, 0, 0, 0],\n        [1, 1, 1, 1, 1, 1],\n        [2, 2, 2, 2, 2, 2],\n        [3, 3, 3, 3, 3, 3]]),\n array([[0, 1, 2, 3, 4, 5],\n        [0, 1, 2, 3, 4, 5],\n        [0, 1, 2, 3, 4, 5],\n        [0, 1, 2, 3, 4, 5]]))\n\n>>> np.mgrid[0:4, 0:6]\narray([[[0, 0, 0, 0, 0, 0],\n        [1, 1, 1, 1, 1, 1],\n        [2, 2, 2, 2, 2, 2],\n        [3, 3, 3, 3, 3, 3]],\n<BLANKLINE>\n       [[0, 1, 2, 3, 4, 5],\n        [0, 1, 2, 3, 4, 5],\n        [0, 1, 2, 3, 4, 5],\n        [0, 1, 2, 3, 4, 5]]])"
        }
      ],
      "level": 2,
      "target": null,
      "title": "``mgrid``",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Similar to "
            },
            {
              "type": "inlineCode",
              "value": "numpy.mgrid"
            },
            {
              "type": "text",
              "value": ", "
            },
            {
              "type": "inlineCode",
              "value": "numpy.ogrid"
            },
            {
              "type": "text",
              "value": " returns an "
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "open"
                }
              ],
              "type": "emphasis"
            },
            {
              "type": "text",
              "value": " multidimensional meshgrid. This means that when it is indexed, only one dimension of each returned array is greater than 1. This avoids repeating the data and thus saves memory, which is often desirable."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "These sparse coordinate grids are intended to be use with "
            },
            {
              "type": "inlineCode",
              "value": "broadcasting"
            },
            {
              "type": "text",
              "value": ". When all coordinates are used in an expression, broadcasting still leads to a fully-dimensonal result array."
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": ">>> np.ogrid[0:4, 0:6]\n[array([[0],\n        [1],\n        [2],\n        [3]]), array([[0, 1, 2, 3, 4, 5]])]"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "All three methods described here can be used to evaluate function values on a grid."
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": ">>> g = np.ogrid[0:4, 0:6]\n>>> zg = np.sqrt(g[0]**2 + g[1]**2)\n>>> g[0].shape, g[1].shape, zg.shape\n((4, 1), (1, 6), (4, 6))\n>>> m = np.mgrid[0:4, 0:6]\n>>> zm = np.sqrt(m[0]**2 + m[1]**2)\n>>> np.array_equal(zm, zg)\nTrue"
        }
      ],
      "level": 2,
      "target": null,
      "title": "``ogrid``",
      "type": "Section"
    }
  ],
  "content": {},
  "example_section_data": {
    "children": [],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": null,
  "item_line": null,
  "item_type": null,
  "ordered_sections": [],
  "references": null,
  "see_also": [],
  "signature": {
    "type": "Signature",
    "value": null
  },
  "type": "DocBlob"
}