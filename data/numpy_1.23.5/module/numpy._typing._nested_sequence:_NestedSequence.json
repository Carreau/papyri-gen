{
  "aliases": [
    "numpy._typing._NestedSequence"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "A protocol for representing nested sequences."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [
        {
          "children": [
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "_NestedSequence"
            },
            {
              "type": "text",
              "value": " currently does not work in combination with typevars, "
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "e.g."
                }
              ],
              "type": "emphasis"
            },
            {
              "type": "text",
              "value": " "
            },
            {
              "type": "inlineCode",
              "value": "def func(a: _NestedSequnce[T]) -> T: ..."
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [
      {
        "type": "text",
        "value": ".. code-block:: python"
      },
      {
        "type": "text",
        "value": "    >>> from __future__ import annotations"
      },
      {
        "type": "text",
        "value": "    >>> from typing import TYPE_CHECKING\n    >>> import numpy as np\n    >>> from numpy._typing import _NestedSequnce"
      },
      {
        "type": "text",
        "value": "    >>> def get_dtype(seq: _NestedSequnce[float]) -> np.dtype[np.float64]:\n    ...     return np.asarray(seq).dtype"
      },
      {
        "type": "text",
        "value": "    >>> a = get_dtype([1.0])\n    >>> b = get_dtype([[1.0]])\n    >>> c = get_dtype([[[1.0]]])\n    >>> d = get_dtype([[[[1.0]]]])"
      },
      {
        "type": "text",
        "value": "    >>> if TYPE_CHECKING:\n    ...     reveal_locals()\n    ...     # note: Revealed local types are:\n    ...     # note:     a: numpy.dtype[numpy.floating[numpy._typing._64Bit]]\n    ...     # note:     b: numpy.dtype[numpy.floating[numpy._typing._64Bit]]\n    ...     # note:     c: numpy.dtype[numpy.floating[numpy._typing._64Bit]]\n    ...     # note:     d: numpy.dtype[numpy.floating[numpy._typing._64Bit]]"
      }
    ],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/numpy/_typing/_nested_sequence.py",
  "item_line": 19,
  "item_type": "<class 'typing._ProtocolMeta'>",
  "ordered_sections": [
    "Summary",
    "Warnings",
    "See Also",
    "Examples"
  ],
  "references": null,
  "see_also": [
    {
      "descriptions": [
        {
          "children": [
            {
              "type": "text",
              "value": "ABCs for read-only and mutable "
            },
            {
              "domain": null,
              "role": "term",
              "type": "Directive",
              "value": "sequences"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        }
      ],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "to-resolve",
          "module": "current-module",
          "path": "collections.abc.Sequence",
          "type": "RefInfo",
          "version": "current-version"
        },
        "type": "Link",
        "value": "collections.abc.Sequence"
      },
      "type": null
    }
  ],
  "signature": {
    "type": "Signature",
    "value": null
  },
  "type": "DocBlob"
}