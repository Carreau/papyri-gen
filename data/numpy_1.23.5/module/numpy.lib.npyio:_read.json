{
  "aliases": [
    "numpy.lib.npyio._read"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The filename or the file to be read."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "fname",
              "type": "Param",
              "type_": "str or file object"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Field delimiter of the fields in line of the file. Default is a comma, ','.  If None any sequence of whitespace is considered a delimiter."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "delimiter",
              "type": "Param",
              "type_": "str, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Character that begins a comment.  All text from the comment character to the end of the line is ignored. Multiple comments or multiple-character comment strings are supported, but may be slower and "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "quote",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "quote"
                    },
                    {
                      "type": "text",
                      "value": " must be empty if used. Use None to disable all use of comments."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "comment",
              "type": "Param",
              "type_": "str or sequence of str or None, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Character that is used to quote string fields. Default is '\"' (a double quote). Use None to disable quote support."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "quote",
              "type": "Param",
              "type_": "str or None, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Character that represent the imaginay unit "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "sqrt(-1)"
                    },
                    {
                      "type": "text",
                      "value": ". Default is 'j'."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "imaginary_unit",
              "type": "Param",
              "type_": "str, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "A one-dimensional array of integer column numbers.  These are the columns from the file to be included in the array.  If this value is not given, all the columns are used."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "usecols",
              "type": "Param",
              "type_": "array_like, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Number of lines to skip before interpreting the data in the file."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "skiplines",
              "type": "Param",
              "type_": "int, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Maximum number of rows of data to read.  Default is to read the entire file."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "max_rows",
              "type": "Param",
              "type_": "int, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "A function to parse all columns strings into the desired value, or a dictionary mapping column number to a parser function. E.g. if column 0 is a date string: "
                    },
                    {
                      "type": "inlineCode",
                      "value": "converters = {0: datestr2num}"
                    },
                    {
                      "type": "text",
                      "value": ". Converters can also be used to provide a default value for missing data, e.g. "
                    },
                    {
                      "type": "inlineCode",
                      "value": "converters = lambda s: float(s.strip() or 0)"
                    },
                    {
                      "type": "text",
                      "value": " will convert empty fields to 0. Default: None"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "converters",
              "type": "Param",
              "type_": "dict or callable, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Minimum dimension of the array returned. Allowed values are 0, 1 or 2.  Default is 0."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "ndmin",
              "type": "Param",
              "type_": "int, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "If True, the returned array is transposed, so that arguments may be unpacked using "
                    },
                    {
                      "type": "inlineCode",
                      "value": "x, y, z = read(...)"
                    },
                    {
                      "type": "text",
                      "value": ".  When used with a structured data-type, arrays are returned for each field.  Default is False."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "unpack",
              "type": "Param",
              "type_": "bool, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "A NumPy dtype instance, can be a structured dtype to map to the columns of the file."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "dtype",
              "type": "Param",
              "type_": "numpy data type"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Encoding used to decode the inputfile. The special value 'bytes' (the default) enables backwards-compatible behavior for "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "converters",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "converters"
                    },
                    {
                      "type": "text",
                      "value": ", ensuring that inputs to the converter functions are encoded bytes objects. The special value 'bytes' has no additional effect if "
                    },
                    {
                      "type": "inlineCode",
                      "value": "converters=None"
                    },
                    {
                      "type": "text",
                      "value": ". If encoding is "
                    },
                    {
                      "type": "inlineCode",
                      "value": "'bytes'"
                    },
                    {
                      "type": "text",
                      "value": " or "
                    },
                    {
                      "type": "inlineCode",
                      "value": "None"
                    },
                    {
                      "type": "text",
                      "value": ", the default system encoding is used."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "encoding",
              "type": "Param",
              "type_": "str, optional"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "NumPy array."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "",
              "type": "Param",
              "type_": "ndarray"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Read a NumPy array from a text file."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [
      {
        "type": "text",
        "value": "First we create a file for the example."
      },
      {
        "type": "code",
        "value": ">>> s1 = '1.0,2.0,3.0\\n4.0,5.0,6.0\\n'\n>>> with open('example1.csv', 'w') as f:\n>>>     f.write(s1)\n>>> a1 = read_from_filename('example1.csv')\n>>> a1"
      },
      {
        "type": "text",
        "value": "The second example has columns with different data types, so a\none-dimensional array with a structured data type is returned.\nThe tab character is used as the field delimiter."
      },
      {
        "type": "code",
        "value": ">>> s2 = '1.0\\t10\\talpha\\n2.3\\t25\\tbeta\\n4.5\\t16\\tgamma\\n'\n>>> with open('example2.tsv', 'w') as f:\n>>>     f.write(s2)\n>>> a2 = read_from_filename('example2.tsv', delimiter='\\t')\n>>> a2"
      }
    ],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/numpy/lib/npyio.py",
  "item_line": 801,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Parameters",
    "Returns",
    "Examples"
  ],
  "references": null,
  "see_also": [],
  "signature": {
    "type": "Signature",
    "value": "(fname, *, delimiter=',', comment='#', quote='\"', imaginary_unit='j', usecols=None, skiplines=0, max_rows=None, converters=None, ndmin=None, unpack=False, dtype=<class 'numpy.float64'>, encoding='bytes')"
  },
  "type": "DocBlob"
}