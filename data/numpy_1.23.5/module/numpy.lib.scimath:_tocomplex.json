{
  "aliases": [
    "numpy.emath._tocomplex"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "The input is returned as a complex array of the smallest type that will fit the original data: types like single, byte, short, etc. become csingle, while others become cdouble."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "A copy of the input is always made."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [],
              "param": "arr",
              "type": "Param",
              "type_": "array"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "An array with the same input data as the input but in complex form."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "",
              "type": "Param",
              "type_": "array"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Convert its input "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "arr",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "arr"
            },
            {
              "type": "text",
              "value": " to a complex array."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [
      {
        "type": "text",
        "value": "First, consider an input of type short:"
      },
      {
        "type": "code",
        "value": "a = np.array([1,2,3],np.short)"
      },
      {
        "type": "code",
        "value": "ac = np.lib.scimath._tocomplex(a); ac"
      },
      {
        "type": "code",
        "value": "ac.dtype"
      },
      {
        "type": "text",
        "value": "If the input is of type double, the output is correspondingly of the\ncomplex double type as well:"
      },
      {
        "type": "code",
        "value": "b = np.array([1,2,3],np.double)"
      },
      {
        "type": "code",
        "value": "bc = np.lib.scimath._tocomplex(b); bc"
      },
      {
        "type": "code",
        "value": "bc.dtype"
      },
      {
        "type": "text",
        "value": "Note that even if the input was complex to begin with, a copy is still\nmade, since the astype() method always copies:"
      },
      {
        "type": "code",
        "value": "c = np.array([1,2,3],np.csingle)"
      },
      {
        "type": "code",
        "value": "cc = np.lib.scimath._tocomplex(c); cc"
      },
      {
        "type": "code",
        "value": "c *= 2; c"
      },
      {
        "type": "code",
        "value": "cc"
      }
    ],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/numpy/lib/scimath.py",
  "item_line": 49,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns",
    "Examples"
  ],
  "references": null,
  "see_also": [],
  "signature": {
    "type": "Signature",
    "value": "(arr)"
  },
  "type": "DocBlob"
}