{
  "aliases": [
    "numpy.linalg.matrix_power"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "For positive integers "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "n",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "n"
            },
            {
              "type": "text",
              "value": ", the power is computed by repeated matrix squarings and matrix multiplications. If "
            },
            {
              "type": "inlineCode",
              "value": "n == 0"
            },
            {
              "type": "text",
              "value": ", the identity matrix of the same shape as M is returned. If "
            },
            {
              "type": "inlineCode",
              "value": "n < 0"
            },
            {
              "type": "text",
              "value": ", the inverse is computed and then raised to the "
            },
            {
              "type": "inlineCode",
              "value": "abs(n)"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "children": [
                {
                  "type": "text",
                  "value": "note Stacks of object matrices are not currently supported."
                }
              ],
              "type": "admonitionTitle"
            }
          ],
          "kind": "note",
          "type": "admonition"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Matrix to be \"powered\"."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "a",
              "type": "Param",
              "type_": "(..., M, M) array_like"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The exponent can be any integer or long integer, positive, negative, or zero."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "n",
              "type": "Param",
              "type_": "int"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "For matrices that are not square or that (for negative powers) cannot be inverted numerically."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "",
              "type": "Param",
              "type_": "LinAlgError"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The return value is the same shape and type as "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "M"
                    },
                    {
                      "type": "text",
                      "value": "; if the exponent is positive or zero then the type of the elements is the same as those of "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "M"
                    },
                    {
                      "type": "text",
                      "value": ". If the exponent is negative the elements are floating-point."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "a**n",
              "type": "Param",
              "type_": "(..., M, M) ndarray or matrix object"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Raise a square matrix to the (integer) power "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "n",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "n"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [
      {
        "type": "code",
        "value": "from numpy.linalg import matrix_power\ni = np.array([[0, 1], [-1, 0]]) # matrix equiv. of the imaginary unit\nmatrix_power(i, 3) # should = -i"
      },
      {
        "type": "code",
        "value": "matrix_power(i, 0)"
      },
      {
        "type": "code",
        "value": "matrix_power(i, -3) # should = 1/(-i) = i, but w/ f.p. elements"
      },
      {
        "type": "text",
        "value": "Somewhat more sophisticated example"
      },
      {
        "type": "code",
        "value": "q = np.zeros((4, 4))\nq[0:2, 0:2] = -i\nq[2:4, 2:4] = i\nq # one of the three quaternion units not equal to 1"
      },
      {
        "type": "code",
        "value": "matrix_power(q, 2) # = -np.eye(4)"
      }
    ],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/numpy/linalg/linalg.py",
  "item_line": 560,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns",
    "Raises",
    "Examples"
  ],
  "references": null,
  "see_also": [],
  "signature": {
    "type": "Signature",
    "value": "(a, n)"
  },
  "type": "DocBlob"
}