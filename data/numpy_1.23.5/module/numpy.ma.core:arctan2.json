{
  "aliases": [
    "numpy.ma.arctan2"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "The quadrant (i.e., branch) is chosen so that "
            },
            {
              "type": "inlineCode",
              "value": "arctan2(x1, x2)"
            },
            {
              "type": "text",
              "value": " is the signed angle in radians between the ray ending at the origin and passing through the point (1,0), and the ray ending at the origin and passing through the point ("
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "x2",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "x2"
            },
            {
              "type": "text",
              "value": ", "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "x1",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "x1"
            },
            {
              "type": "text",
              "value": ").  (Note the role reversal: the \""
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "y"
            },
            {
              "type": "text",
              "value": "-coordinate\" is the first function parameter, the \""
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "x"
            },
            {
              "type": "text",
              "value": "-coordinate\" is the second.)  By IEEE convention, this function is defined for "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "x2",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "x2"
            },
            {
              "type": "text",
              "value": " = +/-0 and for either or both of "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "x1",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "x1"
            },
            {
              "type": "text",
              "value": " and "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "x2",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "x2"
            },
            {
              "type": "text",
              "value": " = +/-inf (see Notes for specific values)."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "This function is not defined for complex-valued arguments; for the so-called argument of complex values, use "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "angle",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "angle"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [
        {
          "children": [
            {
              "children": [
                {
                  "type": "text",
                  "value": "arctan2"
                }
              ],
              "type": "emphasis"
            },
            {
              "type": "text",
              "value": " is identical to the "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "module",
              "reference": {
                "kind": "module",
                "module": "numpy",
                "path": "numpy.array_api._elementwise_functions:atan2",
                "type": "RefInfo",
                "version": "1.23.5"
              },
              "type": "Link",
              "value": "atan2"
            },
            {
              "type": "text",
              "value": " function of the underlying C library.  The following special values are defined in the C standard:"
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "====== ====== ================ "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "x1",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "x1"
            },
            {
              "type": "text",
              "value": "   "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "x2",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "x2"
            },
            {
              "type": "text",
              "value": "   "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "arctan2(x1,x2)"
            },
            {
              "type": "text",
              "value": " ====== ====== ================ +/- 0  +0     +/- 0 +/- 0  -0     +/- pi  > 0   +/-inf +0 / +pi  < 0   +/-inf -0 / -pi +/-inf +inf   +/- (pi/4) +/-inf -inf   +/- (3*pi/4) ====== ====== ================"
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Note that +0 and -0 are distinct floating point numbers, as are +inf and -inf."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "y"
                    },
                    {
                      "type": "text",
                      "value": "-coordinates."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "x1",
              "type": "Param",
              "type_": "array_like, real-valued"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "x"
                    },
                    {
                      "type": "text",
                      "value": "-coordinates. If "
                    },
                    {
                      "type": "inlineCode",
                      "value": "x1.shape != x2.shape"
                    },
                    {
                      "type": "text",
                      "value": ", they must be broadcastable to a common shape (which becomes the shape of the output)."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "x2",
              "type": "Param",
              "type_": "array_like, real-valued"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "A location into which the result is stored. If provided, it must have a shape that the inputs broadcast to. If not provided or None, a freshly-allocated array is returned. A tuple (possible only as a keyword argument) must have length equal to the number of outputs."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "out",
              "type": "Param",
              "type_": "ndarray, None, or tuple of ndarray and None, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "This condition is broadcast over the input. At locations where the condition is True, the "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "out",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "out"
                    },
                    {
                      "type": "text",
                      "value": " array will be set to the ufunc result. Elsewhere, the "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "out",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "out"
                    },
                    {
                      "type": "text",
                      "value": " array will retain its original value. Note that if an uninitialized "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "out",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "out"
                    },
                    {
                      "type": "text",
                      "value": " array is created via the default "
                    },
                    {
                      "type": "inlineCode",
                      "value": "out=None"
                    },
                    {
                      "type": "text",
                      "value": ", locations within it where the condition is False will remain uninitialized."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "where",
              "type": "Param",
              "type_": "array_like, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "For other keyword-only arguments, see the "
                    },
                    {
                      "type": "inlineCode",
                      "value": "ufunc docs <ufuncs.kwargs>"
                    },
                    {
                      "type": "text",
                      "value": "."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "**kwargs",
              "type": "Param",
              "type_": ""
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Array of angles in radians, in the range "
                    },
                    {
                      "type": "inlineCode",
                      "value": "[-pi, pi]"
                    },
                    {
                      "type": "text",
                      "value": ". This is a scalar if both "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "x1",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "x1"
                    },
                    {
                      "type": "text",
                      "value": " and "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "x2",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "x2"
                    },
                    {
                      "type": "text",
                      "value": " are scalars."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "angle",
              "type": "Param",
              "type_": "ndarray"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Element-wise arc tangent of "
            },
            {
              "type": "inlineCode",
              "value": "x1/x2"
            },
            {
              "type": "text",
              "value": " choosing the quadrant correctly."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [
      {
        "type": "text",
        "value": "Consider four points in different quadrants:"
      },
      {
        "type": "code",
        "value": "x = np.array([-1, +1, +1, -1])\ny = np.array([-1, -1, +1, +1])\nnp.arctan2(y, x) * 180 / np.pi"
      },
      {
        "type": "text",
        "value": "Note the order of the parameters. `arctan2` is defined also when `x2` = 0\nand at several other special points, obtaining values in\nthe range ``[-pi, pi]``:"
      },
      {
        "type": "code",
        "value": "np.arctan2([1., -1.], [0., 0.])"
      },
      {
        "type": "code",
        "value": "np.arctan2([0., 0., np.inf], [+0., -0., np.inf])"
      }
    ],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/numpy/ma/core.py",
  "item_line": null,
  "item_type": "<class 'numpy.ma.core._MaskedBinaryOperation'>",
  "ordered_sections": [
    "Signature",
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns",
    "See Also",
    "Notes",
    "References",
    "Examples"
  ],
  "references": null,
  "see_also": [
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "to-resolve",
          "module": "current-module",
          "path": "arctan",
          "type": "RefInfo",
          "version": "current-version"
        },
        "type": "Link",
        "value": "arctan"
      },
      "type": null
    },
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "to-resolve",
          "module": "current-module",
          "path": "tan",
          "type": "RefInfo",
          "version": "current-version"
        },
        "type": "Link",
        "value": "tan"
      },
      "type": null
    },
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "to-resolve",
          "module": "current-module",
          "path": "angle",
          "type": "RefInfo",
          "version": "current-version"
        },
        "type": "Link",
        "value": "angle"
      },
      "type": null
    }
  ],
  "signature": {
    "type": "Signature",
    "value": "arctan2(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])"
  },
  "type": "DocBlob"
}