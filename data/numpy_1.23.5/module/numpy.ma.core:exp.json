{
  "aliases": [
    "numpy.ma.exp"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "The irrational number "
            },
            {
              "type": "inlineCode",
              "value": "e"
            },
            {
              "type": "text",
              "value": " is also known as Euler's number.  It is approximately 2.718281, and is the base of the natural logarithm, "
            },
            {
              "type": "inlineCode",
              "value": "ln"
            },
            {
              "type": "text",
              "value": " (this means that, if "
            },
            {
              "type": "inlineMath",
              "value": "x = \\ln y = \\log_e y"
            },
            {
              "type": "text",
              "value": ", then "
            },
            {
              "type": "inlineMath",
              "value": "e^x = y"
            },
            {
              "type": "text",
              "value": ". For real input, "
            },
            {
              "type": "inlineCode",
              "value": "exp(x)"
            },
            {
              "type": "text",
              "value": " is always positive."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "For complex arguments, "
            },
            {
              "type": "inlineCode",
              "value": "x = a + ib"
            },
            {
              "type": "text",
              "value": ", we can write "
            },
            {
              "type": "inlineMath",
              "value": "e^x = e^a e^{ib}"
            },
            {
              "type": "text",
              "value": ".  The first term, "
            },
            {
              "type": "inlineMath",
              "value": "e^a"
            },
            {
              "type": "text",
              "value": ", is already known (it is the real argument, described above).  The second term, "
            },
            {
              "type": "inlineMath",
              "value": "e^{ib}"
            },
            {
              "type": "text",
              "value": ", is "
            },
            {
              "type": "inlineMath",
              "value": "\\cos b + i \\sin b"
            },
            {
              "type": "text",
              "value": ", a function with magnitude 1 and a periodic phase."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Input values."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "x",
              "type": "Param",
              "type_": "array_like"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "A location into which the result is stored. If provided, it must have a shape that the inputs broadcast to. If not provided or None, a freshly-allocated array is returned. A tuple (possible only as a keyword argument) must have length equal to the number of outputs."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "out",
              "type": "Param",
              "type_": "ndarray, None, or tuple of ndarray and None, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "This condition is broadcast over the input. At locations where the condition is True, the "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "out",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "out"
                    },
                    {
                      "type": "text",
                      "value": " array will be set to the ufunc result. Elsewhere, the "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "out",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "out"
                    },
                    {
                      "type": "text",
                      "value": " array will retain its original value. Note that if an uninitialized "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "out",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "out"
                    },
                    {
                      "type": "text",
                      "value": " array is created via the default "
                    },
                    {
                      "type": "inlineCode",
                      "value": "out=None"
                    },
                    {
                      "type": "text",
                      "value": ", locations within it where the condition is False will remain uninitialized."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "where",
              "type": "Param",
              "type_": "array_like, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "For other keyword-only arguments, see the "
                    },
                    {
                      "type": "inlineCode",
                      "value": "ufunc docs <ufuncs.kwargs>"
                    },
                    {
                      "type": "text",
                      "value": "."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "**kwargs",
              "type": "Param",
              "type_": ""
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Output array, element-wise exponential of "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "x",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "x"
                    },
                    {
                      "type": "text",
                      "value": ". This is a scalar if "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "x",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "x"
                    },
                    {
                      "type": "text",
                      "value": " is a scalar."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "out",
              "type": "Param",
              "type_": "ndarray or scalar"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Calculate the exponential of all elements in the input array."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [
      {
        "type": "text",
        "value": "Plot the magnitude and phase of ``exp(x)`` in the complex plane:"
      },
      {
        "type": "code",
        "value": "import matplotlib.pyplot as plt"
      },
      {
        "type": "code",
        "value": "x = np.linspace(-2*np.pi, 2*np.pi, 100)\nxx = x + 1j * x[:, np.newaxis] # a + ib over complex plane\nout = np.exp(xx)"
      },
      {
        "type": "code",
        "value": "plt.subplot(121)\nplt.imshow(np.abs(out),\n           extent=[-2*np.pi, 2*np.pi, -2*np.pi, 2*np.pi], cmap='gray')\nplt.title('Magnitude of exp(x)')"
      },
      {
        "type": "code",
        "value": "plt.subplot(122)\nplt.imshow(np.angle(out),\n           extent=[-2*np.pi, 2*np.pi, -2*np.pi, 2*np.pi], cmap='hsv')\nplt.title('Phase (angle) of exp(x)')\nplt.show()"
      }
    ],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/numpy/ma/core.py",
  "item_line": null,
  "item_type": "<class 'numpy.ma.core._MaskedUnaryOperation'>",
  "ordered_sections": [
    "Signature",
    "Summary",
    "Parameters",
    "Returns",
    "See Also",
    "Notes",
    "References",
    "Examples"
  ],
  "references": null,
  "see_also": [
    {
      "descriptions": [
        {
          "children": [
            {
              "type": "text",
              "value": "Calculate "
            },
            {
              "type": "inlineCode",
              "value": "exp(x) - 1"
            },
            {
              "type": "text",
              "value": " for all elements in the array."
            }
          ],
          "type": "paragraph"
        }
      ],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "module",
          "module": "numpy",
          "path": "numpy.array_api._elementwise_functions:expm1",
          "type": "RefInfo",
          "version": "1.23.5"
        },
        "type": "Link",
        "value": "expm1"
      },
      "type": null
    },
    {
      "descriptions": [
        {
          "children": [
            {
              "type": "text",
              "value": "Calculate "
            },
            {
              "type": "inlineCode",
              "value": "2**x"
            },
            {
              "type": "text",
              "value": " for all elements in the array."
            }
          ],
          "type": "paragraph"
        }
      ],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "to-resolve",
          "module": "current-module",
          "path": "exp2",
          "type": "RefInfo",
          "version": "current-version"
        },
        "type": "Link",
        "value": "exp2"
      },
      "type": null
    }
  ],
  "signature": {
    "type": "Signature",
    "value": "exp(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])"
  },
  "type": "DocBlob"
}