{
  "aliases": [
    "numpy.ma.fmod"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "This is the NumPy implementation of the C library function fmod, the remainder has the same sign as the dividend "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "x1",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "x1"
            },
            {
              "type": "text",
              "value": ". It is equivalent to the Matlab(TM) "
            },
            {
              "type": "inlineCode",
              "value": "rem"
            },
            {
              "type": "text",
              "value": " function and should not be confused with the Python modulus operator "
            },
            {
              "type": "inlineCode",
              "value": "x1 % x2"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "The result of the modulo operation for negative dividend and divisors is bound by conventions. For "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "module",
              "reference": {
                "kind": "module",
                "module": "numpy",
                "path": "numpy.ma.core:fmod",
                "type": "RefInfo",
                "version": "1.23.5"
              },
              "type": "Link",
              "value": "fmod"
            },
            {
              "type": "text",
              "value": ", the sign of result is the sign of the dividend, while for "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "remainder"
            },
            {
              "type": "text",
              "value": " the sign of the result is the sign of the divisor. The "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "module",
              "reference": {
                "kind": "module",
                "module": "numpy",
                "path": "numpy.ma.core:fmod",
                "type": "RefInfo",
                "version": "1.23.5"
              },
              "type": "Link",
              "value": "fmod"
            },
            {
              "type": "text",
              "value": " function is equivalent to the Matlab(TM) "
            },
            {
              "type": "inlineCode",
              "value": "rem"
            },
            {
              "type": "text",
              "value": " function."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Dividend."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "x1",
              "type": "Param",
              "type_": "array_like"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Divisor. If "
                    },
                    {
                      "type": "inlineCode",
                      "value": "x1.shape != x2.shape"
                    },
                    {
                      "type": "text",
                      "value": ", they must be broadcastable to a common shape (which becomes the shape of the output)."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "x2",
              "type": "Param",
              "type_": "array_like"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "A location into which the result is stored. If provided, it must have a shape that the inputs broadcast to. If not provided or None, a freshly-allocated array is returned. A tuple (possible only as a keyword argument) must have length equal to the number of outputs."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "out",
              "type": "Param",
              "type_": "ndarray, None, or tuple of ndarray and None, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "This condition is broadcast over the input. At locations where the condition is True, the "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "out",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "out"
                    },
                    {
                      "type": "text",
                      "value": " array will be set to the ufunc result. Elsewhere, the "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "out",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "out"
                    },
                    {
                      "type": "text",
                      "value": " array will retain its original value. Note that if an uninitialized "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "out",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "out"
                    },
                    {
                      "type": "text",
                      "value": " array is created via the default "
                    },
                    {
                      "type": "inlineCode",
                      "value": "out=None"
                    },
                    {
                      "type": "text",
                      "value": ", locations within it where the condition is False will remain uninitialized."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "where",
              "type": "Param",
              "type_": "array_like, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "For other keyword-only arguments, see the "
                    },
                    {
                      "type": "inlineCode",
                      "value": "ufunc docs <ufuncs.kwargs>"
                    },
                    {
                      "type": "text",
                      "value": "."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "**kwargs",
              "type": "Param",
              "type_": ""
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The remainder of the division of "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "x1",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "x1"
                    },
                    {
                      "type": "text",
                      "value": " by "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "x2",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "x2"
                    },
                    {
                      "type": "text",
                      "value": ". This is a scalar if both "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "x1",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "x1"
                    },
                    {
                      "type": "text",
                      "value": " and "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "x2",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "x2"
                    },
                    {
                      "type": "text",
                      "value": " are scalars."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "y",
              "type": "Param",
              "type_": "array_like"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Returns the element-wise remainder of division."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [
      {
        "type": "code",
        "value": "np.fmod([-3, -2, -1, 1, 2, 3], 2)"
      },
      {
        "type": "code",
        "value": "np.remainder([-3, -2, -1, 1, 2, 3], 2)"
      },
      {
        "type": "code",
        "value": "np.fmod([5, 3], [2, 2.])"
      },
      {
        "type": "code",
        "value": "a = np.arange(-3, 3).reshape(3, 2)\na"
      },
      {
        "type": "code",
        "value": "np.fmod(a, [2,2])"
      }
    ],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/numpy/ma/core.py",
  "item_line": null,
  "item_type": "<class 'numpy.ma.core._DomainedBinaryOperation'>",
  "ordered_sections": [
    "Signature",
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns",
    "See Also",
    "Notes",
    "Examples"
  ],
  "references": null,
  "see_also": [
    {
      "descriptions": [
        {
          "children": [
            {
              "type": "text",
              "value": "Equivalent to the Python "
            },
            {
              "type": "inlineCode",
              "value": "%"
            },
            {
              "type": "text",
              "value": " operator."
            }
          ],
          "type": "paragraph"
        }
      ],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "to-resolve",
          "module": "current-module",
          "path": "remainder",
          "type": "RefInfo",
          "version": "current-version"
        },
        "type": "Link",
        "value": "remainder"
      },
      "type": null
    },
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "to-resolve",
          "module": "current-module",
          "path": "divide",
          "type": "RefInfo",
          "version": "current-version"
        },
        "type": "Link",
        "value": "divide"
      },
      "type": null
    }
  ],
  "signature": {
    "type": "Signature",
    "value": "fmod(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])"
  },
  "type": "DocBlob"
}