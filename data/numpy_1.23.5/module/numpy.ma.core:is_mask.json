{
  "aliases": [
    "numpy.ma.is_mask"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "This function does not check the contents of the input, only that the type is MaskType. In particular, this function returns False if the mask has a flexible dtype."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Array to test."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "m",
              "type": "Param",
              "type_": "array_like"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "True if "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "m.dtype.type"
                    },
                    {
                      "type": "text",
                      "value": " is MaskType, False otherwise."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "result",
              "type": "Param",
              "type_": "bool"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Return True if m is a valid, standard mask."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [
      {
        "type": "code",
        "value": "import numpy.ma as ma\nm = ma.masked_equal([0, 1, 0, 2, 3], 0)\nm"
      },
      {
        "type": "code",
        "value": "ma.is_mask(m)"
      },
      {
        "type": "code",
        "value": "ma.is_mask(m.mask)"
      },
      {
        "type": "text",
        "value": "Input must be an ndarray (or have similar attributes)\nfor it to be considered a valid mask."
      },
      {
        "type": "code",
        "value": "m = [False, True, False]\nma.is_mask(m)"
      },
      {
        "type": "code",
        "value": "m = np.array([False, True, False])\nm"
      },
      {
        "type": "code",
        "value": "ma.is_mask(m)"
      },
      {
        "type": "text",
        "value": "Arrays with complex dtypes don't return True."
      },
      {
        "type": "code",
        "value": "dtype = np.dtype({'names':['monty', 'pithon'],\n                  'formats':[bool, bool]})\ndtype"
      },
      {
        "type": "code",
        "value": "m = np.array([(True, False), (False, True), (True, False)],\n             dtype=dtype)\nm"
      },
      {
        "type": "code",
        "value": "ma.is_mask(m)"
      }
    ],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/numpy/ma/core.py",
  "item_line": 1470,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns",
    "See Also",
    "Examples"
  ],
  "references": null,
  "see_also": [
    {
      "descriptions": [
        {
          "children": [
            {
              "type": "text",
              "value": "Test whether input is an instance of MaskedArray."
            }
          ],
          "type": "paragraph"
        }
      ],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "to-resolve",
          "module": "current-module",
          "path": "ma.isMaskedArray",
          "type": "RefInfo",
          "version": "current-version"
        },
        "type": "Link",
        "value": "ma.isMaskedArray"
      },
      "type": null
    }
  ],
  "signature": {
    "type": "Signature",
    "value": "(m)"
  },
  "type": "DocBlob"
}