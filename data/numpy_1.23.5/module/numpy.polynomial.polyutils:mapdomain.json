{
  "aliases": [
    "numpy.polynomial.polyutils.mapdomain"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "The linear map "
            },
            {
              "type": "inlineCode",
              "value": "offset + scale*x"
            },
            {
              "type": "text",
              "value": " that maps the domain "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "old",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "old"
            },
            {
              "type": "text",
              "value": " to the domain "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "new",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "new"
            },
            {
              "type": "text",
              "value": " is applied to the points "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "x",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "x"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Effectively, this implements:"
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "math",
          "value": "x\\_out = new[0] + m(x - old[0])"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "where"
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "math",
          "value": "m = \\frac{new[1]-new[0]}{old[1]-old[0]}"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Points to be mapped. If "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "x",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "x"
                    },
                    {
                      "type": "text",
                      "value": " is a subtype of ndarray the subtype will be preserved."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "x",
              "type": "Param",
              "type_": "array_like"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The two domains that determine the map.  Each must (successfully) convert to 1-d arrays containing precisely two values."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "old, new",
              "type": "Param",
              "type_": "array_like"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Array of points of the same shape as "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "x",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "x"
                    },
                    {
                      "type": "text",
                      "value": ", after application of the linear map between the two domains."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "x_out",
              "type": "Param",
              "type_": "ndarray"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Apply linear map to input points."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [
      {
        "type": "code",
        "value": "from numpy.polynomial import polyutils as pu\nold_domain = (-1,1)\nnew_domain = (0,2*np.pi)\nx = np.linspace(-1,1,6); x"
      },
      {
        "type": "code",
        "value": "x_out = pu.mapdomain(x, old_domain, new_domain); x_out"
      },
      {
        "type": "code",
        "value": "x - pu.mapdomain(x_out, new_domain, old_domain)"
      },
      {
        "type": "text",
        "value": "Also works for complex numbers (and thus can be used to map any line in\nthe complex plane to any other line therein)."
      },
      {
        "type": "code",
        "value": "i = complex(0,1)\nold = (-1 - i, 1 + i)\nnew = (-1 + i, 1 - i)\nz = np.linspace(old[0], old[1], 6); z"
      },
      {
        "type": "code",
        "value": "new_z = pu.mapdomain(z, old, new); new_z"
      }
    ],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/numpy/polynomial/polyutils.py",
  "item_line": 303,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns",
    "See Also",
    "Notes",
    "Examples"
  ],
  "references": null,
  "see_also": [
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "module",
          "module": "numpy",
          "path": "numpy.polynomial.polyutils:getdomain",
          "type": "RefInfo",
          "version": "1.23.5"
        },
        "type": "Link",
        "value": "getdomain"
      },
      "type": null
    },
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "module",
          "module": "numpy",
          "path": "numpy.polynomial._polybase:ABCPolyBase.mapparms",
          "type": "RefInfo",
          "version": "1.23.5"
        },
        "type": "Link",
        "value": "mapparms"
      },
      "type": null
    }
  ],
  "signature": {
    "type": "Signature",
    "value": "(x, old, new)"
  },
  "type": "DocBlob"
}