{
  "aliases": [
    "numpy.random.SFC64"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [
        {
          "children": [
            {
              "type": "inlineCode",
              "value": "SFC64"
            },
            {
              "type": "text",
              "value": " is a 256-bit implementation of Chris Doty-Humphrey's Small Fast Chaotic PRNG (). "
            },
            {
              "type": "inlineCode",
              "value": "SFC64"
            },
            {
              "type": "text",
              "value": " has a few different cycles that one might be on, depending on the seed; the expected period will be about "
            },
            {
              "type": "inlineMath",
              "value": "2^{255}"
            },
            {
              "type": "text",
              "value": " (). "
            },
            {
              "type": "inlineCode",
              "value": "SFC64"
            },
            {
              "type": "text",
              "value": " incorporates a 64-bit counter which means that the absolute minimum cycle length is "
            },
            {
              "type": "inlineMath",
              "value": "2^{64}"
            },
            {
              "type": "text",
              "value": " and that distinct seeds will not run into each other for at least "
            },
            {
              "type": "inlineMath",
              "value": "2^{64}"
            },
            {
              "type": "text",
              "value": " iterations."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "inlineCode",
              "value": "SFC64"
            },
            {
              "type": "text",
              "value": " provides a capsule containing function pointers that produce doubles, and unsigned 32 and 64- bit integers. These are not directly consumable in Python and must be consumed by a "
            },
            {
              "type": "inlineCode",
              "value": "Generator"
            },
            {
              "type": "text",
              "value": " or similar object that supports low-level access."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "children": [
                {
                  "type": "text",
                  "value": "State and Seeding"
                }
              ],
              "type": "strong"
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "The "
            },
            {
              "type": "inlineCode",
              "value": "SFC64"
            },
            {
              "type": "text",
              "value": " state vector consists of 4 unsigned 64-bit values. The last is a 64-bit counter that increments by 1 each iteration."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "The input seed is processed by "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "SeedSequence"
            },
            {
              "type": "text",
              "value": " to generate the first 3 values, then the "
            },
            {
              "type": "inlineCode",
              "value": "SFC64"
            },
            {
              "type": "text",
              "value": " algorithm is iterated a small number of times to mix."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "children": [
                {
                  "type": "text",
                  "value": "Compatibility Guarantee"
                }
              ],
              "type": "strong"
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "inlineCode",
              "value": "SFC64"
            },
            {
              "type": "text",
              "value": " makes a guarantee that a fixed seed will always produce the same random integer stream."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "A seed to initialize the "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "module",
                      "reference": {
                        "kind": "module",
                        "module": "numpy",
                        "path": "numpy.random.bit_generator:BitGenerator",
                        "type": "RefInfo",
                        "version": "1.23.5"
                      },
                      "type": "Link",
                      "value": "BitGenerator"
                    },
                    {
                      "type": "text",
                      "value": ". If None, then fresh, unpredictable entropy will be pulled from the OS. If an "
                    },
                    {
                      "type": "inlineCode",
                      "value": "int"
                    },
                    {
                      "type": "text",
                      "value": " or "
                    },
                    {
                      "type": "inlineCode",
                      "value": "array_like[ints]"
                    },
                    {
                      "type": "text",
                      "value": " is passed, then it will be passed to "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "SeedSequence"
                    },
                    {
                      "type": "text",
                      "value": " to derive the initial "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "module",
                      "reference": {
                        "kind": "module",
                        "module": "numpy",
                        "path": "numpy.random.bit_generator:BitGenerator",
                        "type": "RefInfo",
                        "version": "1.23.5"
                      },
                      "type": "Link",
                      "value": "BitGenerator"
                    },
                    {
                      "type": "text",
                      "value": " state. One may also pass in a "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "SeedSequence"
                    },
                    {
                      "type": "text",
                      "value": " instance."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "seed",
              "type": "Param",
              "type_": "{None, int, array_like[ints], SeedSequence}, optional"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "BitGenerator for Chris Doty-Humphrey's Small Fast Chaotic PRNG."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/numpy/random/_sfc64.cpython-39-darwin.so",
  "item_line": null,
  "item_type": "<class 'type'>",
  "ordered_sections": [
    "Signature",
    "Summary",
    "Parameters",
    "Notes",
    "References"
  ],
  "references": null,
  "see_also": [],
  "signature": {
    "type": "Signature",
    "value": "SFC64(seed=None)"
  },
  "type": "DocBlob"
}