{
  "aliases": [
    "numpy.rec.array"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "A general-purpose record array constructor that dispatches to the appropriate "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "recarray"
            },
            {
              "type": "text",
              "value": " creation function based on the inputs (see Notes)."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "If "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "obj",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "obj"
            },
            {
              "type": "text",
              "value": " is "
            },
            {
              "type": "inlineCode",
              "value": "None"
            },
            {
              "type": "text",
              "value": ", then call the "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "module",
              "reference": {
                "kind": "api",
                "module": "numpy:recarray",
                "path": "numpy:recarray",
                "type": "RefInfo",
                "version": "*"
              },
              "type": "Link",
              "value": "recarray"
            },
            {
              "type": "text",
              "value": " constructor. If "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "obj",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "obj"
            },
            {
              "type": "text",
              "value": " is a string, then call the "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "fromstring"
            },
            {
              "type": "text",
              "value": " constructor. If "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "obj",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "obj"
            },
            {
              "type": "text",
              "value": " is a list or a tuple, then if the first object is an "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "module",
              "reference": {
                "kind": "api",
                "module": "numpy:ndarray",
                "path": "numpy:ndarray",
                "type": "RefInfo",
                "version": "*"
              },
              "type": "Link",
              "value": "ndarray"
            },
            {
              "type": "text",
              "value": ", call "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "module",
              "reference": {
                "kind": "module",
                "module": "numpy",
                "path": "numpy.rec:fromarrays",
                "type": "RefInfo",
                "version": "1.23.5"
              },
              "type": "Link",
              "value": "fromarrays"
            },
            {
              "type": "text",
              "value": ", otherwise call "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "module",
              "reference": {
                "kind": "module",
                "module": "numpy",
                "path": "numpy.rec:fromrecords",
                "type": "RefInfo",
                "version": "1.23.5"
              },
              "type": "Link",
              "value": "fromrecords"
            },
            {
              "type": "text",
              "value": ". If "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "obj",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "obj"
            },
            {
              "type": "text",
              "value": " is a "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "module",
              "reference": {
                "kind": "api",
                "module": "numpy:recarray",
                "path": "numpy:recarray",
                "type": "RefInfo",
                "version": "*"
              },
              "type": "Link",
              "value": "recarray"
            },
            {
              "type": "text",
              "value": ", then make a copy of the data in the recarray (if "
            },
            {
              "type": "inlineCode",
              "value": "copy=True"
            },
            {
              "type": "text",
              "value": ") and use the new formats, names, and titles. If "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "obj",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "obj"
            },
            {
              "type": "text",
              "value": " is a file, then call "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "fromfile"
            },
            {
              "type": "text",
              "value": ". Finally, if obj is an "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "ndarray"
            },
            {
              "type": "text",
              "value": ", then return "
            },
            {
              "type": "inlineCode",
              "value": "obj.view(recarray)"
            },
            {
              "type": "text",
              "value": ", making a copy of the data if "
            },
            {
              "type": "inlineCode",
              "value": "copy=True"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Input object. See Notes for details on how various input types are treated."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "obj",
              "type": "Param",
              "type_": "any"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Valid dtype for array."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "dtype",
              "type": "Param",
              "type_": "data-type, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Shape of each array."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "shape",
              "type": "Param",
              "type_": "int or tuple of ints, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Position in the file or buffer to start reading from."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "offset",
              "type": "Param",
              "type_": "int, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Buffer ("
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "buf"
                    },
                    {
                      "type": "text",
                      "value": ") is interpreted according to these strides (strides define how many bytes each array element, row, column, etc. occupy in memory)."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "strides",
              "type": "Param",
              "type_": "tuple of ints, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "If "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "dtype",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "dtype"
                    },
                    {
                      "type": "text",
                      "value": " is "
                    },
                    {
                      "type": "inlineCode",
                      "value": "None"
                    },
                    {
                      "type": "text",
                      "value": ", these arguments are passed to "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "module",
                      "reference": {
                        "kind": "api",
                        "module": "numpy:format_parser",
                        "path": "numpy:format_parser",
                        "type": "RefInfo",
                        "version": "*"
                      },
                      "type": "Link",
                      "value": "numpy.format_parser"
                    },
                    {
                      "type": "text",
                      "value": " to construct a dtype. See that function for detailed documentation."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "formats, names, titles, aligned, byteorder",
              "type": "Param",
              "type_": ""
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Whether to copy the input object (True), or to use a reference instead. This option only applies when the input is an ndarray or recarray. Defaults to True."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "copy",
              "type": "Param",
              "type_": "bool, optional"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Record array created from the specified object."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "",
              "type": "Param",
              "type_": "np.recarray"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Construct a record array from a wide-variety of objects."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [
      {
        "type": "code",
        "value": "a = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])"
      },
      {
        "type": "code",
        "value": "np.core.records.array(a)"
      },
      {
        "type": "code",
        "value": "b = [(1, 1), (2, 4), (3, 9)]\nc = np.core.records.array(b, formats = ['i2', 'f2'], names = ('x', 'y'))\nc"
      },
      {
        "type": "code",
        "value": "c.x"
      },
      {
        "type": "code",
        "value": "c.y"
      },
      {
        "type": "code",
        "value": "r = np.rec.array(['abc','def'], names=['col1','col2'])\nprint(r.col1)"
      },
      {
        "type": "code",
        "value": "r.col1"
      },
      {
        "type": "code",
        "value": "r.col2"
      }
    ],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/numpy/core/records.py",
  "item_line": 953,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns",
    "Notes",
    "Examples"
  ],
  "references": null,
  "see_also": [],
  "signature": {
    "type": "Signature",
    "value": "(obj, dtype=None, shape=None, offset=0, strides=None, formats=None, names=None, titles=None, aligned=False, byteorder=None, copy=True)"
  },
  "type": "DocBlob"
}