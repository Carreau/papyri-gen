{
  "aliases": [
    "numpy.testing.assert_array_almost_equal"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [
        {
          "children": [
            {
              "children": [
                {
                  "type": "text",
                  "value": "note It is recommended to use one of `assert_allclose`,"
                }
              ],
              "type": "admonitionTitle"
            },
            {
              "children": [
                {
                  "domain": null,
                  "role": null,
                  "type": "Directive",
                  "value": "assert_array_almost_equal_nulp"
                },
                {
                  "type": "text",
                  "value": " or "
                },
                {
                  "domain": null,
                  "role": null,
                  "type": "Directive",
                  "value": "assert_array_max_ulp"
                },
                {
                  "type": "text",
                  "value": " instead of this function for more consistent floating point comparisons."
                }
              ],
              "type": "paragraph"
            }
          ],
          "kind": "note",
          "type": "admonition"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "The test verifies identical shapes and that the elements of "
            },
            {
              "type": "inlineCode",
              "value": "actual"
            },
            {
              "type": "text",
              "value": " and "
            },
            {
              "type": "inlineCode",
              "value": "desired"
            },
            {
              "type": "text",
              "value": " satisfy."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "children": [
                {
                  "type": "inlineCode",
                  "value": "abs(desired-actual) < 1.5 * 10**(-decimal)"
                }
              ],
              "type": "paragraph"
            }
          ],
          "type": "blockquote"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "That is a looser test than originally documented, but agrees with what the actual implementation did up to rounding vagaries. An exception is raised at shape mismatch or conflicting values. In contrast to the standard usage in numpy, NaNs are compared like numbers, no assertion is raised if both objects have NaNs in the same positions."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The actual object to check."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "x",
              "type": "Param",
              "type_": "array_like"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The desired, expected object."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "y",
              "type": "Param",
              "type_": "array_like"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Desired precision, default is 6."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "decimal",
              "type": "Param",
              "type_": "int, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The error message to be printed in case of failure."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "err_msg",
              "type": "Param",
              "type_": "str, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "If True, the conflicting values are appended to the error message."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "verbose",
              "type": "Param",
              "type_": "bool, optional"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "If actual and desired are not equal up to specified precision."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "",
              "type": "Param",
              "type_": "AssertionError"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Raises an AssertionError if two objects are not equal up to desired precision."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [
      {
        "type": "text",
        "value": "the first assert does not raise an exception"
      },
      {
        "type": "code",
        "value": "np.testing.assert_array_almost_equal([1.0,2.333,np.nan],\n                                     [1.0,2.333,np.nan])"
      },
      {
        "type": "code",
        "value": "np.testing.assert_array_almost_equal([1.0,2.33333,np.nan],\n                                     [1.0,2.33339,np.nan], decimal=5)"
      },
      {
        "type": "code",
        "value": "np.testing.assert_array_almost_equal([1.0,2.33333,np.nan],\n                                     [1.0,2.33333, 5], decimal=5)"
      }
    ],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/numpy/testing/_private/utils.py",
  "item_line": 938,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Raises",
    "See Also",
    "Examples"
  ],
  "references": null,
  "see_also": [
    {
      "descriptions": [
        {
          "children": [
            {
              "type": "text",
              "value": "Compare two array_like objects for equality with desired relative and/or absolute precision."
            }
          ],
          "type": "paragraph"
        }
      ],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "module",
          "module": "numpy",
          "path": "numpy.testing._private.utils:assert_allclose",
          "type": "RefInfo",
          "version": "1.23.5"
        },
        "type": "Link",
        "value": "assert_allclose"
      },
      "type": null
    },
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "module",
          "module": "numpy",
          "path": "numpy.testing._private.utils:assert_array_almost_equal_nulp",
          "type": "RefInfo",
          "version": "1.23.5"
        },
        "type": "Link",
        "value": "assert_array_almost_equal_nulp"
      },
      "type": null
    },
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "module",
          "module": "numpy",
          "path": "numpy.testing._private.utils:assert_array_max_ulp",
          "type": "RefInfo",
          "version": "1.23.5"
        },
        "type": "Link",
        "value": "assert_array_max_ulp"
      },
      "type": null
    },
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "to-resolve",
          "module": "current-module",
          "path": "assert_equal",
          "type": "RefInfo",
          "version": "current-version"
        },
        "type": "Link",
        "value": "assert_equal"
      },
      "type": null
    }
  ],
  "signature": {
    "type": "Signature",
    "value": "(x, y, decimal=6, err_msg='', verbose=True)"
  },
  "type": "DocBlob"
}