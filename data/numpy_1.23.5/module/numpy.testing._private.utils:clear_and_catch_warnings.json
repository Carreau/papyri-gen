{
  "aliases": [
    "numpy.testing.clear_and_catch_warnings"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Warnings can be slippery, because, whenever a warning is triggered, Python adds a "
            },
            {
              "type": "inlineCode",
              "value": "__warningregistry__"
            },
            {
              "type": "text",
              "value": " member to the "
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "calling"
                }
              ],
              "type": "emphasis"
            },
            {
              "type": "text",
              "value": " module.  This makes it impossible to retrigger the warning in this module, whatever you put in the warnings filters.  This context manager accepts a sequence of "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "modules",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "modules"
            },
            {
              "type": "text",
              "value": " as a keyword argument to its constructor and:"
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "stores and removes any "
                    },
                    {
                      "type": "inlineCode",
                      "value": "__warningregistry__"
                    },
                    {
                      "type": "text",
                      "value": " entries in given "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "modules",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "modules"
                    },
                    {
                      "type": "text",
                      "value": "   on entry;"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "resets "
                    },
                    {
                      "type": "inlineCode",
                      "value": "__warningregistry__"
                    },
                    {
                      "type": "text",
                      "value": " to its previous state on exit."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            }
          ],
          "ordered": false,
          "spread": false,
          "start": 1,
          "type": "list"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "This makes it possible to trigger any warning afresh inside the context manager without disturbing the state of warnings outside."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "For compatibility with Python 3.0, please consider all arguments to be keyword-only."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Specifies whether warnings should be captured by a custom implementation of "
                    },
                    {
                      "type": "inlineCode",
                      "value": "warnings.showwarning()"
                    },
                    {
                      "type": "text",
                      "value": " and be appended to a list returned by the context manager. Otherwise None is returned by the context manager. The objects appended to the list are arguments whose attributes mirror the arguments to "
                    },
                    {
                      "type": "inlineCode",
                      "value": "showwarning()"
                    },
                    {
                      "type": "text",
                      "value": "."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "record",
              "type": "Param",
              "type_": "bool, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Sequence of modules for which to reset warnings registry on entry and restore on exit. To work correctly, all 'ignore' filters should filter by one of these modules."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "modules",
              "type": "Param",
              "type_": "sequence, optional"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Context manager that resets warning registry for catching warnings"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [
      {
        "type": "code",
        "value": "import warnings\nwith np.testing.clear_and_catch_warnings(\n        modules=[np.core.fromnumeric]):\n    warnings.simplefilter('always')\n    warnings.filterwarnings('ignore', module='np.core.fromnumeric')\n    # do something that raises a warning but ignore those in\n    # np.core.fromnumeric"
      }
    ],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/numpy/testing/_private/utils.py",
  "item_line": 1961,
  "item_type": "<class 'type'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Examples"
  ],
  "references": null,
  "see_also": [],
  "signature": {
    "type": "Signature",
    "value": null
  },
  "type": "DocBlob"
}