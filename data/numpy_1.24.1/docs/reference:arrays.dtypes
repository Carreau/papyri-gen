{
  "aliases": [],
  "arbitrary": [
    {
      "children": [
        {
          "args": "numpy",
          "children": [],
          "name": "currentmodule",
          "options": {},
          "type": "mystDirective",
          "value": ""
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "A data type object (an instance of "
            },
            {
              "type": "inlineCode",
              "value": "numpy.dtype"
            },
            {
              "type": "text",
              "value": " class) describes how the bytes in the fixed-size block of memory corresponding to an array item should be interpreted. It describes the following aspects of the data:"
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Type of the data (integer, float, Python object, etc.)"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Size of the data (how many bytes is in "
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "e.g."
                        }
                      ],
                      "type": "emphasis"
                    },
                    {
                      "type": "text",
                      "value": " the integer)"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Byte order of the data ("
                    },
                    {
                      "type": "inlineCode",
                      "value": "little-endian"
                    },
                    {
                      "type": "text",
                      "value": " or "
                    },
                    {
                      "type": "inlineCode",
                      "value": "big-endian"
                    },
                    {
                      "type": "text",
                      "value": ")"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "If the data type is "
                    },
                    {
                      "type": "inlineCode",
                      "value": "structured data type"
                    },
                    {
                      "type": "text",
                      "value": ", an aggregate of other    data types, ("
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "e.g."
                        }
                      ],
                      "type": "emphasis"
                    },
                    {
                      "type": "text",
                      "value": ", describing an array item consisting of    an integer and a float),"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "children": [
                        {
                          "children": [
                            {
                              "type": "text",
                              "value": "what are the names of the \""
                            },
                            {
                              "type": "inlineCode",
                              "value": "fields <field>"
                            },
                            {
                              "type": "text",
                              "value": "\" of the structure,       by which they can be "
                            },
                            {
                              "type": "inlineCode",
                              "value": "accessed <arrays.indexing.fields>"
                            },
                            {
                              "type": "text",
                              "value": ","
                            }
                          ],
                          "type": "paragraph"
                        }
                      ],
                      "spread": false,
                      "type": "listItem"
                    },
                    {
                      "children": [
                        {
                          "children": [
                            {
                              "type": "text",
                              "value": "what is the data-type of each "
                            },
                            {
                              "type": "inlineCode",
                              "value": "field"
                            },
                            {
                              "type": "text",
                              "value": ", and"
                            }
                          ],
                          "type": "paragraph"
                        }
                      ],
                      "spread": false,
                      "type": "listItem"
                    },
                    {
                      "children": [
                        {
                          "children": [
                            {
                              "type": "text",
                              "value": "which part of the memory block each field takes."
                            }
                          ],
                          "type": "paragraph"
                        }
                      ],
                      "spread": false,
                      "type": "listItem"
                    }
                  ],
                  "ordered": true,
                  "spread": false,
                  "start": 1,
                  "type": "list"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "If the data type is a sub-array, what is its shape and data type."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            }
          ],
          "ordered": true,
          "spread": false,
          "start": 1,
          "type": "list"
        },
        {
          "args": "",
          "children": [],
          "name": "index",
          "options": {},
          "type": "mystDirective",
          "value": "pair: dtype; scalar"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "To describe the type of scalar data, there are several "
            },
            {
              "type": "inlineCode",
              "value": "built-in\nscalar types <arrays.scalars.built-in>"
            },
            {
              "type": "text",
              "value": " in NumPy for various precision of integers, floating-point numbers, "
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "etc"
                }
              ],
              "type": "emphasis"
            },
            {
              "type": "text",
              "value": ". An item extracted from an array, "
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "e.g."
                }
              ],
              "type": "emphasis"
            },
            {
              "type": "text",
              "value": ", by indexing, will be a Python object whose type is the scalar type associated with the data type of the array."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Note that the scalar types are not "
            },
            {
              "type": "inlineCode",
              "value": "dtype"
            },
            {
              "type": "text",
              "value": " objects, even though they can be used in place of one whenever a data type specification is needed in NumPy."
            }
          ],
          "type": "paragraph"
        },
        {
          "args": "",
          "children": [],
          "name": "index",
          "options": {},
          "type": "mystDirective",
          "value": "pair: dtype; field"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Structured data types are formed by creating a data type whose "
            },
            {
              "type": "inlineCode",
              "value": "field"
            },
            {
              "type": "text",
              "value": " contain other data types. Each field has a name by which it can be "
            },
            {
              "type": "inlineCode",
              "value": "accessed <arrays.indexing.fields>"
            },
            {
              "type": "text",
              "value": ". The parent data type should be of sufficient size to contain all its fields; the parent is nearly always based on the "
            },
            {
              "type": "inlineCode",
              "value": "void"
            },
            {
              "type": "text",
              "value": " type which allows an arbitrary item size. Structured data types may also contain nested structured sub-array data types in their fields."
            }
          ],
          "type": "paragraph"
        },
        {
          "args": "",
          "children": [],
          "name": "index",
          "options": {},
          "type": "mystDirective",
          "value": "pair: dtype; sub-array"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Finally, a data type can describe items that are themselves arrays of items of another data type. These sub-arrays must, however, be of a fixed size."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "If an array is created using a data-type describing a sub-array, the dimensions of the sub-array are appended to the shape of the array when the array is created. Sub-arrays in a field of a structured type behave differently, see "
            },
            {
              "type": "inlineCode",
              "value": "arrays.indexing.fields"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Sub-arrays always have a C-contiguous memory layout."
            }
          ],
          "type": "paragraph"
        },
        {
          "args": "Example",
          "children": [],
          "name": "admonition",
          "options": {},
          "type": "mystDirective",
          "value": "A simple data type containing a 32-bit big-endian integer:\n(see :ref:`arrays.dtypes.constructing` for details on construction)\n\n>>> dt = np.dtype('>i4')\n>>> dt.byteorder\n'>'\n>>> dt.itemsize\n4\n>>> dt.name\n'int32'\n>>> dt.type is np.int32\nTrue\n\nThe corresponding array scalar type is :class:`int32`."
        },
        {
          "args": "Example",
          "children": [],
          "name": "admonition",
          "options": {},
          "type": "mystDirective",
          "value": "A structured data type containing a 16-character string (in field 'name')\nand a sub-array of two 64-bit floating-point number (in field 'grades'):\n\n>>> dt = np.dtype([('name', np.unicode_, 16), ('grades', np.float64, (2,))])\n>>> dt['name']\ndtype('<U16')\n>>> dt['grades']\ndtype(('<f8', (2,)))\n\nItems of an array of this data type are wrapped in an :ref:`array\nscalar <arrays.scalars>` type that also has two fields:\n\n>>> x = np.array([('Sarah', (8.0, 7.0)), ('John', (6.0, 7.0))], dtype=dt)\n>>> x[1]\n('John', [6., 7.])\n>>> x[1]['grades']\narray([6.,  7.])\n>>> type(x[1])\n<class 'numpy.void'>\n>>> type(x[1]['grades'])\n<class 'numpy.ndarray'>"
        }
      ],
      "level": 0,
      "target": "arrays.dtypes",
      "title": "Data type objects (:class:`dtype`)",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Whenever a data-type is required in a NumPy function or method, either a "
            },
            {
              "type": "inlineCode",
              "value": "dtype"
            },
            {
              "type": "text",
              "value": " object or something that can be converted to one can be supplied.  Such conversions are done by the "
            },
            {
              "type": "inlineCode",
              "value": "dtype"
            },
            {
              "type": "text",
              "value": " constructor:"
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": ".. autosummary:: \n    :toctree:generated/\n    dtype"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "What can be converted to a data-type object is described below:"
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "dd": [
                {
                  "args": "",
                  "children": [],
                  "name": "index",
                  "options": {},
                  "type": "mystDirective",
                  "value": "triple: dtype; construction; from dtype"
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Used as-is."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "dt": {
                "children": [
                  {
                    "type": "inlineCode",
                    "value": "dtype"
                  },
                  {
                    "type": "text",
                    "value": " object"
                  }
                ],
                "type": "paragraph"
              },
              "type": "DefListItem"
            },
            {
              "dd": [
                {
                  "args": "",
                  "children": [],
                  "name": "index",
                  "options": {},
                  "type": "mystDirective",
                  "value": "triple: dtype; construction; from None"
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The default data type: "
                    },
                    {
                      "type": "inlineCode",
                      "value": "float_"
                    },
                    {
                      "type": "text",
                      "value": "."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "dt": {
                "children": [
                  {
                    "type": "text",
                    "value": "None"
                  }
                ],
                "type": "paragraph"
              },
              "type": "DefListItem"
            }
          ],
          "type": "DefList"
        },
        {
          "args": "",
          "children": [],
          "name": "index",
          "options": {},
          "type": "mystDirective",
          "value": "triple: dtype; construction; from type"
        },
        {
          "children": [
            {
              "dd": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The 24 built-in "
                    },
                    {
                      "type": "inlineCode",
                      "value": "array scalar type objects\n    <arrays.scalars.built-in>"
                    },
                    {
                      "type": "text",
                      "value": " all convert to an associated data-type object.     This is true for their sub-classes as well."
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Note that not all data-type information can be supplied with a     type-object: for example, "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "flexible"
                    },
                    {
                      "type": "text",
                      "value": " data-types have     a default "
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "itemsize"
                        }
                      ],
                      "type": "emphasis"
                    },
                    {
                      "type": "text",
                      "value": " of 0, and require an explicitly given size     to be useful."
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "args": "Example",
                  "children": [],
                  "name": "admonition",
                  "options": {},
                  "type": "mystDirective",
                  "value": ">>> dt = np.dtype(np.int32)      # 32-bit integer\n    >>> dt = np.dtype(np.complex128) # 128-bit complex floating-point number"
                }
              ],
              "dt": {
                "children": [
                  {
                    "type": "text",
                    "value": "Array-scalar types"
                  }
                ],
                "type": "paragraph"
              },
              "type": "DefListItem"
            },
            {
              "dd": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The generic hierarchical type objects convert to corresponding     type objects according to the associations:"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "=====================================================  ===============     "
                    },
                    {
                      "type": "inlineCode",
                      "value": "number"
                    },
                    {
                      "type": "text",
                      "value": ", "
                    },
                    {
                      "type": "inlineCode",
                      "value": "inexact"
                    },
                    {
                      "type": "text",
                      "value": ", "
                    },
                    {
                      "type": "inlineCode",
                      "value": "floating"
                    },
                    {
                      "type": "text",
                      "value": "   "
                    },
                    {
                      "type": "inlineCode",
                      "value": "float"
                    },
                    {
                      "type": "text",
                      "value": "     "
                    },
                    {
                      "type": "inlineCode",
                      "value": "complexfloating"
                    },
                    {
                      "type": "text",
                      "value": "                               "
                    },
                    {
                      "type": "inlineCode",
                      "value": "cfloat"
                    },
                    {
                      "type": "text",
                      "value": "     "
                    },
                    {
                      "type": "inlineCode",
                      "value": "integer"
                    },
                    {
                      "type": "text",
                      "value": ", "
                    },
                    {
                      "type": "inlineCode",
                      "value": "signedinteger"
                    },
                    {
                      "type": "text",
                      "value": "               "
                    },
                    {
                      "type": "inlineCode",
                      "value": "int\\_"
                    },
                    {
                      "type": "text",
                      "value": "     "
                    },
                    {
                      "type": "inlineCode",
                      "value": "unsignedinteger"
                    },
                    {
                      "type": "text",
                      "value": "                               "
                    },
                    {
                      "type": "inlineCode",
                      "value": "uint"
                    },
                    {
                      "type": "text",
                      "value": "     "
                    },
                    {
                      "type": "inlineCode",
                      "value": "character"
                    },
                    {
                      "type": "text",
                      "value": "                                     "
                    },
                    {
                      "type": "inlineCode",
                      "value": "string"
                    },
                    {
                      "type": "text",
                      "value": "     "
                    },
                    {
                      "type": "inlineCode",
                      "value": "generic"
                    },
                    {
                      "type": "text",
                      "value": ", "
                    },
                    {
                      "type": "inlineCode",
                      "value": "flexible"
                    },
                    {
                      "type": "text",
                      "value": "                    "
                    },
                    {
                      "type": "inlineCode",
                      "value": "void"
                    },
                    {
                      "type": "text",
                      "value": "     =====================================================  ==============="
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "deprecated 1.19"
                        }
                      ],
                      "type": "admonitionTitle"
                    },
                    {
                      "children": [
                        {
                          "dd": [
                            {
                              "children": [
                                {
                                  "type": "text",
                                  "value": "This is because it can be unexpected in a context such as     "
                                },
                                {
                                  "type": "inlineCode",
                                  "value": "arr.astype(dtype=np.floating)"
                                },
                                {
                                  "type": "text",
                                  "value": ", which casts an array of "
                                },
                                {
                                  "type": "inlineCode",
                                  "value": "float32"
                                },
                                {
                                  "type": "text",
                                  "value": "     to an array of "
                                },
                                {
                                  "type": "inlineCode",
                                  "value": "float64"
                                },
                                {
                                  "type": "text",
                                  "value": ", even though "
                                },
                                {
                                  "type": "inlineCode",
                                  "value": "float32"
                                },
                                {
                                  "type": "text",
                                  "value": " is a subdtype of     "
                                },
                                {
                                  "type": "inlineCode",
                                  "value": "np.floating"
                                },
                                {
                                  "type": "text",
                                  "value": "."
                                }
                              ],
                              "type": "paragraph"
                            }
                          ],
                          "dt": {
                            "children": [
                              {
                                "type": "text",
                                "value": "This conversion of generic scalar types is deprecated."
                              }
                            ],
                            "type": "paragraph"
                          },
                          "type": "DefListItem"
                        }
                      ],
                      "type": "DefList"
                    }
                  ],
                  "kind": "note",
                  "type": "admonition"
                }
              ],
              "dt": {
                "children": [
                  {
                    "type": "text",
                    "value": "Generic types"
                  }
                ],
                "type": "paragraph"
              },
              "type": "DefListItem"
            },
            {
              "dd": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Several python types are equivalent to a corresponding     array scalar when used to generate a "
                    },
                    {
                      "type": "inlineCode",
                      "value": "dtype"
                    },
                    {
                      "type": "text",
                      "value": " object:"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "================  ===============     "
                    },
                    {
                      "type": "inlineCode",
                      "value": "int"
                    },
                    {
                      "type": "text",
                      "value": "      "
                    },
                    {
                      "type": "inlineCode",
                      "value": "int\\_"
                    },
                    {
                      "type": "text",
                      "value": "     "
                    },
                    {
                      "type": "inlineCode",
                      "value": "bool"
                    },
                    {
                      "type": "text",
                      "value": "     "
                    },
                    {
                      "type": "inlineCode",
                      "value": "bool\\_"
                    },
                    {
                      "type": "text",
                      "value": "     "
                    },
                    {
                      "type": "inlineCode",
                      "value": "float"
                    },
                    {
                      "type": "text",
                      "value": "    "
                    },
                    {
                      "type": "inlineCode",
                      "value": "float\\_"
                    },
                    {
                      "type": "text",
                      "value": "     "
                    },
                    {
                      "type": "inlineCode",
                      "value": "complex"
                    },
                    {
                      "type": "text",
                      "value": "  "
                    },
                    {
                      "type": "inlineCode",
                      "value": "cfloat"
                    },
                    {
                      "type": "text",
                      "value": "     "
                    },
                    {
                      "type": "inlineCode",
                      "value": "bytes"
                    },
                    {
                      "type": "text",
                      "value": "    "
                    },
                    {
                      "type": "inlineCode",
                      "value": "bytes\\_"
                    },
                    {
                      "type": "text",
                      "value": "     "
                    },
                    {
                      "type": "inlineCode",
                      "value": "str"
                    },
                    {
                      "type": "text",
                      "value": "      "
                    },
                    {
                      "type": "inlineCode",
                      "value": "str\\_"
                    },
                    {
                      "type": "text",
                      "value": "     "
                    },
                    {
                      "type": "inlineCode",
                      "value": "buffer"
                    },
                    {
                      "type": "text",
                      "value": "   "
                    },
                    {
                      "type": "inlineCode",
                      "value": "void"
                    },
                    {
                      "type": "text",
                      "value": "     (all others)      "
                    },
                    {
                      "type": "inlineCode",
                      "value": "object_"
                    },
                    {
                      "type": "text",
                      "value": "     ================  ==============="
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Note that "
                    },
                    {
                      "type": "inlineCode",
                      "value": "str"
                    },
                    {
                      "type": "text",
                      "value": " corresponds to UCS4 encoded unicode strings, while     "
                    },
                    {
                      "type": "inlineCode",
                      "value": "string"
                    },
                    {
                      "type": "text",
                      "value": " is an alias to "
                    },
                    {
                      "type": "inlineCode",
                      "value": "bytes_"
                    },
                    {
                      "type": "text",
                      "value": ". The name "
                    },
                    {
                      "type": "inlineCode",
                      "value": "np.unicode_"
                    },
                    {
                      "type": "text",
                      "value": " is also     available as an alias to "
                    },
                    {
                      "type": "inlineCode",
                      "value": "np.str_"
                    },
                    {
                      "type": "text",
                      "value": ", see "
                    },
                    {
                      "type": "inlineCode",
                      "value": "Note on string\n    types<string-dtype-note>"
                    },
                    {
                      "type": "text",
                      "value": "."
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "args": "Example",
                  "children": [],
                  "name": "admonition",
                  "options": {},
                  "type": "mystDirective",
                  "value": ">>> dt = np.dtype(float)   # Python-compatible floating-point number\n    >>> dt = np.dtype(int)     # Python-compatible integer\n    >>> dt = np.dtype(object)  # Python object"
                },
                {
                  "children": [
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "note "
                        }
                      ],
                      "type": "admonitionTitle"
                    },
                    {
                      "children": [
                        {
                          "dd": [
                            {
                              "children": [
                                {
                                  "type": "text",
                                  "value": "that such types may map to a specific (new) dtype in the future."
                                }
                              ],
                              "type": "paragraph"
                            }
                          ],
                          "dt": {
                            "children": [
                              {
                                "type": "text",
                                "value": "All other types map to "
                              },
                              {
                                "type": "inlineCode",
                                "value": "object_"
                              },
                              {
                                "type": "text",
                                "value": " for convenience. Code should expect"
                              }
                            ],
                            "type": "paragraph"
                          },
                          "type": "DefListItem"
                        }
                      ],
                      "type": "DefList"
                    }
                  ],
                  "kind": "note",
                  "type": "admonition"
                }
              ],
              "dt": {
                "children": [
                  {
                    "type": "text",
                    "value": "Built-in Python types"
                  }
                ],
                "type": "paragraph"
              },
              "type": "DefListItem"
            },
            {
              "dd": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Any type object with a "
                    },
                    {
                      "type": "inlineCode",
                      "value": "dtype"
                    },
                    {
                      "type": "text",
                      "value": " attribute: The attribute will be     accessed and used directly. The attribute must return something     that is convertible into a dtype object."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "dt": {
                "children": [
                  {
                    "type": "text",
                    "value": "Types with "
                  },
                  {
                    "type": "inlineCode",
                    "value": ".dtype"
                  }
                ],
                "type": "paragraph"
              },
              "type": "DefListItem"
            }
          ],
          "type": "DefList"
        },
        {
          "args": "",
          "children": [],
          "name": "index",
          "options": {},
          "type": "mystDirective",
          "value": "triple: dtype; construction; from string"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Several kinds of strings can be converted. Recognized strings can be prepended with "
            },
            {
              "type": "inlineCode",
              "value": "'>'"
            },
            {
              "type": "text",
              "value": " ("
            },
            {
              "type": "inlineCode",
              "value": "big-endian"
            },
            {
              "type": "text",
              "value": "), "
            },
            {
              "type": "inlineCode",
              "value": "'<'"
            },
            {
              "type": "text",
              "value": " ("
            },
            {
              "type": "inlineCode",
              "value": "little-endian"
            },
            {
              "type": "text",
              "value": "), or "
            },
            {
              "type": "inlineCode",
              "value": "'='"
            },
            {
              "type": "text",
              "value": " (hardware-native, the default), to specify the byte order."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "dd": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Each built-in data-type has a character code     (the updated Numeric typecodes), that uniquely identifies it."
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "args": "Example",
                  "children": [],
                  "name": "admonition",
                  "options": {},
                  "type": "mystDirective",
                  "value": ">>> dt = np.dtype('b')  # byte, native byte order\n    >>> dt = np.dtype('>H') # big-endian unsigned short\n    >>> dt = np.dtype('<f') # little-endian single-precision float\n    >>> dt = np.dtype('d')  # double-precision floating-point number"
                }
              ],
              "dt": {
                "children": [
                  {
                    "type": "text",
                    "value": "One-character strings"
                  }
                ],
                "type": "paragraph"
              },
              "type": "DefListItem"
            },
            {
              "dd": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The first character specifies the kind of data and the remaining    characters specify the number of bytes per item, except for Unicode,    where it is interpreted as the number of characters.  The item size    must correspond to an existing type, or an error will be raised.  The    supported kinds are"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "================   ========================    "
                    },
                    {
                      "type": "inlineCode",
                      "value": "'?'"
                    },
                    {
                      "type": "text",
                      "value": "            boolean    "
                    },
                    {
                      "type": "inlineCode",
                      "value": "'b'"
                    },
                    {
                      "type": "text",
                      "value": "            (signed) byte    "
                    },
                    {
                      "type": "inlineCode",
                      "value": "'B'"
                    },
                    {
                      "type": "text",
                      "value": "            unsigned byte    "
                    },
                    {
                      "type": "inlineCode",
                      "value": "'i'"
                    },
                    {
                      "type": "text",
                      "value": "            (signed) integer    "
                    },
                    {
                      "type": "inlineCode",
                      "value": "'u'"
                    },
                    {
                      "type": "text",
                      "value": "            unsigned integer    "
                    },
                    {
                      "type": "inlineCode",
                      "value": "'f'"
                    },
                    {
                      "type": "text",
                      "value": "            floating-point    "
                    },
                    {
                      "type": "inlineCode",
                      "value": "'c'"
                    },
                    {
                      "type": "text",
                      "value": "            complex-floating point    "
                    },
                    {
                      "type": "inlineCode",
                      "value": "'m'"
                    },
                    {
                      "type": "text",
                      "value": "            timedelta    "
                    },
                    {
                      "type": "inlineCode",
                      "value": "'M'"
                    },
                    {
                      "type": "text",
                      "value": "            datetime    "
                    },
                    {
                      "type": "inlineCode",
                      "value": "'O'"
                    },
                    {
                      "type": "text",
                      "value": "            (Python) objects    "
                    },
                    {
                      "type": "inlineCode",
                      "value": "'S'"
                    },
                    {
                      "type": "text",
                      "value": ", "
                    },
                    {
                      "type": "inlineCode",
                      "value": "'a'"
                    },
                    {
                      "type": "text",
                      "value": "   zero-terminated bytes (not recommended)    "
                    },
                    {
                      "type": "inlineCode",
                      "value": "'U'"
                    },
                    {
                      "type": "text",
                      "value": "            Unicode string    "
                    },
                    {
                      "type": "inlineCode",
                      "value": "'V'"
                    },
                    {
                      "type": "text",
                      "value": "            raw data ("
                    },
                    {
                      "type": "inlineCode",
                      "value": "void"
                    },
                    {
                      "type": "text",
                      "value": ")    ================   ========================"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "args": "Example",
                  "children": [],
                  "name": "admonition",
                  "options": {},
                  "type": "mystDirective",
                  "value": ">>> dt = np.dtype('i4')   # 32-bit signed integer\n   >>> dt = np.dtype('f8')   # 64-bit floating-point number\n   >>> dt = np.dtype('c16')  # 128-bit complex floating-point number\n   >>> dt = np.dtype('a25')  # 25-length zero-terminated bytes\n   >>> dt = np.dtype('U25')  # 25-character string"
                },
                {
                  "placeholder": "untarget",
                  "type": "Unimplemented",
                  "value": "_string-dtype-note:"
                },
                {
                  "args": "Note on string types",
                  "children": [],
                  "name": "admonition",
                  "options": {},
                  "type": "mystDirective",
                  "value": "For backward compatibility with existing code originally written to support\n   Python 2, ``S`` and ``a`` typestrings are zero-terminated bytes and\n   `numpy.string_` continues to alias `numpy.bytes_`. For unicode strings,\n   use ``U``, `numpy.str_`, or `numpy.unicode_`.  For signed bytes that do not\n   need zero-termination ``b`` or ``i1`` can be used."
                }
              ],
              "dt": {
                "children": [
                  {
                    "type": "text",
                    "value": "Array-protocol type strings (see "
                  },
                  {
                    "type": "inlineCode",
                    "value": "arrays.interface"
                  },
                  {
                    "type": "text",
                    "value": ")"
                  }
                ],
                "type": "paragraph"
              },
              "type": "DefListItem"
            },
            {
              "dd": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "A short-hand notation for specifying the format of a structured data type is    a comma-separated string of basic formats."
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "A basic format in this context is an optional shape specifier    followed by an array-protocol type string. Parenthesis are required    on the shape if it has more than one dimension. NumPy allows a modification    on the format in that any string that can uniquely identify the    type can be used to specify the data-type in a field.    The generated data-type fields are named "
                    },
                    {
                      "type": "inlineCode",
                      "value": "'f0'"
                    },
                    {
                      "type": "text",
                      "value": ", "
                    },
                    {
                      "type": "inlineCode",
                      "value": "'f1'"
                    },
                    {
                      "type": "text",
                      "value": ", ...,    "
                    },
                    {
                      "type": "inlineCode",
                      "value": "'f<N-1>'"
                    },
                    {
                      "type": "text",
                      "value": " where N (>1) is the number of comma-separated basic    formats in the string. If the optional shape specifier is provided,    then the data-type for the corresponding field describes a sub-array."
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "args": "Example",
                  "children": [],
                  "name": "admonition",
                  "options": {},
                  "type": "mystDirective",
                  "value": "- field named ``f0`` containing a 32-bit integer\n   - field named ``f1`` containing a 2 x 3 sub-array\n     of 64-bit floating-point numbers\n   - field named ``f2`` containing a 32-bit floating-point number\n\n   >>> dt = np.dtype(\"i4, (2,3)f8, f4\")\n\n   - field named ``f0`` containing a 3-character string\n   - field named ``f1`` containing a sub-array of shape (3,)\n     containing 64-bit unsigned integers\n   - field named ``f2`` containing a 3 x 4 sub-array\n     containing 10-character strings\n\n   >>> dt = np.dtype(\"a3, 3u8, (3,4)a10\")"
                }
              ],
              "dt": {
                "children": [
                  {
                    "type": "text",
                    "value": "String with comma-separated fields"
                  }
                ],
                "type": "paragraph"
              },
              "type": "DefListItem"
            },
            {
              "dd": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Any string in "
                    },
                    {
                      "type": "inlineCode",
                      "value": "numpy.sctypeDict"
                    },
                    {
                      "type": "text",
                      "value": ".keys():"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "args": "Example",
                  "children": [],
                  "name": "admonition",
                  "options": {},
                  "type": "mystDirective",
                  "value": ">>> dt = np.dtype('uint32')   # 32-bit unsigned integer\n   >>> dt = np.dtype('float64')  # 64-bit floating-point number"
                }
              ],
              "dt": {
                "children": [
                  {
                    "type": "text",
                    "value": "Type strings"
                  }
                ],
                "type": "paragraph"
              },
              "type": "DefListItem"
            }
          ],
          "type": "DefList"
        },
        {
          "args": "",
          "children": [],
          "name": "index",
          "options": {},
          "type": "mystDirective",
          "value": "triple: dtype; construction; from tuple"
        },
        {
          "children": [
            {
              "dd": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The first argument must be an object that is converted to a     zero-sized flexible data-type object, the second argument is     an integer providing the desired itemsize."
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "args": "Example",
                  "children": [],
                  "name": "admonition",
                  "options": {},
                  "type": "mystDirective",
                  "value": ">>> dt = np.dtype((np.void, 10))  # 10-byte wide data block\n    >>> dt = np.dtype(('U', 10))   # 10-character unicode string"
                }
              ],
              "dt": {
                "children": [
                  {
                    "type": "inlineCode",
                    "value": "(flexible_dtype, itemsize)"
                  }
                ],
                "type": "paragraph"
              },
              "type": "DefListItem"
            },
            {
              "dd": [
                {
                  "args": "",
                  "children": [],
                  "name": "index",
                  "options": {},
                  "type": "mystDirective",
                  "value": "pair: dtype; sub-array"
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The first argument is any object that can be converted into a     fixed-size data-type object. The second argument is the desired     shape of this type. If the shape parameter is 1, then the     data-type object used to be equivalent to fixed dtype. This behaviour is     deprecated since NumPy 1.17 and will raise an error in the future.     If "
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "shape"
                        }
                      ],
                      "type": "emphasis"
                    },
                    {
                      "type": "text",
                      "value": " is a tuple, then the new dtype defines a sub-array of the given     shape."
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "args": "Example",
                  "children": [],
                  "name": "admonition",
                  "options": {},
                  "type": "mystDirective",
                  "value": ">>> dt = np.dtype((np.int32, (2,2)))          # 2 x 2 integer sub-array\n    >>> dt = np.dtype(('i4, (2,3)f8, f4', (2,3))) # 2 x 3 structured sub-array"
                }
              ],
              "dt": {
                "children": [
                  {
                    "type": "inlineCode",
                    "value": "(fixed_dtype, shape)"
                  }
                ],
                "type": "paragraph"
              },
              "type": "DefListItem"
            }
          ],
          "type": "DefList"
        },
        {
          "args": "",
          "children": [],
          "name": "index",
          "options": {},
          "type": "mystDirective",
          "value": "triple: dtype; construction; from list"
        },
        {
          "children": [
            {
              "dd": [
                {
                  "children": [
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "obj"
                        }
                      ],
                      "type": "emphasis"
                    },
                    {
                      "type": "text",
                      "value": " should be a list of fields where each field is described by a    tuple of length 2 or 3. (Equivalent to the "
                    },
                    {
                      "type": "inlineCode",
                      "value": "descr"
                    },
                    {
                      "type": "text",
                      "value": " item in the    "
                    },
                    {
                      "type": "inlineCode",
                      "value": "~object.__array_interface__"
                    },
                    {
                      "type": "text",
                      "value": " attribute.)"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The first element, "
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "field_name"
                        }
                      ],
                      "type": "emphasis"
                    },
                    {
                      "type": "text",
                      "value": ", is the field name (if this is    "
                    },
                    {
                      "type": "inlineCode",
                      "value": "''"
                    },
                    {
                      "type": "text",
                      "value": " then a standard field name, "
                    },
                    {
                      "type": "inlineCode",
                      "value": "'f#'"
                    },
                    {
                      "type": "text",
                      "value": ", is assigned).  The    field name may also be a 2-tuple of strings where the first string    is either a \"title\" (which may be any string or unicode string) or    meta-data for the field which can be any object, and the second    string is the \"name\" which must be a valid Python identifier."
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The second element, "
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "field_dtype"
                        }
                      ],
                      "type": "emphasis"
                    },
                    {
                      "type": "text",
                      "value": ", can be anything that can be    interpreted as a data-type."
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The optional third element "
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "field_shape"
                        }
                      ],
                      "type": "emphasis"
                    },
                    {
                      "type": "text",
                      "value": " contains the shape if this    field represents an array of the data-type in the second    element. Note that a 3-tuple with a third argument equal to 1 is    equivalent to a 2-tuple."
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "This style does not accept "
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "align"
                        }
                      ],
                      "type": "emphasis"
                    },
                    {
                      "type": "text",
                      "value": " in the "
                    },
                    {
                      "type": "inlineCode",
                      "value": "dtype"
                    },
                    {
                      "type": "text",
                      "value": "    constructor as it is assumed that all of the memory is accounted    for by the array interface description."
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "args": "Example",
                  "children": [],
                  "name": "admonition",
                  "options": {},
                  "type": "mystDirective",
                  "value": "Data-type with fields ``big`` (big-endian 32-bit integer) and\n   ``little`` (little-endian 32-bit integer):\n\n   >>> dt = np.dtype([('big', '>i4'), ('little', '<i4')])\n\n   Data-type with fields ``R``, ``G``, ``B``, ``A``, each being an\n   unsigned 8-bit integer:\n\n   >>> dt = np.dtype([('R','u1'), ('G','u1'), ('B','u1'), ('A','u1')])"
                }
              ],
              "dt": {
                "children": [
                  {
                    "type": "inlineCode",
                    "value": "[(field_name, field_dtype, field_shape), ...]"
                  }
                ],
                "type": "paragraph"
              },
              "type": "DefListItem"
            }
          ],
          "type": "DefList"
        },
        {
          "args": "",
          "children": [],
          "name": "index",
          "options": {},
          "type": "mystDirective",
          "value": "triple: dtype; construction; from dict"
        },
        {
          "children": [
            {
              "dd": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "This style has two required and three optional keys.  The "
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "names"
                        }
                      ],
                      "type": "emphasis"
                    },
                    {
                      "type": "text",
                      "value": "     and "
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "formats"
                        }
                      ],
                      "type": "emphasis"
                    },
                    {
                      "type": "text",
                      "value": " keys are required. Their respective values are     equal-length lists with the field names and the field formats.     The field names must be strings and the field formats can be any     object accepted by "
                    },
                    {
                      "type": "inlineCode",
                      "value": "dtype"
                    },
                    {
                      "type": "text",
                      "value": " constructor."
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "When the optional keys "
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "offsets"
                        }
                      ],
                      "type": "emphasis"
                    },
                    {
                      "type": "text",
                      "value": " and "
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "titles"
                        }
                      ],
                      "type": "emphasis"
                    },
                    {
                      "type": "text",
                      "value": " are provided,     their values must each be lists of the same length as the "
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "names"
                        }
                      ],
                      "type": "emphasis"
                    },
                    {
                      "type": "text",
                      "value": "     and "
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "formats"
                        }
                      ],
                      "type": "emphasis"
                    },
                    {
                      "type": "text",
                      "value": " lists. The "
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "offsets"
                        }
                      ],
                      "type": "emphasis"
                    },
                    {
                      "type": "text",
                      "value": " value is a list of byte offsets     (limited to "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "module",
                      "reference": {
                        "kind": "api",
                        "module": "ctypes",
                        "path": "ctypes:c_int",
                        "type": "RefInfo",
                        "version": "*"
                      },
                      "type": "Link",
                      "value": "ctypes.c_int"
                    },
                    {
                      "type": "text",
                      "value": ") for each field, while the "
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "titles"
                        }
                      ],
                      "type": "emphasis"
                    },
                    {
                      "type": "text",
                      "value": " value is a     list of titles for each field ("
                    },
                    {
                      "type": "inlineCode",
                      "value": "None"
                    },
                    {
                      "type": "text",
                      "value": " can be used if no title is     desired for that field). The "
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "titles"
                        }
                      ],
                      "type": "emphasis"
                    },
                    {
                      "type": "text",
                      "value": " can be any object, but when a     "
                    },
                    {
                      "type": "inlineCode",
                      "value": "str"
                    },
                    {
                      "type": "text",
                      "value": " object will add another entry to the     fields dictionary keyed by the title and referencing the same     field tuple which will contain the title as an additional tuple     member."
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The "
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "itemsize"
                        }
                      ],
                      "type": "emphasis"
                    },
                    {
                      "type": "text",
                      "value": " key allows the total size of the dtype to be     set, and must be an integer large enough so all the fields     are within the dtype. If the dtype being constructed is aligned,     the "
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "itemsize"
                        }
                      ],
                      "type": "emphasis"
                    },
                    {
                      "type": "text",
                      "value": " must also be divisible by the struct alignment. Total dtype     "
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "itemsize"
                        }
                      ],
                      "type": "emphasis"
                    },
                    {
                      "type": "text",
                      "value": " is limited to "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "module",
                      "reference": {
                        "kind": "api",
                        "module": "ctypes",
                        "path": "ctypes:c_int",
                        "type": "RefInfo",
                        "version": "*"
                      },
                      "type": "Link",
                      "value": "ctypes.c_int"
                    },
                    {
                      "type": "text",
                      "value": "."
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "args": "Example",
                  "children": [],
                  "name": "admonition",
                  "options": {},
                  "type": "mystDirective",
                  "value": "Data type with fields ``r``, ``g``, ``b``, ``a``, each being\n    an 8-bit unsigned integer:\n\n    >>> dt = np.dtype({'names': ['r','g','b','a'],\n    ...                'formats': [np.uint8, np.uint8, np.uint8, np.uint8]})\n\n    Data type with fields ``r`` and ``b`` (with the given titles),\n    both being 8-bit unsigned integers, the first at byte position\n    0 from the start of the field and the second at position 2:\n\n    >>> dt = np.dtype({'names': ['r','b'], 'formats': ['u1', 'u1'],\n    ...                'offsets': [0, 2],\n    ...                'titles': ['Red pixel', 'Blue pixel']})"
                }
              ],
              "dt": {
                "children": [
                  {
                    "type": "inlineCode",
                    "value": "{'names': ..., 'formats': ..., 'offsets': ..., 'titles': ..., 'itemsize': ...}"
                  }
                ],
                "type": "paragraph"
              },
              "type": "DefListItem"
            },
            {
              "dd": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "This usage is discouraged, because it is ambiguous with the     other dict-based construction method. If you have a field     called 'names' and a field called 'formats' there will be     a conflict."
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "This style allows passing in the "
                    },
                    {
                      "type": "inlineCode",
                      "value": "fields <dtype.fields>"
                    },
                    {
                      "type": "text",
                      "value": "     attribute of a data-type object."
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "obj"
                        }
                      ],
                      "type": "emphasis"
                    },
                    {
                      "type": "text",
                      "value": " should contain string or unicode keys that refer to     "
                    },
                    {
                      "type": "inlineCode",
                      "value": "(data-type, offset)"
                    },
                    {
                      "type": "text",
                      "value": " or "
                    },
                    {
                      "type": "inlineCode",
                      "value": "(data-type, offset, title)"
                    },
                    {
                      "type": "text",
                      "value": " tuples."
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "args": "Example",
                  "children": [],
                  "name": "admonition",
                  "options": {},
                  "type": "mystDirective",
                  "value": "Data type containing field ``col1`` (10-character string at\n    byte position 0), ``col2`` (32-bit float at byte position 10),\n    and ``col3`` (integers at byte position 14):\n\n    >>> dt = np.dtype({'col1': ('U10', 0), 'col2': (np.float32, 10),\n    ...                'col3': (int, 14)})"
                }
              ],
              "dt": {
                "children": [
                  {
                    "type": "inlineCode",
                    "value": "{'field1': ..., 'field2': ..., ...}"
                  }
                ],
                "type": "paragraph"
              },
              "type": "DefListItem"
            },
            {
              "dd": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "In NumPy 1.7 and later, this form allows "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "base_dtype"
                    },
                    {
                      "type": "text",
                      "value": " to be interpreted as     a structured dtype. Arrays created with this dtype will have underlying     dtype "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "base_dtype"
                    },
                    {
                      "type": "text",
                      "value": " but will have fields and flags taken from "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "new_dtype"
                    },
                    {
                      "type": "text",
                      "value": ".     This is useful for creating custom structured dtypes, as done in     "
                    },
                    {
                      "type": "inlineCode",
                      "value": "record arrays <arrays.classes.rec>"
                    },
                    {
                      "type": "text",
                      "value": "."
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "This form also makes it possible to specify struct dtypes with overlapping     fields, functioning like the 'union' type in C. This usage is discouraged,     however, and the union mechanism is preferred."
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Both arguments must be convertible to data-type objects with the same total     size."
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "args": "Example",
                  "children": [],
                  "name": "admonition",
                  "options": {},
                  "type": "mystDirective",
                  "value": "32-bit integer, whose first two bytes are interpreted as an integer\n    via field ``real``, and the following two bytes via field ``imag``.\n\n    >>> dt = np.dtype((np.int32,{'real':(np.int16, 0),'imag':(np.int16, 2)}))\n\n    32-bit integer, which is interpreted as consisting of a sub-array\n    of shape ``(4,)`` containing 8-bit integers:\n\n    >>> dt = np.dtype((np.int32, (np.int8, 4)))\n\n    32-bit integer, containing fields ``r``, ``g``, ``b``, ``a`` that\n    interpret the 4 bytes in the integer as four unsigned integers:\n\n    >>> dt = np.dtype(('i4', [('r','u1'),('g','u1'),('b','u1'),('a','u1')]))"
                }
              ],
              "dt": {
                "children": [
                  {
                    "type": "inlineCode",
                    "value": "(base_dtype, new_dtype)"
                  }
                ],
                "type": "paragraph"
              },
              "type": "DefListItem"
            }
          ],
          "type": "DefList"
        }
      ],
      "level": 1,
      "target": "arrays.dtypes.constructing",
      "title": "Specifying and constructing data types",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "NumPy data type descriptions are instances of the "
            },
            {
              "type": "inlineCode",
              "value": "dtype"
            },
            {
              "type": "text",
              "value": " class."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 1,
      "target": null,
      "title": ":class:`dtype`",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "The type of the data is described by the following "
            },
            {
              "type": "inlineCode",
              "value": "dtype"
            },
            {
              "type": "text",
              "value": "  attributes:"
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": ".. autosummary:: \n    :toctree:generated/\n    dtype.type\n    dtype.kind\n    dtype.char\n    dtype.num\n    dtype.str"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Size of the data is in turn described by:"
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": ".. autosummary:: \n    :toctree:generated/\n    dtype.name\n    dtype.itemsize"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Endianness of this data:"
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": ".. autosummary:: \n    :toctree:generated/\n    dtype.byteorder"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Information about sub-data-types in a "
            },
            {
              "type": "inlineCode",
              "value": "structured data type"
            },
            {
              "type": "text",
              "value": ":"
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": ".. autosummary:: \n    :toctree:generated/\n    dtype.fields\n    dtype.names"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "For data types that describe sub-arrays:"
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": ".. autosummary:: \n    :toctree:generated/\n    dtype.subdtype\n    dtype.shape"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Attributes providing additional information:"
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": ".. autosummary:: \n    :toctree:generated/\n    dtype.hasobject\n    dtype.flags\n    dtype.isbuiltin\n    dtype.isnative\n    dtype.descr\n    dtype.alignment\n    dtype.base"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Metadata attached by the user:"
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": ".. autosummary:: \n    :toctree:generated/\n\n    dtype.metadata\n"
        }
      ],
      "level": 2,
      "target": null,
      "title": "Attributes",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Data types have the following method for changing the byte order:"
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": ".. autosummary:: \n    :toctree:generated/\n    dtype.newbyteorder"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "The following methods implement the pickle protocol:"
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": ".. autosummary:: \n    :toctree:generated/\n    dtype.__reduce__\n    dtype.__setstate__"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Utility method for typing:"
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": ".. autosummary:: \n    :toctree:generated/\n    dtype.__class_getitem__"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Comparison operations:"
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": ".. autosummary:: \n    :toctree:generated/\n    dtype.__ge__\n    dtype.__gt__\n    dtype.__le__\n    dtype.__lt__"
        }
      ],
      "level": 2,
      "target": null,
      "title": "Methods",
      "type": "Section"
    }
  ],
  "content": {},
  "example_section_data": {
    "children": [],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": null,
  "item_line": null,
  "item_type": null,
  "ordered_sections": [],
  "references": null,
  "see_also": [],
  "signature": {
    "type": "Signature",
    "value": null
  },
  "type": "DocBlob"
}