{
  "aliases": [],
  "arbitrary": [
    {
      "children": [],
      "level": 0,
      "target": null,
      "title": "Testing the numpy.i Typemaps"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Writing tests for the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "numpy.i"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " "
                },
                "type": "Words"
              },
              {
                "data": {
                  "target": "http://www.swig.org",
                  "value": "SWIG"
                },
                "type": "ExternalLink"
              },
              {
                "data": {
                  "value": " interface file is a combinatorial headache.  At present, 12 different data types are supported, each with 74 different argument signatures, for a total of 888 typemaps supported \"out of the box\".  Each of these typemaps, in turn, might require several unit tests in order to verify expected behavior for both proper and improper inputs.  Currently, this results in more than 1,000 individual unit tests executed when "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "make test"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " is run in the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "numpy/tools/swig"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " subdirectory."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "To facilitate this many similar unit tests, some high-level programming techniques are employed, including C and "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "SWIG"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " macros, as well as Python inheritance.  The purpose of this document is to describe the testing infrastructure employed to verify that the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "numpy.i"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " typemaps are working as expected."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "level": 1,
      "target": null,
      "title": "Introduction"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "There are three independent testing frameworks supported, for one-, two-, and three-dimensional arrays respectively.  For one-dimensional arrays, there are two C++ files, a header and a source, named:      "
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": "Vector.h\nVector.cxx"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "that contain prototypes and code for a variety of functions that have one-dimensional arrays as function arguments.  The file:      "
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": "Vector.i"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "is a "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "SWIG"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " interface file that defines a python module "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "Vector"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " that wraps the functions in "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "Vector.h"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " while utilizing the typemaps in "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "numpy.i"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " to correctly handle the C arrays."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "The "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "Makefile"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " calls "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "swig"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " to generate "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "Vector.py"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " and "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "Vector_wrap.cxx"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", and also executes the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "setup.py"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " script that compiles "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "Vector_wrap.cxx"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " and links together the extension module "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "_Vector.so"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " or "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "_Vector.dylib"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", depending on the platform.  This extension module and the proxy file "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "Vector.py"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " are both placed in a subdirectory under the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "build"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " directory."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "The actual testing takes place with a Python script named:      "
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": "testVector.py"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "that uses the standard Python library module "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "unittest"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", which performs several tests of each function defined in "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "Vector.h"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " for each data type supported."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Two-dimensional arrays are tested in exactly the same manner.  The above description applies, but with "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "Matrix"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " substituted for "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "Vector"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ".  For three-dimensional tests, substitute "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "Tensor"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " for "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "Vector"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ".  For four-dimensional tests, substitute "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "SuperTensor"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " for "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "Vector"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ". For flat in-place array tests, substitute "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "Flat"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " for "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "Vector"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ". For the descriptions that follow, we will reference the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "Vector"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " tests, but the same information applies to "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "Matrix"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "Tensor"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " and "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "SuperTensor"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " tests."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "The command "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "make test"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " will ensure that all of the test software is built and then run all three test scripts."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "level": 1,
      "target": null,
      "title": "Testing Organization"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": [
                    "Vector.h"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " is a C++ header file that defines a C macro called "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "TEST_FUNC_PROTOS"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " that takes two arguments: "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "TYPE"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", which is a data type name such as "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "unsigned int"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": "; and "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "SNAME"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", which is a short name for the same data type with no spaces, e.g. "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "uint"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ".  This macro defines several function prototypes that have the prefix "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "SNAME"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " and have at least one argument that is an array of type "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "TYPE"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ".  Those functions that have return arguments return a "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "TYPE"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " value."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": [
                    "TEST_FUNC_PROTOS"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " is then implemented for all of the data types supported by "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "numpy.i"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ":"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "children": [
                    {
                      "children": [
                        {
                          "data": {
                            "children": [
                              {
                                "data": {
                                  "value": [
                                    "signed char"
                                  ]
                                },
                                "type": "Verbatim"
                              }
                            ]
                          },
                          "type": "Paragraph"
                        }
                      ]
                    },
                    {
                      "children": [
                        {
                          "data": {
                            "children": [
                              {
                                "data": {
                                  "value": [
                                    "unsigned char"
                                  ]
                                },
                                "type": "Verbatim"
                              }
                            ]
                          },
                          "type": "Paragraph"
                        }
                      ]
                    },
                    {
                      "children": [
                        {
                          "data": {
                            "children": [
                              {
                                "data": {
                                  "value": [
                                    "short"
                                  ]
                                },
                                "type": "Verbatim"
                              }
                            ]
                          },
                          "type": "Paragraph"
                        }
                      ]
                    },
                    {
                      "children": [
                        {
                          "data": {
                            "children": [
                              {
                                "data": {
                                  "value": [
                                    "unsigned short"
                                  ]
                                },
                                "type": "Verbatim"
                              }
                            ]
                          },
                          "type": "Paragraph"
                        }
                      ]
                    },
                    {
                      "children": [
                        {
                          "data": {
                            "children": [
                              {
                                "data": {
                                  "value": [
                                    "int"
                                  ]
                                },
                                "type": "Verbatim"
                              }
                            ]
                          },
                          "type": "Paragraph"
                        }
                      ]
                    },
                    {
                      "children": [
                        {
                          "data": {
                            "children": [
                              {
                                "data": {
                                  "value": [
                                    "unsigned int"
                                  ]
                                },
                                "type": "Verbatim"
                              }
                            ]
                          },
                          "type": "Paragraph"
                        }
                      ]
                    },
                    {
                      "children": [
                        {
                          "data": {
                            "children": [
                              {
                                "data": {
                                  "value": [
                                    "long"
                                  ]
                                },
                                "type": "Verbatim"
                              }
                            ]
                          },
                          "type": "Paragraph"
                        }
                      ]
                    },
                    {
                      "children": [
                        {
                          "data": {
                            "children": [
                              {
                                "data": {
                                  "value": [
                                    "unsigned long"
                                  ]
                                },
                                "type": "Verbatim"
                              }
                            ]
                          },
                          "type": "Paragraph"
                        }
                      ]
                    },
                    {
                      "children": [
                        {
                          "data": {
                            "children": [
                              {
                                "data": {
                                  "value": [
                                    "long long"
                                  ]
                                },
                                "type": "Verbatim"
                              }
                            ]
                          },
                          "type": "Paragraph"
                        }
                      ]
                    },
                    {
                      "children": [
                        {
                          "data": {
                            "children": [
                              {
                                "data": {
                                  "value": [
                                    "unsigned long long"
                                  ]
                                },
                                "type": "Verbatim"
                              }
                            ]
                          },
                          "type": "Paragraph"
                        }
                      ]
                    },
                    {
                      "children": [
                        {
                          "data": {
                            "children": [
                              {
                                "data": {
                                  "value": [
                                    "float"
                                  ]
                                },
                                "type": "Verbatim"
                              }
                            ]
                          },
                          "type": "Paragraph"
                        }
                      ]
                    },
                    {
                      "children": [
                        {
                          "data": {
                            "children": [
                              {
                                "data": {
                                  "value": [
                                    "double"
                                  ]
                                },
                                "type": "Verbatim"
                              }
                            ]
                          },
                          "type": "Paragraph"
                        }
                      ]
                    }
                  ]
                },
                "type": "BulletList"
              }
            ]
          },
          "type": "BlockQuote"
        }
      ],
      "level": 1,
      "target": null,
      "title": "Testing Header Files"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": [
                    "Vector.cxx"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " is a C++ source file that implements compilable code for each of the function prototypes specified in "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "Vector.h"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ".  It defines a C macro "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "TEST_FUNCS"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " that has the same arguments and works in the same way as "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "TEST_FUNC_PROTOS"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " does in "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "Vector.h"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ". "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "TEST_FUNCS"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " is implemented for each of the 12 data types as above."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "level": 1,
      "target": null,
      "title": "Testing Source Files"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": [
                    "Vector.i"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " is a "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "SWIG"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " interface file that defines python module "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "Vector"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ".  It follows the conventions for using "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "numpy.i"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " as described in this chapter.  It defines a "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "SWIG"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " macro "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "%apply_numpy_typemaps"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " that has a single argument "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "TYPE"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ". It uses the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "SWIG"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " directive "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "%apply"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " to apply the provided typemaps to the argument signatures found in "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "Vector.h"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ".  This macro is then implemented for all of the data types supported by "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "numpy.i"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ".  It then does a "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "%include \"Vector.h\""
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " to wrap all of the function prototypes in "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "Vector.h"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " using the typemaps in "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "numpy.i"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": "."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "level": 1,
      "target": null,
      "title": "Testing SWIG Interface Files"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "After "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "make"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " is used to build the testing extension modules, "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "testVector.py"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " can be run to execute the tests.  As with other scripts that use "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "unittest"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " to facilitate unit testing, "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "testVector.py"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " defines a class that inherits from "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "unittest.TestCase"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ":      "
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": "class VectorTestCase(unittest.TestCase):"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "However, this class is not run directly.  Rather, it serves as a base class to several other python classes, each one specific to a particular data type.  The "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "VectorTestCase"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " class stores two strings for typing information:"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "children": [
                    {
                      "dd": [
                        {
                          "data": {
                            "children": [
                              {
                                "data": {
                                  "value": "A string that matches one of the "
                                },
                                "type": "Words"
                              },
                              {
                                "data": {
                                  "value": [
                                    "SNAME"
                                  ]
                                },
                                "type": "Verbatim"
                              },
                              {
                                "data": {
                                  "value": " prefixes used in       "
                                },
                                "type": "Words"
                              },
                              {
                                "data": {
                                  "value": [
                                    "Vector.h"
                                  ]
                                },
                                "type": "Verbatim"
                              },
                              {
                                "data": {
                                  "value": " and "
                                },
                                "type": "Words"
                              },
                              {
                                "data": {
                                  "value": [
                                    "Vector.cxx"
                                  ]
                                },
                                "type": "Verbatim"
                              },
                              {
                                "data": {
                                  "value": ".  For example, "
                                },
                                "type": "Words"
                              },
                              {
                                "data": {
                                  "value": [
                                    "\"double\""
                                  ]
                                },
                                "type": "Verbatim"
                              },
                              {
                                "data": {
                                  "value": "."
                                },
                                "type": "Words"
                              }
                            ]
                          },
                          "type": "Paragraph"
                        }
                      ],
                      "dt": {
                        "children": [
                          {
                            "data": {
                              "content": {
                                "value": "self.typeStr"
                              }
                            },
                            "type": "Strong"
                          }
                        ]
                      }
                    },
                    {
                      "dd": [
                        {
                          "data": {
                            "children": [
                              {
                                "data": {
                                  "value": "A short (typically single-character) string that represents a       data type in numpy and corresponds to "
                                },
                                "type": "Words"
                              },
                              {
                                "data": {
                                  "value": [
                                    "self.typeStr"
                                  ]
                                },
                                "type": "Verbatim"
                              },
                              {
                                "data": {
                                  "value": ".  For       example, if "
                                },
                                "type": "Words"
                              },
                              {
                                "data": {
                                  "value": [
                                    "self.typeStr"
                                  ]
                                },
                                "type": "Verbatim"
                              },
                              {
                                "data": {
                                  "value": " is "
                                },
                                "type": "Words"
                              },
                              {
                                "data": {
                                  "value": [
                                    "\"double\""
                                  ]
                                },
                                "type": "Verbatim"
                              },
                              {
                                "data": {
                                  "value": ", then       "
                                },
                                "type": "Words"
                              },
                              {
                                "data": {
                                  "value": [
                                    "self.typeCode"
                                  ]
                                },
                                "type": "Verbatim"
                              },
                              {
                                "data": {
                                  "value": " should be "
                                },
                                "type": "Words"
                              },
                              {
                                "data": {
                                  "value": [
                                    "\"d\""
                                  ]
                                },
                                "type": "Verbatim"
                              },
                              {
                                "data": {
                                  "value": "."
                                },
                                "type": "Words"
                              }
                            ]
                          },
                          "type": "Paragraph"
                        }
                      ],
                      "dt": {
                        "children": [
                          {
                            "data": {
                              "content": {
                                "value": "self.typeCode"
                              }
                            },
                            "type": "Strong"
                          }
                        ]
                      }
                    }
                  ]
                },
                "type": "DefList"
              }
            ]
          },
          "type": "BlockQuote"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Each test defined by the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "VectorTestCase"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " class extracts the python function it is trying to test by accessing the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "Vector"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " module's dictionary:      "
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": "length = Vector.__dict__[self.typeStr + \"Length\"]"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "In the case of double precision tests, this will return the python function "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "Vector.doubleLength"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": "."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "We then define a new test case class for each supported data type with a short definition such as:      "
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": "class doubleTestCase(VectorTestCase):\n    def __init__(self, methodName=\"runTest\"):\n        VectorTestCase.__init__(self, methodName)\n        self.typeStr  = \"double\"\n        self.typeCode = \"d\""
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Each of these 12 classes is collected into a "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "unittest.TestSuite"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", which is then executed.  Errors and failures are summed together and returned as the exit argument.  Any non-zero result indicates that at least one test did not pass."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "level": 1,
      "target": null,
      "title": "Testing Python Scripts"
    }
  ],
  "content": {},
  "example_section_data": {
    "children": [],
    "level": 0,
    "target": null,
    "title": null
  },
  "item_file": null,
  "item_line": null,
  "item_type": null,
  "ordered_sections": [],
  "references": null,
  "see_also": [],
  "signature": {
    "value": null
  }
}