{
  "aliases": [],
  "arbitrary": [
    {
      "children": [
        {
          "args": "numpy",
          "children": [],
          "name": "currentmodule",
          "options": {},
          "type": "mystDirective",
          "value": ""
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "This NumPy release is the largest so made to date, some 684 PRs contributed by 184 people have been merged. See the list of highlights below for more details. The Python versions supported for this release are 3.7-3.9, support for Python 3.6 has been dropped. Highlights are"
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Annotations for NumPy functions. This work is ongoing and improvements can   be expected pending feedback from users."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Wider use of SIMD to increase execution speed of ufuncs. Much work has been   done in introducing universal functions that will ease use of modern   features across different hardware platforms. This work is ongoing."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Preliminary work in changing the dtype and casting implementations in order to   provide an easier path to extending dtypes. This work is ongoing but enough   has been done to allow experimentation and feedback."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Extensive documentation improvements comprising some 185 PR merges. This work   is ongoing and part of the larger project to improve NumPy's online presence   and usefulness to new users."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Further cleanups related to removing Python 2.7. This improves code   readability and removes technical debt."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Preliminary support for the upcoming Cython 3.0."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            }
          ],
          "ordered": false,
          "spread": false,
          "start": 1,
          "type": "list"
        }
      ],
      "level": 0,
      "target": null,
      "title": "NumPy 1.20.0 Release Notes",
      "type": "Section"
    },
    {
      "children": [],
      "level": 1,
      "target": null,
      "title": "New functions",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "The new function differs from "
            },
            {
              "type": "inlineCode",
              "value": "shuffle"
            },
            {
              "type": "text",
              "value": " and "
            },
            {
              "type": "inlineCode",
              "value": "permutation"
            },
            {
              "type": "text",
              "value": " in that the subarrays indexed by an axis are permuted rather than the axis being treated as a separate 1-D array for every combination of the other indexes. For example, it is now possible to permute the rows or columns of a 2-D array."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "("
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "gh-15121"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://github.com/numpy/numpy/pull/15121"
            },
            {
              "type": "text",
              "value": ")"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "The random.Generator class has a new ``permuted`` function.",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "anchor": null,
              "exists": true,
              "kind": "module",
              "reference": {
                "kind": "api",
                "module": "numpy.lib.stride_tricks",
                "path": "numpy.lib.stride_tricks:sliding_window_view",
                "type": "RefInfo",
                "version": "*"
              },
              "type": "Link",
              "value": "numpy.lib.stride_tricks.sliding_window_view"
            },
            {
              "type": "text",
              "value": " constructs views on numpy arrays that offer a sliding or moving window access to the array. This allows for the simple implementation of certain algorithms, such as running means."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "("
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "gh-17394"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://github.com/numpy/numpy/pull/17394"
            },
            {
              "type": "text",
              "value": ")"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "``sliding_window_view`` provides a sliding window view for numpy arrays",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "anchor": null,
              "exists": true,
              "kind": "module",
              "reference": {
                "kind": "api",
                "module": "numpy",
                "path": "numpy:broadcast_shapes",
                "type": "RefInfo",
                "version": "*"
              },
              "type": "Link",
              "value": "broadcast_shapes"
            },
            {
              "type": "text",
              "value": " gets the resulting shape from broadcasting the given shape tuples against each other."
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": ">>> np.broadcast_shapes((1, 2), (3, 1))\n(3, 2)\n\n>>> np.broadcast_shapes(2, (3, 1))\n(3, 2)\n\n>>> np.broadcast_shapes((6, 7), (5, 6, 1), (7,), (5, 1, 7))\n(5, 6, 7)"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "("
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "gh-17535"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://github.com/numpy/numpy/pull/17535"
            },
            {
              "type": "text",
              "value": ")"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "`numpy.broadcast_shapes` is a new user-facing function",
      "type": "Section"
    },
    {
      "children": [],
      "level": 1,
      "target": null,
      "title": "Deprecations",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "For a long time, "
            },
            {
              "type": "inlineCode",
              "value": "np.int"
            },
            {
              "type": "text",
              "value": " has been an alias of the builtin "
            },
            {
              "type": "inlineCode",
              "value": "int"
            },
            {
              "type": "text",
              "value": ". This is repeatedly a cause of confusion for newcomers, and existed mainly for historic reasons."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "These aliases have been deprecated. The table below shows the full list of deprecated aliases, along with their exact meaning. Replacing uses of items in the first column with the contents of the second column will work identically and silence the deprecation warning."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "The third column lists alternative NumPy names which may occasionally be preferential. See also "
            },
            {
              "type": "inlineCode",
              "value": "basics.types"
            },
            {
              "type": "text",
              "value": " for additional details."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "=================  ============  ================================================================== Deprecated name    Identical to  NumPy scalar type names =================  ============  ================================================================== "
            },
            {
              "type": "inlineCode",
              "value": "numpy.bool"
            },
            {
              "type": "text",
              "value": "     "
            },
            {
              "type": "inlineCode",
              "value": "bool"
            },
            {
              "type": "text",
              "value": "      "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "module",
              "reference": {
                "kind": "api",
                "module": "numpy",
                "path": "numpy:bool_",
                "type": "RefInfo",
                "version": "*"
              },
              "type": "Link",
              "value": "numpy.bool_"
            },
            {
              "type": "text",
              "value": " "
            },
            {
              "type": "inlineCode",
              "value": "numpy.int"
            },
            {
              "type": "text",
              "value": "      "
            },
            {
              "type": "inlineCode",
              "value": "int"
            },
            {
              "type": "text",
              "value": "       "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "module",
              "reference": {
                "kind": "api",
                "module": "numpy",
                "path": "numpy:int64",
                "type": "RefInfo",
                "version": "*"
              },
              "type": "Link",
              "value": "numpy.int_"
            },
            {
              "type": "text",
              "value": " (default), "
            },
            {
              "type": "inlineCode",
              "value": "numpy.int64"
            },
            {
              "type": "text",
              "value": ", or "
            },
            {
              "type": "inlineCode",
              "value": "numpy.int32"
            },
            {
              "type": "text",
              "value": " "
            },
            {
              "type": "inlineCode",
              "value": "numpy.float"
            },
            {
              "type": "text",
              "value": "    "
            },
            {
              "type": "inlineCode",
              "value": "float"
            },
            {
              "type": "text",
              "value": "     "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "module",
              "reference": {
                "kind": "api",
                "module": "numpy",
                "path": "numpy:float64",
                "type": "RefInfo",
                "version": "*"
              },
              "type": "Link",
              "value": "numpy.float64"
            },
            {
              "type": "text",
              "value": ", "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "module",
              "reference": {
                "kind": "api",
                "module": "numpy",
                "path": "numpy:float64",
                "type": "RefInfo",
                "version": "*"
              },
              "type": "Link",
              "value": "numpy.float_"
            },
            {
              "type": "text",
              "value": ", "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "module",
              "reference": {
                "kind": "api",
                "module": "numpy",
                "path": "numpy:float64",
                "type": "RefInfo",
                "version": "*"
              },
              "type": "Link",
              "value": "numpy.double"
            },
            {
              "type": "text",
              "value": " (equivalent) "
            },
            {
              "type": "inlineCode",
              "value": "numpy.complex"
            },
            {
              "type": "text",
              "value": "  "
            },
            {
              "type": "inlineCode",
              "value": "complex"
            },
            {
              "type": "text",
              "value": "   "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "module",
              "reference": {
                "kind": "api",
                "module": "numpy",
                "path": "numpy:complex128",
                "type": "RefInfo",
                "version": "*"
              },
              "type": "Link",
              "value": "numpy.complex128"
            },
            {
              "type": "text",
              "value": ", "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "module",
              "reference": {
                "kind": "api",
                "module": "numpy",
                "path": "numpy:complex128",
                "type": "RefInfo",
                "version": "*"
              },
              "type": "Link",
              "value": "numpy.complex_"
            },
            {
              "type": "text",
              "value": ", "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "module",
              "reference": {
                "kind": "api",
                "module": "numpy",
                "path": "numpy:complex128",
                "type": "RefInfo",
                "version": "*"
              },
              "type": "Link",
              "value": "numpy.cdouble"
            },
            {
              "type": "text",
              "value": " (equivalent) "
            },
            {
              "type": "inlineCode",
              "value": "numpy.object"
            },
            {
              "type": "text",
              "value": "   "
            },
            {
              "type": "inlineCode",
              "value": "object"
            },
            {
              "type": "text",
              "value": "    "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "module",
              "reference": {
                "kind": "api",
                "module": "numpy",
                "path": "numpy:object_",
                "type": "RefInfo",
                "version": "*"
              },
              "type": "Link",
              "value": "numpy.object_"
            },
            {
              "type": "text",
              "value": " "
            },
            {
              "type": "inlineCode",
              "value": "numpy.str"
            },
            {
              "type": "text",
              "value": "      "
            },
            {
              "type": "inlineCode",
              "value": "str"
            },
            {
              "type": "text",
              "value": "       "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "module",
              "reference": {
                "kind": "api",
                "module": "numpy",
                "path": "numpy:str_",
                "type": "RefInfo",
                "version": "*"
              },
              "type": "Link",
              "value": "numpy.str_"
            },
            {
              "type": "text",
              "value": " "
            },
            {
              "type": "inlineCode",
              "value": "numpy.long"
            },
            {
              "type": "text",
              "value": "     "
            },
            {
              "type": "inlineCode",
              "value": "int"
            },
            {
              "type": "text",
              "value": "       "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "module",
              "reference": {
                "kind": "api",
                "module": "numpy",
                "path": "numpy:int64",
                "type": "RefInfo",
                "version": "*"
              },
              "type": "Link",
              "value": "numpy.int_"
            },
            {
              "type": "text",
              "value": " (C "
            },
            {
              "type": "inlineCode",
              "value": "long"
            },
            {
              "type": "text",
              "value": "), "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "module",
              "reference": {
                "kind": "api",
                "module": "numpy",
                "path": "numpy:longlong",
                "type": "RefInfo",
                "version": "*"
              },
              "type": "Link",
              "value": "numpy.longlong"
            },
            {
              "type": "text",
              "value": " (largest integer type) "
            },
            {
              "type": "inlineCode",
              "value": "numpy.unicode"
            },
            {
              "type": "text",
              "value": "  "
            },
            {
              "type": "inlineCode",
              "value": "str"
            },
            {
              "type": "text",
              "value": "       "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "module",
              "reference": {
                "kind": "api",
                "module": "numpy",
                "path": "numpy:str_",
                "type": "RefInfo",
                "version": "*"
              },
              "type": "Link",
              "value": "numpy.unicode_"
            },
            {
              "type": "text",
              "value": " =================  ============  =================================================================="
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "To give a clear guideline for the vast majority of cases, for the types "
            },
            {
              "type": "inlineCode",
              "value": "bool"
            },
            {
              "type": "text",
              "value": ", "
            },
            {
              "type": "inlineCode",
              "value": "object"
            },
            {
              "type": "text",
              "value": ", "
            },
            {
              "type": "inlineCode",
              "value": "str"
            },
            {
              "type": "text",
              "value": " (and "
            },
            {
              "type": "inlineCode",
              "value": "unicode"
            },
            {
              "type": "text",
              "value": ") using the plain version is shorter and clear, and generally a good replacement. For "
            },
            {
              "type": "inlineCode",
              "value": "float"
            },
            {
              "type": "text",
              "value": " and "
            },
            {
              "type": "inlineCode",
              "value": "complex"
            },
            {
              "type": "text",
              "value": " you can use "
            },
            {
              "type": "inlineCode",
              "value": "float64"
            },
            {
              "type": "text",
              "value": " and "
            },
            {
              "type": "inlineCode",
              "value": "complex128"
            },
            {
              "type": "text",
              "value": " if you wish to be more explicit about the precision."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "For "
            },
            {
              "type": "inlineCode",
              "value": "np.int"
            },
            {
              "type": "text",
              "value": " a direct replacement with "
            },
            {
              "type": "inlineCode",
              "value": "np.int_"
            },
            {
              "type": "text",
              "value": " or "
            },
            {
              "type": "inlineCode",
              "value": "int"
            },
            {
              "type": "text",
              "value": " is also good and will not change behavior, but the precision will continue to depend on the computer and operating system. If you want to be more explicit and review the current use, you have the following alternatives:"
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "inlineCode",
                      "value": "np.int64"
                    },
                    {
                      "type": "text",
                      "value": " or "
                    },
                    {
                      "type": "inlineCode",
                      "value": "np.int32"
                    },
                    {
                      "type": "text",
                      "value": " to specify the precision exactly.   This ensures that results cannot depend on the computer or operating system."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "inlineCode",
                      "value": "np.int_"
                    },
                    {
                      "type": "text",
                      "value": " or "
                    },
                    {
                      "type": "inlineCode",
                      "value": "int"
                    },
                    {
                      "type": "text",
                      "value": " (the default), but be aware that it depends on   the computer and operating system."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The C types: "
                    },
                    {
                      "type": "inlineCode",
                      "value": "np.cint"
                    },
                    {
                      "type": "text",
                      "value": " (int), "
                    },
                    {
                      "type": "inlineCode",
                      "value": "np.int_"
                    },
                    {
                      "type": "text",
                      "value": " (long), "
                    },
                    {
                      "type": "inlineCode",
                      "value": "np.longlong"
                    },
                    {
                      "type": "text",
                      "value": "."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "inlineCode",
                      "value": "np.intp"
                    },
                    {
                      "type": "text",
                      "value": " which is 32bit on 32bit machines 64bit on 64bit machines.   This can be the best type to use for indexing."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            }
          ],
          "ordered": false,
          "spread": false,
          "start": 1,
          "type": "list"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "When used with "
            },
            {
              "type": "inlineCode",
              "value": "np.dtype(...)"
            },
            {
              "type": "text",
              "value": " or "
            },
            {
              "type": "inlineCode",
              "value": "dtype=..."
            },
            {
              "type": "text",
              "value": " changing it to the NumPy name as mentioned above will have no effect on the output. If used as a scalar with      "
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": "np.float(123)"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "changing it can subtly change the result.  In this case, the Python version "
            },
            {
              "type": "inlineCode",
              "value": "float(123)"
            },
            {
              "type": "text",
              "value": " or "
            },
            {
              "type": "inlineCode",
              "value": "int(12.)"
            },
            {
              "type": "text",
              "value": " is normally preferable, although the NumPy version may be useful for consistency with NumPy arrays (for example, NumPy behaves differently for things like division by zero)."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "("
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "gh-14882"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://github.com/numpy/numpy/pull/14882"
            },
            {
              "type": "text",
              "value": ")"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "Using the aliases of builtin types like ``np.int`` is deprecated",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Previously, this was an alias for passing "
            },
            {
              "type": "inlineCode",
              "value": "shape=()"
            },
            {
              "type": "text",
              "value": ". This deprecation is emitted by "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "PyArray_IntpConverter"
            },
            {
              "type": "text",
              "value": " in the C API. If your API is intended to support passing "
            },
            {
              "type": "inlineCode",
              "value": "None"
            },
            {
              "type": "text",
              "value": ", then you should check for "
            },
            {
              "type": "inlineCode",
              "value": "None"
            },
            {
              "type": "text",
              "value": " prior to invoking the converter, so as to be able to distinguish "
            },
            {
              "type": "inlineCode",
              "value": "None"
            },
            {
              "type": "text",
              "value": " and "
            },
            {
              "type": "inlineCode",
              "value": "()"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "("
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "gh-15886"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://github.com/numpy/numpy/pull/15886"
            },
            {
              "type": "text",
              "value": ")"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "Passing ``shape=None`` to functions with a non-optional shape argument is deprecated",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "In the future, NumPy will raise an IndexError when an integer array index contains out of bound values even if a non-indexed dimension is of length 0. This will now emit a DeprecationWarning. This can happen when the array is previously empty, or an empty slice is involved      "
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": "arr1 = np.zeros((5, 0))\narr1[[20]]\narr2 = np.zeros((5, 5))\narr2[[20], :0]"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Previously the non-empty index "
            },
            {
              "type": "inlineCode",
              "value": "[20]"
            },
            {
              "type": "text",
              "value": " was not checked for correctness. It will now be checked causing a deprecation warning which will be turned into an error. This also applies to assignments."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "("
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "gh-15900"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://github.com/numpy/numpy/pull/15900"
            },
            {
              "type": "text",
              "value": ")"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "Indexing errors will be reported even when index result is empty",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Inexact and case insensitive matches for "
            },
            {
              "type": "inlineCode",
              "value": "mode"
            },
            {
              "type": "text",
              "value": " and "
            },
            {
              "type": "inlineCode",
              "value": "searchside"
            },
            {
              "type": "text",
              "value": " were valid inputs earlier and will give a DeprecationWarning now.  For example, below are some example usages which are now deprecated and will give a DeprecationWarning      "
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": "import numpy as np\narr = np.array([[3, 6, 6], [4, 5, 1]])\n# mode: inexact match\nnp.ravel_multi_index(arr, (7, 6), mode=\"clap\")  # should be \"clip\"\n# searchside: inexact match\nnp.searchsorted(arr[0], 4, side='random')  # should be \"right\""
        },
        {
          "children": [
            {
              "type": "text",
              "value": "("
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "gh-16056"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://github.com/numpy/numpy/pull/16056"
            },
            {
              "type": "text",
              "value": ")"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "Inexact matches for ``mode`` and ``searchside`` are deprecated",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "The module "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "module",
              "reference": {
                "kind": "api",
                "module": "numpy.dual",
                "path": "numpy.dual",
                "type": "RefInfo",
                "version": "*"
              },
              "type": "Link",
              "value": "numpy.dual"
            },
            {
              "type": "text",
              "value": " is deprecated.  Instead of importing functions from "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "module",
              "reference": {
                "kind": "api",
                "module": "numpy.dual",
                "path": "numpy.dual",
                "type": "RefInfo",
                "version": "*"
              },
              "type": "Link",
              "value": "numpy.dual"
            },
            {
              "type": "text",
              "value": ", the functions should be imported directly from NumPy or SciPy."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "("
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "gh-16156"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://github.com/numpy/numpy/pull/16156"
            },
            {
              "type": "text",
              "value": ")"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "Deprecation of `numpy.dual`",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "inlineCode",
              "value": "np.matrix"
            },
            {
              "type": "text",
              "value": " use with "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "module",
              "reference": {
                "kind": "api",
                "module": "numpy",
                "path": "numpy:outer",
                "type": "RefInfo",
                "version": "*"
              },
              "type": "Link",
              "value": "outer"
            },
            {
              "type": "text",
              "value": " or generic ufunc outer calls such as "
            },
            {
              "type": "inlineCode",
              "value": "numpy.add.outer"
            },
            {
              "type": "text",
              "value": ". Previously, matrix was converted to an array here. This will not be done in the future requiring a manual conversion to arrays."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "("
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "gh-16232"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://github.com/numpy/numpy/pull/16232"
            },
            {
              "type": "text",
              "value": ")"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "``outer`` and ``ufunc.outer`` deprecated for matrix",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "The remaining numeric-style type codes "
            },
            {
              "type": "inlineCode",
              "value": "Bytes0"
            },
            {
              "type": "text",
              "value": ", "
            },
            {
              "type": "inlineCode",
              "value": "Str0"
            },
            {
              "type": "text",
              "value": ", "
            },
            {
              "type": "inlineCode",
              "value": "Uint32"
            },
            {
              "type": "text",
              "value": ", "
            },
            {
              "type": "inlineCode",
              "value": "Uint64"
            },
            {
              "type": "text",
              "value": ", and "
            },
            {
              "type": "inlineCode",
              "value": "Datetime64"
            },
            {
              "type": "text",
              "value": " have been deprecated.  The lower-case variants should be used instead.  For bytes and string "
            },
            {
              "type": "inlineCode",
              "value": "\"S\""
            },
            {
              "type": "text",
              "value": " and "
            },
            {
              "type": "inlineCode",
              "value": "\"U\""
            },
            {
              "type": "text",
              "value": " are further alternatives."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "("
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "gh-16554"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://github.com/numpy/numpy/pull/16554"
            },
            {
              "type": "text",
              "value": ")"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "Further Numeric Style types Deprecated",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "The documentation has warned against using this function since NumPy 1.8. Use "
            },
            {
              "type": "inlineCode",
              "value": "next(it)"
            },
            {
              "type": "text",
              "value": " instead of "
            },
            {
              "type": "inlineCode",
              "value": "it.ndincr()"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "("
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "gh-17233"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://github.com/numpy/numpy/pull/17233"
            },
            {
              "type": "text",
              "value": ")"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "The ``ndincr`` method of ``ndindex`` is deprecated",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Objects which define one of the protocols "
            },
            {
              "type": "inlineCode",
              "value": "__array__"
            },
            {
              "type": "text",
              "value": ", "
            },
            {
              "type": "inlineCode",
              "value": "__array_interface__"
            },
            {
              "type": "text",
              "value": ", or "
            },
            {
              "type": "inlineCode",
              "value": "__array_struct__"
            },
            {
              "type": "text",
              "value": " but are not sequences (usually defined by having a "
            },
            {
              "type": "inlineCode",
              "value": "__len__"
            },
            {
              "type": "text",
              "value": " and "
            },
            {
              "type": "inlineCode",
              "value": "__getitem__"
            },
            {
              "type": "text",
              "value": ") will behave differently during array-coercion in the future."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "When nested inside sequences, such as "
            },
            {
              "type": "inlineCode",
              "value": "np.array([array_like])"
            },
            {
              "type": "text",
              "value": ", these were handled as a single Python object rather than an array. In the future they will behave identically to      "
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": "np.array([np.array(array_like)])"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "This change should only have an effect if "
            },
            {
              "type": "inlineCode",
              "value": "np.array(array_like)"
            },
            {
              "type": "text",
              "value": " is not 0-D. The solution to this warning may depend on the object:"
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Some array-likes may expect the new behaviour, and users can ignore the   warning.  The object can choose to expose the sequence protocol to opt-in   to the new behaviour."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "For example, "
                    },
                    {
                      "type": "inlineCode",
                      "value": "shapely"
                    },
                    {
                      "type": "text",
                      "value": " will allow conversion to an array-like using   "
                    },
                    {
                      "type": "inlineCode",
                      "value": "line.coords"
                    },
                    {
                      "type": "text",
                      "value": " rather than "
                    },
                    {
                      "type": "inlineCode",
                      "value": "np.asarray(line)"
                    },
                    {
                      "type": "text",
                      "value": ". Users may work around   the warning, or use the new convention when it becomes available."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            }
          ],
          "ordered": false,
          "spread": false,
          "start": 1,
          "type": "list"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Unfortunately, using the new behaviour can only be achieved by calling "
            },
            {
              "type": "inlineCode",
              "value": "np.array(array_like)"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "If you wish to ensure that the old behaviour remains unchanged, please create an object array and then fill it explicitly, for example      "
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": "arr = np.empty(3, dtype=object)\narr[:] = [array_like1, array_like2, array_like3]"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "This will ensure NumPy knows to not enter the array-like and use it as a object instead."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "("
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "gh-17973"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://github.com/numpy/numpy/pull/17973"
            },
            {
              "type": "text",
              "value": ")"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "ArrayLike objects which do not define ``__len__`` and ``__getitem__``",
      "type": "Section"
    },
    {
      "children": [],
      "level": 1,
      "target": null,
      "title": "Future Changes",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Array creation and casting using "
            },
            {
              "type": "inlineCode",
              "value": "np.array(arr, dtype)"
            },
            {
              "type": "text",
              "value": " and "
            },
            {
              "type": "inlineCode",
              "value": "arr.astype(dtype)"
            },
            {
              "type": "text",
              "value": " will use different logic when "
            },
            {
              "type": "inlineCode",
              "value": "dtype"
            },
            {
              "type": "text",
              "value": " is a subarray dtype such as "
            },
            {
              "type": "inlineCode",
              "value": "np.dtype(\"(2)i,\")"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "For such a "
            },
            {
              "type": "inlineCode",
              "value": "dtype"
            },
            {
              "type": "text",
              "value": " the following behaviour is true      "
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": "res = np.array(arr, dtype)\n\nres.dtype is not dtype\nres.dtype is dtype.base\nres.shape == arr.shape + dtype.shape"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "But "
            },
            {
              "type": "inlineCode",
              "value": "res"
            },
            {
              "type": "text",
              "value": " is filled using the logic      "
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": "res = np.empty(arr.shape + dtype.shape, dtype=dtype.base)\nres[...] = arr"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "which uses incorrect broadcasting (and often leads to an error). In the future, this will instead cast each element individually, leading to the same result as      "
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": "res = np.array(arr, dtype=np.dtype([\"f\", dtype]))[\"f\"]"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Which can normally be used to opt-in to the new behaviour."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "This change does not affect "
            },
            {
              "type": "inlineCode",
              "value": "np.array(list, dtype=\"(2)i,\")"
            },
            {
              "type": "text",
              "value": " unless the "
            },
            {
              "type": "inlineCode",
              "value": "list"
            },
            {
              "type": "text",
              "value": " itself includes at least one array.  In particular, the behaviour is unchanged for a list of tuples."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "("
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "gh-17596"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://github.com/numpy/numpy/pull/17596"
            },
            {
              "type": "text",
              "value": ")"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "Arrays cannot be using subarray dtypes",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The deprecation of numeric style type-codes "
                    },
                    {
                      "type": "inlineCode",
                      "value": "np.dtype(\"Complex64\")"
                    },
                    {
                      "type": "text",
                      "value": "   (with upper case spelling), is expired.  "
                    },
                    {
                      "type": "inlineCode",
                      "value": "\"Complex64\""
                    },
                    {
                      "type": "text",
                      "value": " corresponded to   "
                    },
                    {
                      "type": "inlineCode",
                      "value": "\"complex128\""
                    },
                    {
                      "type": "text",
                      "value": " and "
                    },
                    {
                      "type": "inlineCode",
                      "value": "\"Complex32\""
                    },
                    {
                      "type": "text",
                      "value": " corresponded to "
                    },
                    {
                      "type": "inlineCode",
                      "value": "\"complex64\""
                    },
                    {
                      "type": "text",
                      "value": "."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The deprecation of "
                    },
                    {
                      "type": "inlineCode",
                      "value": "np.sctypeNA"
                    },
                    {
                      "type": "text",
                      "value": " and "
                    },
                    {
                      "type": "inlineCode",
                      "value": "np.typeNA"
                    },
                    {
                      "type": "text",
                      "value": " is expired. Both   have been removed from the public API. Use "
                    },
                    {
                      "type": "inlineCode",
                      "value": "np.typeDict"
                    },
                    {
                      "type": "text",
                      "value": " instead."
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "("
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "gh-16554"
                        }
                      ],
                      "title": "",
                      "type": "link",
                      "url": "https://github.com/numpy/numpy/pull/16554"
                    },
                    {
                      "type": "text",
                      "value": ")"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The 14-year deprecation of "
                    },
                    {
                      "type": "inlineCode",
                      "value": "np.ctypeslib.ctypes_load_library"
                    },
                    {
                      "type": "text",
                      "value": " is expired.   Use "
                    },
                    {
                      "type": "inlineCode",
                      "value": "~numpy.ctypeslib.load_library"
                    },
                    {
                      "type": "text",
                      "value": " instead, which is identical."
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "("
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "gh-17116"
                        }
                      ],
                      "title": "",
                      "type": "link",
                      "url": "https://github.com/numpy/numpy/pull/17116"
                    },
                    {
                      "type": "text",
                      "value": ")"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            }
          ],
          "ordered": false,
          "spread": false,
          "start": 1,
          "type": "list"
        }
      ],
      "level": 1,
      "target": null,
      "title": "Expired deprecations",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "In accordance with NEP 32, the financial functions are removed from NumPy 1.20. The functions that have been removed are "
            },
            {
              "type": "inlineCode",
              "value": "fv"
            },
            {
              "type": "text",
              "value": ", "
            },
            {
              "type": "inlineCode",
              "value": "ipmt"
            },
            {
              "type": "text",
              "value": ", "
            },
            {
              "type": "inlineCode",
              "value": "irr"
            },
            {
              "type": "text",
              "value": ", "
            },
            {
              "type": "inlineCode",
              "value": "mirr"
            },
            {
              "type": "text",
              "value": ", "
            },
            {
              "type": "inlineCode",
              "value": "nper"
            },
            {
              "type": "text",
              "value": ", "
            },
            {
              "type": "inlineCode",
              "value": "npv"
            },
            {
              "type": "text",
              "value": ", "
            },
            {
              "type": "inlineCode",
              "value": "pmt"
            },
            {
              "type": "text",
              "value": ", "
            },
            {
              "type": "inlineCode",
              "value": "ppmt"
            },
            {
              "type": "text",
              "value": ", "
            },
            {
              "type": "inlineCode",
              "value": "pv"
            },
            {
              "type": "text",
              "value": ", and "
            },
            {
              "type": "inlineCode",
              "value": "rate"
            },
            {
              "type": "text",
              "value": ".  These functions are available in the "
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "numpy_financial"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://pypi.org/project/numpy-financial"
            },
            {
              "type": "text",
              "value": " library."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "("
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "gh-17067"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://github.com/numpy/numpy/pull/17067"
            },
            {
              "type": "text",
              "value": ")"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "Financial functions removed",
      "type": "Section"
    },
    {
      "children": [],
      "level": 1,
      "target": null,
      "title": "Compatibility notes",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "NumPy dtypes are not direct instances of "
            },
            {
              "type": "inlineCode",
              "value": "np.dtype"
            },
            {
              "type": "text",
              "value": " anymore.  Code that may have used "
            },
            {
              "type": "inlineCode",
              "value": "type(dtype) is np.dtype"
            },
            {
              "type": "text",
              "value": " will always return "
            },
            {
              "type": "inlineCode",
              "value": "False"
            },
            {
              "type": "text",
              "value": " and must be updated to use the correct version "
            },
            {
              "type": "inlineCode",
              "value": "isinstance(dtype, np.dtype)"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "This change also affects the C-side macro "
            },
            {
              "type": "inlineCode",
              "value": "PyArray_DescrCheck"
            },
            {
              "type": "text",
              "value": " if compiled against a NumPy older than 1.16.6. If code uses this macro and wishes to compile against an older version of NumPy, it must replace the macro (see also "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "C API changes"
            },
            {
              "type": "text",
              "value": " section)."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "``isinstance(dtype, np.dtype)`` and not ``type(dtype) is not np.dtype``",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "When "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "module",
              "reference": {
                "kind": "api",
                "module": "numpy",
                "path": "numpy:concatenate",
                "type": "RefInfo",
                "version": "*"
              },
              "type": "Link",
              "value": "concatenate"
            },
            {
              "type": "text",
              "value": " is called with "
            },
            {
              "type": "inlineCode",
              "value": "axis=None"
            },
            {
              "type": "text",
              "value": ", the flattened arrays were cast with "
            },
            {
              "type": "inlineCode",
              "value": "unsafe"
            },
            {
              "type": "text",
              "value": ". Any other axis choice uses \"same kind\". That different default has been deprecated and \"same kind\" casting will be used instead. The new "
            },
            {
              "type": "inlineCode",
              "value": "casting"
            },
            {
              "type": "text",
              "value": " keyword argument can be used to retain the old behaviour."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "("
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "gh-16134"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://github.com/numpy/numpy/pull/16134"
            },
            {
              "type": "text",
              "value": ")"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "Same kind casting in concatenate with ``axis=None``",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "When creating or assigning to arrays, in all relevant cases NumPy scalars will now be cast identically to NumPy arrays.  In particular this changes the behaviour in some cases which previously raised an error      "
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": "np.array([np.float64(np.nan)], dtype=np.int64)"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "will succeed and return an undefined result (usually the smallest possible integer).  This also affects assignments      "
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": "arr[0] = np.float64(np.nan)"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "At this time, NumPy retains the behaviour for      "
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": "np.array(np.float64(np.nan), dtype=np.int64)"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "The above changes do not affect Python scalars      "
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": "np.array([float(\"NaN\")], dtype=np.int64)"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "remains unaffected ("
            },
            {
              "type": "inlineCode",
              "value": "np.nan"
            },
            {
              "type": "text",
              "value": " is a Python "
            },
            {
              "type": "inlineCode",
              "value": "float"
            },
            {
              "type": "text",
              "value": ", not a NumPy one). Unlike signed integers, unsigned integers do not retain this special case, since they always behaved more like casting. The following code stops raising an error      "
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": "np.array([np.float64(np.nan)], dtype=np.uint64)"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "To avoid backward compatibility issues, at this time assignment from "
            },
            {
              "type": "inlineCode",
              "value": "datetime64"
            },
            {
              "type": "text",
              "value": " scalar to strings of too short length remains supported. This means that "
            },
            {
              "type": "inlineCode",
              "value": "np.asarray(np.datetime64(\"2020-10-10\"), dtype=\"S5\")"
            },
            {
              "type": "text",
              "value": " succeeds now, when it failed before.  In the long term this may be deprecated or the unsafe cast may be allowed generally to make assignment of arrays and scalars behave consistently."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "NumPy Scalars are cast when assigned to arrays",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "When strings and other types are mixed, such as      "
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": "np.array([\"string\", np.float64(3.)], dtype=\"S\")"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "The results will change, which may lead to string dtypes with longer strings in some cases.  In particularly, if "
            },
            {
              "type": "inlineCode",
              "value": "dtype=\"S\""
            },
            {
              "type": "text",
              "value": " is not provided any numerical value will lead to a string results long enough to hold all possible numerical values. (e.g. \"S32\" for floats).  Note that you should always provide "
            },
            {
              "type": "inlineCode",
              "value": "dtype=\"S\""
            },
            {
              "type": "text",
              "value": " when converting non-strings to strings."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "If "
            },
            {
              "type": "inlineCode",
              "value": "dtype=\"S\""
            },
            {
              "type": "text",
              "value": " is provided the results will be largely identical to before, but NumPy scalars (not a Python float like "
            },
            {
              "type": "inlineCode",
              "value": "1.0"
            },
            {
              "type": "text",
              "value": "), will still enforce a uniform string length      "
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": "np.array([np.float64(3.)], dtype=\"S\")  # gives \"S32\"\nnp.array([3.0], dtype=\"S\")  # gives \"S3\""
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Previously the first version gave the same result as the second."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "Array coercion changes when Strings and other types are mixed",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Array coercion has been restructured.  In general, this should not affect users.  In extremely rare corner cases where array-likes are nested      "
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": "np.array([array_like1])"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Things will now be more consistent with      "
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": "np.array([np.array(array_like1)])"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "This can subtly change output for some badly defined array-likes. One example for this are array-like objects which are not also sequences of matching shape. In NumPy 1.20, a warning will be given when an array-like is not also a sequence (but behaviour remains identical, see deprecations). If an array like is also a sequence (defines "
            },
            {
              "type": "inlineCode",
              "value": "__getitem__"
            },
            {
              "type": "text",
              "value": " and "
            },
            {
              "type": "inlineCode",
              "value": "__len__"
            },
            {
              "type": "text",
              "value": ") NumPy will now only use the result given by "
            },
            {
              "type": "inlineCode",
              "value": "__array__"
            },
            {
              "type": "text",
              "value": ", "
            },
            {
              "type": "inlineCode",
              "value": "__array_interface__"
            },
            {
              "type": "text",
              "value": ", or "
            },
            {
              "type": "inlineCode",
              "value": "__array_struct__"
            },
            {
              "type": "text",
              "value": ". This will result in differences when the (nested) sequence describes a different shape."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "("
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "gh-16200"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://github.com/numpy/numpy/pull/16200"
            },
            {
              "type": "text",
              "value": ")"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "Array coercion restructure",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "In NumPy 1.17 "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "module",
              "reference": {
                "kind": "api",
                "module": "numpy",
                "path": "numpy:broadcast_arrays",
                "type": "RefInfo",
                "version": "*"
              },
              "type": "Link",
              "value": "numpy.broadcast_arrays"
            },
            {
              "type": "text",
              "value": " started warning when the resulting array was written to. This warning was skipped when the array was used through the buffer interface (e.g. "
            },
            {
              "type": "inlineCode",
              "value": "memoryview(arr)"
            },
            {
              "type": "text",
              "value": "). The same thing will now occur for the two protocols "
            },
            {
              "type": "inlineCode",
              "value": "__array_interface__"
            },
            {
              "type": "text",
              "value": ", and "
            },
            {
              "type": "inlineCode",
              "value": "__array_struct__"
            },
            {
              "type": "text",
              "value": " returning read-only buffers instead of giving a warning."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "("
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "gh-16350"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://github.com/numpy/numpy/pull/16350"
            },
            {
              "type": "text",
              "value": ")"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "Writing to the result of `numpy.broadcast_arrays` will export readonly buffers",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "To stay in sync with the deprecation for "
            },
            {
              "type": "inlineCode",
              "value": "np.dtype(\"Complex64\")"
            },
            {
              "type": "text",
              "value": " and other numeric-style (capital case) types.  These were removed from "
            },
            {
              "type": "inlineCode",
              "value": "np.sctypeDict"
            },
            {
              "type": "text",
              "value": " and "
            },
            {
              "type": "inlineCode",
              "value": "np.typeDict"
            },
            {
              "type": "text",
              "value": ".  You should use the lower case versions instead.  Note that "
            },
            {
              "type": "inlineCode",
              "value": "\"Complex64\""
            },
            {
              "type": "text",
              "value": " corresponds to "
            },
            {
              "type": "inlineCode",
              "value": "\"complex128\""
            },
            {
              "type": "text",
              "value": " and "
            },
            {
              "type": "inlineCode",
              "value": "\"Complex32\""
            },
            {
              "type": "text",
              "value": " corresponds to "
            },
            {
              "type": "inlineCode",
              "value": "\"complex64\""
            },
            {
              "type": "text",
              "value": ".  The numpy style (new) versions, denote the full size and not the size of the real/imaginary part."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "("
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "gh-16554"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://github.com/numpy/numpy/pull/16554"
            },
            {
              "type": "text",
              "value": ")"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "Numeric-style type names have been removed from type dictionaries",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "The previous behavior was to fall back to addition and add the two arrays, which was thought to be unexpected behavior for a concatenation function."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "("
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "gh-16570"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://github.com/numpy/numpy/pull/16570"
            },
            {
              "type": "text",
              "value": ")"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "The ``operator.concat`` function now raises TypeError for array arguments",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "An abstract property "
            },
            {
              "type": "inlineCode",
              "value": "nickname"
            },
            {
              "type": "text",
              "value": " has been removed from  "
            },
            {
              "type": "inlineCode",
              "value": "ABCPolyBase"
            },
            {
              "type": "text",
              "value": " as it was no longer used in the derived convenience classes. This may affect users who have derived classes from "
            },
            {
              "type": "inlineCode",
              "value": "ABCPolyBase"
            },
            {
              "type": "text",
              "value": " and overridden the methods for representation and display, e.g. "
            },
            {
              "type": "inlineCode",
              "value": "__str__"
            },
            {
              "type": "text",
              "value": ", "
            },
            {
              "type": "inlineCode",
              "value": "__repr__"
            },
            {
              "type": "text",
              "value": ", "
            },
            {
              "type": "inlineCode",
              "value": "_repr_latex"
            },
            {
              "type": "text",
              "value": ", etc."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "("
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "gh-16589"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://github.com/numpy/numpy/pull/16589"
            },
            {
              "type": "text",
              "value": ")"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "``nickname`` attribute removed from ABCPolyBase",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Float and timedelta promotion consistently raises a TypeError. "
            },
            {
              "type": "inlineCode",
              "value": "np.promote_types(\"float32\", \"m8\")"
            },
            {
              "type": "text",
              "value": " aligns with "
            },
            {
              "type": "inlineCode",
              "value": "np.promote_types(\"m8\", \"float32\")"
            },
            {
              "type": "text",
              "value": " now and both raise a TypeError. Previously, "
            },
            {
              "type": "inlineCode",
              "value": "np.promote_types(\"float32\", \"m8\")"
            },
            {
              "type": "text",
              "value": " returned "
            },
            {
              "type": "inlineCode",
              "value": "\"m8\""
            },
            {
              "type": "text",
              "value": " which was considered a bug."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Uint64 and timedelta promotion consistently raises a TypeError. "
            },
            {
              "type": "inlineCode",
              "value": "np.promote_types(\"uint64\", \"m8\")"
            },
            {
              "type": "text",
              "value": " aligns with "
            },
            {
              "type": "inlineCode",
              "value": "np.promote_types(\"m8\", \"uint64\")"
            },
            {
              "type": "text",
              "value": " now and both raise a TypeError. Previously, "
            },
            {
              "type": "inlineCode",
              "value": "np.promote_types(\"uint64\", \"m8\")"
            },
            {
              "type": "text",
              "value": " returned "
            },
            {
              "type": "inlineCode",
              "value": "\"m8\""
            },
            {
              "type": "text",
              "value": " which was considered a bug."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "("
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "gh-16592"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://github.com/numpy/numpy/pull/16592"
            },
            {
              "type": "text",
              "value": ")"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "``float->timedelta`` and ``uint64->timedelta`` promotion will raise a TypeError",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Previously, "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "module",
              "reference": {
                "kind": "api",
                "module": "numpy",
                "path": "numpy:genfromtxt",
                "type": "RefInfo",
                "version": "*"
              },
              "type": "Link",
              "value": "numpy.genfromtxt"
            },
            {
              "type": "text",
              "value": " failed to unpack if it was called with "
            },
            {
              "type": "inlineCode",
              "value": "unpack=True"
            },
            {
              "type": "text",
              "value": " and a structured datatype was passed to the "
            },
            {
              "type": "inlineCode",
              "value": "dtype"
            },
            {
              "type": "text",
              "value": " argument (or "
            },
            {
              "type": "inlineCode",
              "value": "dtype=None"
            },
            {
              "type": "text",
              "value": " was passed and a structured datatype was inferred). For example      "
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": ">>> data = StringIO(\"21 58.0\\n35 72.0\")\n>>> np.genfromtxt(data, dtype=None, unpack=True)\narray([(21, 58.), (35, 72.)], dtype=[('f0', '<i8'), ('f1', '<f8')])"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Structured arrays will now correctly unpack into a list of arrays, one for each column      "
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": ">>> np.genfromtxt(data, dtype=None, unpack=True)\n[array([21, 35]), array([58., 72.])]"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "("
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "gh-16650"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://github.com/numpy/numpy/pull/16650"
            },
            {
              "type": "text",
              "value": ")"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "``numpy.genfromtxt`` now correctly unpacks structured arrays",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Previously, "
            },
            {
              "type": "inlineCode",
              "value": "np.mgrid[np.float32(0.1):np.float32(0.35):np.float32(0.1),]"
            },
            {
              "type": "text",
              "value": " and "
            },
            {
              "type": "inlineCode",
              "value": "np.r_[0:10:np.complex64(3j)]"
            },
            {
              "type": "text",
              "value": " failed to return meaningful output. This bug potentially affects "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "~numpy.mgrid"
            },
            {
              "type": "text",
              "value": ", "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "~numpy.ogrid"
            },
            {
              "type": "text",
              "value": ", "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "~numpy.r_"
            },
            {
              "type": "text",
              "value": ", and "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "~numpy.c_"
            },
            {
              "type": "text",
              "value": " when an input with dtype other than the default "
            },
            {
              "type": "inlineCode",
              "value": "float64"
            },
            {
              "type": "text",
              "value": " and "
            },
            {
              "type": "inlineCode",
              "value": "complex128"
            },
            {
              "type": "text",
              "value": " and equivalent Python types were used. The methods have been fixed to handle varying precision correctly."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "("
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "gh-16815"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://github.com/numpy/numpy/pull/16815"
            },
            {
              "type": "text",
              "value": ")"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "``mgrid``, ``r_``, etc. consistently return correct outputs for non-default precision input",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Previously, if a boolean array index matched the size of the indexed array but not the shape, it was incorrectly allowed in some cases. In other cases, it gave an error, but the error was incorrectly a "
            },
            {
              "type": "inlineCode",
              "value": "ValueError"
            },
            {
              "type": "text",
              "value": " with a message about broadcasting instead of the correct "
            },
            {
              "type": "inlineCode",
              "value": "IndexError"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "For example, the following used to incorrectly give "
            },
            {
              "type": "inlineCode",
              "value": "ValueError: operands\ncould not be broadcast together with shapes (2,2) (1,4)"
            },
            {
              "type": "text",
              "value": ":"
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": "np.empty((2, 2))[np.array([[True, False, False, False]])]"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "And the following used to incorrectly return "
            },
            {
              "type": "inlineCode",
              "value": "array([], dtype=float64)"
            },
            {
              "type": "text",
              "value": ":"
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": "np.empty((2, 2))[np.array([[False, False, False, False]])]"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Both now correctly give "
            },
            {
              "type": "inlineCode",
              "value": "IndexError: boolean index did not match indexed\narray along dimension 0; dimension is 2 but corresponding boolean dimension is\n1"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "("
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "gh-17010"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://github.com/numpy/numpy/pull/17010"
            },
            {
              "type": "text",
              "value": ")"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "Boolean array indices with mismatching shapes now properly give ``IndexError``",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "When iterating while casting values, an error may stop the iteration earlier than before. In any case, a failed casting operation always returned undefined, partial results. Those may now be even more undefined and partial. For users of the "
            },
            {
              "type": "inlineCode",
              "value": "NpyIter"
            },
            {
              "type": "text",
              "value": " C-API such cast errors will now cause the "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "iternext()"
            },
            {
              "type": "text",
              "value": " function to return 0 and thus abort iteration. Currently, there is no API to detect such an error directly. It is necessary to check "
            },
            {
              "type": "inlineCode",
              "value": "PyErr_Occurred()"
            },
            {
              "type": "text",
              "value": ", which may be problematic in combination with "
            },
            {
              "type": "inlineCode",
              "value": "NpyIter_Reset"
            },
            {
              "type": "text",
              "value": ". These issues always existed, but new API could be added if required by users."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "("
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "gh-17029"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://github.com/numpy/numpy/pull/17029"
            },
            {
              "type": "text",
              "value": ")"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "Casting errors interrupt Iteration",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Some byte strings previously returned by f2py generated code may now be unicode strings. This results from the ongoing Python2 -> Python3 cleanup."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "("
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "gh-17068"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://github.com/numpy/numpy/pull/17068"
            },
            {
              "type": "text",
              "value": ")"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "f2py generated code may return unicode instead of byte strings",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "This has been the documented interface for many years, but there was still code that would accept a byte string representation of the pointer address. That code has been removed, passing the address as a byte string will now raise an error."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "("
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "gh-17241"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://github.com/numpy/numpy/pull/17241"
            },
            {
              "type": "text",
              "value": ")"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "The first element of the ``__array_interface__[\"data\"]`` tuple  must be an integer",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Previously, constructing an instance of "
            },
            {
              "type": "inlineCode",
              "value": "poly1d"
            },
            {
              "type": "text",
              "value": " with all-zero coefficients would cast the coefficients to "
            },
            {
              "type": "inlineCode",
              "value": "np.float64"
            },
            {
              "type": "text",
              "value": ". This affected the output dtype of methods which construct "
            },
            {
              "type": "inlineCode",
              "value": "poly1d"
            },
            {
              "type": "text",
              "value": " instances internally, such as "
            },
            {
              "type": "inlineCode",
              "value": "np.polymul"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "("
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "gh-17577"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://github.com/numpy/numpy/pull/17577"
            },
            {
              "type": "text",
              "value": ")"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "poly1d respects the dtype of all-zero argument",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Uses of Python 2.7 C-API functions have been updated to Python 3 only. Users who need the old version should take it from an older version of NumPy."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "("
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "gh-17580"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://github.com/numpy/numpy/pull/17580"
            },
            {
              "type": "text",
              "value": ")"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "The numpy.i file for swig is Python 3 only.",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "In calls using "
            },
            {
              "type": "inlineCode",
              "value": "np.array(..., dtype=\"V\")"
            },
            {
              "type": "text",
              "value": ", "
            },
            {
              "type": "inlineCode",
              "value": "arr.astype(\"V\")"
            },
            {
              "type": "text",
              "value": ", and similar a TypeError will now be correctly raised unless all elements have the identical void length. An example for this is       "
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": "np.array([b\"1\", b\"12\"], dtype=\"V\")"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Which previously returned an array with dtype "
            },
            {
              "type": "inlineCode",
              "value": "\"V2\""
            },
            {
              "type": "text",
              "value": " which cannot represent "
            },
            {
              "type": "inlineCode",
              "value": "b\"1\""
            },
            {
              "type": "text",
              "value": " faithfully."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "("
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "gh-17706"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://github.com/numpy/numpy/pull/17706"
            },
            {
              "type": "text",
              "value": ")"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "Void dtype discovery in ``np.array``",
      "type": "Section"
    },
    {
      "children": [],
      "level": 1,
      "target": null,
      "title": "C API changes",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "The "
            },
            {
              "type": "inlineCode",
              "value": "PyArray_DescrCheck"
            },
            {
              "type": "text",
              "value": " macro has been updated since NumPy 1.16.6 to be      "
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": "#define PyArray_DescrCheck(op) PyObject_TypeCheck(op, &PyArrayDescr_Type)"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Starting with NumPy 1.20 code that is compiled against an earlier version will be API incompatible with NumPy 1.20. The fix is to either compile against 1.16.6 (if the NumPy 1.16 release is the oldest release you wish to support), or manually inline the macro by replacing it with the new definition      "
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": "PyObject_TypeCheck(op, &PyArrayDescr_Type)"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "which is compatible with all NumPy versions."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "The ``PyArray_DescrCheck`` macro is modified",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "The size of the "
            },
            {
              "type": "inlineCode",
              "value": "PyArrayObject"
            },
            {
              "type": "text",
              "value": " and "
            },
            {
              "type": "inlineCode",
              "value": "PyVoidScalarObject"
            },
            {
              "type": "text",
              "value": " structures have changed.  The following header definition has been removed      "
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": "#define NPY_SIZEOF_PYARRAYOBJECT (sizeof(PyArrayObject_fields))"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "since the size must not be considered a compile time constant: it will change for different runtime versions of NumPy."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "The most likely relevant use are potential subclasses written in C which will have to be recompiled and should be updated.  Please see the documentation for "
            },
            {
              "type": "inlineCode",
              "value": "PyArrayObject"
            },
            {
              "type": "text",
              "value": " for more details and contact the NumPy developers if you are affected by this change."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "NumPy will attempt to give a graceful error but a program expecting a fixed structure size may have undefined behaviour and likely crash."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "("
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "gh-16938"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://github.com/numpy/numpy/pull/16938"
            },
            {
              "type": "text",
              "value": ")"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "Size of ``np.ndarray`` and ``np.void_`` changed",
      "type": "Section"
    },
    {
      "children": [],
      "level": 1,
      "target": null,
      "title": "New Features",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "The keyword argument "
            },
            {
              "type": "inlineCode",
              "value": "where"
            },
            {
              "type": "text",
              "value": " is added and allows to only consider specified elements or subaxes from an array in the Boolean evaluation of "
            },
            {
              "type": "inlineCode",
              "value": "all"
            },
            {
              "type": "text",
              "value": " and "
            },
            {
              "type": "inlineCode",
              "value": "any"
            },
            {
              "type": "text",
              "value": ". This new keyword is available to the functions "
            },
            {
              "type": "inlineCode",
              "value": "all"
            },
            {
              "type": "text",
              "value": " and "
            },
            {
              "type": "inlineCode",
              "value": "any"
            },
            {
              "type": "text",
              "value": " both via "
            },
            {
              "type": "inlineCode",
              "value": "numpy"
            },
            {
              "type": "text",
              "value": " directly or in the methods of "
            },
            {
              "type": "inlineCode",
              "value": "numpy.ndarray"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Any broadcastable Boolean array or a scalar can be set as "
            },
            {
              "type": "inlineCode",
              "value": "where"
            },
            {
              "type": "text",
              "value": ". It defaults to "
            },
            {
              "type": "inlineCode",
              "value": "True"
            },
            {
              "type": "text",
              "value": " to evaluate the functions for all elements in an array if "
            },
            {
              "type": "inlineCode",
              "value": "where"
            },
            {
              "type": "text",
              "value": " is not set by the user. Examples are given in the documentation of the functions."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "``where`` keyword argument for ``numpy.all`` and ``numpy.any`` functions",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "The keyword argument "
            },
            {
              "type": "inlineCode",
              "value": "where"
            },
            {
              "type": "text",
              "value": " is added and allows to limit the scope in the calculation of "
            },
            {
              "type": "inlineCode",
              "value": "mean"
            },
            {
              "type": "text",
              "value": ", "
            },
            {
              "type": "inlineCode",
              "value": "std"
            },
            {
              "type": "text",
              "value": " and "
            },
            {
              "type": "inlineCode",
              "value": "var"
            },
            {
              "type": "text",
              "value": " to only a subset of elements. It is available both via "
            },
            {
              "type": "inlineCode",
              "value": "numpy"
            },
            {
              "type": "text",
              "value": " directly or in the methods of "
            },
            {
              "type": "inlineCode",
              "value": "numpy.ndarray"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Any broadcastable Boolean array or a scalar can be set as "
            },
            {
              "type": "inlineCode",
              "value": "where"
            },
            {
              "type": "text",
              "value": ". It defaults to "
            },
            {
              "type": "inlineCode",
              "value": "True"
            },
            {
              "type": "text",
              "value": " to evaluate the functions for all elements in an array if "
            },
            {
              "type": "inlineCode",
              "value": "where"
            },
            {
              "type": "text",
              "value": " is not set by the user. Examples are given in the documentation of the functions."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "("
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "gh-15852"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://github.com/numpy/numpy/pull/15852"
            },
            {
              "type": "text",
              "value": ")"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "``where`` keyword argument for ``numpy`` functions ``mean``, ``std``, ``var``",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "The keyword argument option "
            },
            {
              "type": "inlineCode",
              "value": "norm=backward"
            },
            {
              "type": "text",
              "value": " is added as an alias for "
            },
            {
              "type": "inlineCode",
              "value": "None"
            },
            {
              "type": "text",
              "value": " and acts as the default option; using it has the direct transforms unscaled and the inverse transforms scaled by "
            },
            {
              "type": "inlineCode",
              "value": "1/n"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Using the new keyword argument option "
            },
            {
              "type": "inlineCode",
              "value": "norm=forward"
            },
            {
              "type": "text",
              "value": " has the direct transforms scaled by "
            },
            {
              "type": "inlineCode",
              "value": "1/n"
            },
            {
              "type": "text",
              "value": " and the inverse transforms unscaled (i.e. exactly opposite to the default option "
            },
            {
              "type": "inlineCode",
              "value": "norm=backward"
            },
            {
              "type": "text",
              "value": ")."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "("
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "gh-16476"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://github.com/numpy/numpy/pull/16476"
            },
            {
              "type": "text",
              "value": ")"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "``norm=backward``, ``forward`` keyword options for ``numpy.fft`` functions",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Type annotations have been added for large parts of NumPy. There is also a new "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "module",
              "reference": {
                "kind": "api",
                "module": "numpy.typing",
                "path": "numpy.typing",
                "type": "RefInfo",
                "version": "*"
              },
              "type": "Link",
              "value": "numpy.typing"
            },
            {
              "type": "text",
              "value": " module that contains useful types for end-users. The currently available types are"
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "inlineCode",
                      "value": "ArrayLike"
                    },
                    {
                      "type": "text",
                      "value": ": for objects that can be coerced to an array"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "inlineCode",
                      "value": "DtypeLike"
                    },
                    {
                      "type": "text",
                      "value": ": for objects that can be coerced to a dtype"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            }
          ],
          "ordered": false,
          "spread": false,
          "start": 1,
          "type": "list"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "("
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "gh-16515"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://github.com/numpy/numpy/pull/16515"
            },
            {
              "type": "text",
              "value": ")"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "NumPy is now typed",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "The types in "
            },
            {
              "type": "inlineCode",
              "value": "numpy.typing"
            },
            {
              "type": "text",
              "value": " can now be imported at runtime. Code like the following will now work:"
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": "from numpy.typing import ArrayLike\nx: ArrayLike = [1, 2, 3, 4]"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "("
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "gh-16558"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://github.com/numpy/numpy/pull/16558"
            },
            {
              "type": "text",
              "value": ")"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "``numpy.typing`` is accessible at runtime",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Because f2py is released together with NumPy, "
            },
            {
              "type": "inlineCode",
              "value": "__f2py_numpy_version__"
            },
            {
              "type": "text",
              "value": " provides a way to track the version f2py used to generate the module."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "("
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "gh-16594"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://github.com/numpy/numpy/pull/16594"
            },
            {
              "type": "text",
              "value": ")"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "New ``__f2py_numpy_version__`` attribute for f2py generated modules.",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Currently running mypy with the NumPy stubs configured requires either:"
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Installing NumPy"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Adding the source directory to MYPYPATH and linking to the "
                    },
                    {
                      "type": "inlineCode",
                      "value": "mypy.ini"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            }
          ],
          "ordered": false,
          "spread": false,
          "start": 1,
          "type": "list"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Both options are somewhat inconvenient, so add a "
            },
            {
              "type": "inlineCode",
              "value": "--mypy"
            },
            {
              "type": "text",
              "value": " option to runtests that handles setting things up for you. This will also be useful in the future for any typing codegen since it will ensure the project is built before type checking."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "("
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "gh-17123"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://github.com/numpy/numpy/pull/17123"
            },
            {
              "type": "text",
              "value": ")"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "``mypy`` tests can be run via runtests.py",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "anchor": null,
              "exists": true,
              "kind": "module",
              "reference": {
                "kind": "api",
                "module": "numpy.distutils",
                "path": "numpy.distutils",
                "type": "RefInfo",
                "version": "*"
              },
              "type": "Link",
              "value": "distutils"
            },
            {
              "type": "text",
              "value": " allows negation of libraries when determining BLAS/LAPACK libraries. This may be used to remove an item from the library resolution phase, i.e. to disallow NetLIB libraries one could do:"
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": "NPY_BLAS_ORDER='^blas' NPY_LAPACK_ORDER='^lapack' python setup.py build"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "That will use any of the accelerated libraries instead."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "("
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "gh-17219"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://github.com/numpy/numpy/pull/17219"
            },
            {
              "type": "text",
              "value": ")"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "Negation of user defined BLAS/LAPACK detection order",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "It is now possible to pass  "
            },
            {
              "type": "inlineCode",
              "value": "-j"
            },
            {
              "type": "text",
              "value": ", "
            },
            {
              "type": "inlineCode",
              "value": "--cpu-baseline"
            },
            {
              "type": "text",
              "value": ", "
            },
            {
              "type": "inlineCode",
              "value": "--cpu-dispatch"
            },
            {
              "type": "text",
              "value": " and "
            },
            {
              "type": "inlineCode",
              "value": "--disable-optimization"
            },
            {
              "type": "text",
              "value": " flags to ASV build when the "
            },
            {
              "type": "inlineCode",
              "value": "--bench-compare"
            },
            {
              "type": "text",
              "value": " argument is used."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "("
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "gh-17284"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://github.com/numpy/numpy/pull/17284"
            },
            {
              "type": "text",
              "value": ")"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "Allow passing optimizations arguments to asv build",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Support for the nvfortran compiler, a version of pgfortran, has been added."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "("
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "gh-17344"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://github.com/numpy/numpy/pull/17344"
            },
            {
              "type": "text",
              "value": ")"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "The NVIDIA HPC SDK nvfortran compiler is now supported",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "The "
            },
            {
              "type": "inlineCode",
              "value": "dtype"
            },
            {
              "type": "text",
              "value": " option is now available for "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "module",
              "reference": {
                "kind": "api",
                "module": "numpy",
                "path": "numpy:cov",
                "type": "RefInfo",
                "version": "*"
              },
              "type": "Link",
              "value": "numpy.cov"
            },
            {
              "type": "text",
              "value": " and "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "module",
              "reference": {
                "kind": "api",
                "module": "numpy",
                "path": "numpy:corrcoef",
                "type": "RefInfo",
                "version": "*"
              },
              "type": "Link",
              "value": "numpy.corrcoef"
            },
            {
              "type": "text",
              "value": ". It specifies which data-type the returned result should have. By default the functions still return a "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "module",
              "reference": {
                "kind": "api",
                "module": "numpy",
                "path": "numpy:float64",
                "type": "RefInfo",
                "version": "*"
              },
              "type": "Link",
              "value": "numpy.float64"
            },
            {
              "type": "text",
              "value": " result."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "("
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "gh-17456"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://github.com/numpy/numpy/pull/17456"
            },
            {
              "type": "text",
              "value": ")"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "``dtype`` option for ``cov`` and ``corrcoef``",
      "type": "Section"
    },
    {
      "children": [],
      "level": 1,
      "target": null,
      "title": "Improvements",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "The string representation ("
            },
            {
              "type": "inlineCode",
              "value": "__str__"
            },
            {
              "type": "text",
              "value": ") of all six polynomial types in "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "module",
              "reference": {
                "kind": "api",
                "module": "numpy.polynomial",
                "path": "numpy.polynomial",
                "type": "RefInfo",
                "version": "*"
              },
              "type": "Link",
              "value": "numpy.polynomial"
            },
            {
              "type": "text",
              "value": " has been updated to give the polynomial as a mathematical expression instead of an array of coefficients. Two package-wide formats for the polynomial expressions are available - one using Unicode characters for superscripts and subscripts, and another using only ASCII characters."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "("
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "gh-15666"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://github.com/numpy/numpy/pull/15666"
            },
            {
              "type": "text",
              "value": ")"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "Improved string representation for polynomials (``__str__``)",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Apple no longer supports Accelerate. Remove it."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "("
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "gh-15759"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://github.com/numpy/numpy/pull/15759"
            },
            {
              "type": "text",
              "value": ")"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "Remove the Accelerate library as a candidate LAPACK library",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "If elements of an object array have a "
            },
            {
              "type": "inlineCode",
              "value": "repr"
            },
            {
              "type": "text",
              "value": " containing new lines, then the wrapped lines will be aligned by column. Notably, this improves the "
            },
            {
              "type": "inlineCode",
              "value": "repr"
            },
            {
              "type": "text",
              "value": " of nested arrays      "
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": ">>> np.array([np.eye(2), np.eye(3)], dtype=object)\narray([array([[1., 0.],\n              [0., 1.]]),\n       array([[1., 0., 0.],\n              [0., 1., 0.],\n              [0., 0., 1.]])], dtype=object)"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "("
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "gh-15997"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://github.com/numpy/numpy/pull/15997"
            },
            {
              "type": "text",
              "value": ")"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "Object arrays containing multi-line objects have a more readable ``repr``",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Support was added to "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "module",
              "reference": {
                "kind": "api",
                "module": "numpy",
                "path": "numpy:concatenate",
                "type": "RefInfo",
                "version": "*"
              },
              "type": "Link",
              "value": "concatenate"
            },
            {
              "type": "text",
              "value": " to provide an output "
            },
            {
              "type": "inlineCode",
              "value": "dtype"
            },
            {
              "type": "text",
              "value": " and "
            },
            {
              "type": "inlineCode",
              "value": "casting"
            },
            {
              "type": "text",
              "value": " using keyword arguments. The "
            },
            {
              "type": "inlineCode",
              "value": "dtype"
            },
            {
              "type": "text",
              "value": " argument cannot be provided in conjunction with the "
            },
            {
              "type": "inlineCode",
              "value": "out"
            },
            {
              "type": "text",
              "value": " one."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "("
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "gh-16134"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://github.com/numpy/numpy/pull/16134"
            },
            {
              "type": "text",
              "value": ")"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "Concatenate supports providing an output dtype",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Callback functions in f2py are now thread safe."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "("
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "gh-16519"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://github.com/numpy/numpy/pull/16519"
            },
            {
              "type": "text",
              "value": ")"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "Thread safe f2py callback functions",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "anchor": null,
              "exists": true,
              "kind": "module",
              "reference": {
                "kind": "api",
                "module": "numpy.rec",
                "path": "numpy.rec:fromfile",
                "type": "RefInfo",
                "version": "*"
              },
              "type": "Link",
              "value": "numpy.rec.fromfile"
            },
            {
              "type": "text",
              "value": " can now use file-like objects, for instance "
            },
            {
              "type": "inlineCode",
              "value": "io.BytesIO"
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "("
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "gh-16675"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://github.com/numpy/numpy/pull/16675"
            },
            {
              "type": "text",
              "value": ")"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "`numpy.core.records.fromfile` now supports file-like objects",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "This allows SciPy to be built on AIX."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "("
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "gh-16710"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://github.com/numpy/numpy/pull/16710"
            },
            {
              "type": "text",
              "value": ")"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "RPATH support on AIX added to distutils",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "The compiler command selection for Fortran Portland Group Compiler is changed in "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "module",
              "reference": {
                "kind": "api",
                "module": "numpy.distutils.fcompiler",
                "path": "numpy.distutils.fcompiler",
                "type": "RefInfo",
                "version": "*"
              },
              "type": "Link",
              "value": "numpy.distutils.fcompiler"
            },
            {
              "type": "text",
              "value": ".  This only affects the linking command.  This forces the use of the executable provided by the command line option (if provided) instead of the pgfortran executable.  If no executable is provided to the command line option it defaults to the pgf90 executable, which is an alias for pgfortran according to the PGI documentation."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "("
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "gh-16730"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://github.com/numpy/numpy/pull/16730"
            },
            {
              "type": "text",
              "value": ")"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "Use f90 compiler specified by the command line args",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "The pxd declarations for Cython 3.0 were improved to avoid using deprecated NumPy C-API features.  Extension modules built with Cython 3.0+ that use NumPy can now set the C macro "
            },
            {
              "type": "inlineCode",
              "value": "NPY_NO_DEPRECATED_API=NPY_1_7_API_VERSION"
            },
            {
              "type": "text",
              "value": " to avoid C compiler warnings about deprecated API usage."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "("
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "gh-16986"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://github.com/numpy/numpy/pull/16986"
            },
            {
              "type": "text",
              "value": ")"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "Add NumPy declarations for Cython 3.0 and later",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Make sure the window functions provided by NumPy are symmetric. There were previously small deviations from symmetry due to numerical precision that are now avoided by better arrangement of the computation."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "("
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "gh-17195"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://github.com/numpy/numpy/pull/17195"
            },
            {
              "type": "text",
              "value": ")"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "Make the window functions exactly symmetric",
      "type": "Section"
    },
    {
      "children": [],
      "level": 1,
      "target": null,
      "title": "Performance improvements and changes",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "A series of improvements for NumPy infrastructure to pave the way to "
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "NEP-38"
                }
              ],
              "type": "strong"
            },
            {
              "type": "text",
              "value": ", that can be summarized as follow:"
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "children": [
                {
                  "children": [
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "New Build Arguments"
                        }
                      ],
                      "type": "strong"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "children": [
                        {
                          "children": [
                            {
                              "type": "inlineCode",
                              "value": "--cpu-baseline"
                            },
                            {
                              "type": "text",
                              "value": " to specify the minimal set of required       optimizations, default value is "
                            },
                            {
                              "type": "inlineCode",
                              "value": "min"
                            },
                            {
                              "type": "text",
                              "value": " which provides the minimum       CPU features that can safely run on a wide range of users       platforms."
                            }
                          ],
                          "type": "paragraph"
                        }
                      ],
                      "spread": false,
                      "type": "listItem"
                    },
                    {
                      "children": [
                        {
                          "children": [
                            {
                              "type": "inlineCode",
                              "value": "--cpu-dispatch"
                            },
                            {
                              "type": "text",
                              "value": " to specify the dispatched set of additional       optimizations, default value is "
                            },
                            {
                              "type": "inlineCode",
                              "value": "max -xop -fma4"
                            },
                            {
                              "type": "text",
                              "value": " which enables       all CPU features, except for AMD legacy features."
                            }
                          ],
                          "type": "paragraph"
                        }
                      ],
                      "spread": false,
                      "type": "listItem"
                    },
                    {
                      "children": [
                        {
                          "children": [
                            {
                              "type": "inlineCode",
                              "value": "--disable-optimization"
                            },
                            {
                              "type": "text",
                              "value": " to explicitly disable the whole new       improvements, It also adds a new "
                            },
                            {
                              "children": [
                                {
                                  "type": "text",
                                  "value": "C"
                                }
                              ],
                              "type": "strong"
                            },
                            {
                              "type": "text",
                              "value": " compiler #definition       called "
                            },
                            {
                              "type": "inlineCode",
                              "value": "NPY_DISABLE_OPTIMIZATION"
                            },
                            {
                              "type": "text",
                              "value": " which it can be used as       guard for any SIMD code."
                            }
                          ],
                          "type": "paragraph"
                        }
                      ],
                      "spread": false,
                      "type": "listItem"
                    }
                  ],
                  "ordered": false,
                  "spread": false,
                  "start": 1,
                  "type": "list"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "Advanced CPU dispatcher"
                        }
                      ],
                      "type": "strong"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "A flexible cross-architecture CPU dispatcher built on the top of    Python/Numpy distutils, support all common compilers with a wide range of    CPU features."
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The new dispatcher requires a special file extension "
                    },
                    {
                      "type": "inlineCode",
                      "value": "*.dispatch.c"
                    },
                    {
                      "type": "text",
                      "value": " to    mark the dispatch-able "
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "C"
                        }
                      ],
                      "type": "strong"
                    },
                    {
                      "type": "text",
                      "value": " sources. These sources have the ability to be    compiled multiple times so that each compilation process represents certain    CPU features and provides different #definitions and flags that affect the    code paths."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "New auto-generated C header ``core/src/common/_cpu_dispatch.h``"
                        }
                      ],
                      "type": "strong"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "This header is generated by the distutils module "
                    },
                    {
                      "type": "inlineCode",
                      "value": "ccompiler_opt"
                    },
                    {
                      "type": "text",
                      "value": ", and    contains all the #definitions and headers of instruction sets, that had been    configured through command arguments '--cpu-baseline' and '--cpu-dispatch'."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "New C header ``core/src/common/npy_cpu_dispatch.h``"
                        }
                      ],
                      "type": "strong"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "This header contains all utilities that required for the whole CPU    dispatching process, it also can be considered as a bridge linking the new    infrastructure work with NumPy CPU runtime detection."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "Add new attributes to NumPy umath module(Python level)"
                        }
                      ],
                      "type": "strong"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "children": [
                        {
                          "children": [
                            {
                              "type": "inlineCode",
                              "value": "__cpu_baseline__"
                            },
                            {
                              "type": "text",
                              "value": " a list contains the minimal set of required      optimizations that supported by the compiler and platform according to the      specified values to command argument '--cpu-baseline'."
                            }
                          ],
                          "type": "paragraph"
                        }
                      ],
                      "spread": false,
                      "type": "listItem"
                    },
                    {
                      "children": [
                        {
                          "children": [
                            {
                              "type": "inlineCode",
                              "value": "__cpu_dispatch__"
                            },
                            {
                              "type": "text",
                              "value": " a list contains the dispatched set of additional      optimizations that supported by the compiler and platform according to the      specified values to command argument '--cpu-dispatch'."
                            }
                          ],
                          "type": "paragraph"
                        }
                      ],
                      "spread": false,
                      "type": "listItem"
                    }
                  ],
                  "ordered": false,
                  "spread": false,
                  "start": 1,
                  "type": "list"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "Print the supported CPU features during the run of PytestTester"
                        }
                      ],
                      "type": "strong"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            }
          ],
          "ordered": false,
          "spread": false,
          "start": 1,
          "type": "list"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "("
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "gh-13516"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://github.com/numpy/numpy/pull/13516"
            },
            {
              "type": "text",
              "value": ")"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "Enable multi-platform SIMD compiler optimizations",
      "type": "Section"
    },
    {
      "children": [],
      "level": 1,
      "target": null,
      "title": "Changes",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "The changes also assure that different compiler versions have the same behavior for nan or inf usages in these operations. This was previously compiler dependent, we now force the invalid and divide by zero flags, making the results the same across compilers. For example, gcc-5, gcc-8, or gcc-9 now result in the same behavior. The changes are tabulated below:"
            }
          ],
          "type": "paragraph"
        },
        {
          "args": "Summary of New Behavior",
          "children": [],
          "name": "list-table",
          "options": {
            "header-rows": "1",
            "widths": "auto"
          },
          "type": "mystDirective",
          "value": "* - Operator\n  - Old Warning\n  - New Warning\n  - Old Result\n  - New Result\n  - Works on MacOS\n* - np.divmod(1.0, 0.0)\n  - Invalid\n  - Invalid and Dividebyzero\n  - nan, nan\n  - inf, nan\n  - Yes\n* - np.fmod(1.0, 0.0)\n  - Invalid\n  - Invalid\n  - nan\n  - nan\n  - No? Yes\n* - np.floor_divide(1.0, 0.0)\n  - Invalid\n  - Dividebyzero\n  - nan\n  - inf\n  - Yes\n* - np.remainder(1.0, 0.0)\n  - Invalid\n  - Invalid\n  - nan\n  - nan\n  - Yes"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "("
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "gh-16161"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://github.com/numpy/numpy/pull/16161"
            },
            {
              "type": "text",
              "value": ")"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "Changed behavior of ``divmod(1., 0.)`` and related functions",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "When using a "
            },
            {
              "type": "inlineCode",
              "value": "int"
            },
            {
              "type": "text",
              "value": " dtype in "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "module",
              "reference": {
                "kind": "api",
                "module": "numpy",
                "path": "numpy:linspace",
                "type": "RefInfo",
                "version": "*"
              },
              "type": "Link",
              "value": "numpy.linspace"
            },
            {
              "type": "text",
              "value": ", previously float values would be rounded towards zero. Now "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "numpy.floor"
            },
            {
              "type": "text",
              "value": " is used instead, which rounds toward "
            },
            {
              "type": "inlineCode",
              "value": "-inf"
            },
            {
              "type": "text",
              "value": ". This changes the results for negative values. For example, the following would previously give      "
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": ">>> np.linspace(-3, 1, 8, dtype=int)\narray([-3, -2, -1, -1,  0,  0,  0,  1])"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "and now results in      "
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": ">>> np.linspace(-3, 1, 8, dtype=int)\narray([-3, -3, -2, -2, -1, -1,  0,  1])"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "The former result can still be obtained with      "
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": ">>> np.linspace(-3, 1, 8).astype(int)\narray([-3, -2, -1, -1,  0,  0,  0,  1])"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "("
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "gh-16841"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://github.com/numpy/numpy/pull/16841"
            },
            {
              "type": "text",
              "value": ")"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "``np.linspace`` on integers now uses floor",
      "type": "Section"
    }
  ],
  "content": {},
  "example_section_data": {
    "children": [],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": null,
  "item_line": null,
  "item_type": null,
  "ordered_sections": [],
  "references": null,
  "see_also": [],
  "signature": {
    "type": "Signature",
    "value": null
  },
  "type": "DocBlob"
}