{
  "aliases": [],
  "arbitrary": [
    {
      "children": [
        {
          "args": "numpy",
          "children": [],
          "name": "currentmodule",
          "options": {},
          "type": "mystDirective",
          "value": ""
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "The NumPy 1.21.0 release highlights are"
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "continued SIMD work covering more functions and platforms,"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "initial work on the new dtype infrastructure and casting,"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "universal2 wheels for Python 3.8 and Python 3.9 on Mac,"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "improved documentation,"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "improved annotations,"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "new "
                    },
                    {
                      "type": "inlineCode",
                      "value": "PCG64DXSM"
                    },
                    {
                      "type": "text",
                      "value": " bitgenerator for random numbers."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            }
          ],
          "ordered": false,
          "spread": false,
          "start": 1,
          "type": "list"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "In addition there are the usual large number of bug fixes and other improvements."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "The Python versions supported for this release are 3.7-3.9. Official support for Python 3.10 will be added when it is released."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "children": [
                {
                  "type": "text",
                  "value": "warning "
                }
              ],
              "type": "admonitionTitle"
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "There are unresolved problems compiling NumPy 1.20.0 with gcc-11.1."
                }
              ],
              "type": "paragraph"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "Optimization level "
                        },
                        {
                          "domain": null,
                          "role": null,
                          "type": "Directive",
                          "value": "-O3"
                        },
                        {
                          "type": "text",
                          "value": " results in many incorrect warnings when   running the tests."
                        }
                      ],
                      "type": "paragraph"
                    }
                  ],
                  "spread": false,
                  "type": "listItem"
                },
                {
                  "children": [
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "On some hardware NumPY will hang in an infinite loop."
                        }
                      ],
                      "type": "paragraph"
                    }
                  ],
                  "spread": false,
                  "type": "listItem"
                }
              ],
              "ordered": false,
              "spread": false,
              "start": 1,
              "type": "list"
            }
          ],
          "kind": "note",
          "type": "admonition"
        }
      ],
      "level": 0,
      "target": null,
      "title": "NumPy 1.21.0 Release Notes",
      "type": "Section"
    },
    {
      "children": [
        {
          "args": "numpy.random",
          "children": [],
          "name": "currentmodule",
          "options": {},
          "type": "mystDirective",
          "value": ""
        }
      ],
      "level": 1,
      "target": null,
      "title": "New functions",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Uses of the "
            },
            {
              "type": "inlineCode",
              "value": "PCG64"
            },
            {
              "type": "text",
              "value": " "
            },
            {
              "type": "inlineCode",
              "value": "BitGenerator"
            },
            {
              "type": "text",
              "value": " in a massively-parallel context have been shown to have statistical weaknesses that were not apparent at the first release in numpy 1.17. Most users will never observe this weakness and are safe to continue to use "
            },
            {
              "type": "inlineCode",
              "value": "PCG64"
            },
            {
              "type": "text",
              "value": ". We have introduced a new "
            },
            {
              "type": "inlineCode",
              "value": "PCG64DXSM"
            },
            {
              "type": "text",
              "value": " "
            },
            {
              "type": "inlineCode",
              "value": "BitGenerator"
            },
            {
              "type": "text",
              "value": " that will eventually become the new default "
            },
            {
              "type": "inlineCode",
              "value": "BitGenerator"
            },
            {
              "type": "text",
              "value": " implementation used by "
            },
            {
              "type": "inlineCode",
              "value": "default_rng"
            },
            {
              "type": "text",
              "value": " in future releases. "
            },
            {
              "type": "inlineCode",
              "value": "PCG64DXSM"
            },
            {
              "type": "text",
              "value": " solves the statistical weakness while preserving the performance and the features of "
            },
            {
              "type": "inlineCode",
              "value": "PCG64"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "See "
            },
            {
              "type": "inlineCode",
              "value": "upgrading-pcg64"
            },
            {
              "type": "text",
              "value": " for more details."
            }
          ],
          "type": "paragraph"
        },
        {
          "args": "numpy",
          "children": [],
          "name": "currentmodule",
          "options": {},
          "type": "mystDirective",
          "value": ""
        },
        {
          "children": [
            {
              "type": "text",
              "value": "("
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "gh-18906"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://github.com/numpy/numpy/pull/18906"
            },
            {
              "type": "text",
              "value": ")"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "Add `PCG64DXSM` `BitGenerator`",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The "
                    },
                    {
                      "type": "inlineCode",
                      "value": "shape"
                    },
                    {
                      "type": "text",
                      "value": " argument "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "module",
                      "reference": {
                        "kind": "api",
                        "module": "numpy",
                        "path": "numpy:unravel_index",
                        "type": "RefInfo",
                        "version": "*"
                      },
                      "type": "Link",
                      "value": "unravel_index"
                    },
                    {
                      "type": "text",
                      "value": " cannot be passed   as "
                    },
                    {
                      "type": "inlineCode",
                      "value": "dims"
                    },
                    {
                      "type": "text",
                      "value": " keyword argument anymore. (Was deprecated in NumPy 1.16.)"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "("
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "gh-17900"
                        }
                      ],
                      "title": "",
                      "type": "link",
                      "url": "https://github.com/numpy/numpy/pull/17900"
                    },
                    {
                      "type": "text",
                      "value": ")"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The function "
                    },
                    {
                      "type": "inlineCode",
                      "value": "PyUFunc_GenericFunction"
                    },
                    {
                      "type": "text",
                      "value": " has been disabled.   It was deprecated in NumPy 1.19.  Users should call the ufunc   directly using the Python API."
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "("
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "gh-18697"
                        }
                      ],
                      "title": "",
                      "type": "link",
                      "url": "https://github.com/numpy/numpy/pull/18697"
                    },
                    {
                      "type": "text",
                      "value": ")"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The function "
                    },
                    {
                      "type": "inlineCode",
                      "value": "PyUFunc_SetUsesArraysAsData"
                    },
                    {
                      "type": "text",
                      "value": " has been disabled.   It was deprecated in NumPy 1.19."
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "("
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "gh-18697"
                        }
                      ],
                      "title": "",
                      "type": "link",
                      "url": "https://github.com/numpy/numpy/pull/18697"
                    },
                    {
                      "type": "text",
                      "value": ")"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The class "
                    },
                    {
                      "type": "inlineCode",
                      "value": "PolyBase"
                    },
                    {
                      "type": "text",
                      "value": " has been removed (deprecated in numpy 1.9.0). Please   use the abstract "
                    },
                    {
                      "type": "inlineCode",
                      "value": "ABCPolyBase"
                    },
                    {
                      "type": "text",
                      "value": " class instead."
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "("
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "gh-18963"
                        }
                      ],
                      "title": "",
                      "type": "link",
                      "url": "https://github.com/numpy/numpy/pull/18963"
                    },
                    {
                      "type": "text",
                      "value": ")"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The unused "
                    },
                    {
                      "type": "inlineCode",
                      "value": "PolyError"
                    },
                    {
                      "type": "text",
                      "value": " and "
                    },
                    {
                      "type": "inlineCode",
                      "value": "PolyDomainError"
                    },
                    {
                      "type": "text",
                      "value": " exceptions are   removed."
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "("
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "gh-18963"
                        }
                      ],
                      "title": "",
                      "type": "link",
                      "url": "https://github.com/numpy/numpy/pull/18963"
                    },
                    {
                      "type": "text",
                      "value": ")"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            }
          ],
          "ordered": false,
          "spread": false,
          "start": 1,
          "type": "list"
        }
      ],
      "level": 1,
      "target": null,
      "title": "Expired deprecations",
      "type": "Section"
    },
    {
      "children": [],
      "level": 1,
      "target": null,
      "title": "Deprecations",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "A "
            },
            {
              "type": "inlineCode",
              "value": "DeprecationWarning"
            },
            {
              "type": "text",
              "value": " is now given if the "
            },
            {
              "type": "inlineCode",
              "value": ".dtype"
            },
            {
              "type": "text",
              "value": " attribute of an object passed into "
            },
            {
              "type": "inlineCode",
              "value": "np.dtype"
            },
            {
              "type": "text",
              "value": " or as a "
            },
            {
              "type": "inlineCode",
              "value": "dtype=obj"
            },
            {
              "type": "text",
              "value": " argument is not a dtype. NumPy will stop attempting to recursively coerce the result of "
            },
            {
              "type": "inlineCode",
              "value": ".dtype"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "("
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "gh-13578"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://github.com/numpy/numpy/pull/13578"
            },
            {
              "type": "text",
              "value": ")"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "The ``.dtype`` attribute must return a ``dtype``",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "anchor": null,
              "exists": true,
              "kind": "module",
              "reference": {
                "kind": "api",
                "module": "numpy",
                "path": "numpy:convolve",
                "type": "RefInfo",
                "version": "*"
              },
              "type": "Link",
              "value": "convolve"
            },
            {
              "type": "text",
              "value": " and "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "module",
              "reference": {
                "kind": "api",
                "module": "numpy",
                "path": "numpy:correlate",
                "type": "RefInfo",
                "version": "*"
              },
              "type": "Link",
              "value": "correlate"
            },
            {
              "type": "text",
              "value": " now emit a warning when there are case insensitive and/or inexact matches found for "
            },
            {
              "type": "inlineCode",
              "value": "mode"
            },
            {
              "type": "text",
              "value": " argument in the functions. Pass full "
            },
            {
              "type": "inlineCode",
              "value": "\"same\""
            },
            {
              "type": "text",
              "value": ", "
            },
            {
              "type": "inlineCode",
              "value": "\"valid\""
            },
            {
              "type": "text",
              "value": ", "
            },
            {
              "type": "inlineCode",
              "value": "\"full\""
            },
            {
              "type": "text",
              "value": " strings instead of "
            },
            {
              "type": "inlineCode",
              "value": "\"s\""
            },
            {
              "type": "text",
              "value": ", "
            },
            {
              "type": "inlineCode",
              "value": "\"v\""
            },
            {
              "type": "text",
              "value": ", "
            },
            {
              "type": "inlineCode",
              "value": "\"f\""
            },
            {
              "type": "text",
              "value": " for the "
            },
            {
              "type": "inlineCode",
              "value": "mode"
            },
            {
              "type": "text",
              "value": " argument."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "("
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "gh-17492"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://github.com/numpy/numpy/pull/17492"
            },
            {
              "type": "text",
              "value": ")"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "Inexact matches for ``numpy.convolve`` and ``numpy.correlate`` are deprecated",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "inlineCode",
              "value": "np.typeDict"
            },
            {
              "type": "text",
              "value": " is a deprecated alias for "
            },
            {
              "type": "inlineCode",
              "value": "np.sctypeDict"
            },
            {
              "type": "text",
              "value": " and has been so for over 14 years ("
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "6689502_"
            },
            {
              "type": "text",
              "value": "). A deprecation warning will now be issued whenever getting "
            },
            {
              "type": "inlineCode",
              "value": "np.typeDict"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        },
        {
          "placeholder": "target",
          "type": "Unimplemented",
          "value": ".. _6689502: https://github.com/numpy/numpy/commit/668950285c407593a368336ff2e737c5da84af7d"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "("
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "gh-17586"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://github.com/numpy/numpy/pull/17586"
            },
            {
              "type": "text",
              "value": ")"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "``np.typeDict`` has been formally deprecated",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "When an object raised an exception during access of the special attributes "
            },
            {
              "type": "inlineCode",
              "value": "__array__"
            },
            {
              "type": "text",
              "value": " or "
            },
            {
              "type": "inlineCode",
              "value": "__array_interface__"
            },
            {
              "type": "text",
              "value": ", this exception was usually ignored. A warning is now given when the exception is anything but AttributeError. To silence the warning, the type raising the exception has to be adapted to raise an "
            },
            {
              "type": "inlineCode",
              "value": "AttributeError"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "("
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "gh-19001"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://github.com/numpy/numpy/pull/19001"
            },
            {
              "type": "text",
              "value": ")"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "Exceptions will be raised during array-like creation",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Four methods of the "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "ndarray.ctypes"
            },
            {
              "type": "text",
              "value": " object have been deprecated, as they are (undocumentated) implementation artifacts of their respective properties."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "The methods in question are:"
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "inlineCode",
                      "value": "_ctypes.get_data"
                    },
                    {
                      "type": "text",
                      "value": " (use "
                    },
                    {
                      "type": "inlineCode",
                      "value": "_ctypes.data"
                    },
                    {
                      "type": "text",
                      "value": " instead)"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "inlineCode",
                      "value": "_ctypes.get_shape"
                    },
                    {
                      "type": "text",
                      "value": " (use "
                    },
                    {
                      "type": "inlineCode",
                      "value": "_ctypes.shape"
                    },
                    {
                      "type": "text",
                      "value": " instead)"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "inlineCode",
                      "value": "_ctypes.get_strides"
                    },
                    {
                      "type": "text",
                      "value": " (use "
                    },
                    {
                      "type": "inlineCode",
                      "value": "_ctypes.strides"
                    },
                    {
                      "type": "text",
                      "value": " instead)"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "inlineCode",
                      "value": "_ctypes.get_as_parameter"
                    },
                    {
                      "type": "text",
                      "value": " (use "
                    },
                    {
                      "type": "inlineCode",
                      "value": "_ctypes._as_parameter_"
                    },
                    {
                      "type": "text",
                      "value": " instead)"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            }
          ],
          "ordered": false,
          "spread": false,
          "start": 1,
          "type": "list"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "("
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "gh-19031"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://github.com/numpy/numpy/pull/19031"
            },
            {
              "type": "text",
              "value": ")"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "Four ``ndarray.ctypes`` methods have been deprecated",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The "
                    },
                    {
                      "type": "inlineCode",
                      "value": "shape"
                    },
                    {
                      "type": "text",
                      "value": " argument "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "module",
                      "reference": {
                        "kind": "api",
                        "module": "numpy",
                        "path": "numpy:unravel_index",
                        "type": "RefInfo",
                        "version": "*"
                      },
                      "type": "Link",
                      "value": "numpy.unravel_index"
                    },
                    {
                      "type": "text",
                      "value": " cannot be passed   as "
                    },
                    {
                      "type": "inlineCode",
                      "value": "dims"
                    },
                    {
                      "type": "text",
                      "value": " keyword argument anymore. (Was deprecated in NumPy 1.16.)"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "("
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "gh-17900"
                        }
                      ],
                      "title": "",
                      "type": "link",
                      "url": "https://github.com/numpy/numpy/pull/17900"
                    },
                    {
                      "type": "text",
                      "value": ")"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The function "
                    },
                    {
                      "type": "inlineCode",
                      "value": "PyUFunc_GenericFunction"
                    },
                    {
                      "type": "text",
                      "value": " has been disabled.   It was deprecated in NumPy 1.19.  Users should call the ufunc   directly using the Python API."
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "("
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "gh-18697"
                        }
                      ],
                      "title": "",
                      "type": "link",
                      "url": "https://github.com/numpy/numpy/pull/18697"
                    },
                    {
                      "type": "text",
                      "value": ")"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The function "
                    },
                    {
                      "type": "inlineCode",
                      "value": "PyUFunc_SetUsesArraysAsData"
                    },
                    {
                      "type": "text",
                      "value": " has been disabled.   It was deprecated in NumPy 1.19."
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "("
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "gh-18697"
                        }
                      ],
                      "title": "",
                      "type": "link",
                      "url": "https://github.com/numpy/numpy/pull/18697"
                    },
                    {
                      "type": "text",
                      "value": ")"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            }
          ],
          "ordered": false,
          "spread": false,
          "start": 1,
          "type": "list"
        }
      ],
      "level": 1,
      "target": null,
      "title": "Expired deprecations",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "The class "
            },
            {
              "type": "inlineCode",
              "value": "PolyBase"
            },
            {
              "type": "text",
              "value": " has been removed (deprecated in numpy 1.9.0). Please use the abstract "
            },
            {
              "type": "inlineCode",
              "value": "ABCPolyBase"
            },
            {
              "type": "text",
              "value": " class instead."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Furthermore, the unused "
            },
            {
              "type": "inlineCode",
              "value": "PolyError"
            },
            {
              "type": "text",
              "value": " and "
            },
            {
              "type": "inlineCode",
              "value": "PolyDomainError"
            },
            {
              "type": "text",
              "value": " exceptions are removed from the "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "module",
              "reference": {
                "kind": "api",
                "module": "numpy.polynomial",
                "path": "numpy.polynomial",
                "type": "RefInfo",
                "version": "*"
              },
              "type": "Link",
              "value": "numpy.polynomial"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "("
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "gh-18963"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://github.com/numpy/numpy/pull/18963"
            },
            {
              "type": "text",
              "value": ")"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "Remove deprecated ``PolyBase`` and unused ``PolyError`` and ``PolyDomainError``",
      "type": "Section"
    },
    {
      "children": [],
      "level": 1,
      "target": null,
      "title": "Compatibility notes",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "The universal functions may now raise different errors on invalid input in some cases.  The main changes should be that a "
            },
            {
              "type": "inlineCode",
              "value": "RuntimeError"
            },
            {
              "type": "text",
              "value": " was replaced with a more fitting "
            },
            {
              "type": "inlineCode",
              "value": "TypeError"
            },
            {
              "type": "text",
              "value": ".  When multiple errors were present in the same call, NumPy may now raise a different one."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "("
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "gh-15271"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://github.com/numpy/numpy/pull/15271"
            },
            {
              "type": "text",
              "value": ")"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "Error type changes in universal functions",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "NumPy will now partially validate arguments before calling "
            },
            {
              "type": "inlineCode",
              "value": "__array_ufunc__"
            },
            {
              "type": "text",
              "value": ". Previously, it was possible to pass on invalid arguments (such as a non-existing keyword argument) when dispatch was known to occur."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "("
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "gh-15271"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://github.com/numpy/numpy/pull/15271"
            },
            {
              "type": "text",
              "value": ")"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "``__array_ufunc__`` argument validation",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Previously, all positionally passed arguments were checked for "
            },
            {
              "type": "inlineCode",
              "value": "__array_ufunc__"
            },
            {
              "type": "text",
              "value": " support.  In the case of "
            },
            {
              "type": "inlineCode",
              "value": "reduce"
            },
            {
              "type": "text",
              "value": ", "
            },
            {
              "type": "inlineCode",
              "value": "accumulate"
            },
            {
              "type": "text",
              "value": ", and "
            },
            {
              "type": "inlineCode",
              "value": "reduceat"
            },
            {
              "type": "text",
              "value": " all arguments may be passed by position.  This means that when they were passed by position, they could previously have been asked to handle the ufunc call via "
            },
            {
              "type": "inlineCode",
              "value": "__array_ufunc__"
            },
            {
              "type": "text",
              "value": ".  Since this depended on the way the arguments were passed (by position or by keyword), NumPy will now only dispatch on the input and output array.  For example, NumPy will never dispatch on the "
            },
            {
              "type": "inlineCode",
              "value": "where"
            },
            {
              "type": "text",
              "value": " array in a reduction such as "
            },
            {
              "type": "inlineCode",
              "value": "np.add.reduce"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "("
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "gh-15271"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://github.com/numpy/numpy/pull/15271"
            },
            {
              "type": "text",
              "value": ")"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "``__array_ufunc__`` and additional positional arguments",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Checked that "
            },
            {
              "type": "inlineCode",
              "value": "high - low >= 0"
            },
            {
              "type": "text",
              "value": " in "
            },
            {
              "type": "inlineCode",
              "value": "np.random.Generator.uniform"
            },
            {
              "type": "text",
              "value": ". Raises "
            },
            {
              "type": "inlineCode",
              "value": "ValueError"
            },
            {
              "type": "text",
              "value": " if "
            },
            {
              "type": "inlineCode",
              "value": "low > high"
            },
            {
              "type": "text",
              "value": ". Previously out-of-order inputs were accepted and silently swapped, so that if "
            },
            {
              "type": "inlineCode",
              "value": "low > high"
            },
            {
              "type": "text",
              "value": ", the value generated was "
            },
            {
              "type": "inlineCode",
              "value": "high + (low - high) * random()"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "("
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "gh-17921"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://github.com/numpy/numpy/pull/17921"
            },
            {
              "type": "text",
              "value": ")"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "Validate input values in ``Generator.uniform``",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "The default include paths when building a package with "
            },
            {
              "type": "inlineCode",
              "value": "numpy.distutils"
            },
            {
              "type": "text",
              "value": " no longer include "
            },
            {
              "type": "inlineCode",
              "value": "/usr/include"
            },
            {
              "type": "text",
              "value": ". This path is normally added by the compiler, and hardcoding it can be problematic. In case this causes a problem, please open an issue. A workaround is documented in PR 18658."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "("
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "gh-18658"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://github.com/numpy/numpy/pull/18658"
            },
            {
              "type": "text",
              "value": ")"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "``/usr/include`` removed from default include paths",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "When the "
            },
            {
              "type": "inlineCode",
              "value": "dtype="
            },
            {
              "type": "text",
              "value": " (or "
            },
            {
              "type": "inlineCode",
              "value": "signature"
            },
            {
              "type": "text",
              "value": ") arguments to comparison ufuncs ("
            },
            {
              "type": "inlineCode",
              "value": "equal"
            },
            {
              "type": "text",
              "value": ", "
            },
            {
              "type": "inlineCode",
              "value": "less"
            },
            {
              "type": "text",
              "value": ", etc.) is used, this will denote the desired output dtype in the future. This means that:"
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "children": [
                {
                  "type": "text",
                  "value": "np.equal(2, 3, dtype=object)"
                }
              ],
              "type": "paragraph"
            }
          ],
          "type": "blockquote"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "will give a "
            },
            {
              "type": "inlineCode",
              "value": "FutureWarning"
            },
            {
              "type": "text",
              "value": " that it will return an "
            },
            {
              "type": "inlineCode",
              "value": "object"
            },
            {
              "type": "text",
              "value": " array in the future, which currently happens for:"
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "children": [
                {
                  "type": "text",
                  "value": "np.equal(None, None, dtype=object)"
                }
              ],
              "type": "paragraph"
            }
          ],
          "type": "blockquote"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "due to the fact that "
            },
            {
              "type": "inlineCode",
              "value": "np.array(None)"
            },
            {
              "type": "text",
              "value": " is already an object array. (This also happens for some other dtypes.)"
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Since comparisons normally only return boolean arrays, providing any other dtype will always raise an error in the future and give a "
            },
            {
              "type": "inlineCode",
              "value": "DeprecationWarning"
            },
            {
              "type": "text",
              "value": " now."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "("
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "gh-18718"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://github.com/numpy/numpy/pull/18718"
            },
            {
              "type": "text",
              "value": ")"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "Changes to comparisons with ``dtype=...``",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "The universal function arguments "
            },
            {
              "type": "inlineCode",
              "value": "dtype"
            },
            {
              "type": "text",
              "value": " and "
            },
            {
              "type": "inlineCode",
              "value": "signature"
            },
            {
              "type": "text",
              "value": " which are also valid for reduction such as "
            },
            {
              "type": "inlineCode",
              "value": "np.add.reduce"
            },
            {
              "type": "text",
              "value": " (which is the implementation for "
            },
            {
              "type": "inlineCode",
              "value": "np.sum"
            },
            {
              "type": "text",
              "value": ") will now issue a warning when the "
            },
            {
              "type": "inlineCode",
              "value": "dtype"
            },
            {
              "type": "text",
              "value": " provided is not a \"basic\" dtype."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "NumPy almost always ignored metadata, byteorder or time units on these inputs.  NumPy will now always ignore it and raise an error if byteorder or time unit changed. The following are the most important examples of changes which will give the error.  In some cases previously the information stored was not ignored, in all of these an error is now raised      "
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": "# Previously ignored the byte-order (affect if non-native)\nnp.add(3, 5, dtype=\">i32\")\n\n# The biggest impact is for timedelta or datetimes:\narr = np.arange(10, dtype=\"m8[s]\")\n# The examples always ignored the time unit \"ns\":\nnp.add(arr, arr, dtype=\"m8[ns]\")\nnp.maximum.reduce(arr, dtype=\"m8[ns]\")\n\n# The following previously did use \"ns\" (as opposed to `arr.dtype`)\nnp.add(3, 5, dtype=\"m8[ns]\")  # Now return generic time units\nnp.maximum(arr, arr, dtype=\"m8[ns]\")  # Now returns \"s\" (from `arr`)"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "The same applies for functions like "
            },
            {
              "type": "inlineCode",
              "value": "np.sum"
            },
            {
              "type": "text",
              "value": " which use these internally. This change is necessary to achieve consistent handling within NumPy."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "If you run into these, in most cases pass for example "
            },
            {
              "type": "inlineCode",
              "value": "dtype=np.timedelta64"
            },
            {
              "type": "text",
              "value": " which clearly denotes a general "
            },
            {
              "type": "inlineCode",
              "value": "timedelta64"
            },
            {
              "type": "text",
              "value": " without any unit or byte-order defined.  If you need to specify the output dtype precisely, you may do so by either casting the inputs or providing an output array using "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "out="
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "NumPy may choose to allow providing an exact output "
            },
            {
              "type": "inlineCode",
              "value": "dtype"
            },
            {
              "type": "text",
              "value": " here in the future, which would be preceded by a "
            },
            {
              "type": "inlineCode",
              "value": "FutureWarning"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "("
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "gh-18718"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://github.com/numpy/numpy/pull/18718"
            },
            {
              "type": "text",
              "value": ")"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "Changes to ``dtype`` and ``signature`` arguments in ufuncs",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "The behaviour for "
            },
            {
              "type": "inlineCode",
              "value": "np.ufunc(1.0, 1.0, signature=...)"
            },
            {
              "type": "text",
              "value": " or "
            },
            {
              "type": "inlineCode",
              "value": "np.ufunc(1.0, 1.0, dtype=...)"
            },
            {
              "type": "text",
              "value": " can now yield different loops in 1.21 compared to 1.20 because of changes in promotion. When "
            },
            {
              "type": "inlineCode",
              "value": "signature"
            },
            {
              "type": "text",
              "value": " was previously used, the casting check on inputs was relaxed, which could lead to downcasting inputs unsafely especially if combined with "
            },
            {
              "type": "inlineCode",
              "value": "casting=\"unsafe\""
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Casting is now guaranteed to be safe.  If a signature is only partially provided, for example using "
            },
            {
              "type": "inlineCode",
              "value": "signature=(\"float64\", None, None)"
            },
            {
              "type": "text",
              "value": ", this could lead to no loop being found (an error). In that case, it is necessary to provide the complete signature to enforce casting the inputs. If "
            },
            {
              "type": "inlineCode",
              "value": "dtype=\"float64\""
            },
            {
              "type": "text",
              "value": " is used or only outputs are set (e.g. "
            },
            {
              "type": "inlineCode",
              "value": "signature=(None, None, \"float64\")"
            },
            {
              "type": "text",
              "value": " the is unchanged. We expect that very few users are affected by this change."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Further, the meaning of "
            },
            {
              "type": "inlineCode",
              "value": "dtype=\"float64\""
            },
            {
              "type": "text",
              "value": " has been slightly modified and now strictly enforces only the correct output (and not input) DTypes. This means it is now always equivalent to      "
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": "signature=(None, None, \"float64\")"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "(If the ufunc has two inputs and one output).  Since this could lead to no loop being found in some cases, NumPy will normally also search for the loop      "
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": "signature=(\"float64\", \"float64\", \"float64\")"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "if the first search failed. In the future, this behaviour may be customized to achieve the expected results for more complex ufuncs.  (For some universal functions such as "
            },
            {
              "type": "inlineCode",
              "value": "np.ldexp"
            },
            {
              "type": "text",
              "value": " inputs can have different DTypes.)"
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "("
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "gh-18880"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://github.com/numpy/numpy/pull/18880"
            },
            {
              "type": "text",
              "value": ")"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "Ufunc ``signature=...`` and ``dtype=`` generalization and ``casting``",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "NumPy distutils will now always add the "
            },
            {
              "type": "inlineCode",
              "value": "-ffp-exception-behavior=strict"
            },
            {
              "type": "text",
              "value": " compiler flag when compiling with clang.  Clang defaults to a non-strict version, which allows the compiler to generate code that does not set floating point warnings/errors correctly."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "("
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "gh-19049"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://github.com/numpy/numpy/pull/19049"
            },
            {
              "type": "text",
              "value": ")"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "Distutils forces strict floating point model on clang",
      "type": "Section"
    },
    {
      "children": [],
      "level": 1,
      "target": null,
      "title": "C API changes",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "NumPy now normalizes the \"type tuple\" argument to the type resolver functions before calling it.  Note that in the use of this type resolver is legacy behaviour and NumPy will not do so when possible.  Calling "
            },
            {
              "type": "inlineCode",
              "value": "ufunc->type_resolver"
            },
            {
              "type": "text",
              "value": " or "
            },
            {
              "type": "inlineCode",
              "value": "PyUFunc_DefaultTypeResolver"
            },
            {
              "type": "text",
              "value": " is strongly discouraged and will now enforce a normalized type tuple if done.  Note that this does not affect providing a type resolver, which is expected to keep working in most circumstances.  If you have an unexpected use-case for calling the type resolver, please inform the NumPy developers so that a solution can be found."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "("
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "gh-18718"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://github.com/numpy/numpy/pull/18718"
            },
            {
              "type": "text",
              "value": ")"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "Use of ``ufunc->type_resolver`` and \"type tuple\"",
      "type": "Section"
    },
    {
      "children": [],
      "level": 1,
      "target": null,
      "title": "New Features",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "A "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "mypy_"
            },
            {
              "type": "text",
              "value": " plugin is now available for automatically assigning the (platform-dependent) precisions of certain "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "module",
              "reference": {
                "kind": "api",
                "module": "numpy",
                "path": "numpy:number",
                "type": "RefInfo",
                "version": "*"
              },
              "type": "Link",
              "value": "number"
            },
            {
              "type": "text",
              "value": " subclasses, including the likes of "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "module",
              "reference": {
                "kind": "api",
                "module": "numpy",
                "path": "numpy:int64",
                "type": "RefInfo",
                "version": "*"
              },
              "type": "Link",
              "value": "int_"
            },
            {
              "type": "text",
              "value": ", "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "module",
              "reference": {
                "kind": "api",
                "module": "numpy",
                "path": "numpy:int64",
                "type": "RefInfo",
                "version": "*"
              },
              "type": "Link",
              "value": "intp"
            },
            {
              "type": "text",
              "value": " and "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "module",
              "reference": {
                "kind": "api",
                "module": "numpy",
                "path": "numpy:longlong",
                "type": "RefInfo",
                "version": "*"
              },
              "type": "Link",
              "value": "longlong"
            },
            {
              "type": "text",
              "value": ". See the documentation on "
            },
            {
              "type": "inlineCode",
              "value": "scalar types <arrays.scalars.built-in>"
            },
            {
              "type": "text",
              "value": " for a comprehensive overview of the affected classes."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Note that while usage of the plugin is completely optional, without it the precision of above-mentioned classes will be inferred as "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "module",
              "reference": {
                "kind": "api",
                "module": "typing",
                "path": "typing:Any",
                "type": "RefInfo",
                "version": "*"
              },
              "type": "Link",
              "value": "Any"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "To enable the plugin, one must add it to their mypy "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "configuration file"
            },
            {
              "type": "text",
              "value": ":"
            }
          ],
          "type": "paragraph"
        },
        {
          "args": "ini",
          "children": [],
          "name": "code-block",
          "options": {},
          "type": "mystDirective",
          "value": "[mypy]\nplugins = numpy.typing.mypy_plugin"
        },
        {
          "placeholder": "target",
          "type": "Unimplemented",
          "value": ".. _mypy: http://mypy-lang.org/"
        },
        {
          "placeholder": "target",
          "type": "Unimplemented",
          "value": ".. _configuration file: https://mypy.readthedocs.io/en/stable/config_file.html"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "("
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "gh-17843"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://github.com/numpy/numpy/pull/17843"
            },
            {
              "type": "text",
              "value": ")"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "Added a mypy plugin for handling platform-specific ``numpy.number`` precisions",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "The "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "mypy_"
            },
            {
              "type": "text",
              "value": " plugin, introduced in "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "numpy/numpy#17843"
            },
            {
              "type": "text",
              "value": ", has been expanded: the plugin now removes annotations for platform-specific extended-precision types that are not available to the platform in question. For example, it will remove "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "~numpy.float128"
            },
            {
              "type": "text",
              "value": " when not available."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Without the plugin "
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "all"
                }
              ],
              "type": "emphasis"
            },
            {
              "type": "text",
              "value": " extended-precision types will, as far as mypy is concerned, be available on all platforms."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "To enable the plugin, one must add it to their mypy "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "configuration file"
            },
            {
              "type": "text",
              "value": ":"
            }
          ],
          "type": "paragraph"
        },
        {
          "args": "ini",
          "children": [],
          "name": "code-block",
          "options": {},
          "type": "mystDirective",
          "value": "[mypy]\nplugins = numpy.typing.mypy_plugin"
        },
        {
          "placeholder": "target",
          "type": "Unimplemented",
          "value": ".. _mypy: http://mypy-lang.org/"
        },
        {
          "placeholder": "target",
          "type": "Unimplemented",
          "value": ".. _configuration file: https://mypy.readthedocs.io/en/stable/config_file.html"
        },
        {
          "placeholder": "target",
          "type": "Unimplemented",
          "value": ".. _`numpy/numpy#17843`: https://github.com/numpy/numpy/pull/17843"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "("
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "gh-18322"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://github.com/numpy/numpy/pull/18322"
            },
            {
              "type": "text",
              "value": ")"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "Let the mypy plugin manage extended-precision ``numpy.number`` subclasses",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "A new "
            },
            {
              "type": "inlineCode",
              "value": "min_digits"
            },
            {
              "type": "text",
              "value": " argument has been added to the dragon4 float printing functions "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "module",
              "reference": {
                "kind": "api",
                "module": "numpy",
                "path": "numpy:format_float_positional",
                "type": "RefInfo",
                "version": "*"
              },
              "type": "Link",
              "value": "format_float_positional"
            },
            {
              "type": "text",
              "value": " and "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "module",
              "reference": {
                "kind": "api",
                "module": "numpy",
                "path": "numpy:format_float_scientific",
                "type": "RefInfo",
                "version": "*"
              },
              "type": "Link",
              "value": "format_float_scientific"
            },
            {
              "type": "text",
              "value": " . This kwd guarantees that at least the given number of digits will be printed when printing in unique=True mode, even if the extra digits are unnecessary to uniquely specify the value. It is the counterpart to the precision argument which sets the maximum number of digits to be printed. When unique=False in fixed precision mode, it has no effect and the precision argument fixes the number of digits."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "("
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "gh-18629"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://github.com/numpy/numpy/pull/18629"
            },
            {
              "type": "text",
              "value": ")"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "New ``min_digits`` argument for printing float values",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "anchor": null,
              "exists": true,
              "kind": "module",
              "reference": {
                "kind": "api",
                "module": "numpy.f2py",
                "path": "numpy.f2py",
                "type": "RefInfo",
                "version": "*"
              },
              "type": "Link",
              "value": "f2py"
            },
            {
              "type": "text",
              "value": " can now parse abstract interface blocks."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "("
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "gh-18695"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://github.com/numpy/numpy/pull/18695"
            },
            {
              "type": "text",
              "value": ")"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "f2py now recognizes Fortran abstract interface blocks",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Autodetection of installed BLAS and LAPACK libraries can be bypassed by using the "
            },
            {
              "type": "inlineCode",
              "value": "NPY_BLAS_LIBS"
            },
            {
              "type": "text",
              "value": " and "
            },
            {
              "type": "inlineCode",
              "value": "NPY_LAPACK_LIBS"
            },
            {
              "type": "text",
              "value": " environment variables. Instead, the link flags in these environment variables will be used directly, and the language is assumed to be F77.  This is especially useful in automated builds where the BLAS and LAPACK that are installed are known exactly.  A use case is replacing the actual implementation at runtime via stub library links."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "If "
            },
            {
              "type": "inlineCode",
              "value": "NPY_CBLAS_LIBS"
            },
            {
              "type": "text",
              "value": " is set (optional in addition to "
            },
            {
              "type": "inlineCode",
              "value": "NPY_BLAS_LIBS"
            },
            {
              "type": "text",
              "value": "), this will be used as well, by defining "
            },
            {
              "type": "inlineCode",
              "value": "HAVE_CBLAS"
            },
            {
              "type": "text",
              "value": " and appending the environment variable content to the link flags."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "("
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "gh-18737"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://github.com/numpy/numpy/pull/18737"
            },
            {
              "type": "text",
              "value": ")"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "BLAS and LAPACK configuration via environment variables",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "inlineCode",
              "value": "numpy.typing.NDArray"
            },
            {
              "type": "text",
              "value": " has been added, a runtime-subscriptable alias for "
            },
            {
              "type": "inlineCode",
              "value": "np.ndarray[Any, np.dtype[~Scalar]]"
            },
            {
              "type": "text",
              "value": ". The new type alias can be used for annotating arrays with a given dtype and unspecified shape. "
            },
            {
              "type": "inlineCode",
              "value": "1"
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "inlineCode",
              "value": "1"
            },
            {
              "type": "text",
              "value": " NumPy does not support the annotating of array shapes as of 1.21, this is expected to change in the future though (see "
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "Pep 646"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://peps.python.org/pep-0646/"
            },
            {
              "type": "text",
              "value": ")."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "A runtime-subcriptable alias has been added for ``ndarray``",
      "type": "Section"
    },
    {
      "children": [
        {
          "args": "python",
          "children": [],
          "name": "code-block",
          "options": {},
          "type": "mystDirective",
          "value": ">>> import numpy as np\n>>> import numpy.typing as npt\n\n>>> print(npt.NDArray)\nnumpy.ndarray[typing.Any, numpy.dtype[~ScalarType]]\n\n>>> print(npt.NDArray[np.float64])\nnumpy.ndarray[typing.Any, numpy.dtype[numpy.float64]]\n\n>>> NDArrayInt = npt.NDArray[np.int_]\n>>> a: NDArrayInt = np.arange(10)\n\n>>> def func(a: npt.ArrayLike) -> npt.NDArray[Any]:\n...     return np.array(a)"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "("
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "gh-18935"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://github.com/numpy/numpy/pull/18935"
            },
            {
              "type": "text",
              "value": ")"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 3,
      "target": null,
      "title": "Examples",
      "type": "Section"
    },
    {
      "children": [],
      "level": 1,
      "target": null,
      "title": "Improvements",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "The size of the interval over which phases are unwrapped is no longer restricted to "
            },
            {
              "type": "inlineCode",
              "value": "2 * pi"
            },
            {
              "type": "text",
              "value": ". This is especially useful for unwrapping degrees, but can also be used for other intervals."
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": ">>> phase_deg = np.mod(np.linspace(0,720,19), 360) - 180\n>>> phase_deg\narray([-180., -140., -100.,  -60.,  -20.,   20.,   60.,  100.,  140.,\n       -180., -140., -100.,  -60.,  -20.,   20.,   60.,  100.,  140.,\n       -180.])\n\n>>> unwrap(phase_deg, period=360)\narray([-180., -140., -100.,  -60.,  -20.,   20.,   60.,  100.,  140.,\n        180.,  220.,  260.,  300.,  340.,  380.,  420.,  460.,  500.,\n        540.])"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "("
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "gh-16987"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://github.com/numpy/numpy/pull/16987"
            },
            {
              "type": "text",
              "value": ")"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "Arbitrary ``period`` option for ``numpy.unwrap``",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "When "
            },
            {
              "type": "inlineCode",
              "value": "np.unique"
            },
            {
              "type": "text",
              "value": " operated on an array with multiple "
            },
            {
              "type": "inlineCode",
              "value": "NaN"
            },
            {
              "type": "text",
              "value": " entries, its return included a "
            },
            {
              "type": "inlineCode",
              "value": "NaN"
            },
            {
              "type": "text",
              "value": " for each entry that was "
            },
            {
              "type": "inlineCode",
              "value": "NaN"
            },
            {
              "type": "text",
              "value": " in the original array. This is now improved such that the returned array contains just one "
            },
            {
              "type": "inlineCode",
              "value": "NaN"
            },
            {
              "type": "text",
              "value": " as the last element."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Also for complex arrays all "
            },
            {
              "type": "inlineCode",
              "value": "NaN"
            },
            {
              "type": "text",
              "value": " values are considered equivalent (no matter whether the "
            },
            {
              "type": "inlineCode",
              "value": "NaN"
            },
            {
              "type": "text",
              "value": " is in the real or imaginary part). As the representant for the returned array the smallest one in the lexicographical order is chosen - see "
            },
            {
              "type": "inlineCode",
              "value": "np.sort"
            },
            {
              "type": "text",
              "value": " for how the lexicographical order is defined for complex arrays."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "("
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "gh-18070"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://github.com/numpy/numpy/pull/18070"
            },
            {
              "type": "text",
              "value": ")"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "``np.unique`` now returns single ``NaN``",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "The performance of Rayleigh and geometric random variate generation in "
            },
            {
              "type": "inlineCode",
              "value": "Generator"
            },
            {
              "type": "text",
              "value": " has improved. These are both transformation of exponential random variables and the slow log-based inverse cdf transformation has been replaced with the Ziggurat-based exponential variate generator."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "This change breaks the stream of variates generated  when variates from either of these distributions are produced."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "("
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "gh-18666"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://github.com/numpy/numpy/pull/18666"
            },
            {
              "type": "text",
              "value": ")"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "``Generator.rayleigh`` and ``Generator.geometric`` performance improved",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "All placeholder annotations, that were previously annotated as "
            },
            {
              "type": "inlineCode",
              "value": "typing.Any"
            },
            {
              "type": "text",
              "value": ", have been improved. Where appropriate they have been replaced with explicit function definitions, classes or other miscellaneous objects."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "("
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "gh-18934"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://github.com/numpy/numpy/pull/18934"
            },
            {
              "type": "text",
              "value": ")"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "Placeholder annotations have been improved",
      "type": "Section"
    },
    {
      "children": [],
      "level": 1,
      "target": null,
      "title": "Performance improvements",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Integer division of NumPy arrays now uses "
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "libdivide"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://libdivide.com/"
            },
            {
              "type": "text",
              "value": " when the divisor is a constant. With the usage of libdivide and other minor optimizations, there is a large speedup. The "
            },
            {
              "type": "inlineCode",
              "value": "//"
            },
            {
              "type": "text",
              "value": " operator and "
            },
            {
              "type": "inlineCode",
              "value": "np.floor_divide"
            },
            {
              "type": "text",
              "value": " makes use of the new changes."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "("
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "gh-17727"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://github.com/numpy/numpy/pull/17727"
            },
            {
              "type": "text",
              "value": ")"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "Improved performance in integer division of NumPy arrays",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "inlineCode",
              "value": "np.save"
            },
            {
              "type": "text",
              "value": " is now a lot faster for small arrays."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "inlineCode",
              "value": "np.load"
            },
            {
              "type": "text",
              "value": " is also faster for small arrays, but only when serializing with a version >= "
            },
            {
              "type": "inlineCode",
              "value": "(3, 0)"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Both are done by removing checks that are only relevant for Python 2, while still maintaining compatibility with arrays which might have been created by Python 2."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "("
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "gh-18657"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://github.com/numpy/numpy/pull/18657"
            },
            {
              "type": "text",
              "value": ")"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "Improve performance of ``np.save`` and ``np.load`` for small arrays",
      "type": "Section"
    },
    {
      "children": [],
      "level": 1,
      "target": null,
      "title": "Changes",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "When "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "module",
              "reference": {
                "kind": "api",
                "module": "numpy",
                "path": "numpy:ndarray",
                "type": "RefInfo",
                "version": "*"
              },
              "type": "Link",
              "value": "ndarray"
            },
            {
              "type": "text",
              "value": " subclasses are used on input to "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "module",
              "reference": {
                "kind": "api",
                "module": "numpy",
                "path": "numpy:piecewise",
                "type": "RefInfo",
                "version": "*"
              },
              "type": "Link",
              "value": "piecewise"
            },
            {
              "type": "text",
              "value": ", they are passed on to the functions. The output will now be of the same subclass as well."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "("
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "gh-18110"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://github.com/numpy/numpy/pull/18110"
            },
            {
              "type": "text",
              "value": ")"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "`numpy.piecewise` output class now matches the input class",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "With the release of macOS 11.3, several different issues that numpy was encountering when using Accelerate Framework's implementation of BLAS and LAPACK should be resolved.  This change enables the Accelerate Framework as an option on macOS.  If additional issues are found, please file a bug report against Accelerate using the developer feedback assistant tool (https://developer.apple.com/bug-reporting/). We intend to address issues promptly and plan to continue supporting and updating our BLAS and LAPACK libraries."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "("
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "gh-18874"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://github.com/numpy/numpy/pull/18874"
            },
            {
              "type": "text",
              "value": ")"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "Enable Accelerate Framework",
      "type": "Section"
    }
  ],
  "content": {},
  "example_section_data": {
    "children": [],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": null,
  "item_line": null,
  "item_type": null,
  "ordered_sections": [],
  "references": null,
  "see_also": [],
  "signature": {
    "type": "Signature",
    "value": null
  },
  "type": "DocBlob"
}