{
  "aliases": [],
  "arbitrary": [
    {
      "children": [
        {
          "data": {
            "argument": "numpy",
            "content": "",
            "name": "currentmodule",
            "options": []
          },
          "type": "BlockDirective"
        }
      ],
      "level": 0,
      "target": null,
      "title": null
    },
    {
      "children": [
        {
          "data": {
            "argument": ":ref:`basics.indexing`",
            "content": "",
            "name": "seealso",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "This page tackles common examples. For an in-depth look into indexing, refer to "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "basics.indexing"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": "."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "level": 0,
      "target": "how-to-index",
      "title": "How to index :class:`ndarrays <.ndarray>`"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Use "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "basic-indexing"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " features like "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "slicing-and-striding"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", and "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "dimensional-indexing-tools"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": "."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": ">>> a = np.arange(30).reshape(2, 3, 5)\n>>> a\narray([[[ 0,  1,  2,  3,  4],\n        [ 5,  6,  7,  8,  9],\n        [10, 11, 12, 13, 14]],\n<BLANKLINE>\n        [[15, 16, 17, 18, 19],\n        [20, 21, 22, 23, 24],\n        [25, 26, 27, 28, 29]]])\n>>> a[0, 2, :]\narray([10, 11, 12, 13, 14])\n>>> a[0, :, 3]\narray([ 3,  8, 13])"
                },
                "type": "BlockVerbatim"
              }
            ]
          },
          "type": "BlockQuote"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Note that the output from indexing operations can have different shape from the original object. To preserve the original dimensions after indexing, you can use "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "newaxis"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ". To use other such tools, refer to "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "dimensional-indexing-tools"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": "."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": ">>> a[0, :, 3].shape\n(3,)\n>>> a[0, :, 3, np.newaxis].shape\n(3, 1)\n>>> a[0, :, 3, np.newaxis, np.newaxis].shape\n(3, 1, 1)"
                },
                "type": "BlockVerbatim"
              }
            ]
          },
          "type": "BlockQuote"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Variables can also be used to index:      "
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": ">>> y = 0\n>>> a[y, :, y+3]\narray([ 3,  8, 13])"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Refer to "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "dealing-with-variable-indices"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " to see how to use "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "python:slice"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " and "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "Ellipsis"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " in your index variables."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "level": 1,
      "target": null,
      "title": "Access specific/arbitrary rows and columns"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "To index columns, you have to index the last axis. Use "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "dimensional-indexing-tools"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " to get the desired number of dimensions:      "
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": ">>> a = np.arange(24).reshape(2, 3, 4)\n>>> a\narray([[[ 0,  1,  2,  3],\n        [ 4,  5,  6,  7],\n        [ 8,  9, 10, 11]],\n<BLANKLINE>\n       [[12, 13, 14, 15],\n        [16, 17, 18, 19],\n        [20, 21, 22, 23]]])\n>>> a[..., 3]\narray([[ 3,  7, 11],\n       [15, 19, 23]])"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "To index specific elements in each column, make use of "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "advanced-indexing"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " as below:      "
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": ">>> arr = np.arange(3*4).reshape(3, 4)\n>>> arr\narray([[ 0,  1,  2,  3],\n       [ 4,  5,  6,  7],\n       [ 8,  9, 10, 11]])\n>>> column_indices = [[1, 3], [0, 2], [2, 2]]\n>>> np.arange(arr.shape[0])\narray([0, 1, 2])\n>>> row_indices = np.arange(arr.shape[0])[:, np.newaxis]\n>>> row_indices\narray([[0],\n       [1],\n       [2]])"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Use the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "row_indices"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " and "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "column_indices"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " for advanced indexing:      "
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": ">>> arr[row_indices, column_indices]\narray([[ 1,  3],\n       [ 4,  6],\n       [10, 10]])"
          },
          "type": "BlockVerbatim"
        }
      ],
      "level": 2,
      "target": null,
      "title": "Index columns"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Use "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "take"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ". See also "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "take_along_axis"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " and "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "put_along_axis"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": "."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": ">>> a = np.arange(30).reshape(2, 3, 5)\n>>> a\narray([[[ 0,  1,  2,  3,  4],\n        [ 5,  6,  7,  8,  9],\n        [10, 11, 12, 13, 14]],\n<BLANKLINE>\n        [[15, 16, 17, 18, 19],\n        [20, 21, 22, 23, 24],\n        [25, 26, 27, 28, 29]]])\n>>> np.take(a, [2, 3], axis=2)\narray([[[ 2,  3],\n        [ 7,  8],\n        [12, 13]],\n<BLANKLINE>\n        [[17, 18],\n        [22, 23],\n        [27, 28]]])\n>>> np.take(a, [2], axis=1)\narray([[[10, 11, 12, 13, 14]],\n<BLANKLINE>\n        [[25, 26, 27, 28, 29]]])"
                },
                "type": "BlockVerbatim"
              }
            ]
          },
          "type": "BlockQuote"
        }
      ],
      "level": 2,
      "target": null,
      "title": "Index along a specific axis"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Use "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "slicing-and-striding"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " to access chunks of a large array:      "
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": ">>> a = np.arange(100).reshape(10, 10)\n>>> a\narray([[ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9],\n        [10, 11, 12, 13, 14, 15, 16, 17, 18, 19],\n        [20, 21, 22, 23, 24, 25, 26, 27, 28, 29],\n        [30, 31, 32, 33, 34, 35, 36, 37, 38, 39],\n        [40, 41, 42, 43, 44, 45, 46, 47, 48, 49],\n        [50, 51, 52, 53, 54, 55, 56, 57, 58, 59],\n        [60, 61, 62, 63, 64, 65, 66, 67, 68, 69],\n        [70, 71, 72, 73, 74, 75, 76, 77, 78, 79],\n        [80, 81, 82, 83, 84, 85, 86, 87, 88, 89],\n        [90, 91, 92, 93, 94, 95, 96, 97, 98, 99]])\n>>> a[2:5, 2:5]\narray([[22, 23, 24],\n       [32, 33, 34],\n       [42, 43, 44]])\n>>> a[2:5, 1:3]\narray([[21, 22],\n       [31, 32],\n       [41, 42]])\n>>> a[:5, :5]\narray([[ 0,  1,  2,  3,  4],\n       [10, 11, 12, 13, 14],\n       [20, 21, 22, 23, 24],\n       [30, 31, 32, 33, 34],\n       [40, 41, 42, 43, 44]])"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "The same thing can be done with advanced indexing in a slightly more complex way. Remember that "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "advanced indexing creates a copy <indexing-operations>"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ":      "
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": ">>> a[np.arange(5)[:, None], np.arange(5)[None, :]]\narray([[ 0,  1,  2,  3,  4],\n       [10, 11, 12, 13, 14],\n       [20, 21, 22, 23, 24],\n       [30, 31, 32, 33, 34],\n       [40, 41, 42, 43, 44]])"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "You can also use "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "mgrid"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " to generate indices:      "
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": ">>> indices = np.mgrid[0:6:2]\n>>> indices\narray([0, 2, 4])\n>>> a[:, indices]\narray([[ 0,  2,  4],\n       [10, 12, 14],\n       [20, 22, 24],\n       [30, 32, 34],\n       [40, 42, 44],\n       [50, 52, 54],\n       [60, 62, 64],\n       [70, 72, 74],\n       [80, 82, 84],\n       [90, 92, 94]])"
          },
          "type": "BlockVerbatim"
        }
      ],
      "level": 1,
      "target": null,
      "title": "Create subsets of larger matrices"
    },
    {
      "children": [],
      "level": 1,
      "target": null,
      "title": "Filter values"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Use "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "nonzero"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " to get a tuple of array indices of non-zero elements  corresponding to every dimension:   "
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": ">>> z = np.array([[1, 2, 3, 0], [0, 0, 5, 3], [4, 6, 0, 0]])\n      >>> z\n      array([[1, 2, 3, 0],\n             [0, 0, 5, 3],\n             [4, 6, 0, 0]])\n      >>> np.nonzero(z)\n      (array([0, 0, 0, 1, 1, 2, 2]), array([0, 1, 2, 2, 3, 0, 1]))"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Use "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "flatnonzero"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " to fetch indices of elements that are non-zero in the flattened version of the ndarray:   "
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": " >>> np.flatnonzero(z)\n\tarray([0, 1, 2, 6, 7, 8, 9])"
          },
          "type": "BlockVerbatim"
        }
      ],
      "level": 2,
      "target": null,
      "title": "Non-zero elements"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Use "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "where"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " to generate indices based on conditions and then use "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "advanced-indexing"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": "."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": ">>> a = np.arange(30).reshape(2, 3, 5)\n>>> indices = np.where(a % 2 == 0)\n>>> indices\n(array([0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1]), \narray([0, 0, 0, 1, 1, 2, 2, 2, 0, 0, 1, 1, 1, 2, 2]), \narray([0, 2, 4, 1, 3, 0, 2, 4, 1, 3, 0, 2, 4, 1, 3]))\n>>> a[indices]\narray([ 0,  2,  4,  6,  8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28])"
                },
                "type": "BlockVerbatim"
              }
            ]
          },
          "type": "BlockQuote"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Or, use "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "boolean-indexing"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ":      "
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": ">>> a > 14\narray([[[False, False, False, False, False],\n        [False, False, False, False, False],\n        [False, False, False, False, False]],\n<BLANKLINE>\n       [[ True,  True,  True,  True,  True],\n        [ True,  True,  True,  True,  True],\n        [ True,  True,  True,  True,  True]]])\n>>> a[a > 14]\narray([15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29])"
          },
          "type": "BlockVerbatim"
        }
      ],
      "level": 2,
      "target": null,
      "title": "Arbitrary conditions"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Use assignment with filtering to replace desired values:      "
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": ">>> p = np.arange(-10, 10).reshape(2, 2, 5)\n>>> p\narray([[[-10,  -9,  -8,  -7,  -6],\n        [ -5,  -4,  -3,  -2,  -1]],\n<BLANKLINE>\n       [[  0,   1,   2,   3,   4],\n        [  5,   6,   7,   8,   9]]])\n>>> q = p < 0\n>>> q\narray([[[ True,  True,  True,  True,  True],\n        [ True,  True,  True,  True,  True]],\n<BLANKLINE>\n       [[False, False, False, False, False],\n        [False, False, False, False, False]]])\n>>> p[q] = 0\n>>> p\narray([[[0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0]],\n<BLANKLINE>\n       [[0, 1, 2, 3, 4],\n        [5, 6, 7, 8, 9]]])"
          },
          "type": "BlockVerbatim"
        }
      ],
      "level": 2,
      "target": null,
      "title": "Replace values after filtering"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Use "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "argmax"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " and "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "argmin"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ":      "
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": ">>> a = np.arange(30).reshape(2, 3, 5)\n>>> np.argmax(a)\n29\n>>> np.argmin(a)\n0"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Use the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "axis"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " keyword to get the indices of maximum and minimum values along a specific axis:      "
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": ">>> np.argmax(a, axis=0)\narray([[1, 1, 1, 1, 1],\n       [1, 1, 1, 1, 1],\n       [1, 1, 1, 1, 1]])\n>>> np.argmax(a, axis=1)\narray([[2, 2, 2, 2, 2],\n       [2, 2, 2, 2, 2]])\n>>> np.argmax(a, axis=2)\narray([[4, 4, 4],\n       [4, 4, 4]])\n<BLANKLINE>\n>>> np.argmin(a, axis=1)\narray([[0, 0, 0, 0, 0],\n       [0, 0, 0, 0, 0]])\n>>> np.argmin(a, axis=2)\narray([[0, 0, 0],\n       [0, 0, 0]])"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Set "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "keepdims"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " to "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "True"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " to keep the axes which are reduced in the result as dimensions with size one:      "
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": ">>> np.argmin(a, axis=2, keepdims=True)\narray([[[0],\n        [0],\n        [0]],\n<BLANKLINE>\n       [[0],\n        [0],\n        [0]]])\n>>> np.argmax(a, axis=1, keepdims=True)\narray([[[2, 2, 2, 2, 2]],\n<BLANKLINE>\n       [[2, 2, 2, 2, 2]]])"
          },
          "type": "BlockVerbatim"
        }
      ],
      "level": 1,
      "target": null,
      "title": "Fetch indices of max/min values"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "It must be kept in mind that basic indexing produces "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "views <view>"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " and advanced indexing produces "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "copies <copy>"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", which are computationally less efficient. Hence, you should take care to use basic indexing wherever possible instead of advanced indexing."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "level": 1,
      "target": null,
      "title": "Index the same ndarray multiple times efficiently"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Nicolas Rougier's "
                },
                "type": "Words"
              },
              {
                "data": {
                  "target": "https://github.com/rougier/numpy-100",
                  "value": "100 NumPy exercises"
                },
                "type": "ExternalLink"
              },
              {
                "data": {
                  "value": " provide a good insight into how indexing is combined with other operations. Exercises "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "6"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "8"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "10"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "15"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "16"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "19"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "20"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "45"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "59"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "64"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "65"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "70"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "71"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "72"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "76"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "80"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "81"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "84"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "87"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "90"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "93"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "94"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " are specially focused on indexing."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "placeholder": "target",
            "value": ".. _6: https://github.com/rougier/numpy-100/blob/master/100_Numpy_exercises_with_solutions.md#6-create-a-null-vector-of-size-10-but-the-fifth-value-which-is-1-"
          },
          "type": "Unimplemented"
        },
        {
          "data": {
            "placeholder": "target",
            "value": ".. _8: https://github.com/rougier/numpy-100/blob/master/100_Numpy_exercises_with_solutions.md#8-reverse-a-vector-first-element-becomes-last-"
          },
          "type": "Unimplemented"
        },
        {
          "data": {
            "placeholder": "target",
            "value": ".. _10: https://github.com/rougier/numpy-100/blob/master/100_Numpy_exercises_with_solutions.md#10-find-indices-of-non-zero-elements-from-120040-"
          },
          "type": "Unimplemented"
        },
        {
          "data": {
            "placeholder": "target",
            "value": ".. _15: https://github.com/rougier/numpy-100/blob/master/100_Numpy_exercises_with_solutions.md#15-create-a-2d-array-with-1-on-the-border-and-0-inside-"
          },
          "type": "Unimplemented"
        },
        {
          "data": {
            "placeholder": "target",
            "value": ".. _16: https://github.com/rougier/numpy-100/blob/master/100_Numpy_exercises_with_solutions.md#16-how-to-add-a-border-filled-with-0s-around-an-existing-array-"
          },
          "type": "Unimplemented"
        },
        {
          "data": {
            "placeholder": "target",
            "value": ".. _19: https://github.com/rougier/numpy-100/blob/master/100_Numpy_exercises_with_solutions.md#19-create-a-8x8-matrix-and-fill-it-with-a-checkerboard-pattern-"
          },
          "type": "Unimplemented"
        },
        {
          "data": {
            "placeholder": "target",
            "value": ".. _20: https://github.com/rougier/numpy-100/blob/master/100_Numpy_exercises_with_solutions.md#20-consider-a-678-shape-array-what-is-the-index-xyz-of-the-100th-element-"
          },
          "type": "Unimplemented"
        },
        {
          "data": {
            "placeholder": "target",
            "value": ".. _45: https://github.com/rougier/numpy-100/blob/master/100_Numpy_exercises_with_solutions.md#45-create-random-vector-of-size-10-and-replace-the-maximum-value-by-0-"
          },
          "type": "Unimplemented"
        },
        {
          "data": {
            "placeholder": "target",
            "value": ".. _59: https://github.com/rougier/numpy-100/blob/master/100_Numpy_exercises_with_solutions.md#59-how-to-sort-an-array-by-the-nth-column-"
          },
          "type": "Unimplemented"
        },
        {
          "data": {
            "placeholder": "target",
            "value": ".. _64: https://github.com/rougier/numpy-100/blob/master/100_Numpy_exercises_with_solutions.md#64-consider-a-given-vector-how-to-add-1-to-each-element-indexed-by-a-second-vector-be-careful-with-repeated-indices-"
          },
          "type": "Unimplemented"
        },
        {
          "data": {
            "placeholder": "target",
            "value": ".. _65: https://github.com/rougier/numpy-100/blob/master/100_Numpy_exercises_with_solutions.md#65-how-to-accumulate-elements-of-a-vector-x-to-an-array-f-based-on-an-index-list-i-"
          },
          "type": "Unimplemented"
        },
        {
          "data": {
            "placeholder": "target",
            "value": ".. _70: https://github.com/rougier/numpy-100/blob/master/100_Numpy_exercises_with_solutions.md#70-consider-the-vector-1-2-3-4-5-how-to-build-a-new-vector-with-3-consecutive-zeros-interleaved-between-each-value-"
          },
          "type": "Unimplemented"
        },
        {
          "data": {
            "placeholder": "target",
            "value": ".. _71: https://github.com/rougier/numpy-100/blob/master/100_Numpy_exercises_with_solutions.md#71-consider-an-array-of-dimension-553-how-to-mulitply-it-by-an-array-with-dimensions-55-"
          },
          "type": "Unimplemented"
        },
        {
          "data": {
            "placeholder": "target",
            "value": ".. _72: https://github.com/rougier/numpy-100/blob/master/100_Numpy_exercises_with_solutions.md#72-how-to-swap-two-rows-of-an-array-"
          },
          "type": "Unimplemented"
        },
        {
          "data": {
            "placeholder": "target",
            "value": ".. _76: https://github.com/rougier/numpy-100/blob/master/100_Numpy_exercises_with_solutions.md#76-consider-a-one-dimensional-array-z-build-a-two-dimensional-array-whose-first-row-is-z0z1z2-and-each-subsequent-row-is--shifted-by-1-last-row-should-be-z-3z-2z-1-"
          },
          "type": "Unimplemented"
        },
        {
          "data": {
            "placeholder": "target",
            "value": ".. _80: https://github.com/rougier/numpy-100/blob/master/100_Numpy_exercises_with_solutions.md#80-consider-an-arbitrary-array-write-a-function-that-extract-a-subpart-with-a-fixed-shape-and-centered-on-a-given-element-pad-with-a-fill-value-when-necessary-"
          },
          "type": "Unimplemented"
        },
        {
          "data": {
            "placeholder": "target",
            "value": ".. _81: https://github.com/rougier/numpy-100/blob/master/100_Numpy_exercises_with_solutions.md#81-consider-an-array-z--1234567891011121314-how-to-generate-an-array-r--1234-2345-3456--11121314-"
          },
          "type": "Unimplemented"
        },
        {
          "data": {
            "placeholder": "target",
            "value": ".. _84: https://github.com/rougier/numpy-100/blob/master/100_Numpy_exercises_with_solutions.md#84-extract-all-the-contiguous-3x3-blocks-from-a-random-10x10-matrix-"
          },
          "type": "Unimplemented"
        },
        {
          "data": {
            "placeholder": "target",
            "value": ".. _87: https://github.com/rougier/numpy-100/blob/master/100_Numpy_exercises_with_solutions.md#87-consider-a-16x16-array-how-to-get-the-block-sum-block-size-is-4x4-"
          },
          "type": "Unimplemented"
        },
        {
          "data": {
            "placeholder": "target",
            "value": ".. _90: https://github.com/rougier/numpy-100/blob/master/100_Numpy_exercises_with_solutions.md#90-given-an-arbitrary-number-of-vectors-build-the-cartesian-product-every-combinations-of-every-item-"
          },
          "type": "Unimplemented"
        },
        {
          "data": {
            "placeholder": "target",
            "value": ".. _93: https://github.com/rougier/numpy-100/blob/master/100_Numpy_exercises_with_solutions.md#93-consider-two-arrays-a-and-b-of-shape-83-and-22-how-to-find-rows-of-a-that-contain-elements-of-each-row-of-b-regardless-of-the-order-of-the-elements-in-b-"
          },
          "type": "Unimplemented"
        },
        {
          "data": {
            "placeholder": "target",
            "value": ".. _94: https://github.com/rougier/numpy-100/blob/master/100_Numpy_exercises_with_solutions.md#94-considering-a-10x3-matrix-extract-rows-with-unequal-values-eg-223-"
          },
          "type": "Unimplemented"
        }
      ],
      "level": 1,
      "target": null,
      "title": "Further reading"
    }
  ],
  "content": {},
  "example_section_data": {
    "children": [],
    "level": 0,
    "target": null,
    "title": null
  },
  "item_file": null,
  "item_line": null,
  "item_type": null,
  "ordered_sections": [],
  "references": null,
  "see_also": [],
  "signature": {
    "value": null
  }
}