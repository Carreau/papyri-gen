{
  "aliases": [],
  "arbitrary": [
    {
      "children": [
        {
          "placeholder": "untarget",
          "type": "Unimplemented",
          "value": "_how-to-io:"
        },
        {
          "type": "mystComment",
          "value": ".. Setting up files temporarily to be used in the examples below. Clear-up\n   has to be done at the end of the document."
        },
        {
          "args": "",
          "children": [],
          "name": "testsetup",
          "options": {},
          "type": "mystDirective",
          "value": ">>> from numpy.testing import temppath\n>>> with open(\"csv.txt\", \"wt\") as f:\n...    _ = f.write(\"1, 2, 3\\n4,, 6\\n7, 8, 9\")\n>>> with open(\"fixedwidth.txt\", \"wt\") as f:\n...    _ = f.write(\"1   2      3\\n44      6\\n7   88889\")\n>>> with open(\"nan.txt\", \"wt\") as f:\n...    _ = f.write(\"1 2 3\\n44 x 6\\n7 8888 9\")\n>>> with open(\"skip.txt\", \"wt\") as f:\n...    _ = f.write(\"1 2   3\\n44   6\\n7 888 9\")\n>>> with open(\"tabs.txt\", \"wt\") as f:\n...    _ = f.write(\"1\\t2\\t3\\n44\\t \\t6\\n7\\t888\\t9\")"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "This page tackles common applications; for the full collection of I/O routines, see "
            },
            {
              "type": "inlineCode",
              "value": "routines.io"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": "Reading and writing files",
      "type": "Section"
    },
    {
      "children": [
        {
          "placeholder": "target",
          "type": "Unimplemented",
          "value": ".. _CSV: https://en.wikipedia.org/wiki/Comma-separated_values"
        }
      ],
      "level": 1,
      "target": null,
      "title": "Reading text and CSV_ files",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Use "
            },
            {
              "type": "inlineCode",
              "value": "numpy.loadtxt"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "With no missing values",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Use "
            },
            {
              "type": "inlineCode",
              "value": "numpy.genfromtxt"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "inlineCode",
              "value": "numpy.genfromtxt"
            },
            {
              "type": "text",
              "value": " will either"
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "children": [
                {
                  "children": [
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "return a "
                        },
                        {
                          "type": "inlineCode",
                          "value": "masked array<maskedarray.generic>"
                        },
                        {
                          "type": "text",
                          "value": "     "
                        },
                        {
                          "children": [
                            {
                              "type": "text",
                              "value": "masking out missing values"
                            }
                          ],
                          "type": "strong"
                        },
                        {
                          "type": "text",
                          "value": " (if "
                        },
                        {
                          "type": "inlineCode",
                          "value": "usemask=True"
                        },
                        {
                          "type": "text",
                          "value": "), or"
                        }
                      ],
                      "type": "paragraph"
                    }
                  ],
                  "spread": false,
                  "type": "listItem"
                },
                {
                  "children": [
                    {
                      "children": [
                        {
                          "children": [
                            {
                              "type": "text",
                              "value": "fill in the missing value"
                            }
                          ],
                          "type": "strong"
                        },
                        {
                          "type": "text",
                          "value": " with the value specified in     "
                        },
                        {
                          "type": "inlineCode",
                          "value": "filling_values"
                        },
                        {
                          "type": "text",
                          "value": " (default is "
                        },
                        {
                          "type": "inlineCode",
                          "value": "np.nan"
                        },
                        {
                          "type": "text",
                          "value": " for float, -1 for int)."
                        }
                      ],
                      "type": "paragraph"
                    }
                  ],
                  "spread": false,
                  "type": "listItem"
                }
              ],
              "ordered": false,
              "spread": false,
              "start": 1,
              "type": "list"
            }
          ],
          "type": "blockquote"
        }
      ],
      "level": 2,
      "target": null,
      "title": "With missing values",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "code",
              "value": ">>> with open(\"csv.txt\", \"r\") as f:\n...     print(f.read())\n1, 2, 3\n4,, 6\n7, 8, 9"
            }
          ],
          "type": "blockquote"
        }
      ],
      "level": 3,
      "target": null,
      "title": "With non-whitespace delimiters",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "code",
              "value": ">>> np.genfromtxt(\"csv.txt\", delimiter=\",\", usemask=True)\nmasked_array(\n  data=[[1.0, 2.0, 3.0],\n        [4.0, --, 6.0],\n        [7.0, 8.0, 9.0]],\n  mask=[[False, False, False],\n        [False,  True, False],\n        [False, False, False]],\n  fill_value=1e+20)"
            }
          ],
          "type": "blockquote"
        }
      ],
      "level": 4,
      "target": null,
      "title": "Masked-array output",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "code",
              "value": ">>> np.genfromtxt(\"csv.txt\", delimiter=\",\")\narray([[ 1.,  2.,  3.],\n       [ 4., nan,  6.],\n       [ 7.,  8.,  9.]])"
            }
          ],
          "type": "blockquote"
        }
      ],
      "level": 4,
      "target": null,
      "title": "Array output",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "code",
              "value": ">>> np.genfromtxt(\"csv.txt\", delimiter=\",\", dtype=np.int8, filling_values=99)\narray([[ 1,  2,  3],\n       [ 4, 99,  6],\n       [ 7,  8,  9]], dtype=int8)"
            }
          ],
          "type": "blockquote"
        }
      ],
      "level": 4,
      "target": null,
      "title": "Array output, specified fill-in value",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "inlineCode",
              "value": "numpy.genfromtxt"
            },
            {
              "type": "text",
              "value": " can also parse whitespace-delimited data files that have missing values if"
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "children": [
                {
                  "children": [
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "Each field has a fixed width"
                        }
                      ],
                      "type": "strong"
                    },
                    {
                      "type": "text",
                      "value": ": Use the width as the "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "delimiter"
                    },
                    {
                      "type": "text",
                      "value": " argument."
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "# File with width=4. The data does not have to be justified (for example,     # the 2 in row 1), the last column can be less than width (for example, the 6     # in row 2), and no delimiting character is required (for instance 8888 and 9     # in row 3)"
                        }
                      ],
                      "type": "paragraph"
                    },
                    {
                      "type": "code",
                      "value": ">>> with open(\"fixedwidth.txt\", \"r\") as f:\n...    data = (f.read())\n>>> print(data)\n1   2      3\n44      6\n7   88889"
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "# Showing spaces as ^     >>> print(data.replace(\" \",\"^\"))     1^^^2^^^^^^3     44^^^^^^6     7^^^88889"
                        }
                      ],
                      "type": "paragraph"
                    },
                    {
                      "type": "code",
                      "value": ">>> np.genfromtxt(\"fixedwidth.txt\", delimiter=4)\narray([[1.000e+00, 2.000e+00, 3.000e+00],\n       [4.400e+01,       nan, 6.000e+00],\n       [7.000e+00, 8.888e+03, 9.000e+00]])"
                    }
                  ],
                  "type": "blockquote"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "A special value (e.g. \"x\") indicates a missing field"
                        }
                      ],
                      "type": "strong"
                    },
                    {
                      "type": "text",
                      "value": ": Use it as the   "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "missing_values"
                    },
                    {
                      "type": "text",
                      "value": " argument."
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "type": "code",
                      "value": ">>> with open(\"nan.txt\", \"r\") as f:\n...     print(f.read())\n1 2 3\n44 x 6\n7  8888 9"
                    },
                    {
                      "type": "code",
                      "value": ">>> np.genfromtxt(\"nan.txt\", missing_values=\"x\")\narray([[1.000e+00, 2.000e+00, 3.000e+00],\n       [4.400e+01,       nan, 6.000e+00],\n       [7.000e+00, 8.888e+03, 9.000e+00]])"
                    }
                  ],
                  "type": "blockquote"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "You want to skip the rows with missing values"
                        }
                      ],
                      "type": "strong"
                    },
                    {
                      "type": "text",
                      "value": ": Set   "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "invalid_raise=False"
                    },
                    {
                      "type": "text",
                      "value": "."
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "type": "code",
                      "value": ">>> with open(\"skip.txt\", \"r\") as f:\n...     print(f.read())\n1 2   3\n44    6\n7 888 9"
                    },
                    {
                      "type": "code",
                      "value": ">>> np.genfromtxt(\"skip.txt\", invalid_raise=False)  # doctest: +SKIP\n__main__:1: ConversionWarning: Some errors were detected !\n    Line #2 (got 2 columns instead of 3)\narray([[  1.,   2.,   3.],\n       [  7., 888.,   9.]])"
                    }
                  ],
                  "type": "blockquote"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "The delimiter whitespace character is different from the whitespace that\n  indicates missing data"
                        }
                      ],
                      "type": "strong"
                    },
                    {
                      "type": "text",
                      "value": ". For instance, if columns are delimited by "
                    },
                    {
                      "type": "inlineCode",
                      "value": "\\t"
                    },
                    {
                      "type": "text",
                      "value": ",   then missing data will be recognized if it consists of one   or more spaces."
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "type": "code",
                      "value": ">>> with open(\"tabs.txt\", \"r\") as f:\n...    data = (f.read())\n>>> print(data)\n1       2       3\n44              6\n7       888     9"
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "# Tabs vs. spaces     >>> print(data.replace(\"\\t\",\"^\"))     1^2^3     44^ ^6     7^888^9"
                        }
                      ],
                      "type": "paragraph"
                    },
                    {
                      "type": "code",
                      "value": ">>> np.genfromtxt(\"tabs.txt\", delimiter=\"\\t\", missing_values=\" +\")\narray([[  1.,   2.,   3.],\n       [ 44.,  nan,   6.],\n       [  7., 888.,   9.]])"
                    }
                  ],
                  "type": "blockquote"
                }
              ],
              "spread": false,
              "type": "listItem"
            }
          ],
          "ordered": false,
          "spread": false,
          "start": 1,
          "type": "list"
        }
      ],
      "level": 3,
      "target": null,
      "title": "Whitespace-delimited",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Choices:"
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "children": [
                {
                  "children": [
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "Use "
                        },
                        {
                          "type": "inlineCode",
                          "value": "numpy.load"
                        },
                        {
                          "type": "text",
                          "value": ". It can read files generated by any of     "
                        },
                        {
                          "type": "inlineCode",
                          "value": "numpy.save"
                        },
                        {
                          "type": "text",
                          "value": ", "
                        },
                        {
                          "type": "inlineCode",
                          "value": "numpy.savez"
                        },
                        {
                          "type": "text",
                          "value": ", or "
                        },
                        {
                          "type": "inlineCode",
                          "value": "numpy.savez_compressed"
                        },
                        {
                          "type": "text",
                          "value": "."
                        }
                      ],
                      "type": "paragraph"
                    }
                  ],
                  "spread": false,
                  "type": "listItem"
                },
                {
                  "children": [
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "Use memory mapping. See "
                        },
                        {
                          "anchor": null,
                          "exists": true,
                          "kind": "module",
                          "reference": {
                            "kind": "api",
                            "module": "numpy.lib.format",
                            "path": "numpy.lib.format:open_memmap",
                            "type": "RefInfo",
                            "version": "*"
                          },
                          "type": "Link",
                          "value": "numpy.lib.format.open_memmap"
                        },
                        {
                          "type": "text",
                          "value": "."
                        }
                      ],
                      "type": "paragraph"
                    }
                  ],
                  "spread": false,
                  "type": "listItem"
                }
              ],
              "ordered": false,
              "spread": false,
              "start": 1,
              "type": "list"
            }
          ],
          "type": "blockquote"
        }
      ],
      "level": 1,
      "target": null,
      "title": "Read a file in .npy or .npz format",
      "type": "Section"
    },
    {
      "children": [],
      "level": 1,
      "target": null,
      "title": "Write to a file to be read back by NumPy",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Use "
            },
            {
              "type": "inlineCode",
              "value": "numpy.save"
            },
            {
              "type": "text",
              "value": ", or to store multiple arrays "
            },
            {
              "type": "inlineCode",
              "value": "numpy.savez"
            },
            {
              "type": "text",
              "value": " or "
            },
            {
              "type": "inlineCode",
              "value": "numpy.savez_compressed"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "For "
            },
            {
              "type": "inlineCode",
              "value": "security and portability <how-to-io-pickle-file>"
            },
            {
              "type": "text",
              "value": ", set "
            },
            {
              "type": "inlineCode",
              "value": "allow_pickle=False"
            },
            {
              "type": "text",
              "value": " unless the dtype contains Python objects, which requires pickling."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Masked arrays "
            },
            {
              "type": "inlineCode",
              "value": "can't currently be saved <MaskedArray.tofile>"
            },
            {
              "type": "text",
              "value": ", nor can other arbitrary array subclasses."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "Binary",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "inlineCode",
              "value": "numpy.save"
            },
            {
              "type": "text",
              "value": " and "
            },
            {
              "type": "inlineCode",
              "value": "numpy.savez"
            },
            {
              "type": "text",
              "value": " create binary files. To "
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "write a\nhuman-readable file"
                }
              ],
              "type": "strong"
            },
            {
              "type": "text",
              "value": ", use "
            },
            {
              "type": "inlineCode",
              "value": "numpy.savetxt"
            },
            {
              "type": "text",
              "value": ". The array can only be 1- or 2-dimensional, and there's no ` savetxtz` for multiple files."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "Human-readable",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "See "
            },
            {
              "type": "inlineCode",
              "value": "how-to-io-large-arrays"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "Large arrays",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Use a "
            },
            {
              "type": "inlineCode",
              "value": "structured array <basics.rec>"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "children": [
                {
                  "type": "text",
                  "value": "Example:"
                }
              ],
              "type": "strong"
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "The "
            },
            {
              "type": "inlineCode",
              "value": ".wav"
            },
            {
              "type": "text",
              "value": " file header is a 44-byte block preceding "
            },
            {
              "type": "inlineCode",
              "value": "data_size"
            },
            {
              "type": "text",
              "value": " bytes of the actual sound data      "
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": "chunk_id         \"RIFF\"\nchunk_size       4-byte unsigned little-endian integer\nformat           \"WAVE\"\nfmt_id           \"fmt \"\nfmt_size         4-byte unsigned little-endian integer\naudio_fmt        2-byte unsigned little-endian integer\nnum_channels     2-byte unsigned little-endian integer\nsample_rate      4-byte unsigned little-endian integer\nbyte_rate        4-byte unsigned little-endian integer\nblock_align      2-byte unsigned little-endian integer\nbits_per_sample  2-byte unsigned little-endian integer\ndata_id          \"data\"\ndata_size        4-byte unsigned little-endian integer"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "The "
            },
            {
              "type": "inlineCode",
              "value": ".wav"
            },
            {
              "type": "text",
              "value": " file header as a NumPy structured dtype      "
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": "wav_header_dtype = np.dtype([\n    (\"chunk_id\", (bytes, 4)), # flexible-sized scalar type, item size 4\n    (\"chunk_size\", \"<u4\"),    # little-endian unsigned 32-bit integer\n    (\"format\", \"S4\"),         # 4-byte string, alternate spelling of (bytes, 4)\n    (\"fmt_id\", \"S4\"),\n    (\"fmt_size\", \"<u4\"),\n    (\"audio_fmt\", \"<u2\"),     #\n    (\"num_channels\", \"<u2\"),  # .. more of the same ...\n    (\"sample_rate\", \"<u4\"),   #\n    (\"byte_rate\", \"<u4\"),\n    (\"block_align\", \"<u2\"),\n    (\"bits_per_sample\", \"<u2\"),\n    (\"data_id\", \"S4\"),\n    (\"data_size\", \"<u4\"),\n    #\n    # the sound data itself cannot be represented here:\n    # it does not have a fixed size\n])\n\nheader = np.fromfile(f, dtype=wave_header_dtype, count=1)[0]"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "This "
            },
            {
              "type": "inlineCode",
              "value": ".wav"
            },
            {
              "type": "text",
              "value": " example is for illustration; to read a "
            },
            {
              "type": "inlineCode",
              "value": ".wav"
            },
            {
              "type": "text",
              "value": " file in real life, use Python's built-in module "
            },
            {
              "type": "inlineCode",
              "value": "wave"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "(Adapted from Pauli Virtanen, "
            },
            {
              "type": "inlineCode",
              "value": "advanced_numpy"
            },
            {
              "type": "text",
              "value": ", licensed under "
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "CC BY 4.0"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://creativecommons.org/licenses/by/4.0/"
            },
            {
              "type": "text",
              "value": ".)"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 1,
      "target": null,
      "title": "Read an arbitrarily formatted binary file (\"binary blob\")",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "children": [
                {
                  "type": "text",
                  "value": "Arrays too large to fit in memory"
                }
              ],
              "type": "strong"
            },
            {
              "type": "text",
              "value": " can be treated like ordinary in-memory arrays using memory mapping."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Raw array data written with "
                    },
                    {
                      "type": "inlineCode",
                      "value": "numpy.ndarray.tofile"
                    },
                    {
                      "type": "text",
                      "value": " or   "
                    },
                    {
                      "type": "inlineCode",
                      "value": "numpy.ndarray.tobytes"
                    },
                    {
                      "type": "text",
                      "value": " can be read with "
                    },
                    {
                      "type": "inlineCode",
                      "value": "numpy.memmap"
                    },
                    {
                      "type": "text",
                      "value": ":        "
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "type": "code",
                  "value": "array = numpy.memmap(\"mydata/myarray.arr\", mode=\"r\", dtype=np.int16, shape=(1024, 1024))"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Files output by "
                    },
                    {
                      "type": "inlineCode",
                      "value": "numpy.save"
                    },
                    {
                      "type": "text",
                      "value": " (that is, using the numpy format) can be read   using "
                    },
                    {
                      "type": "inlineCode",
                      "value": "numpy.load"
                    },
                    {
                      "type": "text",
                      "value": " with the "
                    },
                    {
                      "type": "inlineCode",
                      "value": "mmap_mode"
                    },
                    {
                      "type": "text",
                      "value": " keyword argument        "
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "type": "code",
                  "value": "large_array[some_slice] = np.load(\"path/to/small_array\", mmap_mode=\"r\")"
                }
              ],
              "spread": false,
              "type": "listItem"
            }
          ],
          "ordered": false,
          "spread": false,
          "start": 1,
          "type": "list"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Memory mapping lacks features like data chunking and compression; more full-featured formats and libraries usable with NumPy include:"
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "children": [
                {
                  "children": [
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "HDF5"
                        }
                      ],
                      "type": "strong"
                    },
                    {
                      "type": "text",
                      "value": ": "
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "h5py"
                        }
                      ],
                      "title": "",
                      "type": "link",
                      "url": "https://www.h5py.org/"
                    },
                    {
                      "type": "text",
                      "value": " or "
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "PyTables"
                        }
                      ],
                      "title": "",
                      "type": "link",
                      "url": "https://www.pytables.org/"
                    },
                    {
                      "type": "text",
                      "value": "."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "Zarr"
                        }
                      ],
                      "type": "strong"
                    },
                    {
                      "type": "text",
                      "value": ": "
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "here"
                        }
                      ],
                      "title": "",
                      "type": "link",
                      "url": "https://zarr.readthedocs.io/en/stable/tutorial.html#reading-and-writing-data"
                    },
                    {
                      "type": "text",
                      "value": "."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "NetCDF"
                        }
                      ],
                      "type": "strong"
                    },
                    {
                      "type": "text",
                      "value": ": "
                    },
                    {
                      "type": "inlineCode",
                      "value": "scipy.io.netcdf_file"
                    },
                    {
                      "type": "text",
                      "value": "."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            }
          ],
          "ordered": false,
          "spread": false,
          "start": 1,
          "type": "list"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "For tradeoffs among memmap, Zarr, and HDF5, see "
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "pythonspeed.com"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://pythonspeed.com/articles/mmap-vs-zarr-hdf5/"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 1,
      "target": "how-to-io-large-arrays",
      "title": "Write or read large arrays",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Formats for "
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "exchanging data"
                }
              ],
              "type": "strong"
            },
            {
              "type": "text",
              "value": " with other tools include HDF5, Zarr, and NetCDF (see "
            },
            {
              "type": "inlineCode",
              "value": "how-to-io-large-arrays"
            },
            {
              "type": "text",
              "value": ")."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 1,
      "target": null,
      "title": "Write files for reading by other (non-NumPy) tools",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "NumPy arrays are "
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "not"
                }
              ],
              "type": "strong"
            },
            {
              "type": "text",
              "value": " directly "
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "JSON serializable"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://github.com/numpy/numpy/issues/12481"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 1,
      "target": null,
      "title": "Write or read a JSON file",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Avoid when possible; "
            },
            {
              "type": "inlineCode",
              "value": "pickles <python:library/pickle>"
            },
            {
              "type": "text",
              "value": " are not secure against erroneous or maliciously constructed data."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Use "
            },
            {
              "type": "inlineCode",
              "value": "numpy.save"
            },
            {
              "type": "text",
              "value": " and "
            },
            {
              "type": "inlineCode",
              "value": "numpy.load"
            },
            {
              "type": "text",
              "value": ".  Set "
            },
            {
              "type": "inlineCode",
              "value": "allow_pickle=False"
            },
            {
              "type": "text",
              "value": ", unless the array dtype includes Python objects, in which case pickling is required."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 1,
      "target": "how-to-io-pickle-file",
      "title": "Save/restore using a pickle file",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "See "
            },
            {
              "type": "inlineCode",
              "value": "pandas.DataFrame.to_numpy"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 1,
      "target": null,
      "title": "Convert from a pandas DataFrame to a NumPy array",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "In general, prefer "
            },
            {
              "type": "inlineCode",
              "value": "numpy.save"
            },
            {
              "type": "text",
              "value": " and "
            },
            {
              "type": "inlineCode",
              "value": "numpy.load"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "inlineCode",
              "value": "numpy.ndarray.tofile"
            },
            {
              "type": "text",
              "value": " and "
            },
            {
              "type": "inlineCode",
              "value": "numpy.fromfile"
            },
            {
              "type": "text",
              "value": " lose information on endianness and precision and so are unsuitable for anything but scratch storage."
            }
          ],
          "type": "paragraph"
        },
        {
          "args": "",
          "children": [],
          "name": "testcleanup",
          "options": {},
          "type": "mystDirective",
          "value": ">>> import os\n>>> # list all files created in testsetup. If needed there are\n>>> # convenienes in e.g. astroquery to do this more automatically\n>>> for filename in ['csv.txt', 'fixedwidth.txt', 'nan.txt', 'skip.txt', 'tabs.txt']:\n...     os.remove(filename)"
        }
      ],
      "level": 1,
      "target": null,
      "title": "Save/restore using `~numpy.ndarray.tofile` and `~numpy.fromfile`",
      "type": "Section"
    }
  ],
  "content": {},
  "example_section_data": {
    "children": [],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": null,
  "item_line": null,
  "item_type": null,
  "ordered_sections": [],
  "references": null,
  "see_also": [],
  "signature": {
    "type": "Signature",
    "value": null
  },
  "type": "DocBlob"
}