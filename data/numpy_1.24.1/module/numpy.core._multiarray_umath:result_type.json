{
  "aliases": [
    "numpy.core._multiarray_umath.result_type"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Type promotion in NumPy works similarly to the rules in languages like C++, with some slight differences.  When both scalars and arrays are used, the array's type takes precedence and the actual value of the scalar is taken into account."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "For example, calculating 3*a, where a is an array of 32-bit floats, intuitively should result in a 32-bit float output.  If the 3 is a 32-bit integer, the NumPy rules indicate it can't convert losslessly into a 32-bit float, so a 64-bit float should be the result type. By examining the value of the constant, '3', we see that it fits in an 8-bit integer, which can be cast losslessly into the 32-bit float."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [
        {
          "children": [
            {
              "children": [
                {
                  "type": "text",
                  "value": "versionadded 1.6.0"
                }
              ],
              "type": "admonitionTitle"
            }
          ],
          "kind": "note",
          "type": "admonition"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "The specific algorithm used is as follows."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Categories are determined by first checking which of boolean, integer (int/uint), or floating point (float/complex) the maximum kind of all the arrays and the scalars are."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "If there are only scalars or the maximum category of the scalars is higher than the maximum category of the arrays, the data types are combined with "
            },
            {
              "type": "inlineCode",
              "value": "promote_types"
            },
            {
              "type": "text",
              "value": " to produce the return value."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Otherwise, "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "min_scalar_type"
            },
            {
              "type": "text",
              "value": " is called on each array, and the resulting data types are all combined with "
            },
            {
              "type": "inlineCode",
              "value": "promote_types"
            },
            {
              "type": "text",
              "value": " to produce the return value."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "The set of int values is not a subset of the uint values for types with the same number of bits, something not reflected in "
            },
            {
              "type": "inlineCode",
              "value": "min_scalar_type"
            },
            {
              "type": "text",
              "value": ", but handled as a special case in "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "result_type"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The operands of some operation whose result type is needed."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "arrays_and_dtypes",
              "type": "Param",
              "type_": "list of arrays and dtypes"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The result type."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "out",
              "type": "Param",
              "type_": "dtype"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Returns the type that results from applying the NumPy type promotion rules to the arguments."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [
      {
        "type": "code",
        "value": "np.result_type(3, np.arange(7, dtype='i1'))"
      },
      {
        "type": "code",
        "value": "np.result_type('i4', 'c8')"
      },
      {
        "type": "code",
        "value": "np.result_type(3.0, -2)"
      }
    ],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": null,
  "item_line": null,
  "item_type": "<class 'builtin_function_or_method'>",
  "ordered_sections": [
    "Signature",
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns",
    "See Also",
    "Notes",
    "Examples"
  ],
  "references": null,
  "see_also": [
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "to-resolve",
          "module": "current-module",
          "path": "dtype",
          "type": "RefInfo",
          "version": "current-version"
        },
        "type": "Link",
        "value": "dtype"
      },
      "type": null
    },
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "module",
          "module": "numpy",
          "path": "numpy:promote_types",
          "type": "RefInfo",
          "version": "1.24.1"
        },
        "type": "Link",
        "value": "promote_types"
      },
      "type": null
    },
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "to-resolve",
          "module": "current-module",
          "path": "min_scalar_type",
          "type": "RefInfo",
          "version": "current-version"
        },
        "type": "Link",
        "value": "min_scalar_type"
      },
      "type": null
    },
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "to-resolve",
          "module": "current-module",
          "path": "can_cast",
          "type": "RefInfo",
          "version": "current-version"
        },
        "type": "Link",
        "value": "can_cast"
      },
      "type": null
    }
  ],
  "signature": {
    "type": "Signature",
    "value": "result_type(*arrays_and_dtypes)"
  },
  "type": "DocBlob"
}