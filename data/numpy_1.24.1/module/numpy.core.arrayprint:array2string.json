{
  "aliases": [
    "numpy.core.arrayprint._array2string_impl"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "If a formatter is specified for a certain type, the "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "precision",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "precision"
            },
            {
              "type": "text",
              "value": " keyword is ignored for that type."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "This is a very flexible function; "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "array_repr"
            },
            {
              "type": "text",
              "value": " and "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "array_str",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "array_str"
            },
            {
              "type": "text",
              "value": " are using "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "array2string"
            },
            {
              "type": "text",
              "value": " internally so keywords with the same name should work identically in all three functions."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Input array."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "a",
              "type": "Param",
              "type_": "ndarray"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Inserts newlines if text is longer than "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "max_line_width",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "max_line_width"
                    },
                    {
                      "type": "text",
                      "value": ". Defaults to "
                    },
                    {
                      "type": "inlineCode",
                      "value": "numpy.get_printoptions()['linewidth']"
                    },
                    {
                      "type": "text",
                      "value": "."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "max_line_width",
              "type": "Param",
              "type_": "int, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Floating point precision. Defaults to "
                    },
                    {
                      "type": "inlineCode",
                      "value": "numpy.get_printoptions()['precision']"
                    },
                    {
                      "type": "text",
                      "value": "."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "precision",
              "type": "Param",
              "type_": "int or None, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Represent numbers \"very close\" to zero as zero; default is False. Very close is defined by precision: if the precision is 8, e.g., numbers smaller (in absolute value) than 5e-9 are represented as zero. Defaults to "
                    },
                    {
                      "type": "inlineCode",
                      "value": "numpy.get_printoptions()['suppress']"
                    },
                    {
                      "type": "text",
                      "value": "."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "suppress_small",
              "type": "Param",
              "type_": "bool, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Inserted between elements."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "separator",
              "type": "Param",
              "type_": "str, optional"
            },
            {
              "desc": [],
              "param": "prefix",
              "type": "Param",
              "type_": "str, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The length of the prefix and suffix strings are used to respectively align and wrap the output. An array is typically printed as    "
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "type": "code",
                  "value": "prefix + array2string(a) + suffix"
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The output is left-padded by the length of the prefix string, and wrapping is forced at the column "
                    },
                    {
                      "type": "inlineCode",
                      "value": "max_line_width - len(suffix)"
                    },
                    {
                      "type": "text",
                      "value": ". It should be noted that the content of prefix and suffix strings are not included in the output."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "suffix",
              "type": "Param",
              "type_": "str, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Has no effect, do not use."
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "deprecated 1.14.0"
                        }
                      ],
                      "type": "admonitionTitle"
                    }
                  ],
                  "kind": "note",
                  "type": "admonition"
                }
              ],
              "param": "style",
              "type": "Param",
              "type_": "_NoValue, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "If not None, the keys should indicate the type(s) that the respective formatting function applies to.  Callables should return a string. Types that are not specified (by their corresponding keys) are handled by the default formatters.  Individual types for which a formatter can be set are:"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "children": [
                        {
                          "children": [
                            {
                              "type": "text",
                              "value": "'bool'"
                            }
                          ],
                          "type": "paragraph"
                        }
                      ],
                      "spread": false,
                      "type": "listItem"
                    },
                    {
                      "children": [
                        {
                          "children": [
                            {
                              "type": "text",
                              "value": "'int'"
                            }
                          ],
                          "type": "paragraph"
                        }
                      ],
                      "spread": false,
                      "type": "listItem"
                    },
                    {
                      "children": [],
                      "spread": false,
                      "type": "listItem"
                    }
                  ],
                  "ordered": false,
                  "spread": false,
                  "start": 1,
                  "type": "list"
                }
              ],
              "param": "formatter",
              "type": "Param",
              "type_": "dict of callables, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Total number of array elements which trigger summarization rather than full repr. Defaults to "
                    },
                    {
                      "type": "inlineCode",
                      "value": "numpy.get_printoptions()['threshold']"
                    },
                    {
                      "type": "text",
                      "value": "."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "threshold",
              "type": "Param",
              "type_": "int, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Number of array items in summary at beginning and end of each dimension. Defaults to "
                    },
                    {
                      "type": "inlineCode",
                      "value": "numpy.get_printoptions()['edgeitems']"
                    },
                    {
                      "type": "text",
                      "value": "."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "edgeitems",
              "type": "Param",
              "type_": "int, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Controls printing of the sign of floating-point types. If '+', always print the sign of positive values. If ' ', always prints a space (whitespace character) in the sign position of positive values.  If '-', omit the sign character of positive values. Defaults to "
                    },
                    {
                      "type": "inlineCode",
                      "value": "numpy.get_printoptions()['sign']"
                    },
                    {
                      "type": "text",
                      "value": "."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "sign",
              "type": "Param",
              "type_": "string, either '-', '+', or ' ', optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Controls the interpretation of the "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "precision",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "precision"
                    },
                    {
                      "type": "text",
                      "value": " option for floating-point types. Defaults to "
                    },
                    {
                      "type": "inlineCode",
                      "value": "numpy.get_printoptions()['floatmode']"
                    },
                    {
                      "type": "text",
                      "value": ". Can take the following values:"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "children": [
                        {
                          "children": [
                            {
                              "type": "text",
                              "value": "'fixed': Always print exactly "
                            },
                            {
                              "anchor": null,
                              "exists": true,
                              "kind": "local",
                              "reference": {
                                "kind": "local",
                                "module": null,
                                "path": "precision",
                                "type": "RefInfo",
                                "version": null
                              },
                              "type": "Link",
                              "value": "precision"
                            },
                            {
                              "type": "text",
                              "value": " fractional digits,   even if this would print more or fewer digits than   necessary to specify the value uniquely."
                            }
                          ],
                          "type": "paragraph"
                        }
                      ],
                      "spread": false,
                      "type": "listItem"
                    },
                    {
                      "children": [
                        {
                          "children": [
                            {
                              "type": "text",
                              "value": "'unique': Print the minimum number of fractional digits necessary   to represent each value uniquely. Different elements may   have a different number of digits.  The value of the   "
                            },
                            {
                              "anchor": null,
                              "exists": true,
                              "kind": "local",
                              "reference": {
                                "kind": "local",
                                "module": null,
                                "path": "precision",
                                "type": "RefInfo",
                                "version": null
                              },
                              "type": "Link",
                              "value": "precision"
                            },
                            {
                              "type": "text",
                              "value": " option is ignored."
                            }
                          ],
                          "type": "paragraph"
                        }
                      ],
                      "spread": false,
                      "type": "listItem"
                    },
                    {
                      "children": [
                        {
                          "children": [
                            {
                              "type": "text",
                              "value": "'maxprec': Print at most "
                            },
                            {
                              "anchor": null,
                              "exists": true,
                              "kind": "local",
                              "reference": {
                                "kind": "local",
                                "module": null,
                                "path": "precision",
                                "type": "RefInfo",
                                "version": null
                              },
                              "type": "Link",
                              "value": "precision"
                            },
                            {
                              "type": "text",
                              "value": " fractional digits, but if   an element can be uniquely represented with fewer digits   only print it with that many."
                            }
                          ],
                          "type": "paragraph"
                        }
                      ],
                      "spread": false,
                      "type": "listItem"
                    },
                    {
                      "children": [
                        {
                          "children": [
                            {
                              "type": "text",
                              "value": "'maxprec_equal': Print at most "
                            },
                            {
                              "anchor": null,
                              "exists": true,
                              "kind": "local",
                              "reference": {
                                "kind": "local",
                                "module": null,
                                "path": "precision",
                                "type": "RefInfo",
                                "version": null
                              },
                              "type": "Link",
                              "value": "precision"
                            },
                            {
                              "type": "text",
                              "value": " fractional digits,   but if every element in the array can be uniquely   represented with an equal number of fewer digits, use that   many digits for all elements."
                            }
                          ],
                          "type": "paragraph"
                        }
                      ],
                      "spread": false,
                      "type": "listItem"
                    }
                  ],
                  "ordered": false,
                  "spread": false,
                  "start": 1,
                  "type": "list"
                }
              ],
              "param": "floatmode",
              "type": "Param",
              "type_": "str, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "If set to the string "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "'1.13'"
                    },
                    {
                      "type": "text",
                      "value": " enables 1.13 legacy printing mode. This approximates numpy 1.13 print output by including a space in the sign position of floats and different behavior for 0d arrays. If set to "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "False"
                    },
                    {
                      "type": "text",
                      "value": ", disables legacy mode. Unrecognized strings will be ignored with a warning for forward compatibility."
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "versionadded 1.14.0"
                        }
                      ],
                      "type": "admonitionTitle"
                    }
                  ],
                  "kind": "note",
                  "type": "admonition"
                }
              ],
              "param": "legacy",
              "type": "Param",
              "type_": "string or `False`, optional"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "if a callable in "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "formatter",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "formatter"
                    },
                    {
                      "type": "text",
                      "value": " does not return a string."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "",
              "type": "Param",
              "type_": "TypeError"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "String representation of the array."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "array_str",
              "type": "Param",
              "type_": "str"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Return a string representation of an array."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [
      {
        "type": "code",
        "value": "x = np.array([1e-16,1,2,3])\nnp.array2string(x, precision=2, separator=',',\n                      suppress_small=True)"
      },
      {
        "type": "code",
        "value": "x  = np.arange(3.)\nnp.array2string(x, formatter={'float_kind':lambda x: \"%.2f\" % x})"
      },
      {
        "type": "code",
        "value": "x  = np.arange(3)\nnp.array2string(x, formatter={'int':lambda x: hex(x)})"
      }
    ],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/numpy/core/arrayprint.py",
  "item_line": 561,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Parameters",
    "Returns",
    "Raises",
    "See Also",
    "Notes",
    "Examples"
  ],
  "references": null,
  "see_also": [
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "to-resolve",
          "module": "current-module",
          "path": "array_str",
          "type": "RefInfo",
          "version": "current-version"
        },
        "type": "Link",
        "value": "array_str"
      },
      "type": null
    },
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "to-resolve",
          "module": "current-module",
          "path": "array_repr",
          "type": "RefInfo",
          "version": "current-version"
        },
        "type": "Link",
        "value": "array_repr"
      },
      "type": null
    },
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "module",
          "module": "numpy",
          "path": "numpy:set_printoptions",
          "type": "RefInfo",
          "version": "1.24.1"
        },
        "type": "Link",
        "value": "set_printoptions"
      },
      "type": null
    },
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "module",
          "module": "numpy",
          "path": "numpy:get_printoptions",
          "type": "RefInfo",
          "version": "1.24.1"
        },
        "type": "Link",
        "value": "get_printoptions"
      },
      "type": null
    }
  ],
  "signature": {
    "type": "Signature",
    "value": "(a, max_line_width=None, precision=None, suppress_small=None, separator=' ', prefix='', style=<no value>, formatter=None, threshold=None, edgeitems=None, sign=None, floatmode=None, suffix='', *, legacy=None)"
  },
  "type": "DocBlob"
}