{
  "aliases": [
    "numpy.core.shape_base._concatenate_shapes"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "These help in nested concatenation."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "This tuple satisfies      "
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "type": "code",
                  "value": "shape, _ = _concatenate_shapes([arr.shape for shape in arrs], axis)\nshape == concatenate(arrs, axis).shape"
                }
              ],
              "param": "",
              "type": "Param",
              "type_": "shape: tuple of int"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "For a list of arrays being concatenated, this returns the slice in the larger array at axis that needs to be sliced into."
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "For example, the following holds      "
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "type": "code",
                  "value": "ret = concatenate([a, b, c], axis)\n_, (sl_a, sl_b, sl_c) = concatenate_slices([a, b, c], axis)\n\nret[(slice(None),) * axis + sl_a] == a\nret[(slice(None),) * axis + sl_b] == b\nret[(slice(None),) * axis + sl_c] == c"
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "These are called slice prefixes since they are used in the recursive blocking algorithm to compute the left-most slices during the recursion. Therefore, they must be prepended to rest of the slice that was computed deeper in the recursion."
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "These are returned as tuples to ensure that they can quickly be added to existing slice tuple without creating a new tuple every time."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "",
              "type": "Param",
              "type_": "slice_prefixes: tuple of (slice(start, end), )"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Given array shapes, return the resulting shape and slices prefixes."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/numpy/core/shape_base.py",
  "item_line": 578,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Returns"
  ],
  "references": null,
  "see_also": [],
  "signature": {
    "type": "Signature",
    "value": "(shapes, axis)"
  },
  "type": "DocBlob"
}