{
  "aliases": [
    "numpy.lib.format"
  ],
  "arbitrary": [
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Binary serialization"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "A simple format for saving numpy arrays to disk with the full information about them."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "The "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    ".npy"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " format is the standard binary file format in NumPy for persisting a "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "single"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": " arbitrary NumPy array on disk. The format stores all of the shape and dtype information necessary to reconstruct the array correctly even on another machine with a different architecture. The format is designed to be as simple as possible while achieving its limited goals."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "The "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    ".npz"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " format is the standard format for persisting "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "multiple"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": " NumPy arrays on disk. A "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    ".npz"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " file is a zip file containing multiple "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    ".npy"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " files, one for each array."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": "NPY format"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Can represent all NumPy arrays including nested record arrays and   object arrays."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Represents the data in its native binary form."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Supports Fortran-contiguous arrays directly."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Stores all of the necessary information to reconstruct the array   including shape and dtype on a machine of a different   architecture.  Both little-endian and big-endian arrays are   supported, and a file with little-endian numbers will yield   a little-endian array on any machine reading the file. The   types are described in terms of their actual sizes. For example,   if a machine with a 64-bit C \"long int\" writes out an array with   \"long ints\", a reading machine with 32-bit C \"long ints\" will yield   an array with 64-bit integers."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Is straightforward to reverse engineer. Datasets often live longer than   the programs that created them. A competent developer should be   able to create a solution in their preferred programming language to   read most "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              ".npy"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " files that they have been given without much   documentation."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Allows memory-mapping of the data. See "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "anchor": null,
                            "exists": true,
                            "kind": "module",
                            "reference": {
                              "kind": "module",
                              "module": "numpy",
                              "path": "numpy.lib.format.open_memmap",
                              "version": "1.24.1"
                            },
                            "value": "open_memmap"
                          },
                          "type": "Link"
                        },
                        {
                          "data": {
                            "value": "."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Can be read from a filelike stream object instead of an actual file."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Stores object arrays, i.e. arrays containing elements that are arbitrary   Python objects. Files with object arrays are not to be mmapable, but   can be read and written to disk."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              }
            ]
          },
          "type": "BulletList"
        }
      ],
      "level": 1,
      "target": null,
      "title": "Capabilities"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Arbitrary subclasses of numpy.ndarray are not completely preserved.   Subclasses will be accepted for writing, but only the array data will   be written out. A regular numpy.ndarray object will be created   upon reading the file."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              }
            ]
          },
          "type": "BulletList"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "children": [
                    {
                      "data": {
                        "value": "Due to limitations in the interpretation of structured dtypes, dtypes with fields with empty names will have the names replaced by 'f0', 'f1', etc. Such arrays will not round-trip through the format entirely accurately. The data is intact; only the field names will differ. We are working on a fix for this. This fix will not require a change in the file format. The arrays with such structures can still be saved and restored, and the correct dtype may be restored by using the "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "loadedarray.view(correct_dtype)"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " method."
                      },
                      "type": "Words"
                    }
                  ]
                },
                "type": "Paragraph"
              }
            ],
            "kind": "warning",
            "title": ""
          },
          "type": "Admonition"
        }
      ],
      "level": 1,
      "target": null,
      "title": "Limitations"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "We recommend using the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    ".npy"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " and "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    ".npz"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " extensions for files saved in this format. This is by no means a requirement; applications may wish to use these file formats but use an extension specific to the application. In the absence of an obvious alternative, however, we suggest using "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    ".npy"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " and "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    ".npz"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": "."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "level": 1,
      "target": null,
      "title": "File extensions"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "The version numbering of these formats is independent of NumPy version numbering. If the format is upgraded, the code in "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "numpy.io"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " will still be able to read and write Version 1.0 files."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "level": 1,
      "target": null,
      "title": "Version numbering"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "The first 6 bytes are a magic string: exactly "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "\\x93NUMPY"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": "."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "The next 1 byte is an unsigned byte: the major version number of the file format, e.g. "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "\\x01"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": "."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "The next 1 byte is an unsigned byte: the minor version number of the file format, e.g. "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "\\x00"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ". Note: the version of the file format is not tied to the version of the numpy package."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "The next 2 bytes form a little-endian unsigned short int: the length of the header data HEADER_LEN."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "The next HEADER_LEN bytes form the header data describing the array's format. It is an ASCII string which contains a Python literal expression of a dictionary. It is terminated by a newline ("
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "\\n"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ") and padded with spaces ("
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "\\x20"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ") to make the total of "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "len(magic string) + 2 + len(length) + HEADER_LEN"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " be evenly divisible by 64 for alignment purposes."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "The dictionary contains three keys:"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "children": [
                    {
                      "dd": [
                        {
                          "data": {
                            "children": [
                              {
                                "data": {
                                  "value": "\"descr\""
                                },
                                "type": "Words"
                              }
                            ]
                          },
                          "type": "Paragraph"
                        }
                      ],
                      "dt": {
                        "children": [
                          {
                            "data": {
                              "value": "\"descr\""
                            },
                            "type": "Words"
                          }
                        ]
                      }
                    },
                    {
                      "dd": [
                        {
                          "data": {
                            "children": [
                              {
                                "data": {
                                  "value": "\"fortran_order\""
                                },
                                "type": "Words"
                              }
                            ]
                          },
                          "type": "Paragraph"
                        }
                      ],
                      "dt": {
                        "children": [
                          {
                            "data": {
                              "value": "\"fortran_order\""
                            },
                            "type": "Words"
                          }
                        ]
                      }
                    },
                    {
                      "dd": [
                        {
                          "data": {
                            "children": [
                              {
                                "data": {
                                  "value": "\"shape\""
                                },
                                "type": "Words"
                              }
                            ]
                          },
                          "type": "Paragraph"
                        }
                      ],
                      "dt": {
                        "children": [
                          {
                            "data": {
                              "value": "\"shape\""
                            },
                            "type": "Words"
                          }
                        ]
                      }
                    }
                  ]
                },
                "type": "DefList"
              }
            ]
          },
          "type": "BlockQuote"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "For repeatability and readability, the dictionary keys are sorted in alphabetic order. This is for convenience only. A writer SHOULD implement this if possible. A reader MUST NOT depend on this."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Following the header comes the array data. If the dtype contains Python objects (i.e. "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "dtype.hasobject is True"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": "), then the data is a Python pickle of the array. Otherwise the data is the contiguous (either C- or Fortran-, depending on "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "fortran_order"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ") bytes of the array. Consumers can figure out the number of bytes by multiplying the number of elements given by the shape (noting that "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "shape=()"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " means there is 1 element) by "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "dtype.itemsize"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": "."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "level": 1,
      "target": null,
      "title": "Format Version 1.0"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "The version 1.0 format only allowed the array header to have a total size of 65535 bytes.  This can be exceeded by structured arrays with a large number of columns.  The version 2.0 format extends the header size to 4 GiB. "
                },
                "type": "Words"
              },
              {
                "data": {
                  "anchor": null,
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "module",
                    "module": "numpy",
                    "path": "numpy.save",
                    "version": "1.24.1"
                  },
                  "value": "numpy.save"
                },
                "type": "Link"
              },
              {
                "data": {
                  "value": " will automatically save in 2.0 format if the data requires it, else it will always use the more compatible 1.0 format."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "The description of the fourth element of the header therefore has become: \"The next 4 bytes form a little-endian unsigned int: the length of the header data HEADER_LEN.\""
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "level": 1,
      "target": null,
      "title": "Format Version 2.0"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "This version replaces the ASCII string (which in practice was latin1) with a utf8-encoded string, so supports structured types with any unicode field names."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "level": 1,
      "target": null,
      "title": "Format Version 3.0"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "The "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    ".npy"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " format, including motivation for creating it and a comparison of alternatives, is described in the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "\"npy-format\" NEP <neps:nep-0001-npy-format>"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", however details have evolved with time and this document is more current."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "level": 1,
      "target": null,
      "title": "Notes"
    }
  ],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    },
    "Extended Summary": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    },
    "Notes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    },
    "Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    },
    "Returns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    },
    "Summary": {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "To remove in the future \u2013\u2013 numpy.lib.format"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    }
  },
  "example_section_data": {
    "children": [],
    "level": 0,
    "target": null,
    "title": null
  },
  "item_file": "/numpy/lib/format.py",
  "item_line": 0,
  "item_type": "<class 'module'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary"
  ],
  "references": null,
  "see_also": [],
  "signature": {
    "value": null
  }
}