{
  "aliases": [
    "numpy.linalg.multi_dot"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [
        {
          "children": [
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "multi_dot"
            },
            {
              "type": "text",
              "value": " chains "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "module",
              "reference": {
                "kind": "api",
                "module": "numpy",
                "path": "numpy:dot",
                "type": "RefInfo",
                "version": "*"
              },
              "type": "Link",
              "value": "numpy.dot"
            },
            {
              "type": "text",
              "value": " and uses optimal parenthesization of the matrices  . Depending on the shapes of the matrices, this can speed up the multiplication a lot."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "If the first argument is 1-D it is treated as a row vector. If the last argument is 1-D it is treated as a column vector. The other arguments must be 2-D."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Think of "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "multi_dot"
            },
            {
              "type": "text",
              "value": " as      "
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": "def multi_dot(arrays): return functools.reduce(np.dot, arrays)"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "The cost for a matrix multiplication can be calculated with the following function      "
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": "def cost(A, B):\n    return A.shape[0] * A.shape[1] * B.shape[1]"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Assume we have three matrices "
            },
            {
              "type": "inlineMath",
              "value": "A_{10x100}, B_{100x5}, C_{5x50}"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "The costs for the two different parenthesizations are as follows      "
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": "cost((AB)C) = 10*100*5 + 10*5*50   = 5000 + 2500   = 7500\ncost(A(BC)) = 10*100*50 + 100*5*50 = 50000 + 25000 = 75000"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "If the first argument is 1-D it is treated as row vector. If the last argument is 1-D it is treated as column vector. The other arguments must be 2-D."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "arrays",
              "type": "Param",
              "type_": "sequence of array_like"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Output argument. This must have the exact kind that would be returned if it was not used. In particular, it must have the right type, must be C-contiguous, and its dtype must be the dtype that would be returned for "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "dot(a, b)"
                    },
                    {
                      "type": "text",
                      "value": ". This is a performance feature. Therefore, if these conditions are not met, an exception is raised, instead of attempting to be flexible."
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "versionadded 1.19.0"
                        }
                      ],
                      "type": "admonitionTitle"
                    }
                  ],
                  "kind": "note",
                  "type": "admonition"
                }
              ],
              "param": "out",
              "type": "Param",
              "type_": "ndarray, optional"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Returns the dot product of the supplied arrays."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "output",
              "type": "Param",
              "type_": "ndarray"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Compute the dot product of two or more arrays in a single function call, while automatically selecting the fastest evaluation order."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [
      {
        "type": "text",
        "value": "`multi_dot` allows you to write::"
      },
      {
        "type": "code",
        "value": "from numpy.linalg import multi_dot\n# Prepare some data\nA = np.random.random((10000, 100))\nB = np.random.random((100, 1000))\nC = np.random.random((1000, 5))\nD = np.random.random((5, 333))\n# the actual dot multiplication\n_ = multi_dot([A, B, C, D])"
      },
      {
        "type": "text",
        "value": "instead of::"
      },
      {
        "type": "code",
        "value": "_ = np.dot(np.dot(np.dot(A, B), C), D)\n# or\n_ = A.dot(B).dot(C).dot(D)"
      }
    ],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/numpy/linalg/linalg.py",
  "item_line": 2602,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns",
    "See Also",
    "References",
    "Examples",
    "Notes"
  ],
  "references": null,
  "see_also": [
    {
      "descriptions": [
        {
          "children": [
            {
              "type": "text",
              "value": "dot multiplication with two arguments."
            }
          ],
          "type": "paragraph"
        }
      ],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "module",
          "module": "numpy",
          "path": "numpy:dot",
          "type": "RefInfo",
          "version": "1.24.1"
        },
        "type": "Link",
        "value": "numpy.dot"
      },
      "type": null
    }
  ],
  "signature": {
    "type": "Signature",
    "value": "(arrays, *, out=None)"
  },
  "type": "DocBlob"
}