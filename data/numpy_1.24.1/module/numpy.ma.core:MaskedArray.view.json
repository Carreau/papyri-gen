{
  "aliases": [
    "numpy.ma.MaskedArray.view"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [
        {
          "children": [
            {
              "type": "inlineCode",
              "value": "a.view()"
            },
            {
              "type": "text",
              "value": " is used two different ways:"
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "inlineCode",
              "value": "a.view(some_dtype)"
            },
            {
              "type": "text",
              "value": " or "
            },
            {
              "type": "inlineCode",
              "value": "a.view(dtype=some_dtype)"
            },
            {
              "type": "text",
              "value": " constructs a view of the array's memory with a different data-type.  This can cause a reinterpretation of the bytes of memory."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "inlineCode",
              "value": "a.view(ndarray_subclass)"
            },
            {
              "type": "text",
              "value": " or "
            },
            {
              "type": "inlineCode",
              "value": "a.view(type=ndarray_subclass)"
            },
            {
              "type": "text",
              "value": " just returns an instance of "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "ndarray_subclass"
            },
            {
              "type": "text",
              "value": " that looks at the same array (same shape, dtype, etc.)  This does not cause a reinterpretation of the memory."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "If "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "fill_value",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "fill_value"
            },
            {
              "type": "text",
              "value": " is not specified, but "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "dtype",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "dtype"
            },
            {
              "type": "text",
              "value": " is specified (and is not an ndarray sub-class), the "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "fill_value",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "fill_value"
            },
            {
              "type": "text",
              "value": " of the MaskedArray will be reset. If neither "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "fill_value",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "fill_value"
            },
            {
              "type": "text",
              "value": " nor "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "dtype",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "dtype"
            },
            {
              "type": "text",
              "value": " are specified (or if "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "dtype",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "dtype"
            },
            {
              "type": "text",
              "value": " is an ndarray sub-class), then the fill value is preserved. Finally, if "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "fill_value",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "fill_value"
            },
            {
              "type": "text",
              "value": " is specified, but "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "dtype",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "dtype"
            },
            {
              "type": "text",
              "value": " is not, the fill value is set to the specified value."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "For "
            },
            {
              "type": "inlineCode",
              "value": "a.view(some_dtype)"
            },
            {
              "type": "text",
              "value": ", if "
            },
            {
              "type": "inlineCode",
              "value": "some_dtype"
            },
            {
              "type": "text",
              "value": " has a different number of bytes per entry than the previous dtype (for example, converting a regular array to a structured array), then the behavior of the view cannot be predicted just from the superficial appearance of "
            },
            {
              "type": "inlineCode",
              "value": "a"
            },
            {
              "type": "text",
              "value": " (shown by "
            },
            {
              "type": "inlineCode",
              "value": "print(a)"
            },
            {
              "type": "text",
              "value": "). It also depends on exactly how "
            },
            {
              "type": "inlineCode",
              "value": "a"
            },
            {
              "type": "text",
              "value": " is stored in memory. Therefore if "
            },
            {
              "type": "inlineCode",
              "value": "a"
            },
            {
              "type": "text",
              "value": " is C-ordered versus fortran-ordered, versus defined as a slice or transpose, etc., the view may give different results."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Data-type descriptor of the returned view, e.g., float32 or int16. The default, None, results in the view having the same data-type as "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "a"
                    },
                    {
                      "type": "text",
                      "value": ". As with "
                    },
                    {
                      "type": "inlineCode",
                      "value": "ndarray.view"
                    },
                    {
                      "type": "text",
                      "value": ", dtype can also be specified as an ndarray sub-class, which then specifies the type of the returned object (this is equivalent to setting the "
                    },
                    {
                      "type": "inlineCode",
                      "value": "type"
                    },
                    {
                      "type": "text",
                      "value": " parameter)."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "dtype",
              "type": "Param",
              "type_": "data-type or ndarray sub-class, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Type of the returned view, either ndarray or a subclass.  The default None results in type preservation."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "type",
              "type": "Param",
              "type_": "Python type, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The value to use for invalid entries (None by default). If None, then this argument is inferred from the passed "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "dtype",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "dtype"
                    },
                    {
                      "type": "text",
                      "value": ", or in its absence the original array, as discussed in the notes below."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "fill_value",
              "type": "Param",
              "type_": "scalar, optional"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Return a view of the MaskedArray data."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/numpy/ma/core.py",
  "item_line": 3115,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Parameters",
    "See Also",
    "Notes"
  ],
  "references": null,
  "see_also": [
    {
      "descriptions": [
        {
          "children": [
            {
              "type": "text",
              "value": "Equivalent method on ndarray object."
            }
          ],
          "type": "paragraph"
        }
      ],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "to-resolve",
          "module": "current-module",
          "path": "numpy.ndarray.view",
          "type": "RefInfo",
          "version": "current-version"
        },
        "type": "Link",
        "value": "numpy.ndarray.view"
      },
      "type": null
    }
  ],
  "signature": {
    "type": "Signature",
    "value": "(self, dtype=None, type=None, fill_value=None)"
  },
  "type": "DocBlob"
}