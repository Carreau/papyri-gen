{
  "aliases": [
    "numpy.testing.assert_allclose"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Given two array_like objects, check that their shapes and all elements are equal (but see the Notes for the special handling of a scalar). An exception is raised if the shapes mismatch or any values conflict. In contrast to the standard usage in numpy, NaNs are compared like numbers, no assertion is raised if both objects have NaNs in the same positions."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "The test is equivalent to "
            },
            {
              "type": "inlineCode",
              "value": "allclose(actual, desired, rtol, atol)"
            },
            {
              "type": "text",
              "value": " (note that "
            },
            {
              "type": "inlineCode",
              "value": "allclose"
            },
            {
              "type": "text",
              "value": " has different default values). It compares the difference between "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "actual",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "actual"
            },
            {
              "type": "text",
              "value": " and "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "desired",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "desired"
            },
            {
              "type": "text",
              "value": " to "
            },
            {
              "type": "inlineCode",
              "value": "atol + rtol * abs(desired)"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "children": [
                {
                  "type": "text",
                  "value": "versionadded 1.5.0"
                }
              ],
              "type": "admonitionTitle"
            }
          ],
          "kind": "note",
          "type": "admonition"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "When one of "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "actual",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "actual"
            },
            {
              "type": "text",
              "value": " and "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "desired",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "desired"
            },
            {
              "type": "text",
              "value": " is a scalar and the other is array_like, the function checks that each element of the array_like object is equal to the scalar."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Array obtained."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "actual",
              "type": "Param",
              "type_": "array_like"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Array desired."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "desired",
              "type": "Param",
              "type_": "array_like"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Relative tolerance."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "rtol",
              "type": "Param",
              "type_": "float, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Absolute tolerance."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "atol",
              "type": "Param",
              "type_": "float, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "If True, NaNs will compare equal."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "equal_nan",
              "type": "Param",
              "type_": "bool, optional."
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The error message to be printed in case of failure."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "err_msg",
              "type": "Param",
              "type_": "str, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "If True, the conflicting values are appended to the error message."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "verbose",
              "type": "Param",
              "type_": "bool, optional"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "If actual and desired are not equal up to specified precision."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "",
              "type": "Param",
              "type_": "AssertionError"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Raises an AssertionError if two objects are not equal up to desired tolerance."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [
      {
        "type": "code",
        "value": "x = [1e-5, 1e-3, 1e-1]\ny = np.arccos(np.cos(x))\nnp.testing.assert_allclose(x, y, rtol=1e-5, atol=0)"
      }
    ],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/numpy/testing/_private/utils.py",
  "item_line": 1524,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Raises",
    "See Also",
    "Notes",
    "Examples"
  ],
  "references": null,
  "see_also": [
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "module",
          "module": "numpy",
          "path": "numpy.testing._private.utils:assert_array_almost_equal_nulp",
          "type": "RefInfo",
          "version": "1.24.1"
        },
        "type": "Link",
        "value": "assert_array_almost_equal_nulp"
      },
      "type": null
    },
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "module",
          "module": "numpy",
          "path": "numpy.testing._private.utils:assert_array_max_ulp",
          "type": "RefInfo",
          "version": "1.24.1"
        },
        "type": "Link",
        "value": "assert_array_max_ulp"
      },
      "type": null
    }
  ],
  "signature": {
    "type": "Signature",
    "value": "(actual, desired, rtol=1e-07, atol=0, equal_nan=True, err_msg='', verbose=True)"
  },
  "type": "DocBlob"
}