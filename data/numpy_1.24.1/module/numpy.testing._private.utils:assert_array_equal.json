{
  "aliases": [
    "numpy.testing.assert_array_equal"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Given two array_like objects, check that the shape is equal and all elements of these objects are equal (but see the Notes for the special handling of a scalar). An exception is raised at shape mismatch or conflicting values. In contrast to the standard usage in numpy, NaNs are compared like numbers, no assertion is raised if both objects have NaNs in the same positions."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "The usual caution for verifying equality with floating point numbers is advised."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "When one of "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "x",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "x"
            },
            {
              "type": "text",
              "value": " and "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "y",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "y"
            },
            {
              "type": "text",
              "value": " is a scalar and the other is array_like, the function checks that each element of the array_like object is equal to the scalar. This behaviour can be disabled with the "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "strict",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "strict"
            },
            {
              "type": "text",
              "value": " parameter."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The actual object to check."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "x",
              "type": "Param",
              "type_": "array_like"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The desired, expected object."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "y",
              "type": "Param",
              "type_": "array_like"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The error message to be printed in case of failure."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "err_msg",
              "type": "Param",
              "type_": "str, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "If True, the conflicting values are appended to the error message."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "verbose",
              "type": "Param",
              "type_": "bool, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "If True, raise an AssertionError when either the shape or the data type of the array_like objects does not match. The special handling for scalars mentioned in the Notes section is disabled."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "strict",
              "type": "Param",
              "type_": "bool, optional"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "If actual and desired objects are not equal."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "",
              "type": "Param",
              "type_": "AssertionError"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Raises an AssertionError if two array_like objects are not equal."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [
      {
        "type": "text",
        "value": "The first assert does not raise an exception:"
      },
      {
        "type": "code",
        "value": "np.testing.assert_array_equal([1.0,2.33333,np.nan],\n                              [np.exp(0),2.33333, np.nan])"
      },
      {
        "type": "text",
        "value": "Assert fails with numerical imprecision with floats:"
      },
      {
        "type": "code",
        "value": "np.testing.assert_array_equal([1.0,np.pi,np.nan],\n                              [1, np.sqrt(np.pi)**2, np.nan])"
      },
      {
        "type": "text",
        "value": "Use `assert_allclose` or one of the nulp (number of floating point values)\nfunctions for these cases instead:"
      },
      {
        "type": "code",
        "value": "np.testing.assert_allclose([1.0,np.pi,np.nan],\n                           [1, np.sqrt(np.pi)**2, np.nan],\n                           rtol=1e-10, atol=0)"
      },
      {
        "type": "text",
        "value": "As mentioned in the Notes section, `assert_array_equal` has special\nhandling for scalars. Here the test checks that each value in `x` is 3:"
      },
      {
        "type": "code",
        "value": "x = np.full((2, 5), fill_value=3)\nnp.testing.assert_array_equal(x, 3)"
      },
      {
        "type": "text",
        "value": "Use `strict` to raise an AssertionError when comparing a scalar with an\narray:"
      },
      {
        "type": "code",
        "value": "np.testing.assert_array_equal(x, 3, strict=True)"
      },
      {
        "type": "text",
        "value": "The `strict` parameter also ensures that the array data types match:"
      },
      {
        "type": "code",
        "value": "x = np.array([2, 2, 2])\ny = np.array([2., 2., 2.], dtype=np.float32)\nnp.testing.assert_array_equal(x, y, strict=True)"
      }
    ],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/numpy/testing/_private/utils.py",
  "item_line": 873,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Raises",
    "See Also",
    "Notes",
    "Examples"
  ],
  "references": null,
  "see_also": [
    {
      "descriptions": [
        {
          "children": [
            {
              "type": "text",
              "value": "Compare two array_like objects for equality with desired relative and/or absolute precision."
            }
          ],
          "type": "paragraph"
        }
      ],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "module",
          "module": "numpy",
          "path": "numpy.testing._private.utils:assert_allclose",
          "type": "RefInfo",
          "version": "1.24.1"
        },
        "type": "Link",
        "value": "assert_allclose"
      },
      "type": null
    },
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "module",
          "module": "numpy",
          "path": "numpy.testing._private.utils:assert_array_almost_equal_nulp",
          "type": "RefInfo",
          "version": "1.24.1"
        },
        "type": "Link",
        "value": "assert_array_almost_equal_nulp"
      },
      "type": null
    },
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "module",
          "module": "numpy",
          "path": "numpy.testing._private.utils:assert_array_max_ulp",
          "type": "RefInfo",
          "version": "1.24.1"
        },
        "type": "Link",
        "value": "assert_array_max_ulp"
      },
      "type": null
    },
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "to-resolve",
          "module": "current-module",
          "path": "assert_equal",
          "type": "RefInfo",
          "version": "current-version"
        },
        "type": "Link",
        "value": "assert_equal"
      },
      "type": null
    }
  ],
  "signature": {
    "type": "Signature",
    "value": "(x, y, err_msg='', verbose=True, *, strict=False)"
  },
  "type": "DocBlob"
}