{
  "aliases": [
    "numpy.arange"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [
        {
          "children": [
            {
              "type": "inlineCode",
              "value": "arange"
            },
            {
              "type": "text",
              "value": " can be called with a varying number of positional arguments:"
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "inlineCode",
                      "value": "arange(stop)"
                    },
                    {
                      "type": "text",
                      "value": ": Values are generated within the half-open interval   "
                    },
                    {
                      "type": "inlineCode",
                      "value": "[0, stop)"
                    },
                    {
                      "type": "text",
                      "value": " (in other words, the interval including "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "start",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "start"
                    },
                    {
                      "type": "text",
                      "value": " but   excluding "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "stop",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "stop"
                    },
                    {
                      "type": "text",
                      "value": ")."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "inlineCode",
                      "value": "arange(start, stop)"
                    },
                    {
                      "type": "text",
                      "value": ": Values are generated within the half-open   interval "
                    },
                    {
                      "type": "inlineCode",
                      "value": "[start, stop)"
                    },
                    {
                      "type": "text",
                      "value": "."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "inlineCode",
                      "value": "arange(start, stop, step)"
                    },
                    {
                      "type": "text",
                      "value": " Values are generated within the half-open   interval "
                    },
                    {
                      "type": "inlineCode",
                      "value": "[start, stop)"
                    },
                    {
                      "type": "text",
                      "value": ", with spacing between values given by   "
                    },
                    {
                      "type": "inlineCode",
                      "value": "step"
                    },
                    {
                      "type": "text",
                      "value": "."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            }
          ],
          "ordered": false,
          "spread": false,
          "start": 1,
          "type": "list"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "For integer arguments the function is roughly equivalent to the Python built-in "
            },
            {
              "type": "inlineCode",
              "value": "range"
            },
            {
              "type": "text",
              "value": ", but returns an ndarray rather than a "
            },
            {
              "type": "inlineCode",
              "value": "range"
            },
            {
              "type": "text",
              "value": " instance."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "When using a non-integer step, such as 0.1, it is often better to use "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "module",
              "reference": {
                "kind": "api",
                "module": "numpy",
                "path": "numpy:linspace",
                "type": "RefInfo",
                "version": "*"
              },
              "type": "Link",
              "value": "numpy.linspace"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "See the Warning sections below for more information."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Start of interval.  The interval includes this value.  The default start value is 0."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "start",
              "type": "Param",
              "type_": "integer or real, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "End of interval.  The interval does not include this value, except in some cases where "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "step",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "step"
                    },
                    {
                      "type": "text",
                      "value": " is not an integer and floating point round-off affects the length of "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "out"
                    },
                    {
                      "type": "text",
                      "value": "."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "stop",
              "type": "Param",
              "type_": "integer or real"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Spacing between values.  For any output "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "out"
                    },
                    {
                      "type": "text",
                      "value": ", this is the distance between two adjacent values, "
                    },
                    {
                      "type": "inlineCode",
                      "value": "out[i+1] - out[i]"
                    },
                    {
                      "type": "text",
                      "value": ".  The default step size is 1.  If "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "step",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "step"
                    },
                    {
                      "type": "text",
                      "value": " is specified as a position argument, "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "start",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "start"
                    },
                    {
                      "type": "text",
                      "value": " must also be given."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "step",
              "type": "Param",
              "type_": "integer or real, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The type of the output array.  If "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "dtype",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "dtype"
                    },
                    {
                      "type": "text",
                      "value": " is not given, infer the data type from the other input arguments."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "dtype",
              "type": "Param",
              "type_": "dtype, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Reference object to allow the creation of arrays which are not NumPy arrays. If an array-like passed in as "
                    },
                    {
                      "type": "inlineCode",
                      "value": "like"
                    },
                    {
                      "type": "text",
                      "value": " supports the "
                    },
                    {
                      "type": "inlineCode",
                      "value": "__array_function__"
                    },
                    {
                      "type": "text",
                      "value": " protocol, the result will be defined by it. In this case, it ensures the creation of an array object compatible with that passed in via this argument."
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "versionadded 1.20.0"
                        }
                      ],
                      "type": "admonitionTitle"
                    }
                  ],
                  "kind": "note",
                  "type": "admonition"
                }
              ],
              "param": "like",
              "type": "Param",
              "type_": "array_like, optional"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Array of evenly spaced values."
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "For floating point arguments, the length of the result is "
                    },
                    {
                      "type": "inlineCode",
                      "value": "ceil((stop - start)/step)"
                    },
                    {
                      "type": "text",
                      "value": ".  Because of floating point overflow, this rule may result in the last element of "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "out"
                    },
                    {
                      "type": "text",
                      "value": " being greater than "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "stop",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "stop"
                    },
                    {
                      "type": "text",
                      "value": "."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "arange",
              "type": "Param",
              "type_": "ndarray"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Return evenly spaced values within a given interval."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "The length of the output might not be numerically stable."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Another stability issue is due to the internal implementation of "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "numpy.arange"
            },
            {
              "type": "text",
              "value": ". The actual step value used to populate the array is "
            },
            {
              "type": "inlineCode",
              "value": "dtype(start + step) - dtype(start)"
            },
            {
              "type": "text",
              "value": " and not "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "step"
            },
            {
              "type": "text",
              "value": ". Precision loss can occur here, due to casting or due to using floating points when "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "start"
            },
            {
              "type": "text",
              "value": " is much larger than "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "step"
            },
            {
              "type": "text",
              "value": ". This can lead to unexpected behaviour. For example    "
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": ">>> np.arange(0, 5, 0.5, dtype=int)\narray([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n>>> np.arange(-3, 3, 0.5, dtype=int)\narray([-3, -2, -1,  0,  1,  2,  3,  4,  5,  6,  7,  8])"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "In such cases, the use of "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "numpy.linspace"
            },
            {
              "type": "text",
              "value": " should be preferred."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "The built-in "
            },
            {
              "domain": "py",
              "role": "class",
              "type": "Directive",
              "value": "range"
            },
            {
              "type": "text",
              "value": " generates "
            },
            {
              "domain": "std",
              "role": "doc",
              "type": "Directive",
              "value": "Python built-in integers\nthat have arbitrary size <python:c-api/long>"
            },
            {
              "type": "text",
              "value": ", while "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "numpy.arange"
            },
            {
              "type": "text",
              "value": " produces "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "numpy.int32"
            },
            {
              "type": "text",
              "value": " or "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "numpy.int64"
            },
            {
              "type": "text",
              "value": " numbers. This may result in incorrect results for large integer values    "
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": ">>> power = 40\n>>> modulo = 10000\n>>> x1 = [(n ** power) % modulo for n in range(8)]\n>>> x2 = [(n ** power) % modulo for n in np.arange(8)]\n>>> print(x1)\n[0, 1, 7776, 8801, 6176, 625, 6576, 4001]  # correct\n>>> print(x2)\n[0, 1, 7776, 7185, 0, 5969, 4816, 3361]  # incorrect"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [
      {
        "type": "code",
        "value": "np.arange(3)"
      },
      {
        "type": "code",
        "value": "np.arange(3.0)"
      },
      {
        "type": "code",
        "value": "np.arange(3,7)"
      },
      {
        "type": "code",
        "value": "np.arange(3,7,2)"
      }
    ],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": null,
  "item_line": null,
  "item_type": "<class 'builtin_function_or_method'>",
  "ordered_sections": [
    "Signature",
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns",
    "Warnings",
    "See Also",
    "Examples"
  ],
  "references": null,
  "see_also": [
    {
      "descriptions": [
        {
          "children": [
            {
              "type": "text",
              "value": "Evenly spaced numbers with careful handling of endpoints."
            }
          ],
          "type": "paragraph"
        }
      ],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "module",
          "module": "numpy",
          "path": "numpy:linspace",
          "type": "RefInfo",
          "version": "1.24.1"
        },
        "type": "Link",
        "value": "numpy.linspace"
      },
      "type": null
    },
    {
      "descriptions": [
        {
          "children": [
            {
              "type": "text",
              "value": "Arrays of evenly spaced numbers in N-dimensions."
            }
          ],
          "type": "paragraph"
        }
      ],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "to-resolve",
          "module": "current-module",
          "path": "numpy.ogrid",
          "type": "RefInfo",
          "version": "current-version"
        },
        "type": "Link",
        "value": "numpy.ogrid"
      },
      "type": null
    },
    {
      "descriptions": [
        {
          "children": [
            {
              "type": "text",
              "value": "Grid-shaped arrays of evenly spaced numbers in N-dimensions."
            }
          ],
          "type": "paragraph"
        }
      ],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "to-resolve",
          "module": "current-module",
          "path": "numpy.mgrid",
          "type": "RefInfo",
          "version": "current-version"
        },
        "type": "Link",
        "value": "numpy.mgrid"
      },
      "type": null
    },
    {
      "descriptions": [
        {
          "children": [
            {
              "type": "text",
              "value": "ref"
            }
          ],
          "type": "paragraph"
        }
      ],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "to-resolve",
          "module": "current-module",
          "path": "how-to-partition",
          "type": "RefInfo",
          "version": "current-version"
        },
        "type": "Link",
        "value": "how-to-partition"
      },
      "type": null
    }
  ],
  "signature": {
    "type": "Signature",
    "value": "arange([start,] stop[, step,], dtype=None, *, like=None)"
  },
  "type": "DocBlob"
}