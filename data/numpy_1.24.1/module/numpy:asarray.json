{
  "aliases": [
    "numpy.asarray"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Input data, in any form that can be converted to an array.  This includes lists, lists of tuples, tuples, tuples of tuples, tuples of lists and ndarrays."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "a",
              "type": "Param",
              "type_": "array_like"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "By default, the data-type is inferred from the input data."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "dtype",
              "type": "Param",
              "type_": "data-type, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Memory layout.  'A' and 'K' depend on the order of input array a. 'C' row-major (C-style), 'F' column-major (Fortran-style) memory representation. 'A' (any) means 'F' if "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "a",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "a"
                    },
                    {
                      "type": "text",
                      "value": " is Fortran contiguous, 'C' otherwise 'K' (keep) preserve input order Defaults to 'K'."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "order",
              "type": "Param",
              "type_": "{'C', 'F', 'A', 'K'}, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Reference object to allow the creation of arrays which are not NumPy arrays. If an array-like passed in as "
                    },
                    {
                      "type": "inlineCode",
                      "value": "like"
                    },
                    {
                      "type": "text",
                      "value": " supports the "
                    },
                    {
                      "type": "inlineCode",
                      "value": "__array_function__"
                    },
                    {
                      "type": "text",
                      "value": " protocol, the result will be defined by it. In this case, it ensures the creation of an array object compatible with that passed in via this argument."
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "versionadded 1.20.0"
                        }
                      ],
                      "type": "admonitionTitle"
                    }
                  ],
                  "kind": "note",
                  "type": "admonition"
                }
              ],
              "param": "like",
              "type": "Param",
              "type_": "array_like, optional"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Array interpretation of "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "a",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "a"
                    },
                    {
                      "type": "text",
                      "value": ".  No copy is performed if the input is already an ndarray with matching dtype and order.  If "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "a",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "a"
                    },
                    {
                      "type": "text",
                      "value": " is a subclass of ndarray, a base class ndarray is returned."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "out",
              "type": "Param",
              "type_": "ndarray"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Convert the input to an array."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [
      {
        "type": "text",
        "value": "Convert a list into an array:"
      },
      {
        "type": "code",
        "value": "a = [1, 2]\nnp.asarray(a)"
      },
      {
        "type": "text",
        "value": "Existing arrays are not copied:"
      },
      {
        "type": "code",
        "value": "a = np.array([1, 2])\nnp.asarray(a) is a"
      },
      {
        "type": "text",
        "value": "If `dtype` is set, array is copied only if dtype does not match:"
      },
      {
        "type": "code",
        "value": "a = np.array([1, 2], dtype=np.float32)\nnp.asarray(a, dtype=np.float32) is a"
      },
      {
        "type": "code",
        "value": "np.asarray(a, dtype=np.float64) is a"
      },
      {
        "type": "text",
        "value": "Contrary to `asanyarray`, ndarray subclasses are not passed through:"
      },
      {
        "type": "code",
        "value": "issubclass(np.recarray, np.ndarray)"
      },
      {
        "type": "code",
        "value": "a = np.array([(1.0, 2), (3.0, 4)], dtype='f4,i4').view(np.recarray)\nnp.asarray(a) is a"
      },
      {
        "type": "code",
        "value": "np.asanyarray(a) is a"
      }
    ],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": null,
  "item_line": null,
  "item_type": "<class 'builtin_function_or_method'>",
  "ordered_sections": [
    "Signature",
    "Summary",
    "Parameters",
    "Returns",
    "See Also",
    "Examples"
  ],
  "references": null,
  "see_also": [
    {
      "descriptions": [
        {
          "children": [
            {
              "type": "text",
              "value": "Similar function which passes through subclasses."
            }
          ],
          "type": "paragraph"
        }
      ],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "to-resolve",
          "module": "current-module",
          "path": "asanyarray",
          "type": "RefInfo",
          "version": "current-version"
        },
        "type": "Link",
        "value": "asanyarray"
      },
      "type": null
    },
    {
      "descriptions": [
        {
          "children": [
            {
              "type": "text",
              "value": "Convert input to a contiguous array."
            }
          ],
          "type": "paragraph"
        }
      ],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "to-resolve",
          "module": "current-module",
          "path": "ascontiguousarray",
          "type": "RefInfo",
          "version": "current-version"
        },
        "type": "Link",
        "value": "ascontiguousarray"
      },
      "type": null
    },
    {
      "descriptions": [
        {
          "children": [
            {
              "type": "text",
              "value": "Convert input to a floating point ndarray."
            }
          ],
          "type": "paragraph"
        }
      ],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "to-resolve",
          "module": "current-module",
          "path": "asfarray",
          "type": "RefInfo",
          "version": "current-version"
        },
        "type": "Link",
        "value": "asfarray"
      },
      "type": null
    },
    {
      "descriptions": [
        {
          "children": [
            {
              "type": "text",
              "value": "Convert input to an ndarray with column-major memory order."
            }
          ],
          "type": "paragraph"
        }
      ],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "to-resolve",
          "module": "current-module",
          "path": "asfortranarray",
          "type": "RefInfo",
          "version": "current-version"
        },
        "type": "Link",
        "value": "asfortranarray"
      },
      "type": null
    },
    {
      "descriptions": [
        {
          "children": [
            {
              "type": "text",
              "value": "Similar function which checks input for NaNs and Infs."
            }
          ],
          "type": "paragraph"
        }
      ],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "module",
          "module": "numpy",
          "path": "numpy:asarray_chkfinite",
          "type": "RefInfo",
          "version": "1.24.1"
        },
        "type": "Link",
        "value": "asarray_chkfinite"
      },
      "type": null
    },
    {
      "descriptions": [
        {
          "children": [
            {
              "type": "text",
              "value": "Create an array from an iterator."
            }
          ],
          "type": "paragraph"
        }
      ],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "to-resolve",
          "module": "current-module",
          "path": "fromiter",
          "type": "RefInfo",
          "version": "current-version"
        },
        "type": "Link",
        "value": "fromiter"
      },
      "type": null
    },
    {
      "descriptions": [
        {
          "children": [
            {
              "type": "text",
              "value": "Construct an array by executing a function on grid positions."
            }
          ],
          "type": "paragraph"
        }
      ],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "to-resolve",
          "module": "current-module",
          "path": "fromfunction",
          "type": "RefInfo",
          "version": "current-version"
        },
        "type": "Link",
        "value": "fromfunction"
      },
      "type": null
    }
  ],
  "signature": {
    "type": "Signature",
    "value": "asarray(a, dtype=None, order=None, *, like=None)"
  },
  "type": "DocBlob"
}