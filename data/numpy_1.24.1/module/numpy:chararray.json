{
  "aliases": [
    "numpy.chararray"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [
        {
          "children": [
            {
              "children": [
                {
                  "type": "text",
                  "value": "note "
                }
              ],
              "type": "admonitionTitle"
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "The "
                },
                {
                  "domain": null,
                  "role": null,
                  "type": "Directive",
                  "value": "chararray"
                },
                {
                  "type": "text",
                  "value": " class exists for backwards compatibility with Numarray, it is not recommended for new development. Starting from numpy 1.4, if one needs arrays of strings, it is recommended to use arrays of "
                },
                {
                  "domain": null,
                  "role": null,
                  "type": "Directive",
                  "value": "dtype"
                },
                {
                  "type": "text",
                  "value": " "
                },
                {
                  "domain": null,
                  "role": null,
                  "type": "Directive",
                  "value": "object_"
                },
                {
                  "type": "text",
                  "value": ", "
                },
                {
                  "domain": null,
                  "role": null,
                  "type": "Directive",
                  "value": "string_"
                },
                {
                  "type": "text",
                  "value": " or "
                },
                {
                  "domain": null,
                  "role": null,
                  "type": "Directive",
                  "value": "unicode_"
                },
                {
                  "type": "text",
                  "value": ", and use the free functions in the "
                },
                {
                  "domain": null,
                  "role": null,
                  "type": "Directive",
                  "value": "numpy.char"
                },
                {
                  "type": "text",
                  "value": " module for fast vectorized string operations."
                }
              ],
              "type": "paragraph"
            }
          ],
          "kind": "note",
          "type": "admonition"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Versus a regular NumPy array of type "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "str"
            },
            {
              "type": "text",
              "value": " or "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "unicode",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "unicode"
            },
            {
              "type": "text",
              "value": ", this class adds the following functionality:"
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "children": [
                {
                  "children": [
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "values automatically have whitespace removed from the end      when indexed"
                        }
                      ],
                      "type": "paragraph"
                    }
                  ],
                  "spread": false,
                  "type": "listItem"
                },
                {
                  "children": [
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "comparison operators automatically remove whitespace from the      end when comparing values"
                        }
                      ],
                      "type": "paragraph"
                    }
                  ],
                  "spread": false,
                  "type": "listItem"
                },
                {
                  "children": [
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "vectorized string operations are provided as methods      (e.g. "
                        },
                        {
                          "domain": null,
                          "role": null,
                          "type": "Directive",
                          "value": ".endswith"
                        },
                        {
                          "type": "text",
                          "value": ") and infix operators (e.g. "
                        },
                        {
                          "type": "inlineCode",
                          "value": "\"+\", \"*\", \"%\""
                        },
                        {
                          "type": "text",
                          "value": ")"
                        }
                      ],
                      "type": "paragraph"
                    }
                  ],
                  "spread": false,
                  "type": "listItem"
                }
              ],
              "ordered": true,
              "spread": false,
              "start": 1,
              "type": "list"
            }
          ],
          "type": "blockquote"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "chararrays should be created using "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "module",
              "reference": {
                "kind": "api",
                "module": "numpy.char",
                "path": "numpy.char:array",
                "type": "RefInfo",
                "version": "*"
              },
              "type": "Link",
              "value": "numpy.char.array"
            },
            {
              "type": "text",
              "value": " or "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "module",
              "reference": {
                "kind": "api",
                "module": "numpy.char",
                "path": "numpy.char:asarray",
                "type": "RefInfo",
                "version": "*"
              },
              "type": "Link",
              "value": "numpy.char.asarray"
            },
            {
              "type": "text",
              "value": ", rather than this constructor directly."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "This constructor creates the array, using "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "buffer",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "buffer"
            },
            {
              "type": "text",
              "value": " (with "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "offset",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "offset"
            },
            {
              "type": "text",
              "value": " and "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "strides",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "strides"
            },
            {
              "type": "text",
              "value": ") if it is not "
            },
            {
              "type": "inlineCode",
              "value": "None"
            },
            {
              "type": "text",
              "value": ". If "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "buffer",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "buffer"
            },
            {
              "type": "text",
              "value": " is "
            },
            {
              "type": "inlineCode",
              "value": "None"
            },
            {
              "type": "text",
              "value": ", then constructs a new array with "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "strides",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "strides"
            },
            {
              "type": "text",
              "value": " in \"C order\", unless both "
            },
            {
              "type": "inlineCode",
              "value": "len(shape) >= 2"
            },
            {
              "type": "text",
              "value": " and "
            },
            {
              "type": "inlineCode",
              "value": "order='F'"
            },
            {
              "type": "text",
              "value": ", in which case "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "strides",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "strides"
            },
            {
              "type": "text",
              "value": " is in \"Fortran order\"."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [
        {
          "children": [
            {
              "desc": [],
              "param": "astype",
              "type": "Param",
              "type_": ""
            },
            {
              "desc": [],
              "param": "argsort",
              "type": "Param",
              "type_": ""
            },
            {
              "desc": [],
              "param": "copy",
              "type": "Param",
              "type_": ""
            },
            {
              "desc": [],
              "param": "count",
              "type": "Param",
              "type_": ""
            },
            {
              "desc": [],
              "param": "decode",
              "type": "Param",
              "type_": ""
            },
            {
              "desc": [],
              "param": "dump",
              "type": "Param",
              "type_": ""
            },
            {
              "desc": [],
              "param": "dumps",
              "type": "Param",
              "type_": ""
            },
            {
              "desc": [],
              "param": "encode",
              "type": "Param",
              "type_": ""
            },
            {
              "desc": [],
              "param": "endswith",
              "type": "Param",
              "type_": ""
            },
            {
              "desc": [],
              "param": "expandtabs",
              "type": "Param",
              "type_": ""
            },
            {
              "desc": [],
              "param": "fill",
              "type": "Param",
              "type_": ""
            },
            {
              "desc": [],
              "param": "find",
              "type": "Param",
              "type_": ""
            },
            {
              "desc": [],
              "param": "flatten",
              "type": "Param",
              "type_": ""
            },
            {
              "desc": [],
              "param": "getfield",
              "type": "Param",
              "type_": ""
            },
            {
              "desc": [],
              "param": "index",
              "type": "Param",
              "type_": ""
            },
            {
              "desc": [],
              "param": "isalnum",
              "type": "Param",
              "type_": ""
            },
            {
              "desc": [],
              "param": "isalpha",
              "type": "Param",
              "type_": ""
            },
            {
              "desc": [],
              "param": "isdecimal",
              "type": "Param",
              "type_": ""
            },
            {
              "desc": [],
              "param": "isdigit",
              "type": "Param",
              "type_": ""
            },
            {
              "desc": [],
              "param": "islower",
              "type": "Param",
              "type_": ""
            },
            {
              "desc": [],
              "param": "isnumeric",
              "type": "Param",
              "type_": ""
            },
            {
              "desc": [],
              "param": "isspace",
              "type": "Param",
              "type_": ""
            },
            {
              "desc": [],
              "param": "istitle",
              "type": "Param",
              "type_": ""
            },
            {
              "desc": [],
              "param": "isupper",
              "type": "Param",
              "type_": ""
            },
            {
              "desc": [],
              "param": "item",
              "type": "Param",
              "type_": ""
            },
            {
              "desc": [],
              "param": "join",
              "type": "Param",
              "type_": ""
            },
            {
              "desc": [],
              "param": "ljust",
              "type": "Param",
              "type_": ""
            },
            {
              "desc": [],
              "param": "lower",
              "type": "Param",
              "type_": ""
            },
            {
              "desc": [],
              "param": "lstrip",
              "type": "Param",
              "type_": ""
            },
            {
              "desc": [],
              "param": "nonzero",
              "type": "Param",
              "type_": ""
            },
            {
              "desc": [],
              "param": "put",
              "type": "Param",
              "type_": ""
            },
            {
              "desc": [],
              "param": "ravel",
              "type": "Param",
              "type_": ""
            },
            {
              "desc": [],
              "param": "repeat",
              "type": "Param",
              "type_": ""
            },
            {
              "desc": [],
              "param": "replace",
              "type": "Param",
              "type_": ""
            },
            {
              "desc": [],
              "param": "reshape",
              "type": "Param",
              "type_": ""
            },
            {
              "desc": [],
              "param": "resize",
              "type": "Param",
              "type_": ""
            },
            {
              "desc": [],
              "param": "rfind",
              "type": "Param",
              "type_": ""
            },
            {
              "desc": [],
              "param": "rindex",
              "type": "Param",
              "type_": ""
            },
            {
              "desc": [],
              "param": "rjust",
              "type": "Param",
              "type_": ""
            },
            {
              "desc": [],
              "param": "rsplit",
              "type": "Param",
              "type_": ""
            },
            {
              "desc": [],
              "param": "rstrip",
              "type": "Param",
              "type_": ""
            },
            {
              "desc": [],
              "param": "searchsorted",
              "type": "Param",
              "type_": ""
            },
            {
              "desc": [],
              "param": "setfield",
              "type": "Param",
              "type_": ""
            },
            {
              "desc": [],
              "param": "setflags",
              "type": "Param",
              "type_": ""
            },
            {
              "desc": [],
              "param": "sort",
              "type": "Param",
              "type_": ""
            },
            {
              "desc": [],
              "param": "split",
              "type": "Param",
              "type_": ""
            },
            {
              "desc": [],
              "param": "splitlines",
              "type": "Param",
              "type_": ""
            },
            {
              "desc": [],
              "param": "squeeze",
              "type": "Param",
              "type_": ""
            },
            {
              "desc": [],
              "param": "startswith",
              "type": "Param",
              "type_": ""
            },
            {
              "desc": [],
              "param": "strip",
              "type": "Param",
              "type_": ""
            },
            {
              "desc": [],
              "param": "swapaxes",
              "type": "Param",
              "type_": ""
            },
            {
              "desc": [],
              "param": "swapcase",
              "type": "Param",
              "type_": ""
            },
            {
              "desc": [],
              "param": "take",
              "type": "Param",
              "type_": ""
            },
            {
              "desc": [],
              "param": "title",
              "type": "Param",
              "type_": ""
            },
            {
              "desc": [],
              "param": "tofile",
              "type": "Param",
              "type_": ""
            },
            {
              "desc": [],
              "param": "tolist",
              "type": "Param",
              "type_": ""
            },
            {
              "desc": [],
              "param": "tostring",
              "type": "Param",
              "type_": ""
            },
            {
              "desc": [],
              "param": "translate",
              "type": "Param",
              "type_": ""
            },
            {
              "desc": [],
              "param": "transpose",
              "type": "Param",
              "type_": ""
            },
            {
              "desc": [],
              "param": "upper",
              "type": "Param",
              "type_": ""
            },
            {
              "desc": [],
              "param": "view",
              "type": "Param",
              "type_": ""
            },
            {
              "desc": [],
              "param": "zfill",
              "type": "Param",
              "type_": ""
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Shape of the array."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "shape",
              "type": "Param",
              "type_": "tuple"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Length of each array element, in number of characters. Default is 1."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "itemsize",
              "type": "Param",
              "type_": "int, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Are the array elements of type unicode (True) or string (False). Default is False."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "unicode",
              "type": "Param",
              "type_": "bool, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Memory address of the start of the array data.  Default is None, in which case a new array is created."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "buffer",
              "type": "Param",
              "type_": "object exposing the buffer interface or str, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Fixed stride displacement from the beginning of an axis? Default is 0. Needs to be >=0."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "offset",
              "type": "Param",
              "type_": "int, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Strides for the array (see "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "ndarray.strides"
                    },
                    {
                      "type": "text",
                      "value": " for full description). Default is None."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "strides",
              "type": "Param",
              "type_": "array_like of ints, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The order in which the array data is stored in memory: 'C' -> \"row major\" order (the default), 'F' -> \"column major\" (Fortran) order."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "order",
              "type": "Param",
              "type_": "{'C', 'F'}, optional"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Provides a convenient view on arrays of string and unicode values."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [
      {
        "type": "code",
        "value": "charar = np.chararray((3, 3))\ncharar[:] = 'a'\ncharar"
      },
      {
        "type": "code",
        "value": "charar = np.chararray(charar.shape, itemsize=5)\ncharar[:] = 'abc'\ncharar"
      }
    ],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/numpy/__init__.py",
  "item_line": null,
  "item_type": "<class 'type'>",
  "ordered_sections": [
    "Signature",
    "Summary",
    "Extended Summary",
    "Methods",
    "Parameters",
    "Examples"
  ],
  "references": null,
  "see_also": [],
  "signature": {
    "type": "Signature",
    "value": "chararray(shape, itemsize=1, unicode=False, buffer=None, offset=0, strides=None, order=None)"
  },
  "type": "DocBlob"
}