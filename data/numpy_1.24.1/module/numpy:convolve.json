{
  "aliases": [
    "numpy.convolve"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "The convolution operator is often seen in signal processing, where it models the effect of a linear time-invariant system on a signal .  In probability theory, the sum of two independent random variables is distributed according to the convolution of their individual distributions."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "If "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "v",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "v"
            },
            {
              "type": "text",
              "value": " is longer than "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "a",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "a"
            },
            {
              "type": "text",
              "value": ", the arrays are swapped before computation."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "The discrete convolution operation is defined as"
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "math",
          "value": "(a * v)_n = \\sum_{m = -\\infty}^{\\infty} a_m v_{n - m}"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "It can be shown that a convolution "
            },
            {
              "type": "inlineMath",
              "value": "x(t) * y(t)"
            },
            {
              "type": "text",
              "value": " in time/space is equivalent to the multiplication "
            },
            {
              "type": "inlineMath",
              "value": "X(f) Y(f)"
            },
            {
              "type": "text",
              "value": " in the Fourier domain, after appropriate padding (padding is necessary to prevent circular convolution).  Since multiplication is more efficient (faster) than convolution, the function "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "module",
              "reference": {
                "kind": "api",
                "module": "scipy.signal._signaltools",
                "path": "scipy.signal._signaltools:fftconvolve",
                "type": "RefInfo",
                "version": "*"
              },
              "type": "Link",
              "value": "scipy.signal.fftconvolve"
            },
            {
              "type": "text",
              "value": " exploits the FFT to calculate the convolution of large data-sets."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "First one-dimensional input array."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "a",
              "type": "Param",
              "type_": "(N,) array_like"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Second one-dimensional input array."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "v",
              "type": "Param",
              "type_": "(M,) array_like"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "dd": [
                        {
                          "children": [
                            {
                              "type": "text",
                              "value": "By default, mode is 'full'.  This returns the convolution   at each point of overlap, with an output shape of (N+M-1,). At   the end-points of the convolution, the signals do not overlap   completely, and boundary effects may be seen."
                            }
                          ],
                          "type": "paragraph"
                        }
                      ],
                      "dt": {
                        "children": [
                          {
                            "type": "text",
                            "value": "'full':"
                          }
                        ],
                        "type": "paragraph"
                      },
                      "type": "DefListItem"
                    },
                    {
                      "dd": [
                        {
                          "children": [
                            {
                              "type": "text",
                              "value": "Mode 'same' returns output of length "
                            },
                            {
                              "type": "inlineCode",
                              "value": "max(M, N)"
                            },
                            {
                              "type": "text",
                              "value": ".  Boundary   effects are still visible."
                            }
                          ],
                          "type": "paragraph"
                        }
                      ],
                      "dt": {
                        "children": [
                          {
                            "type": "text",
                            "value": "'same':"
                          }
                        ],
                        "type": "paragraph"
                      },
                      "type": "DefListItem"
                    },
                    {
                      "dd": [
                        {
                          "children": [
                            {
                              "type": "text",
                              "value": "Mode 'valid' returns output of length   "
                            },
                            {
                              "type": "inlineCode",
                              "value": "max(M, N) - min(M, N) + 1"
                            },
                            {
                              "type": "text",
                              "value": ".  The convolution product is only given   for points where the signals overlap completely.  Values outside   the signal boundary have no effect."
                            }
                          ],
                          "type": "paragraph"
                        }
                      ],
                      "dt": {
                        "children": [
                          {
                            "type": "text",
                            "value": "'valid':"
                          }
                        ],
                        "type": "paragraph"
                      },
                      "type": "DefListItem"
                    }
                  ],
                  "type": "DefList"
                }
              ],
              "param": "mode",
              "type": "Param",
              "type_": "{'full', 'valid', 'same'}, optional"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Discrete, linear convolution of "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "a",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "a"
                    },
                    {
                      "type": "text",
                      "value": " and "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "v",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "v"
                    },
                    {
                      "type": "text",
                      "value": "."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "out",
              "type": "Param",
              "type_": "ndarray"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Returns the discrete, linear convolution of two one-dimensional sequences."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [
      {
        "type": "text",
        "value": "Note how the convolution operator flips the second array\nbefore \"sliding\" the two across one another:"
      },
      {
        "type": "code",
        "value": "np.convolve([1, 2, 3], [0, 1, 0.5])"
      },
      {
        "type": "text",
        "value": "Only return the middle values of the convolution.\nContains boundary effects, where zeros are taken\ninto account:"
      },
      {
        "type": "code",
        "value": "np.convolve([1,2,3],[0,1,0.5], 'same')"
      },
      {
        "type": "text",
        "value": "The two arrays are of the same length, so there\nis only one position where they completely overlap:"
      },
      {
        "type": "code",
        "value": "np.convolve([1,2,3],[0,1,0.5], 'valid')"
      }
    ],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/numpy/core/numeric.py",
  "item_line": 755,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns",
    "See Also",
    "Notes",
    "References",
    "Examples"
  ],
  "references": null,
  "see_also": [
    {
      "descriptions": [
        {
          "children": [
            {
              "type": "text",
              "value": "Convolve two arrays using the Fast Fourier Transform."
            }
          ],
          "type": "paragraph"
        }
      ],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "to-resolve",
          "module": "current-module",
          "path": "scipy.signal.fftconvolve",
          "type": "RefInfo",
          "version": "current-version"
        },
        "type": "Link",
        "value": "scipy.signal.fftconvolve"
      },
      "type": null
    },
    {
      "descriptions": [
        {
          "children": [
            {
              "type": "text",
              "value": "Used to construct the convolution operator."
            }
          ],
          "type": "paragraph"
        }
      ],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "to-resolve",
          "module": "current-module",
          "path": "scipy.linalg.toeplitz",
          "type": "RefInfo",
          "version": "current-version"
        },
        "type": "Link",
        "value": "scipy.linalg.toeplitz"
      },
      "type": null
    },
    {
      "descriptions": [
        {
          "children": [
            {
              "type": "text",
              "value": "Polynomial multiplication. Same output as convolve, but also accepts poly1d objects as input."
            }
          ],
          "type": "paragraph"
        }
      ],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "to-resolve",
          "module": "current-module",
          "path": "polymul",
          "type": "RefInfo",
          "version": "current-version"
        },
        "type": "Link",
        "value": "polymul"
      },
      "type": null
    }
  ],
  "signature": {
    "type": "Signature",
    "value": "(a, v, mode='full')"
  },
  "type": "DocBlob"
}