{
  "aliases": [
    "numpy.dtype",
    "numpy._typing._DType",
    "numpy.core._add_newdocs_scalars.dtype",
    "numpy._typing._dtype_like.DType"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "A numpy array is homogeneous, and contains elements described by a dtype object. A dtype object can be constructed from different combinations of fundamental numeric types."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Object to be converted to a data type object."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "dtype",
              "type": "Param",
              "type_": ""
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Add padding to the fields to match what a C compiler would output for a similar C-struct. Can be "
                    },
                    {
                      "type": "inlineCode",
                      "value": "True"
                    },
                    {
                      "type": "text",
                      "value": " only if "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "obj"
                    },
                    {
                      "type": "text",
                      "value": " is a dictionary or a comma-separated string. If a struct dtype is being created, this also sets a sticky alignment flag "
                    },
                    {
                      "type": "inlineCode",
                      "value": "isalignedstruct"
                    },
                    {
                      "type": "text",
                      "value": "."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "align",
              "type": "Param",
              "type_": "bool, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Make a new copy of the data-type object. If "
                    },
                    {
                      "type": "inlineCode",
                      "value": "False"
                    },
                    {
                      "type": "text",
                      "value": ", the result may just be a reference to a built-in data-type object."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "copy",
              "type": "Param",
              "type_": "bool, optional"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Create a data type object."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [
      {
        "type": "text",
        "value": "Using array-scalar type:"
      },
      {
        "type": "code",
        "value": "np.dtype(np.int16)"
      },
      {
        "type": "text",
        "value": "Structured type, one field name 'f1', containing int16:"
      },
      {
        "type": "code",
        "value": "np.dtype([('f1', np.int16)])"
      },
      {
        "type": "text",
        "value": "Structured type, one field named 'f1', in itself containing a structured\ntype with one field:"
      },
      {
        "type": "code",
        "value": "np.dtype([('f1', [('f1', np.int16)])])"
      },
      {
        "type": "text",
        "value": "Structured type, two fields: the first field contains an unsigned int, the\nsecond an int32:"
      },
      {
        "type": "code",
        "value": "np.dtype([('f1', np.uint64), ('f2', np.int32)])"
      },
      {
        "type": "text",
        "value": "Using array-protocol type strings:"
      },
      {
        "type": "code",
        "value": "np.dtype([('a','f8'),('b','S10')])"
      },
      {
        "type": "text",
        "value": "Using comma-separated field formats.  The shape is (2,3):"
      },
      {
        "type": "code",
        "value": "np.dtype(\"i4, (2,3)f8\")"
      },
      {
        "type": "text",
        "value": "Using tuples.  ``int`` is a fixed type, 3 the field's shape.  ``void``\nis a flexible type, here of size 10:"
      },
      {
        "type": "code",
        "value": "np.dtype([('hello',(np.int64,3)),('world',np.void,10)])"
      },
      {
        "type": "text",
        "value": "Subdivide ``int16`` into 2 ``int8``'s, called x and y.  0 and 1 are\nthe offsets in bytes:"
      },
      {
        "type": "code",
        "value": "np.dtype((np.int16, {'x':(np.int8,0), 'y':(np.int8,1)}))"
      },
      {
        "type": "text",
        "value": "Using dictionaries.  Two fields named 'gender' and 'age':"
      },
      {
        "type": "code",
        "value": "np.dtype({'names':['gender','age'], 'formats':['S1',np.uint8]})"
      },
      {
        "type": "text",
        "value": "Offsets in bytes, here 0 and 25:"
      },
      {
        "type": "code",
        "value": "np.dtype({'surname':('S25',0),'age':(np.uint8,25)})"
      }
    ],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/miniforge3/envs/arm64/lib/python3.11/types.py",
  "item_line": null,
  "item_type": "<class 'types.GenericAlias'>",
  "ordered_sections": [
    "Signature",
    "Summary",
    "Extended Summary",
    "Parameters",
    "See Also",
    "Examples"
  ],
  "references": null,
  "see_also": [
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "to-resolve",
          "module": "current-module",
          "path": "result_type",
          "type": "RefInfo",
          "version": "current-version"
        },
        "type": "Link",
        "value": "result_type"
      },
      "type": null
    }
  ],
  "signature": {
    "type": "Signature",
    "value": "dtype(dtype, align=False, copy=False)"
  },
  "type": "DocBlob"
}