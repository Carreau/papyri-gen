{
  "aliases": [
    "numpy.errstate"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Using an instance of "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "module",
              "reference": {
                "kind": "module",
                "module": "numpy",
                "path": "numpy:errstate",
                "type": "RefInfo",
                "version": "1.24.1"
              },
              "type": "Link",
              "value": "errstate"
            },
            {
              "type": "text",
              "value": " as a context manager allows statements in that context to execute with a known error handling behavior. Upon entering the context the error handling is set with "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "seterr"
            },
            {
              "type": "text",
              "value": " and "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "seterrcall"
            },
            {
              "type": "text",
              "value": ", and upon exiting it is reset to what it was before."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "children": [
                {
                  "type": "text",
                  "value": "versionchanged 1.17.0"
                }
              ],
              "type": "admonitionTitle"
            },
            {
              "children": [
                {
                  "domain": null,
                  "role": null,
                  "type": "Directive",
                  "value": "errstate"
                },
                {
                  "type": "text",
                  "value": " is also usable as a function decorator, saving a level of indentation if an entire function is wrapped. See "
                },
                {
                  "domain": "py",
                  "role": "class",
                  "type": "Directive",
                  "value": "contextlib.ContextDecorator"
                },
                {
                  "type": "text",
                  "value": " for more information."
                }
              ],
              "type": "paragraph"
            }
          ],
          "kind": "note",
          "type": "admonition"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "For complete documentation of the types of floating-point exceptions and treatment options, see "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "seterr"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Keyword arguments. The valid keywords are the possible floating-point exceptions. Each keyword should have a string value that defines the treatment for the particular error. Possible values are {'ignore', 'warn', 'raise', 'call', 'print', 'log'}."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "kwargs",
              "type": "Param",
              "type_": "{divide, over, under, invalid}"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Context manager for floating-point error handling."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [
      {
        "type": "code",
        "value": "olderr = np.seterr(all='ignore')  # Set error handling to known state."
      },
      {
        "type": "code",
        "value": "np.arange(3) / 0."
      },
      {
        "type": "code",
        "value": "with np.errstate(divide='warn'):\n    np.arange(3) / 0."
      },
      {
        "type": "code",
        "value": "np.sqrt(-1)"
      },
      {
        "type": "code",
        "value": "with np.errstate(invalid='raise'):\n    np.sqrt(-1)"
      },
      {
        "type": "text",
        "value": "Outside the context the error handling behavior has not changed:"
      },
      {
        "type": "code",
        "value": "np.geterr()"
      }
    ],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/numpy/__init__.py",
  "item_line": null,
  "item_type": "<class 'type'>",
  "ordered_sections": [
    "Signature",
    "Summary",
    "Extended Summary",
    "Parameters",
    "See Also",
    "Notes",
    "Examples"
  ],
  "references": null,
  "see_also": [
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "to-resolve",
          "module": "current-module",
          "path": "seterr",
          "type": "RefInfo",
          "version": "current-version"
        },
        "type": "Link",
        "value": "seterr"
      },
      "type": null
    },
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "to-resolve",
          "module": "current-module",
          "path": "geterr",
          "type": "RefInfo",
          "version": "current-version"
        },
        "type": "Link",
        "value": "geterr"
      },
      "type": null
    },
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "to-resolve",
          "module": "current-module",
          "path": "seterrcall",
          "type": "RefInfo",
          "version": "current-version"
        },
        "type": "Link",
        "value": "seterrcall"
      },
      "type": null
    },
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "to-resolve",
          "module": "current-module",
          "path": "geterrcall",
          "type": "RefInfo",
          "version": "current-version"
        },
        "type": "Link",
        "value": "geterrcall"
      },
      "type": null
    }
  ],
  "signature": {
    "type": "Signature",
    "value": "errstate(**kwargs)"
  },
  "type": "DocBlob"
}