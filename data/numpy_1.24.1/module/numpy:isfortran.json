{
  "aliases": [
    "numpy.isfortran"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "This function is obsolete and, because of changes due to relaxed stride checking, its return value for the same array may differ for versions of NumPy >= 1.10.0 and previous versions. If you only want to check if an array is Fortran contiguous use "
            },
            {
              "type": "inlineCode",
              "value": "a.flags.f_contiguous"
            },
            {
              "type": "text",
              "value": " instead."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Input array."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "a",
              "type": "Param",
              "type_": "ndarray"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Returns True if the array is Fortran contiguous but "
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "not"
                        }
                      ],
                      "type": "emphasis"
                    },
                    {
                      "type": "text",
                      "value": " C contiguous."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "isfortran",
              "type": "Param",
              "type_": "bool"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Check if the array is Fortran contiguous but "
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "not"
                }
              ],
              "type": "emphasis"
            },
            {
              "type": "text",
              "value": " C contiguous."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [
      {
        "type": "text",
        "value": "np.array allows to specify whether the array is written in C-contiguous\norder (last index varies the fastest), or FORTRAN-contiguous order in\nmemory (first index varies the fastest)."
      },
      {
        "type": "code",
        "value": "a = np.array([[1, 2, 3], [4, 5, 6]], order='C')\na"
      },
      {
        "type": "code",
        "value": "np.isfortran(a)"
      },
      {
        "type": "code",
        "value": "b = np.array([[1, 2, 3], [4, 5, 6]], order='F')\nb"
      },
      {
        "type": "code",
        "value": "np.isfortran(b)"
      },
      {
        "type": "text",
        "value": "The transpose of a C-ordered array is a FORTRAN-ordered array."
      },
      {
        "type": "code",
        "value": "a = np.array([[1, 2, 3], [4, 5, 6]], order='C')\na"
      },
      {
        "type": "code",
        "value": "np.isfortran(a)"
      },
      {
        "type": "code",
        "value": "b = a.T\nb"
      },
      {
        "type": "code",
        "value": "np.isfortran(b)"
      },
      {
        "type": "text",
        "value": "C-ordered arrays evaluate as False even if they are also FORTRAN-ordered."
      },
      {
        "type": "code",
        "value": "np.isfortran(np.array([1, 2], order='F'))"
      }
    ],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/numpy/core/numeric.py",
  "item_line": 506,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns",
    "Examples"
  ],
  "references": null,
  "see_also": [],
  "signature": {
    "type": "Signature",
    "value": "(a)"
  },
  "type": "DocBlob"
}