{
  "aliases": [
    "numpy.ix_"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "This function takes N 1-D sequences and returns N outputs with N dimensions each, such that the shape is 1 in all but one dimension and the dimension with the non-unit shape value cycles through all N dimensions."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Using "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "module",
              "reference": {
                "kind": "module",
                "module": "numpy",
                "path": "numpy:ix_",
                "type": "RefInfo",
                "version": "1.24.1"
              },
              "type": "Link",
              "value": "ix_"
            },
            {
              "type": "text",
              "value": " one can quickly construct index arrays that will index the cross product. "
            },
            {
              "type": "inlineCode",
              "value": "a[np.ix_([1,3],[2,5])]"
            },
            {
              "type": "text",
              "value": " returns the array "
            },
            {
              "type": "inlineCode",
              "value": "[[a[1,2] a[1,5]], [a[3,2] a[3,5]]]"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Each sequence should be of integer or boolean type. Boolean sequences will be interpreted as boolean masks for the corresponding dimension (equivalent to passing in "
                    },
                    {
                      "type": "inlineCode",
                      "value": "np.nonzero(boolean_sequence)"
                    },
                    {
                      "type": "text",
                      "value": ")."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "args",
              "type": "Param",
              "type_": "1-D sequences"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "N arrays with N dimensions each, with N the number of input sequences. Together these arrays form an open mesh."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "out",
              "type": "Param",
              "type_": "tuple of ndarrays"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Construct an open mesh from multiple sequences."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [
      {
        "type": "code",
        "value": "a = np.arange(10).reshape(2, 5)\na"
      },
      {
        "type": "code",
        "value": "ixgrid = np.ix_([0, 1], [2, 4])\nixgrid"
      },
      {
        "type": "code",
        "value": "ixgrid[0].shape, ixgrid[1].shape"
      },
      {
        "type": "code",
        "value": "a[ixgrid]"
      },
      {
        "type": "code",
        "value": "ixgrid = np.ix_([True, True], [2, 4])\na[ixgrid]"
      },
      {
        "type": "code",
        "value": "ixgrid = np.ix_([True, True], [False, False, True, False, True])\na[ixgrid]"
      }
    ],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/numpy/lib/index_tricks.py",
  "item_line": 35,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns",
    "See Also",
    "Examples"
  ],
  "references": null,
  "see_also": [
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "to-resolve",
          "module": "current-module",
          "path": "ogrid",
          "type": "RefInfo",
          "version": "current-version"
        },
        "type": "Link",
        "value": "ogrid"
      },
      "type": null
    },
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "to-resolve",
          "module": "current-module",
          "path": "mgrid",
          "type": "RefInfo",
          "version": "current-version"
        },
        "type": "Link",
        "value": "mgrid"
      },
      "type": null
    },
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "to-resolve",
          "module": "current-module",
          "path": "meshgrid",
          "type": "RefInfo",
          "version": "current-version"
        },
        "type": "Link",
        "value": "meshgrid"
      },
      "type": null
    }
  ],
  "signature": {
    "type": "Signature",
    "value": "(*args)"
  },
  "type": "DocBlob"
}