{
  "aliases": [
    "numpy.kaiser"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "The Kaiser window is a taper formed by using a Bessel function."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "The Kaiser window is defined as"
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "math",
          "value": "w(n) = I_0\\left( \\beta \\sqrt{1-\\frac{4n^2}{(M-1)^2}}\\right)/I_0(\\beta)"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "with"
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "math",
          "value": "\\quad -\\frac{M-1}{2} \\leq n \\leq \\frac{M-1}{2},"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "where "
            },
            {
              "type": "inlineMath",
              "value": "I_0"
            },
            {
              "type": "text",
              "value": " is the modified zeroth-order Bessel function."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "The Kaiser was named for Jim Kaiser, who discovered a simple approximation to the DPSS window based on Bessel functions.  The Kaiser window is a very good approximation to the Digital Prolate Spheroidal Sequence, or Slepian window, which is the transform which maximizes the energy in the main lobe of the window relative to total energy."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "The Kaiser can approximate many other windows by varying the beta parameter."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "====  ======================= beta  Window shape ====  ======================= 0     Rectangular 5     Similar to a Hamming 6     Similar to a Hanning 8.6   Similar to a Blackman ====  ======================="
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "A beta value of 14 is probably a good starting point. Note that as beta gets large, the window narrows, and so the number of samples needs to be large enough to sample the increasingly narrow spike, otherwise NaNs will get returned."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Most references to the Kaiser window come from the signal processing literature, where it is used as one of many windowing functions for smoothing values.  It is also known as an apodization (which means \"removing the foot\", i.e. smoothing discontinuities at the beginning and end of the sampled signal) or tapering function."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Number of points in the output window. If zero or less, an empty array is returned."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "M",
              "type": "Param",
              "type_": "int"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Shape parameter for window."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "beta",
              "type": "Param",
              "type_": "float"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The window, with the maximum value normalized to one (the value one appears only if the number of samples is odd)."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "out",
              "type": "Param",
              "type_": "array"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Return the Kaiser window."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [
      {
        "type": "code",
        "value": "import matplotlib.pyplot as plt\nnp.kaiser(12, 14)"
      },
      {
        "type": "text",
        "value": "Plot the window and the frequency response:"
      },
      {
        "type": "code",
        "value": "from numpy.fft import fft, fftshift\nwindow = np.kaiser(51, 14)\nplt.plot(window)"
      },
      {
        "type": "code",
        "value": "plt.title(\"Kaiser window\")"
      },
      {
        "type": "code",
        "value": "plt.ylabel(\"Amplitude\")"
      },
      {
        "type": "code",
        "value": "plt.xlabel(\"Sample\")"
      },
      {
        "type": "code",
        "value": "plt.show()"
      },
      {
        "type": "Fig",
        "value": {
          "kind": "assets",
          "module": "numpy",
          "path": "fig-numpy:kaiser-0-6ea76235.png",
          "type": "RefInfo",
          "version": "1.24.1"
        }
      },
      {
        "type": "code",
        "value": "plt.figure()"
      },
      {
        "type": "code",
        "value": "A = fft(window, 2048) / 25.5\nmag = np.abs(fftshift(A))\nfreq = np.linspace(-0.5, 0.5, len(A))\nresponse = 20 * np.log10(mag)\nresponse = np.clip(response, -100, 100)\nplt.plot(freq, response)"
      },
      {
        "type": "code",
        "value": "plt.title(\"Frequency response of Kaiser window\")"
      },
      {
        "type": "code",
        "value": "plt.ylabel(\"Magnitude [dB]\")"
      },
      {
        "type": "code",
        "value": "plt.xlabel(\"Normalized frequency [cycles per sample]\")"
      },
      {
        "type": "code",
        "value": "plt.axis('tight')"
      },
      {
        "type": "code",
        "value": "plt.show()"
      },
      {
        "type": "Fig",
        "value": {
          "kind": "assets",
          "module": "numpy",
          "path": "fig-numpy:kaiser-1-d8ee2ac7.png",
          "type": "RefInfo",
          "version": "1.24.1"
        }
      }
    ],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/numpy/lib/function_base.py",
  "item_line": 3429,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns",
    "See Also",
    "Notes",
    "References",
    "Examples"
  ],
  "references": null,
  "see_also": [
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "to-resolve",
          "module": "current-module",
          "path": "bartlett",
          "type": "RefInfo",
          "version": "current-version"
        },
        "type": "Link",
        "value": "bartlett"
      },
      "type": null
    },
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "to-resolve",
          "module": "current-module",
          "path": "blackman",
          "type": "RefInfo",
          "version": "current-version"
        },
        "type": "Link",
        "value": "blackman"
      },
      "type": null
    },
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "to-resolve",
          "module": "current-module",
          "path": "hamming",
          "type": "RefInfo",
          "version": "current-version"
        },
        "type": "Link",
        "value": "hamming"
      },
      "type": null
    },
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "to-resolve",
          "module": "current-module",
          "path": "hanning",
          "type": "RefInfo",
          "version": "current-version"
        },
        "type": "Link",
        "value": "hanning"
      },
      "type": null
    }
  ],
  "signature": {
    "type": "Signature",
    "value": "(M, beta)"
  },
  "type": "DocBlob"
}