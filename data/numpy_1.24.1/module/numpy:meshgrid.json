{
  "aliases": [
    "numpy.meshgrid"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Make N-D coordinate arrays for vectorized evaluations of N-D scalar/vector fields over N-D grids, given one-dimensional coordinate arrays x1, x2,..., xn."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "children": [
                {
                  "type": "text",
                  "value": "versionchanged 1.9"
                }
              ],
              "type": "admonitionTitle"
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "1-D and 0-D cases are allowed."
                }
              ],
              "type": "paragraph"
            }
          ],
          "kind": "note",
          "type": "admonition"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "This function supports both indexing conventions through the indexing keyword argument.  Giving the string 'ij' returns a meshgrid with matrix indexing, while 'xy' returns a meshgrid with Cartesian indexing. In the 2-D case with inputs of length M and N, the outputs are of shape (N, M) for 'xy' indexing and (M, N) for 'ij' indexing.  In the 3-D case with inputs of length M, N and P, outputs are of shape (N, M, P) for 'xy' indexing and (M, N, P) for 'ij' indexing.  The difference is illustrated by the following code snippet      "
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": "xv, yv = np.meshgrid(x, y, indexing='ij')\nfor i in range(nx):\n    for j in range(ny):\n        # treat xv[i,j], yv[i,j]\n\nxv, yv = np.meshgrid(x, y, indexing='xy')\nfor i in range(nx):\n    for j in range(ny):\n        # treat xv[j,i], yv[j,i]"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "In the 1-D and 0-D case, the indexing and sparse keywords have no effect."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "1-D arrays representing the coordinates of a grid."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "x1, x2,..., xn",
              "type": "Param",
              "type_": "array_like"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Cartesian ('xy', default) or matrix ('ij') indexing of output. See Notes for more details."
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "versionadded 1.7.0"
                        }
                      ],
                      "type": "admonitionTitle"
                    }
                  ],
                  "kind": "note",
                  "type": "admonition"
                }
              ],
              "param": "indexing",
              "type": "Param",
              "type_": "{'xy', 'ij'}, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "If True the shape of the returned coordinate array for dimension "
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "i"
                        }
                      ],
                      "type": "emphasis"
                    },
                    {
                      "type": "text",
                      "value": " is reduced from "
                    },
                    {
                      "type": "inlineCode",
                      "value": "(N1, ..., Ni, ... Nn)"
                    },
                    {
                      "type": "text",
                      "value": " to "
                    },
                    {
                      "type": "inlineCode",
                      "value": "(1, ..., 1, Ni, 1, ..., 1)"
                    },
                    {
                      "type": "text",
                      "value": ".  These sparse coordinate grids are intended to be use with "
                    },
                    {
                      "type": "inlineCode",
                      "value": "basics.broadcasting"
                    },
                    {
                      "type": "text",
                      "value": ".  When all coordinates are used in an expression, broadcasting still leads to a fully-dimensonal result array."
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Default is False."
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "versionadded 1.7.0"
                        }
                      ],
                      "type": "admonitionTitle"
                    }
                  ],
                  "kind": "note",
                  "type": "admonition"
                }
              ],
              "param": "sparse",
              "type": "Param",
              "type_": "bool, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "If False, a view into the original arrays are returned in order to conserve memory.  Default is True.  Please note that "
                    },
                    {
                      "type": "inlineCode",
                      "value": "sparse=False, copy=False"
                    },
                    {
                      "type": "text",
                      "value": " will likely return non-contiguous arrays.  Furthermore, more than one element of a broadcast array may refer to a single memory location.  If you need to write to the arrays, make copies first."
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "versionadded 1.7.0"
                        }
                      ],
                      "type": "admonitionTitle"
                    }
                  ],
                  "kind": "note",
                  "type": "admonition"
                }
              ],
              "param": "copy",
              "type": "Param",
              "type_": "bool, optional"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "For vectors "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "x1",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "x1"
                    },
                    {
                      "type": "text",
                      "value": ", "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "x2",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "x2"
                    },
                    {
                      "type": "text",
                      "value": ",..., "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "xn",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "xn"
                    },
                    {
                      "type": "text",
                      "value": " with lengths "
                    },
                    {
                      "type": "inlineCode",
                      "value": "Ni=len(xi)"
                    },
                    {
                      "type": "text",
                      "value": ", returns "
                    },
                    {
                      "type": "inlineCode",
                      "value": "(N1, N2, N3,..., Nn)"
                    },
                    {
                      "type": "text",
                      "value": " shaped arrays if indexing='ij' or "
                    },
                    {
                      "type": "inlineCode",
                      "value": "(N2, N1, N3,..., Nn)"
                    },
                    {
                      "type": "text",
                      "value": " shaped arrays if indexing='xy' with the elements of "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "xi"
                    },
                    {
                      "type": "text",
                      "value": " repeated to fill the matrix along the first dimension for "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "x1",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "x1"
                    },
                    {
                      "type": "text",
                      "value": ", the second for "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "x2",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "x2"
                    },
                    {
                      "type": "text",
                      "value": " and so on."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "X1, X2,..., XN",
              "type": "Param",
              "type_": "ndarray"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Return coordinate matrices from coordinate vectors."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [
      {
        "type": "code",
        "value": "nx, ny = (3, 2)\nx = np.linspace(0, 1, nx)\ny = np.linspace(0, 1, ny)\nxv, yv = np.meshgrid(x, y)\nxv"
      },
      {
        "type": "code",
        "value": "yv"
      },
      {
        "type": "text",
        "value": "The result of `meshgrid` is a coordinate grid:"
      },
      {
        "type": "code",
        "value": "import matplotlib.pyplot as plt\nplt.plot(xv, yv, marker='o', color='k', linestyle='none')\nplt.show()"
      },
      {
        "type": "Fig",
        "value": {
          "kind": "assets",
          "module": "numpy",
          "path": "fig-numpy:meshgrid-0-b09c0fd6.png",
          "type": "RefInfo",
          "version": "1.24.1"
        }
      },
      {
        "type": "text",
        "value": "You can create sparse output arrays to save memory and computation time."
      },
      {
        "type": "code",
        "value": "xv, yv = np.meshgrid(x, y, sparse=True)\nxv"
      },
      {
        "type": "code",
        "value": "yv"
      },
      {
        "type": "text",
        "value": "`meshgrid` is very useful to evaluate functions on a grid. If the\nfunction depends on all coordinates, both dense and sparse outputs can be\nused."
      },
      {
        "type": "code",
        "value": "x = np.linspace(-5, 5, 101)\ny = np.linspace(-5, 5, 101)\n# full coordinate arrays\nxx, yy = np.meshgrid(x, y)\nzz = np.sqrt(xx**2 + yy**2)\nxx.shape, yy.shape, zz.shape"
      },
      {
        "type": "code",
        "value": "# sparse coordinate arrays\nxs, ys = np.meshgrid(x, y, sparse=True)\nzs = np.sqrt(xs**2 + ys**2)\nxs.shape, ys.shape, zs.shape"
      },
      {
        "type": "code",
        "value": "np.array_equal(zz, zs)"
      },
      {
        "type": "code",
        "value": "h = plt.contourf(x, y, zs)\nplt.axis('scaled')\nplt.colorbar()\nplt.show()"
      },
      {
        "type": "Fig",
        "value": {
          "kind": "assets",
          "module": "numpy",
          "path": "fig-numpy:meshgrid-1-a98ab3a0.png",
          "type": "RefInfo",
          "version": "1.24.1"
        }
      }
    ],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/numpy/lib/function_base.py",
  "item_line": 4892,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns",
    "Notes",
    "See Also",
    "Examples"
  ],
  "references": null,
  "see_also": [
    {
      "descriptions": [
        {
          "children": [
            {
              "type": "text",
              "value": "Construct a multi-dimensional \"meshgrid\" using indexing notation."
            }
          ],
          "type": "paragraph"
        }
      ],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "to-resolve",
          "module": "current-module",
          "path": "mgrid",
          "type": "RefInfo",
          "version": "current-version"
        },
        "type": "Link",
        "value": "mgrid"
      },
      "type": null
    },
    {
      "descriptions": [
        {
          "children": [
            {
              "type": "text",
              "value": "Construct an open multi-dimensional \"meshgrid\" using indexing notation."
            }
          ],
          "type": "paragraph"
        }
      ],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "to-resolve",
          "module": "current-module",
          "path": "ogrid",
          "type": "RefInfo",
          "version": "current-version"
        },
        "type": "Link",
        "value": "ogrid"
      },
      "type": null
    },
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "to-resolve",
          "module": "current-module",
          "path": "how-to-index",
          "type": "RefInfo",
          "version": "current-version"
        },
        "type": "Link",
        "value": "how-to-index"
      },
      "type": null
    }
  ],
  "signature": {
    "type": "Signature",
    "value": "(*xi, copy=True, sparse=False, indexing='xy')"
  },
  "type": "DocBlob"
}