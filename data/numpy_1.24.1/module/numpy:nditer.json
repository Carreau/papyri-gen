{
  "aliases": [
    "numpy.nditer"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The data types of the values provided in "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "value",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "value"
                    },
                    {
                      "type": "text",
                      "value": ". This may be different from the operand data types if buffering is enabled. Valid only before the iterator is closed."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "dtypes",
              "type": "Param",
              "type_": "tuple of dtype(s)"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Whether the iteration over the operands is finished or not."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "finished",
              "type": "Param",
              "type_": "bool"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "If True, the iterator was created with the "
                    },
                    {
                      "type": "inlineCode",
                      "value": "delay_bufalloc"
                    },
                    {
                      "type": "text",
                      "value": " flag, and no reset() function was called on it yet."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "has_delayed_bufalloc",
              "type": "Param",
              "type_": "bool"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "If True, the iterator was created with either the "
                    },
                    {
                      "type": "inlineCode",
                      "value": "c_index"
                    },
                    {
                      "type": "text",
                      "value": " or the "
                    },
                    {
                      "type": "inlineCode",
                      "value": "f_index"
                    },
                    {
                      "type": "text",
                      "value": " flag, and the property "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "index",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "index"
                    },
                    {
                      "type": "text",
                      "value": " can be used to retrieve it."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "has_index",
              "type": "Param",
              "type_": "bool"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "If True, the iterator was created with the "
                    },
                    {
                      "type": "inlineCode",
                      "value": "multi_index"
                    },
                    {
                      "type": "text",
                      "value": " flag, and the property "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "multi_index",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "multi_index"
                    },
                    {
                      "type": "text",
                      "value": " can be used to retrieve it."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "has_multi_index",
              "type": "Param",
              "type_": "bool"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "When the "
                    },
                    {
                      "type": "inlineCode",
                      "value": "c_index"
                    },
                    {
                      "type": "text",
                      "value": " or "
                    },
                    {
                      "type": "inlineCode",
                      "value": "f_index"
                    },
                    {
                      "type": "text",
                      "value": " flag was used, this property provides access to the index. Raises a ValueError if accessed and "
                    },
                    {
                      "type": "inlineCode",
                      "value": "has_index"
                    },
                    {
                      "type": "text",
                      "value": " is False."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "index",
              "type": "Param",
              "type_": ""
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Whether iteration requires access to the Python API, for example if one of the operands is an object array."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "iterationneedsapi",
              "type": "Param",
              "type_": "bool"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "An index which matches the order of iteration."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "iterindex",
              "type": "Param",
              "type_": "int"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Size of the iterator."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "itersize",
              "type": "Param",
              "type_": "int"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Structured view(s) of "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "operands",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "operands"
                    },
                    {
                      "type": "text",
                      "value": " in memory, matching the reordered and optimized iterator access pattern. Valid only before the iterator is closed."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "itviews",
              "type": "Param",
              "type_": ""
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "When the "
                    },
                    {
                      "type": "inlineCode",
                      "value": "multi_index"
                    },
                    {
                      "type": "text",
                      "value": " flag was used, this property provides access to the index. Raises a ValueError if accessed accessed and "
                    },
                    {
                      "type": "inlineCode",
                      "value": "has_multi_index"
                    },
                    {
                      "type": "text",
                      "value": " is False."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "multi_index",
              "type": "Param",
              "type_": ""
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The dimensions of the iterator."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "ndim",
              "type": "Param",
              "type_": "int"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The number of iterator operands."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "nop",
              "type": "Param",
              "type_": "int"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The array(s) to be iterated over. Valid only before the iterator is closed."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "operands",
              "type": "Param",
              "type_": "tuple of operand(s)"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Shape tuple, the shape of the iterator."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "shape",
              "type": "Param",
              "type_": "tuple of ints"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Value of "
                    },
                    {
                      "type": "inlineCode",
                      "value": "operands"
                    },
                    {
                      "type": "text",
                      "value": " at current iteration. Normally, this is a tuple of array scalars, but if the flag "
                    },
                    {
                      "type": "inlineCode",
                      "value": "external_loop"
                    },
                    {
                      "type": "text",
                      "value": " is used, it is a tuple of one dimensional arrays."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "value",
              "type": "Param",
              "type_": ""
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [
        {
          "children": [
            {
              "anchor": null,
              "exists": true,
              "kind": "module",
              "reference": {
                "kind": "module",
                "module": "numpy",
                "path": "numpy:nditer",
                "type": "RefInfo",
                "version": "1.24.1"
              },
              "type": "Link",
              "value": "nditer"
            },
            {
              "type": "text",
              "value": " supersedes "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "flatiter"
            },
            {
              "type": "text",
              "value": ".  The iterator implementation behind "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "module",
              "reference": {
                "kind": "module",
                "module": "numpy",
                "path": "numpy:nditer",
                "type": "RefInfo",
                "version": "1.24.1"
              },
              "type": "Link",
              "value": "nditer"
            },
            {
              "type": "text",
              "value": " is also exposed by the NumPy C API."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "The Python exposure supplies two iteration interfaces, one which follows the Python iterator protocol, and another which mirrors the C-style do-while pattern.  The native Python approach is better in most cases, but if you need the coordinates or index of an iterator, use the C-style pattern."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The array(s) to iterate over."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "op",
              "type": "Param",
              "type_": "ndarray or sequence of array_like"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Flags to control the behavior of the iterator."
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "children": [
                        {
                          "children": [
                            {
                              "type": "inlineCode",
                              "value": "buffered"
                            },
                            {
                              "type": "text",
                              "value": " enables buffering when required."
                            }
                          ],
                          "type": "paragraph"
                        }
                      ],
                      "spread": false,
                      "type": "listItem"
                    },
                    {
                      "children": [
                        {
                          "children": [
                            {
                              "type": "inlineCode",
                              "value": "c_index"
                            },
                            {
                              "type": "text",
                              "value": " causes a C-order index to be tracked."
                            }
                          ],
                          "type": "paragraph"
                        }
                      ],
                      "spread": false,
                      "type": "listItem"
                    },
                    {
                      "children": [
                        {
                          "children": [
                            {
                              "type": "inlineCode",
                              "value": "f_index"
                            },
                            {
                              "type": "text",
                              "value": " causes a Fortran-order index to be tracked."
                            }
                          ],
                          "type": "paragraph"
                        }
                      ],
                      "spread": false,
                      "type": "listItem"
                    },
                    {
                      "children": [
                        {
                          "children": [
                            {
                              "type": "inlineCode",
                              "value": "multi_index"
                            },
                            {
                              "type": "text",
                              "value": " causes a multi-index, or a tuple of indices   with one per iteration dimension, to be tracked."
                            }
                          ],
                          "type": "paragraph"
                        }
                      ],
                      "spread": false,
                      "type": "listItem"
                    },
                    {
                      "children": [
                        {
                          "children": [
                            {
                              "type": "inlineCode",
                              "value": "common_dtype"
                            },
                            {
                              "type": "text",
                              "value": " causes all the operands to be converted to   a common data type, with copying or buffering as necessary."
                            }
                          ],
                          "type": "paragraph"
                        }
                      ],
                      "spread": false,
                      "type": "listItem"
                    },
                    {
                      "children": [
                        {
                          "children": [
                            {
                              "type": "inlineCode",
                              "value": "copy_if_overlap"
                            },
                            {
                              "type": "text",
                              "value": " causes the iterator to determine if read   operands have overlap with write operands, and make temporary   copies as necessary to avoid overlap. False positives (needless   copying) are possible in some cases."
                            }
                          ],
                          "type": "paragraph"
                        }
                      ],
                      "spread": false,
                      "type": "listItem"
                    },
                    {
                      "children": [
                        {
                          "children": [
                            {
                              "type": "inlineCode",
                              "value": "delay_bufalloc"
                            },
                            {
                              "type": "text",
                              "value": " delays allocation of the buffers until   a reset() call is made. Allows "
                            },
                            {
                              "type": "inlineCode",
                              "value": "allocate"
                            },
                            {
                              "type": "text",
                              "value": " operands to   be initialized before their values are copied into the buffers."
                            }
                          ],
                          "type": "paragraph"
                        }
                      ],
                      "spread": false,
                      "type": "listItem"
                    },
                    {
                      "children": [
                        {
                          "children": [
                            {
                              "type": "inlineCode",
                              "value": "external_loop"
                            },
                            {
                              "type": "text",
                              "value": " causes the "
                            },
                            {
                              "type": "inlineCode",
                              "value": "values"
                            },
                            {
                              "type": "text",
                              "value": " given to be   one-dimensional arrays with multiple values instead of   zero-dimensional arrays."
                            }
                          ],
                          "type": "paragraph"
                        }
                      ],
                      "spread": false,
                      "type": "listItem"
                    },
                    {
                      "children": [
                        {
                          "children": [
                            {
                              "type": "inlineCode",
                              "value": "grow_inner"
                            },
                            {
                              "type": "text",
                              "value": " allows the "
                            },
                            {
                              "type": "inlineCode",
                              "value": "value"
                            },
                            {
                              "type": "text",
                              "value": " array sizes to be made   larger than the buffer size when both "
                            },
                            {
                              "type": "inlineCode",
                              "value": "buffered"
                            },
                            {
                              "type": "text",
                              "value": " and   "
                            },
                            {
                              "type": "inlineCode",
                              "value": "external_loop"
                            },
                            {
                              "type": "text",
                              "value": " is used."
                            }
                          ],
                          "type": "paragraph"
                        }
                      ],
                      "spread": false,
                      "type": "listItem"
                    },
                    {
                      "children": [
                        {
                          "children": [
                            {
                              "type": "inlineCode",
                              "value": "ranged"
                            },
                            {
                              "type": "text",
                              "value": " allows the iterator to be restricted to a sub-range   of the iterindex values."
                            }
                          ],
                          "type": "paragraph"
                        }
                      ],
                      "spread": false,
                      "type": "listItem"
                    },
                    {
                      "children": [
                        {
                          "children": [
                            {
                              "type": "inlineCode",
                              "value": "refs_ok"
                            },
                            {
                              "type": "text",
                              "value": " enables iteration of reference types, such as   object arrays."
                            }
                          ],
                          "type": "paragraph"
                        }
                      ],
                      "spread": false,
                      "type": "listItem"
                    },
                    {
                      "children": [
                        {
                          "children": [
                            {
                              "type": "inlineCode",
                              "value": "reduce_ok"
                            },
                            {
                              "type": "text",
                              "value": " enables iteration of "
                            },
                            {
                              "type": "inlineCode",
                              "value": "readwrite"
                            },
                            {
                              "type": "text",
                              "value": " operands   which are broadcasted, also known as reduction operands."
                            }
                          ],
                          "type": "paragraph"
                        }
                      ],
                      "spread": false,
                      "type": "listItem"
                    },
                    {
                      "children": [
                        {
                          "children": [
                            {
                              "type": "inlineCode",
                              "value": "zerosize_ok"
                            },
                            {
                              "type": "text",
                              "value": " allows "
                            },
                            {
                              "anchor": null,
                              "exists": true,
                              "kind": "local",
                              "reference": {
                                "kind": "local",
                                "module": null,
                                "path": "itersize",
                                "type": "RefInfo",
                                "version": null
                              },
                              "type": "Link",
                              "value": "itersize"
                            },
                            {
                              "type": "text",
                              "value": " to be zero."
                            }
                          ],
                          "type": "paragraph"
                        }
                      ],
                      "spread": false,
                      "type": "listItem"
                    }
                  ],
                  "ordered": false,
                  "spread": false,
                  "start": 1,
                  "type": "list"
                }
              ],
              "param": "flags",
              "type": "Param",
              "type_": "sequence of str, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "This is a list of flags for each operand. At minimum, one of "
                    },
                    {
                      "type": "inlineCode",
                      "value": "readonly"
                    },
                    {
                      "type": "text",
                      "value": ", "
                    },
                    {
                      "type": "inlineCode",
                      "value": "readwrite"
                    },
                    {
                      "type": "text",
                      "value": ", or "
                    },
                    {
                      "type": "inlineCode",
                      "value": "writeonly"
                    },
                    {
                      "type": "text",
                      "value": " must be specified."
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "children": [
                        {
                          "children": [
                            {
                              "type": "inlineCode",
                              "value": "readonly"
                            },
                            {
                              "type": "text",
                              "value": " indicates the operand will only be read from."
                            }
                          ],
                          "type": "paragraph"
                        }
                      ],
                      "spread": false,
                      "type": "listItem"
                    },
                    {
                      "children": [
                        {
                          "children": [
                            {
                              "type": "inlineCode",
                              "value": "readwrite"
                            },
                            {
                              "type": "text",
                              "value": " indicates the operand will be read from and written to."
                            }
                          ],
                          "type": "paragraph"
                        }
                      ],
                      "spread": false,
                      "type": "listItem"
                    },
                    {
                      "children": [
                        {
                          "children": [
                            {
                              "type": "inlineCode",
                              "value": "writeonly"
                            },
                            {
                              "type": "text",
                              "value": " indicates the operand will only be written to."
                            }
                          ],
                          "type": "paragraph"
                        }
                      ],
                      "spread": false,
                      "type": "listItem"
                    },
                    {
                      "children": [
                        {
                          "children": [
                            {
                              "type": "inlineCode",
                              "value": "no_broadcast"
                            },
                            {
                              "type": "text",
                              "value": " prevents the operand from being broadcasted."
                            }
                          ],
                          "type": "paragraph"
                        }
                      ],
                      "spread": false,
                      "type": "listItem"
                    },
                    {
                      "children": [
                        {
                          "children": [
                            {
                              "type": "inlineCode",
                              "value": "contig"
                            },
                            {
                              "type": "text",
                              "value": " forces the operand data to be contiguous."
                            }
                          ],
                          "type": "paragraph"
                        }
                      ],
                      "spread": false,
                      "type": "listItem"
                    },
                    {
                      "children": [
                        {
                          "children": [
                            {
                              "type": "inlineCode",
                              "value": "aligned"
                            },
                            {
                              "type": "text",
                              "value": " forces the operand data to be aligned."
                            }
                          ],
                          "type": "paragraph"
                        }
                      ],
                      "spread": false,
                      "type": "listItem"
                    },
                    {
                      "children": [
                        {
                          "children": [
                            {
                              "type": "inlineCode",
                              "value": "nbo"
                            },
                            {
                              "type": "text",
                              "value": " forces the operand data to be in native byte order."
                            }
                          ],
                          "type": "paragraph"
                        }
                      ],
                      "spread": false,
                      "type": "listItem"
                    },
                    {
                      "children": [
                        {
                          "children": [
                            {
                              "type": "inlineCode",
                              "value": "copy"
                            },
                            {
                              "type": "text",
                              "value": " allows a temporary read-only copy if required."
                            }
                          ],
                          "type": "paragraph"
                        }
                      ],
                      "spread": false,
                      "type": "listItem"
                    },
                    {
                      "children": [
                        {
                          "children": [
                            {
                              "type": "inlineCode",
                              "value": "updateifcopy"
                            },
                            {
                              "type": "text",
                              "value": " allows a temporary read-write copy if required."
                            }
                          ],
                          "type": "paragraph"
                        }
                      ],
                      "spread": false,
                      "type": "listItem"
                    },
                    {
                      "children": [
                        {
                          "children": [
                            {
                              "type": "inlineCode",
                              "value": "allocate"
                            },
                            {
                              "type": "text",
                              "value": " causes the array to be allocated if it is None   in the "
                            },
                            {
                              "type": "inlineCode",
                              "value": "op"
                            },
                            {
                              "type": "text",
                              "value": " parameter."
                            }
                          ],
                          "type": "paragraph"
                        }
                      ],
                      "spread": false,
                      "type": "listItem"
                    },
                    {
                      "children": [
                        {
                          "children": [
                            {
                              "type": "inlineCode",
                              "value": "no_subtype"
                            },
                            {
                              "type": "text",
                              "value": " prevents an "
                            },
                            {
                              "type": "inlineCode",
                              "value": "allocate"
                            },
                            {
                              "type": "text",
                              "value": " operand from using a subtype."
                            }
                          ],
                          "type": "paragraph"
                        }
                      ],
                      "spread": false,
                      "type": "listItem"
                    },
                    {
                      "children": [
                        {
                          "children": [
                            {
                              "type": "inlineCode",
                              "value": "arraymask"
                            },
                            {
                              "type": "text",
                              "value": " indicates that this operand is the mask to use   for selecting elements when writing to operands with the   'writemasked' flag set. The iterator does not enforce this,   but when writing from a buffer back to the array, it only   copies those elements indicated by this mask."
                            }
                          ],
                          "type": "paragraph"
                        }
                      ],
                      "spread": false,
                      "type": "listItem"
                    },
                    {
                      "children": [
                        {
                          "children": [
                            {
                              "type": "inlineCode",
                              "value": "writemasked"
                            },
                            {
                              "type": "text",
                              "value": " indicates that only elements where the chosen   "
                            },
                            {
                              "type": "inlineCode",
                              "value": "arraymask"
                            },
                            {
                              "type": "text",
                              "value": " operand is True will be written to."
                            }
                          ],
                          "type": "paragraph"
                        }
                      ],
                      "spread": false,
                      "type": "listItem"
                    },
                    {
                      "children": [
                        {
                          "children": [
                            {
                              "type": "inlineCode",
                              "value": "overlap_assume_elementwise"
                            },
                            {
                              "type": "text",
                              "value": " can be used to mark operands that are   accessed only in the iterator order, to allow less conservative   copying when "
                            },
                            {
                              "type": "inlineCode",
                              "value": "copy_if_overlap"
                            },
                            {
                              "type": "text",
                              "value": " is present."
                            }
                          ],
                          "type": "paragraph"
                        }
                      ],
                      "spread": false,
                      "type": "listItem"
                    }
                  ],
                  "ordered": false,
                  "spread": false,
                  "start": 1,
                  "type": "list"
                }
              ],
              "param": "op_flags",
              "type": "Param",
              "type_": "list of list of str, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The required data type(s) of the operands. If copying or buffering is enabled, the data will be converted to/from their original types."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "op_dtypes",
              "type": "Param",
              "type_": "dtype or tuple of dtype(s), optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Controls the iteration order. 'C' means C order, 'F' means Fortran order, 'A' means 'F' order if all the arrays are Fortran contiguous, 'C' order otherwise, and 'K' means as close to the order the array elements appear in memory as possible. This also affects the element memory order of "
                    },
                    {
                      "type": "inlineCode",
                      "value": "allocate"
                    },
                    {
                      "type": "text",
                      "value": " operands, as they are allocated to be compatible with iteration order. Default is 'K'."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "order",
              "type": "Param",
              "type_": "{'C', 'F', 'A', 'K'}, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Controls what kind of data casting may occur when making a copy or buffering.  Setting this to 'unsafe' is not recommended, as it can adversely affect accumulations."
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "children": [
                        {
                          "children": [
                            {
                              "type": "text",
                              "value": "'no' means the data types should not be cast at all."
                            }
                          ],
                          "type": "paragraph"
                        }
                      ],
                      "spread": false,
                      "type": "listItem"
                    },
                    {
                      "children": [
                        {
                          "children": [
                            {
                              "type": "text",
                              "value": "'equiv' means only byte-order changes are allowed."
                            }
                          ],
                          "type": "paragraph"
                        }
                      ],
                      "spread": false,
                      "type": "listItem"
                    },
                    {
                      "children": [
                        {
                          "children": [
                            {
                              "type": "text",
                              "value": "'safe' means only casts which can preserve values are allowed."
                            }
                          ],
                          "type": "paragraph"
                        }
                      ],
                      "spread": false,
                      "type": "listItem"
                    },
                    {
                      "children": [
                        {
                          "children": [
                            {
                              "type": "text",
                              "value": "'same_kind' means only safe casts or casts within a kind,   like float64 to float32, are allowed."
                            }
                          ],
                          "type": "paragraph"
                        }
                      ],
                      "spread": false,
                      "type": "listItem"
                    },
                    {
                      "children": [
                        {
                          "children": [
                            {
                              "type": "text",
                              "value": "'unsafe' means any data conversions may be done."
                            }
                          ],
                          "type": "paragraph"
                        }
                      ],
                      "spread": false,
                      "type": "listItem"
                    }
                  ],
                  "ordered": false,
                  "spread": false,
                  "start": 1,
                  "type": "list"
                }
              ],
              "param": "casting",
              "type": "Param",
              "type_": "{'no', 'equiv', 'safe', 'same_kind', 'unsafe'}, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "If provided, is a list of ints or None for each operands. The list of axes for an operand is a mapping from the dimensions of the iterator to the dimensions of the operand. A value of -1 can be placed for entries, causing that dimension to be treated as "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "newaxis"
                    },
                    {
                      "type": "text",
                      "value": "."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "op_axes",
              "type": "Param",
              "type_": "list of list of ints, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The desired shape of the iterator. This allows "
                    },
                    {
                      "type": "inlineCode",
                      "value": "allocate"
                    },
                    {
                      "type": "text",
                      "value": " operands with a dimension mapped by op_axes not corresponding to a dimension of a different operand to get a value not equal to 1 for that dimension."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "itershape",
              "type": "Param",
              "type_": "tuple of ints, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "When buffering is enabled, controls the size of the temporary buffers. Set to 0 for the default value."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "buffersize",
              "type": "Param",
              "type_": "int, optional"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Efficient multi-dimensional iterator object to iterate over arrays. To get started using this object, see the "
            },
            {
              "type": "inlineCode",
              "value": "introductory guide to array iteration <arrays.nditer>"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [
      {
        "type": "text",
        "value": "Here is how we might write an ``iter_add`` function, using the\nPython iterator protocol:"
      },
      {
        "type": "code",
        "value": "def iter_add_py(x, y, out=None):\n    addop = np.add\n    it = np.nditer([x, y, out], [],\n                [['readonly'], ['readonly'], ['writeonly','allocate']])\n    with it:\n        for (a, b, c) in it:\n            addop(a, b, out=c)\n        return it.operands[2]"
      },
      {
        "type": "text",
        "value": "Here is the same function, but following the C-style pattern:"
      },
      {
        "type": "code",
        "value": "def iter_add(x, y, out=None):\n   addop = np.add\n   it = np.nditer([x, y, out], [],\n               [['readonly'], ['readonly'], ['writeonly','allocate']])\n   with it:\n       while not it.finished:\n           addop(it[0], it[1], out=it[2])\n           it.iternext()\n       return it.operands[2]"
      },
      {
        "type": "text",
        "value": "Here is an example outer product function:"
      },
      {
        "type": "code",
        "value": "def outer_it(x, y, out=None):\n    mulop = np.multiply\n    it = np.nditer([x, y, out], ['external_loop'],\n            [['readonly'], ['readonly'], ['writeonly', 'allocate']],\n            op_axes=[list(range(x.ndim)) + [-1] * y.ndim,\n                     [-1] * x.ndim + list(range(y.ndim)),\n                     None])\n    with it:\n        for (a, b, c) in it:\n            mulop(a, b, out=c)\n        return it.operands[2]"
      },
      {
        "type": "code",
        "value": "a = np.arange(2)+1\nb = np.arange(3)+1\nouter_it(a,b)"
      },
      {
        "type": "text",
        "value": "Here is an example function which operates like a \"lambda\" ufunc:"
      },
      {
        "type": "code",
        "value": "def luf(lamdaexpr, *args, **kwargs):\n   '''luf(lambdaexpr, op1, ..., opn, out=None, order='K', casting='safe', buffersize=0)'''\n   nargs = len(args)\n   op = (kwargs.get('out',None),) + args\n   it = np.nditer(op, ['buffered','external_loop'],\n           [['writeonly','allocate','no_broadcast']] +\n                           [['readonly','nbo','aligned']]*nargs,\n           order=kwargs.get('order','K'),\n           casting=kwargs.get('casting','safe'),\n           buffersize=kwargs.get('buffersize',0))\n   while not it.finished:\n       it[0] = lamdaexpr(*it[1:])\n       it.iternext()\n   return it.operands[0]"
      },
      {
        "type": "code",
        "value": "a = np.arange(5)\nb = np.ones(5)\nluf(lambda i,j:i*i + j/2, a, b)"
      },
      {
        "type": "text",
        "value": "If operand flags ``\"writeonly\"`` or ``\"readwrite\"`` are used the\noperands may be views into the original data with the\n`WRITEBACKIFCOPY` flag. In this case `nditer` must be used as a\ncontext manager or the `nditer.close` method must be called before\nusing the result. The temporary data will be written back to the\noriginal data when the `__exit__` function is called but not before:"
      },
      {
        "type": "code",
        "value": "a = np.arange(6, dtype='i4')[::-2]\nwith np.nditer(a, [],\n       [['writeonly', 'updateifcopy']],\n       casting='unsafe',\n       op_dtypes=[np.dtype('f4')]) as i:\n   x = i.operands[0]\n   x[:] = [-1, -2, -3]\n   # a still unchanged here\na, x"
      },
      {
        "type": "text",
        "value": "It is important to note that once the iterator is exited, dangling\nreferences (like `x` in the example) may or may not share data with\nthe original data `a`. If writeback semantics were active, i.e. if\n`x.base.flags.writebackifcopy` is `True`, then exiting the iterator\nwill sever the connection between `x` and `a`, writing to `x` will\nno longer write to `a`. If writeback semantics are not active, then\n`x.data` will still point at some part of `a.data`, and writing to\none will affect the other."
      },
      {
        "type": "text",
        "value": "Context management and the `close` method appeared in version 1.15.0."
      }
    ],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/numpy/__init__.py",
  "item_line": null,
  "item_type": "<class 'type'>",
  "ordered_sections": [
    "Signature",
    "Summary",
    "Parameters",
    "Attributes",
    "Notes",
    "Examples"
  ],
  "references": null,
  "see_also": [],
  "signature": {
    "type": "Signature",
    "value": "nditer(op, flags=None, op_flags=None, op_dtypes=None, order='K', casting='safe', op_axes=None, itershape=None, buffersize=0)"
  },
  "type": "DocBlob"
}