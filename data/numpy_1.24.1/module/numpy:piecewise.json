{
  "aliases": [
    "numpy.piecewise"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Given a set of conditions and corresponding functions, evaluate each function on the input data wherever its condition is true."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "This is similar to choose or select, except that functions are evaluated on elements of "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "x",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "x"
            },
            {
              "type": "text",
              "value": " that satisfy the corresponding condition from "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "condlist",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "condlist"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "The result is          "
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": "      |--\n      |funclist[0](x[condlist[0]])\nout = |funclist[1](x[condlist[1]])\n      |...\n      |funclist[n2](x[condlist[n2]])\n      |--"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The input domain."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "x",
              "type": "Param",
              "type_": "ndarray or scalar"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Each boolean array corresponds to a function in "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "funclist",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "funclist"
                    },
                    {
                      "type": "text",
                      "value": ".  Wherever "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "condlist[i]"
                    },
                    {
                      "type": "text",
                      "value": " is True, "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "funclist[i](x)"
                    },
                    {
                      "type": "text",
                      "value": " is used as the output value."
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Each boolean array in "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "condlist",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "condlist"
                    },
                    {
                      "type": "text",
                      "value": " selects a piece of "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "x",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "x"
                    },
                    {
                      "type": "text",
                      "value": ", and should therefore be of the same shape as "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "x",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "x"
                    },
                    {
                      "type": "text",
                      "value": "."
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The length of "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "condlist",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "condlist"
                    },
                    {
                      "type": "text",
                      "value": " must correspond to that of "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "funclist",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "funclist"
                    },
                    {
                      "type": "text",
                      "value": ". If one extra function is given, i.e. if "
                    },
                    {
                      "type": "inlineCode",
                      "value": "len(funclist) == len(condlist) + 1"
                    },
                    {
                      "type": "text",
                      "value": ", then that extra function is the default value, used wherever all conditions are false."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "condlist",
              "type": "Param",
              "type_": "list of bool arrays or bool scalars"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Each function is evaluated over "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "x",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "x"
                    },
                    {
                      "type": "text",
                      "value": " wherever its corresponding condition is True.  It should take a 1d array as input and give an 1d array or a scalar value as output.  If, instead of a callable, a scalar is provided then a constant function ("
                    },
                    {
                      "type": "inlineCode",
                      "value": "lambda x: scalar"
                    },
                    {
                      "type": "text",
                      "value": ") is assumed."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "funclist",
              "type": "Param",
              "type_": "list of callables, f(x,*args,**kw), or scalars"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Any further arguments given to "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "module",
                      "reference": {
                        "kind": "module",
                        "module": "numpy",
                        "path": "numpy:piecewise",
                        "type": "RefInfo",
                        "version": "1.24.1"
                      },
                      "type": "Link",
                      "value": "piecewise"
                    },
                    {
                      "type": "text",
                      "value": " are passed to the functions upon execution, i.e., if called "
                    },
                    {
                      "type": "inlineCode",
                      "value": "piecewise(..., ..., 1, 'a')"
                    },
                    {
                      "type": "text",
                      "value": ", then each function is called as "
                    },
                    {
                      "type": "inlineCode",
                      "value": "f(x, 1, 'a')"
                    },
                    {
                      "type": "text",
                      "value": "."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "args",
              "type": "Param",
              "type_": "tuple, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Keyword arguments used in calling "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "module",
                      "reference": {
                        "kind": "module",
                        "module": "numpy",
                        "path": "numpy:piecewise",
                        "type": "RefInfo",
                        "version": "1.24.1"
                      },
                      "type": "Link",
                      "value": "piecewise"
                    },
                    {
                      "type": "text",
                      "value": " are passed to the functions upon execution, i.e., if called "
                    },
                    {
                      "type": "inlineCode",
                      "value": "piecewise(..., ..., alpha=1)"
                    },
                    {
                      "type": "text",
                      "value": ", then each function is called as "
                    },
                    {
                      "type": "inlineCode",
                      "value": "f(x, alpha=1)"
                    },
                    {
                      "type": "text",
                      "value": "."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "kw",
              "type": "Param",
              "type_": "dict, optional"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The output is the same shape and type as x and is found by calling the functions in "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "funclist",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "funclist"
                    },
                    {
                      "type": "text",
                      "value": " on the appropriate portions of "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "x",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "x"
                    },
                    {
                      "type": "text",
                      "value": ", as defined by the boolean arrays in "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "condlist",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "condlist"
                    },
                    {
                      "type": "text",
                      "value": ".  Portions not covered by any condition have a default value of 0."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "out",
              "type": "Param",
              "type_": "ndarray"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Evaluate a piecewise-defined function."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [
      {
        "type": "text",
        "value": "Define the sigma function, which is -1 for ``x < 0`` and +1 for ``x >= 0``."
      },
      {
        "type": "code",
        "value": "x = np.linspace(-2.5, 2.5, 6)\nnp.piecewise(x, [x < 0, x >= 0], [-1, 1])"
      },
      {
        "type": "text",
        "value": "Define the absolute value, which is ``-x`` for ``x <0`` and ``x`` for\n``x >= 0``."
      },
      {
        "type": "code",
        "value": "np.piecewise(x, [x < 0, x >= 0], [lambda x: -x, lambda x: x])"
      },
      {
        "type": "text",
        "value": "Apply the same function to a scalar value."
      },
      {
        "type": "code",
        "value": "y = -2\nnp.piecewise(y, [y < 0, y >= 0], [lambda x: -x, lambda x: x])"
      }
    ],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/numpy/lib/function_base.py",
  "item_line": 640,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns",
    "See Also",
    "Notes",
    "Examples"
  ],
  "references": null,
  "see_also": [
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "to-resolve",
          "module": "current-module",
          "path": "choose",
          "type": "RefInfo",
          "version": "current-version"
        },
        "type": "Link",
        "value": "choose"
      },
      "type": null
    },
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "to-resolve",
          "module": "current-module",
          "path": "select",
          "type": "RefInfo",
          "version": "current-version"
        },
        "type": "Link",
        "value": "select"
      },
      "type": null
    },
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "to-resolve",
          "module": "current-module",
          "path": "where",
          "type": "RefInfo",
          "version": "current-version"
        },
        "type": "Link",
        "value": "where"
      },
      "type": null
    }
  ],
  "signature": {
    "type": "Signature",
    "value": "(x, condlist, funclist, *args, **kw)"
  },
  "type": "DocBlob"
}