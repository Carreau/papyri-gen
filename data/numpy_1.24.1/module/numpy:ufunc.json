{
  "aliases": [
    "numpy.ufunc"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "To see the documentation for a specific ufunc, use "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "info"
            },
            {
              "type": "text",
              "value": ".  For example, "
            },
            {
              "type": "inlineCode",
              "value": "np.info(np.sin)"
            },
            {
              "type": "text",
              "value": ".  Because ufuncs are written in C (for speed) and linked into Python with NumPy's ufunc facility, Python's help() function finds this page whenever help() is called on a ufunc."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "A detailed explanation of ufuncs can be found in the docs for "
            },
            {
              "type": "inlineCode",
              "value": "ufuncs"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "children": [
                {
                  "type": "text",
                  "value": "Calling ufuncs:"
                }
              ],
              "type": "strong"
            },
            {
              "type": "text",
              "value": " "
            },
            {
              "type": "inlineCode",
              "value": "op(*x[, out], where=True, **kwargs)"
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Apply "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "op"
            },
            {
              "type": "text",
              "value": " to the arguments "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "*x",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "*x"
            },
            {
              "type": "text",
              "value": " elementwise, broadcasting the arguments."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "The broadcasting rules are:"
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Dimensions of length 1 may be prepended to either array."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Arrays may be repeated along dimensions of length 1."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            }
          ],
          "ordered": false,
          "spread": false,
          "start": 1,
          "type": "list"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Input arrays."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "*x",
              "type": "Param",
              "type_": "array_like"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Alternate array object(s) in which to put the result; if provided, it must have a shape that the inputs broadcast to. A tuple of arrays (possible only as a keyword argument) must have length equal to the number of outputs; use None for uninitialized outputs to be allocated by the ufunc."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "out",
              "type": "Param",
              "type_": "ndarray, None, or tuple of ndarray and None, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "This condition is broadcast over the input. At locations where the condition is True, the "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "out",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "out"
                    },
                    {
                      "type": "text",
                      "value": " array will be set to the ufunc result. Elsewhere, the "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "out",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "out"
                    },
                    {
                      "type": "text",
                      "value": " array will retain its original value. Note that if an uninitialized "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "out",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "out"
                    },
                    {
                      "type": "text",
                      "value": " array is created via the default "
                    },
                    {
                      "type": "inlineCode",
                      "value": "out=None"
                    },
                    {
                      "type": "text",
                      "value": ", locations within it where the condition is False will remain uninitialized."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "where",
              "type": "Param",
              "type_": "array_like, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "For other keyword-only arguments, see the "
                    },
                    {
                      "type": "inlineCode",
                      "value": "ufunc docs <ufuncs.kwargs>"
                    },
                    {
                      "type": "text",
                      "value": "."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "**kwargs",
              "type": "Param",
              "type_": ""
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "r",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "r"
                    },
                    {
                      "type": "text",
                      "value": " will have the shape that the arrays in "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "x"
                    },
                    {
                      "type": "text",
                      "value": " broadcast to; if "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "out",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "out"
                    },
                    {
                      "type": "text",
                      "value": " is provided, it will be returned. If not, "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "r",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "r"
                    },
                    {
                      "type": "text",
                      "value": " will be allocated and may contain uninitialized values. If the function has more than one output, then the result will be a tuple of arrays."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "r",
              "type": "Param",
              "type_": "ndarray or tuple of ndarray"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Functions that operate element by element on whole arrays."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/numpy/__init__.py",
  "item_line": null,
  "item_type": "<class 'type'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns"
  ],
  "references": null,
  "see_also": [],
  "signature": {
    "type": "Signature",
    "value": null
  },
  "type": "DocBlob"
}