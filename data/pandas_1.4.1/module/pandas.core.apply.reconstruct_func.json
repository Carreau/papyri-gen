{
  "_content": {
    "Attributes": {
      "children": [],
      "title": null
    },
    "Extended Summary": {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "If named aggregation is applied, "
                },
                "type": "Words"
              },
              {
                "data": {
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "module",
                    "module": "pandas",
                    "path": "pandas.core.arrays.categorical._cat_compare_op.<locals>.func",
                    "version": "1.4.1"
                  },
                  "value": "func"
                },
                "type": "Link"
              },
              {
                "data": {
                  "value": " will be None, and kwargs contains the column and aggregation function information to be parsed; If named aggregation is not applied, "
                },
                "type": "Words"
              },
              {
                "data": {
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "module",
                    "module": "pandas",
                    "path": "pandas.core.arrays.categorical._cat_compare_op.<locals>.func",
                    "version": "1.4.1"
                  },
                  "value": "func"
                },
                "type": "Link"
              },
              {
                "data": {
                  "value": " is either string (e.g. 'min') or Callable, or list of them (e.g. ['min', np.max]), or the dictionary of column name and str/Callable/list of them (e.g. {'A': 'min'}, or {'A': [np.min, lambda x: x]})"
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "If relabeling is True, will return relabeling, reconstructed func, column names, and the reconstructed order of columns. If relabeling is False, the columns and order will be None."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": null
    },
    "Methods": {
      "children": [],
      "title": null
    },
    "Notes": {
      "children": [],
      "title": null
    },
    "Other Parameters": {
      "children": [],
      "title": null
    },
    "Parameters": {
      "children": [
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "(e.g. ['min', np.max]) or dictionary (e.g. {'A': ['min', np.max]})."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "func: agg function (e.g. 'min' or Callable) or list of agg functions",
            "type_": ""
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "normalize_keyword_aggregation function for relabelling"
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "**kwargs: dict, kwargs used in is_multi_agg_with_relabel and",
            "type_": ""
          },
          "type": "Param"
        }
      ],
      "title": null
    },
    "Raises": {
      "children": [],
      "title": null
    },
    "Receives": {
      "children": [],
      "title": null
    },
    "Returns": {
      "children": [
        {
          "data": {
            "desc": [],
            "param": "",
            "type_": "relabelling: bool, if there is relabelling or not"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [],
            "param": "",
            "type_": "func: normalized and mangled func"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [],
            "param": "",
            "type_": "columns: list of column names"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [],
            "param": "",
            "type_": "order: list of columns indices"
          },
          "type": "Param"
        }
      ],
      "title": null
    },
    "Summary": {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "This is the internal function to reconstruct func given if there is relabeling or not and also normalize the keyword to get new order of columns."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": null
    },
    "Warnings": {
      "children": [],
      "title": null
    },
    "Warns": {
      "children": [],
      "title": null
    },
    "Yields": {
      "children": [],
      "title": null
    }
  },
  "aliases": [
    "pandas.core.apply.reconstruct_func"
  ],
  "arbitrary": [],
  "example_section_data": {
    "children": [
      {
        "data": {
          "ce_status": "compiled",
          "entries": [
            [
              "reconstruct_func",
              "pandas.core.apply.reconstruct_func",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "None",
              null,
              "kc"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "*",
              "",
              "o"
            ],
            [
              "*",
              "",
              "o"
            ],
            [
              "{",
              "",
              ""
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              "foo",
              null,
              "s2"
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              ":",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              "col",
              null,
              "s2"
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              "min",
              null,
              "s2"
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "}",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": "(True, defaultdict(<class 'list'>, {'col': ['min']}), ('foo',), array([0]))"
        },
        "type": "Code"
      },
      {
        "data": {
          "ce_status": "compiled",
          "entries": [
            [
              "reconstruct_func",
              "pandas.core.apply.reconstruct_func",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              "min",
              null,
              "s2"
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": "(False, 'min', None, None)"
        },
        "type": "Code"
      }
    ],
    "title": null
  },
  "item_file": "/pandas/core/apply.py",
  "item_line": 1206,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns",
    "Examples"
  ],
  "references": null,
  "refs": [
    "pandas.core.apply.reconstruct_func"
  ],
  "see_also": [],
  "signature": {
    "value": "reconstruct_func(func: 'AggFuncType | None', **kwargs) -> 'tuple[bool, AggFuncType | None, list[str] | None, list[int] | None]'"
  }
}