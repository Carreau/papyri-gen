{
  "aliases": [
    "pandas.core.base.IndexOpsMixin.to_numpy"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "title": null
    },
    "Extended Summary": {
      "children": [],
      "title": null
    },
    "Methods": {
      "children": [],
      "title": null
    },
    "Notes": {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "The returned array will be the same up to equality (values equal in "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "self"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " will be equal in the returned array; likewise for values that are not equal). When "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "self"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " contains an ExtensionArray, the dtype may be different. For example, for a category-dtype Series, "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "to_numpy()"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " will return a NumPy array and the categorical dtype will be lost."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "For NumPy dtypes, this will be a reference to the actual data stored in this Series or Index (assuming "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "copy=False"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": "). Modifying the result in place will modify the data stored in the Series or Index (not that we recommend doing that)."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "For extension types, "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "to_numpy()"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "may"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": " require copying data and coercing the result to a NumPy type (possibly object), which may be expensive. When you need a no-copy reference to the underlying data, "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "Series.array"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " should be used instead."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "This table lays out the different dtypes and default return types of "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "to_numpy()"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " for various dtypes within pandas."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "================== ================================ dtype              array type ================== ================================ category[T]        ndarray[T] (same dtype as input) period             ndarray[object] (Periods) interval           ndarray[object] (Intervals) IntegerNA          ndarray[object] datetime64[ns]     datetime64[ns] datetime64[ns, tz] ndarray[object] (Timestamps) ================== ================================"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": null
    },
    "Other Parameters": {
      "children": [],
      "title": null
    },
    "Parameters": {
      "children": [
        {
          "data": {
            "children": [
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "The dtype to pass to "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "numpy.asarray"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": "."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "dtype",
                "type_": "str or numpy.dtype, optional"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Whether to ensure that the returned value is not a view on another array. Note that "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "copy=False"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " does not "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": {
                              "value": "ensure"
                            }
                          },
                          "type": "Emph"
                        },
                        {
                          "data": {
                            "value": " that "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "to_numpy()"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " is no-copy. Rather, "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "copy=True"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " ensure that a copy is made, even if not strictly necessary."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "copy",
                "type_": "bool, default False"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "The value to use for missing values. The default value depends on "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "exists": true,
                            "kind": "module",
                            "reference": {
                              "kind": "module",
                              "module": "pandas",
                              "path": "pandas.core.arrays.sparse.dtype",
                              "version": "1.4.1"
                            },
                            "value": "dtype"
                          },
                          "type": "Link"
                        },
                        {
                          "data": {
                            "value": " and the type of the array."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  },
                  {
                    "data": {
                      "children": [],
                      "kind": "versionadded",
                      "title": "1.0.0"
                    },
                    "type": "Admonition"
                  }
                ],
                "param": "na_value",
                "type_": "Any, optional"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Additional keywords passed through to the "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "to_numpy"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " method of the underlying array (for extension arrays)."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  },
                  {
                    "data": {
                      "children": [],
                      "kind": "versionadded",
                      "title": "1.0.0"
                    },
                    "type": "Admonition"
                  }
                ],
                "param": "**kwargs",
                "type_": ""
              }
            ]
          },
          "type": "Parameters"
        }
      ],
      "title": null
    },
    "Raises": {
      "children": [],
      "title": null
    },
    "Receives": {
      "children": [],
      "title": null
    },
    "Returns": {
      "children": [
        {
          "data": {
            "children": [
              {
                "desc": [],
                "param": "",
                "type_": "numpy.ndarray"
              }
            ]
          },
          "type": "Parameters"
        }
      ],
      "title": null
    },
    "Summary": {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "A NumPy ndarray representing the values in this Series or Index."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": null
    },
    "Warnings": {
      "children": [],
      "title": null
    },
    "Warns": {
      "children": [],
      "title": null
    },
    "Yields": {
      "children": [],
      "title": null
    }
  },
  "example_section_data": {
    "children": [
      {
        "data": {
          "ce_status": "compiled",
          "entries": [
            {
              "link": {
                "data": "ser",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": " ",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": "=",
                "type": "str"
              },
              "type": "o"
            },
            {
              "link": {
                "data": " ",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": "pd",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": ".",
                "type": "str"
              },
              "type": "o"
            },
            {
              "link": {
                "data": "Series",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": "(",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": "pd",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": ".",
                "type": "str"
              },
              "type": "o"
            },
            {
              "link": {
                "data": "Categorical",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": "(",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": "[",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": "'",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "a",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "'",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": ",",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": " ",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": "'",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "b",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "'",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": ",",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": " ",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": "'",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "a",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "'",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "]",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": ")",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": ")",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": "\n",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": "ser",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": ".",
                "type": "str"
              },
              "type": "o"
            },
            {
              "link": {
                "data": "to_numpy",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": "(",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": ")",
                "type": "str"
              },
              "type": ""
            }
          ],
          "out": "array(['a', 'b', 'a'], dtype=object)"
        },
        "type": "Code2"
      },
      {
        "data": {
          "children": [
            {
              "data": {
                "value": "Specify the "
              },
              "type": "Words"
            },
            {
              "data": {
                "exists": true,
                "kind": "module",
                "reference": {
                  "kind": "module",
                  "module": "pandas",
                  "path": "pandas.core.arrays.sparse.dtype",
                  "version": "1.4.1"
                },
                "value": "dtype"
              },
              "type": "Link"
            },
            {
              "data": {
                "value": " to control how datetime-aware data is represented. Use "
              },
              "type": "Words"
            },
            {
              "data": {
                "value": [
                  "dtype=object"
                ]
              },
              "type": "Verbatim"
            },
            {
              "data": {
                "value": " to return an ndarray of pandas "
              },
              "type": "Words"
            },
            {
              "data": {
                "value": [
                  "Timestamp"
                ]
              },
              "type": "Verbatim"
            },
            {
              "data": {
                "value": " objects, each with the correct "
              },
              "type": "Words"
            },
            {
              "data": {
                "value": [
                  "tz"
                ]
              },
              "type": "Verbatim"
            },
            {
              "data": {
                "value": "."
              },
              "type": "Words"
            }
          ]
        },
        "type": "Paragraph"
      },
      {
        "data": {
          "ce_status": "compiled",
          "entries": [
            {
              "link": {
                "data": "ser",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": " ",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": "=",
                "type": "str"
              },
              "type": "o"
            },
            {
              "link": {
                "data": " ",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": "pd",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": ".",
                "type": "str"
              },
              "type": "o"
            },
            {
              "link": {
                "data": "Series",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": "(",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": "pd",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": ".",
                "type": "str"
              },
              "type": "o"
            },
            {
              "link": {
                "data": "date_range",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": "(",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": "'",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "2000",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "'",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": ",",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": " ",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": "periods",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": "=",
                "type": "str"
              },
              "type": "o"
            },
            {
              "link": {
                "data": "2",
                "type": "str"
              },
              "type": "mi"
            },
            {
              "link": {
                "data": ",",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": " ",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": "tz",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": "=",
                "type": "str"
              },
              "type": "o"
            },
            {
              "link": {
                "data": "\"",
                "type": "str"
              },
              "type": "s2"
            },
            {
              "link": {
                "data": "CET",
                "type": "str"
              },
              "type": "s2"
            },
            {
              "link": {
                "data": "\"",
                "type": "str"
              },
              "type": "s2"
            },
            {
              "link": {
                "data": ")",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": ")",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": "\n",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": "ser",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": ".",
                "type": "str"
              },
              "type": "o"
            },
            {
              "link": {
                "data": "to_numpy",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": "(",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": "dtype",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": "=",
                "type": "str"
              },
              "type": "o"
            },
            {
              "link": {
                "data": {
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "module",
                    "module": "builtins",
                    "path": "builtins.object",
                    "version": "*"
                  },
                  "value": "object"
                },
                "type": "Link"
              },
              "type": "nb"
            },
            {
              "link": {
                "data": ")",
                "type": "str"
              },
              "type": ""
            }
          ],
          "out": "array([Timestamp('2000-01-01 00:00:00+0100', tz='CET'),\n       Timestamp('2000-01-02 00:00:00+0100', tz='CET')],\n      dtype=object)"
        },
        "type": "Code2"
      },
      {
        "data": {
          "children": [
            {
              "data": {
                "value": "Or "
              },
              "type": "Words"
            },
            {
              "data": {
                "value": [
                  "dtype='datetime64[ns]'"
                ]
              },
              "type": "Verbatim"
            },
            {
              "data": {
                "value": " to return an ndarray of native datetime64 values. The values are converted to UTC and the timezone info is dropped."
              },
              "type": "Words"
            }
          ]
        },
        "type": "Paragraph"
      },
      {
        "data": {
          "ce_status": "compiled",
          "entries": [
            {
              "link": {
                "data": "ser",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": ".",
                "type": "str"
              },
              "type": "o"
            },
            {
              "link": {
                "data": "to_numpy",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": "(",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": "dtype",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": "=",
                "type": "str"
              },
              "type": "o"
            },
            {
              "link": {
                "data": "\"",
                "type": "str"
              },
              "type": "s2"
            },
            {
              "link": {
                "data": "datetime64[ns]",
                "type": "str"
              },
              "type": "s2"
            },
            {
              "link": {
                "data": "\"",
                "type": "str"
              },
              "type": "s2"
            },
            {
              "link": {
                "data": ")",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": "\n",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": "# doctest: +ELLIPSIS",
                "type": "str"
              },
              "type": "c1"
            }
          ],
          "out": "array(['1999-12-31T23:00:00.000000000', '2000-01-01T23:00:00...'],\n      dtype='datetime64[ns]')"
        },
        "type": "Code2"
      }
    ],
    "title": null
  },
  "item_file": "/pandas/core/base.py",
  "item_line": 430,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Parameters",
    "Returns",
    "See Also",
    "Notes",
    "Examples"
  ],
  "references": null,
  "see_also": [
    {
      "descriptions": [
        {
          "children": [
            {
              "data": {
                "value": "Get the actual data stored within."
              },
              "type": "Words"
            }
          ]
        }
      ],
      "name": {
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "to-resolve",
          "module": "current-module",
          "path": "Series.array",
          "version": "current-version"
        },
        "value": "Series.array"
      },
      "type": null
    },
    {
      "descriptions": [
        {
          "children": [
            {
              "data": {
                "value": "Get the actual data stored within."
              },
              "type": "Words"
            }
          ]
        }
      ],
      "name": {
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "to-resolve",
          "module": "current-module",
          "path": "Index.array",
          "version": "current-version"
        },
        "value": "Index.array"
      },
      "type": null
    },
    {
      "descriptions": [
        {
          "children": [
            {
              "data": {
                "value": "Similar method for DataFrame."
              },
              "type": "Words"
            }
          ]
        }
      ],
      "name": {
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "module",
          "module": "pandas",
          "path": "pandas.core.frame.DataFrame.to_numpy",
          "version": "1.4.1"
        },
        "value": "DataFrame.to_numpy"
      },
      "type": null
    }
  ],
  "signature": {
    "value": "to_numpy(self, dtype: 'npt.DTypeLike | None' = None, copy: 'bool' = False, na_value=<no_default>, **kwargs) -> 'np.ndarray'"
  }
}