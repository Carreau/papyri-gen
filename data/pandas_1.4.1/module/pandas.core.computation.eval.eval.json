{
  "_content": {
    "Attributes": {
      "children": [],
      "title": null
    },
    "Extended Summary": {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "The following arithmetic operations are supported: "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "+"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "-"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "*"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "/"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "**"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "%"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "//"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " (python engine only) along with the following boolean operations: "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "|"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " (or), "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "&"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " (and), and "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "~"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " (not). Additionally, the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "'pandas'"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " parser allows the use of "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "and"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "or"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", and "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "not"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " with the same semantics as the corresponding bitwise operators.  "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "~pandas.Series"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " and "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "~pandas.DataFrame"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " objects are supported and behave as they would with plain ol' Python evaluation."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": null
    },
    "Methods": {
      "children": [],
      "title": null
    },
    "Notes": {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "The "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "dtype"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " of any objects involved in an arithmetic "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "%"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " operation are recursively cast to "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "float64"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": "."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "See the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "enhancing performance <enhancingperf.eval>"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " documentation for more details."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": null
    },
    "Other Parameters": {
      "children": [],
      "title": null
    },
    "Parameters": {
      "children": [
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "The expression to evaluate. This string cannot contain any Python "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "target": "https://docs.python.org/3/reference/simple_stmts.html#simple-statements",
                        "value": "statements"
                      },
                      "type": "ExternalLink"
                    },
                    {
                      "data": {
                        "value": ", only Python "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "target": "https://docs.python.org/3/reference/simple_stmts.html#expression-statements",
                        "value": "expressions"
                      },
                      "type": "ExternalLink"
                    },
                    {
                      "data": {
                        "value": "."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "expr",
            "type_": "str"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "The parser to use to construct the syntax tree from the expression. The default of "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "'pandas'"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " parses code slightly different than standard Python. Alternatively, you can parse an expression using the "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "'python'"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " parser to retain strict Python semantics.  See the "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "enhancing performance <enhancingperf.eval>"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " documentation for more details."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "parser",
            "type_": "{'pandas', 'python'}, default 'pandas'"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "The engine used to evaluate the expression. Supported engines are"
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              },
              {
                "data": {
                  "children": [
                    {
                      "value": [
                        {
                          "data": {
                            "children": [
                              {
                                "dd": [
                                  {
                                    "data": {
                                      "inline": [
                                        {
                                          "data": {
                                            "value": "None"
                                          },
                                          "type": "Words"
                                        }
                                      ],
                                      "inner": []
                                    },
                                    "type": "Paragraph"
                                  }
                                ],
                                "dt": {
                                  "inline": [
                                    {
                                      "data": {
                                        "value": "None"
                                      },
                                      "type": "Words"
                                    }
                                  ],
                                  "inner": []
                                }
                              }
                            ]
                          },
                          "type": "DefList"
                        }
                      ]
                    },
                    {
                      "value": [
                        {
                          "data": {
                            "children": [
                              {
                                "dd": [
                                  {
                                    "data": {
                                      "inline": [
                                        {
                                          "data": {
                                            "value": "level python. This engine is generally not that useful."
                                          },
                                          "type": "Words"
                                        }
                                      ],
                                      "inner": []
                                    },
                                    "type": "Paragraph"
                                  }
                                ],
                                "dt": {
                                  "inline": [
                                    {
                                      "data": {
                                        "value": [
                                          "'python'"
                                        ]
                                      },
                                      "type": "Verbatim"
                                    },
                                    {
                                      "data": {
                                        "value": ": Performs operations as if you had "
                                      },
                                      "type": "Words"
                                    },
                                    {
                                      "data": {
                                        "value": [
                                          "eval"
                                        ]
                                      },
                                      "type": "Verbatim"
                                    },
                                    {
                                      "data": {
                                        "value": "'d in top"
                                      },
                                      "type": "Words"
                                    }
                                  ],
                                  "inner": []
                                }
                              }
                            ]
                          },
                          "type": "DefList"
                        }
                      ]
                    }
                  ]
                },
                "type": "BulletList"
              },
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "More backends may be available in the future."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "engine",
            "type_": "{'python', 'numexpr'}, default 'numexpr'"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Whether to use true division, like in Python >= 3."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              },
              {
                "data": {
                  "children": [
                    {
                      "inline": [
                        {
                          "data": {
                            "value": "1.0.0 "
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    }
                  ],
                  "kind": "deprecated",
                  "title": "TODO"
                },
                "type": "Admonition"
              }
            ],
            "param": "truediv",
            "type_": "bool, optional"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "A dictionary of local variables, taken from locals() by default."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "local_dict",
            "type_": "dict or None, optional"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "A dictionary of global variables, taken from globals() by default."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "global_dict",
            "type_": "dict or None, optional"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "A list of objects implementing the "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "__getitem__"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " special method that you can use to inject an additional collection of namespaces to use for variable lookup. For example, this is used in the "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "~DataFrame.query"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " method to inject the "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "DataFrame.index"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " and "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "DataFrame.columns"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " variables that refer to their respective "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "~pandas.DataFrame"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " instance attributes."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "resolvers",
            "type_": "list of dict-like or None, optional"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "The number of prior stack frames to traverse and add to the current scope. Most users will "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "content": {
                          "value": "not"
                        }
                      },
                      "type": "Strong"
                    },
                    {
                      "data": {
                        "value": " need to change this parameter."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "level",
            "type_": "int, optional"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "This is the target object for assignment. It is used when there is variable assignment in the expression. If so, then "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "local",
                        "reference": {
                          "kind": "local",
                          "module": null,
                          "path": "target",
                          "version": null
                        },
                        "value": "target"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": " must support item assignment with string keys, and if a copy is being returned, it must also support "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "module",
                        "reference": {
                          "kind": "api",
                          "module": "copy",
                          "path": "copy",
                          "version": "*"
                        },
                        "value": ".copy()"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": "."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "target",
            "type_": "object, optional, default None"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "If "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "local",
                        "reference": {
                          "kind": "local",
                          "module": null,
                          "path": "target",
                          "version": null
                        },
                        "value": "target"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": " is provided, and the expression mutates "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "local",
                        "reference": {
                          "kind": "local",
                          "module": null,
                          "path": "target",
                          "version": null
                        },
                        "value": "target"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": ", whether to modify "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "local",
                        "reference": {
                          "kind": "local",
                          "module": null,
                          "path": "target",
                          "version": null
                        },
                        "value": "target"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": " inplace. Otherwise, return a copy of "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "local",
                        "reference": {
                          "kind": "local",
                          "module": null,
                          "path": "target",
                          "version": null
                        },
                        "value": "target"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": " with the mutation."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "inplace",
            "type_": "bool, default False"
          },
          "type": "Param"
        }
      ],
      "title": null
    },
    "Raises": {
      "children": [
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "There are many instances where such an error can be raised:"
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              },
              {
                "data": {
                  "children": [
                    {
                      "value": [
                        {
                          "data": {
                            "inline": [
                              {
                                "data": {
                                  "domain": null,
                                  "role": null,
                                  "value": "target=None"
                                },
                                "type": "Directive"
                              },
                              {
                                "data": {
                                  "value": ", but the expression is multiline."
                                },
                                "type": "Words"
                              }
                            ],
                            "inner": []
                          },
                          "type": "Paragraph"
                        }
                      ]
                    },
                    {
                      "value": [
                        {
                          "data": {
                            "inline": [
                              {
                                "data": {
                                  "value": "The expression is multiline, but not all them have item assignment.   An example of such an arrangement is this:"
                                },
                                "type": "Words"
                              }
                            ],
                            "inner": []
                          },
                          "type": "Paragraph"
                        },
                        {
                          "data": {
                            "inline": [
                              {
                                "data": {
                                  "value": "a = b + 1   a + 2"
                                },
                                "type": "Words"
                              }
                            ],
                            "inner": []
                          },
                          "type": "Paragraph"
                        },
                        {
                          "data": {
                            "inline": [
                              {
                                "data": {
                                  "value": "Here, there are expressions on different lines, making it multiline,   but the last line has no variable assigned to the output of "
                                },
                                "type": "Words"
                              },
                              {
                                "data": {
                                  "domain": null,
                                  "role": null,
                                  "value": "a + 2"
                                },
                                "type": "Directive"
                              },
                              {
                                "data": {
                                  "value": "."
                                },
                                "type": "Words"
                              }
                            ],
                            "inner": []
                          },
                          "type": "Paragraph"
                        }
                      ]
                    },
                    {
                      "value": [
                        {
                          "data": {
                            "inline": [
                              {
                                "data": {
                                  "domain": null,
                                  "role": null,
                                  "value": "inplace=True"
                                },
                                "type": "Directive"
                              },
                              {
                                "data": {
                                  "value": ", but the expression is missing item assignment."
                                },
                                "type": "Words"
                              }
                            ],
                            "inner": []
                          },
                          "type": "Paragraph"
                        }
                      ]
                    },
                    {
                      "value": [
                        {
                          "data": {
                            "inline": [
                              {
                                "data": {
                                  "value": "Item assignment is provided, but the "
                                },
                                "type": "Words"
                              },
                              {
                                "data": {
                                  "exists": true,
                                  "kind": "local",
                                  "reference": {
                                    "kind": "local",
                                    "module": null,
                                    "path": "target",
                                    "version": null
                                  },
                                  "value": "target"
                                },
                                "type": "Link"
                              },
                              {
                                "data": {
                                  "value": " does not support   string item assignment."
                                },
                                "type": "Words"
                              }
                            ],
                            "inner": []
                          },
                          "type": "Paragraph"
                        }
                      ]
                    },
                    {
                      "value": [
                        {
                          "data": {
                            "inline": [
                              {
                                "data": {
                                  "value": "Item assignment is provided and "
                                },
                                "type": "Words"
                              },
                              {
                                "data": {
                                  "domain": null,
                                  "role": null,
                                  "value": "inplace=False"
                                },
                                "type": "Directive"
                              },
                              {
                                "data": {
                                  "value": ", but the "
                                },
                                "type": "Words"
                              },
                              {
                                "data": {
                                  "exists": true,
                                  "kind": "local",
                                  "reference": {
                                    "kind": "local",
                                    "module": null,
                                    "path": "target",
                                    "version": null
                                  },
                                  "value": "target"
                                },
                                "type": "Link"
                              },
                              {
                                "data": {
                                  "value": "   does not support the "
                                },
                                "type": "Words"
                              },
                              {
                                "data": {
                                  "exists": true,
                                  "kind": "module",
                                  "reference": {
                                    "kind": "api",
                                    "module": "copy",
                                    "path": "copy",
                                    "version": "*"
                                  },
                                  "value": ".copy()"
                                },
                                "type": "Link"
                              },
                              {
                                "data": {
                                  "value": " method"
                                },
                                "type": "Words"
                              }
                            ],
                            "inner": []
                          },
                          "type": "Paragraph"
                        }
                      ]
                    }
                  ]
                },
                "type": "BulletList"
              }
            ],
            "param": "",
            "type_": "ValueError"
          },
          "type": "Param"
        }
      ],
      "title": null
    },
    "Receives": {
      "children": [],
      "title": null
    },
    "Returns": {
      "children": [
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "The completion value of evaluating the given code or None if "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "inplace=True"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": "."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "",
            "type_": "ndarray, numeric scalar, DataFrame, Series, or None"
          },
          "type": "Param"
        }
      ],
      "title": null
    },
    "Summary": {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Evaluate a Python expression as a string using various backends."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": null
    },
    "Warnings": {
      "children": [],
      "title": null
    },
    "Warns": {
      "children": [],
      "title": null
    },
    "Yields": {
      "children": [],
      "title": null
    }
  },
  "aliases": [
    "pandas.eval"
  ],
  "arbitrary": [],
  "example_section_data": {
    "children": [
      {
        "data": {
          "ce_status": "compiled",
          "entries": [
            [
              "df",
              null,
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "pd",
              null,
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "DataFrame",
              null,
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "{",
              "",
              ""
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              "animal",
              null,
              "s2"
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              ":",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              "dog",
              null,
              "s2"
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              "pig",
              null,
              "s2"
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              "]",
              "",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              "age",
              null,
              "s2"
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              ":",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "10",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "20",
              "",
              "mi"
            ],
            [
              "]",
              "",
              ""
            ],
            [
              "}",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "df",
              null,
              ""
            ]
          ],
          "out": "  animal  age\n0    dog   10\n1    pig   20"
        },
        "type": "Code"
      },
      {
        "data": {
          "inline": [
            {
              "data": {
                "value": "We can add a new column using "
              },
              "type": "Words"
            },
            {
              "data": {
                "value": [
                  "pd.eval"
                ]
              },
              "type": "Verbatim"
            },
            {
              "data": {
                "value": ":"
              },
              "type": "Words"
            }
          ],
          "inner": []
        },
        "type": "Paragraph"
      },
      {
        "data": {
          "ce_status": "compiled",
          "entries": [
            [
              "pd",
              null,
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "eval",
              null,
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              "double_age = df.age * 2",
              "",
              "s2"
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "target",
              null,
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "df",
              null,
              ""
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": "  animal  age  double_age\n0    dog   10          20\n1    pig   20          40"
        },
        "type": "Code"
      }
    ],
    "title": null
  },
  "item_file": "/pandas/core/computation/eval.py",
  "item_line": 166,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns",
    "Raises",
    "See Also",
    "Notes",
    "Examples"
  ],
  "references": null,
  "refs": [
    "DataFrame.eval",
    "DataFrame.query"
  ],
  "see_also": [
    {
      "descriptions": [
        {
          "inline": [
            {
              "data": {
                "value": "Evaluates a boolean expression to query the columns of a frame."
              },
              "type": "Words"
            }
          ],
          "inner": []
        }
      ],
      "name": {
        "exists": true,
        "name": "DataFrame.query",
        "ref": "pandas.core.frame.DataFrame.query"
      },
      "type": null
    },
    {
      "descriptions": [
        {
          "inline": [
            {
              "data": {
                "value": "Evaluate a string describing operations on DataFrame columns."
              },
              "type": "Words"
            }
          ],
          "inner": []
        }
      ],
      "name": {
        "exists": true,
        "name": "DataFrame.eval",
        "ref": "pandas.core.frame.DataFrame.eval"
      },
      "type": null
    }
  ],
  "signature": {
    "value": "eval(expr: 'str | BinOp', parser: 'str' = 'pandas', engine: 'str | None' = None, truediv=<no_default>, local_dict=None, global_dict=None, resolvers=(), level=0, target=None, inplace=False)"
  }
}