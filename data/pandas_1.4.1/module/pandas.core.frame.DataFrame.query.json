{
  "_content": {
    "Attributes": {
      "children": [],
      "title": null
    },
    "Extended Summary": {
      "children": [],
      "title": null
    },
    "Methods": {
      "children": [],
      "title": null
    },
    "Notes": {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "The result of the evaluation of this expression is first passed to "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "DataFrame.loc"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " and if that fails because of a multidimensional key (e.g., a DataFrame) then the result will be passed to "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "DataFrame.__getitem__"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": "."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "This method uses the top-level "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "eval"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " function to evaluate the passed query."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "The "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "~pandas.DataFrame.query"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " method uses a slightly modified Python syntax by default. For example, the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "&"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " and "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "|"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " (bitwise) operators have the precedence of their boolean cousins, "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "and"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " and "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "or"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ". This "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "is"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": " syntactically valid Python, however the semantics are different."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "You can change the semantics of the expression by passing the keyword argument "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "parser='python'"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ". This enforces the same semantics as evaluation in Python space. Likewise, you can pass "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "engine='python'"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " to evaluate an expression using Python itself as a backend. This is not recommended as it is inefficient compared to using "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "numexpr"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " as the engine."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "The "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "DataFrame.index"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " and "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "DataFrame.columns"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " attributes of the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "~pandas.DataFrame"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " instance are placed in the query namespace by default, which allows you to treat both the index and columns of the frame as a column in the frame. The identifier "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "index"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " is used for the frame index; you can also use the name of the index to identify it in a query. Please note that Python keywords may not be used as identifiers."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "For further details and examples see the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "query"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " documentation in "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "indexing <indexing.query>"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": "."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": {
                    "value": "Backtick quoted variables"
                  }
                },
                "type": "Emph"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Backtick quoted variables are parsed as literal Python code and are converted internally to a Python valid identifier. This can lead to the following problems."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "During parsing a number of disallowed characters inside the backtick quoted string are replaced by strings that are allowed as a Python identifier. These characters include all operators in Python, the space character, the question mark, the exclamation mark, the dollar sign, and the euro sign. For other characters that fall outside the ASCII range (U+0001..U+007F) and those that are not further specified in PEP 3131, the query parser will raise an error. This excludes whitespace different than the space character, but also the hashtag (as it is used for comments) and the backtick itself (backtick can also not be escaped)."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "In a special case, quotes that make a pair around a backtick can confuse the parser. For example, "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "`it's` > `that's`"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " will raise an error, as it forms a quoted string ("
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "'s > `that'"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ") with a backtick inside."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "See also the Python documentation about lexical analysis (https://docs.python.org/3/reference/lexical_analysis.html) in combination with the source code in "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "pandas.core.computation.parsing"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": "."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": null
    },
    "Other Parameters": {
      "children": [],
      "title": null
    },
    "Parameters": {
      "children": [
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "The query string to evaluate."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              },
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "You can refer to variables in the environment by prefixing them with an '@' character like "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "@a + b"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": "."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              },
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "You can refer to column names that are not valid Python variable names by surrounding them in backticks. Thus, column names containing spaces or punctuations (besides underscores) or starting with digits must be surrounded by backticks. (For example, a column named \"Area (cm^2)\" would be referenced as "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "`Area (cm^2)`"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": "). Column names which are Python keywords (like \"list\", \"for\", \"import\", etc) cannot be used."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              },
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "For example, if one of your columns is called "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "a a"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " and you want to sum it with "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "b"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": ", your query should be "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "`a a` + b"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": "."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              },
              {
                "data": {
                  "children": [
                    {
                      "inline": [
                        {
                          "data": {
                            "value": "Backtick quoting introduced. "
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    }
                  ],
                  "kind": "versionadded",
                  "title": "0.25.0"
                },
                "type": "Admonition"
              },
              {
                "data": {
                  "children": [
                    {
                      "inline": [
                        {
                          "data": {
                            "value": "Expanding functionality of backtick quoting for more than only spaces. "
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    }
                  ],
                  "kind": "versionadded",
                  "title": "1.0.0"
                },
                "type": "Admonition"
              }
            ],
            "param": "expr",
            "type_": "str"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Whether the query should modify the data in place or return a modified copy."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "inplace",
            "type_": "bool"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "See the documentation for "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "eval"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " for complete details on the keyword arguments accepted by "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "DataFrame.query"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": "."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "**kwargs",
            "type_": ""
          },
          "type": "Param"
        }
      ],
      "title": null
    },
    "Raises": {
      "children": [],
      "title": null
    },
    "Receives": {
      "children": [],
      "title": null
    },
    "Returns": {
      "children": [
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "DataFrame resulting from the provided query expression or None if "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "inplace=True"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": "."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "",
            "type_": "DataFrame or None"
          },
          "type": "Param"
        }
      ],
      "title": null
    },
    "Summary": {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Query the columns of a DataFrame with a boolean expression."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": null
    },
    "Warnings": {
      "children": [],
      "title": null
    },
    "Warns": {
      "children": [],
      "title": null
    },
    "Yields": {
      "children": [],
      "title": null
    }
  },
  "aliases": [
    "pandas.DataFrame.query"
  ],
  "arbitrary": [],
  "example_section_data": {
    "children": [
      {
        "data": {
          "ce_status": "compiled",
          "entries": [
            [
              "df",
              null,
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "pd",
              null,
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "DataFrame",
              null,
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "{",
              "",
              ""
            ],
            [
              "'",
              "",
              "s1"
            ],
            [
              "A",
              null,
              "s1"
            ],
            [
              "'",
              "",
              "s1"
            ],
            [
              ":",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "range",
              "builtins.range",
              "nb"
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "1",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "6",
              "",
              "mi"
            ],
            [
              ")",
              "",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "                   ",
              "",
              ""
            ],
            [
              "'",
              "",
              "s1"
            ],
            [
              "B",
              null,
              "s1"
            ],
            [
              "'",
              "",
              "s1"
            ],
            [
              ":",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "range",
              "builtins.range",
              "nb"
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "10",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "0",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "-",
              "",
              "o"
            ],
            [
              "2",
              "",
              "mi"
            ],
            [
              ")",
              "",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "                   ",
              "",
              ""
            ],
            [
              "'",
              "",
              "s1"
            ],
            [
              "C C",
              "",
              "s1"
            ],
            [
              "'",
              "",
              "s1"
            ],
            [
              ":",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "range",
              "builtins.range",
              "nb"
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "10",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "5",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "-",
              "",
              "o"
            ],
            [
              "1",
              "",
              "mi"
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "}",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "df",
              null,
              ""
            ]
          ],
          "out": "   A   B  C C\n0  1  10   10\n1  2   8    9\n2  3   6    8\n3  4   4    7\n4  5   2    6"
        },
        "type": "Code"
      },
      {
        "data": {
          "ce_status": "compiled",
          "entries": [
            [
              "df",
              null,
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "query",
              null,
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "'",
              "",
              "s1"
            ],
            [
              "A > B",
              "",
              "s1"
            ],
            [
              "'",
              "",
              "s1"
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": "   A  B  C C\n4  5  2    6"
        },
        "type": "Code"
      },
      {
        "data": {
          "inline": [
            {
              "data": {
                "value": "The previous expression is equivalent to"
              },
              "type": "Words"
            }
          ],
          "inner": []
        },
        "type": "Paragraph"
      },
      {
        "data": {
          "ce_status": "compiled",
          "entries": [
            [
              "df",
              null,
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "df",
              null,
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "A",
              null,
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              ">",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "df",
              null,
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "B",
              null,
              ""
            ],
            [
              "]",
              "",
              ""
            ]
          ],
          "out": "   A  B  C C\n4  5  2    6"
        },
        "type": "Code"
      },
      {
        "data": {
          "inline": [
            {
              "data": {
                "value": "For columns with spaces in their name, you can use backtick quoting."
              },
              "type": "Words"
            }
          ],
          "inner": []
        },
        "type": "Paragraph"
      },
      {
        "data": {
          "ce_status": "compiled",
          "entries": [
            [
              "df",
              null,
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "query",
              null,
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "'",
              "",
              "s1"
            ],
            [
              "B == `C C`",
              "",
              "s1"
            ],
            [
              "'",
              "",
              "s1"
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": "   A   B  C C\n0  1  10   10"
        },
        "type": "Code"
      },
      {
        "data": {
          "inline": [
            {
              "data": {
                "value": "The previous expression is equivalent to"
              },
              "type": "Words"
            }
          ],
          "inner": []
        },
        "type": "Paragraph"
      },
      {
        "data": {
          "ce_status": "compiled",
          "entries": [
            [
              "df",
              null,
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "df",
              null,
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "B",
              null,
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "==",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "df",
              null,
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "'",
              "",
              "s1"
            ],
            [
              "C C",
              "",
              "s1"
            ],
            [
              "'",
              "",
              "s1"
            ],
            [
              "]",
              "",
              ""
            ],
            [
              "]",
              "",
              ""
            ]
          ],
          "out": "   A   B  C C\n0  1  10   10"
        },
        "type": "Code"
      }
    ],
    "title": null
  },
  "item_file": "/pandas/core/frame.py",
  "item_line": 3955,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Parameters",
    "Returns",
    "See Also",
    "Notes",
    "Examples"
  ],
  "references": null,
  "refs": [
    "DataFrame.eval",
    "builtins.range",
    "eval"
  ],
  "see_also": [
    {
      "descriptions": [
        {
          "inline": [
            {
              "data": {
                "value": "Evaluate a string describing operations on DataFrame columns."
              },
              "type": "Words"
            }
          ],
          "inner": []
        }
      ],
      "name": {
        "exists": true,
        "name": "eval",
        "ref": "pandas.core.frame.DataFrame.eval"
      },
      "type": null
    },
    {
      "descriptions": [
        {
          "inline": [
            {
              "data": {
                "value": "Evaluate a string describing operations on DataFrame columns."
              },
              "type": "Words"
            }
          ],
          "inner": []
        }
      ],
      "name": {
        "exists": true,
        "name": "DataFrame.eval",
        "ref": "pandas.core.frame.DataFrame.eval"
      },
      "type": null
    }
  ],
  "signature": {
    "value": "query(self, expr: 'str', inplace: 'bool' = False, **kwargs)"
  }
}