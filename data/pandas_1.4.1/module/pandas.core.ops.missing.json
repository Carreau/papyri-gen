{
  "_content": {
    "Attributes": {
      "children": [],
      "title": null
    },
    "Extended Summary": {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "In particular, pandas conventions regarding division by zero differ from numpy in the following ways:     1) np.array([-1, 0, 1], dtype=dtype1) // np.array([0, 0, 0], dtype=dtype2)        gives [nan, nan, nan] for most dtype combinations, and [0, 0, 0] for        the remaining pairs        (the remaining being dtype1==dtype2==intN and dtype==dtype2==uintN)."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": [
              "pandas convention is to return [-inf, nan, inf] for all dtype",
              "combinations.",
              "",
              "Note: the numpy behavior described here is py3-specific."
            ]
          },
          "type": "BlockQuote"
        },
        {
          "data": {
            "value": [
              "2) np.array([-1, 0, 1], dtype=dtype1) % np.array([0, 0, 0], dtype=dtype2)",
              "   gives precisely the same results as the // operation.",
              "",
              "   pandas convention is to return [nan, nan, nan] for all dtype",
              "   combinations.",
              "",
              "3) divmod behavior consistent with 1) and 2)."
            ]
          },
          "type": "BlockQuote"
        }
      ],
      "title": null
    },
    "Methods": {
      "children": [],
      "title": null
    },
    "Notes": {
      "children": [],
      "title": null
    },
    "Other Parameters": {
      "children": [],
      "title": null
    },
    "Parameters": {
      "children": [],
      "title": null
    },
    "Raises": {
      "children": [],
      "title": null
    },
    "Receives": {
      "children": [],
      "title": null
    },
    "Returns": {
      "children": [],
      "title": null
    },
    "Summary": {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Missing data handling for arithmetic operations."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": null
    },
    "Warnings": {
      "children": [],
      "title": null
    },
    "Warns": {
      "children": [],
      "title": null
    },
    "Yields": {
      "children": [],
      "title": null
    }
  },
  "aliases": [
    "pandas.core.ops.missing"
  ],
  "arbitrary": [
    {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Missing data handling for arithmetic operations."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "In particular, pandas conventions regarding division by zero differ from numpy in the following ways:     1) np.array([-1, 0, 1], dtype=dtype1) // np.array([0, 0, 0], dtype=dtype2)        gives [nan, nan, nan] for most dtype combinations, and [0, 0, 0] for        the remaining pairs        (the remaining being dtype1==dtype2==intN and dtype==dtype2==uintN)."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": [
              "pandas convention is to return [-inf, nan, inf] for all dtype",
              "combinations.",
              "",
              "Note: the numpy behavior described here is py3-specific."
            ]
          },
          "type": "BlockQuote"
        },
        {
          "data": {
            "value": [
              "2) np.array([-1, 0, 1], dtype=dtype1) % np.array([0, 0, 0], dtype=dtype2)",
              "   gives precisely the same results as the // operation.",
              "",
              "   pandas convention is to return [nan, nan, nan] for all dtype",
              "   combinations.",
              "",
              "3) divmod behavior consistent with 1) and 2)."
            ]
          },
          "type": "BlockQuote"
        }
      ],
      "title": null
    }
  ],
  "example_section_data": {
    "children": [],
    "title": null
  },
  "item_file": "/pandas/core/ops/missing.py",
  "item_line": 0,
  "item_type": "<class 'module'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary"
  ],
  "references": null,
  "refs": [],
  "see_also": [],
  "signature": {
    "value": null
  }
}