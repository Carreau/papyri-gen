{
  "_content": {
    "Attributes": {
      "children": [],
      "title": null
    },
    "Extended Summary": {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "For each subject string in the Series, extract groups from the first match of regular expression "
                },
                "type": "Words"
              },
              {
                "data": {
                  "exists": true,
                  "kind": "local",
                  "reference": {
                    "kind": "local",
                    "module": null,
                    "path": "pat",
                    "version": null
                  },
                  "value": "pat"
                },
                "type": "Link"
              },
              {
                "data": {
                  "value": "."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": null
    },
    "Methods": {
      "children": [],
      "title": null
    },
    "Notes": {
      "children": [],
      "title": null
    },
    "Other Parameters": {
      "children": [],
      "title": null
    },
    "Parameters": {
      "children": [
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Regular expression pattern with capturing groups."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "pat",
            "type_": "str"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Flags from the "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "re"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " module, e.g. "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "re.IGNORECASE"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": ", that modify regular expression matching for things like case, spaces, etc. For more details, see "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "re"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": "."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "flags",
            "type_": "int, default 0 (no flags)"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "If True, return DataFrame with one column per capture group. If False, return a Series/Index if there is one capture group or DataFrame if there are multiple capture groups."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "expand",
            "type_": "bool, default True"
          },
          "type": "Param"
        }
      ],
      "title": null
    },
    "Raises": {
      "children": [],
      "title": null
    },
    "Receives": {
      "children": [],
      "title": null
    },
    "Returns": {
      "children": [
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "A DataFrame with one row for each subject string, and one column for each group. Any capture group names in regular expression pat will be used for column names; otherwise capture group numbers will be used. The dtype of each result column is always object, even when no match is found. If "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "expand=False"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " and pat has only one capture group, then return a Series (if subject is a Series) or Index (if subject is an Index)."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "",
            "type_": "DataFrame or Series or Index"
          },
          "type": "Param"
        }
      ],
      "title": null
    },
    "Summary": {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Extract capture groups in the regex "
                },
                "type": "Words"
              },
              {
                "data": {
                  "exists": true,
                  "kind": "local",
                  "reference": {
                    "kind": "local",
                    "module": null,
                    "path": "pat",
                    "version": null
                  },
                  "value": "pat"
                },
                "type": "Link"
              },
              {
                "data": {
                  "value": " as columns in a DataFrame."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": null
    },
    "Warnings": {
      "children": [],
      "title": null
    },
    "Warns": {
      "children": [],
      "title": null
    },
    "Yields": {
      "children": [],
      "title": null
    }
  },
  "aliases": [
    "pandas.core.series.StringMethods.extract"
  ],
  "arbitrary": [],
  "example_section_data": {
    "children": [
      {
        "data": {
          "inline": [
            {
              "data": {
                "value": "A pattern with two groups will return a DataFrame with two columns. Non-matches will be NaN."
              },
              "type": "Words"
            }
          ],
          "inner": []
        },
        "type": "Paragraph"
      },
      {
        "data": {
          "ce_status": "compiled",
          "entries": [
            [
              "s",
              null,
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "pd",
              null,
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "Series",
              null,
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "'",
              "",
              "s1"
            ],
            [
              "a1",
              null,
              "s1"
            ],
            [
              "'",
              "",
              "s1"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "'",
              "",
              "s1"
            ],
            [
              "b2",
              null,
              "s1"
            ],
            [
              "'",
              "",
              "s1"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "'",
              "",
              "s1"
            ],
            [
              "c3",
              null,
              "s1"
            ],
            [
              "'",
              "",
              "s1"
            ],
            [
              "]",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "s",
              null,
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "str",
              null,
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "extract",
              null,
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "r",
              "builtins.str",
              "sa"
            ],
            [
              "'",
              "",
              "s1"
            ],
            [
              "([ab])(",
              "",
              "s1"
            ],
            [
              "\\",
              "",
              "s1"
            ],
            [
              "d)",
              "",
              "s1"
            ],
            [
              "'",
              "",
              "s1"
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": "    0    1\n0    a    1\n1    b    2\n2  NaN  NaN"
        },
        "type": "Code"
      },
      {
        "data": {
          "inline": [
            {
              "data": {
                "value": "A pattern may contain optional groups."
              },
              "type": "Words"
            }
          ],
          "inner": []
        },
        "type": "Paragraph"
      },
      {
        "data": {
          "ce_status": "compiled",
          "entries": [
            [
              "s",
              null,
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "str",
              null,
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "extract",
              null,
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "r",
              "builtins.str",
              "sa"
            ],
            [
              "'",
              "",
              "s1"
            ],
            [
              "([ab])?(",
              "",
              "s1"
            ],
            [
              "\\",
              "",
              "s1"
            ],
            [
              "d)",
              "",
              "s1"
            ],
            [
              "'",
              "",
              "s1"
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": "    0  1\n0    a  1\n1    b  2\n2  NaN  3"
        },
        "type": "Code"
      },
      {
        "data": {
          "inline": [
            {
              "data": {
                "value": "Named groups will become column names in the result."
              },
              "type": "Words"
            }
          ],
          "inner": []
        },
        "type": "Paragraph"
      },
      {
        "data": {
          "ce_status": "compiled",
          "entries": [
            [
              "s",
              null,
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "str",
              null,
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "extract",
              null,
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "r",
              "builtins.str",
              "sa"
            ],
            [
              "'",
              "",
              "s1"
            ],
            [
              "(?P<letter>[ab])(?P<digit>",
              "",
              "s1"
            ],
            [
              "\\",
              "",
              "s1"
            ],
            [
              "d)",
              "",
              "s1"
            ],
            [
              "'",
              "",
              "s1"
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": "letter digit\n0      a     1\n1      b     2\n2    NaN   NaN"
        },
        "type": "Code"
      },
      {
        "data": {
          "inline": [
            {
              "data": {
                "value": "A pattern with one group will return a DataFrame with one column if expand=True."
              },
              "type": "Words"
            }
          ],
          "inner": []
        },
        "type": "Paragraph"
      },
      {
        "data": {
          "ce_status": "compiled",
          "entries": [
            [
              "s",
              null,
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "str",
              null,
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "extract",
              null,
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "r",
              "builtins.str",
              "sa"
            ],
            [
              "'",
              "",
              "s1"
            ],
            [
              "[ab](",
              "",
              "s1"
            ],
            [
              "\\",
              "",
              "s1"
            ],
            [
              "d)",
              "",
              "s1"
            ],
            [
              "'",
              "",
              "s1"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "expand",
              null,
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "True",
              null,
              "kc"
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": "    0\n0    1\n1    2\n2  NaN"
        },
        "type": "Code"
      },
      {
        "data": {
          "inline": [
            {
              "data": {
                "value": "A pattern with one group will return a Series if expand=False."
              },
              "type": "Words"
            }
          ],
          "inner": []
        },
        "type": "Paragraph"
      },
      {
        "data": {
          "ce_status": "compiled",
          "entries": [
            [
              "s",
              null,
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "str",
              null,
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "extract",
              null,
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "r",
              "builtins.str",
              "sa"
            ],
            [
              "'",
              "",
              "s1"
            ],
            [
              "[ab](",
              "",
              "s1"
            ],
            [
              "\\",
              "",
              "s1"
            ],
            [
              "d)",
              "",
              "s1"
            ],
            [
              "'",
              "",
              "s1"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "expand",
              null,
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "False",
              null,
              "kc"
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": "0      1\n1      2\n2    NaN\ndtype: object"
        },
        "type": "Code"
      }
    ],
    "title": null
  },
  "item_file": "/pandas/core/strings/accessor.py",
  "item_line": 2438,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns",
    "See Also",
    "Examples"
  ],
  "references": null,
  "refs": [
    "builtins.str",
    "extractall"
  ],
  "see_also": [
    {
      "descriptions": [
        {
          "inline": [
            {
              "data": {
                "value": "Returns all matches (not just the first match)."
              },
              "type": "Words"
            }
          ],
          "inner": []
        }
      ],
      "name": {
        "exists": true,
        "name": "extractall",
        "ref": "pandas.core.strings.accessor.StringMethods.extractall"
      },
      "type": null
    }
  ],
  "signature": {
    "value": "extract(self, pat: 'str', flags: 'int' = 0, expand: 'bool' = True) -> 'DataFrame | Series | Index'"
  }
}