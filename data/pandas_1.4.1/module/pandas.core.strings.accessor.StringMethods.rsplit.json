{
  "_content": {
    "Attributes": {
      "children": [],
      "title": null
    },
    "Extended Summary": {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Splits the string in the Series/Index from the end, at the specified delimiter string."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": null
    },
    "Methods": {
      "children": [],
      "title": null
    },
    "Notes": {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "The handling of the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "exists": true,
                  "kind": "local",
                  "reference": {
                    "kind": "local",
                    "module": null,
                    "path": "n",
                    "version": null
                  },
                  "value": "n"
                },
                "type": "Link"
              },
              {
                "data": {
                  "value": " keyword depends on the number of found splits:"
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "value": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "If found splits > "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "exists": true,
                            "kind": "local",
                            "reference": {
                              "kind": "local",
                              "module": null,
                              "path": "n",
                              "version": null
                            },
                            "value": "n"
                          },
                          "type": "Link"
                        },
                        {
                          "data": {
                            "value": ",  make first "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "exists": true,
                            "kind": "local",
                            "reference": {
                              "kind": "local",
                              "module": null,
                              "path": "n",
                              "version": null
                            },
                            "value": "n"
                          },
                          "type": "Link"
                        },
                        {
                          "data": {
                            "value": " splits only"
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "value": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "If found splits <= "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "exists": true,
                            "kind": "local",
                            "reference": {
                              "kind": "local",
                              "module": null,
                              "path": "n",
                              "version": null
                            },
                            "value": "n"
                          },
                          "type": "Link"
                        },
                        {
                          "data": {
                            "value": ", make all splits"
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "value": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "If for a certain row the number of found splits < "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "exists": true,
                            "kind": "local",
                            "reference": {
                              "kind": "local",
                              "module": null,
                              "path": "n",
                              "version": null
                            },
                            "value": "n"
                          },
                          "type": "Link"
                        },
                        {
                          "data": {
                            "value": ",   append "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "None"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " for padding up to "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "exists": true,
                            "kind": "local",
                            "reference": {
                              "kind": "local",
                              "module": null,
                              "path": "n",
                              "version": null
                            },
                            "value": "n"
                          },
                          "type": "Link"
                        },
                        {
                          "data": {
                            "value": " if "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "expand=True"
                            ]
                          },
                          "type": "Verbatim"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ]
              }
            ]
          },
          "type": "BulletList"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "If using "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "expand=True"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", Series and Index callers return DataFrame and MultiIndex objects, respectively."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Use of "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "regex=False"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " with a "
                },
                "type": "Words"
              },
              {
                "data": {
                  "exists": true,
                  "kind": "local",
                  "reference": {
                    "kind": "local",
                    "module": null,
                    "path": "pat",
                    "version": null
                  },
                  "value": "pat"
                },
                "type": "Link"
              },
              {
                "data": {
                  "value": " as a compiled regex will raise an error."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": null
    },
    "Other Parameters": {
      "children": [],
      "title": null
    },
    "Parameters": {
      "children": [
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "String or regular expression to split on. If not specified, split on whitespace."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "pat",
            "type_": "str or compiled regex, optional"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Limit number of splits in output. "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "None"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": ", 0 and -1 will be interpreted as return all splits."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "n",
            "type_": "int, default -1 (all)"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Expand the split strings into separate columns."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              },
              {
                "data": {
                  "children": [
                    {
                      "value": [
                        {
                          "data": {
                            "inline": [
                              {
                                "data": {
                                  "value": "If "
                                },
                                "type": "Words"
                              },
                              {
                                "data": {
                                  "value": [
                                    "True"
                                  ]
                                },
                                "type": "Verbatim"
                              },
                              {
                                "data": {
                                  "value": ", return DataFrame/MultiIndex expanding dimensionality."
                                },
                                "type": "Words"
                              }
                            ],
                            "inner": []
                          },
                          "type": "Paragraph"
                        }
                      ]
                    },
                    {
                      "value": [
                        {
                          "data": {
                            "inline": [
                              {
                                "data": {
                                  "value": "If "
                                },
                                "type": "Words"
                              },
                              {
                                "data": {
                                  "value": [
                                    "False"
                                  ]
                                },
                                "type": "Verbatim"
                              },
                              {
                                "data": {
                                  "value": ", return Series/Index, containing lists of strings."
                                },
                                "type": "Words"
                              }
                            ],
                            "inner": []
                          },
                          "type": "Paragraph"
                        }
                      ]
                    }
                  ]
                },
                "type": "BulletList"
              }
            ],
            "param": "expand",
            "type_": "bool, default False"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Determines if the passed-in pattern is a regular expression:"
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              },
              {
                "data": {
                  "children": [
                    {
                      "value": [
                        {
                          "data": {
                            "inline": [
                              {
                                "data": {
                                  "value": "If "
                                },
                                "type": "Words"
                              },
                              {
                                "data": {
                                  "value": [
                                    "True"
                                  ]
                                },
                                "type": "Verbatim"
                              },
                              {
                                "data": {
                                  "value": ", assumes the passed-in pattern is a regular expression"
                                },
                                "type": "Words"
                              }
                            ],
                            "inner": []
                          },
                          "type": "Paragraph"
                        }
                      ]
                    },
                    {
                      "value": [
                        {
                          "data": {
                            "inline": [
                              {
                                "data": {
                                  "value": "If "
                                },
                                "type": "Words"
                              },
                              {
                                "data": {
                                  "value": [
                                    "False"
                                  ]
                                },
                                "type": "Verbatim"
                              },
                              {
                                "data": {
                                  "value": ", treats the pattern as a literal string."
                                },
                                "type": "Words"
                              }
                            ],
                            "inner": []
                          },
                          "type": "Paragraph"
                        }
                      ]
                    },
                    {
                      "value": [
                        {
                          "data": {
                            "inline": [
                              {
                                "data": {
                                  "value": "If "
                                },
                                "type": "Words"
                              },
                              {
                                "data": {
                                  "value": [
                                    "None"
                                  ]
                                },
                                "type": "Verbatim"
                              },
                              {
                                "data": {
                                  "value": " and "
                                },
                                "type": "Words"
                              },
                              {
                                "data": {
                                  "exists": true,
                                  "kind": "local",
                                  "reference": {
                                    "kind": "local",
                                    "module": null,
                                    "path": "pat",
                                    "version": null
                                  },
                                  "value": "pat"
                                },
                                "type": "Link"
                              },
                              {
                                "data": {
                                  "value": " length is 1, treats "
                                },
                                "type": "Words"
                              },
                              {
                                "data": {
                                  "exists": true,
                                  "kind": "local",
                                  "reference": {
                                    "kind": "local",
                                    "module": null,
                                    "path": "pat",
                                    "version": null
                                  },
                                  "value": "pat"
                                },
                                "type": "Link"
                              },
                              {
                                "data": {
                                  "value": " as a literal string."
                                },
                                "type": "Words"
                              }
                            ],
                            "inner": []
                          },
                          "type": "Paragraph"
                        }
                      ]
                    },
                    {
                      "value": [
                        {
                          "data": {
                            "inline": [
                              {
                                "data": {
                                  "value": "If "
                                },
                                "type": "Words"
                              },
                              {
                                "data": {
                                  "value": [
                                    "None"
                                  ]
                                },
                                "type": "Verbatim"
                              },
                              {
                                "data": {
                                  "value": " and "
                                },
                                "type": "Words"
                              },
                              {
                                "data": {
                                  "exists": true,
                                  "kind": "local",
                                  "reference": {
                                    "kind": "local",
                                    "module": null,
                                    "path": "pat",
                                    "version": null
                                  },
                                  "value": "pat"
                                },
                                "type": "Link"
                              },
                              {
                                "data": {
                                  "value": " length is not 1, treats "
                                },
                                "type": "Words"
                              },
                              {
                                "data": {
                                  "exists": true,
                                  "kind": "local",
                                  "reference": {
                                    "kind": "local",
                                    "module": null,
                                    "path": "pat",
                                    "version": null
                                  },
                                  "value": "pat"
                                },
                                "type": "Link"
                              },
                              {
                                "data": {
                                  "value": " as a regular expression."
                                },
                                "type": "Words"
                              }
                            ],
                            "inner": []
                          },
                          "type": "Paragraph"
                        }
                      ]
                    },
                    {
                      "value": [
                        {
                          "data": {
                            "inline": [
                              {
                                "data": {
                                  "value": "Cannot be set to False if "
                                },
                                "type": "Words"
                              },
                              {
                                "data": {
                                  "exists": true,
                                  "kind": "local",
                                  "reference": {
                                    "kind": "local",
                                    "module": null,
                                    "path": "pat",
                                    "version": null
                                  },
                                  "value": "pat"
                                },
                                "type": "Link"
                              },
                              {
                                "data": {
                                  "value": " is a compiled regex"
                                },
                                "type": "Words"
                              }
                            ],
                            "inner": []
                          },
                          "type": "Paragraph"
                        }
                      ]
                    }
                  ]
                },
                "type": "BulletList"
              },
              {
                "data": {
                  "children": [
                    {
                      "inline": [
                        {
                          "data": {
                            "value": "1.4.0 "
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    }
                  ],
                  "kind": "versionadded",
                  "title": "TODO"
                },
                "type": "Admonition"
              }
            ],
            "param": "regex",
            "type_": "bool, default None"
          },
          "type": "Param"
        }
      ],
      "title": null
    },
    "Raises": {
      "children": [
        {
          "data": {
            "desc": [
              {
                "data": {
                  "children": [
                    {
                      "value": [
                        {
                          "data": {
                            "inline": [
                              {
                                "data": {
                                  "value": "if "
                                },
                                "type": "Words"
                              },
                              {
                                "data": {
                                  "exists": true,
                                  "kind": "local",
                                  "reference": {
                                    "kind": "local",
                                    "module": null,
                                    "path": "regex",
                                    "version": null
                                  },
                                  "value": "regex"
                                },
                                "type": "Link"
                              },
                              {
                                "data": {
                                  "value": " is False and "
                                },
                                "type": "Words"
                              },
                              {
                                "data": {
                                  "exists": true,
                                  "kind": "local",
                                  "reference": {
                                    "kind": "local",
                                    "module": null,
                                    "path": "pat",
                                    "version": null
                                  },
                                  "value": "pat"
                                },
                                "type": "Link"
                              },
                              {
                                "data": {
                                  "value": " is a compiled regex"
                                },
                                "type": "Words"
                              }
                            ],
                            "inner": []
                          },
                          "type": "Paragraph"
                        }
                      ]
                    }
                  ]
                },
                "type": "BulletList"
              }
            ],
            "param": "",
            "type_": "ValueError"
          },
          "type": "Param"
        }
      ],
      "title": null
    },
    "Receives": {
      "children": [],
      "title": null
    },
    "Returns": {
      "children": [
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Type matches caller unless "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "expand=True"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " (see Notes)."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "",
            "type_": "Series, Index, DataFrame or MultiIndex"
          },
          "type": "Param"
        }
      ],
      "title": null
    },
    "Summary": {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Split strings around given separator/delimiter."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": null
    },
    "Warnings": {
      "children": [],
      "title": null
    },
    "Warns": {
      "children": [],
      "title": null
    },
    "Yields": {
      "children": [],
      "title": null
    }
  },
  "aliases": [
    "pandas.core.series.StringMethods.rsplit"
  ],
  "arbitrary": [],
  "example_section_data": {
    "children": [
      {
        "data": {
          "ce_status": "compiled",
          "entries": [
            [
              "s",
              null,
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "pd",
              null,
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "Series",
              null,
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "    ",
              "",
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "        ",
              "",
              ""
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              "this is a regular sentence",
              "",
              "s2"
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "        ",
              "",
              ""
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              "https://docs.python.org/3/tutorial/index.html",
              "",
              "s2"
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "        ",
              "",
              ""
            ],
            [
              "np",
              "numpy",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "nan",
              "builtins.float",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "    ",
              "",
              ""
            ],
            [
              "]",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "s",
              null,
              ""
            ]
          ],
          "out": "0                       this is a regular sentence\n1    https://docs.python.org/3/tutorial/index.html\n2                                              NaN\ndtype: object"
        },
        "type": "Code"
      },
      {
        "data": {
          "inline": [
            {
              "data": {
                "value": "In the default setting, the string is split by whitespace."
              },
              "type": "Words"
            }
          ],
          "inner": []
        },
        "type": "Paragraph"
      },
      {
        "data": {
          "ce_status": "compiled",
          "entries": [
            [
              "s",
              null,
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "str",
              null,
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "split",
              null,
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": "0                   [this, is, a, regular, sentence]\n1    [https://docs.python.org/3/tutorial/index.html]\n2                                                NaN\ndtype: object"
        },
        "type": "Code"
      },
      {
        "data": {
          "inline": [
            {
              "data": {
                "value": "Without the "
              },
              "type": "Words"
            },
            {
              "data": {
                "exists": true,
                "kind": "local",
                "reference": {
                  "kind": "local",
                  "module": null,
                  "path": "n",
                  "version": null
                },
                "value": "n"
              },
              "type": "Link"
            },
            {
              "data": {
                "value": " parameter, the outputs of "
              },
              "type": "Words"
            },
            {
              "data": {
                "exists": true,
                "kind": "module",
                "reference": {
                  "kind": "module",
                  "module": "pandas",
                  "path": "pandas.core.strings.accessor.StringMethods.rsplit",
                  "version": "1.4.1"
                },
                "value": "rsplit"
              },
              "type": "Link"
            },
            {
              "data": {
                "value": " and "
              },
              "type": "Words"
            },
            {
              "data": {
                "exists": true,
                "kind": "module",
                "reference": {
                  "kind": "module",
                  "module": "pandas",
                  "path": "pandas.core.strings.accessor.StringMethods.split",
                  "version": "1.4.1"
                },
                "value": "split"
              },
              "type": "Link"
            },
            {
              "data": {
                "value": " are identical."
              },
              "type": "Words"
            }
          ],
          "inner": []
        },
        "type": "Paragraph"
      },
      {
        "data": {
          "ce_status": "compiled",
          "entries": [
            [
              "s",
              null,
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "str",
              null,
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "rsplit",
              null,
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": "0                   [this, is, a, regular, sentence]\n1    [https://docs.python.org/3/tutorial/index.html]\n2                                                NaN\ndtype: object"
        },
        "type": "Code"
      },
      {
        "data": {
          "inline": [
            {
              "data": {
                "value": "The "
              },
              "type": "Words"
            },
            {
              "data": {
                "exists": true,
                "kind": "local",
                "reference": {
                  "kind": "local",
                  "module": null,
                  "path": "n",
                  "version": null
                },
                "value": "n"
              },
              "type": "Link"
            },
            {
              "data": {
                "value": " parameter can be used to limit the number of splits on the delimiter. The outputs of "
              },
              "type": "Words"
            },
            {
              "data": {
                "exists": true,
                "kind": "module",
                "reference": {
                  "kind": "module",
                  "module": "pandas",
                  "path": "pandas.core.strings.accessor.StringMethods.split",
                  "version": "1.4.1"
                },
                "value": "split"
              },
              "type": "Link"
            },
            {
              "data": {
                "value": " and "
              },
              "type": "Words"
            },
            {
              "data": {
                "exists": true,
                "kind": "module",
                "reference": {
                  "kind": "module",
                  "module": "pandas",
                  "path": "pandas.core.strings.accessor.StringMethods.rsplit",
                  "version": "1.4.1"
                },
                "value": "rsplit"
              },
              "type": "Link"
            },
            {
              "data": {
                "value": " are different."
              },
              "type": "Words"
            }
          ],
          "inner": []
        },
        "type": "Paragraph"
      },
      {
        "data": {
          "ce_status": "compiled",
          "entries": [
            [
              "s",
              null,
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "str",
              null,
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "split",
              null,
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "n",
              null,
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "2",
              "",
              "mi"
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": "0                     [this, is, a regular sentence]\n1    [https://docs.python.org/3/tutorial/index.html]\n2                                                NaN\ndtype: object"
        },
        "type": "Code"
      },
      {
        "data": {
          "ce_status": "compiled",
          "entries": [
            [
              "s",
              null,
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "str",
              null,
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "rsplit",
              null,
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "n",
              null,
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "2",
              "",
              "mi"
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": "0                     [this is a, regular, sentence]\n1    [https://docs.python.org/3/tutorial/index.html]\n2                                                NaN\ndtype: object"
        },
        "type": "Code"
      },
      {
        "data": {
          "inline": [
            {
              "data": {
                "value": "The "
              },
              "type": "Words"
            },
            {
              "data": {
                "exists": true,
                "kind": "local",
                "reference": {
                  "kind": "local",
                  "module": null,
                  "path": "pat",
                  "version": null
                },
                "value": "pat"
              },
              "type": "Link"
            },
            {
              "data": {
                "value": " parameter can be used to split by other characters."
              },
              "type": "Words"
            }
          ],
          "inner": []
        },
        "type": "Paragraph"
      },
      {
        "data": {
          "ce_status": "compiled",
          "entries": [
            [
              "s",
              null,
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "str",
              null,
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "split",
              null,
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "pat",
              null,
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              "/",
              "",
              "s2"
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": "0                         [this is a regular sentence]\n1    [https:, , docs.python.org, 3, tutorial, index...\n2                                                  NaN\ndtype: object"
        },
        "type": "Code"
      },
      {
        "data": {
          "inline": [
            {
              "data": {
                "value": "When using "
              },
              "type": "Words"
            },
            {
              "data": {
                "value": [
                  "expand=True"
                ]
              },
              "type": "Verbatim"
            },
            {
              "data": {
                "value": ", the split elements will expand out into separate columns. If NaN is present, it is propagated throughout the columns during the split."
              },
              "type": "Words"
            }
          ],
          "inner": []
        },
        "type": "Paragraph"
      },
      {
        "data": {
          "ce_status": "compiled",
          "entries": [
            [
              "s",
              null,
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "str",
              null,
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "split",
              null,
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "expand",
              null,
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "True",
              null,
              "kc"
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": "                                               0     1     2        3         4\n0                                           this    is     a  regular  sentence\n1  https://docs.python.org/3/tutorial/index.html  None  None     None      None\n2                                            NaN   NaN   NaN      NaN       NaN"
        },
        "type": "Code"
      },
      {
        "data": {
          "inline": [
            {
              "data": {
                "value": "For slightly more complex use cases like splitting the html document name from a url, a combination of parameter settings can be used."
              },
              "type": "Words"
            }
          ],
          "inner": []
        },
        "type": "Paragraph"
      },
      {
        "data": {
          "ce_status": "compiled",
          "entries": [
            [
              "s",
              null,
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "str",
              null,
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "rsplit",
              null,
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              "/",
              "",
              "s2"
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "n",
              null,
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "1",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "expand",
              null,
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "True",
              null,
              "kc"
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": "                                    0           1\n0          this is a regular sentence        None\n1  https://docs.python.org/3/tutorial  index.html\n2                                 NaN         NaN"
        },
        "type": "Code"
      },
      {
        "data": {
          "inline": [
            {
              "data": {
                "value": "Remember to escape special characters when explicitly using regular expressions."
              },
              "type": "Words"
            }
          ],
          "inner": []
        },
        "type": "Paragraph"
      },
      {
        "data": {
          "ce_status": "compiled",
          "entries": [
            [
              "s",
              null,
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "pd",
              null,
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "Series",
              null,
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              "foo and bar plus baz",
              "",
              "s2"
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              "]",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "s",
              null,
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "str",
              null,
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "split",
              null,
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "r",
              "builtins.str",
              "sa"
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              "and|plus",
              "",
              "s2"
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "expand",
              null,
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "True",
              null,
              "kc"
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": "    0   1   2\n0 foo bar baz"
        },
        "type": "Code"
      },
      {
        "data": {
          "inline": [
            {
              "data": {
                "value": "Regular expressions can be used to handle urls or file names. When "
              },
              "type": "Words"
            },
            {
              "data": {
                "exists": true,
                "kind": "local",
                "reference": {
                  "kind": "local",
                  "module": null,
                  "path": "pat",
                  "version": null
                },
                "value": "pat"
              },
              "type": "Link"
            },
            {
              "data": {
                "value": " is a string and "
              },
              "type": "Words"
            },
            {
              "data": {
                "value": [
                  "regex=None"
                ]
              },
              "type": "Verbatim"
            },
            {
              "data": {
                "value": " (the default), the given "
              },
              "type": "Words"
            },
            {
              "data": {
                "exists": true,
                "kind": "local",
                "reference": {
                  "kind": "local",
                  "module": null,
                  "path": "pat",
                  "version": null
                },
                "value": "pat"
              },
              "type": "Link"
            },
            {
              "data": {
                "value": " is compiled as a regex only if "
              },
              "type": "Words"
            },
            {
              "data": {
                "value": [
                  "len(pat) != 1"
                ]
              },
              "type": "Verbatim"
            },
            {
              "data": {
                "value": "."
              },
              "type": "Words"
            }
          ],
          "inner": []
        },
        "type": "Paragraph"
      },
      {
        "data": {
          "ce_status": "compiled",
          "entries": [
            [
              "s",
              null,
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "pd",
              null,
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "Series",
              null,
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "'",
              "",
              "s1"
            ],
            [
              "foojpgbar.jpg",
              "",
              "s1"
            ],
            [
              "'",
              "",
              "s1"
            ],
            [
              "]",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "s",
              null,
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "str",
              null,
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "split",
              null,
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "r",
              "builtins.str",
              "sa"
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              ".",
              "",
              "s2"
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "expand",
              null,
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "True",
              null,
              "kc"
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": "           0    1\n0  foojpgbar  jpg"
        },
        "type": "Code"
      },
      {
        "data": {
          "ce_status": "compiled",
          "entries": [
            [
              "s",
              null,
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "str",
              null,
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "split",
              null,
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "r",
              "builtins.str",
              "sa"
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              "\\",
              "",
              "s2"
            ],
            [
              ".jpg",
              "",
              "s2"
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "expand",
              null,
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "True",
              null,
              "kc"
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": "           0 1\n0  foojpgbar"
        },
        "type": "Code"
      },
      {
        "data": {
          "inline": [
            {
              "data": {
                "value": "When "
              },
              "type": "Words"
            },
            {
              "data": {
                "value": [
                  "regex=True"
                ]
              },
              "type": "Verbatim"
            },
            {
              "data": {
                "value": ", "
              },
              "type": "Words"
            },
            {
              "data": {
                "exists": true,
                "kind": "local",
                "reference": {
                  "kind": "local",
                  "module": null,
                  "path": "pat",
                  "version": null
                },
                "value": "pat"
              },
              "type": "Link"
            },
            {
              "data": {
                "value": " is interpreted as a regex"
              },
              "type": "Words"
            }
          ],
          "inner": []
        },
        "type": "Paragraph"
      },
      {
        "data": {
          "ce_status": "compiled",
          "entries": [
            [
              "s",
              null,
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "str",
              null,
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "split",
              null,
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "r",
              "builtins.str",
              "sa"
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              "\\",
              "",
              "s2"
            ],
            [
              ".jpg",
              "",
              "s2"
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "regex",
              null,
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "True",
              null,
              "kc"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "expand",
              null,
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "True",
              null,
              "kc"
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": "           0 1\n0  foojpgbar"
        },
        "type": "Code"
      },
      {
        "data": {
          "inline": [
            {
              "data": {
                "value": "A compiled regex can be passed as "
              },
              "type": "Words"
            },
            {
              "data": {
                "exists": true,
                "kind": "local",
                "reference": {
                  "kind": "local",
                  "module": null,
                  "path": "pat",
                  "version": null
                },
                "value": "pat"
              },
              "type": "Link"
            }
          ],
          "inner": []
        },
        "type": "Paragraph"
      },
      {
        "data": {
          "ce_status": "compiled",
          "entries": [
            [
              "import",
              null,
              "kn"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "re",
              "re",
              "nn"
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "s",
              null,
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "str",
              null,
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "split",
              null,
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "re",
              "re",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "compile",
              "re.compile",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "r",
              "builtins.str",
              "sa"
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              "\\",
              "",
              "s2"
            ],
            [
              ".jpg",
              "",
              "s2"
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              ")",
              "",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "expand",
              null,
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "True",
              null,
              "kc"
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": "           0 1\n0  foojpgbar"
        },
        "type": "Code"
      },
      {
        "data": {
          "inline": [
            {
              "data": {
                "value": "When "
              },
              "type": "Words"
            },
            {
              "data": {
                "value": [
                  "regex=False"
                ]
              },
              "type": "Verbatim"
            },
            {
              "data": {
                "value": ", "
              },
              "type": "Words"
            },
            {
              "data": {
                "exists": true,
                "kind": "local",
                "reference": {
                  "kind": "local",
                  "module": null,
                  "path": "pat",
                  "version": null
                },
                "value": "pat"
              },
              "type": "Link"
            },
            {
              "data": {
                "value": " is interpreted as the string itself"
              },
              "type": "Words"
            }
          ],
          "inner": []
        },
        "type": "Paragraph"
      },
      {
        "data": {
          "ce_status": "compiled",
          "entries": [
            [
              "s",
              null,
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "str",
              null,
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "split",
              null,
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "r",
              "builtins.str",
              "sa"
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              "\\",
              "",
              "s2"
            ],
            [
              ".jpg",
              "",
              "s2"
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "regex",
              null,
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "False",
              null,
              "kc"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "expand",
              null,
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "True",
              null,
              "kc"
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": "               0\n0  foojpgbar.jpg"
        },
        "type": "Code"
      }
    ],
    "title": null
  },
  "item_file": "/pandas/core/strings/accessor.py",
  "item_line": 853,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns",
    "Raises",
    "See Also",
    "Notes",
    "Examples"
  ],
  "references": null,
  "refs": [
    "Series.str.join",
    "Series.str.rsplit",
    "Series.str.split",
    "builtins.float",
    "builtins.str",
    "numpy",
    "re",
    "re.compile",
    "str.rsplit",
    "str.split"
  ],
  "see_also": [
    {
      "descriptions": [
        {
          "inline": [
            {
              "data": {
                "value": "Split strings around given separator/delimiter."
              },
              "type": "Words"
            }
          ],
          "inner": []
        }
      ],
      "name": {
        "exists": null,
        "name": "Series.str.split",
        "ref": null
      },
      "type": null
    },
    {
      "descriptions": [
        {
          "inline": [
            {
              "data": {
                "value": "Splits string around given separator/delimiter, starting from the right."
              },
              "type": "Words"
            }
          ],
          "inner": []
        }
      ],
      "name": {
        "exists": null,
        "name": "Series.str.rsplit",
        "ref": null
      },
      "type": null
    },
    {
      "descriptions": [
        {
          "inline": [
            {
              "data": {
                "value": "Join lists contained as elements in the Series/Index with passed delimiter."
              },
              "type": "Words"
            }
          ],
          "inner": []
        }
      ],
      "name": {
        "exists": null,
        "name": "Series.str.join",
        "ref": null
      },
      "type": null
    },
    {
      "descriptions": [
        {
          "inline": [
            {
              "data": {
                "value": "Standard library version for split."
              },
              "type": "Words"
            }
          ],
          "inner": []
        }
      ],
      "name": {
        "exists": null,
        "name": "str.split",
        "ref": null
      },
      "type": null
    },
    {
      "descriptions": [
        {
          "inline": [
            {
              "data": {
                "value": "Standard library version for rsplit."
              },
              "type": "Words"
            }
          ],
          "inner": []
        }
      ],
      "name": {
        "exists": null,
        "name": "str.rsplit",
        "ref": null
      },
      "type": null
    }
  ],
  "signature": {
    "value": "rsplit(self, pat=None, n=-1, expand=False)"
  }
}