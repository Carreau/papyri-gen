{
  "_content": {
    "Attributes": {
      "children": [],
      "title": null
    },
    "Extended Summary": {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Also supports optionally iterating or breaking of the file into chunks."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Additional help can be found in the online docs for "
                },
                "type": "Words"
              },
              {
                "data": {
                  "target": "https://pandas.pydata.org/pandas-docs/stable/user_guide/io.html",
                  "value": "IO Tools"
                },
                "type": "ExternalLink"
              },
              {
                "data": {
                  "value": "."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": null
    },
    "Methods": {
      "children": [],
      "title": null
    },
    "Notes": {
      "children": [],
      "title": null
    },
    "Other Parameters": {
      "children": [],
      "title": null
    },
    "Parameters": {
      "children": [
        {
          "data": {
            "children": [
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Any valid string path is acceptable. The string could be a URL. Valid URL schemes include http, ftp, s3, gs, and file. For file URLs, a host is expected. A local file could be: file://localhost/path/to/table.csv."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  },
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "If you want to pass in a path object, pandas accepts any "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "os.PathLike"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": "."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  },
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "By file-like object, we refer to objects with a "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "read()"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " method, such as a file handle (e.g. via builtin "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "open"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " function) or "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "StringIO"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": "."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "filepath_or_buffer",
                "type_": "str, path object or file-like object"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Delimiter to use. If sep is None, the C engine cannot automatically detect the separator, but the Python parsing engine can, meaning the latter will be used and automatically detect the separator by Python's builtin sniffer tool, "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "csv.Sniffer"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": ". In addition, separators longer than 1 character and different from "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "'\\s+'"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " will be interpreted as regular expressions and will also force the use of the Python parsing engine. Note that regex delimiters are prone to ignoring quoted data. Regex example: "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "'\\r\\t'"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": "."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "sep",
                "type_": "str, default ','"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Alias for sep."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "delimiter",
                "type_": "str, default ``None``"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Row number(s) to use as the column names, and the start of the data.  Default behavior is to infer the column names: if no names are passed the behavior is identical to "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "header=0"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " and column names are inferred from the first line of the file, if column names are passed explicitly then the behavior is identical to "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "header=None"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": ". Explicitly pass "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "header=0"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " to be able to replace existing names. The header can be a list of integers that specify row locations for a multi-index on the columns e.g. [0,1,3]. Intervening rows that are not specified will be skipped (e.g. 2 in this example is skipped). Note that this parameter ignores commented lines and empty lines if "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "skip_blank_lines=True"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": ", so "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "header=0"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " denotes the first line of data rather than the first line of the file."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "header",
                "type_": "int, list of int, None, default 'infer'"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "List of column names to use. If the file contains a header row, then you should explicitly pass "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "header=0"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " to override the column names. Duplicates in this list are not allowed."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "names",
                "type_": "array-like, optional"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Column(s) to use as the row labels of the "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "DataFrame"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": ", either given as string name or column index. If a sequence of int / str is given, a MultiIndex is used."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  },
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Note: "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "index_col=False"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " can be used to force pandas to "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": {
                              "value": "not"
                            }
                          },
                          "type": "Emph"
                        },
                        {
                          "data": {
                            "value": " use the first column as the index, e.g. when you have a malformed file with delimiters at the end of each line."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "index_col",
                "type_": "int, str, sequence of int / str, or False, optional, default ``None``"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Return a subset of the columns. If list-like, all elements must either be positional (i.e. integer indices into the document columns) or strings that correspond to column names provided either by the user in "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "domain": null,
                            "role": null,
                            "value": "names"
                          },
                          "type": "Directive"
                        },
                        {
                          "data": {
                            "value": " or inferred from the document header row(s). If "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "names"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " are given, the document header row(s) are not taken into account. For example, a valid list-like "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "domain": null,
                            "role": null,
                            "value": "usecols"
                          },
                          "type": "Directive"
                        },
                        {
                          "data": {
                            "value": " parameter would be "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "[0, 1, 2]"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " or "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "['foo', 'bar', 'baz']"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": ". Element order is ignored, so "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "usecols=[0, 1]"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " is the same as "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "[1, 0]"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": ". To instantiate a DataFrame from "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "data"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " with element order preserved use "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "pd.read_csv(data, usecols=['foo', 'bar'])[['foo', 'bar']]"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " for columns in "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "['foo', 'bar']"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " order or "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "pd.read_csv(data, usecols=['foo', 'bar'])[['bar', 'foo']]"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " for "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "['bar', 'foo']"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " order."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  },
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "If callable, the callable function will be evaluated against the column names, returning names where the callable function evaluates to True. An example of a valid callable argument would be "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "lambda x: x.upper() in\n['AAA', 'BBB', 'DDD']"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": ". Using this parameter results in much faster parsing time and lower memory usage."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "usecols",
                "type_": "list-like or callable, optional"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "If the parsed data only contains one column then return a Series."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  },
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "children": [
                              {
                                "data": {
                                  "value": "Append "
                                },
                                "type": "Words"
                              },
                              {
                                "data": {
                                  "value": [
                                    ".squeeze(\"columns\")"
                                  ]
                                },
                                "type": "Verbatim"
                              },
                              {
                                "data": {
                                  "value": " to the call to "
                                },
                                "type": "Words"
                              },
                              {
                                "data": {
                                  "value": [
                                    "read_csv"
                                  ]
                                },
                                "type": "Verbatim"
                              },
                              {
                                "data": {
                                  "value": " to squeeze the data."
                                },
                                "type": "Words"
                              }
                            ]
                          },
                          "type": "Paragraph"
                        }
                      ],
                      "kind": "deprecated",
                      "title": "1.4.0"
                    },
                    "type": "Admonition"
                  }
                ],
                "param": "squeeze",
                "type_": "bool, default False"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Prefix to add to column numbers when no header, e.g. 'X' for X0, X1, ..."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  },
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "children": [
                              {
                                "data": {
                                  "value": "Use a list comprehension on the DataFrame's columns after calling "
                                },
                                "type": "Words"
                              },
                              {
                                "data": {
                                  "value": [
                                    "read_csv"
                                  ]
                                },
                                "type": "Verbatim"
                              },
                              {
                                "data": {
                                  "value": "."
                                },
                                "type": "Words"
                              }
                            ]
                          },
                          "type": "Paragraph"
                        }
                      ],
                      "kind": "deprecated",
                      "title": "1.4.0"
                    },
                    "type": "Admonition"
                  }
                ],
                "param": "prefix",
                "type_": "str, optional"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Duplicate columns will be specified as 'X', 'X.1', ...'X.N', rather than 'X'...'X'. Passing in False will cause data to be overwritten if there are duplicate names in the columns."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "mangle_dupe_cols",
                "type_": "bool, default True"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Data type for data or columns. E.g. {'a': np.float64, 'b': np.int32, 'c': 'Int64'} Use "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "domain": null,
                            "role": null,
                            "value": "str"
                          },
                          "type": "Directive"
                        },
                        {
                          "data": {
                            "value": " or "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "domain": null,
                            "role": null,
                            "value": "object"
                          },
                          "type": "Directive"
                        },
                        {
                          "data": {
                            "value": " together with suitable "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "domain": null,
                            "role": null,
                            "value": "na_values"
                          },
                          "type": "Directive"
                        },
                        {
                          "data": {
                            "value": " settings to preserve and not interpret dtype. If converters are specified, they will be applied INSTEAD of dtype conversion."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "dtype",
                "type_": "Type name or dict of column -> type, optional"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Parser engine to use. The C and pyarrow engines are faster, while the python engine is currently more feature-complete. Multithreading is currently only supported by the pyarrow engine."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  },
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "children": [
                              {
                                "data": {
                                  "value": "The \"pyarrow\" engine was added as an "
                                },
                                "type": "Words"
                              },
                              {
                                "data": {
                                  "value": {
                                    "value": "experimental"
                                  }
                                },
                                "type": "Emph"
                              },
                              {
                                "data": {
                                  "value": " engine, and some features are unsupported, or may not work correctly, with this engine."
                                },
                                "type": "Words"
                              }
                            ]
                          },
                          "type": "Paragraph"
                        }
                      ],
                      "kind": "versionadded",
                      "title": "1.4.0"
                    },
                    "type": "Admonition"
                  }
                ],
                "param": "engine",
                "type_": "{'c', 'python', 'pyarrow'}, optional"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Dict of functions for converting values in certain columns. Keys can either be integers or column labels."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "converters",
                "type_": "dict, optional"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Values to consider as True."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "true_values",
                "type_": "list, optional"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Values to consider as False."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "false_values",
                "type_": "list, optional"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Skip spaces after delimiter."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "skipinitialspace",
                "type_": "bool, default False"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Line numbers to skip (0-indexed) or number of lines to skip (int) at the start of the file."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  },
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "If callable, the callable function will be evaluated against the row indices, returning True if the row should be skipped and False otherwise. An example of a valid callable argument would be "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "lambda x: x in [0, 2]"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": "."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "skiprows",
                "type_": "list-like, int or callable, optional"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Number of lines at bottom of file to skip (Unsupported with engine='c')."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "skipfooter",
                "type_": "int, default 0"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Number of rows of file to read. Useful for reading pieces of large files."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "nrows",
                "type_": "int, optional"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Additional strings to recognize as NA/NaN. If dict passed, specific per-column NA values.  By default the following values are interpreted as NaN: '', '#N/A', '#N/A N/A', '#NA', '-1.#IND', '-1.#QNAN', '-NaN', '-nan', '1.#IND', '1.#QNAN', '<NA>', 'N/A', 'NA', 'NULL', 'NaN', 'n/a', 'nan', 'null'."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "na_values",
                "type_": "scalar, str, list-like, or dict, optional"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Whether or not to include the default NaN values when parsing the data. Depending on whether "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "domain": null,
                            "role": null,
                            "value": "na_values"
                          },
                          "type": "Directive"
                        },
                        {
                          "data": {
                            "value": " is passed in, the behavior is as follows:"
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  },
                  {
                    "data": {
                      "children": [
                        {
                          "children": [
                            {
                              "data": {
                                "children": [
                                  {
                                    "data": {
                                      "value": "If "
                                    },
                                    "type": "Words"
                                  },
                                  {
                                    "data": {
                                      "domain": null,
                                      "role": null,
                                      "value": "keep_default_na"
                                    },
                                    "type": "Directive"
                                  },
                                  {
                                    "data": {
                                      "value": " is True, and "
                                    },
                                    "type": "Words"
                                  },
                                  {
                                    "data": {
                                      "domain": null,
                                      "role": null,
                                      "value": "na_values"
                                    },
                                    "type": "Directive"
                                  },
                                  {
                                    "data": {
                                      "value": " are specified, "
                                    },
                                    "type": "Words"
                                  },
                                  {
                                    "data": {
                                      "domain": null,
                                      "role": null,
                                      "value": "na_values"
                                    },
                                    "type": "Directive"
                                  },
                                  {
                                    "data": {
                                      "value": "   is appended to the default NaN values used for parsing."
                                    },
                                    "type": "Words"
                                  }
                                ]
                              },
                              "type": "Paragraph"
                            }
                          ]
                        },
                        {
                          "children": [
                            {
                              "data": {
                                "children": [
                                  {
                                    "data": {
                                      "value": "If "
                                    },
                                    "type": "Words"
                                  },
                                  {
                                    "data": {
                                      "domain": null,
                                      "role": null,
                                      "value": "keep_default_na"
                                    },
                                    "type": "Directive"
                                  },
                                  {
                                    "data": {
                                      "value": " is True, and "
                                    },
                                    "type": "Words"
                                  },
                                  {
                                    "data": {
                                      "domain": null,
                                      "role": null,
                                      "value": "na_values"
                                    },
                                    "type": "Directive"
                                  },
                                  {
                                    "data": {
                                      "value": " are not specified, only   the default NaN values are used for parsing."
                                    },
                                    "type": "Words"
                                  }
                                ]
                              },
                              "type": "Paragraph"
                            }
                          ]
                        },
                        {
                          "children": [
                            {
                              "data": {
                                "children": [
                                  {
                                    "data": {
                                      "value": "If "
                                    },
                                    "type": "Words"
                                  },
                                  {
                                    "data": {
                                      "domain": null,
                                      "role": null,
                                      "value": "keep_default_na"
                                    },
                                    "type": "Directive"
                                  },
                                  {
                                    "data": {
                                      "value": " is False, and "
                                    },
                                    "type": "Words"
                                  },
                                  {
                                    "data": {
                                      "domain": null,
                                      "role": null,
                                      "value": "na_values"
                                    },
                                    "type": "Directive"
                                  },
                                  {
                                    "data": {
                                      "value": " are specified, only   the NaN values specified "
                                    },
                                    "type": "Words"
                                  },
                                  {
                                    "data": {
                                      "domain": null,
                                      "role": null,
                                      "value": "na_values"
                                    },
                                    "type": "Directive"
                                  },
                                  {
                                    "data": {
                                      "value": " are used for parsing."
                                    },
                                    "type": "Words"
                                  }
                                ]
                              },
                              "type": "Paragraph"
                            }
                          ]
                        },
                        {
                          "children": [
                            {
                              "data": {
                                "children": [
                                  {
                                    "data": {
                                      "value": "If "
                                    },
                                    "type": "Words"
                                  },
                                  {
                                    "data": {
                                      "domain": null,
                                      "role": null,
                                      "value": "keep_default_na"
                                    },
                                    "type": "Directive"
                                  },
                                  {
                                    "data": {
                                      "value": " is False, and "
                                    },
                                    "type": "Words"
                                  },
                                  {
                                    "data": {
                                      "domain": null,
                                      "role": null,
                                      "value": "na_values"
                                    },
                                    "type": "Directive"
                                  },
                                  {
                                    "data": {
                                      "value": " are not specified, no   strings will be parsed as NaN."
                                    },
                                    "type": "Words"
                                  }
                                ]
                              },
                              "type": "Paragraph"
                            }
                          ]
                        }
                      ]
                    },
                    "type": "BulletList"
                  },
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Note that if "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "domain": null,
                            "role": null,
                            "value": "na_filter"
                          },
                          "type": "Directive"
                        },
                        {
                          "data": {
                            "value": " is passed in as False, the "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "domain": null,
                            "role": null,
                            "value": "keep_default_na"
                          },
                          "type": "Directive"
                        },
                        {
                          "data": {
                            "value": " and "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "domain": null,
                            "role": null,
                            "value": "na_values"
                          },
                          "type": "Directive"
                        },
                        {
                          "data": {
                            "value": " parameters will be ignored."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "keep_default_na",
                "type_": "bool, default True"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Detect missing value markers (empty strings and the value of na_values). In data without any NAs, passing na_filter=False can improve the performance of reading a large file."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "na_filter",
                "type_": "bool, default True"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Indicate number of NA values placed in non-numeric columns."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "verbose",
                "type_": "bool, default False"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "If True, skip over blank lines rather than interpreting as NaN values."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "skip_blank_lines",
                "type_": "bool, default True"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "The behavior is as follows:"
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "parse_dates",
                "type_": "bool or list of int or names or list of lists or dict, default False"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "If True and "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "domain": null,
                            "role": null,
                            "value": "parse_dates"
                          },
                          "type": "Directive"
                        },
                        {
                          "data": {
                            "value": " is enabled, pandas will attempt to infer the format of the datetime strings in the columns, and if it can be inferred, switch to a faster method of parsing them. In some cases this can increase the parsing speed by 5-10x."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "infer_datetime_format",
                "type_": "bool, default False"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "If True and "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "domain": null,
                            "role": null,
                            "value": "parse_dates"
                          },
                          "type": "Directive"
                        },
                        {
                          "data": {
                            "value": " specifies combining multiple columns then keep the original columns."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "keep_date_col",
                "type_": "bool, default False"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Function to use for converting a sequence of string columns to an array of datetime instances. The default uses "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "dateutil.parser.parser"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " to do the conversion. Pandas will try to call "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "domain": null,
                            "role": null,
                            "value": "date_parser"
                          },
                          "type": "Directive"
                        },
                        {
                          "data": {
                            "value": " in three different ways, advancing to the next if an exception occurs: 1) Pass one or more arrays (as defined by "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "domain": null,
                            "role": null,
                            "value": "parse_dates"
                          },
                          "type": "Directive"
                        },
                        {
                          "data": {
                            "value": ") as arguments; 2) concatenate (row-wise) the string values from the columns defined by "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "domain": null,
                            "role": null,
                            "value": "parse_dates"
                          },
                          "type": "Directive"
                        },
                        {
                          "data": {
                            "value": " into a single array and pass that; and 3) call "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "domain": null,
                            "role": null,
                            "value": "date_parser"
                          },
                          "type": "Directive"
                        },
                        {
                          "data": {
                            "value": " once for each row using one or more strings (corresponding to the columns defined by "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "domain": null,
                            "role": null,
                            "value": "parse_dates"
                          },
                          "type": "Directive"
                        },
                        {
                          "data": {
                            "value": ") as arguments."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "date_parser",
                "type_": "function, optional"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "DD/MM format dates, international and European format."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "dayfirst",
                "type_": "bool, default False"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "If True, use a cache of unique, converted dates to apply the datetime conversion. May produce significant speed-up when parsing duplicate date strings, especially ones with timezone offsets."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  },
                  {
                    "data": {
                      "children": [],
                      "kind": "versionadded",
                      "title": "0.25.0"
                    },
                    "type": "Admonition"
                  }
                ],
                "param": "cache_dates",
                "type_": "bool, default True"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Return TextFileReader object for iteration or getting chunks with "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "get_chunk()"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": "."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  },
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "children": [
                              {
                                "data": {
                                  "value": [
                                    "TextFileReader"
                                  ]
                                },
                                "type": "Verbatim"
                              },
                              {
                                "data": {
                                  "value": " is a context manager."
                                },
                                "type": "Words"
                              }
                            ]
                          },
                          "type": "Paragraph"
                        }
                      ],
                      "kind": "versionchanged",
                      "title": "1.2"
                    },
                    "type": "Admonition"
                  }
                ],
                "param": "iterator",
                "type_": "bool, default False"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Return TextFileReader object for iteration. See the "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "domain": null,
                            "role": null,
                            "value": "IO Tools docs\n<https://pandas.pydata.org/pandas-docs/stable/io.html#io-chunking>"
                          },
                          "type": "Directive"
                        },
                        {
                          "data": {
                            "value": " for more information on "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "iterator"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " and "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "chunksize"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": "."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  },
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "children": [
                              {
                                "data": {
                                  "value": [
                                    "TextFileReader"
                                  ]
                                },
                                "type": "Verbatim"
                              },
                              {
                                "data": {
                                  "value": " is a context manager."
                                },
                                "type": "Words"
                              }
                            ]
                          },
                          "type": "Paragraph"
                        }
                      ],
                      "kind": "versionchanged",
                      "title": "1.2"
                    },
                    "type": "Admonition"
                  }
                ],
                "param": "chunksize",
                "type_": "int, optional"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "For on-the-fly decompression of on-disk data. If 'infer' and '%s' is path-like, then detect compression from the following extensions: '.gz', '.bz2', '.zip', '.xz', or '.zst' (otherwise no compression). If using 'zip', the ZIP file must contain only one data file to be read in. Set to "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "None"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " for no decompression. Can also be a dict with key "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "'method'"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " set to one of {"
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "'zip'"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": ", "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "'gzip'"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": ", "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "'bz2'"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": ", "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "'zstd'"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": "} and other key-value pairs are forwarded to "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "zipfile.ZipFile"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": ", "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "gzip.GzipFile"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": ", "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "bz2.BZ2File"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": ", or "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "zstandard.ZstdDecompressor"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": ", respectively. As an example, the following could be passed for Zstandard decompression using a custom compression dictionary: "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "compression={'method': 'zstd', 'dict_data': my_compression_dict}"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": "."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  },
                  {
                    "data": {
                      "children": [],
                      "kind": "versionchanged",
                      "title": "1.4.0 Zstandard support."
                    },
                    "type": "Admonition"
                  }
                ],
                "param": "compression",
                "type_": "str or dict, default 'infer'"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Thousands separator."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "thousands",
                "type_": "str, optional"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Character to recognize as decimal point (e.g. use ',' for European data)."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "decimal",
                "type_": "str, default '.'"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Character to break file into lines. Only valid with C parser."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "lineterminator",
                "type_": "str (length 1), optional"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "The character used to denote the start and end of a quoted item. Quoted items can include the delimiter and it will be ignored."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "quotechar",
                "type_": "str (length 1), optional"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Control field quoting behavior per "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "csv.QUOTE_*"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " constants. Use one of QUOTE_MINIMAL (0), QUOTE_ALL (1), QUOTE_NONNUMERIC (2) or QUOTE_NONE (3)."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "quoting",
                "type_": "int or csv.QUOTE_* instance, default 0"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "When quotechar is specified and quoting is not "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "QUOTE_NONE"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": ", indicate whether or not to interpret two consecutive quotechar elements INSIDE a field as a single "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "quotechar"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " element."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "doublequote",
                "type_": "bool, default ``True``"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "One-character string used to escape other characters."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "escapechar",
                "type_": "str (length 1), optional"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Indicates remainder of line should not be parsed. If found at the beginning of a line, the line will be ignored altogether. This parameter must be a single character. Like empty lines (as long as "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "skip_blank_lines=True"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": "), fully commented lines are ignored by the parameter "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "domain": null,
                            "role": null,
                            "value": "header"
                          },
                          "type": "Directive"
                        },
                        {
                          "data": {
                            "value": " but not by "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "exists": true,
                            "kind": "module",
                            "reference": {
                              "kind": "module",
                              "module": "pandas",
                              "path": "pandas.io.html._get_skiprows",
                              "version": "1.4.1"
                            },
                            "value": "skiprows"
                          },
                          "type": "Link"
                        },
                        {
                          "data": {
                            "value": ". For example, if "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "comment='#'"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": ", parsing "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "#empty\\na,b,c\\n1,2,3"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " with "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "header=0"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " will result in 'a,b,c' being treated as the header."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "comment",
                "type_": "str, optional"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Encoding to use for UTF when reading/writing (ex. 'utf-8'). "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "domain": null,
                            "role": null,
                            "value": "List of Python\nstandard encodings\n<https://docs.python.org/3/library/codecs.html#standard-encodings>"
                          },
                          "type": "Directive"
                        },
                        {
                          "data": {
                            "value": " ."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  },
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "children": [
                              {
                                "data": {
                                  "value": "When "
                                },
                                "type": "Words"
                              },
                              {
                                "data": {
                                  "value": [
                                    "encoding"
                                  ]
                                },
                                "type": "Verbatim"
                              },
                              {
                                "data": {
                                  "value": " is "
                                },
                                "type": "Words"
                              },
                              {
                                "data": {
                                  "value": [
                                    "None"
                                  ]
                                },
                                "type": "Verbatim"
                              },
                              {
                                "data": {
                                  "value": ", "
                                },
                                "type": "Words"
                              },
                              {
                                "data": {
                                  "value": [
                                    "errors=\"replace\""
                                  ]
                                },
                                "type": "Verbatim"
                              },
                              {
                                "data": {
                                  "value": " is passed to "
                                },
                                "type": "Words"
                              },
                              {
                                "data": {
                                  "value": [
                                    "open()"
                                  ]
                                },
                                "type": "Verbatim"
                              },
                              {
                                "data": {
                                  "value": ". Otherwise, "
                                },
                                "type": "Words"
                              },
                              {
                                "data": {
                                  "value": [
                                    "errors=\"strict\""
                                  ]
                                },
                                "type": "Verbatim"
                              },
                              {
                                "data": {
                                  "value": " is passed to "
                                },
                                "type": "Words"
                              },
                              {
                                "data": {
                                  "value": [
                                    "open()"
                                  ]
                                },
                                "type": "Verbatim"
                              },
                              {
                                "data": {
                                  "value": ". This behavior was previously only the case for "
                                },
                                "type": "Words"
                              },
                              {
                                "data": {
                                  "value": [
                                    "engine=\"python\""
                                  ]
                                },
                                "type": "Verbatim"
                              },
                              {
                                "data": {
                                  "value": "."
                                },
                                "type": "Words"
                              }
                            ]
                          },
                          "type": "Paragraph"
                        }
                      ],
                      "kind": "versionchanged",
                      "title": "1.2"
                    },
                    "type": "Admonition"
                  },
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "children": [
                              {
                                "data": {
                                  "value": [
                                    "encoding_errors"
                                  ]
                                },
                                "type": "Verbatim"
                              },
                              {
                                "data": {
                                  "value": " is a new argument. "
                                },
                                "type": "Words"
                              },
                              {
                                "data": {
                                  "value": [
                                    "encoding"
                                  ]
                                },
                                "type": "Verbatim"
                              },
                              {
                                "data": {
                                  "value": " has no longer an influence on how encoding errors are handled."
                                },
                                "type": "Words"
                              }
                            ]
                          },
                          "type": "Paragraph"
                        }
                      ],
                      "kind": "versionchanged",
                      "title": "1.3.0"
                    },
                    "type": "Admonition"
                  }
                ],
                "param": "encoding",
                "type_": "str, optional"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "How encoding errors are treated. "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "domain": null,
                            "role": null,
                            "value": "List of possible values\n<https://docs.python.org/3/library/codecs.html#error-handlers>"
                          },
                          "type": "Directive"
                        },
                        {
                          "data": {
                            "value": " ."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  },
                  {
                    "data": {
                      "children": [],
                      "kind": "versionadded",
                      "title": "1.3.0"
                    },
                    "type": "Admonition"
                  }
                ],
                "param": "encoding_errors",
                "type_": "str, optional, default \"strict\""
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "If provided, this parameter will override values (default or not) for the following parameters: "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "domain": null,
                            "role": null,
                            "value": "delimiter"
                          },
                          "type": "Directive"
                        },
                        {
                          "data": {
                            "value": ", "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "domain": null,
                            "role": null,
                            "value": "doublequote"
                          },
                          "type": "Directive"
                        },
                        {
                          "data": {
                            "value": ", "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "domain": null,
                            "role": null,
                            "value": "escapechar"
                          },
                          "type": "Directive"
                        },
                        {
                          "data": {
                            "value": ", "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "domain": null,
                            "role": null,
                            "value": "skipinitialspace"
                          },
                          "type": "Directive"
                        },
                        {
                          "data": {
                            "value": ", "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "domain": null,
                            "role": null,
                            "value": "quotechar"
                          },
                          "type": "Directive"
                        },
                        {
                          "data": {
                            "value": ", and "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "domain": null,
                            "role": null,
                            "value": "quoting"
                          },
                          "type": "Directive"
                        },
                        {
                          "data": {
                            "value": ". If it is necessary to override values, a ParserWarning will be issued. See csv.Dialect documentation for more details."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "dialect",
                "type_": "str or csv.Dialect, optional"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Lines with too many fields (e.g. a csv line with too many commas) will by default cause an exception to be raised, and no DataFrame will be returned. If False, then these \"bad lines\" will be dropped from the DataFrame that is returned."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  },
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "children": [
                              {
                                "data": {
                                  "value": "The "
                                },
                                "type": "Words"
                              },
                              {
                                "data": {
                                  "value": [
                                    "on_bad_lines"
                                  ]
                                },
                                "type": "Verbatim"
                              },
                              {
                                "data": {
                                  "value": " parameter should be used instead to specify behavior upon encountering a bad line instead."
                                },
                                "type": "Words"
                              }
                            ]
                          },
                          "type": "Paragraph"
                        }
                      ],
                      "kind": "deprecated",
                      "title": "1.3.0"
                    },
                    "type": "Admonition"
                  }
                ],
                "param": "error_bad_lines",
                "type_": "bool, optional, default ``None``"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "If error_bad_lines is False, and warn_bad_lines is True, a warning for each \"bad line\" will be output."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  },
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "children": [
                              {
                                "data": {
                                  "value": "The "
                                },
                                "type": "Words"
                              },
                              {
                                "data": {
                                  "value": [
                                    "on_bad_lines"
                                  ]
                                },
                                "type": "Verbatim"
                              },
                              {
                                "data": {
                                  "value": " parameter should be used instead to specify behavior upon encountering a bad line instead."
                                },
                                "type": "Words"
                              }
                            ]
                          },
                          "type": "Paragraph"
                        }
                      ],
                      "kind": "deprecated",
                      "title": "1.3.0"
                    },
                    "type": "Admonition"
                  }
                ],
                "param": "warn_bad_lines",
                "type_": "bool, optional, default ``None``"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Specifies what to do upon encountering a bad line (a line with too many fields). Allowed values are :"
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  },
                  {
                    "data": {
                      "value": [
                        "- 'error', raise an Exception when a bad line is encountered.",
                        "- 'warn', raise a warning when a bad line is encountered and skip that line.",
                        "- 'skip', skip bad lines without raising or warning when they are encountered."
                      ]
                    },
                    "type": "BlockQuote"
                  },
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "children": [
                              {
                                "children": [
                                  {
                                    "data": {
                                      "children": [
                                        {
                                          "data": {
                                            "value": "callable, function with signature   "
                                          },
                                          "type": "Words"
                                        },
                                        {
                                          "data": {
                                            "value": [
                                              "(bad_line: list[str]) -> list[str] | None"
                                            ]
                                          },
                                          "type": "Verbatim"
                                        },
                                        {
                                          "data": {
                                            "value": " that will process a single   bad line. "
                                          },
                                          "type": "Words"
                                        },
                                        {
                                          "data": {
                                            "value": [
                                              "bad_line"
                                            ]
                                          },
                                          "type": "Verbatim"
                                        },
                                        {
                                          "data": {
                                            "value": " is a list of strings split by the "
                                          },
                                          "type": "Words"
                                        },
                                        {
                                          "data": {
                                            "value": [
                                              "sep"
                                            ]
                                          },
                                          "type": "Verbatim"
                                        },
                                        {
                                          "data": {
                                            "value": ".   If the function returns "
                                          },
                                          "type": "Words"
                                        },
                                        {
                                          "data": {
                                            "value": [
                                              "None"
                                            ]
                                          },
                                          "type": "Verbatim"
                                        },
                                        {
                                          "data": {
                                            "value": ", the bad line will be ignored.   If the function returns a new list of strings with more elements than   expected, a "
                                          },
                                          "type": "Words"
                                        },
                                        {
                                          "data": {
                                            "value": [
                                              "ParserWarning"
                                            ]
                                          },
                                          "type": "Verbatim"
                                        },
                                        {
                                          "data": {
                                            "value": " will be emitted while dropping extra elements.   Only supported when "
                                          },
                                          "type": "Words"
                                        },
                                        {
                                          "data": {
                                            "value": [
                                              "engine=\"python\""
                                            ]
                                          },
                                          "type": "Verbatim"
                                        }
                                      ]
                                    },
                                    "type": "Paragraph"
                                  }
                                ]
                              }
                            ]
                          },
                          "type": "BulletList"
                        }
                      ],
                      "kind": "versionadded",
                      "title": "1.3.0"
                    },
                    "type": "Admonition"
                  },
                  {
                    "data": {
                      "children": [],
                      "kind": "versionadded",
                      "title": "1.4.0"
                    },
                    "type": "Admonition"
                  }
                ],
                "param": "on_bad_lines",
                "type_": "{'error', 'warn', 'skip'} or callable, default 'error'"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Specifies whether or not whitespace (e.g. "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "' '"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " or "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "'\t'"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": ") will be used as the sep. Equivalent to setting "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "sep='\\s+'"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": ". If this option is set to True, nothing should be passed in for the "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "delimiter"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " parameter."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "delim_whitespace",
                "type_": "bool, default False"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Internally process the file in chunks, resulting in lower memory use while parsing, but possibly mixed type inference.  To ensure no mixed types either set False, or specify the type with the "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "exists": true,
                            "kind": "module",
                            "reference": {
                              "kind": "module",
                              "module": "pandas",
                              "path": "pandas.core.arrays.sparse.dtype",
                              "version": "1.4.1"
                            },
                            "value": "dtype"
                          },
                          "type": "Link"
                        },
                        {
                          "data": {
                            "value": " parameter. Note that the entire file is read into a single DataFrame regardless, use the "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "domain": null,
                            "role": null,
                            "value": "chunksize"
                          },
                          "type": "Directive"
                        },
                        {
                          "data": {
                            "value": " or "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "domain": null,
                            "role": null,
                            "value": "iterator"
                          },
                          "type": "Directive"
                        },
                        {
                          "data": {
                            "value": " parameter to return the data in chunks. (Only valid with C parser)."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "low_memory",
                "type_": "bool, default True"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "If a filepath is provided for "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "exists": true,
                            "kind": "module",
                            "reference": {
                              "kind": "module",
                              "module": "pandas",
                              "path": "pandas.io.common._get_filepath_or_buffer",
                              "version": "1.4.1"
                            },
                            "value": "filepath_or_buffer"
                          },
                          "type": "Link"
                        },
                        {
                          "data": {
                            "value": ", map the file object directly onto memory and access the data directly from there. Using this option can improve performance because there is no longer any I/O overhead."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "memory_map",
                "type_": "bool, default False"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Specifies which converter the C engine should use for floating-point values. The options are "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "None"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " or 'high' for the ordinary converter, 'legacy' for the original lower precision pandas converter, and 'round_trip' for the round-trip converter."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  },
                  {
                    "data": {
                      "children": [],
                      "kind": "versionchanged",
                      "title": "1.2"
                    },
                    "type": "Admonition"
                  }
                ],
                "param": "float_precision",
                "type_": "str, optional"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Extra options that make sense for a particular storage connection, e.g. host, port, username, password, etc. For HTTP(S) URLs the key-value pairs are forwarded to "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "urllib"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " as header options. For other URLs (e.g. starting with \"s3://\", and \"gcs://\") the key-value pairs are forwarded to "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "fsspec"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": ". Please see "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "fsspec"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " and "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "urllib"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " for more details."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  },
                  {
                    "data": {
                      "children": [],
                      "kind": "versionadded",
                      "title": "1.2"
                    },
                    "type": "Admonition"
                  }
                ],
                "param": "storage_options",
                "type_": "dict, optional"
              }
            ]
          },
          "type": "Parameters"
        }
      ],
      "title": null
    },
    "Raises": {
      "children": [],
      "title": null
    },
    "Receives": {
      "children": [],
      "title": null
    },
    "Returns": {
      "children": [
        {
          "data": {
            "children": [
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "A comma-separated values (csv) file is returned as two-dimensional data structure with labeled axes."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "",
                "type_": "DataFrame or TextParser"
              }
            ]
          },
          "type": "Parameters"
        }
      ],
      "title": null
    },
    "Summary": {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Read a comma-separated values (csv) file into DataFrame."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": null
    },
    "Warnings": {
      "children": [],
      "title": null
    },
    "Warns": {
      "children": [],
      "title": null
    },
    "Yields": {
      "children": [],
      "title": null
    }
  },
  "aliases": [
    "pandas.read_csv"
  ],
  "arbitrary": [],
  "example_section_data": {
    "children": [
      {
        "data": {
          "ce_status": "compiled",
          "entries": [
            {
              "link": {
                "data": "pd",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": ".",
                "type": "str"
              },
              "type": "o"
            },
            {
              "link": {
                "data": "read_csv",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": "(",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": "'",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "data.csv",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "'",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": ")",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": "  ",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": "# doctest: +SKIP",
                "type": "str"
              },
              "type": "c1"
            }
          ],
          "out": ""
        },
        "type": "Code2"
      }
    ],
    "title": null
  },
  "item_file": "/pandas/io/parsers/readers.py",
  "item_line": 584,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns",
    "See Also",
    "Examples"
  ],
  "references": null,
  "refs": [
    "DataFrame.to_csv",
    "read_csv",
    "read_fwf"
  ],
  "see_also": [
    {
      "descriptions": [
        {
          "children": [
            {
              "data": {
                "value": "Write DataFrame to a comma-separated values (csv) file."
              },
              "type": "Words"
            }
          ]
        }
      ],
      "name": {
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "to-resolve",
          "module": "current-module",
          "path": "DataFrame.to_csv",
          "version": "current-version"
        },
        "value": "DataFrame.to_csv"
      },
      "type": null
    },
    {
      "descriptions": [
        {
          "children": [
            {
              "data": {
                "value": "Read a comma-separated values (csv) file into DataFrame."
              },
              "type": "Words"
            }
          ]
        }
      ],
      "name": {
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "module",
          "module": "pandas",
          "path": "pandas.io.parsers.readers.read_csv",
          "version": "1.4.1"
        },
        "value": "read_csv"
      },
      "type": null
    },
    {
      "descriptions": [
        {
          "children": [
            {
              "data": {
                "value": "Read a table of fixed-width formatted lines into DataFrame."
              },
              "type": "Words"
            }
          ]
        }
      ],
      "name": {
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "module",
          "module": "pandas",
          "path": "pandas.io.parsers.readers.read_fwf",
          "version": "1.4.1"
        },
        "value": "read_fwf"
      },
      "type": null
    }
  ],
  "signature": {
    "value": "read_csv(filepath_or_buffer: 'FilePath | ReadCsvBuffer[bytes] | ReadCsvBuffer[str]', sep=<no_default>, delimiter=None, header='infer', names=<no_default>, index_col=None, usecols=None, squeeze=None, prefix=<no_default>, mangle_dupe_cols=True, dtype: 'DtypeArg | None' = None, engine: 'CSVEngine | None' = None, converters=None, true_values=None, false_values=None, skipinitialspace=False, skiprows=None, skipfooter=0, nrows=None, na_values=None, keep_default_na=True, na_filter=True, verbose=False, skip_blank_lines=True, parse_dates=None, infer_datetime_format=False, keep_date_col=False, date_parser=None, dayfirst=False, cache_dates=True, iterator=False, chunksize=None, compression: 'CompressionOptions' = 'infer', thousands=None, decimal: 'str' = '.', lineterminator=None, quotechar='\"', quoting=0, doublequote=True, escapechar=None, comment=None, encoding=None, encoding_errors: 'str | None' = 'strict', dialect=None, error_bad_lines=None, warn_bad_lines=None, on_bad_lines=None, delim_whitespace=False, low_memory=True, memory_map=False, float_precision=None, storage_options: 'StorageOptions' = None)"
  }
}