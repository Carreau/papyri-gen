{
  "_content": {
    "Attributes": {
      "children": [],
      "title": null
    },
    "Extended Summary": {
      "children": [],
      "title": null
    },
    "Methods": {
      "children": [],
      "title": null
    },
    "Notes": {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "The returned rows affected is the sum of the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "rowcount"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " attribute of "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "sqlite3.Cursor"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " or SQLAlchemy connectable. The returned value may not reflect the exact number of written rows as stipulated in the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "target": "https://docs.python.org/3/library/sqlite3.html#sqlite3.Cursor.rowcount",
                  "value": "sqlite3"
                },
                "type": "ExternalLink"
              },
              {
                "data": {
                  "value": " or "
                },
                "type": "Words"
              },
              {
                "data": {
                  "target": "https://docs.sqlalchemy.org/en/14/core/connections.html#sqlalchemy.engine.BaseCursorResult.rowcount",
                  "value": "SQLAlchemy"
                },
                "type": "ExternalLink"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": null
    },
    "Other Parameters": {
      "children": [],
      "title": null
    },
    "Parameters": {
      "children": [
        {
          "data": {
            "children": [
              {
                "desc": [],
                "param": "frame",
                "type_": "DataFrame, Series"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Name of SQL table."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "name",
                "type_": "str"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "or sqlite3 DBAPI2 connection Using SQLAlchemy makes it possible to use any DB supported by that library. If a DBAPI2 object, only sqlite3 is supported."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "con",
                "type_": "SQLAlchemy connectable(engine/connection) or database string URI"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Name of SQL schema in database to write to (if database flavor supports this). If None, use default schema (default)."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "schema",
                "type_": "str, optional"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "children": [
                            {
                              "data": {
                                "children": [
                                  {
                                    "data": {
                                      "value": "fail: If table exists, do nothing."
                                    },
                                    "type": "Words"
                                  }
                                ]
                              },
                              "type": "Paragraph"
                            }
                          ]
                        },
                        {
                          "children": [
                            {
                              "data": {
                                "children": [
                                  {
                                    "data": {
                                      "value": "replace: If table exists, drop it, recreate it, and insert data."
                                    },
                                    "type": "Words"
                                  }
                                ]
                              },
                              "type": "Paragraph"
                            }
                          ]
                        },
                        {
                          "children": [
                            {
                              "data": {
                                "children": [
                                  {
                                    "data": {
                                      "value": "append: If table exists, insert data. Create if does not exist."
                                    },
                                    "type": "Words"
                                  }
                                ]
                              },
                              "type": "Paragraph"
                            }
                          ]
                        }
                      ]
                    },
                    "type": "BulletList"
                  }
                ],
                "param": "if_exists",
                "type_": "{'fail', 'replace', 'append'}, default 'fail'"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Write DataFrame index as a column."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "index",
                "type_": "bool, default True"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Column label for index column(s). If None is given (default) and "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "domain": null,
                            "role": null,
                            "value": "index"
                          },
                          "type": "Directive"
                        },
                        {
                          "data": {
                            "value": " is True, then the index names are used. A sequence should be given if the DataFrame uses MultiIndex."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "index_label",
                "type_": "str or sequence, optional"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Specify the number of rows in each batch to be written at a time. By default, all rows will be written at once."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "chunksize",
                "type_": "int, optional"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Specifying the datatype for columns. If a dictionary is used, the keys should be the column names and the values should be the SQLAlchemy types or strings for the sqlite3 fallback mode. If a scalar is provided, it will be applied to all columns."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "dtype",
                "type_": "dict or scalar, optional"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Controls the SQL insertion clause used:"
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "method",
                "type_": "{None, 'multi', callable}, optional"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "SQL engine library to use. If 'auto', then the option "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "io.sql.engine"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " is used. The default "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "io.sql.engine"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " behavior is 'sqlalchemy'"
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  },
                  {
                    "data": {
                      "children": [],
                      "kind": "versionadded",
                      "title": "1.3.0"
                    },
                    "type": "Admonition"
                  }
                ],
                "param": "engine",
                "type_": "{'auto', 'sqlalchemy'}, default 'auto'"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Any additional kwargs are passed to the engine."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "**engine_kwargs",
                "type_": ""
              }
            ]
          },
          "type": "Parameters"
        }
      ],
      "title": null
    },
    "Raises": {
      "children": [],
      "title": null
    },
    "Receives": {
      "children": [],
      "title": null
    },
    "Returns": {
      "children": [
        {
          "data": {
            "children": [
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Number of rows affected by to_sql. None is returned if the callable passed into "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "method"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " does not return the number of rows."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  },
                  {
                    "data": {
                      "children": [],
                      "kind": "versionadded",
                      "title": "1.4.0"
                    },
                    "type": "Admonition"
                  }
                ],
                "param": "",
                "type_": "None or int"
              }
            ]
          },
          "type": "Parameters"
        }
      ],
      "title": null
    },
    "Summary": {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Write records stored in a DataFrame to a SQL database."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": null
    },
    "Warnings": {
      "children": [],
      "title": null
    },
    "Warns": {
      "children": [],
      "title": null
    },
    "Yields": {
      "children": [],
      "title": null
    }
  },
  "aliases": [
    "pandas.io.sql.to_sql"
  ],
  "arbitrary": [],
  "example_section_data": {
    "children": [],
    "title": null
  },
  "item_file": "/pandas/io/sql.py",
  "item_line": 602,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Parameters",
    "Returns",
    "Notes"
  ],
  "references": null,
  "refs": [],
  "see_also": [],
  "signature": {
    "value": "to_sql(frame, name: 'str', con, schema: 'str | None' = None, if_exists: 'str' = 'fail', index: 'bool' = True, index_label=None, chunksize: 'int | None' = None, dtype: 'DtypeArg | None' = None, method: 'str | None' = None, engine: 'str' = 'auto', **engine_kwargs) -> 'int | None'"
  }
}