{
  "_content": {
    "Attributes": {
      "children": [],
      "title": null
    },
    "Extended Summary": {
      "children": [
        {
          "data": {
            "children": [],
            "kind": "versionadded",
            "title": "1.3.0"
          },
          "type": "Admonition"
        }
      ],
      "title": null
    },
    "Methods": {
      "children": [],
      "title": null
    },
    "Notes": {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "This method is best designed to import shallow XML documents in following format which is the ideal fit for the two-dimensions of a "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "DataFrame"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " (row by column). ::          "
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": "<root>\n    <row>\n      <column1>data</column1>\n      <column2>data</column2>\n      <column3>data</column3>\n      ...\n   </row>\n   <row>\n      ...\n   </row>\n   ...\n</root>"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "As a file format, XML documents can be designed any way including layout of elements and attributes as long as it conforms to W3C specifications. Therefore, this method is a convenience handler for a specific flatter design and not all possible XML structures."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "However, for more complex XML documents, "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "stylesheet"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " allows you to temporarily redesign original document with XSLT (a special purpose language) for a flatter version for migration to a DataFrame."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "This function will "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "always"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": " return a single "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "DataFrame"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " or raise exceptions due to issues with XML document, "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "xpath"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", or other parameters."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": null
    },
    "Other Parameters": {
      "children": [],
      "title": null
    },
    "Parameters": {
      "children": [
        {
          "data": {
            "children": [
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "String, path object (implementing "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "os.PathLike[str]"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": "), or file-like object implementing a "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "read()"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " function. The string can be any valid XML string or a path. The string can further be a URL. Valid URL schemes include http, ftp, s3, and file."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "path_or_buffer",
                "type_": "str, path object, or file-like object"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "The XPath to parse required set of nodes for migration to DataFrame. XPath should return a collection of elements and not a single element. Note: The "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "etree"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " parser supports limited XPath expressions. For more complex XPath, use "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "lxml"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " which requires installation."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "xpath",
                "type_": "str, optional, default './\\*'"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "The namespaces defined in XML document as dicts with key being namespace prefix and value the URI. There is no need to include all namespaces in XML, only the ones used in "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "xpath"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " expression. Note: if XML document uses default namespace denoted as "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "domain": null,
                            "role": null,
                            "value": "xmlns='<URI>'"
                          },
                          "type": "Directive"
                        },
                        {
                          "data": {
                            "value": " without a prefix, you must assign any temporary namespace prefix such as 'doc' to the URI in order to parse underlying nodes and/or attributes. For example, ::      "
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  },
                  {
                    "data": {
                      "value": "namespaces = {\"doc\": \"https://example.com\"}"
                    },
                    "type": "BlockVerbatim"
                  }
                ],
                "param": "namespaces",
                "type_": "dict, optional"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Parse only the child elements at the specified "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "xpath"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": ". By default, all child elements and non-empty text nodes are returned."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "elems_only",
                "type_": "bool, optional, default False"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Parse only the attributes at the specified "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "xpath"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": ". By default, all attributes are returned."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "attrs_only",
                "type_": "bool, optional, default False"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Column names for DataFrame of parsed XML data. Use this parameter to rename original element names and distinguish same named elements."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "names",
                "type_": "list-like, optional"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Encoding of XML document."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "encoding",
                "type_": "str, optional, default 'utf-8'"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Parser module to use for retrieval of data. Only 'lxml' and 'etree' are supported. With 'lxml' more complex XPath searches and ability to use XSLT stylesheet are supported."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "parser",
                "type_": "{'lxml','etree'}, default 'lxml'"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "A URL, file-like object, or a raw string containing an XSLT script. This stylesheet should flatten complex, deeply nested XML documents for easier parsing. To use this feature you must have "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "lxml"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " module installed and specify 'lxml' as "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "parser"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": ". The "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "xpath"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " must reference nodes of transformed XML document generated after XSLT transformation and not the original XML document. Only XSLT 1.0 scripts and not later versions is currently supported."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "stylesheet",
                "type_": "str, path object or file-like object"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "For on-the-fly decompression of on-disk data. If 'infer' and 'path_or_buffer' is path-like, then detect compression from the following extensions: '.gz', '.bz2', '.zip', '.xz', or '.zst' (otherwise no compression). If using 'zip', the ZIP file must contain only one data file to be read in. Set to "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "None"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " for no decompression. Can also be a dict with key "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "'method'"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " set to one of {"
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "'zip'"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": ", "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "'gzip'"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": ", "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "'bz2'"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": ", "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "'zstd'"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": "} and other key-value pairs are forwarded to "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "zipfile.ZipFile"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": ", "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "gzip.GzipFile"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": ", "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "bz2.BZ2File"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": ", or "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "zstandard.ZstdDecompressor"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": ", respectively. As an example, the following could be passed for Zstandard decompression using a custom compression dictionary: "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "compression={'method': 'zstd', 'dict_data': my_compression_dict}"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": "."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  },
                  {
                    "data": {
                      "children": [],
                      "kind": "versionchanged",
                      "title": "1.4.0 Zstandard support."
                    },
                    "type": "Admonition"
                  }
                ],
                "param": "compression",
                "type_": "str or dict, default 'infer'"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Extra options that make sense for a particular storage connection, e.g. host, port, username, password, etc. For HTTP(S) URLs the key-value pairs are forwarded to "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "urllib"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " as header options. For other URLs (e.g. starting with \"s3://\", and \"gcs://\") the key-value pairs are forwarded to "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "fsspec"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": ". Please see "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "fsspec"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " and "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "urllib"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " for more details."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "storage_options",
                "type_": "dict, optional"
              }
            ]
          },
          "type": "Parameters"
        }
      ],
      "title": null
    },
    "Raises": {
      "children": [],
      "title": null
    },
    "Receives": {
      "children": [],
      "title": null
    },
    "Returns": {
      "children": [
        {
          "data": {
            "children": [
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "A DataFrame."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "",
                "type_": "df"
              }
            ]
          },
          "type": "Parameters"
        }
      ],
      "title": null
    },
    "Summary": {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Read XML document into a "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "DataFrame"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " object."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": null
    },
    "Warnings": {
      "children": [],
      "title": null
    },
    "Warns": {
      "children": [],
      "title": null
    },
    "Yields": {
      "children": [],
      "title": null
    }
  },
  "aliases": [
    "pandas.read_xml"
  ],
  "arbitrary": [],
  "example_section_data": {
    "children": [
      {
        "data": {
          "ce_status": "compiled",
          "entries": [
            {
              "link": {
                "data": {
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "module",
                    "module": "builtins",
                    "path": "builtins.str",
                    "version": "*"
                  },
                  "value": "xml"
                },
                "type": "Link"
              },
              "type": ""
            },
            {
              "link": {
                "data": " ",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": "=",
                "type": "str"
              },
              "type": "o"
            },
            {
              "link": {
                "data": " ",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": "'''",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "<?xml version=",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "'",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "1.0",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "'",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": " encoding=",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "'",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "utf-8",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "'",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "?>",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "\n",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "<data xmlns=",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "\"",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "http://example.com",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "\"",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": ">",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "\n",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": " <row>",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "\n",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "   <shape>square</shape>",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "\n",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "   <degrees>360</degrees>",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "\n",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "   <sides>4.0</sides>",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "\n",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": " </row>",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "\n",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": " <row>",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "\n",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "   <shape>circle</shape>",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "\n",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "   <degrees>360</degrees>",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "\n",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "   <sides/>",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "\n",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": " </row>",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "\n",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": " <row>",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "\n",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "   <shape>triangle</shape>",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "\n",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "   <degrees>180</degrees>",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "\n",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "   <sides>3.0</sides>",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "\n",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": " </row>",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "\n",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "</data>",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "'''",
                "type": "str"
              },
              "type": "s1"
            }
          ],
          "out": ""
        },
        "type": "Code2"
      },
      {
        "data": {
          "ce_status": "compiled",
          "entries": [
            {
              "link": {
                "data": "df",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": " ",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": "=",
                "type": "str"
              },
              "type": "o"
            },
            {
              "link": {
                "data": " ",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": "pd",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": ".",
                "type": "str"
              },
              "type": "o"
            },
            {
              "link": {
                "data": "read_xml",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": "(",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": {
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "module",
                    "module": "builtins",
                    "path": "builtins.str",
                    "version": "*"
                  },
                  "value": "xml"
                },
                "type": "Link"
              },
              "type": ""
            },
            {
              "link": {
                "data": ")",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": "\n",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": "df",
                "type": "str"
              },
              "type": ""
            }
          ],
          "out": "      shape  degrees  sides\n0    square      360    4.0\n1    circle      360    NaN\n2  triangle      180    3.0"
        },
        "type": "Code2"
      },
      {
        "data": {
          "ce_status": "compiled",
          "entries": [
            {
              "link": {
                "data": {
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "module",
                    "module": "builtins",
                    "path": "builtins.str",
                    "version": "*"
                  },
                  "value": "xml"
                },
                "type": "Link"
              },
              "type": ""
            },
            {
              "link": {
                "data": " ",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": "=",
                "type": "str"
              },
              "type": "o"
            },
            {
              "link": {
                "data": " ",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": "'''",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "<?xml version=",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "'",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "1.0",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "'",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": " encoding=",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "'",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "utf-8",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "'",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "?>",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "\n",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "<data>",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "\n",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "  <row shape=",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "\"",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "square",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "\"",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": " degrees=",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "\"",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "360",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "\"",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": " sides=",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "\"",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "4.0",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "\"",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "/>",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "\n",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "  <row shape=",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "\"",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "circle",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "\"",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": " degrees=",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "\"",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "360",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "\"",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "/>",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "\n",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "  <row shape=",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "\"",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "triangle",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "\"",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": " degrees=",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "\"",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "180",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "\"",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": " sides=",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "\"",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "3.0",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "\"",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "/>",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "\n",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "</data>",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "'''",
                "type": "str"
              },
              "type": "s1"
            }
          ],
          "out": ""
        },
        "type": "Code2"
      },
      {
        "data": {
          "ce_status": "compiled",
          "entries": [
            {
              "link": {
                "data": "df",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": " ",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": "=",
                "type": "str"
              },
              "type": "o"
            },
            {
              "link": {
                "data": " ",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": "pd",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": ".",
                "type": "str"
              },
              "type": "o"
            },
            {
              "link": {
                "data": "read_xml",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": "(",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": {
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "module",
                    "module": "builtins",
                    "path": "builtins.str",
                    "version": "*"
                  },
                  "value": "xml"
                },
                "type": "Link"
              },
              "type": ""
            },
            {
              "link": {
                "data": ",",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": " ",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": "xpath",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": "=",
                "type": "str"
              },
              "type": "o"
            },
            {
              "link": {
                "data": "\"",
                "type": "str"
              },
              "type": "s2"
            },
            {
              "link": {
                "data": ".//row",
                "type": "str"
              },
              "type": "s2"
            },
            {
              "link": {
                "data": "\"",
                "type": "str"
              },
              "type": "s2"
            },
            {
              "link": {
                "data": ")",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": "\n",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": "df",
                "type": "str"
              },
              "type": ""
            }
          ],
          "out": "      shape  degrees  sides\n0    square      360    4.0\n1    circle      360    NaN\n2  triangle      180    3.0"
        },
        "type": "Code2"
      },
      {
        "data": {
          "ce_status": "compiled",
          "entries": [
            {
              "link": {
                "data": {
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "module",
                    "module": "builtins",
                    "path": "builtins.str",
                    "version": "*"
                  },
                  "value": "xml"
                },
                "type": "Link"
              },
              "type": ""
            },
            {
              "link": {
                "data": " ",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": "=",
                "type": "str"
              },
              "type": "o"
            },
            {
              "link": {
                "data": " ",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": "'''",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "<?xml version=",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "'",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "1.0",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "'",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": " encoding=",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "'",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "utf-8",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "'",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "?>",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "\n",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "<doc:data xmlns:doc=",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "\"",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "https://example.com",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "\"",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": ">",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "\n",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "  <doc:row>",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "\n",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "    <doc:shape>square</doc:shape>",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "\n",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "    <doc:degrees>360</doc:degrees>",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "\n",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "    <doc:sides>4.0</doc:sides>",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "\n",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "  </doc:row>",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "\n",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "  <doc:row>",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "\n",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "    <doc:shape>circle</doc:shape>",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "\n",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "    <doc:degrees>360</doc:degrees>",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "\n",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "    <doc:sides/>",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "\n",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "  </doc:row>",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "\n",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "  <doc:row>",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "\n",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "    <doc:shape>triangle</doc:shape>",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "\n",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "    <doc:degrees>180</doc:degrees>",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "\n",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "    <doc:sides>3.0</doc:sides>",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "\n",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "  </doc:row>",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "\n",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "</doc:data>",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "'''",
                "type": "str"
              },
              "type": "s1"
            }
          ],
          "out": ""
        },
        "type": "Code2"
      },
      {
        "data": {
          "ce_status": "compiled",
          "entries": [
            {
              "link": {
                "data": "df",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": " ",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": "=",
                "type": "str"
              },
              "type": "o"
            },
            {
              "link": {
                "data": " ",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": "pd",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": ".",
                "type": "str"
              },
              "type": "o"
            },
            {
              "link": {
                "data": "read_xml",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": "(",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": {
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "module",
                    "module": "builtins",
                    "path": "builtins.str",
                    "version": "*"
                  },
                  "value": "xml"
                },
                "type": "Link"
              },
              "type": ""
            },
            {
              "link": {
                "data": ",",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": "\n",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": "                 ",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": "xpath",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": "=",
                "type": "str"
              },
              "type": "o"
            },
            {
              "link": {
                "data": "\"",
                "type": "str"
              },
              "type": "s2"
            },
            {
              "link": {
                "data": "//doc:row",
                "type": "str"
              },
              "type": "s2"
            },
            {
              "link": {
                "data": "\"",
                "type": "str"
              },
              "type": "s2"
            },
            {
              "link": {
                "data": ",",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": "\n",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": "                 ",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": "namespaces",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": "=",
                "type": "str"
              },
              "type": "o"
            },
            {
              "link": {
                "data": "{",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": "\"",
                "type": "str"
              },
              "type": "s2"
            },
            {
              "link": {
                "data": "doc",
                "type": "str"
              },
              "type": "s2"
            },
            {
              "link": {
                "data": "\"",
                "type": "str"
              },
              "type": "s2"
            },
            {
              "link": {
                "data": ":",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": " ",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": "\"",
                "type": "str"
              },
              "type": "s2"
            },
            {
              "link": {
                "data": "https://example.com",
                "type": "str"
              },
              "type": "s2"
            },
            {
              "link": {
                "data": "\"",
                "type": "str"
              },
              "type": "s2"
            },
            {
              "link": {
                "data": "}",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": ")",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": "\n",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": "df",
                "type": "str"
              },
              "type": ""
            }
          ],
          "out": "      shape  degrees  sides\n0    square      360    4.0\n1    circle      360    NaN\n2  triangle      180    3.0"
        },
        "type": "Code2"
      }
    ],
    "title": null
  },
  "item_file": "/pandas/io/xml.py",
  "item_line": 738,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns",
    "See Also",
    "Notes",
    "Examples"
  ],
  "references": null,
  "see_also": [
    {
      "descriptions": [
        {
          "children": [
            {
              "data": {
                "value": "Convert a JSON string to pandas object."
              },
              "type": "Words"
            }
          ]
        }
      ],
      "name": {
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "module",
          "module": "pandas",
          "path": "pandas.io.json._json.read_json",
          "version": "1.4.1"
        },
        "value": "read_json"
      },
      "type": null
    },
    {
      "descriptions": [
        {
          "children": [
            {
              "data": {
                "value": "Read HTML tables into a list of DataFrame objects."
              },
              "type": "Words"
            }
          ]
        }
      ],
      "name": {
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "module",
          "module": "pandas",
          "path": "pandas.io.html.read_html",
          "version": "1.4.1"
        },
        "value": "read_html"
      },
      "type": null
    }
  ],
  "signature": {
    "value": "read_xml(path_or_buffer: 'FilePath | ReadBuffer[bytes] | ReadBuffer[str]', xpath: 'str' = './*', namespaces: 'dict[str, str] | None' = None, elems_only: 'bool' = False, attrs_only: 'bool' = False, names: 'Sequence[str] | None' = None, encoding: 'str | None' = 'utf-8', parser: 'XMLParsers' = 'lxml', stylesheet: 'FilePath | ReadBuffer[bytes] | ReadBuffer[str] | None' = None, compression: 'CompressionOptions' = 'infer', storage_options: 'StorageOptions' = None) -> 'DataFrame'"
  }
}