{
  "aliases": [
    "pandas.read_xml"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    },
    "Extended Summary": {
      "children": [
        {
          "data": {
            "children": [],
            "kind": "versionadded",
            "title": "1.3.0"
          },
          "type": "Admonition"
        }
      ],
      "level": 0,
      "target": null,
      "title": null
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    },
    "Notes": {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "This method is best designed to import shallow XML documents in following format which is the ideal fit for the two-dimensions of a "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "DataFrame"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " (row by column). :          "
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": "<root>\n    <row>\n      <column1>data</column1>\n      <column2>data</column2>\n      <column3>data</column3>\n      ...\n   </row>\n   <row>\n      ...\n   </row>\n   ...\n</root>"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "As a file format, XML documents can be designed any way including layout of elements and attributes as long as it conforms to W3C specifications. Therefore, this method is a convenience handler for a specific flatter design and not all possible XML structures."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "However, for more complex XML documents, "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "stylesheet"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " allows you to temporarily redesign original document with XSLT (a special purpose language) for a flatter version for migration to a DataFrame."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "This function will "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "always"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": " return a single "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "DataFrame"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " or raise exceptions due to issues with XML document, "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "xpath"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", or other parameters."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "See the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "read_xml documentation in the IO section of the docs\n<io.read_xml>"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " for more information in using this method to parse XML files to DataFrames."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    },
    "Parameters": {
      "children": [
        {
          "data": {
            "children": [
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "String, path object (implementing "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "os.PathLike[str]"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": "), or file-like object implementing a "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "read()"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " function. The string can be any valid XML string or a path. The string can further be a URL. Valid URL schemes include http, ftp, s3, and file."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "path_or_buffer",
                "type_": "str, path object, or file-like object"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "The XPath to parse required set of nodes for migration to DataFrame. XPath should return a collection of elements and not a single element. Note: The "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "etree"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " parser supports limited XPath expressions. For more complex XPath, use "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "lxml"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " which requires installation."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "xpath",
                "type_": "str, optional, default './\\*'"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "The namespaces defined in XML document as dicts with key being namespace prefix and value the URI. There is no need to include all namespaces in XML, only the ones used in "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "xpath"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " expression. Note: if XML document uses default namespace denoted as "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "domain": null,
                            "role": null,
                            "value": "xmlns='<URI>'"
                          },
                          "type": "Directive"
                        },
                        {
                          "data": {
                            "value": " without a prefix, you must assign any temporary namespace prefix such as 'doc' to the URI in order to parse underlying nodes and/or attributes. For example, :      "
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  },
                  {
                    "data": {
                      "value": "namespaces = {\"doc\": \"https://example.com\"}"
                    },
                    "type": "BlockVerbatim"
                  }
                ],
                "param": "namespaces",
                "type_": "dict, optional"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Parse only the child elements at the specified "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "xpath"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": ". By default, all child elements and non-empty text nodes are returned."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "elems_only",
                "type_": "bool, optional, default False"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Parse only the attributes at the specified "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "xpath"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": ". By default, all attributes are returned."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "attrs_only",
                "type_": "bool, optional, default False"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Column names for DataFrame of parsed XML data. Use this parameter to rename original element names and distinguish same named elements and attributes."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "names",
                "type_": "list-like, optional"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Data type for data or columns. E.g. {'a': np.float64, 'b': np.int32, 'c': 'Int64'} Use "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "domain": null,
                            "role": null,
                            "value": "str"
                          },
                          "type": "Directive"
                        },
                        {
                          "data": {
                            "value": " or "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "domain": null,
                            "role": null,
                            "value": "object"
                          },
                          "type": "Directive"
                        },
                        {
                          "data": {
                            "value": " together with suitable "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "domain": null,
                            "role": null,
                            "value": "na_values"
                          },
                          "type": "Directive"
                        },
                        {
                          "data": {
                            "value": " settings to preserve and not interpret dtype. If converters are specified, they will be applied INSTEAD of dtype conversion."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  },
                  {
                    "data": {
                      "children": [],
                      "kind": "versionadded",
                      "title": "1.5.0"
                    },
                    "type": "Admonition"
                  }
                ],
                "param": "dtype",
                "type_": "Type name or dict of column -> type, optional"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Dict of functions for converting values in certain columns. Keys can either be integers or column labels."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  },
                  {
                    "data": {
                      "children": [],
                      "kind": "versionadded",
                      "title": "1.5.0"
                    },
                    "type": "Admonition"
                  }
                ],
                "param": "converters",
                "type_": "dict, optional"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Identifiers to parse index or columns to datetime. The behavior is as follows:"
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  },
                  {
                    "data": {
                      "children": [
                        {
                          "children": [
                            {
                              "data": {
                                "children": [
                                  {
                                    "data": {
                                      "value": "boolean. If True -> try parsing the index."
                                    },
                                    "type": "Words"
                                  }
                                ]
                              },
                              "type": "Paragraph"
                            }
                          ]
                        },
                        {
                          "children": [
                            {
                              "data": {
                                "children": [
                                  {
                                    "data": {
                                      "value": "list of int or names. e.g. If [1, 2, 3] -> try parsing columns 1, 2, 3   each as a separate date column."
                                    },
                                    "type": "Words"
                                  }
                                ]
                              },
                              "type": "Paragraph"
                            }
                          ]
                        },
                        {
                          "children": [
                            {
                              "data": {
                                "children": [
                                  {
                                    "data": {
                                      "value": "list of lists. e.g.  If [[1, 3]] -> combine columns 1 and 3 and parse as   a single date column."
                                    },
                                    "type": "Words"
                                  }
                                ]
                              },
                              "type": "Paragraph"
                            }
                          ]
                        },
                        {
                          "children": []
                        }
                      ]
                    },
                    "type": "BulletList"
                  }
                ],
                "param": "parse_dates",
                "type_": "bool or list of int or names or list of lists or dict, default False"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Encoding of XML document."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "encoding",
                "type_": "str, optional, default 'utf-8'"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Parser module to use for retrieval of data. Only 'lxml' and 'etree' are supported. With 'lxml' more complex XPath searches and ability to use XSLT stylesheet are supported."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "parser",
                "type_": "{'lxml','etree'}, default 'lxml'"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "A URL, file-like object, or a raw string containing an XSLT script. This stylesheet should flatten complex, deeply nested XML documents for easier parsing. To use this feature you must have "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "lxml"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " module installed and specify 'lxml' as "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "parser"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": ". The "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "xpath"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " must reference nodes of transformed XML document generated after XSLT transformation and not the original XML document. Only XSLT 1.0 scripts and not later versions is currently supported."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "stylesheet",
                "type_": "str, path object or file-like object"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "The nodes or attributes to retrieve in iterparsing of XML document as a dict with key being the name of repeating element and value being list of elements or attribute names that are descendants of the repeated element. Note: If this option is used, it will replace "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "xpath"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " parsing and unlike xpath, descendants do not need to relate to each other but can exist any where in document under the repeating element. This memory- efficient method should be used for very large XML files (500MB, 1GB, or 5GB+). For example, :      "
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  },
                  {
                    "data": {
                      "value": "iterparse = {\"row_element\": [\"child_elem\", \"attr\", \"grandchild_elem\"]}"
                    },
                    "type": "BlockVerbatim"
                  },
                  {
                    "data": {
                      "children": [],
                      "kind": "versionadded",
                      "title": "1.5.0"
                    },
                    "type": "Admonition"
                  }
                ],
                "param": "iterparse",
                "type_": "dict, optional"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "For on-the-fly decompression of on-disk data. If 'infer' and 'path_or_buffer' is path-like, then detect compression from the following extensions: '.gz', '.bz2', '.zip', '.xz', '.zst', '.tar', '.tar.gz', '.tar.xz' or '.tar.bz2' (otherwise no compression). If using 'zip' or 'tar', the ZIP file must contain only one data file to be read in. Set to "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "None"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " for no decompression. Can also be a dict with key "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "'method'"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " set to one of {"
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "'zip'"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": ", "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "'gzip'"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": ", "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "'bz2'"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": ", "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "'zstd'"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": ", "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "'tar'"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": "} and other key-value pairs are forwarded to "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "zipfile.ZipFile"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": ", "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "gzip.GzipFile"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": ", "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "bz2.BZ2File"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": ", "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "zstandard.ZstdDecompressor"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " or "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "tarfile.TarFile"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": ", respectively. As an example, the following could be passed for Zstandard decompression using a custom compression dictionary: "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "compression={'method': 'zstd', 'dict_data': my_compression_dict}"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": "."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  },
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "children": [
                              {
                                "data": {
                                  "children": [
                                    {
                                      "data": {
                                        "value": "Added support for "
                                      },
                                      "type": "Words"
                                    },
                                    {
                                      "data": {
                                        "domain": null,
                                        "role": null,
                                        "value": ".tar"
                                      },
                                      "type": "Directive"
                                    },
                                    {
                                      "data": {
                                        "value": " files."
                                      },
                                      "type": "Words"
                                    }
                                  ]
                                },
                                "type": "Paragraph"
                              }
                            ],
                            "kind": "versionadded",
                            "title": "1.5.0"
                          },
                          "type": "Admonition"
                        }
                      ]
                    },
                    "type": "BlockQuote"
                  },
                  {
                    "data": {
                      "children": [],
                      "kind": "versionchanged",
                      "title": "1.4.0 Zstandard support."
                    },
                    "type": "Admonition"
                  }
                ],
                "param": "compression",
                "type_": "str or dict, default 'infer'"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Extra options that make sense for a particular storage connection, e.g. host, port, username, password, etc. For HTTP(S) URLs the key-value pairs are forwarded to "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "urllib.request.Request"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " as header options. For other URLs (e.g. starting with \"s3://\", and \"gcs://\") the key-value pairs are forwarded to "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "fsspec.open"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": ". Please see "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "fsspec"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " and "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "urllib"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " for more details, and for more examples on storage options refer "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "target": "https://pandas.pydata.org/docs/user_guide/io.html?highlight=storage_options#reading-writing-remote-files",
                            "value": "here"
                          },
                          "type": "ExternalLink"
                        },
                        {
                          "data": {
                            "value": "."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "storage_options",
                "type_": "dict, optional"
              }
            ]
          },
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    },
    "Returns": {
      "children": [
        {
          "data": {
            "children": [
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "A DataFrame."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "",
                "type_": "df"
              }
            ]
          },
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null
    },
    "Summary": {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Read XML document into a "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "DataFrame"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " object."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    }
  },
  "example_section_data": {
    "children": [
      {
        "data": {
          "ce_status": "compiled",
          "entries": [
            {
              "link": {
                "data": {
                  "anchor": null,
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "module",
                    "module": "builtins",
                    "path": "builtins.str",
                    "version": "*"
                  },
                  "value": "xml"
                },
                "type": "Link"
              },
              "type": ""
            },
            {
              "link": {
                "data": " ",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": "=",
                "type": "str"
              },
              "type": "o"
            },
            {
              "link": {
                "data": " ",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": "'''",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "<?xml version=",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "'",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "1.0",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "'",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": " encoding=",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "'",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "utf-8",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "'",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "?>",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "\n",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "<data xmlns=",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "\"",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "http://example.com",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "\"",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": ">",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "\n",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": " <row>",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "\n",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "   <shape>square</shape>",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "\n",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "   <degrees>360</degrees>",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "\n",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "   <sides>4.0</sides>",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "\n",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": " </row>",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "\n",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": " <row>",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "\n",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "   <shape>circle</shape>",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "\n",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "   <degrees>360</degrees>",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "\n",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "   <sides/>",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "\n",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": " </row>",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "\n",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": " <row>",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "\n",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "   <shape>triangle</shape>",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "\n",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "   <degrees>180</degrees>",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "\n",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "   <sides>3.0</sides>",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "\n",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": " </row>",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "\n",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "</data>",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "'''",
                "type": "str"
              },
              "type": "s1"
            }
          ],
          "out": ""
        },
        "type": "Code2"
      },
      {
        "data": {
          "ce_status": "compiled",
          "entries": [
            {
              "link": {
                "data": "df",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": " ",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": "=",
                "type": "str"
              },
              "type": "o"
            },
            {
              "link": {
                "data": " ",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": "pd",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": ".",
                "type": "str"
              },
              "type": "o"
            },
            {
              "link": {
                "data": "read_xml",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": "(",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": {
                  "anchor": null,
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "module",
                    "module": "builtins",
                    "path": "builtins.str",
                    "version": "*"
                  },
                  "value": "xml"
                },
                "type": "Link"
              },
              "type": ""
            },
            {
              "link": {
                "data": ")",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": "\n",
                "type": "str"
              },
              "type": "w"
            },
            {
              "link": {
                "data": "df",
                "type": "str"
              },
              "type": ""
            }
          ],
          "out": "      shape  degrees  sides\n0    square      360    4.0\n1    circle      360    NaN\n2  triangle      180    3.0"
        },
        "type": "Code2"
      },
      {
        "data": {
          "ce_status": "compiled",
          "entries": [
            {
              "link": {
                "data": {
                  "anchor": null,
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "module",
                    "module": "builtins",
                    "path": "builtins.str",
                    "version": "*"
                  },
                  "value": "xml"
                },
                "type": "Link"
              },
              "type": ""
            },
            {
              "link": {
                "data": " ",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": "=",
                "type": "str"
              },
              "type": "o"
            },
            {
              "link": {
                "data": " ",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": "'''",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "<?xml version=",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "'",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "1.0",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "'",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": " encoding=",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "'",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "utf-8",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "'",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "?>",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "\n",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "<data>",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "\n",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "  <row shape=",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "\"",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "square",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "\"",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": " degrees=",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "\"",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "360",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "\"",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": " sides=",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "\"",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "4.0",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "\"",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "/>",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "\n",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "  <row shape=",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "\"",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "circle",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "\"",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": " degrees=",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "\"",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "360",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "\"",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "/>",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "\n",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "  <row shape=",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "\"",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "triangle",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "\"",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": " degrees=",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "\"",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "180",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "\"",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": " sides=",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "\"",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "3.0",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "\"",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "/>",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "\n",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "</data>",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "'''",
                "type": "str"
              },
              "type": "s1"
            }
          ],
          "out": ""
        },
        "type": "Code2"
      },
      {
        "data": {
          "ce_status": "compiled",
          "entries": [
            {
              "link": {
                "data": "df",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": " ",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": "=",
                "type": "str"
              },
              "type": "o"
            },
            {
              "link": {
                "data": " ",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": "pd",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": ".",
                "type": "str"
              },
              "type": "o"
            },
            {
              "link": {
                "data": "read_xml",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": "(",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": {
                  "anchor": null,
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "module",
                    "module": "builtins",
                    "path": "builtins.str",
                    "version": "*"
                  },
                  "value": "xml"
                },
                "type": "Link"
              },
              "type": ""
            },
            {
              "link": {
                "data": ",",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": " ",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": "xpath",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": "=",
                "type": "str"
              },
              "type": "o"
            },
            {
              "link": {
                "data": "\"",
                "type": "str"
              },
              "type": "s2"
            },
            {
              "link": {
                "data": ".//row",
                "type": "str"
              },
              "type": "s2"
            },
            {
              "link": {
                "data": "\"",
                "type": "str"
              },
              "type": "s2"
            },
            {
              "link": {
                "data": ")",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": "\n",
                "type": "str"
              },
              "type": "w"
            },
            {
              "link": {
                "data": "df",
                "type": "str"
              },
              "type": ""
            }
          ],
          "out": "      shape  degrees  sides\n0    square      360    4.0\n1    circle      360    NaN\n2  triangle      180    3.0"
        },
        "type": "Code2"
      },
      {
        "data": {
          "ce_status": "compiled",
          "entries": [
            {
              "link": {
                "data": {
                  "anchor": null,
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "module",
                    "module": "builtins",
                    "path": "builtins.str",
                    "version": "*"
                  },
                  "value": "xml"
                },
                "type": "Link"
              },
              "type": ""
            },
            {
              "link": {
                "data": " ",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": "=",
                "type": "str"
              },
              "type": "o"
            },
            {
              "link": {
                "data": " ",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": "'''",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "<?xml version=",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "'",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "1.0",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "'",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": " encoding=",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "'",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "utf-8",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "'",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "?>",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "\n",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "<doc:data xmlns:doc=",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "\"",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "https://example.com",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "\"",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": ">",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "\n",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "  <doc:row>",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "\n",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "    <doc:shape>square</doc:shape>",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "\n",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "    <doc:degrees>360</doc:degrees>",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "\n",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "    <doc:sides>4.0</doc:sides>",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "\n",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "  </doc:row>",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "\n",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "  <doc:row>",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "\n",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "    <doc:shape>circle</doc:shape>",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "\n",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "    <doc:degrees>360</doc:degrees>",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "\n",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "    <doc:sides/>",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "\n",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "  </doc:row>",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "\n",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "  <doc:row>",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "\n",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "    <doc:shape>triangle</doc:shape>",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "\n",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "    <doc:degrees>180</doc:degrees>",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "\n",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "    <doc:sides>3.0</doc:sides>",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "\n",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "  </doc:row>",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "\n",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "</doc:data>",
                "type": "str"
              },
              "type": "s1"
            },
            {
              "link": {
                "data": "'''",
                "type": "str"
              },
              "type": "s1"
            }
          ],
          "out": ""
        },
        "type": "Code2"
      },
      {
        "data": {
          "ce_status": "compiled",
          "entries": [
            {
              "link": {
                "data": "df",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": " ",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": "=",
                "type": "str"
              },
              "type": "o"
            },
            {
              "link": {
                "data": " ",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": "pd",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": ".",
                "type": "str"
              },
              "type": "o"
            },
            {
              "link": {
                "data": "read_xml",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": "(",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": {
                  "anchor": null,
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "module",
                    "module": "builtins",
                    "path": "builtins.str",
                    "version": "*"
                  },
                  "value": "xml"
                },
                "type": "Link"
              },
              "type": ""
            },
            {
              "link": {
                "data": ",",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": "\n",
                "type": "str"
              },
              "type": "w"
            },
            {
              "link": {
                "data": "                 ",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": "xpath",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": "=",
                "type": "str"
              },
              "type": "o"
            },
            {
              "link": {
                "data": "\"",
                "type": "str"
              },
              "type": "s2"
            },
            {
              "link": {
                "data": "//doc:row",
                "type": "str"
              },
              "type": "s2"
            },
            {
              "link": {
                "data": "\"",
                "type": "str"
              },
              "type": "s2"
            },
            {
              "link": {
                "data": ",",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": "\n",
                "type": "str"
              },
              "type": "w"
            },
            {
              "link": {
                "data": "                 ",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": "namespaces",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": "=",
                "type": "str"
              },
              "type": "o"
            },
            {
              "link": {
                "data": "{",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": "\"",
                "type": "str"
              },
              "type": "s2"
            },
            {
              "link": {
                "data": "doc",
                "type": "str"
              },
              "type": "s2"
            },
            {
              "link": {
                "data": "\"",
                "type": "str"
              },
              "type": "s2"
            },
            {
              "link": {
                "data": ":",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": " ",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": "\"",
                "type": "str"
              },
              "type": "s2"
            },
            {
              "link": {
                "data": "https://example.com",
                "type": "str"
              },
              "type": "s2"
            },
            {
              "link": {
                "data": "\"",
                "type": "str"
              },
              "type": "s2"
            },
            {
              "link": {
                "data": "}",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": ")",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": "\n",
                "type": "str"
              },
              "type": "w"
            },
            {
              "link": {
                "data": "df",
                "type": "str"
              },
              "type": ""
            }
          ],
          "out": "      shape  degrees  sides\n0    square      360    4.0\n1    circle      360    NaN\n2  triangle      180    3.0"
        },
        "type": "Code2"
      }
    ],
    "level": 0,
    "target": null,
    "title": null
  },
  "item_file": "/pandas/io/xml.py",
  "item_line": 838,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns",
    "See Also",
    "Notes",
    "Examples"
  ],
  "references": null,
  "see_also": [
    {
      "descriptions": [
        {
          "children": [
            {
              "data": {
                "value": "Convert a JSON string to pandas object."
              },
              "type": "Words"
            }
          ]
        }
      ],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "module",
          "module": "pandas",
          "path": "pandas.io.json._json.read_json",
          "version": "1.5.2"
        },
        "value": "read_json"
      },
      "type": null
    },
    {
      "descriptions": [
        {
          "children": [
            {
              "data": {
                "value": "Read HTML tables into a list of DataFrame objects."
              },
              "type": "Words"
            }
          ]
        }
      ],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "module",
          "module": "pandas",
          "path": "pandas.io.html.read_html",
          "version": "1.5.2"
        },
        "value": "read_html"
      },
      "type": null
    }
  ],
  "signature": {
    "value": "read_xml(path_or_buffer: 'FilePath | ReadBuffer[bytes] | ReadBuffer[str]', *, xpath: 'str' = './*', namespaces: 'dict[str, str] | None' = None, elems_only: 'bool' = False, attrs_only: 'bool' = False, names: 'Sequence[str] | None' = None, dtype: 'DtypeArg | None' = None, converters: 'ConvertersArg | None' = None, parse_dates: 'ParseDatesArg | None' = None, encoding: 'str | None' = 'utf-8', parser: 'XMLParsers' = 'lxml', stylesheet: 'FilePath | ReadBuffer[bytes] | ReadBuffer[str] | None' = None, iterparse: 'dict[str, list[str]] | None' = None, compression: 'CompressionOptions' = 'infer', storage_options: 'StorageOptions' = None) -> 'DataFrame'"
  }
}