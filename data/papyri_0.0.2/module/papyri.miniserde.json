{
  "_content": {
    "Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "children": [
              {
                "type": "Words",
                "data": {
                  "value": "A mini-implementation of an automatic serialiser-deserialiser for nested dataclass like class based on type annotations."
                }
              }
            ]
          }
        }
      ]
    },
    "Extended Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "children": [
              {
                "type": "Words",
                "data": {
                  "value": "Example:"
                }
              }
            ]
          }
        },
        {
          "type": "DefList",
          "data": {
            "children": [
              {
                "lines": {
                  "_lines": [
                    {
                      "_line": "In [14]: from dataclasses import dataclass",
                      "_number": 2,
                      "_offset": 0
                    }
                  ]
                },
                "wh": {
                  "_lines": []
                },
                "ind": {
                  "_lines": [
                    {
                      "_line": "    ...: from typing import Optional, Union, List",
                      "_number": 3,
                      "_offset": 4
                    },
                    {
                      "_line": "    ...:",
                      "_number": 4,
                      "_offset": 4
                    },
                    {
                      "_line": "",
                      "_number": 5,
                      "_offset": 4
                    }
                  ]
                },
                "dt": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "In [14]: from dataclasses import dataclass"
                      }
                    }
                  ]
                },
                "dd": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "...: from typing import Optional, Union, List ...: "
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "children": [
              {
                "type": "Words",
                "data": {
                  "value": "Note that Author and Reviewer are isomorphic even if totally unrelated."
                }
              }
            ]
          }
        },
        {
          "type": "DefList",
          "data": {
            "children": [
              {
                "lines": {
                  "_lines": [
                    {
                      "_line": "In [15]: @dataclass",
                      "_number": 8,
                      "_offset": 0
                    }
                  ]
                },
                "wh": {
                  "_lines": []
                },
                "ind": {
                  "_lines": [
                    {
                      "_line": "    ...: class Author:",
                      "_number": 9,
                      "_offset": 4
                    },
                    {
                      "_line": "    ...:     first: Optional[str]",
                      "_number": 10,
                      "_offset": 4
                    },
                    {
                      "_line": "    ...:     last: str",
                      "_number": 11,
                      "_offset": 4
                    },
                    {
                      "_line": "    ...:",
                      "_number": 12,
                      "_offset": 4
                    },
                    {
                      "_line": "    ...: @dataclass",
                      "_number": 13,
                      "_offset": 4
                    },
                    {
                      "_line": "    ...: class Reviewer:",
                      "_number": 14,
                      "_offset": 4
                    },
                    {
                      "_line": "    ...:     first: Optional[str]",
                      "_number": 15,
                      "_offset": 4
                    },
                    {
                      "_line": "    ...:     last: str",
                      "_number": 16,
                      "_offset": 4
                    },
                    {
                      "_line": "    ...:",
                      "_number": 17,
                      "_offset": 4
                    },
                    {
                      "_line": "",
                      "_number": 18,
                      "_offset": 4
                    }
                  ]
                },
                "dt": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "In [15]: @dataclass"
                      }
                    }
                  ]
                },
                "dd": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "...: class Author: ...:     first: Optional[str] ...:     last: str ...: ...: @dataclass ...: class Reviewer: ...:     first: Optional[str] ...:     last: str ...: "
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "children": [
              {
                "type": "Words",
                "data": {
                  "value": "Here, items can be heterogenous, or of ambiguous type based only on its fields values."
                }
              }
            ]
          }
        },
        {
          "type": "DefList",
          "data": {
            "children": [
              {
                "lines": {
                  "_lines": [
                    {
                      "_line": "In [16]: @dataclass",
                      "_number": 21,
                      "_offset": 0
                    }
                  ]
                },
                "wh": {
                  "_lines": []
                },
                "ind": {
                  "_lines": [
                    {
                      "_line": "    ...: class Book:",
                      "_number": 22,
                      "_offset": 4
                    },
                    {
                      "_line": "    ...:     author: List[Union[Author, Reviewer]]",
                      "_number": 23,
                      "_offset": 4
                    },
                    {
                      "_line": "    ...:     title: str",
                      "_number": 24,
                      "_offset": 4
                    },
                    {
                      "_line": "    ...:",
                      "_number": 25,
                      "_offset": 4
                    },
                    {
                      "_line": "",
                      "_number": 26,
                      "_offset": 4
                    }
                  ]
                },
                "dt": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "In [16]: @dataclass"
                      }
                    }
                  ]
                },
                "dd": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "...: class Book: ...:     author: List[Union[Author, Reviewer]] ...:     title: str ...: "
                      }
                    }
                  ]
                }
              },
              {
                "lines": {
                  "_lines": [
                    {
                      "_line": "In [17]: obj = Book([Author(\"Matthias\", \"B\"), Reviewer(\"Tony\", \"Fast\")], \"pyshs\")",
                      "_number": 27,
                      "_offset": 0
                    }
                  ]
                },
                "wh": {
                  "_lines": []
                },
                "ind": {
                  "_lines": [
                    {
                      "_line": "    ...:",
                      "_number": 28,
                      "_offset": 4
                    },
                    {
                      "_line": "    ...: data = serialize(obj , Book)",
                      "_number": 29,
                      "_offset": 4
                    },
                    {
                      "_line": "    ...:",
                      "_number": 30,
                      "_offset": 4
                    },
                    {
                      "_line": "    ...: deserialize(Book, Book, data)",
                      "_number": 31,
                      "_offset": 4
                    },
                    {
                      "_line": "",
                      "_number": 32,
                      "_offset": 4
                    }
                  ]
                },
                "dt": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "In [17]: obj = Book([Author(\"Matthias\", \"B\"), Reviewer(\"Tony\", \"Fast\")], \"pyshs\")"
                      }
                    }
                  ]
                },
                "dd": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "...: ...: data = serialize(obj , Book) ...: ...: deserialize(Book, Book, data) "
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "children": [
              {
                "type": "Words",
                "data": {
                  "value": "Out[17]: Book(author=[Author(first='Matthias', last='B'), Reviewer(first='Tony', last='Fast')], title='pyshs')"
                }
              }
            ]
          }
        },
        {
          "type": "DefList",
          "data": {
            "children": [
              {
                "lines": {
                  "_lines": [
                    {
                      "_line": "                      ^...................................^",
                      "_number": 35,
                      "_offset": 22
                    }
                  ]
                },
                "wh": {
                  "_lines": []
                },
                "ind": {
                  "_lines": [
                    {
                      "_line": "                                        .",
                      "_number": 36,
                      "_offset": 40
                    },
                    {
                      "_line": "                                        .Note the conserved types.",
                      "_number": 37,
                      "_offset": 40
                    },
                    {
                      "_line": "",
                      "_number": 38,
                      "_offset": 40
                    }
                  ]
                },
                "dt": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "^...................................^"
                      }
                    }
                  ]
                },
                "dd": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": ". .Note the conserved types. "
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "children": [
              {
                "type": "Words",
                "data": {
                  "value": "Unlike other similar libraries that automatically serialise/deserialise it has the following properties:"
                }
              }
            ]
          }
        },
        {
          "type": "DefList",
          "data": {
            "children": [
              {
                "lines": {
                  "_lines": [
                    {
                      "_line": "    - object do not need to have a give baseclass, they need to have an __init__",
                      "_number": 42,
                      "_offset": 4
                    }
                  ]
                },
                "wh": {
                  "_lines": []
                },
                "ind": {
                  "_lines": [
                    {
                      "_line": "      or _deserialise class method that takes each parameter as kwargs.",
                      "_number": 43,
                      "_offset": 6
                    }
                  ]
                },
                "dt": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "- object do not need to have a give baseclass, they need to have an __init__"
                      }
                    }
                  ]
                },
                "dd": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "or _deserialise class method that takes each parameter as kwargs."
                      }
                    }
                  ]
                }
              },
              {
                "lines": {
                  "_lines": [
                    {
                      "_line": "    - Subclass or isomorphic classes are kept in the de-serialisation, in",
                      "_number": 44,
                      "_offset": 4
                    }
                  ]
                },
                "wh": {
                  "_lines": []
                },
                "ind": {
                  "_lines": [
                    {
                      "_line": "      particular in Union and List of Unions. That is to say it will properly",
                      "_number": 45,
                      "_offset": 6
                    },
                    {
                      "_line": "      de-serialise and heterogenous list or dict, as long as those respect the",
                      "_number": 46,
                      "_offset": 6
                    },
                    {
                      "_line": "      type annotation.",
                      "_number": 47,
                      "_offset": 6
                    },
                    {
                      "_line": "",
                      "_number": 48,
                      "_offset": 6
                    }
                  ]
                },
                "dt": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "- Subclass or isomorphic classes are kept in the de-serialisation, in"
                      }
                    }
                  ]
                },
                "dd": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "particular in Union and List of Unions. That is to say it will properly de-serialise and heterogenous list or dict, as long as those respect the type annotation. "
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "children": [
              {
                "type": "Words",
                "data": {
                  "value": "Both Pydantic and Jetblack-serialize would have erased the types and returned either 2 Authors or 2 Reviewers."
                }
              }
            ]
          }
        },
        {
          "type": "DefList",
          "data": {
            "children": [
              {
                "lines": {
                  "_lines": [
                    {
                      "_line": "    - it is also compatible with Rust Serde with adjacently tagged Unions (not",
                      "_number": 52,
                      "_offset": 4
                    }
                  ]
                },
                "wh": {
                  "_lines": []
                },
                "ind": {
                  "_lines": [
                    {
                      "_line": "      critical but nice to have)",
                      "_number": 53,
                      "_offset": 6
                    }
                  ]
                },
                "dt": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "- it is also compatible with Rust Serde with adjacently tagged Unions (not"
                      }
                    }
                  ]
                },
                "dd": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "critical but nice to have)"
                      }
                    }
                  ]
                }
              }
            ]
          }
        }
      ]
    },
    "Parameters": {
      "children": []
    },
    "Returns": {
      "children": []
    },
    "Yields": {
      "children": []
    },
    "Receives": {
      "children": []
    },
    "Raises": {
      "children": []
    },
    "Warns": {
      "children": []
    },
    "Other Parameters": {
      "children": []
    },
    "Attributes": {
      "children": []
    },
    "Methods": {
      "children": []
    },
    "Notes": {
      "children": []
    },
    "Warnings": {
      "children": []
    }
  },
  "refs": [],
  "ordered_sections": [
    "Summary",
    "Extended Summary"
  ],
  "item_file": "/Users/bussonniermatthias/miniconda3/lib/python3.8/site-packages/papyri/miniserde.py",
  "item_line": 0,
  "item_type": "<class 'module'>",
  "aliases": [
    "papyri.miniserde"
  ],
  "example_section_data": {
    "children": []
  },
  "see_also": [],
  "signature": null,
  "references": null
}