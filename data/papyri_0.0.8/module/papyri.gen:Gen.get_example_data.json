{
  "aliases": [
    "papyri.gen.Gen.get_example_data"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "One of the section in numpydoc is \"examples\" that usually consist of number if paragraph, interleaved with examples starting with >>> and ...,"
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "This attempt to parse this into structured data, with text, input and output as well as to infer the types of each token in the input examples."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "This is currently relatively limited as the inference does not work across code blocks."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "We do not yet properly handle explicit exceptions in examples, and those are seen as Papyri failures."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "The capturing of matplotlib figures is also limited."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The example section of a numpydoc parsed docstring"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "example_section",
              "type": "Param",
              "type_": ""
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The current object. It is common for the current object/function to not have to be imported imported in docstrings. This should become a high level option at some point. Note that for method classes, the class should be made available but currently is not."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "obj",
              "type": "Param",
              "type_": ""
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The fully qualified name of current object"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "qa",
              "type": "Param",
              "type_": ""
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Current configuration"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "config",
              "type": "Param",
              "type_": "Config"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Logger instance"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "log",
              "type": "Param",
              "type_": ""
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Extract example section data from a NumpyDocString"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [
      {
        "type": "text",
        "value": "Those are self examples, generating papyri documentation with papyri should\nbe able to handle the following"
      },
      {
        "type": "text",
        "value": "A simple input, should be execute and output should be shown if --exec option is set"
      },
      {
        "type": "code",
        "value": "1+1"
      },
      {
        "type": "code",
        "value": "2+2"
      },
      {
        "type": "text",
        "value": "Output with Syntax error should be marked as so."
      },
      {
        "type": "code",
        "value": "[this is syntax error]"
      },
      {
        "type": "text",
        "value": "if matplotlib and numpy available, we shoudl show graph"
      },
      {
        "type": "code",
        "value": "import matplotlib.pyplot as plt\nimport numpy as np\nx = np.arange(0, 10, 0.1)\nplt.plot(x, np.sin(x))\nplt.show()"
      },
      {
        "type": "Fig",
        "value": {
          "kind": "assets",
          "module": "papyri",
          "path": "fig-papyri.gen:Gen.get_example_data-0-3ba1d3e0.png",
          "type": "RefInfo",
          "version": "0.0.8"
        }
      },
      {
        "type": "text",
        "value": "Note that in the above we use `plt.show`,\nbut we can configure papyri to automatically detect\nwhen figures are created."
      }
    ],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "papyri/gen.py",
  "item_line": 1058,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Examples",
    "Notes"
  ],
  "references": null,
  "see_also": [],
  "signature": {
    "type": "Signature",
    "value": "(self, example_section, *, obj, qa: 'str', config, log) -> 'Tuple[Section, List[Any]]'"
  },
  "type": "DocBlob"
}