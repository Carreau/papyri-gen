{
  "aliases": [],
  "arbitrary": [
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "This document covers the details regarding internationalization and localization that are applied in Read the Docs. The guidelines described are mostly based on "
                },
                "type": "Words"
              },
              {
                "data": {
                  "target": "https://kitsune.readthedocs.io/en/latest/localization.html",
                  "value": "Kitsune's localization documentation"
                },
                "type": "ExternalLink"
              },
              {
                "data": {
                  "value": "."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "As with most of the Django applications out there, Read the Docs' i18n/l10n framework is based on "
                },
                "type": "Words"
              },
              {
                "data": {
                  "target": "http://www.gnu.org/software/gettext/",
                  "value": "GNU gettext"
                },
                "type": "ExternalLink"
              },
              {
                "data": {
                  "value": ". Crowd-sourced localization is optionally available at "
                },
                "type": "Words"
              },
              {
                "data": {
                  "target": "https://www.transifex.com/projects/p/readthedocs/",
                  "value": "Transifex"
                },
                "type": "ExternalLink"
              },
              {
                "data": {
                  "value": "."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "For more information about the general ideas, look at this document: http://www.gnu.org/software/gettext/manual/html_node/Concepts.html"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": "Internationalization"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Making strings in templates localizable is exceptionally easy. Making strings in Python localizable is a little more complicated. The short answer, though, is to just wrap the string in "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "_()"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": "."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "level": 1,
      "target": null,
      "title": "Making Strings Localizable"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "A string is often a combination of a fixed string and something changing, for example, "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "Welcome, James"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " is a combination of the fixed part "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "Welcome,"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", and the changing part "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "James"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ". The naive solution is to localize the first part and then follow it with the name:      "
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": "_('Welcome, ') + username"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "This is "
                },
                "type": "Words"
              },
              {
                "data": {
                  "content": {
                    "value": "wrong!"
                  }
                },
                "type": "Strong"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "In some locales, the word order may be different. Use Python string formatting to interpolate the changing part into the string:      "
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": "_('Welcome, {name}').format(name=username)"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Python gives you a lot of ways to interpolate strings. The best way is to use Py3k formatting and kwargs. That's the clearest for localizers."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "Interpolation"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Sometimes, it can help localizers to describe where a string comes from, particularly if it can be difficult to find in the interface, or is not very self-descriptive (e.g. very short strings). If you immediately precede the string with a comment that starts with "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "Translators:"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", the comment will be added to the PO file, and visible to localizers."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Example:      "
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": "DEFAULT_THEME_CHOICES = (\n    # Translators: This is a name of a Sphinx theme.\n    (THEME_DEFAULT, _('Default')),\n    # Translators: This is a name of a Sphinx theme.\n    (THEME_SPHINX, _('Sphinx Docs')),\n    # Translators: This is a name of a Sphinx theme.\n    (THEME_TRADITIONAL, _('Traditional')),\n    # Translators: This is a name of a Sphinx theme.\n    (THEME_NATURE, _('Nature')),\n    # Translators: This is a name of a Sphinx theme.\n    (THEME_HAIKU, _('Haiku')),\n)"
          },
          "type": "BlockVerbatim"
        }
      ],
      "level": 2,
      "target": null,
      "title": "Localization Comments"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Strings may be the same in English, but different in other languages. English, for example, has no grammatical gender, and sometimes the noun and verb forms of a word are identical."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "To make it possible to localize these correctly, we can add \"context\" (known in gettext as "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "msgctxt"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": ") to differentiate two otherwise identical strings. Django provides a "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "~django.utils.translation.pgettext()"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " function for this."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "For example, the string "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "Search"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": " may be a noun or a verb in English. In a heading, it may be considered a noun, but on a button, it may be a verb. It's appropriate to add a context (like "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "button"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": ") to one of them."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Generally, we should only add context if we are sure the strings aren't used in the same way, or if localizers ask us to."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Example:      "
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": "from django.utils.translation import pgettext\n\nmonth = pgettext(\"text for the search button on the form\", \"Search\")"
          },
          "type": "BlockVerbatim"
        }
      ],
      "level": 2,
      "target": null,
      "title": "Adding Context with msgctxt"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": {
                    "value": "You have 1 new messages"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": " grates on discerning ears. Fortunately, gettext gives us a way to fix that in English "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "and"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": " other locales, the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "~django.utils.translation.ngettext()"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " function:      "
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": "ngettext('singular sentence', 'plural sentence', count)"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "A more realistic example might be:      "
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": "ngettext('Found {count} result.',\n         'Found {count} results',\n         len(results)).format(count=len(results))"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "This method takes three arguments because English only needs three, i.e., zero is considered \"plural\" for English. Other languages may have "
                },
                "type": "Words"
              },
              {
                "data": {
                  "target": "http://translate.sourceforge.net/wiki/l10n/pluralforms",
                  "value": "different plural rules"
                },
                "type": "ExternalLink"
              },
              {
                "data": {
                  "value": ", and require different phrases for, say 0, 1, 2-3, 4-10, >10. That's absolutely fine, and gettext makes it possible."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "Plurals"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "When putting new text into a template, all you need to do is wrap it in a "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "{% trans %}"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " template tag:      "
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": "<h1>{% trans \"Heading\" %}</h1>"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Context can be added, too:      "
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": "<h1>{% trans \"Heading\" context \"section name\" %}</h1>"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Comments for translators need to precede the internationalized text and must start with the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "Translators:"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " keyword.:      "
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": "{# Translators: This heading is displayed in the user's profile page #}\n<h1>{% trans \"Heading\" %}</h1>"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "To interpolate, you need to use the alternative and more verbose "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "{%\nblocktrans %}"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " template tag \u2014 it's actually a block:      "
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": "{% blocktrans %}Welcome, {{ name }}!{% endblocktrans %}"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Note that the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "{{ name }}"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " variable needs to exist in the template context."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "In some situations, it's desirable to evaluate template expressions such as filters or accessing object attributes. You can't do that within the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "{%\nblocktrans %}"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " block, so you need to bind the expression to a local variable first:      "
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": "{% blocktrans trimmed with revision.created_date|timesince as timesince %}\n{{ revision }} {{ timesince }} ago\n{% endblocktrans %}\n\n{% blocktrans with project.name as name %}Delete {{ name }}?{% endblocktrans %}"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": [
                    "{% blocktrans %}"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " also provides pluralization. For that you need to bind a counter with the name "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "count"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " and provide a plural translation after the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "{%\nplural %}"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " tag:      "
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": "{% blocktrans trimmed with amount=article.price count years=i.length %}\nThat will cost $ {{ amount }} per year.\n{% plural %}\nThat will cost $ {{ amount }} per {{ years }} years.\n{% endblocktrans %}"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "children": [
                    {
                      "data": {
                        "value": "The previous multi-lines examples also use the "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "trimmed"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " option. This removes newline characters and replaces any whitespace at the beginning and end of a line, helping translators when translating these strings."
                      },
                      "type": "Words"
                    }
                  ]
                },
                "type": "Paragraph"
              }
            ],
            "kind": "note",
            "title": ""
          },
          "type": "Admonition"
        }
      ],
      "level": 1,
      "target": null,
      "title": "Strings in Templates"
    },
    {
      "children": [
        {
          "data": {
            "argument": "",
            "content": "Whenever you are adding a string in Python, ask yourself if it\nreally needs to be there, or if it should be in the template. Keep\nlogic and presentation separate!",
            "name": "Note",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Strings in Python are more complex for two reasons:"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "We need to make sure we're always using Unicode strings and the    Unicode-friendly versions of the functions."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "If you use the "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "~django.utils.translation.gettext"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " function in the    wrong place, the string may end up in the wrong locale!"
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              }
            ]
          },
          "type": "EnumeratedList"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Here's how you might localize a string in a view:      "
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": "from django.utils.translation import gettext as _\n\ndef my_view(request):\n    if request.user.is_superuser:\n        msg = _(u'Oh hi, staff!')\n    else:\n        msg = _(u'You are not staff!')"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Interpolation is done through normal Python string formatting:      "
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": "msg = _(u'Oh, hi, {user}').format(user=request.user.username)"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Context information can be supplied by using the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "~django.utils.translation.pgettext"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " function:      "
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": "msg = pgettext('the context', 'Search')"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Translator comments are normal one-line Python comments:      "
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": "# Translators: A message to users.\nmsg = _(u'Oh, hi there!')"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "If you need to use plurals, import the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "~django.utils.translation.ungettext"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " function:      "
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": "from django.utils.translation import ungettext\n\nn = len(results)\nmsg = ungettext('Found {0} result', 'Found {0} results', n).format(n)"
          },
          "type": "BlockVerbatim"
        }
      ],
      "level": 1,
      "target": null,
      "title": "Strings in Python"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "You can use "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "~django.utils.translation.gettext"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " or "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "~django.utils.translation.ungettext"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " only in views or functions called from views. If the function will be evaluated when the module is loaded, then the string may end up in English or the locale of the last request!"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Examples include strings in module-level code, arguments to functions in class definitions, strings in functions called from outside the context of a view. To internationalize these strings, you need to use the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "_lazy"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " versions of the above methods, "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "~django.utils.translation.gettext_lazy"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " and "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "~django.utils.translation.ungettext_lazy"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ". The result doesn't get translated until it is evaluated as a string, for example by being output or passed to "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "unicode()"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ":      "
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": "from django.utils.translation import gettext_lazy as _\n\nclass UserProfileForm(forms.ModelForm):\n    first_name = CharField(label=_('First name'), required=False)\n    last_name = CharField(label=_('Last name'), required=False)"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "In case you want to provide context to a lazily-evaluated gettext string, you will need to use "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "~django.utils.translation.pgettext_lazy"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": "."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "Lazily Translated Strings"
    },
    {
      "children": [],
      "level": 1,
      "target": null,
      "title": "Administrative Tasks"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "To update the translation source files (eg if you changed or added translatable strings in the templates or Python code) you should run "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "python manage.py\nmakemessages -l <language>"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " in the project's root directory (substitute "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "<language>"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " with a valid language code)."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "The updated files can now be localized in a "
                },
                "type": "Words"
              },
              {
                "data": {
                  "target": "https://en.wikipedia.org/wiki/Category:Software-localization_tools",
                  "value": "PO editor"
                },
                "type": "ExternalLink"
              },
              {
                "data": {
                  "value": " or crowd-sourced online translation tool."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "Updating Localization Files"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Gettext doesn't parse any text files, it reads a binary format for faster performance. To compile the latest PO files in the repository, Django provides the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "compilemessages"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " management command. For example, to compile all the available localizations, just run:"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "argument": "bash $",
            "content": "python manage.py compilemessages -a",
            "name": "prompt",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "You will need to do this every time you want to push updated translations to the live site."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Also, note that it's not a good idea to track MO files in version control, since they would need to be updated at the same pace PO files are updated, so it's silly and not worth it. They are ignored by "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    ".gitignore"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", but please make sure you don't forcibly add them to the repository."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "Compiling to MO"
    },
    {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "To push updated translation source files to Transifex, run "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "tx\npush -s"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " (for English) or "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "tx push -t <language>"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " (for non-English)."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "To pull changes from Transifex, run "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "tx pull -a"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ". Note that Transifex does not compile the translation files, so you have to do this after the pull (see the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "Compiling to MO"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " section)."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "For more information about the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "tx"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " command, read the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "target": "https://docs.transifex.com/client/introduction/",
                  "value": "Transifex client's help pages"
                },
                "type": "ExternalLink"
              },
              {
                "data": {
                  "value": "."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "children": [
                    {
                      "data": {
                        "value": "For the Read the Docs community site, we use "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "domain": null,
                        "role": null,
                        "value": "Invoke"
                      },
                      "type": "Directive"
                    },
                    {
                      "data": {
                        "value": " with a "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "domain": null,
                        "role": null,
                        "value": "tasks.py file"
                      },
                      "type": "Directive"
                    },
                    {
                      "data": {
                        "value": " to follow this process:"
                      },
                      "type": "Words"
                    }
                  ]
                },
                "type": "Paragraph"
              },
              {
                "data": {
                  "placeholder": "target",
                  "value": ".. _Invoke: https://www.pyinvoke.org/"
                },
                "type": "Unimplemented"
              },
              {
                "data": {
                  "placeholder": "target",
                  "value": ".. _tasks.py file: https://github.com/readthedocs/readthedocs.org/blob/main/tasks.py"
                },
                "type": "Unimplemented"
              },
              {
                "data": {
                  "children": [
                    {
                      "children": [
                        {
                          "data": {
                            "children": [
                              {
                                "data": {
                                  "value": "Update files and push sources (English) to Transifex:"
                                },
                                "type": "Words"
                              }
                            ]
                          },
                          "type": "Paragraph"
                        },
                        {
                          "data": {
                            "argument": "bash $",
                            "content": "invoke l10n.push",
                            "name": "prompt",
                            "options": []
                          },
                          "type": "BlockDirective"
                        }
                      ]
                    },
                    {
                      "children": [
                        {
                          "data": {
                            "children": [
                              {
                                "data": {
                                  "value": "Pull the updated translations from Transifex:"
                                },
                                "type": "Words"
                              }
                            ]
                          },
                          "type": "Paragraph"
                        },
                        {
                          "data": {
                            "argument": "bash $",
                            "content": "invoke l10n.pull",
                            "name": "prompt",
                            "options": []
                          },
                          "type": "BlockDirective"
                        }
                      ]
                    }
                  ]
                },
                "type": "EnumeratedList"
              }
            ],
            "kind": "note",
            "title": ""
          },
          "type": "Admonition"
        }
      ],
      "level": 2,
      "target": null,
      "title": "Transifex Integration"
    }
  ],
  "content": {},
  "example_section_data": {
    "children": [],
    "level": 0,
    "target": null,
    "title": null
  },
  "item_file": null,
  "item_line": null,
  "item_type": null,
  "ordered_sections": [],
  "references": null,
  "see_also": [],
  "signature": {
    "value": null
  }
}