{
  "aliases": [
    "scipy.stats._continuous_distns.erlang_gen.fit"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    },
    "Extended Summary": {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Starting estimates for the fit are given by input arguments; for any arguments not provided with starting estimates, "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "self._fitstart(data)"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " is called to generate such."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "One can hold some parameters fixed to specific values by passing in keyword arguments "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "f0"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "f1"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", ..., "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "fn"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " (for shape parameters) and "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "floc"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " and "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "fscale"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " (for location and scale parameters, respectively)."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    },
    "Notes": {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "With "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "method=\"MLE\""
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " (default), the fit is computed by minimizing the negative log-likelihood function. A large, finite penalty (rather than infinite negative log-likelihood) is applied for observations beyond the support of the distribution."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "With "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "method=\"MM\""
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", the fit is computed by minimizing the L2 norm of the relative errors between the first "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "k"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": " raw (about zero) data moments and the corresponding distribution moments, where "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "k"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": " is the number of non-fixed parameters. More precisely, the objective function is:      "
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": "(((data_moments - dist_moments)\n  / np.maximum(np.abs(data_moments), 1e-8))**2).sum()"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "where the constant "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "1e-8"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " avoids division by zero in case of vanishing data moments. Typically, this error norm can be reduced to zero. Note that the standard method of moments can produce parameters for which some data are outside the support of the fitted distribution; this implementation does nothing to prevent this."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "For either method, the returned answer is not guaranteed to be globally optimal; it may only be locally optimal, or the optimization may fail altogether. If the data contain any of "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "np.nan"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "np.inf"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", or "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "-np.inf"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "anchor": null,
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "module",
                    "module": "scipy",
                    "path": "scipy.stats._continuous_distns.erlang_gen.fit",
                    "version": "1.10.0"
                  },
                  "value": "fit"
                },
                "type": "Link"
              },
              {
                "data": {
                  "value": " method will raise a "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "RuntimeError"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": "."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "The Erlang distribution is generally defined to have integer values for the shape parameter.  This is not enforced by the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "erlang"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " class. When fitting the distribution, it will generally return a non-integer value for the shape parameter.  By using the keyword argument "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "f0=<integer>"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": ", the fit method can be constrained to fit the data to a specific integer shape parameter.        Examples --------"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Generate some data to fit: draw random variates from the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "anchor": null,
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "module",
                    "module": "scipy",
                    "path": "scipy.special.cython_special.beta",
                    "version": "1.10.0"
                  },
                  "value": "beta"
                },
                "type": "Link"
              },
              {
                "data": {
                  "value": " distribution"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": ">>> from scipy.stats import beta\n>>> a, b = 1., 2.\n>>> x = beta.rvs(a, b, size=1000)"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Now we can fit all four parameters ("
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "a"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "b"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "loc"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " and "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "scale"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": "):"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": ">>> a1, b1, loc1, scale1 = beta.fit(x)"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "We can also use some prior knowledge about the dataset: let's keep "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "loc"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " and "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "scale"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " fixed:"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": ">>> a1, b1, loc1, scale1 = beta.fit(x, floc=0, fscale=1)\n>>> loc1, scale1\n(0, 1)"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "We can also keep shape parameters fixed by using "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "f"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": "-keywords. To keep the zero-th shape parameter "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "a"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " equal 1, use "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "f0=1"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " or, equivalently, "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "fa=1"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ":"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": ">>> a1, b1, loc1, scale1 = beta.fit(x, fa=1, floc=0, fscale=1)\n>>> a1\n1"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Not all distributions return estimates for the shape parameters. "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "norm"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " for example just returns estimates for location and scale:"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": ">>> from scipy.stats import norm\n>>> x = norm.rvs(a, b, size=1000, random_state=123)\n>>> loc1, scale1 = norm.fit(x)\n>>> loc1, scale1\n(0.92087172783841631, 2.0015750750324668)"
          },
          "type": "BlockVerbatim"
        }
      ],
      "level": 0,
      "target": null,
      "title": null
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    },
    "Parameters": {
      "children": [
        {
          "data": {
            "children": [
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Data to use in estimating the distribution parameters."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "data",
                "type_": "array_like"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Starting value(s) for any shape-characterizing arguments (those not provided will be determined by a call to "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "_fitstart(data)"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": "). No default value."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "arg1, arg2, arg3,...",
                "type_": "floats, optional"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "children": [
                            {
                              "data": {
                                "children": [
                                  {
                                    "data": {
                                      "domain": null,
                                      "role": null,
                                      "value": "loc"
                                    },
                                    "type": "Directive"
                                  },
                                  {
                                    "data": {
                                      "value": ": initial guess of the distribution's location parameter."
                                    },
                                    "type": "Words"
                                  }
                                ]
                              },
                              "type": "Paragraph"
                            }
                          ]
                        },
                        {
                          "children": [
                            {
                              "data": {
                                "children": [
                                  {
                                    "data": {
                                      "anchor": null,
                                      "exists": true,
                                      "kind": "module",
                                      "reference": {
                                        "kind": "module",
                                        "module": "scipy",
                                        "path": "scipy.stats._qmc.scale",
                                        "version": "1.10.0"
                                      },
                                      "value": "scale"
                                    },
                                    "type": "Link"
                                  },
                                  {
                                    "data": {
                                      "value": ": initial guess of the distribution's scale parameter."
                                    },
                                    "type": "Words"
                                  }
                                ]
                              },
                              "type": "Paragraph"
                            }
                          ]
                        }
                      ]
                    },
                    "type": "BulletList"
                  },
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Special keyword arguments are recognized as holding certain parameters fixed:"
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  },
                  {
                    "data": {
                      "children": [
                        {
                          "children": []
                        }
                      ]
                    },
                    "type": "BulletList"
                  }
                ],
                "param": "**kwds",
                "type_": "floats, optional"
              }
            ]
          },
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null
    },
    "Raises": {
      "children": [
        {
          "data": {
            "children": [
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "If an input is invalid"
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "",
                "type_": "TypeError, ValueError"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "If fitting fails or the fit produced would be invalid"
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "",
                "type_": "`~scipy.stats.FitError`"
              }
            ]
          },
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    },
    "Returns": {
      "children": [
        {
          "data": {
            "children": [
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Estimates for any shape parameters (if applicable), followed by those for location and scale. For most random variables, shape statistics will be returned, but there are exceptions (e.g. "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "norm"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": ")."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "parameter_tuple",
                "type_": "tuple of floats"
              }
            ]
          },
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null
    },
    "Summary": {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Return estimates of shape (if applicable), location, and scale parameters from data. The default estimation method is Maximum Likelihood Estimation (MLE), but Method of Moments (MM) is also available."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    }
  },
  "example_section_data": {
    "children": [],
    "level": 0,
    "target": null,
    "title": null
  },
  "item_file": "/scipy/stats/_continuous_distns.py",
  "item_line": 3198,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Raises",
    "Returns",
    "Notes"
  ],
  "references": null,
  "see_also": [],
  "signature": {
    "value": "fit(self, data, *args, **kwds)"
  }
}