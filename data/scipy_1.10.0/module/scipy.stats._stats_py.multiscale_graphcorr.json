{
  "aliases": [
    "scipy.stats.multiscale_graphcorr"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    },
    "Extended Summary": {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Specifically, for each point, MGC finds the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": "k"
                },
                "type": "Math"
              },
              {
                "data": {
                  "value": "-nearest neighbors for one property (e.g. cloud density), and the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": "l"
                },
                "type": "Math"
              },
              {
                "data": {
                  "value": "-nearest neighbors for the other property (e.g. grass wetness) . This pair "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": "(k, l)"
                },
                "type": "Math"
              },
              {
                "data": {
                  "value": " is called the \"scale\". A priori, however, it is not know which scales will be most informative. So, MGC computes all distance pairs, and then efficiently computes the distance correlations for all scales. The local correlations illustrate which scales are relatively informative about the relationship. The key, therefore, to successfully discover and decipher relationships between disparate data modalities is to adaptively determine which scales are the most informative, and the geometric implication for the most informative scales. Doing so not only provides an estimate of whether the modalities are related, but also provides insight into how the determination was made. This is especially important in high-dimensional data, where simple visualizations do not reveal relationships to the unaided human eye. Characterizations of this implementation in particular have been derived from and benchmarked within in ."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    },
    "Notes": {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "A description of the process of MGC and applications on neuroscience data can be found in . It is performed using the following steps:"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Two distance matrices "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": "D^X"
                          },
                          "type": "Math"
                        },
                        {
                          "data": {
                            "value": " and "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": "D^Y"
                          },
                          "type": "Math"
                        },
                        {
                          "data": {
                            "value": " are computed and    modified to be mean zero columnwise. This results in two    "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": "n \\times n"
                          },
                          "type": "Math"
                        },
                        {
                          "data": {
                            "value": " distance matrices "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": "A"
                          },
                          "type": "Math"
                        },
                        {
                          "data": {
                            "value": " and "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": "B"
                          },
                          "type": "Math"
                        },
                        {
                          "data": {
                            "value": " (the    centering and unbiased modification) ."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "For all values "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": "k"
                          },
                          "type": "Math"
                        },
                        {
                          "data": {
                            "value": " and "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": "l"
                          },
                          "type": "Math"
                        },
                        {
                          "data": {
                            "value": " from "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": "1, ..., n"
                          },
                          "type": "Math"
                        },
                        {
                          "data": {
                            "value": ","
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  },
                  {
                    "data": {
                      "children": [
                        {
                          "children": [
                            {
                              "data": {
                                "children": [
                                  {
                                    "data": {
                                      "value": "The "
                                    },
                                    "type": "Words"
                                  },
                                  {
                                    "data": {
                                      "value": "k"
                                    },
                                    "type": "Math"
                                  },
                                  {
                                    "data": {
                                      "value": "-nearest neighbor and "
                                    },
                                    "type": "Words"
                                  },
                                  {
                                    "data": {
                                      "value": "l"
                                    },
                                    "type": "Math"
                                  },
                                  {
                                    "data": {
                                      "value": "-nearest neighbor graphs      are calculated for each property. Here, "
                                    },
                                    "type": "Words"
                                  },
                                  {
                                    "data": {
                                      "value": "G_k (i, j)"
                                    },
                                    "type": "Math"
                                  },
                                  {
                                    "data": {
                                      "value": " indicates      the "
                                    },
                                    "type": "Words"
                                  },
                                  {
                                    "data": {
                                      "value": "k"
                                    },
                                    "type": "Math"
                                  },
                                  {
                                    "data": {
                                      "value": "-smallest values of the "
                                    },
                                    "type": "Words"
                                  },
                                  {
                                    "data": {
                                      "value": "i"
                                    },
                                    "type": "Math"
                                  },
                                  {
                                    "data": {
                                      "value": "-th row of "
                                    },
                                    "type": "Words"
                                  },
                                  {
                                    "data": {
                                      "value": "A"
                                    },
                                    "type": "Math"
                                  },
                                  {
                                    "data": {
                                      "value": "      and "
                                    },
                                    "type": "Words"
                                  },
                                  {
                                    "data": {
                                      "value": "H_l (i, j)"
                                    },
                                    "type": "Math"
                                  },
                                  {
                                    "data": {
                                      "value": " indicates the "
                                    },
                                    "type": "Words"
                                  },
                                  {
                                    "data": {
                                      "value": "l"
                                    },
                                    "type": "Math"
                                  },
                                  {
                                    "data": {
                                      "value": " smallested values of      the "
                                    },
                                    "type": "Words"
                                  },
                                  {
                                    "data": {
                                      "value": "i"
                                    },
                                    "type": "Math"
                                  },
                                  {
                                    "data": {
                                      "value": "-th row of "
                                    },
                                    "type": "Words"
                                  },
                                  {
                                    "data": {
                                      "value": "B"
                                    },
                                    "type": "Math"
                                  }
                                ]
                              },
                              "type": "Paragraph"
                            }
                          ]
                        },
                        {
                          "children": [
                            {
                              "data": {
                                "children": [
                                  {
                                    "data": {
                                      "value": "Let "
                                    },
                                    "type": "Words"
                                  },
                                  {
                                    "data": {
                                      "value": "\\circ"
                                    },
                                    "type": "Math"
                                  },
                                  {
                                    "data": {
                                      "value": " denotes the entry-wise matrix product, then local      correlations are summed and normalized using the following statistic:"
                                    },
                                    "type": "Words"
                                  }
                                ]
                              },
                              "type": "Paragraph"
                            }
                          ]
                        }
                      ]
                    },
                    "type": "BulletList"
                  }
                ]
              }
            ]
          },
          "type": "EnumeratedList"
        },
        {
          "data": {
            "value": "c^{kl} = \\frac{\\sum_{ij} A G_k B H_l}\n              {\\sqrt{\\sum_{ij} A^2 G_k \\times \\sum_{ij} B^2 H_l}}"
          },
          "type": "BlockMath"
        },
        {
          "data": {
            "children": [
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "The MGC test statistic is the smoothed optimal local correlation of    "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": "\\{ c^{kl} \\}"
                          },
                          "type": "Math"
                        },
                        {
                          "data": {
                            "value": ". Denote the smoothing operation as "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": "R(\\cdot)"
                          },
                          "type": "Math"
                        },
                        {
                          "data": {
                            "value": "    (which essentially set all isolated large correlations) as 0 and    connected large correlations the same as before, see .) MGC is,"
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              }
            ]
          },
          "type": "EnumeratedList"
        },
        {
          "data": {
            "value": "MGC_n (x, y) = \\max_{(k, l)} R \\left(c^{kl} \\left( x_n, y_n \\right)\n                                            \\right)"
          },
          "type": "BlockMath"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "The test statistic returns a value between "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": "(-1, 1)"
                },
                "type": "Math"
              },
              {
                "data": {
                  "value": " since it is normalized."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "The p-value returned is calculated using a permutation test. This process is completed by first randomly permuting "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": "y"
                },
                "type": "Math"
              },
              {
                "data": {
                  "value": " to estimate the null distribution and then calculating the probability of observing a test statistic, under the null, at least as extreme as the observed test statistic."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "MGC requires at least 5 samples to run with reliable results. It can also handle high-dimensional data sets. In addition, by manipulating the input data matrices, the two-sample testing problem can be reduced to the independence testing problem . Given sample data "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": "U"
                },
                "type": "Math"
              },
              {
                "data": {
                  "value": " and "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": "V"
                },
                "type": "Math"
              },
              {
                "data": {
                  "value": " of sizes "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": "p \\times n"
                },
                "type": "Math"
              },
              {
                "data": {
                  "value": " "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": "p \\times m"
                },
                "type": "Math"
              },
              {
                "data": {
                  "value": ", data matrix "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": "X"
                },
                "type": "Math"
              },
              {
                "data": {
                  "value": " and "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": "Y"
                },
                "type": "Math"
              },
              {
                "data": {
                  "value": " can be created as follows:"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": "X = [U | V] \\in \\mathcal{R}^{p \\times (n + m)}\nY = [0_{1 \\times n} | 1_{1 \\times m}] \\in \\mathcal{R}^{(n + m)}"
          },
          "type": "BlockMath"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Then, the MGC statistic can be calculated as normal. This methodology can be extended to similar tests such as distance correlation ."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [],
            "kind": "versionadded",
            "title": "1.4.0"
          },
          "type": "Admonition"
        }
      ],
      "level": 0,
      "target": null,
      "title": null
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    },
    "Parameters": {
      "children": [
        {
          "data": {
            "children": [
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "If "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "x"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " and "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "y"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " have shapes "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "(n, p)"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " and "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "(n, q)"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " where "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "domain": null,
                            "role": null,
                            "value": "n"
                          },
                          "type": "Directive"
                        },
                        {
                          "data": {
                            "value": " is the number of samples and "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "domain": null,
                            "role": null,
                            "value": "p"
                          },
                          "type": "Directive"
                        },
                        {
                          "data": {
                            "value": " and "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "domain": null,
                            "role": null,
                            "value": "q"
                          },
                          "type": "Directive"
                        },
                        {
                          "data": {
                            "value": " are the number of dimensions, then the MGC independence test will be run.  Alternatively, "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "x"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " and "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "y"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " can have shapes "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "(n, n)"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " if they are distance or similarity matrices, and "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "compute_distance"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " must be sent to "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "None"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": ". If "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "x"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " and "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "y"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " have shapes "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "(n, p)"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " and "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "(m, p)"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": ", an unpaired two-sample MGC test will be run."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "x, y",
                "type_": "ndarray"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "A function that computes the distance or similarity among the samples within each data matrix. Set to "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "None"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " if "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "x"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " and "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "y"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " are already distance matrices. The default uses the euclidean norm metric. If you are calling a custom function, either create the distance matrix before-hand or create a function of the form "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "compute_distance(x)"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " where "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "anchor": null,
                            "exists": true,
                            "kind": "local",
                            "reference": {
                              "kind": "local",
                              "module": null,
                              "path": "x",
                              "version": null
                            },
                            "value": "x"
                          },
                          "type": "Link"
                        },
                        {
                          "data": {
                            "value": " is the data matrix for which pairwise distances are calculated."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "compute_distance",
                "type_": "callable, optional"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "The number of replications used to estimate the null when using the permutation test. The default is "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "1000"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": "."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "reps",
                "type_": "int, optional"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "If "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "workers"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " is an int the population is subdivided into "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "workers"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " sections and evaluated in parallel (uses "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "multiprocessing.Pool\n<multiprocessing>"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": "). Supply "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "-1"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " to use all cores available to the Process. Alternatively supply a map-like callable, such as "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "multiprocessing.Pool.map"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " for evaluating the p-value in parallel. This evaluation is carried out as "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "workers(func, iterable)"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": ". Requires that "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "domain": null,
                            "role": null,
                            "value": "func"
                          },
                          "type": "Directive"
                        },
                        {
                          "data": {
                            "value": " be pickleable. The default is "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "1"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": "."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "workers",
                "type_": "int or map-like callable, optional"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "If "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "domain": null,
                            "role": null,
                            "value": "True"
                          },
                          "type": "Directive"
                        },
                        {
                          "data": {
                            "value": ", a two sample test will be run. If "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "x"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " and "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "y"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " have shapes "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "(n, p)"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " and "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "(m, p)"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": ", this optional will be overridden and set to "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "True"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": ". Set to "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "True"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " if "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "x"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " and "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "y"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " both have shapes "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "(n, p)"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " and a two sample test is desired. The default is "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "False"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": ". Note that this will not run if inputs are distance matrices."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "is_twosamp",
                "type_": "bool, optional"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "children": [
                              {
                                "data": {
                                  "anchor": null,
                                  "exists": true,
                                  "kind": "module",
                                  "reference": {
                                    "kind": "api",
                                    "module": "numpy",
                                    "path": "numpy.random.mtrand.RandomState",
                                    "version": "*"
                                  },
                                  "value": "numpy.random.RandomState"
                                },
                                "type": "Link"
                              },
                              {
                                "data": {
                                  "value": "}, optional"
                                },
                                "type": "Words"
                              }
                            ]
                          },
                          "type": "Paragraph"
                        }
                      ]
                    },
                    "type": "BlockQuote"
                  },
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "If "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "anchor": null,
                            "exists": true,
                            "kind": "module",
                            "reference": {
                              "kind": "module",
                              "module": "scipy",
                              "path": "scipy.linalg.interpolative.seed",
                              "version": "1.10.0"
                            },
                            "value": "seed"
                          },
                          "type": "Link"
                        },
                        {
                          "data": {
                            "value": " is None (or "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "domain": null,
                            "role": null,
                            "value": "np.random"
                          },
                          "type": "Directive"
                        },
                        {
                          "data": {
                            "value": "), the "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "anchor": null,
                            "exists": true,
                            "kind": "module",
                            "reference": {
                              "kind": "api",
                              "module": "numpy",
                              "path": "numpy.random.mtrand.RandomState",
                              "version": "*"
                            },
                            "value": "numpy.random.RandomState"
                          },
                          "type": "Link"
                        },
                        {
                          "data": {
                            "value": " singleton is used. If "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "anchor": null,
                            "exists": true,
                            "kind": "module",
                            "reference": {
                              "kind": "module",
                              "module": "scipy",
                              "path": "scipy.linalg.interpolative.seed",
                              "version": "1.10.0"
                            },
                            "value": "seed"
                          },
                          "type": "Link"
                        },
                        {
                          "data": {
                            "value": " is an int, a new "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "RandomState"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " instance is used, seeded with "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "anchor": null,
                            "exists": true,
                            "kind": "module",
                            "reference": {
                              "kind": "module",
                              "module": "scipy",
                              "path": "scipy.linalg.interpolative.seed",
                              "version": "1.10.0"
                            },
                            "value": "seed"
                          },
                          "type": "Link"
                        },
                        {
                          "data": {
                            "value": ". If "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "anchor": null,
                            "exists": true,
                            "kind": "module",
                            "reference": {
                              "kind": "module",
                              "module": "scipy",
                              "path": "scipy.linalg.interpolative.seed",
                              "version": "1.10.0"
                            },
                            "value": "seed"
                          },
                          "type": "Link"
                        },
                        {
                          "data": {
                            "value": " is already a "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "Generator"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " or "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "RandomState"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " instance then that instance is used."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "random_state",
                "type_": "{None, int, `numpy.random.Generator`,"
              }
            ]
          },
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    },
    "Returns": {
      "children": [
        {
          "data": {
            "children": [
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "An object containing attributes:"
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  },
                  {
                    "data": {
                      "children": [
                        {
                          "dd": [
                            {
                              "data": {
                                "children": [
                                  {
                                    "data": {
                                      "value": "statistic"
                                    },
                                    "type": "Words"
                                  }
                                ]
                              },
                              "type": "Paragraph"
                            }
                          ],
                          "dt": {
                            "children": [
                              {
                                "data": {
                                  "value": "statistic"
                                },
                                "type": "Words"
                              }
                            ]
                          }
                        },
                        {
                          "dd": [
                            {
                              "data": {
                                "children": [
                                  {
                                    "data": {
                                      "value": "pvalue"
                                    },
                                    "type": "Words"
                                  }
                                ]
                              },
                              "type": "Paragraph"
                            }
                          ],
                          "dt": {
                            "children": [
                              {
                                "data": {
                                  "value": "pvalue"
                                },
                                "type": "Words"
                              }
                            ]
                          }
                        },
                        {
                          "dd": [
                            {
                              "data": {
                                "children": [
                                  {
                                    "data": {
                                      "value": "mgc_dict"
                                    },
                                    "type": "Words"
                                  }
                                ]
                              },
                              "type": "Paragraph"
                            }
                          ],
                          "dt": {
                            "children": [
                              {
                                "data": {
                                  "value": "mgc_dict"
                                },
                                "type": "Words"
                              }
                            ]
                          }
                        }
                      ]
                    },
                    "type": "DefList"
                  }
                ],
                "param": "res",
                "type_": "MGCResult"
              }
            ]
          },
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null
    },
    "Summary": {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Computes the Multiscale Graph Correlation (MGC) test statistic."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    }
  },
  "example_section_data": {
    "children": [
      {
        "data": {
          "ce_status": "execed",
          "entries": [
            {
              "link": {
                "data": "import",
                "type": "str"
              },
              "type": "kn"
            },
            {
              "link": {
                "data": " ",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": {
                  "anchor": null,
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "module",
                    "module": "scipy",
                    "path": "scipy.io.matlab._byteordercodes.to_numpy_code",
                    "version": "1.10.0"
                  },
                  "value": "numpy"
                },
                "type": "Link"
              },
              "type": "nn"
            },
            {
              "link": {
                "data": " ",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": "as",
                "type": "str"
              },
              "type": "k"
            },
            {
              "link": {
                "data": " ",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": {
                  "anchor": null,
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "module",
                    "module": "scipy",
                    "path": "scipy.io.matlab._byteordercodes.to_numpy_code",
                    "version": "1.10.0"
                  },
                  "value": "np"
                },
                "type": "Link"
              },
              "type": "nn"
            },
            {
              "link": {
                "data": "\n",
                "type": "str"
              },
              "type": "w"
            },
            {
              "link": {
                "data": "from",
                "type": "str"
              },
              "type": "kn"
            },
            {
              "link": {
                "data": " ",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": {
                  "anchor": null,
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "module",
                    "module": "scipy",
                    "path": "scipy",
                    "version": "1.10.0"
                  },
                  "value": "scipy"
                },
                "type": "Link"
              },
              "type": "nn"
            },
            {
              "link": {
                "data": ".",
                "type": "str"
              },
              "type": "nn"
            },
            {
              "link": {
                "data": {
                  "anchor": null,
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "module",
                    "module": "scipy",
                    "path": "scipy.stats",
                    "version": "1.10.0"
                  },
                  "value": "stats"
                },
                "type": "Link"
              },
              "type": "nn"
            },
            {
              "link": {
                "data": " ",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": "import",
                "type": "str"
              },
              "type": "kn"
            },
            {
              "link": {
                "data": " ",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": {
                  "anchor": null,
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "module",
                    "module": "scipy",
                    "path": "scipy.stats._stats_py.multiscale_graphcorr",
                    "version": "1.10.0"
                  },
                  "value": "multiscale_graphcorr"
                },
                "type": "Link"
              },
              "type": ""
            },
            {
              "link": {
                "data": "\n",
                "type": "str"
              },
              "type": "w"
            },
            {
              "link": {
                "data": {
                  "anchor": null,
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "module",
                    "module": "numpy",
                    "path": "numpy.ndarray",
                    "version": "*"
                  },
                  "value": "x"
                },
                "type": "Link"
              },
              "type": ""
            },
            {
              "link": {
                "data": " ",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": "=",
                "type": "str"
              },
              "type": "o"
            },
            {
              "link": {
                "data": " ",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": {
                  "anchor": null,
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "module",
                    "module": "scipy",
                    "path": "scipy.io.matlab._byteordercodes.to_numpy_code",
                    "version": "1.10.0"
                  },
                  "value": "np"
                },
                "type": "Link"
              },
              "type": ""
            },
            {
              "link": {
                "data": ".",
                "type": "str"
              },
              "type": "o"
            },
            {
              "link": {
                "data": {
                  "anchor": null,
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "module",
                    "module": "numpy",
                    "path": "numpy.arange",
                    "version": "*"
                  },
                  "value": "arange"
                },
                "type": "Link"
              },
              "type": ""
            },
            {
              "link": {
                "data": "(",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": "100",
                "type": "str"
              },
              "type": "mi"
            },
            {
              "link": {
                "data": ")",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": "\n",
                "type": "str"
              },
              "type": "w"
            },
            {
              "link": {
                "data": {
                  "anchor": null,
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "module",
                    "module": "numpy",
                    "path": "numpy.ndarray",
                    "version": "*"
                  },
                  "value": "y"
                },
                "type": "Link"
              },
              "type": ""
            },
            {
              "link": {
                "data": " ",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": "=",
                "type": "str"
              },
              "type": "o"
            },
            {
              "link": {
                "data": " ",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": {
                  "anchor": null,
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "module",
                    "module": "numpy",
                    "path": "numpy.ndarray",
                    "version": "*"
                  },
                  "value": "x"
                },
                "type": "Link"
              },
              "type": ""
            },
            {
              "link": {
                "data": "\n",
                "type": "str"
              },
              "type": "w"
            },
            {
              "link": {
                "data": "res",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": " ",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": "=",
                "type": "str"
              },
              "type": "o"
            },
            {
              "link": {
                "data": " ",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": {
                  "anchor": null,
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "module",
                    "module": "scipy",
                    "path": "scipy.stats._stats_py.multiscale_graphcorr",
                    "version": "1.10.0"
                  },
                  "value": "multiscale_graphcorr"
                },
                "type": "Link"
              },
              "type": ""
            },
            {
              "link": {
                "data": "(",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": {
                  "anchor": null,
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "module",
                    "module": "numpy",
                    "path": "numpy.ndarray",
                    "version": "*"
                  },
                  "value": "x"
                },
                "type": "Link"
              },
              "type": ""
            },
            {
              "link": {
                "data": ",",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": " ",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": {
                  "anchor": null,
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "module",
                    "module": "numpy",
                    "path": "numpy.ndarray",
                    "version": "*"
                  },
                  "value": "y"
                },
                "type": "Link"
              },
              "type": ""
            },
            {
              "link": {
                "data": ")",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": "\n",
                "type": "str"
              },
              "type": "w"
            },
            {
              "link": {
                "data": {
                  "anchor": null,
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "module",
                    "module": "scipy",
                    "path": "scipy.stats._stats_py.MGCResult",
                    "version": "1.10.0"
                  },
                  "value": "res"
                },
                "type": "Link"
              },
              "type": ""
            },
            {
              "link": {
                "data": ".",
                "type": "str"
              },
              "type": "o"
            },
            {
              "link": {
                "data": {
                  "anchor": null,
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "module",
                    "module": "numpy",
                    "path": "numpy.float64",
                    "version": "*"
                  },
                  "value": "statistic"
                },
                "type": "Link"
              },
              "type": ""
            },
            {
              "link": {
                "data": ",",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": " ",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": {
                  "anchor": null,
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "module",
                    "module": "scipy",
                    "path": "scipy.stats._stats_py.MGCResult",
                    "version": "1.10.0"
                  },
                  "value": "res"
                },
                "type": "Link"
              },
              "type": ""
            },
            {
              "link": {
                "data": ".",
                "type": "str"
              },
              "type": "o"
            },
            {
              "link": {
                "data": {
                  "anchor": null,
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "module",
                    "module": "numpy",
                    "path": "numpy.float64",
                    "version": "*"
                  },
                  "value": "pvalue"
                },
                "type": "Link"
              },
              "type": ""
            }
          ],
          "out": "(1.0, 0.001)"
        },
        "type": "Code2"
      },
      {
        "data": {
          "children": [
            {
              "data": {
                "value": "To run an unpaired two-sample test,"
              },
              "type": "Words"
            }
          ]
        },
        "type": "Paragraph"
      },
      {
        "data": {
          "ce_status": "execed",
          "entries": [
            {
              "link": {
                "data": {
                  "anchor": null,
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "module",
                    "module": "numpy",
                    "path": "numpy.ndarray",
                    "version": "*"
                  },
                  "value": "x"
                },
                "type": "Link"
              },
              "type": ""
            },
            {
              "link": {
                "data": " ",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": "=",
                "type": "str"
              },
              "type": "o"
            },
            {
              "link": {
                "data": " ",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": {
                  "anchor": null,
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "module",
                    "module": "scipy",
                    "path": "scipy.io.matlab._byteordercodes.to_numpy_code",
                    "version": "1.10.0"
                  },
                  "value": "np"
                },
                "type": "Link"
              },
              "type": ""
            },
            {
              "link": {
                "data": ".",
                "type": "str"
              },
              "type": "o"
            },
            {
              "link": {
                "data": {
                  "anchor": null,
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "module",
                    "module": "numpy",
                    "path": "numpy.arange",
                    "version": "*"
                  },
                  "value": "arange"
                },
                "type": "Link"
              },
              "type": ""
            },
            {
              "link": {
                "data": "(",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": "100",
                "type": "str"
              },
              "type": "mi"
            },
            {
              "link": {
                "data": ")",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": "\n",
                "type": "str"
              },
              "type": "w"
            },
            {
              "link": {
                "data": {
                  "anchor": null,
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "module",
                    "module": "numpy",
                    "path": "numpy.ndarray",
                    "version": "*"
                  },
                  "value": "y"
                },
                "type": "Link"
              },
              "type": ""
            },
            {
              "link": {
                "data": " ",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": "=",
                "type": "str"
              },
              "type": "o"
            },
            {
              "link": {
                "data": " ",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": {
                  "anchor": null,
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "module",
                    "module": "scipy",
                    "path": "scipy.io.matlab._byteordercodes.to_numpy_code",
                    "version": "1.10.0"
                  },
                  "value": "np"
                },
                "type": "Link"
              },
              "type": ""
            },
            {
              "link": {
                "data": ".",
                "type": "str"
              },
              "type": "o"
            },
            {
              "link": {
                "data": {
                  "anchor": null,
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "module",
                    "module": "numpy",
                    "path": "numpy.arange",
                    "version": "*"
                  },
                  "value": "arange"
                },
                "type": "Link"
              },
              "type": ""
            },
            {
              "link": {
                "data": "(",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": "79",
                "type": "str"
              },
              "type": "mi"
            },
            {
              "link": {
                "data": ")",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": "\n",
                "type": "str"
              },
              "type": "w"
            },
            {
              "link": {
                "data": "res",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": " ",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": "=",
                "type": "str"
              },
              "type": "o"
            },
            {
              "link": {
                "data": " ",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": {
                  "anchor": null,
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "module",
                    "module": "scipy",
                    "path": "scipy.stats._stats_py.multiscale_graphcorr",
                    "version": "1.10.0"
                  },
                  "value": "multiscale_graphcorr"
                },
                "type": "Link"
              },
              "type": ""
            },
            {
              "link": {
                "data": "(",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": {
                  "anchor": null,
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "module",
                    "module": "numpy",
                    "path": "numpy.ndarray",
                    "version": "*"
                  },
                  "value": "x"
                },
                "type": "Link"
              },
              "type": ""
            },
            {
              "link": {
                "data": ",",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": " ",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": {
                  "anchor": null,
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "module",
                    "module": "numpy",
                    "path": "numpy.ndarray",
                    "version": "*"
                  },
                  "value": "y"
                },
                "type": "Link"
              },
              "type": ""
            },
            {
              "link": {
                "data": ")",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": "\n",
                "type": "str"
              },
              "type": "w"
            },
            {
              "link": {
                "data": {
                  "anchor": null,
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "module",
                    "module": "scipy",
                    "path": "scipy.stats._stats_py.MGCResult",
                    "version": "1.10.0"
                  },
                  "value": "res"
                },
                "type": "Link"
              },
              "type": ""
            },
            {
              "link": {
                "data": ".",
                "type": "str"
              },
              "type": "o"
            },
            {
              "link": {
                "data": {
                  "anchor": null,
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "module",
                    "module": "numpy",
                    "path": "numpy.float64",
                    "version": "*"
                  },
                  "value": "statistic"
                },
                "type": "Link"
              },
              "type": ""
            },
            {
              "link": {
                "data": ",",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": " ",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": {
                  "anchor": null,
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "module",
                    "module": "scipy",
                    "path": "scipy.stats._stats_py.MGCResult",
                    "version": "1.10.0"
                  },
                  "value": "res"
                },
                "type": "Link"
              },
              "type": ""
            },
            {
              "link": {
                "data": ".",
                "type": "str"
              },
              "type": "o"
            },
            {
              "link": {
                "data": {
                  "anchor": null,
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "module",
                    "module": "numpy",
                    "path": "numpy.float64",
                    "version": "*"
                  },
                  "value": "pvalue"
                },
                "type": "Link"
              },
              "type": ""
            },
            {
              "link": {
                "data": "  ",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": "# doctest: +SKIP",
                "type": "str"
              },
              "type": "c1"
            }
          ],
          "out": "(0.033258146255703246, 0.023)"
        },
        "type": "Code2"
      },
      {
        "data": {
          "children": [
            {
              "data": {
                "value": "or, if shape of the inputs are the same,"
              },
              "type": "Words"
            }
          ]
        },
        "type": "Paragraph"
      },
      {
        "data": {
          "ce_status": "execed",
          "entries": [
            {
              "link": {
                "data": {
                  "anchor": null,
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "module",
                    "module": "numpy",
                    "path": "numpy.ndarray",
                    "version": "*"
                  },
                  "value": "x"
                },
                "type": "Link"
              },
              "type": ""
            },
            {
              "link": {
                "data": " ",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": "=",
                "type": "str"
              },
              "type": "o"
            },
            {
              "link": {
                "data": " ",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": {
                  "anchor": null,
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "module",
                    "module": "scipy",
                    "path": "scipy.io.matlab._byteordercodes.to_numpy_code",
                    "version": "1.10.0"
                  },
                  "value": "np"
                },
                "type": "Link"
              },
              "type": ""
            },
            {
              "link": {
                "data": ".",
                "type": "str"
              },
              "type": "o"
            },
            {
              "link": {
                "data": {
                  "anchor": null,
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "module",
                    "module": "numpy",
                    "path": "numpy.arange",
                    "version": "*"
                  },
                  "value": "arange"
                },
                "type": "Link"
              },
              "type": ""
            },
            {
              "link": {
                "data": "(",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": "100",
                "type": "str"
              },
              "type": "mi"
            },
            {
              "link": {
                "data": ")",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": "\n",
                "type": "str"
              },
              "type": "w"
            },
            {
              "link": {
                "data": {
                  "anchor": null,
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "module",
                    "module": "numpy",
                    "path": "numpy.ndarray",
                    "version": "*"
                  },
                  "value": "y"
                },
                "type": "Link"
              },
              "type": ""
            },
            {
              "link": {
                "data": " ",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": "=",
                "type": "str"
              },
              "type": "o"
            },
            {
              "link": {
                "data": " ",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": {
                  "anchor": null,
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "module",
                    "module": "numpy",
                    "path": "numpy.ndarray",
                    "version": "*"
                  },
                  "value": "x"
                },
                "type": "Link"
              },
              "type": ""
            },
            {
              "link": {
                "data": "\n",
                "type": "str"
              },
              "type": "w"
            },
            {
              "link": {
                "data": "res",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": " ",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": "=",
                "type": "str"
              },
              "type": "o"
            },
            {
              "link": {
                "data": " ",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": {
                  "anchor": null,
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "module",
                    "module": "scipy",
                    "path": "scipy.stats._stats_py.multiscale_graphcorr",
                    "version": "1.10.0"
                  },
                  "value": "multiscale_graphcorr"
                },
                "type": "Link"
              },
              "type": ""
            },
            {
              "link": {
                "data": "(",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": {
                  "anchor": null,
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "module",
                    "module": "numpy",
                    "path": "numpy.ndarray",
                    "version": "*"
                  },
                  "value": "x"
                },
                "type": "Link"
              },
              "type": ""
            },
            {
              "link": {
                "data": ",",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": " ",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": {
                  "anchor": null,
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "module",
                    "module": "numpy",
                    "path": "numpy.ndarray",
                    "version": "*"
                  },
                  "value": "y"
                },
                "type": "Link"
              },
              "type": ""
            },
            {
              "link": {
                "data": ",",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": " ",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": "is_twosamp",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": "=",
                "type": "str"
              },
              "type": "o"
            },
            {
              "link": {
                "data": "True",
                "type": "str"
              },
              "type": "kc"
            },
            {
              "link": {
                "data": ")",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": "\n",
                "type": "str"
              },
              "type": "w"
            },
            {
              "link": {
                "data": {
                  "anchor": null,
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "module",
                    "module": "scipy",
                    "path": "scipy.stats._stats_py.MGCResult",
                    "version": "1.10.0"
                  },
                  "value": "res"
                },
                "type": "Link"
              },
              "type": ""
            },
            {
              "link": {
                "data": ".",
                "type": "str"
              },
              "type": "o"
            },
            {
              "link": {
                "data": {
                  "anchor": null,
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "module",
                    "module": "numpy",
                    "path": "numpy.float64",
                    "version": "*"
                  },
                  "value": "statistic"
                },
                "type": "Link"
              },
              "type": ""
            },
            {
              "link": {
                "data": ",",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": " ",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": {
                  "anchor": null,
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "module",
                    "module": "scipy",
                    "path": "scipy.stats._stats_py.MGCResult",
                    "version": "1.10.0"
                  },
                  "value": "res"
                },
                "type": "Link"
              },
              "type": ""
            },
            {
              "link": {
                "data": ".",
                "type": "str"
              },
              "type": "o"
            },
            {
              "link": {
                "data": {
                  "anchor": null,
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "module",
                    "module": "numpy",
                    "path": "numpy.float64",
                    "version": "*"
                  },
                  "value": "pvalue"
                },
                "type": "Link"
              },
              "type": ""
            },
            {
              "link": {
                "data": "  ",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": "# doctest: +SKIP",
                "type": "str"
              },
              "type": "c1"
            }
          ],
          "out": "(-0.008021809890200488, 1.0)"
        },
        "type": "Code2"
      }
    ],
    "level": 0,
    "target": null,
    "title": null
  },
  "item_file": "/scipy/stats/_stats_py.py",
  "item_line": 5568,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns",
    "See Also",
    "Notes",
    "References",
    "Examples"
  ],
  "references": null,
  "see_also": [
    {
      "descriptions": [
        {
          "children": [
            {
              "data": {
                "value": "Pearson correlation coefficient and p-value for testing non-correlation."
              },
              "type": "Words"
            }
          ]
        }
      ],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "module",
          "module": "scipy",
          "path": "scipy.stats._stats_py.pearsonr",
          "version": "1.10.0"
        },
        "value": "pearsonr"
      },
      "type": null
    },
    {
      "descriptions": [
        {
          "children": [
            {
              "data": {
                "value": "Calculates Kendall's tau."
              },
              "type": "Words"
            }
          ]
        }
      ],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "module",
          "module": "scipy",
          "path": "scipy.stats._stats_py.kendalltau",
          "version": "1.10.0"
        },
        "value": "kendalltau"
      },
      "type": null
    },
    {
      "descriptions": [
        {
          "children": [
            {
              "data": {
                "value": "Calculates a Spearman rank-order correlation coefficient."
              },
              "type": "Words"
            }
          ]
        }
      ],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "module",
          "module": "scipy",
          "path": "scipy.stats._stats_py.spearmanr",
          "version": "1.10.0"
        },
        "value": "spearmanr"
      },
      "type": null
    }
  ],
  "signature": {
    "value": "multiscale_graphcorr(x, y, compute_distance=<function _euclidean_dist at 0x0000000>, reps=1000, workers=1, is_twosamp=False, random_state=None)"
  }
}