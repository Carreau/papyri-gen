{
  "aliases": [
    "scipy.cluster.hierarchy.is_valid_linkage"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "A linkage matrix is valid if it is a 2-D array (type double) with "
            },
            {
              "type": "inlineMath",
              "value": "n"
            },
            {
              "type": "text",
              "value": " rows and 4 columns. The first two columns must contain indices between 0 and "
            },
            {
              "type": "inlineMath",
              "value": "2n-1"
            },
            {
              "type": "text",
              "value": ". For a given row "
            },
            {
              "type": "inlineCode",
              "value": "i"
            },
            {
              "type": "text",
              "value": ", the following two expressions have to hold:"
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "math",
          "value": "0 \\leq \\mathtt{Z[i,0]} \\leq i+n-1\n0 \\leq Z[i,1] \\leq i+n-1"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "I.e., a cluster cannot join another cluster unless the cluster being joined has been generated."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Linkage matrix."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "Z",
              "type": "Param",
              "type_": "array_like"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "When True, issues a Python warning if the linkage matrix passed is invalid."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "warning",
              "type": "Param",
              "type_": "bool, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "When True, throws a Python exception if the linkage matrix passed is invalid."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "throw",
              "type": "Param",
              "type_": "bool, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "This string refers to the variable name of the invalid linkage matrix."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "name",
              "type": "Param",
              "type_": "str, optional"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "True if the inconsistency matrix is valid."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "b",
              "type": "Param",
              "type_": "bool"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Check the validity of a linkage matrix."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [
      {
        "type": "code",
        "value": "from scipy.cluster.hierarchy import ward, is_valid_linkage\nfrom scipy.spatial.distance import pdist"
      },
      {
        "type": "text",
        "value": "All linkage matrices generated by the clustering methods in this module\nwill be valid (i.e., they will have the appropriate dimensions and the two\nrequired expressions will hold for all the rows)."
      },
      {
        "type": "text",
        "value": "We can check this using `scipy.cluster.hierarchy.is_valid_linkage`:"
      },
      {
        "type": "code",
        "value": "X = [[0, 0], [0, 1], [1, 0],\n     [0, 4], [0, 3], [1, 4],\n     [4, 0], [3, 0], [4, 1],\n     [4, 4], [3, 4], [4, 3]]"
      },
      {
        "type": "code",
        "value": "Z = ward(pdist(X))\nZ"
      },
      {
        "type": "code",
        "value": "is_valid_linkage(Z)"
      },
      {
        "type": "text",
        "value": "However, if we create a linkage matrix in a wrong way - or if we modify\na valid one in a way that any of the required expressions don't hold\nanymore, then the check will fail:"
      },
      {
        "type": "code",
        "value": "Z[3][1] = 20    # the cluster number 20 is not defined at this point\nis_valid_linkage(Z)"
      }
    ],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/scipy/cluster/hierarchy.py",
  "item_line": 2180,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns",
    "See Also",
    "Examples"
  ],
  "references": null,
  "see_also": [
    {
      "descriptions": [
        {
          "children": [
            {
              "type": "text",
              "value": "for a description of what a linkage matrix is."
            }
          ],
          "type": "paragraph"
        }
      ],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "to-resolve",
          "module": "current-module",
          "path": "linkage",
          "type": "RefInfo",
          "version": "current-version"
        },
        "type": "Link",
        "value": "linkage"
      },
      "type": null
    }
  ],
  "signature": {
    "type": "Signature",
    "value": "(Z, warning=False, throw=False, name=None)"
  },
  "type": "DocBlob"
}