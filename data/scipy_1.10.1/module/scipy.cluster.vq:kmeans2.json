{
  "aliases": [
    "scipy.cluster.vq.kmeans2"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "The algorithm attempts to minimize the Euclidean distance between observations and centroids. Several initialization methods are included."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "A 'M' by 'N' array of 'M' observations in 'N' dimensions or a length 'M' array of 'M' 1-D observations."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "data",
              "type": "Param",
              "type_": "ndarray"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The number of clusters to form as well as the number of centroids to generate. If "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "minit",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "minit"
                    },
                    {
                      "type": "text",
                      "value": " initialization string is 'matrix', or if a ndarray is given instead, it is interpreted as initial cluster to use instead."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "k",
              "type": "Param",
              "type_": "int or ndarray"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Number of iterations of the k-means algorithm to run. Note that this differs in meaning from the iters parameter to the kmeans function."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "iter",
              "type": "Param",
              "type_": "int, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "(not used yet)"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "thresh",
              "type": "Param",
              "type_": "float, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Method for initialization. Available methods are 'random', 'points', '++' and 'matrix':"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "'random': generate k centroids from a Gaussian with mean and variance estimated from the data."
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "'points': choose k observations (rows) at random from data for the initial centroids."
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "'++': choose k observations accordingly to the kmeans++ method (careful seeding)"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "'matrix': interpret the k parameter as a k by M (or length k array for 1-D data) array of initial centroids."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "minit",
              "type": "Param",
              "type_": "str, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Method to deal with empty clusters. Available methods are 'warn' and 'raise':"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "'warn': give a warning and continue."
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "'raise': raise an ClusterError and terminate the algorithm."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "missing",
              "type": "Param",
              "type_": "str, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Whether to check that the input matrices contain only finite numbers. Disabling may give a performance gain, but may result in problems (crashes, non-termination) if the inputs do contain infinities or NaNs. Default: True"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "check_finite",
              "type": "Param",
              "type_": "bool, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Seed for initializing the pseudo-random number generator. If "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "seed",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "seed"
                    },
                    {
                      "type": "text",
                      "value": " is None (or "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "module",
                      "reference": {
                        "kind": "api",
                        "module": "numpy.random",
                        "path": "numpy.random",
                        "type": "RefInfo",
                        "version": "*"
                      },
                      "type": "Link",
                      "value": "numpy.random"
                    },
                    {
                      "type": "text",
                      "value": "), the "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "module",
                      "reference": {
                        "kind": "api",
                        "module": "numpy.random.mtrand",
                        "path": "numpy.random.mtrand:RandomState",
                        "type": "RefInfo",
                        "version": "*"
                      },
                      "type": "Link",
                      "value": "numpy.random.RandomState"
                    },
                    {
                      "type": "text",
                      "value": " singleton is used. If "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "seed",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "seed"
                    },
                    {
                      "type": "text",
                      "value": " is an int, a new "
                    },
                    {
                      "type": "inlineCode",
                      "value": "RandomState"
                    },
                    {
                      "type": "text",
                      "value": " instance is used, seeded with "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "seed",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "seed"
                    },
                    {
                      "type": "text",
                      "value": ". If "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "seed",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "seed"
                    },
                    {
                      "type": "text",
                      "value": " is already a "
                    },
                    {
                      "type": "inlineCode",
                      "value": "Generator"
                    },
                    {
                      "type": "text",
                      "value": " or "
                    },
                    {
                      "type": "inlineCode",
                      "value": "RandomState"
                    },
                    {
                      "type": "text",
                      "value": " instance then that instance is used. The default is None."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "seed",
              "type": "Param",
              "type_": "{None, int, `numpy.random.Generator`, `numpy.random.RandomState`}, optional"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "A 'k' by 'N' array of centroids found at the last iteration of k-means."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "centroid",
              "type": "Param",
              "type_": "ndarray"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "label[i] is the code or index of the centroid the ith observation is closest to."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "label",
              "type": "Param",
              "type_": "ndarray"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Classify a set of observations into k clusters using the k-means algorithm."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [
      {
        "type": "code",
        "value": "from scipy.cluster.vq import kmeans2\nimport matplotlib.pyplot as plt\nimport numpy as np"
      },
      {
        "type": "text",
        "value": "Create z, an array with shape (100, 2) containing a mixture of samples\nfrom three multivariate normal distributions."
      },
      {
        "type": "code",
        "value": "rng = np.random.default_rng()\na = rng.multivariate_normal([0, 6], [[2, 1], [1, 1.5]], size=45)\nb = rng.multivariate_normal([2, 0], [[1, -1], [-1, 3]], size=30)\nc = rng.multivariate_normal([6, 4], [[5, 0], [0, 1.2]], size=25)\nz = np.concatenate((a, b, c))\nrng.shuffle(z)"
      },
      {
        "type": "text",
        "value": "Compute three clusters."
      },
      {
        "type": "code",
        "value": "centroid, label = kmeans2(z, 3, minit='points')\ncentroid"
      },
      {
        "type": "text",
        "value": "How many points are in each cluster?"
      },
      {
        "type": "code",
        "value": "counts = np.bincount(label)\ncounts"
      },
      {
        "type": "text",
        "value": "Plot the clusters."
      },
      {
        "type": "code",
        "value": "w0 = z[label == 0]\nw1 = z[label == 1]\nw2 = z[label == 2]\nplt.plot(w0[:, 0], w0[:, 1], 'o', alpha=0.5, label='cluster 0')\nplt.plot(w1[:, 0], w1[:, 1], 'd', alpha=0.5, label='cluster 1')\nplt.plot(w2[:, 0], w2[:, 1], 's', alpha=0.5, label='cluster 2')\nplt.plot(centroid[:, 0], centroid[:, 1], 'k*', label='centroids')\nplt.axis('equal')\nplt.legend(shadow=True)\nplt.show()"
      },
      {
        "type": "Fig",
        "value": {
          "kind": "assets",
          "module": "scipy",
          "path": "fig-scipy.cluster.vq:kmeans2-0-09fdf68a.png",
          "type": "RefInfo",
          "version": "1.10.1"
        }
      }
    ],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/scipy/cluster/vq.py",
  "item_line": 615,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns",
    "See Also",
    "References",
    "Examples"
  ],
  "references": null,
  "see_also": [
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "to-resolve",
          "module": "current-module",
          "path": "kmeans",
          "type": "RefInfo",
          "version": "current-version"
        },
        "type": "Link",
        "value": "kmeans"
      },
      "type": null
    }
  ],
  "signature": {
    "type": "Signature",
    "value": "(data, k, iter=10, thresh=1e-05, minit='random', missing='warn', check_finite=True, *, seed=None)"
  },
  "type": "DocBlob"
}