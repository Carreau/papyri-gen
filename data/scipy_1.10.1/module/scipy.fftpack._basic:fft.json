{
  "aliases": [
    "scipy.fftpack.fft"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "The returned complex array contains "
            },
            {
              "type": "inlineCode",
              "value": "y(0), y(1),..., y(n-1)"
            },
            {
              "type": "text",
              "value": ", where"
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "inlineCode",
              "value": "y(j) = (x * exp(-2*pi*sqrt(-1)*j*np.arange(n)/n)).sum()"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "The packing of the result is \"standard\": If "
            },
            {
              "type": "inlineCode",
              "value": "A = fft(a, n)"
            },
            {
              "type": "text",
              "value": ", then "
            },
            {
              "type": "inlineCode",
              "value": "A[0]"
            },
            {
              "type": "text",
              "value": " contains the zero-frequency term, "
            },
            {
              "type": "inlineCode",
              "value": "A[1:n/2]"
            },
            {
              "type": "text",
              "value": " contains the positive-frequency terms, and "
            },
            {
              "type": "inlineCode",
              "value": "A[n/2:]"
            },
            {
              "type": "text",
              "value": " contains the negative-frequency terms, in order of decreasingly negative frequency. So ,for an 8-point transform, the frequencies of the result are [0, 1, 2, 3, -4, -3, -2, -1]. To rearrange the fft output so that the zero-frequency component is centered, like [-4, -3, -2, -1,  0,  1,  2,  3], use "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "fftshift"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Both single and double precision routines are implemented. Half precision inputs will be converted to single precision. Non-floating-point inputs will be converted to double precision. Long-double precision inputs are not supported."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "This function is most efficient when "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "n",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "n"
            },
            {
              "type": "text",
              "value": " is a power of two, and least efficient when "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "n",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "n"
            },
            {
              "type": "text",
              "value": " is prime."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Note that if "
            },
            {
              "type": "inlineCode",
              "value": "x"
            },
            {
              "type": "text",
              "value": " is real-valued, then "
            },
            {
              "type": "inlineCode",
              "value": "A[j] == A[n-j].conjugate()"
            },
            {
              "type": "text",
              "value": ". If "
            },
            {
              "type": "inlineCode",
              "value": "x"
            },
            {
              "type": "text",
              "value": " is real-valued and "
            },
            {
              "type": "inlineCode",
              "value": "n"
            },
            {
              "type": "text",
              "value": " is even, then "
            },
            {
              "type": "inlineCode",
              "value": "A[n/2]"
            },
            {
              "type": "text",
              "value": " is real."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "If the data type of "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "x",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "x"
            },
            {
              "type": "text",
              "value": " is real, a \"real FFT\" algorithm is automatically used, which roughly halves the computation time. To increase efficiency a little further, use "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "rfft"
            },
            {
              "type": "text",
              "value": ", which does the same calculation, but only outputs half of the symmetrical spectrum. If the data is both real and symmetrical, the "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "module",
              "reference": {
                "kind": "module",
                "module": "scipy",
                "path": "scipy.fft._pocketfft.pypocketfft:PyCapsule.dct",
                "type": "RefInfo",
                "version": "1.10.1"
              },
              "type": "Link",
              "value": "dct"
            },
            {
              "type": "text",
              "value": " can again double the efficiency by generating half of the spectrum from half of the signal."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Array to Fourier transform."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "x",
              "type": "Param",
              "type_": "array_like"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Length of the Fourier transform. If "
                    },
                    {
                      "type": "inlineCode",
                      "value": "n < x.shape[axis]"
                    },
                    {
                      "type": "text",
                      "value": ", "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "x",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "x"
                    },
                    {
                      "type": "text",
                      "value": " is truncated. If "
                    },
                    {
                      "type": "inlineCode",
                      "value": "n > x.shape[axis]"
                    },
                    {
                      "type": "text",
                      "value": ", "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "x",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "x"
                    },
                    {
                      "type": "text",
                      "value": " is zero-padded. The default results in "
                    },
                    {
                      "type": "inlineCode",
                      "value": "n = x.shape[axis]"
                    },
                    {
                      "type": "text",
                      "value": "."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "n",
              "type": "Param",
              "type_": "int, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Axis along which the fft's are computed; the default is over the last axis (i.e., "
                    },
                    {
                      "type": "inlineCode",
                      "value": "axis=-1"
                    },
                    {
                      "type": "text",
                      "value": ")."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "axis",
              "type": "Param",
              "type_": "int, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "If True, the contents of "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "x",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "x"
                    },
                    {
                      "type": "text",
                      "value": " can be destroyed; the default is False."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "overwrite_x",
              "type": "Param",
              "type_": "bool, optional"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "with the elements      "
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "type": "code",
                  "value": "[y(0),y(1),..,y(n/2),y(1-n/2),...,y(-1)]        if n is even\n[y(0),y(1),..,y((n-1)/2),y(-(n-1)/2),...,y(-1)]  if n is odd"
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "where      "
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "type": "code",
                  "value": "y(j) = sum[k=0..n-1] x[k] * exp(-sqrt(-1)*j*k* 2*pi/n), j = 0..n-1"
                }
              ],
              "param": "z",
              "type": "Param",
              "type_": "complex ndarray"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Return discrete Fourier transform of real or complex sequence."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [
      {
        "type": "code",
        "value": "import numpy as np\nfrom scipy.fftpack import fft, ifft\nx = np.arange(5)\nnp.allclose(fft(ifft(x)), x, atol=1e-15)  # within numerical accuracy."
      }
    ],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/scipy/fftpack/_basic.py",
  "item_line": 12,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns",
    "See Also",
    "Notes",
    "Examples"
  ],
  "references": null,
  "see_also": [
    {
      "descriptions": [
        {
          "children": [
            {
              "type": "text",
              "value": "Inverse FFT"
            }
          ],
          "type": "paragraph"
        }
      ],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "to-resolve",
          "module": "current-module",
          "path": "ifft",
          "type": "RefInfo",
          "version": "current-version"
        },
        "type": "Link",
        "value": "ifft"
      },
      "type": null
    },
    {
      "descriptions": [
        {
          "children": [
            {
              "type": "text",
              "value": "FFT of a real sequence"
            }
          ],
          "type": "paragraph"
        }
      ],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "to-resolve",
          "module": "current-module",
          "path": "rfft",
          "type": "RefInfo",
          "version": "current-version"
        },
        "type": "Link",
        "value": "rfft"
      },
      "type": null
    }
  ],
  "signature": {
    "type": "Signature",
    "value": "(x, n=None, axis=-1, overwrite_x=False)"
  },
  "type": "DocBlob"
}