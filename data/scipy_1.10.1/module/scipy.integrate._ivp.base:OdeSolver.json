{
  "aliases": [
    "scipy.integrate.OdeSolver"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Number of equations."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "n",
              "type": "Param",
              "type_": "int"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Current status of the solver: 'running', 'finished' or 'failed'."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "status",
              "type": "Param",
              "type_": "string"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Boundary time."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "t_bound",
              "type": "Param",
              "type_": "float"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Integration direction: +1 or -1."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "direction",
              "type": "Param",
              "type_": "float"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Current time."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "t",
              "type": "Param",
              "type_": "float"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Current state."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "y",
              "type": "Param",
              "type_": "ndarray"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Previous time. None if no steps were made yet."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "t_old",
              "type": "Param",
              "type_": "float"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Size of the last successful step. None if no steps were made yet."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "step_size",
              "type": "Param",
              "type_": "float"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Number of the system's rhs evaluations."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "nfev",
              "type": "Param",
              "type_": "int"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Number of the Jacobian evaluations."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "njev",
              "type": "Param",
              "type_": "int"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Number of LU decompositions."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "nlu",
              "type": "Param",
              "type_": "int"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "In order to implement a new solver you need to follow the guidelines:"
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "children": [
                {
                  "children": [
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "A constructor must accept parameters presented in the base class        (listed below) along with any other parameters specific to a solver."
                        }
                      ],
                      "type": "paragraph"
                    }
                  ],
                  "spread": false,
                  "type": "listItem"
                },
                {
                  "children": [
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "A constructor must accept arbitrary extraneous arguments        "
                        },
                        {
                          "type": "inlineCode",
                          "value": "**extraneous"
                        },
                        {
                          "type": "text",
                          "value": ", but warn that these arguments are irrelevant        using "
                        },
                        {
                          "domain": null,
                          "role": null,
                          "type": "Directive",
                          "value": "common.warn_extraneous"
                        },
                        {
                          "type": "text",
                          "value": " function. Do not pass these        arguments to the base class."
                        }
                      ],
                      "type": "paragraph"
                    }
                  ],
                  "spread": false,
                  "type": "listItem"
                },
                {
                  "children": [
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "A solver must implement a private method "
                        },
                        {
                          "domain": null,
                          "role": null,
                          "type": "Directive",
                          "value": "_step_impl(self)"
                        },
                        {
                          "type": "text",
                          "value": " which        propagates a solver one step further. It must return tuple        "
                        },
                        {
                          "type": "inlineCode",
                          "value": "(success, message)"
                        },
                        {
                          "type": "text",
                          "value": ", where "
                        },
                        {
                          "type": "inlineCode",
                          "value": "success"
                        },
                        {
                          "type": "text",
                          "value": " is a boolean indicating        whether a step was successful, and "
                        },
                        {
                          "type": "inlineCode",
                          "value": "message"
                        },
                        {
                          "type": "text",
                          "value": " is a string        containing description of a failure if a step failed or None        otherwise."
                        }
                      ],
                      "type": "paragraph"
                    }
                  ],
                  "spread": false,
                  "type": "listItem"
                },
                {
                  "children": [
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "A solver must implement a private method "
                        },
                        {
                          "domain": null,
                          "role": null,
                          "type": "Directive",
                          "value": "_dense_output_impl(self)"
                        },
                        {
                          "type": "text",
                          "value": ",        which returns a "
                        },
                        {
                          "domain": null,
                          "role": null,
                          "type": "Directive",
                          "value": "DenseOutput"
                        },
                        {
                          "type": "text",
                          "value": " object covering the last successful        step."
                        }
                      ],
                      "type": "paragraph"
                    }
                  ],
                  "spread": false,
                  "type": "listItem"
                },
                {
                  "children": [
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "A solver must have attributes listed below in Attributes section.        Note that "
                        },
                        {
                          "type": "inlineCode",
                          "value": "t_old"
                        },
                        {
                          "type": "text",
                          "value": " and "
                        },
                        {
                          "type": "inlineCode",
                          "value": "step_size"
                        },
                        {
                          "type": "text",
                          "value": " are updated automatically."
                        }
                      ],
                      "type": "paragraph"
                    }
                  ],
                  "spread": false,
                  "type": "listItem"
                },
                {
                  "children": [
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "Use "
                        },
                        {
                          "domain": null,
                          "role": null,
                          "type": "Directive",
                          "value": "fun(self, t, y)"
                        },
                        {
                          "type": "text",
                          "value": " method for the system rhs evaluation, this        way the number of function evaluations ("
                        },
                        {
                          "anchor": null,
                          "exists": true,
                          "kind": "local",
                          "reference": {
                            "kind": "local",
                            "module": null,
                            "path": "nfev",
                            "type": "RefInfo",
                            "version": null
                          },
                          "type": "Link",
                          "value": "nfev"
                        },
                        {
                          "type": "text",
                          "value": ") will be tracked        automatically."
                        }
                      ],
                      "type": "paragraph"
                    }
                  ],
                  "spread": false,
                  "type": "listItem"
                },
                {
                  "children": [
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "For convenience, a base class provides "
                        },
                        {
                          "domain": null,
                          "role": null,
                          "type": "Directive",
                          "value": "fun_single(self, t, y)"
                        },
                        {
                          "type": "text",
                          "value": " and        "
                        },
                        {
                          "domain": null,
                          "role": null,
                          "type": "Directive",
                          "value": "fun_vectorized(self, t, y)"
                        },
                        {
                          "type": "text",
                          "value": " for evaluating the rhs in        non-vectorized and vectorized fashions respectively (regardless of        how "
                        },
                        {
                          "anchor": null,
                          "exists": true,
                          "kind": "local",
                          "reference": {
                            "kind": "local",
                            "module": null,
                            "path": "fun",
                            "type": "RefInfo",
                            "version": null
                          },
                          "type": "Link",
                          "value": "fun"
                        },
                        {
                          "type": "text",
                          "value": " from the constructor is implemented). These calls don't        increment "
                        },
                        {
                          "anchor": null,
                          "exists": true,
                          "kind": "local",
                          "reference": {
                            "kind": "local",
                            "module": null,
                            "path": "nfev",
                            "type": "RefInfo",
                            "version": null
                          },
                          "type": "Link",
                          "value": "nfev"
                        },
                        {
                          "type": "text",
                          "value": "."
                        }
                      ],
                      "type": "paragraph"
                    }
                  ],
                  "spread": false,
                  "type": "listItem"
                },
                {
                  "children": [
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "If a solver uses a Jacobian matrix and LU decompositions, it should        track the number of Jacobian evaluations ("
                        },
                        {
                          "anchor": null,
                          "exists": true,
                          "kind": "local",
                          "reference": {
                            "kind": "local",
                            "module": null,
                            "path": "njev",
                            "type": "RefInfo",
                            "version": null
                          },
                          "type": "Link",
                          "value": "njev"
                        },
                        {
                          "type": "text",
                          "value": ") and the number of        LU decompositions ("
                        },
                        {
                          "anchor": null,
                          "exists": true,
                          "kind": "local",
                          "reference": {
                            "kind": "local",
                            "module": null,
                            "path": "nlu",
                            "type": "RefInfo",
                            "version": null
                          },
                          "type": "Link",
                          "value": "nlu"
                        },
                        {
                          "type": "text",
                          "value": ")."
                        }
                      ],
                      "type": "paragraph"
                    }
                  ],
                  "spread": false,
                  "type": "listItem"
                },
                {
                  "children": [
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "By convention, the function evaluations used to compute a finite        difference approximation of the Jacobian should not be counted in        "
                        },
                        {
                          "anchor": null,
                          "exists": true,
                          "kind": "local",
                          "reference": {
                            "kind": "local",
                            "module": null,
                            "path": "nfev",
                            "type": "RefInfo",
                            "version": null
                          },
                          "type": "Link",
                          "value": "nfev"
                        },
                        {
                          "type": "text",
                          "value": ", thus use "
                        },
                        {
                          "domain": null,
                          "role": null,
                          "type": "Directive",
                          "value": "fun_single(self, t, y)"
                        },
                        {
                          "type": "text",
                          "value": " or        "
                        },
                        {
                          "domain": null,
                          "role": null,
                          "type": "Directive",
                          "value": "fun_vectorized(self, t, y)"
                        },
                        {
                          "type": "text",
                          "value": " when computing a finite difference        approximation of the Jacobian."
                        }
                      ],
                      "type": "paragraph"
                    }
                  ],
                  "spread": false,
                  "type": "listItem"
                }
              ],
              "ordered": true,
              "spread": false,
              "start": 1,
              "type": "list"
            }
          ],
          "type": "blockquote"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Right-hand side of the system. The calling signature is "
                    },
                    {
                      "type": "inlineCode",
                      "value": "fun(t, y)"
                    },
                    {
                      "type": "text",
                      "value": ". Here "
                    },
                    {
                      "type": "inlineCode",
                      "value": "t"
                    },
                    {
                      "type": "text",
                      "value": " is a scalar and there are two options for ndarray "
                    },
                    {
                      "type": "inlineCode",
                      "value": "y"
                    },
                    {
                      "type": "text",
                      "value": ". It can either have shape (n,), then "
                    },
                    {
                      "type": "inlineCode",
                      "value": "fun"
                    },
                    {
                      "type": "text",
                      "value": " must return array_like with shape (n,). Or, alternatively, it can have shape (n, n_points), then "
                    },
                    {
                      "type": "inlineCode",
                      "value": "fun"
                    },
                    {
                      "type": "text",
                      "value": " must return array_like with shape (n, n_points) (each column corresponds to a single column in "
                    },
                    {
                      "type": "inlineCode",
                      "value": "y"
                    },
                    {
                      "type": "text",
                      "value": "). The choice between the two options is determined by "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "vectorized",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "vectorized"
                    },
                    {
                      "type": "text",
                      "value": " argument (see below)."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "fun",
              "type": "Param",
              "type_": "callable"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Initial time."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "t0",
              "type": "Param",
              "type_": "float"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Initial state."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "y0",
              "type": "Param",
              "type_": "array_like, shape (n,)"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Boundary time --- the integration won't continue beyond it. It also determines the direction of the integration."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "t_bound",
              "type": "Param",
              "type_": "float"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Whether "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "fun",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "fun"
                    },
                    {
                      "type": "text",
                      "value": " is implemented in a vectorized fashion."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "vectorized",
              "type": "Param",
              "type_": "bool"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Whether integration in a complex domain should be supported. Generally determined by a derived solver class capabilities. Default is False."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "support_complex",
              "type": "Param",
              "type_": "bool, optional"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Base class for ODE solvers."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/scipy/integrate/_ivp/base.py",
  "item_line": 25,
  "item_type": "<class 'type'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Attributes"
  ],
  "references": null,
  "see_also": [],
  "signature": {
    "type": "Signature",
    "value": null
  },
  "type": "DocBlob"
}