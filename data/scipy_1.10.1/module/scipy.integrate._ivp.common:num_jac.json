{
  "aliases": [
    "scipy.integrate._ivp.bdf.num_jac"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "This function computes finite difference approximation to the Jacobian matrix of "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "fun",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "fun"
            },
            {
              "type": "text",
              "value": " with respect to "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "y",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "y"
            },
            {
              "type": "text",
              "value": " using forward differences. The Jacobian matrix has shape (n, n) and its element (i, j) is equal to "
            },
            {
              "type": "inlineCode",
              "value": "d f_i / d y_j"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "A special feature of this function is the ability to correct the step size from iteration to iteration. The main idea is to keep the finite difference significantly separated from its round-off error which approximately equals "
            },
            {
              "type": "inlineCode",
              "value": "EPS * np.abs(f)"
            },
            {
              "type": "text",
              "value": ". It reduces a possibility of a huge error and assures that the estimated derivative are reasonably close to the true values (i.e., the finite difference approximation is at least qualitatively reflects the structure of the true Jacobian)."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Right-hand side of the system implemented in a vectorized fashion."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "fun",
              "type": "Param",
              "type_": "callable"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Current time."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "t",
              "type": "Param",
              "type_": "float"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Current state."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "y",
              "type": "Param",
              "type_": "ndarray, shape (n,)"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Value of the right hand side at (t, y)."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "f",
              "type": "Param",
              "type_": "ndarray, shape (n,)"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Threshold for "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "y",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "y"
                    },
                    {
                      "type": "text",
                      "value": " value used for computing the step size as "
                    },
                    {
                      "type": "inlineCode",
                      "value": "factor * np.maximum(np.abs(y), threshold)"
                    },
                    {
                      "type": "text",
                      "value": ". Typically, the value of absolute tolerance (atol) for a solver should be passed as "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "threshold",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "threshold"
                    },
                    {
                      "type": "text",
                      "value": "."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "threshold",
              "type": "Param",
              "type_": "float"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Factor to use for computing the step size. Pass None for the very evaluation, then use the value returned from this function."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "factor",
              "type": "Param",
              "type_": "ndarray with shape (n,) or None"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Sparsity structure of the Jacobian, "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "structure"
                    },
                    {
                      "type": "text",
                      "value": " must be csc_matrix."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "sparsity",
              "type": "Param",
              "type_": "tuple (structure, groups) or None"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Jacobian matrix."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "J",
              "type": "Param",
              "type_": "ndarray or csc_matrix, shape (n, n)"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Suggested "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "factor",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "factor"
                    },
                    {
                      "type": "text",
                      "value": " for the next evaluation."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "factor",
              "type": "Param",
              "type_": "ndarray, shape (n,)"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Finite differences Jacobian approximation tailored for ODE solvers."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/scipy/integrate/_ivp/common.py",
  "item_line": 250,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns"
  ],
  "references": null,
  "see_also": [],
  "signature": {
    "type": "Signature",
    "value": "(fun, t, y, f, threshold, factor, sparsity=None)"
  },
  "type": "DocBlob"
}