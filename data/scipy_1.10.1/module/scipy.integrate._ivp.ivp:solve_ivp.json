{
  "aliases": [
    "scipy.integrate.solve_ivp"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "This function numerically integrates a system of ordinary differential equations given an initial value      "
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": "dy / dt = f(t, y)\ny(t0) = y0"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Here t is a 1-D independent variable (time), y(t) is an N-D vector-valued function (state), and an N-D vector-valued function f(t, y) determines the differential equations. The goal is to find y(t) approximately satisfying the differential equations, given an initial value y(t0)=y0."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Some of the solvers support integration in the complex domain, but note that for stiff ODE solvers, the right-hand side must be complex-differentiable (satisfy Cauchy-Riemann equations ). To solve a problem in the complex domain, pass y0 with a complex data type. Another option always available is to rewrite your problem for real and imaginary parts separately."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Right-hand side of the system. The calling signature is "
                    },
                    {
                      "type": "inlineCode",
                      "value": "fun(t, y)"
                    },
                    {
                      "type": "text",
                      "value": ". Here "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "t",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "t"
                    },
                    {
                      "type": "text",
                      "value": " is a scalar, and there are two options for the ndarray "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "y",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "y"
                    },
                    {
                      "type": "text",
                      "value": ": It can either have shape (n,); then "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "fun",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "fun"
                    },
                    {
                      "type": "text",
                      "value": " must return array_like with shape (n,). Alternatively, it can have shape (n, k); then "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "fun",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "fun"
                    },
                    {
                      "type": "text",
                      "value": " must return an array_like with shape (n, k), i.e., each column corresponds to a single column in "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "y",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "y"
                    },
                    {
                      "type": "text",
                      "value": ". The choice between the two options is determined by "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "vectorized",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "vectorized"
                    },
                    {
                      "type": "text",
                      "value": " argument (see below). The vectorized implementation allows a faster approximation of the Jacobian by finite differences (required for stiff solvers)."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "fun",
              "type": "Param",
              "type_": "callable"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Interval of integration (t0, tf). The solver starts with t=t0 and integrates until it reaches t=tf. Both t0 and tf must be floats or values interpretable by the float conversion function."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "t_span",
              "type": "Param",
              "type_": "2-member sequence"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Initial state. For problems in the complex domain, pass "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "y0",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "y0"
                    },
                    {
                      "type": "text",
                      "value": " with a complex data type (even if the initial value is purely real)."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "y0",
              "type": "Param",
              "type_": "array_like, shape (n,)"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Integration method to use:"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "children": [
                        {
                          "children": [
                            {
                              "children": [
                                {
                                  "type": "text",
                                  "value": "'RK45' (default): Explicit Runge-Kutta method of order 5(4) .       The error is controlled assuming accuracy of the fourth-order       method, but steps are taken using the fifth-order accurate       formula (local extrapolation is done). A quartic interpolation       polynomial is used for the dense output . Can be applied in       the complex domain."
                                }
                              ],
                              "type": "paragraph"
                            }
                          ],
                          "spread": false,
                          "type": "listItem"
                        },
                        {
                          "children": [
                            {
                              "children": [
                                {
                                  "type": "text",
                                  "value": "'RK23': Explicit Runge-Kutta method of order 3(2) . The error       is controlled assuming accuracy of the second-order method, but       steps are taken using the third-order accurate formula (local       extrapolation is done). A cubic Hermite polynomial is used for the       dense output. Can be applied in the complex domain."
                                }
                              ],
                              "type": "paragraph"
                            }
                          ],
                          "spread": false,
                          "type": "listItem"
                        },
                        {
                          "children": [
                            {
                              "children": [
                                {
                                  "type": "text",
                                  "value": "'DOP853': Explicit Runge-Kutta method of order 8 .       Python implementation of the \"DOP853\" algorithm originally       written in Fortran . A 7-th order interpolation polynomial       accurate to 7-th order is used for the dense output.       Can be applied in the complex domain."
                                }
                              ],
                              "type": "paragraph"
                            }
                          ],
                          "spread": false,
                          "type": "listItem"
                        },
                        {
                          "children": [
                            {
                              "children": [
                                {
                                  "type": "text",
                                  "value": "'Radau': Implicit Runge-Kutta method of the Radau IIA family of       order 5 . The error is controlled with a third-order accurate       embedded formula. A cubic polynomial which satisfies the       collocation conditions is used for the dense output."
                                }
                              ],
                              "type": "paragraph"
                            }
                          ],
                          "spread": false,
                          "type": "listItem"
                        },
                        {
                          "children": [
                            {
                              "children": [
                                {
                                  "type": "text",
                                  "value": "'BDF': Implicit multi-step variable-order (1 to 5) method based       on a backward differentiation formula for the derivative       approximation . The implementation follows the one described       in . A quasi-constant step scheme is used and accuracy is       enhanced using the NDF modification. Can be applied in the       complex domain."
                                }
                              ],
                              "type": "paragraph"
                            }
                          ],
                          "spread": false,
                          "type": "listItem"
                        },
                        {
                          "children": [
                            {
                              "children": [
                                {
                                  "type": "text",
                                  "value": "'LSODA': Adams/BDF method with automatic stiffness detection and       switching , . This is a wrapper of the Fortran solver       from ODEPACK."
                                }
                              ],
                              "type": "paragraph"
                            }
                          ],
                          "spread": false,
                          "type": "listItem"
                        }
                      ],
                      "ordered": false,
                      "spread": false,
                      "start": 1,
                      "type": "list"
                    }
                  ],
                  "type": "blockquote"
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Explicit Runge-Kutta methods ('RK23', 'RK45', 'DOP853') should be used for non-stiff problems and implicit methods ('Radau', 'BDF') for stiff problems . Among Runge-Kutta methods, 'DOP853' is recommended for solving with high precision (low values of "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "rtol",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "rtol"
                    },
                    {
                      "type": "text",
                      "value": " and "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "atol",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "atol"
                    },
                    {
                      "type": "text",
                      "value": ")."
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "If not sure, first try to run 'RK45'. If it makes unusually many iterations, diverges, or fails, your problem is likely to be stiff and you should use 'Radau' or 'BDF'. 'LSODA' can also be a good universal choice, but it might be somewhat less convenient to work with as it wraps old Fortran code."
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "You can also pass an arbitrary class derived from "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "OdeSolver"
                    },
                    {
                      "type": "text",
                      "value": " which implements the solver."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "method",
              "type": "Param",
              "type_": "string or `OdeSolver`, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Times at which to store the computed solution, must be sorted and lie within "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "t_span",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "t_span"
                    },
                    {
                      "type": "text",
                      "value": ". If None (default), use points selected by the solver."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "t_eval",
              "type": "Param",
              "type_": "array_like or None, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Whether to compute a continuous solution. Default is False."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "dense_output",
              "type": "Param",
              "type_": "bool, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Events to track. If None (default), no events will be tracked. Each event occurs at the zeros of a continuous function of time and state. Each function must have the signature "
                    },
                    {
                      "type": "inlineCode",
                      "value": "event(t, y)"
                    },
                    {
                      "type": "text",
                      "value": " and return a float. The solver will find an accurate value of "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "t",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "t"
                    },
                    {
                      "type": "text",
                      "value": " at which "
                    },
                    {
                      "type": "inlineCode",
                      "value": "event(t, y(t)) = 0"
                    },
                    {
                      "type": "text",
                      "value": " using a root-finding algorithm. By default, all zeros will be found. The solver looks for a sign change over each step, so if multiple zero crossings occur within one step, events may be missed. Additionally each "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "event"
                    },
                    {
                      "type": "text",
                      "value": " function might have the following attributes:"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "children": [
                        {
                          "dd": [
                            {
                              "children": [
                                {
                                  "type": "text",
                                  "value": "Whether to terminate integration if this event occurs.         Implicitly False if not assigned."
                                }
                              ],
                              "type": "paragraph"
                            }
                          ],
                          "dt": {
                            "children": [
                              {
                                "type": "text",
                                "value": "terminal: bool, optional"
                              }
                            ],
                            "type": "paragraph"
                          },
                          "type": "DefListItem"
                        },
                        {
                          "dd": [
                            {
                              "children": [
                                {
                                  "type": "text",
                                  "value": "Direction of a zero crossing. If "
                                },
                                {
                                  "domain": null,
                                  "role": null,
                                  "type": "Directive",
                                  "value": "direction"
                                },
                                {
                                  "type": "text",
                                  "value": " is positive,         "
                                },
                                {
                                  "domain": null,
                                  "role": null,
                                  "type": "Directive",
                                  "value": "event"
                                },
                                {
                                  "type": "text",
                                  "value": " will only trigger when going from negative to positive,         and vice versa if "
                                },
                                {
                                  "domain": null,
                                  "role": null,
                                  "type": "Directive",
                                  "value": "direction"
                                },
                                {
                                  "type": "text",
                                  "value": " is negative. If 0, then either         direction will trigger event. Implicitly 0 if not assigned."
                                }
                              ],
                              "type": "paragraph"
                            }
                          ],
                          "dt": {
                            "children": [
                              {
                                "type": "text",
                                "value": "direction: float, optional"
                              }
                            ],
                            "type": "paragraph"
                          },
                          "type": "DefListItem"
                        }
                      ],
                      "type": "DefList"
                    }
                  ],
                  "type": "blockquote"
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "You can assign attributes like "
                    },
                    {
                      "type": "inlineCode",
                      "value": "event.terminal = True"
                    },
                    {
                      "type": "text",
                      "value": " to any function in Python."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "events",
              "type": "Param",
              "type_": "callable, or list of callables, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Whether "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "fun",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "fun"
                    },
                    {
                      "type": "text",
                      "value": " is implemented in a vectorized fashion. Default is False."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "vectorized",
              "type": "Param",
              "type_": "bool, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Additional arguments to pass to the user-defined functions.  If given, the additional arguments are passed to all user-defined functions. So if, for example, "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "fun",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "fun"
                    },
                    {
                      "type": "text",
                      "value": " has the signature "
                    },
                    {
                      "type": "inlineCode",
                      "value": "fun(t, y, a, b, c)"
                    },
                    {
                      "type": "text",
                      "value": ", then "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "jac",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "jac"
                    },
                    {
                      "type": "text",
                      "value": " (if given) and any event functions must have the same signature, and "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "args",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "args"
                    },
                    {
                      "type": "text",
                      "value": " must be a tuple of length 3."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "args",
              "type": "Param",
              "type_": "tuple, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Options passed to a chosen solver. All options available for already implemented solvers are listed below."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "**options",
              "type": "Param",
              "type_": ""
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Initial step size. Default is "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "None"
                    },
                    {
                      "type": "text",
                      "value": " which means that the algorithm should choose."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "first_step",
              "type": "Param",
              "type_": "float or None, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Maximum allowed step size. Default is np.inf, i.e., the step size is not bounded and determined solely by the solver."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "max_step",
              "type": "Param",
              "type_": "float, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Relative and absolute tolerances. The solver keeps the local error estimates less than "
                    },
                    {
                      "type": "inlineCode",
                      "value": "atol + rtol * abs(y)"
                    },
                    {
                      "type": "text",
                      "value": ". Here "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "rtol",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "rtol"
                    },
                    {
                      "type": "text",
                      "value": " controls a relative accuracy (number of correct digits), while "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "atol",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "atol"
                    },
                    {
                      "type": "text",
                      "value": " controls absolute accuracy (number of correct decimal places). To achieve the desired "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "rtol",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "rtol"
                    },
                    {
                      "type": "text",
                      "value": ", set "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "atol",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "atol"
                    },
                    {
                      "type": "text",
                      "value": " to be smaller than the smallest value that can be expected from "
                    },
                    {
                      "type": "inlineCode",
                      "value": "rtol * abs(y)"
                    },
                    {
                      "type": "text",
                      "value": " so that "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "rtol",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "rtol"
                    },
                    {
                      "type": "text",
                      "value": " dominates the allowable error. If "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "atol",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "atol"
                    },
                    {
                      "type": "text",
                      "value": " is larger than "
                    },
                    {
                      "type": "inlineCode",
                      "value": "rtol * abs(y)"
                    },
                    {
                      "type": "text",
                      "value": " the number of correct digits is not guaranteed. Conversely, to achieve the desired "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "atol",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "atol"
                    },
                    {
                      "type": "text",
                      "value": " set "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "rtol",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "rtol"
                    },
                    {
                      "type": "text",
                      "value": " such that "
                    },
                    {
                      "type": "inlineCode",
                      "value": "rtol * abs(y)"
                    },
                    {
                      "type": "text",
                      "value": " is always smaller than "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "atol",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "atol"
                    },
                    {
                      "type": "text",
                      "value": ". If components of y have different scales, it might be beneficial to set different "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "atol",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "atol"
                    },
                    {
                      "type": "text",
                      "value": " values for different components by passing array_like with shape (n,) for "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "atol",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "atol"
                    },
                    {
                      "type": "text",
                      "value": ". Default values are 1e-3 for "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "rtol",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "rtol"
                    },
                    {
                      "type": "text",
                      "value": " and 1e-6 for "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "atol",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "atol"
                    },
                    {
                      "type": "text",
                      "value": "."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "rtol, atol",
              "type": "Param",
              "type_": "float or array_like, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Jacobian matrix of the right-hand side of the system with respect to y, required by the 'Radau', 'BDF' and 'LSODA' method. The Jacobian matrix has shape (n, n) and its element (i, j) is equal to "
                    },
                    {
                      "type": "inlineCode",
                      "value": "d f_i / d y_j"
                    },
                    {
                      "type": "text",
                      "value": ".  There are three ways to define the Jacobian:"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "children": [
                        {
                          "children": [
                            {
                              "children": [
                                {
                                  "type": "text",
                                  "value": "If array_like or sparse_matrix, the Jacobian is assumed to       be constant. Not supported by 'LSODA'."
                                }
                              ],
                              "type": "paragraph"
                            }
                          ],
                          "spread": false,
                          "type": "listItem"
                        },
                        {
                          "children": [
                            {
                              "children": [
                                {
                                  "type": "text",
                                  "value": "If callable, the Jacobian is assumed to depend on both       t and y; it will be called as "
                                },
                                {
                                  "type": "inlineCode",
                                  "value": "jac(t, y)"
                                },
                                {
                                  "type": "text",
                                  "value": ", as necessary.       For 'Radau' and 'BDF' methods, the return value might be a       sparse matrix."
                                }
                              ],
                              "type": "paragraph"
                            }
                          ],
                          "spread": false,
                          "type": "listItem"
                        },
                        {
                          "children": [
                            {
                              "children": [
                                {
                                  "type": "text",
                                  "value": "If None (default), the Jacobian will be approximated by       finite differences."
                                }
                              ],
                              "type": "paragraph"
                            }
                          ],
                          "spread": false,
                          "type": "listItem"
                        }
                      ],
                      "ordered": false,
                      "spread": false,
                      "start": 1,
                      "type": "list"
                    }
                  ],
                  "type": "blockquote"
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "It is generally recommended to provide the Jacobian rather than relying on a finite-difference approximation."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "jac",
              "type": "Param",
              "type_": "array_like, sparse_matrix, callable or None, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Defines a sparsity structure of the Jacobian matrix for a finite- difference approximation. Its shape must be (n, n). This argument is ignored if "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "jac",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "jac"
                    },
                    {
                      "type": "text",
                      "value": " is not "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "None"
                    },
                    {
                      "type": "text",
                      "value": ". If the Jacobian has only few non-zero elements in "
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "each"
                        }
                      ],
                      "type": "emphasis"
                    },
                    {
                      "type": "text",
                      "value": " row, providing the sparsity structure will greatly speed up the computations . A zero entry means that a corresponding element in the Jacobian is always zero. If None (default), the Jacobian is assumed to be dense. Not supported by 'LSODA', see "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "lband",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "lband"
                    },
                    {
                      "type": "text",
                      "value": " and "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "uband",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "uband"
                    },
                    {
                      "type": "text",
                      "value": " instead."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "jac_sparsity",
              "type": "Param",
              "type_": "array_like, sparse matrix or None, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Parameters defining the bandwidth of the Jacobian for the 'LSODA' method, i.e., "
                    },
                    {
                      "type": "inlineCode",
                      "value": "jac[i, j] != 0 only for i - lband <= j <= i + uband"
                    },
                    {
                      "type": "text",
                      "value": ". Default is None. Setting these requires your jac routine to return the Jacobian in the packed format: the returned array must have "
                    },
                    {
                      "type": "inlineCode",
                      "value": "n"
                    },
                    {
                      "type": "text",
                      "value": " columns and "
                    },
                    {
                      "type": "inlineCode",
                      "value": "uband + lband + 1"
                    },
                    {
                      "type": "text",
                      "value": " rows in which Jacobian diagonals are written. Specifically "
                    },
                    {
                      "type": "inlineCode",
                      "value": "jac_packed[uband + i - j , j] = jac[i, j]"
                    },
                    {
                      "type": "text",
                      "value": ". The same format is used in "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "module",
                      "reference": {
                        "kind": "api",
                        "module": "scipy.linalg._basic",
                        "path": "scipy.linalg._basic:solve_banded",
                        "type": "RefInfo",
                        "version": "*"
                      },
                      "type": "Link",
                      "value": "scipy.linalg.solve_banded"
                    },
                    {
                      "type": "text",
                      "value": " (check for an illustration).  These parameters can be also used with "
                    },
                    {
                      "type": "inlineCode",
                      "value": "jac=None"
                    },
                    {
                      "type": "text",
                      "value": " to reduce the number of Jacobian elements estimated by finite differences."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "lband, uband",
              "type": "Param",
              "type_": "int or None, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The minimum allowed step size for 'LSODA' method. By default "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "min_step",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "min_step"
                    },
                    {
                      "type": "text",
                      "value": " is zero."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "min_step",
              "type": "Param",
              "type_": "float, optional"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [
        {
          "children": [
            {
              "desc": [],
              "param": "",
              "type": "Param",
              "type_": "Bunch object with the following fields defined:"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Time points."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "t",
              "type": "Param",
              "type_": "ndarray, shape (n_points,)"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Values of the solution at "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "t",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "t"
                    },
                    {
                      "type": "text",
                      "value": "."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "y",
              "type": "Param",
              "type_": "ndarray, shape (n, n_points)"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Found solution as "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "OdeSolution"
                    },
                    {
                      "type": "text",
                      "value": " instance; None if "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "dense_output",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "dense_output"
                    },
                    {
                      "type": "text",
                      "value": " was set to False."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "sol",
              "type": "Param",
              "type_": "`OdeSolution` or None"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Contains for each event type a list of arrays at which an event of that type event was detected. None if "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "events",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "events"
                    },
                    {
                      "type": "text",
                      "value": " was None."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "t_events",
              "type": "Param",
              "type_": "list of ndarray or None"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "For each value of "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "t_events",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "t_events"
                    },
                    {
                      "type": "text",
                      "value": ", the corresponding value of the solution. None if "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "events",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "events"
                    },
                    {
                      "type": "text",
                      "value": " was None."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "y_events",
              "type": "Param",
              "type_": "list of ndarray or None"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Number of evaluations of the right-hand side."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "nfev",
              "type": "Param",
              "type_": "int"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Number of evaluations of the Jacobian."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "njev",
              "type": "Param",
              "type_": "int"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Number of LU decompositions."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "nlu",
              "type": "Param",
              "type_": "int"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Reason for algorithm termination:"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "children": [
                        {
                          "children": [
                            {
                              "children": [
                                {
                                  "type": "text",
                                  "value": "-1: Integration step failed."
                                }
                              ],
                              "type": "paragraph"
                            }
                          ],
                          "spread": false,
                          "type": "listItem"
                        },
                        {
                          "children": [
                            {
                              "children": [
                                {
                                  "type": "text",
                                  "value": "0: The solver successfully reached the end of "
                                },
                                {
                                  "domain": null,
                                  "role": null,
                                  "type": "Directive",
                                  "value": "tspan"
                                },
                                {
                                  "type": "text",
                                  "value": "."
                                }
                              ],
                              "type": "paragraph"
                            }
                          ],
                          "spread": false,
                          "type": "listItem"
                        },
                        {
                          "children": [
                            {
                              "children": [
                                {
                                  "type": "text",
                                  "value": "1: A termination event occurred."
                                }
                              ],
                              "type": "paragraph"
                            }
                          ],
                          "spread": false,
                          "type": "listItem"
                        }
                      ],
                      "ordered": false,
                      "spread": false,
                      "start": 1,
                      "type": "list"
                    }
                  ],
                  "type": "blockquote"
                }
              ],
              "param": "status",
              "type": "Param",
              "type_": "int"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Human-readable description of the termination reason."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "message",
              "type": "Param",
              "type_": "string"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "True if the solver reached the interval end or a termination event occurred ("
                    },
                    {
                      "type": "inlineCode",
                      "value": "status >= 0"
                    },
                    {
                      "type": "text",
                      "value": ")."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "success",
              "type": "Param",
              "type_": "bool"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Solve an initial value problem for a system of ODEs."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [
      {
        "type": "text",
        "value": "Basic exponential decay showing automatically chosen time points."
      },
      {
        "type": "code",
        "value": "import numpy as np\nfrom scipy.integrate import solve_ivp\ndef exponential_decay(t, y): return -0.5 * y\nsol = solve_ivp(exponential_decay, [0, 10], [2, 4, 8])\nprint(sol.t)"
      },
      {
        "type": "code",
        "value": "print(sol.y)"
      },
      {
        "type": "text",
        "value": "Specifying points where the solution is desired."
      },
      {
        "type": "code",
        "value": "sol = solve_ivp(exponential_decay, [0, 10], [2, 4, 8],\n                t_eval=[0, 1, 2, 4, 10])\nprint(sol.t)"
      },
      {
        "type": "code",
        "value": "print(sol.y)"
      },
      {
        "type": "text",
        "value": "Cannon fired upward with terminal event upon impact. The ``terminal`` and\n``direction`` fields of an event are applied by monkey patching a function.\nHere ``y[0]`` is position and ``y[1]`` is velocity. The projectile starts\nat position 0 with velocity +10. Note that the integration never reaches\nt=100 because the event is terminal."
      },
      {
        "type": "code",
        "value": "def upward_cannon(t, y): return [y[1], -0.5]\ndef hit_ground(t, y): return y[0]\nhit_ground.terminal = True\nhit_ground.direction = -1\nsol = solve_ivp(upward_cannon, [0, 100], [0, 10], events=hit_ground)\nprint(sol.t_events)"
      },
      {
        "type": "code",
        "value": "print(sol.t)"
      },
      {
        "type": "text",
        "value": "Use `dense_output` and `events` to find position, which is 100, at the apex\nof the cannonball's trajectory. Apex is not defined as terminal, so both\napex and hit_ground are found. There is no information at t=20, so the sol\nattribute is used to evaluate the solution. The sol attribute is returned\nby setting ``dense_output=True``. Alternatively, the `y_events` attribute\ncan be used to access the solution at the time of the event."
      },
      {
        "type": "code",
        "value": "def apex(t, y): return y[1]\nsol = solve_ivp(upward_cannon, [0, 100], [0, 10],\n                events=(hit_ground, apex), dense_output=True)\nprint(sol.t_events)"
      },
      {
        "type": "code",
        "value": "print(sol.t)"
      },
      {
        "type": "code",
        "value": "print(sol.sol(sol.t_events[1][0]))"
      },
      {
        "type": "code",
        "value": "print(sol.y_events)"
      },
      {
        "type": "text",
        "value": "As an example of a system with additional parameters, we'll implement\nthe Lotka-Volterra equations [12]_."
      },
      {
        "type": "code",
        "value": "def lotkavolterra(t, z, a, b, c, d):\n    x, y = z\n    return [a*x - b*x*y, -c*y + d*x*y]"
      },
      {
        "type": "text",
        "value": "We pass in the parameter values a=1.5, b=1, c=3 and d=1 with the `args`\nargument."
      },
      {
        "type": "code",
        "value": "sol = solve_ivp(lotkavolterra, [0, 15], [10, 5], args=(1.5, 1, 3, 1),\n                dense_output=True)"
      },
      {
        "type": "text",
        "value": "Compute a dense solution and plot it."
      },
      {
        "type": "code",
        "value": "t = np.linspace(0, 15, 300)\nz = sol.sol(t)\nimport matplotlib.pyplot as plt\nplt.plot(t, z.T)\nplt.xlabel('t')\nplt.legend(['x', 'y'], shadow=True)\nplt.title('Lotka-Volterra System')\nplt.show()"
      },
      {
        "type": "Fig",
        "value": {
          "kind": "assets",
          "module": "scipy",
          "path": "fig-scipy.integrate._ivp.ivp:solve_ivp-0-8a6790cc.png",
          "type": "RefInfo",
          "version": "1.10.1"
        }
      }
    ],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/scipy/integrate/_ivp/ivp.py",
  "item_line": 156,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns",
    "References",
    "Examples"
  ],
  "references": null,
  "see_also": [],
  "signature": {
    "type": "Signature",
    "value": "(fun, t_span, y0, method='RK45', t_eval=None, dense_output=False, events=None, vectorized=False, args=None, **options)"
  },
  "type": "DocBlob"
}