{
  "aliases": [
    "scipy.interpolate.make_interp_spline"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Abscissas."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "x",
              "type": "Param",
              "type_": "array_like, shape (n,)"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Ordinates."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "y",
              "type": "Param",
              "type_": "array_like, shape (n, ...)"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "B-spline degree. Default is cubic, "
                    },
                    {
                      "type": "inlineCode",
                      "value": "k = 3"
                    },
                    {
                      "type": "text",
                      "value": "."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "k",
              "type": "Param",
              "type_": "int, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Knots. The number of knots needs to agree with the number of data points and the number of derivatives at the edges. Specifically, "
                    },
                    {
                      "type": "inlineCode",
                      "value": "nt - n"
                    },
                    {
                      "type": "text",
                      "value": " must equal "
                    },
                    {
                      "type": "inlineCode",
                      "value": "len(deriv_l) + len(deriv_r)"
                    },
                    {
                      "type": "text",
                      "value": "."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "t",
              "type": "Param",
              "type_": "array_like, shape (nt + k + 1,), optional."
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Boundary conditions. Default is None, which means choosing the boundary conditions automatically. Otherwise, it must be a length-two tuple where the first element ("
                    },
                    {
                      "type": "inlineCode",
                      "value": "deriv_l"
                    },
                    {
                      "type": "text",
                      "value": ") sets the boundary conditions at "
                    },
                    {
                      "type": "inlineCode",
                      "value": "x[0]"
                    },
                    {
                      "type": "text",
                      "value": " and the second element ("
                    },
                    {
                      "type": "inlineCode",
                      "value": "deriv_r"
                    },
                    {
                      "type": "text",
                      "value": ") sets the boundary conditions at "
                    },
                    {
                      "type": "inlineCode",
                      "value": "x[-1]"
                    },
                    {
                      "type": "text",
                      "value": ". Each of these must be an iterable of pairs "
                    },
                    {
                      "type": "inlineCode",
                      "value": "(order, value)"
                    },
                    {
                      "type": "text",
                      "value": " which gives the values of derivatives of specified orders at the given edge of the interpolation interval. Alternatively, the following string aliases are recognized:"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "children": [
                        {
                          "children": [
                            {
                              "dd": [
                                {
                                  "children": [
                                    {
                                      "type": "text",
                                      "value": "equivalent to "
                                    },
                                    {
                                      "type": "inlineCode",
                                      "value": "bc_type=([(1, 0.0)], [(1, 0.0)])"
                                    },
                                    {
                                      "type": "text",
                                      "value": "."
                                    }
                                  ],
                                  "type": "paragraph"
                                }
                              ],
                              "dt": {
                                "children": [
                                  {
                                    "type": "inlineCode",
                                    "value": "\"clamped\""
                                  },
                                  {
                                    "type": "text",
                                    "value": ": The first derivatives at the ends are zero. This is"
                                  }
                                ],
                                "type": "paragraph"
                              },
                              "type": "DefListItem"
                            }
                          ],
                          "type": "DefList"
                        }
                      ],
                      "spread": false,
                      "type": "listItem"
                    },
                    {
                      "children": [
                        {
                          "children": [
                            {
                              "type": "inlineCode",
                              "value": "\"natural\""
                            },
                            {
                              "type": "text",
                              "value": ": The second derivatives at ends are zero. This is   equivalent to "
                            },
                            {
                              "type": "inlineCode",
                              "value": "bc_type=([(2, 0.0)], [(2, 0.0)])"
                            },
                            {
                              "type": "text",
                              "value": "."
                            }
                          ],
                          "type": "paragraph"
                        }
                      ],
                      "spread": false,
                      "type": "listItem"
                    },
                    {
                      "children": [
                        {
                          "children": [
                            {
                              "type": "inlineCode",
                              "value": "\"not-a-knot\""
                            },
                            {
                              "type": "text",
                              "value": " (default): The first and second segments are the   same polynomial. This is equivalent to having "
                            },
                            {
                              "type": "inlineCode",
                              "value": "bc_type=None"
                            },
                            {
                              "type": "text",
                              "value": "."
                            }
                          ],
                          "type": "paragraph"
                        }
                      ],
                      "spread": false,
                      "type": "listItem"
                    },
                    {
                      "children": [
                        {
                          "children": [
                            {
                              "type": "inlineCode",
                              "value": "\"periodic\""
                            },
                            {
                              "type": "text",
                              "value": ": The values and the first "
                            },
                            {
                              "type": "inlineCode",
                              "value": "k-1"
                            },
                            {
                              "type": "text",
                              "value": " derivatives at the   ends are equivalent."
                            }
                          ],
                          "type": "paragraph"
                        }
                      ],
                      "spread": false,
                      "type": "listItem"
                    }
                  ],
                  "ordered": false,
                  "spread": false,
                  "start": 1,
                  "type": "list"
                }
              ],
              "param": "bc_type",
              "type": "Param",
              "type_": "2-tuple or None"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Interpolation axis. Default is 0."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "axis",
              "type": "Param",
              "type_": "int, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Whether to check that the input arrays contain only finite numbers. Disabling may give a performance gain, but may result in problems (crashes, non-termination) if the inputs do contain infinities or NaNs. Default is True."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "check_finite",
              "type": "Param",
              "type_": "bool, optional"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [
        {
          "children": [
            {
              "desc": [],
              "param": "b",
              "type": "Param",
              "type_": "a BSpline object of the degree ``k`` and with knots ``t``."
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Compute the (coefficients of) interpolating B-spline."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [
      {
        "type": "text",
        "value": "Use cubic interpolation on Chebyshev nodes:"
      },
      {
        "type": "code",
        "value": "import numpy as np\nimport matplotlib.pyplot as plt\ndef cheb_nodes(N):\n    jj = 2.*np.arange(N) + 1\n    x = np.cos(np.pi * jj / 2 / N)[::-1]\n    return x"
      },
      {
        "type": "code",
        "value": "x = cheb_nodes(20)\ny = np.sqrt(1 - x**2)"
      },
      {
        "type": "code",
        "value": "from scipy.interpolate import BSpline, make_interp_spline\nb = make_interp_spline(x, y)\nnp.allclose(b(x), y)"
      },
      {
        "type": "text",
        "value": "Note that the default is a cubic spline with a not-a-knot boundary condition"
      },
      {
        "type": "code",
        "value": "b.k"
      },
      {
        "type": "text",
        "value": "Here we use a 'natural' spline, with zero 2nd derivatives at edges:"
      },
      {
        "type": "code",
        "value": "l, r = [(2, 0.0)], [(2, 0.0)]\nb_n = make_interp_spline(x, y, bc_type=(l, r))  # or, bc_type=\"natural\"\nnp.allclose(b_n(x), y)"
      },
      {
        "type": "code",
        "value": "x0, x1 = x[0], x[-1]\nnp.allclose([b_n(x0, 2), b_n(x1, 2)], [0, 0])"
      },
      {
        "type": "text",
        "value": "Interpolation of parametric curves is also supported. As an example, we\ncompute a discretization of a snail curve in polar coordinates"
      },
      {
        "type": "code",
        "value": "phi = np.linspace(0, 2.*np.pi, 40)\nr = 0.3 + np.cos(phi)\nx, y = r*np.cos(phi), r*np.sin(phi)  # convert to Cartesian coordinates"
      },
      {
        "type": "text",
        "value": "Build an interpolating curve, parameterizing it by the angle"
      },
      {
        "type": "code",
        "value": "spl = make_interp_spline(phi, np.c_[x, y])"
      },
      {
        "type": "text",
        "value": "Evaluate the interpolant on a finer grid (note that we transpose the result\nto unpack it into a pair of x- and y-arrays)"
      },
      {
        "type": "code",
        "value": "phi_new = np.linspace(0, 2.*np.pi, 100)\nx_new, y_new = spl(phi_new).T"
      },
      {
        "type": "text",
        "value": "Plot the result"
      },
      {
        "type": "code",
        "value": "plt.plot(x, y, 'o')\nplt.plot(x_new, y_new, '-')\nplt.show()"
      },
      {
        "type": "Fig",
        "value": {
          "kind": "assets",
          "module": "scipy",
          "path": "fig-scipy.interpolate._bsplines:make_interp_spline-0-da3b8c0b.png",
          "type": "RefInfo",
          "version": "1.10.1"
        }
      },
      {
        "type": "text",
        "value": "Build a B-spline curve with 2 dimensional y"
      },
      {
        "type": "code",
        "value": "x = np.linspace(0, 2*np.pi, 10)\ny = np.array([np.sin(x), np.cos(x)])"
      },
      {
        "type": "text",
        "value": "Periodic condition is satisfied because y coordinates of points on the ends\nare equivalent"
      },
      {
        "type": "code",
        "value": "ax = plt.axes(projection='3d')\nxx = np.linspace(0, 2*np.pi, 100)\nbspl = make_interp_spline(x, y, k=5, bc_type='periodic', axis=1)\nax.plot3D(xx, *bspl(xx))\nax.scatter3D(x, *y, color='red')\nplt.show()"
      },
      {
        "type": "Fig",
        "value": {
          "kind": "assets",
          "module": "scipy",
          "path": "fig-scipy.interpolate._bsplines:make_interp_spline-1-11829430.png",
          "type": "RefInfo",
          "version": "1.10.1"
        }
      }
    ],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/scipy/interpolate/_bsplines.py",
  "item_line": 1134,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Parameters",
    "Returns",
    "Examples",
    "See Also"
  ],
  "references": null,
  "see_also": [
    {
      "descriptions": [
        {
          "children": [
            {
              "type": "text",
              "value": "base class representing the B-spline objects"
            }
          ],
          "type": "paragraph"
        }
      ],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "to-resolve",
          "module": "current-module",
          "path": "BSpline",
          "type": "RefInfo",
          "version": "current-version"
        },
        "type": "Link",
        "value": "BSpline"
      },
      "type": null
    },
    {
      "descriptions": [
        {
          "children": [
            {
              "type": "text",
              "value": "a cubic spline in the polynomial basis"
            }
          ],
          "type": "paragraph"
        }
      ],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "to-resolve",
          "module": "current-module",
          "path": "CubicSpline",
          "type": "RefInfo",
          "version": "current-version"
        },
        "type": "Link",
        "value": "CubicSpline"
      },
      "type": null
    },
    {
      "descriptions": [
        {
          "children": [
            {
              "type": "text",
              "value": "a similar factory function for spline fitting"
            }
          ],
          "type": "paragraph"
        }
      ],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "module",
          "module": "scipy",
          "path": "scipy.interpolate._bsplines:make_lsq_spline",
          "type": "RefInfo",
          "version": "1.10.1"
        },
        "type": "Link",
        "value": "make_lsq_spline"
      },
      "type": null
    },
    {
      "descriptions": [
        {
          "children": [
            {
              "type": "text",
              "value": "a wrapper over FITPACK spline fitting routines"
            }
          ],
          "type": "paragraph"
        }
      ],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "to-resolve",
          "module": "current-module",
          "path": "UnivariateSpline",
          "type": "RefInfo",
          "version": "current-version"
        },
        "type": "Link",
        "value": "UnivariateSpline"
      },
      "type": null
    },
    {
      "descriptions": [
        {
          "children": [
            {
              "type": "text",
              "value": "a wrapper over FITPACK spline fitting routines"
            }
          ],
          "type": "paragraph"
        }
      ],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "to-resolve",
          "module": "current-module",
          "path": "splrep",
          "type": "RefInfo",
          "version": "current-version"
        },
        "type": "Link",
        "value": "splrep"
      },
      "type": null
    }
  ],
  "signature": {
    "type": "Signature",
    "value": "(x, y, k=3, t=None, bc_type=None, axis=0, check_finite=True)"
  },
  "type": "DocBlob"
}