{
  "aliases": [
    "scipy.interpolate.LinearNDInterpolator"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [
        {
          "children": [
            {
              "children": [
                {
                  "type": "text",
                  "value": "versionadded 0.9"
                }
              ],
              "type": "admonitionTitle"
            }
          ],
          "kind": "note",
          "type": "admonition"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [
        {
          "children": [
            {
              "desc": [],
              "param": "__call__",
              "type": "Param",
              "type_": ""
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "The interpolant is constructed by triangulating the input data with Qhull , and on each triangle performing linear barycentric interpolation."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Data point coordinates, or a precomputed Delaunay triangulation."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "points",
              "type": "Param",
              "type_": "ndarray of floats, shape (npoints, ndims); or Delaunay"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Data values."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "values",
              "type": "Param",
              "type_": "ndarray of float or complex, shape (npoints, ...)"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Value used to fill in for requested points outside of the convex hull of the input points.  If not provided, then the default is "
                    },
                    {
                      "type": "inlineCode",
                      "value": "nan"
                    },
                    {
                      "type": "text",
                      "value": "."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "fill_value",
              "type": "Param",
              "type_": "float, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Rescale points to unit cube before performing interpolation. This is useful if some of the input dimensions have incommensurable units and differ by many orders of magnitude."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "rescale",
              "type": "Param",
              "type_": "bool, optional"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Piecewise linear interpolant in N > 1 dimensions."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [
      {
        "type": "text",
        "value": "We can interpolate values on a 2D plane:"
      },
      {
        "type": "code",
        "value": "from scipy.interpolate import LinearNDInterpolator\nimport numpy as np\nimport matplotlib.pyplot as plt\nrng = np.random.default_rng()\nx = rng.random(10) - 0.5\ny = rng.random(10) - 0.5\nz = np.hypot(x, y)\nX = np.linspace(min(x), max(x))\nY = np.linspace(min(y), max(y))\nX, Y = np.meshgrid(X, Y)  # 2D grid for interpolation\ninterp = LinearNDInterpolator(list(zip(x, y)), z)\nZ = interp(X, Y)\nplt.pcolormesh(X, Y, Z, shading='auto')\nplt.plot(x, y, \"ok\", label=\"input point\")\nplt.legend()\nplt.colorbar()\nplt.axis(\"equal\")\nplt.show()"
      },
      {
        "type": "Fig",
        "value": {
          "kind": "assets",
          "module": "scipy",
          "path": "fig-scipy.interpolate.interpnd:LinearNDInterpolator-0-355ee02e.png",
          "type": "RefInfo",
          "version": "1.10.1"
        }
      }
    ],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/scipy/interpolate/interpnd.cpython-311-darwin.so",
  "item_line": null,
  "item_type": "<class 'type'>",
  "ordered_sections": [
    "Signature",
    "Summary",
    "Extended Summary",
    "Methods",
    "Parameters",
    "Notes",
    "Examples",
    "See Also",
    "References"
  ],
  "references": null,
  "see_also": [
    {
      "descriptions": [
        {
          "children": [
            {
              "type": "text",
              "value": "Interpolate unstructured D-D data."
            }
          ],
          "type": "paragraph"
        }
      ],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "to-resolve",
          "module": "current-module",
          "path": "griddata",
          "type": "RefInfo",
          "version": "current-version"
        },
        "type": "Link",
        "value": "griddata"
      },
      "type": null
    },
    {
      "descriptions": [
        {
          "children": [
            {
              "type": "text",
              "value": "Nearest-neighbor interpolation in N dimensions."
            }
          ],
          "type": "paragraph"
        }
      ],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "to-resolve",
          "module": "current-module",
          "path": "NearestNDInterpolator",
          "type": "RefInfo",
          "version": "current-version"
        },
        "type": "Link",
        "value": "NearestNDInterpolator"
      },
      "type": null
    },
    {
      "descriptions": [
        {
          "children": [
            {
              "type": "text",
              "value": "Piecewise cubic, C1 smooth, curvature-minimizing interpolant in 2D."
            }
          ],
          "type": "paragraph"
        }
      ],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "to-resolve",
          "module": "current-module",
          "path": "CloughTocher2DInterpolator",
          "type": "RefInfo",
          "version": "current-version"
        },
        "type": "Link",
        "value": "CloughTocher2DInterpolator"
      },
      "type": null
    }
  ],
  "signature": {
    "type": "Signature",
    "value": "LinearNDInterpolator(points, values, fill_value=np.nan, rescale=False)"
  },
  "type": "DocBlob"
}