{
  "aliases": [
    "scipy.linalg.solve"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "If the data matrix is known to be a particular type then supplying the corresponding string to "
            },
            {
              "type": "inlineCode",
              "value": "assume_a"
            },
            {
              "type": "text",
              "value": " key chooses the dedicated solver. The available options are"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "If the input b matrix is a 1-D array with N elements, when supplied together with an NxN input a, it is assumed as a valid column vector despite the apparent size mismatch. This is compatible with the numpy.dot() behavior and the returned result is still 1-D array."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "The generic, symmetric, Hermitian and positive definite solutions are obtained via calling ?GESV, ?SYSV, ?HESV, and ?POSV routines of LAPACK respectively."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Square input data"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "a",
              "type": "Param",
              "type_": "(N, N) array_like"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Input data for the right hand side."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "b",
              "type": "Param",
              "type_": "(N, NRHS) array_like"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Assume "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "a",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "a"
                    },
                    {
                      "type": "text",
                      "value": " is symmetric and positive definite."
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "deprecated 0.19.0"
                        }
                      ],
                      "type": "admonitionTitle"
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "This keyword is deprecated and should be replaced by using"
                        }
                      ],
                      "type": "paragraph"
                    }
                  ],
                  "kind": "note",
                  "type": "admonition"
                },
                {
                  "children": [
                    {
                      "type": "inlineCode",
                      "value": "assume_a = 'pos'"
                    },
                    {
                      "type": "text",
                      "value": ". "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "sym_pos",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "sym_pos"
                    },
                    {
                      "type": "text",
                      "value": " will be removed in SciPy 1.11.0."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "sym_pos",
              "type": "Param",
              "type_": "bool, default: False, deprecated"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Ignored if "
                    },
                    {
                      "type": "inlineCode",
                      "value": "assume_a == 'gen'"
                    },
                    {
                      "type": "text",
                      "value": " (the default). If True, the calculation uses only the data in the lower triangle of "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "a",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "a"
                    },
                    {
                      "type": "text",
                      "value": "; entries above the diagonal are ignored. If False (default), the calculation uses only the data in the upper triangle of "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "a",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "a"
                    },
                    {
                      "type": "text",
                      "value": "; entries below the diagonal are ignored."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "lower",
              "type": "Param",
              "type_": "bool, default: False"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Allow overwriting data in "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "a",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "a"
                    },
                    {
                      "type": "text",
                      "value": " (may enhance performance)."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "overwrite_a",
              "type": "Param",
              "type_": "bool, default: False"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Allow overwriting data in "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "b",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "b"
                    },
                    {
                      "type": "text",
                      "value": " (may enhance performance)."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "overwrite_b",
              "type": "Param",
              "type_": "bool, default: False"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Whether to check that the input matrices contain only finite numbers. Disabling may give a performance gain, but may result in problems (crashes, non-termination) if the inputs do contain infinities or NaNs."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "check_finite",
              "type": "Param",
              "type_": "bool, default: True"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Valid entries are explained above."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "assume_a",
              "type": "Param",
              "type_": "str, {'gen', 'sym', 'her', 'pos'}"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "If True, solve "
                    },
                    {
                      "type": "inlineCode",
                      "value": "a.T @ x == b"
                    },
                    {
                      "type": "text",
                      "value": ". Raises "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "NotImplementedError"
                    },
                    {
                      "type": "text",
                      "value": " for complex "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "a",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "a"
                    },
                    {
                      "type": "text",
                      "value": "."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "transposed",
              "type": "Param",
              "type_": "bool, default: False"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "If size mismatches detected or input a is not square."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "",
              "type": "Param",
              "type_": "ValueError"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "If the matrix is singular."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "",
              "type": "Param",
              "type_": "LinAlgError"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "If an ill-conditioned input a is detected."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "",
              "type": "Param",
              "type_": "LinAlgWarning"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "If transposed is True and input a is a complex matrix."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "",
              "type": "Param",
              "type_": "NotImplementedError"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The solution array."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "x",
              "type": "Param",
              "type_": "(N, NRHS) ndarray"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Solves the linear equation set "
            },
            {
              "type": "inlineCode",
              "value": "a @ x == b"
            },
            {
              "type": "text",
              "value": " for the unknown "
            },
            {
              "type": "inlineCode",
              "value": "x"
            },
            {
              "type": "text",
              "value": " for square "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "a",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "a"
            },
            {
              "type": "text",
              "value": " matrix."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [
      {
        "type": "text",
        "value": "Given `a` and `b`, solve for `x`:"
      },
      {
        "type": "code",
        "value": "import numpy as np\na = np.array([[3, 2, 0], [1, -1, 0], [0, 5, 1]])\nb = np.array([2, 4, -1])\nfrom scipy import linalg\nx = linalg.solve(a, b)\nx"
      },
      {
        "type": "code",
        "value": "np.dot(a, x) == b"
      }
    ],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/scipy/linalg/_basic.py",
  "item_line": 40,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns",
    "Raises",
    "Notes",
    "Examples"
  ],
  "references": null,
  "see_also": [],
  "signature": {
    "type": "Signature",
    "value": "(a, b, sym_pos=False, lower=False, overwrite_a=False, overwrite_b=False, check_finite=True, assume_a='gen', transposed=False)"
  },
  "type": "DocBlob"
}