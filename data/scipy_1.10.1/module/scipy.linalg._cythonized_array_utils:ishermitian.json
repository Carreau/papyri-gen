{
  "aliases": [
    "scipy.linalg.ishermitian"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [
        {
          "children": [
            {
              "children": [
                {
                  "type": "text",
                  "value": "For square empty arrays the result is returned True by convention."
                }
              ],
              "type": "paragraph"
            },
            {
              "children": [
                {
                  "domain": null,
                  "role": null,
                  "type": "Directive",
                  "value": "numpy.inf"
                },
                {
                  "type": "text",
                  "value": " will be treated as a number, that is to say "
                },
                {
                  "type": "inlineCode",
                  "value": "[[1, inf],\n    [inf, 2]]"
                },
                {
                  "type": "text",
                  "value": " will return "
                },
                {
                  "type": "inlineCode",
                  "value": "True"
                },
                {
                  "type": "text",
                  "value": ". On the other hand "
                },
                {
                  "domain": null,
                  "role": null,
                  "type": "Directive",
                  "value": "numpy.NaN"
                },
                {
                  "type": "text",
                  "value": " is never     symmetric, say, "
                },
                {
                  "type": "inlineCode",
                  "value": "[[1, nan], [nan, 2]]"
                },
                {
                  "type": "text",
                  "value": " will return "
                },
                {
                  "type": "inlineCode",
                  "value": "False"
                },
                {
                  "type": "text",
                  "value": "."
                }
              ],
              "type": "paragraph"
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "When "
                },
                {
                  "type": "inlineCode",
                  "value": "atol"
                },
                {
                  "type": "text",
                  "value": " and/or "
                },
                {
                  "type": "inlineCode",
                  "value": "rtol"
                },
                {
                  "type": "text",
                  "value": " are set to , then the comparison is performed     by "
                },
                {
                  "anchor": null,
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "api",
                    "module": "numpy",
                    "path": "numpy:allclose",
                    "type": "RefInfo",
                    "version": "*"
                  },
                  "type": "Link",
                  "value": "numpy.allclose"
                },
                {
                  "type": "text",
                  "value": " and the tolerance values are passed to it. Otherwise an     exact comparison against zero is performed by internal functions. Hence     performance can improve or degrade depending on the size and dtype of the     array. If one of "
                },
                {
                  "type": "inlineCode",
                  "value": "atol"
                },
                {
                  "type": "text",
                  "value": " or "
                },
                {
                  "type": "inlineCode",
                  "value": "rtol"
                },
                {
                  "type": "text",
                  "value": " given the other one is automatically     set to zero."
                }
              ],
              "type": "paragraph"
            }
          ],
          "type": "blockquote"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Input array of size (N, N)"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "a",
              "type": "Param",
              "type_": "ndarray"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Absolute error bound"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "atol",
              "type": "Param",
              "type_": "float, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Relative error bound"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "rtol",
              "type": "Param",
              "type_": "float, optional"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "If the dtype of the array is not supported, in particular, NumPy float16, float128 and complex256 dtypes."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "",
              "type": "Param",
              "type_": "TypeError"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Returns True if the array Hermitian."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "her",
              "type": "Param",
              "type_": "bool"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "ishermitian(a, atol=None, rtol=None) Check if a square 2D array is Hermitian."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [
      {
        "type": "text",
        "value": "    >>> import numpy as np\n    >>> from scipy.linalg import ishermitian\n    >>> A = np.arange(9).reshape(3, 3)\n    >>> A = A + A.T\n    >>> ishermitian(A)\n    True\n    >>> A = np.array([[1., 2. + 3.j], [2. - 3.j, 4.]])\n    >>> ishermitian(A)\n    True\n    >>> Ac = np.array([[1. + 1.j, 3.j], [3.j, 2.]])\n    >>> ishermitian(Ac)  # not Hermitian but symmetric\n    False\n    >>> Af = np.array([[0, 1 + 1j], [1 - (1+1e-12)*1j, 0]])\n    >>> ishermitian(Af)\n    False\n    >>> ishermitian(Af, atol=5e-11) # almost hermitian with atol\n    True"
      }
    ],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": null,
  "item_line": null,
  "item_type": "<class 'builtin_function_or_method'>",
  "ordered_sections": [
    "Summary",
    "Parameters",
    "Returns",
    "Raises",
    "See Also",
    "Notes",
    "Examples"
  ],
  "references": null,
  "see_also": [
    {
      "descriptions": [
        {
          "children": [
            {
              "type": "text",
              "value": "Check if a square 2D array is symmetric"
            }
          ],
          "type": "paragraph"
        }
      ],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "module",
          "module": "scipy",
          "path": "scipy.linalg._cythonized_array_utils:issymmetric",
          "type": "RefInfo",
          "version": "1.10.1"
        },
        "type": "Link",
        "value": "issymmetric"
      },
      "type": null
    }
  ],
  "signature": {
    "type": "Signature",
    "value": null
  },
  "type": "DocBlob"
}