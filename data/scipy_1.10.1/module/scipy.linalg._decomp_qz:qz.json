{
  "aliases": [
    "scipy.linalg.qz"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "The QZ, or generalized Schur, decomposition for a pair of n-by-n matrices (A,B) is      "
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": "(A,B) = (Q @ AA @ Z*, Q @ BB @ Z*)"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "where AA, BB is in generalized Schur form if BB is upper-triangular with non-negative diagonal and AA is upper-triangular, or for real QZ decomposition ("
            },
            {
              "type": "inlineCode",
              "value": "output='real'"
            },
            {
              "type": "text",
              "value": ") block upper triangular with 1x1 and 2x2 blocks. In this case, the 1x1 blocks correspond to real generalized eigenvalues and 2x2 blocks are 'standardized' by making the corresponding elements of BB have the form      "
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": "[ a 0 ]\n[ 0 b ]"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "and the pair of corresponding 2x2 blocks in AA and BB will have a complex conjugate pair of generalized eigenvalues. If ("
            },
            {
              "type": "inlineCode",
              "value": "output='complex'"
            },
            {
              "type": "text",
              "value": ") or A and B are complex matrices, Z' denotes the conjugate-transpose of Z. Q and Z are unitary matrices."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Q is transposed versus the equivalent function in Matlab."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "children": [
                {
                  "type": "text",
                  "value": "versionadded 0.11.0"
                }
              ],
              "type": "admonitionTitle"
            }
          ],
          "kind": "note",
          "type": "admonition"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "2-D array to decompose"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "A",
              "type": "Param",
              "type_": "(N, N) array_like"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "2-D array to decompose"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "B",
              "type": "Param",
              "type_": "(N, N) array_like"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Construct the real or complex QZ decomposition for real matrices. Default is 'real'."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "output",
              "type": "Param",
              "type_": "{'real', 'complex'}, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Work array size. If None or -1, it is automatically computed."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "lwork",
              "type": "Param",
              "type_": "int, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "NOTE: THIS INPUT IS DISABLED FOR NOW. Use ordqz instead."
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Specifies whether the upper eigenvalues should be sorted. A callable may be passed that, given a eigenvalue, returns a boolean denoting whether the eigenvalue should be sorted to the top-left (True). For real matrix pairs, the sort function takes three real arguments (alphar, alphai, beta). The eigenvalue "
                    },
                    {
                      "type": "inlineCode",
                      "value": "x = (alphar + alphai*1j)/beta"
                    },
                    {
                      "type": "text",
                      "value": ". For complex matrix pairs or output='complex', the sort function takes two complex arguments (alpha, beta). The eigenvalue "
                    },
                    {
                      "type": "inlineCode",
                      "value": "x = (alpha/beta)"
                    },
                    {
                      "type": "text",
                      "value": ".  Alternatively, string parameters may be used:"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "children": [
                        {
                          "children": [
                            {
                              "children": [
                                {
                                  "type": "text",
                                  "value": "'lhp'   Left-hand plane (x.real < 0.0)"
                                }
                              ],
                              "type": "paragraph"
                            }
                          ],
                          "spread": false,
                          "type": "listItem"
                        },
                        {
                          "children": [
                            {
                              "children": [
                                {
                                  "type": "text",
                                  "value": "'rhp'   Right-hand plane (x.real > 0.0)"
                                }
                              ],
                              "type": "paragraph"
                            }
                          ],
                          "spread": false,
                          "type": "listItem"
                        },
                        {
                          "children": [
                            {
                              "children": [
                                {
                                  "type": "text",
                                  "value": "'iuc'   Inside the unit circle (x*x.conjugate() < 1.0)"
                                }
                              ],
                              "type": "paragraph"
                            }
                          ],
                          "spread": false,
                          "type": "listItem"
                        },
                        {
                          "children": [
                            {
                              "children": [
                                {
                                  "type": "text",
                                  "value": "'ouc'   Outside the unit circle (x*x.conjugate() > 1.0)"
                                }
                              ],
                              "type": "paragraph"
                            }
                          ],
                          "spread": false,
                          "type": "listItem"
                        }
                      ],
                      "ordered": false,
                      "spread": false,
                      "start": 1,
                      "type": "list"
                    }
                  ],
                  "type": "blockquote"
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Defaults to None (no sorting)."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "sort",
              "type": "Param",
              "type_": "{None, callable, 'lhp', 'rhp', 'iuc', 'ouc'}, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Whether to overwrite data in a (may improve performance)"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "overwrite_a",
              "type": "Param",
              "type_": "bool, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Whether to overwrite data in b (may improve performance)"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "overwrite_b",
              "type": "Param",
              "type_": "bool, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "If true checks the elements of "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "A",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "A"
                    },
                    {
                      "type": "text",
                      "value": " and "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "B",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "B"
                    },
                    {
                      "type": "text",
                      "value": " are finite numbers. If false does no checking and passes matrix through to underlying algorithm."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "check_finite",
              "type": "Param",
              "type_": "bool, optional"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Generalized Schur form of A."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "AA",
              "type": "Param",
              "type_": "(N, N) ndarray"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Generalized Schur form of B."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "BB",
              "type": "Param",
              "type_": "(N, N) ndarray"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The left Schur vectors."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "Q",
              "type": "Param",
              "type_": "(N, N) ndarray"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The right Schur vectors."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "Z",
              "type": "Param",
              "type_": "(N, N) ndarray"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "QZ decomposition for generalized eigenvalues of a pair of matrices."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [
      {
        "type": "code",
        "value": "import numpy as np\nfrom scipy.linalg import qz"
      },
      {
        "type": "code",
        "value": "A = np.array([[1, 2, -1], [5, 5, 5], [2, 4, -8]])\nB = np.array([[1, 1, -3], [3, 1, -1], [5, 6, -2]])"
      },
      {
        "type": "text",
        "value": "Compute the decomposition.  The QZ decomposition is not unique, so\ndepending on the underlying library that is used, there may be\ndifferences in the signs of coefficients in the following output."
      },
      {
        "type": "code",
        "value": "AA, BB, Q, Z = qz(A, B)\nAA"
      },
      {
        "type": "code",
        "value": "BB"
      },
      {
        "type": "code",
        "value": "Q"
      },
      {
        "type": "code",
        "value": "Z"
      },
      {
        "type": "text",
        "value": "Verify the QZ decomposition.  With real output, we only need the\ntranspose of ``Z`` in the following expressions."
      },
      {
        "type": "code",
        "value": "Q @ AA @ Z.T  # Should be A"
      },
      {
        "type": "code",
        "value": "Q @ BB @ Z.T  # Should be B"
      },
      {
        "type": "text",
        "value": "Repeat the decomposition, but with ``output='complex'``."
      },
      {
        "type": "code",
        "value": "AA, BB, Q, Z = qz(A, B, output='complex')"
      },
      {
        "type": "text",
        "value": "For conciseness in the output, we use ``np.set_printoptions()`` to set\nthe output precision of NumPy arrays to 3 and display tiny values as 0."
      },
      {
        "type": "code",
        "value": "np.set_printoptions(precision=3, suppress=True)\nAA"
      },
      {
        "type": "code",
        "value": "BB"
      },
      {
        "type": "code",
        "value": "Q"
      },
      {
        "type": "code",
        "value": "Z"
      },
      {
        "type": "text",
        "value": "With complex arrays, we must use ``Z.conj().T`` in the following\nexpressions to verify the decomposition."
      },
      {
        "type": "code",
        "value": "Q @ AA @ Z.conj().T  # Should be A"
      },
      {
        "type": "code",
        "value": "Q @ BB @ Z.conj().T  # Should be B"
      }
    ],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/scipy/linalg/_decomp_qz.py",
  "item_line": 144,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns",
    "See Also",
    "Notes",
    "Examples"
  ],
  "references": null,
  "see_also": [
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "module",
          "module": "scipy",
          "path": "scipy.linalg._decomp_qz:ordqz",
          "type": "RefInfo",
          "version": "1.10.1"
        },
        "type": "Link",
        "value": "ordqz"
      },
      "type": null
    }
  ],
  "signature": {
    "type": "Signature",
    "value": "(A, B, output='real', lwork=None, sort=None, overwrite_a=False, overwrite_b=False, check_finite=True)"
  },
  "type": "DocBlob"
}