{
  "aliases": [
    "scipy.linalg.qr_update"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "If "
            },
            {
              "type": "inlineCode",
              "value": "A = Q R"
            },
            {
              "type": "text",
              "value": " is the QR factorization of "
            },
            {
              "type": "inlineCode",
              "value": "A"
            },
            {
              "type": "text",
              "value": ", return the QR factorization of "
            },
            {
              "type": "inlineCode",
              "value": "A + u v**T"
            },
            {
              "type": "text",
              "value": " for real "
            },
            {
              "type": "inlineCode",
              "value": "A"
            },
            {
              "type": "text",
              "value": " or "
            },
            {
              "type": "inlineCode",
              "value": "A + u v**H"
            },
            {
              "type": "text",
              "value": " for complex "
            },
            {
              "type": "inlineCode",
              "value": "A"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "This routine does not guarantee that the diagonal entries of "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "R1",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "R1"
            },
            {
              "type": "text",
              "value": " are real or positive."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "children": [
                {
                  "type": "text",
                  "value": "versionadded 0.16.0"
                }
              ],
              "type": "admonitionTitle"
            }
          ],
          "kind": "note",
          "type": "admonition"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Unitary/orthogonal matrix from the qr decomposition of A."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "Q",
              "type": "Param",
              "type_": "(M, M) or (M, N) array_like"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Upper triangular matrix from the qr decomposition of A."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "R",
              "type": "Param",
              "type_": "(M, N) or (N, N) array_like"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Left update vector"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "u",
              "type": "Param",
              "type_": "(M,) or (M, k) array_like"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Right update vector"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "v",
              "type": "Param",
              "type_": "(N,) or (N, k) array_like"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "If True, consume Q, R, u, and v, if possible, while performing the update, otherwise make copies as necessary. Defaults to False."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "overwrite_qruv",
              "type": "Param",
              "type_": "bool, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Whether to check that the input matrix contains only finite numbers. Disabling may give a performance gain, but may result in problems (crashes, non-termination) if the inputs do contain infinities or NaNs. Default is True."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "check_finite",
              "type": "Param",
              "type_": "bool, optional"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Updated unitary/orthogonal factor"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "Q1",
              "type": "Param",
              "type_": "ndarray"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Updated upper triangular factor"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "R1",
              "type": "Param",
              "type_": "ndarray"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Rank-k QR update"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [
      {
        "type": "code",
        "value": "import numpy as np\nfrom scipy import linalg\na = np.array([[  3.,  -2.,  -2.],\n              [  6.,  -9.,  -3.],\n              [ -3.,  10.,   1.],\n              [  6.,  -7.,   4.],\n              [  7.,   8.,  -6.]])\nq, r = linalg.qr(a)"
      },
      {
        "type": "text",
        "value": "Given this q, r decomposition, perform a rank 1 update."
      },
      {
        "type": "code",
        "value": "u = np.array([7., -2., 4., 3., 5.])\nv = np.array([1., 3., -5.])\nq_up, r_up = linalg.qr_update(q, r, u, v, False)\nq_up"
      },
      {
        "type": "code",
        "value": "r_up"
      },
      {
        "type": "text",
        "value": "The update is equivalent, but faster than the following."
      },
      {
        "type": "code",
        "value": "a_up = a + np.outer(u, v)\nq_direct, r_direct = linalg.qr(a_up)"
      },
      {
        "type": "text",
        "value": "Check that we have equivalent results:"
      },
      {
        "type": "code",
        "value": "np.allclose(np.dot(q_up, r_up), a_up)"
      },
      {
        "type": "text",
        "value": "And the updated Q is still unitary:"
      },
      {
        "type": "code",
        "value": "np.allclose(np.dot(q_up.T, q_up), np.eye(5))"
      },
      {
        "type": "text",
        "value": "Updating economic (reduced, thin) decompositions is also possible:"
      },
      {
        "type": "code",
        "value": "qe, re = linalg.qr(a, mode='economic')\nqe_up, re_up = linalg.qr_update(qe, re, u, v, False)\nqe_up"
      },
      {
        "type": "code",
        "value": "re_up"
      },
      {
        "type": "code",
        "value": "np.allclose(np.dot(qe_up, re_up), a_up)"
      },
      {
        "type": "code",
        "value": "np.allclose(np.dot(qe_up.T, qe_up), np.eye(3))"
      },
      {
        "type": "text",
        "value": "Similarly to the above, perform a rank 2 update."
      },
      {
        "type": "code",
        "value": "u2 = np.array([[ 7., -1,],\n               [-2.,  4.],\n               [ 4.,  2.],\n               [ 3., -6.],\n               [ 5.,  3.]])\nv2 = np.array([[ 1., 2.],\n               [ 3., 4.],\n               [-5., 2]])\nq_up2, r_up2 = linalg.qr_update(q, r, u2, v2, False)\nq_up2"
      },
      {
        "type": "code",
        "value": "r_up2"
      },
      {
        "type": "text",
        "value": "This update is also a valid qr decomposition of ``A + U V**T``."
      },
      {
        "type": "code",
        "value": "a_up2 = a + np.dot(u2, v2.T)\nnp.allclose(a_up2, np.dot(q_up2, r_up2))"
      },
      {
        "type": "code",
        "value": "np.allclose(np.dot(q_up2.T, q_up2), np.eye(5))"
      }
    ],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": null,
  "item_line": null,
  "item_type": "<class 'builtin_function_or_method'>",
  "ordered_sections": [
    "Signature",
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns",
    "See Also",
    "Notes",
    "References",
    "Examples"
  ],
  "references": null,
  "see_also": [
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "to-resolve",
          "module": "current-module",
          "path": "qr",
          "type": "RefInfo",
          "version": "current-version"
        },
        "type": "Link",
        "value": "qr"
      },
      "type": null
    },
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "module",
          "module": "scipy",
          "path": "scipy.linalg._decomp_qr:qr_multiply",
          "type": "RefInfo",
          "version": "1.10.1"
        },
        "type": "Link",
        "value": "qr_multiply"
      },
      "type": null
    },
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "module",
          "module": "scipy",
          "path": "scipy.linalg._decomp_update:qr_delete",
          "type": "RefInfo",
          "version": "1.10.1"
        },
        "type": "Link",
        "value": "qr_delete"
      },
      "type": null
    },
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "module",
          "module": "scipy",
          "path": "scipy.linalg._decomp_update:qr_insert",
          "type": "RefInfo",
          "version": "1.10.1"
        },
        "type": "Link",
        "value": "qr_insert"
      },
      "type": null
    }
  ],
  "signature": {
    "type": "Signature",
    "value": "qr_update(Q, R, u, v, overwrite_qruv=False, check_finite=True)"
  },
  "type": "DocBlob"
}