{
  "aliases": [
    "scipy.linalg.convolution_matrix"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Constructs the Toeplitz matrix representing one-dimensional convolution .  See the notes below for details."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "The code      "
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": "A = convolution_matrix(a, n, mode)"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "creates a Toeplitz matrix "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "A",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "A"
            },
            {
              "type": "text",
              "value": " such that "
            },
            {
              "type": "inlineCode",
              "value": "A @ v"
            },
            {
              "type": "text",
              "value": " is equivalent to using "
            },
            {
              "type": "inlineCode",
              "value": "convolve(a, v, mode)"
            },
            {
              "type": "text",
              "value": ".  The returned array always has "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "n",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "n"
            },
            {
              "type": "text",
              "value": " columns.  The number of rows depends on the specified "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "mode",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "mode"
            },
            {
              "type": "text",
              "value": ", as explained above."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "In the default 'full' mode, the entries of "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "A",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "A"
            },
            {
              "type": "text",
              "value": " are given by      "
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": "A[i, j] == (a[i-j] if (0 <= (i-j) < m) else 0)"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "where "
            },
            {
              "type": "inlineCode",
              "value": "m = len(a)"
            },
            {
              "type": "text",
              "value": ".  Suppose, for example, the input array is "
            },
            {
              "type": "inlineCode",
              "value": "[x, y, z]"
            },
            {
              "type": "text",
              "value": ".  The convolution matrix has the form      "
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": "[x, 0, 0, ..., 0, 0]\n[y, x, 0, ..., 0, 0]\n[z, y, x, ..., 0, 0]\n...\n[0, 0, 0, ..., x, 0]\n[0, 0, 0, ..., y, x]\n[0, 0, 0, ..., z, y]\n[0, 0, 0, ..., 0, z]"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "In 'valid' mode, the entries of "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "A",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "A"
            },
            {
              "type": "text",
              "value": " are given by      "
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": "A[i, j] == (a[i-j+m-1] if (0 <= (i-j+m-1) < m) else 0)"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "This corresponds to a matrix whose rows are the subset of those from the 'full' case where all the coefficients in "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "a",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "a"
            },
            {
              "type": "text",
              "value": " are contained in the row.  For input "
            },
            {
              "type": "inlineCode",
              "value": "[x, y, z]"
            },
            {
              "type": "text",
              "value": ", this array looks like      "
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": "[z, y, x, 0, 0, ..., 0, 0, 0]\n[0, z, y, x, 0, ..., 0, 0, 0]\n[0, 0, z, y, x, ..., 0, 0, 0]\n...\n[0, 0, 0, 0, 0, ..., x, 0, 0]\n[0, 0, 0, 0, 0, ..., y, x, 0]\n[0, 0, 0, 0, 0, ..., z, y, x]"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "In the 'same' mode, the entries of "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "A",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "A"
            },
            {
              "type": "text",
              "value": " are given by      "
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": "d = (m - 1) // 2\nA[i, j] == (a[i-j+d] if (0 <= (i-j+d) < m) else 0)"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "The typical application of the 'same' mode is when one has a signal of length "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "n",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "n"
            },
            {
              "type": "text",
              "value": " (with "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "n",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "n"
            },
            {
              "type": "text",
              "value": " greater than "
            },
            {
              "type": "inlineCode",
              "value": "len(a)"
            },
            {
              "type": "text",
              "value": "), and the desired output is a filtered signal that is still of length "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "n",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "n"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "For input "
            },
            {
              "type": "inlineCode",
              "value": "[x, y, z]"
            },
            {
              "type": "text",
              "value": ", this array looks like      "
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": "[y, x, 0, 0, ..., 0, 0, 0]\n[z, y, x, 0, ..., 0, 0, 0]\n[0, z, y, x, ..., 0, 0, 0]\n[0, 0, z, y, ..., 0, 0, 0]\n...\n[0, 0, 0, 0, ..., y, x, 0]\n[0, 0, 0, 0, ..., z, y, x]\n[0, 0, 0, 0, ..., 0, z, y]"
        },
        {
          "children": [
            {
              "children": [
                {
                  "type": "text",
                  "value": "versionadded 1.5.0"
                }
              ],
              "type": "admonitionTitle"
            }
          ],
          "kind": "note",
          "type": "admonition"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The 1-D array to convolve."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "a",
              "type": "Param",
              "type_": "(m,) array_like"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The number of columns in the resulting matrix.  It gives the length of the input to be convolved with "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "a",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "a"
                    },
                    {
                      "type": "text",
                      "value": ".  This is analogous to the length of "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "v"
                    },
                    {
                      "type": "text",
                      "value": " in "
                    },
                    {
                      "type": "inlineCode",
                      "value": "numpy.convolve(a, v)"
                    },
                    {
                      "type": "text",
                      "value": "."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "n",
              "type": "Param",
              "type_": "int"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "This is analogous to "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "mode",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "mode"
                    },
                    {
                      "type": "text",
                      "value": " in "
                    },
                    {
                      "type": "inlineCode",
                      "value": "numpy.convolve(v, a, mode)"
                    },
                    {
                      "type": "text",
                      "value": ". It must be one of ('full', 'valid', 'same'). See below for how "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "mode",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "mode"
                    },
                    {
                      "type": "text",
                      "value": " determines the shape of the result."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "mode",
              "type": "Param",
              "type_": "str"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The convolution matrix whose row count "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "k"
                    },
                    {
                      "type": "text",
                      "value": " depends on "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "mode",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "mode"
                    },
                    {
                      "type": "text",
                      "value": ":      "
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "type": "code",
                  "value": "=======  =========================\n mode    k\n=======  =========================\n'full'   m + n -1\n'same'   max(m, n)\n'valid'  max(m, n) - min(m, n) + 1\n=======  ========================="
                }
              ],
              "param": "A",
              "type": "Param",
              "type_": "(k, n) ndarray"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Construct a convolution matrix."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [
      {
        "type": "code",
        "value": "import numpy as np\nfrom scipy.linalg import convolution_matrix\nA = convolution_matrix([-1, 4, -2], 5, mode='same')\nA"
      },
      {
        "type": "text",
        "value": "Compare multiplication by `A` with the use of `numpy.convolve`."
      },
      {
        "type": "code",
        "value": "x = np.array([1, 2, 0, -3, 0.5])\nA @ x"
      },
      {
        "type": "text",
        "value": "Verify that ``A @ x`` produced the same result as applying the\nconvolution function."
      },
      {
        "type": "code",
        "value": "np.convolve([-1, 4, -2], x, mode='same')"
      },
      {
        "type": "text",
        "value": "For comparison to the case ``mode='same'`` shown above, here are the\nmatrices produced by ``mode='full'`` and ``mode='valid'`` for the\nsame coefficients and size."
      },
      {
        "type": "code",
        "value": "convolution_matrix([-1, 4, -2], 5, mode='full')"
      },
      {
        "type": "code",
        "value": "convolution_matrix([-1, 4, -2], 5, mode='valid')"
      }
    ],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/scipy/linalg/_special_matrices.py",
  "item_line": 1199,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns",
    "See Also",
    "Notes",
    "References",
    "Examples"
  ],
  "references": null,
  "see_also": [
    {
      "descriptions": [
        {
          "children": [
            {
              "type": "text",
              "value": "Toeplitz matrix"
            }
          ],
          "type": "paragraph"
        }
      ],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "to-resolve",
          "module": "current-module",
          "path": "toeplitz",
          "type": "RefInfo",
          "version": "current-version"
        },
        "type": "Link",
        "value": "toeplitz"
      },
      "type": null
    }
  ],
  "signature": {
    "type": "Signature",
    "value": "(a, n, mode='full')"
  },
  "type": "DocBlob"
}