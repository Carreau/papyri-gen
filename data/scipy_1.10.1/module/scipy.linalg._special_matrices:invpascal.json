{
  "aliases": [
    "scipy.linalg.invpascal"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "The Pascal matrix is a matrix containing the binomial coefficients as its elements."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [
        {
          "children": [
            {
              "children": [
                {
                  "type": "text",
                  "value": "versionadded 0.16.0"
                }
              ],
              "type": "admonitionTitle"
            }
          ],
          "kind": "note",
          "type": "admonition"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The size of the matrix to create; that is, the result is an n x n matrix."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "n",
              "type": "Param",
              "type_": "int"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Must be one of 'symmetric', 'lower', or 'upper'. Default is 'symmetric'."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "kind",
              "type": "Param",
              "type_": "str, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "If "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "exact",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "exact"
                    },
                    {
                      "type": "text",
                      "value": " is True, the result is either an array of type "
                    },
                    {
                      "type": "inlineCode",
                      "value": "numpy.int64"
                    },
                    {
                      "type": "text",
                      "value": " (if "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "n",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "n"
                    },
                    {
                      "type": "text",
                      "value": " <= 35) or an object array of Python integers. If "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "exact",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "exact"
                    },
                    {
                      "type": "text",
                      "value": " is False, the coefficients in the matrix are computed using "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "module",
                      "reference": {
                        "kind": "api",
                        "module": "scipy.special._basic",
                        "path": "scipy.special._basic:comb",
                        "type": "RefInfo",
                        "version": "*"
                      },
                      "type": "Link",
                      "value": "scipy.special.comb"
                    },
                    {
                      "type": "text",
                      "value": " with "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "exact=False"
                    },
                    {
                      "type": "text",
                      "value": ". The result will be a floating point array, and for large "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "n",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "n"
                    },
                    {
                      "type": "text",
                      "value": ", the values in the array will not be the exact coefficients."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "exact",
              "type": "Param",
              "type_": "bool, optional"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The inverse of the Pascal matrix."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "invp",
              "type": "Param",
              "type_": "(n, n) ndarray"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Returns the inverse of the n x n Pascal matrix."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [
      {
        "type": "code",
        "value": "from scipy.linalg import invpascal, pascal\ninvp = invpascal(5)\ninvp"
      },
      {
        "type": "code",
        "value": "p = pascal(5)\np.dot(invp)"
      },
      {
        "type": "text",
        "value": "An example of the use of `kind` and `exact`:"
      },
      {
        "type": "code",
        "value": "invpascal(5, kind='lower', exact=False)"
      }
    ],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/scipy/linalg/_special_matrices.py",
  "item_line": 863,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns",
    "See Also",
    "Notes",
    "References",
    "Examples"
  ],
  "references": null,
  "see_also": [
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "to-resolve",
          "module": "current-module",
          "path": "pascal",
          "type": "RefInfo",
          "version": "current-version"
        },
        "type": "Link",
        "value": "pascal"
      },
      "type": null
    }
  ],
  "signature": {
    "type": "Signature",
    "value": "(n, kind='symmetric', exact=True)"
  },
  "type": "DocBlob"
}