{
  "aliases": [
    "scipy.linalg.interpolative.svd"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "An SVD of a matrix "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "A",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "A"
            },
            {
              "type": "text",
              "value": " is a factorization      "
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": "A = numpy.dot(U, numpy.dot(numpy.diag(S), V.conj().T))"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "where "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "U",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "U"
            },
            {
              "type": "text",
              "value": " and "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "V",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "V"
            },
            {
              "type": "text",
              "value": " have orthonormal columns and "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "S",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "S"
            },
            {
              "type": "text",
              "value": " is nonnegative."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "The SVD can be computed to any relative precision or rank (depending on the value of "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "eps_or_k",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "eps_or_k"
            },
            {
              "type": "text",
              "value": ")."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "See also "
            },
            {
              "type": "inlineCode",
              "value": "interp_decomp"
            },
            {
              "type": "text",
              "value": " and "
            },
            {
              "type": "inlineCode",
              "value": "id_to_svd"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "mystComment",
          "value": "..  This function automatically detects the form of the input parameters and\n    passes them to the appropriate backend. For details, see\n    :func:`_backend.iddp_svd`, :func:`_backend.iddp_asvd`,\n    :func:`_backend.iddp_rsvd`, :func:`_backend.iddr_svd`,\n    :func:`_backend.iddr_asvd`, :func:`_backend.iddr_rsvd`,\n    :func:`_backend.idzp_svd`, :func:`_backend.idzp_asvd`,\n    :func:`_backend.idzp_rsvd`, :func:`_backend.idzr_svd`,\n    :func:`_backend.idzr_asvd`, and :func:`_backend.idzr_rsvd`."
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Matrix to be factored, given as either a "
                    },
                    {
                      "type": "inlineCode",
                      "value": "numpy.ndarray"
                    },
                    {
                      "type": "text",
                      "value": " or a "
                    },
                    {
                      "type": "inlineCode",
                      "value": "scipy.sparse.linalg.LinearOperator"
                    },
                    {
                      "type": "text",
                      "value": " with the "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "matvec"
                    },
                    {
                      "type": "text",
                      "value": " and "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "rmatvec"
                    },
                    {
                      "type": "text",
                      "value": " methods (to apply the matrix and its adjoint)."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "A",
              "type": "Param",
              "type_": ":class:`numpy.ndarray` or :class:`scipy.sparse.linalg.LinearOperator`"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Relative error (if "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "eps_or_k < 1"
                    },
                    {
                      "type": "text",
                      "value": ") or rank (if "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "eps_or_k >= 1"
                    },
                    {
                      "type": "text",
                      "value": ") of approximation."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "eps_or_k",
              "type": "Param",
              "type_": "float or int"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Whether to use random sampling if "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "A",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "A"
                    },
                    {
                      "type": "text",
                      "value": " is of type "
                    },
                    {
                      "type": "inlineCode",
                      "value": "numpy.ndarray"
                    },
                    {
                      "type": "text",
                      "value": " (randomized algorithms are always used if "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "A",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "A"
                    },
                    {
                      "type": "text",
                      "value": " is of type "
                    },
                    {
                      "type": "inlineCode",
                      "value": "scipy.sparse.linalg.LinearOperator"
                    },
                    {
                      "type": "text",
                      "value": ")."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "rand",
              "type": "Param",
              "type_": "bool, optional"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Left singular vectors."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "U",
              "type": "Param",
              "type_": ":class:`numpy.ndarray`"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Singular values."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "S",
              "type": "Param",
              "type_": ":class:`numpy.ndarray`"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Right singular vectors."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "V",
              "type": "Param",
              "type_": ":class:`numpy.ndarray`"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Compute SVD of a matrix via an ID."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/scipy/linalg/interpolative.py",
  "item_line": 846,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns"
  ],
  "references": null,
  "see_also": [],
  "signature": {
    "type": "Signature",
    "value": "(A, eps_or_k, rand=True)"
  },
  "type": "DocBlob"
}