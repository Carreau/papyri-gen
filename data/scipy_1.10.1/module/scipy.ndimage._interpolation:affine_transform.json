{
  "aliases": [
    "scipy.ndimage.affine_transform"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Given an output image pixel index vector "
            },
            {
              "type": "inlineCode",
              "value": "o"
            },
            {
              "type": "text",
              "value": ", the pixel value is determined from the input image at position "
            },
            {
              "type": "inlineCode",
              "value": "np.dot(matrix, o) + offset"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "This does 'pull' (or 'backward') resampling, transforming the output space to the input to locate data. Affine transformations are often described in the 'push' (or 'forward') direction, transforming input to output. If you have a matrix for the 'push' transformation, use its inverse ("
            },
            {
              "type": "inlineCode",
              "value": "numpy.linalg.inv"
            },
            {
              "type": "text",
              "value": ") in this function."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "The given matrix and offset are used to find for each point in the output the corresponding coordinates in the input by an affine transformation. The value of the input at those coordinates is determined by spline interpolation of the requested order. Points outside the boundaries of the input are filled according to the given mode."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "children": [
                {
                  "type": "text",
                  "value": "versionchanged 0.18.0"
                }
              ],
              "type": "admonitionTitle"
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "Previously, the exact interpretation of the affine transformation depended on whether the matrix was supplied as a 1-D or a 2-D array. If a 1-D array was supplied to the matrix parameter, the output pixel value at index "
                },
                {
                  "type": "inlineCode",
                  "value": "o"
                },
                {
                  "type": "text",
                  "value": " was determined from the input image at position "
                },
                {
                  "type": "inlineCode",
                  "value": "matrix * (o + offset)"
                },
                {
                  "type": "text",
                  "value": "."
                }
              ],
              "type": "paragraph"
            }
          ],
          "kind": "note",
          "type": "admonition"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "For complex-valued "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "input",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "input"
            },
            {
              "type": "text",
              "value": ", this function transforms the real and imaginary components independently."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "children": [
                {
                  "type": "text",
                  "value": "versionadded 1.6.0"
                }
              ],
              "type": "admonitionTitle"
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "Complex-valued support added."
                }
              ],
              "type": "paragraph"
            }
          ],
          "kind": "note",
          "type": "admonition"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The input array."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "input",
              "type": "Param",
              "type_": "array_like"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The inverse coordinate transformation matrix, mapping output coordinates to input coordinates. If "
                    },
                    {
                      "type": "inlineCode",
                      "value": "ndim"
                    },
                    {
                      "type": "text",
                      "value": " is the number of dimensions of "
                    },
                    {
                      "type": "inlineCode",
                      "value": "input"
                    },
                    {
                      "type": "text",
                      "value": ", the given matrix must have one of the following shapes:"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "children": [
                        {
                          "children": [
                            {
                              "children": [
                                {
                                  "type": "inlineCode",
                                  "value": "(ndim, ndim)"
                                },
                                {
                                  "type": "text",
                                  "value": ": the linear transformation matrix for each       output coordinate."
                                }
                              ],
                              "type": "paragraph"
                            }
                          ],
                          "spread": false,
                          "type": "listItem"
                        },
                        {
                          "children": [
                            {
                              "children": [
                                {
                                  "type": "inlineCode",
                                  "value": "(ndim,)"
                                },
                                {
                                  "type": "text",
                                  "value": ": assume that the 2-D transformation matrix is       diagonal, with the diagonal specified by the given value. A more       efficient algorithm is then used that exploits the separability       of the problem."
                                }
                              ],
                              "type": "paragraph"
                            }
                          ],
                          "spread": false,
                          "type": "listItem"
                        },
                        {
                          "children": [
                            {
                              "children": [
                                {
                                  "type": "inlineCode",
                                  "value": "(ndim + 1, ndim + 1)"
                                },
                                {
                                  "type": "text",
                                  "value": ": assume that the transformation is       specified using homogeneous coordinates . In this case, any       value passed to "
                                },
                                {
                                  "type": "inlineCode",
                                  "value": "offset"
                                },
                                {
                                  "type": "text",
                                  "value": " is ignored."
                                }
                              ],
                              "type": "paragraph"
                            }
                          ],
                          "spread": false,
                          "type": "listItem"
                        },
                        {
                          "children": [
                            {
                              "children": [
                                {
                                  "type": "inlineCode",
                                  "value": "(ndim, ndim + 1)"
                                },
                                {
                                  "type": "text",
                                  "value": ": as above, but the bottom row of a       homogeneous transformation matrix is always "
                                },
                                {
                                  "type": "inlineCode",
                                  "value": "[0, 0, ..., 1]"
                                },
                                {
                                  "type": "text",
                                  "value": ",       and may be omitted."
                                }
                              ],
                              "type": "paragraph"
                            }
                          ],
                          "spread": false,
                          "type": "listItem"
                        }
                      ],
                      "ordered": false,
                      "spread": false,
                      "start": 1,
                      "type": "list"
                    }
                  ],
                  "type": "blockquote"
                }
              ],
              "param": "matrix",
              "type": "Param",
              "type_": "ndarray"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The offset into the array where the transform is applied. If a float, "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "offset",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "offset"
                    },
                    {
                      "type": "text",
                      "value": " is the same for each axis. If a sequence, "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "offset",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "offset"
                    },
                    {
                      "type": "text",
                      "value": " should contain one value for each axis."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "offset",
              "type": "Param",
              "type_": "float or sequence, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Shape tuple."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "output_shape",
              "type": "Param",
              "type_": "tuple of ints, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The array in which to place the output, or the dtype of the returned array. By default an array of the same dtype as input will be created."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "output",
              "type": "Param",
              "type_": "array or dtype, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The order of the spline interpolation, default is 3. The order has to be in the range 0-5."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "order",
              "type": "Param",
              "type_": "int, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "mode",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "mode"
                    },
                    {
                      "type": "text",
                      "value": " parameter determines how the input array is extended beyond its boundaries. Default is 'constant'. Behavior for each valid value is as follows (see additional plots and details on "
                    },
                    {
                      "type": "inlineCode",
                      "value": "boundary modes <ndimage-interpolation-modes>"
                    },
                    {
                      "type": "text",
                      "value": "):"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "dd": [
                        {
                          "children": [
                            {
                              "type": "text",
                              "value": "The input is extended by reflecting about the edge of the last     pixel. This mode is also sometimes referred to as half-sample     symmetric."
                            }
                          ],
                          "type": "paragraph"
                        }
                      ],
                      "dt": {
                        "children": [
                          {
                            "type": "text",
                            "value": "'reflect' ("
                          },
                          {
                            "domain": null,
                            "role": null,
                            "type": "Directive",
                            "value": "d c b a | a b c d | d c b a"
                          },
                          {
                            "type": "text",
                            "value": ")"
                          }
                        ],
                        "type": "paragraph"
                      },
                      "type": "DefListItem"
                    },
                    {
                      "dd": [
                        {
                          "children": [
                            {
                              "type": "text",
                              "value": "This is a synonym for 'reflect'."
                            }
                          ],
                          "type": "paragraph"
                        }
                      ],
                      "dt": {
                        "children": [
                          {
                            "type": "text",
                            "value": "'grid-mirror'"
                          }
                        ],
                        "type": "paragraph"
                      },
                      "type": "DefListItem"
                    },
                    {
                      "dd": [
                        {
                          "children": [
                            {
                              "type": "text",
                              "value": "The input is extended by filling all values beyond the edge with     the same constant value, defined by the "
                            },
                            {
                              "anchor": null,
                              "exists": true,
                              "kind": "local",
                              "reference": {
                                "kind": "local",
                                "module": null,
                                "path": "cval",
                                "type": "RefInfo",
                                "version": null
                              },
                              "type": "Link",
                              "value": "cval"
                            },
                            {
                              "type": "text",
                              "value": " parameter. No     interpolation is performed beyond the edges of the input."
                            }
                          ],
                          "type": "paragraph"
                        }
                      ],
                      "dt": {
                        "children": [
                          {
                            "type": "text",
                            "value": "'constant' ("
                          },
                          {
                            "domain": null,
                            "role": null,
                            "type": "Directive",
                            "value": "k k k k | a b c d | k k k k"
                          },
                          {
                            "type": "text",
                            "value": ")"
                          }
                        ],
                        "type": "paragraph"
                      },
                      "type": "DefListItem"
                    },
                    {
                      "dd": [
                        {
                          "children": [
                            {
                              "type": "text",
                              "value": "The input is extended by filling all values beyond the edge with     the same constant value, defined by the "
                            },
                            {
                              "anchor": null,
                              "exists": true,
                              "kind": "local",
                              "reference": {
                                "kind": "local",
                                "module": null,
                                "path": "cval",
                                "type": "RefInfo",
                                "version": null
                              },
                              "type": "Link",
                              "value": "cval"
                            },
                            {
                              "type": "text",
                              "value": " parameter. Interpolation     occurs for samples outside the input's extent  as well."
                            }
                          ],
                          "type": "paragraph"
                        }
                      ],
                      "dt": {
                        "children": [
                          {
                            "type": "text",
                            "value": "'grid-constant' ("
                          },
                          {
                            "domain": null,
                            "role": null,
                            "type": "Directive",
                            "value": "k k k k | a b c d | k k k k"
                          },
                          {
                            "type": "text",
                            "value": ")"
                          }
                        ],
                        "type": "paragraph"
                      },
                      "type": "DefListItem"
                    },
                    {
                      "dd": [
                        {
                          "children": [
                            {
                              "type": "text",
                              "value": "The input is extended by replicating the last pixel."
                            }
                          ],
                          "type": "paragraph"
                        }
                      ],
                      "dt": {
                        "children": [
                          {
                            "type": "text",
                            "value": "'nearest' ("
                          },
                          {
                            "domain": null,
                            "role": null,
                            "type": "Directive",
                            "value": "a a a a | a b c d | d d d d"
                          },
                          {
                            "type": "text",
                            "value": ")"
                          }
                        ],
                        "type": "paragraph"
                      },
                      "type": "DefListItem"
                    },
                    {
                      "dd": [
                        {
                          "children": [
                            {
                              "type": "text",
                              "value": "The input is extended by reflecting about the center of the last     pixel. This mode is also sometimes referred to as whole-sample     symmetric."
                            }
                          ],
                          "type": "paragraph"
                        }
                      ],
                      "dt": {
                        "children": [
                          {
                            "type": "text",
                            "value": "'mirror' ("
                          },
                          {
                            "domain": null,
                            "role": null,
                            "type": "Directive",
                            "value": "d c b | a b c d | c b a"
                          },
                          {
                            "type": "text",
                            "value": ")"
                          }
                        ],
                        "type": "paragraph"
                      },
                      "type": "DefListItem"
                    },
                    {
                      "dd": [
                        {
                          "children": [
                            {
                              "type": "text",
                              "value": "The input is extended by wrapping around to the opposite edge."
                            }
                          ],
                          "type": "paragraph"
                        }
                      ],
                      "dt": {
                        "children": [
                          {
                            "type": "text",
                            "value": "'grid-wrap' ("
                          },
                          {
                            "domain": null,
                            "role": null,
                            "type": "Directive",
                            "value": "a b c d | a b c d | a b c d"
                          },
                          {
                            "type": "text",
                            "value": ")"
                          }
                        ],
                        "type": "paragraph"
                      },
                      "type": "DefListItem"
                    },
                    {
                      "dd": [
                        {
                          "children": [
                            {
                              "type": "text",
                              "value": "The input is extended by wrapping around to the opposite edge, but in a     way such that the last point and initial point exactly overlap. In this     case it is not well defined which sample will be chosen at the point of     overlap."
                            }
                          ],
                          "type": "paragraph"
                        }
                      ],
                      "dt": {
                        "children": [
                          {
                            "type": "text",
                            "value": "'wrap' ("
                          },
                          {
                            "domain": null,
                            "role": null,
                            "type": "Directive",
                            "value": "d b c d | a b c d | b c a b"
                          },
                          {
                            "type": "text",
                            "value": ")"
                          }
                        ],
                        "type": "paragraph"
                      },
                      "type": "DefListItem"
                    }
                  ],
                  "type": "DefList"
                }
              ],
              "param": "mode",
              "type": "Param",
              "type_": "{'reflect', 'grid-mirror', 'constant', 'grid-constant', 'nearest',            'mirror', 'grid-wrap', 'wrap'}, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Value to fill past edges of input if "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "mode",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "mode"
                    },
                    {
                      "type": "text",
                      "value": " is 'constant'. Default is 0.0."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "cval",
              "type": "Param",
              "type_": "scalar, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Determines if the input array is prefiltered with "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "spline_filter"
                    },
                    {
                      "type": "text",
                      "value": " before interpolation. The default is True, which will create a temporary "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "float64"
                    },
                    {
                      "type": "text",
                      "value": " array of filtered values if "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "order > 1"
                    },
                    {
                      "type": "text",
                      "value": ". If setting this to False, the output will be slightly blurred if "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "order > 1"
                    },
                    {
                      "type": "text",
                      "value": ", unless the input is prefiltered, i.e. it is the result of calling "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "spline_filter"
                    },
                    {
                      "type": "text",
                      "value": " on the original input."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "prefilter",
              "type": "Param",
              "type_": "bool, optional"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The transformed input."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "affine_transform",
              "type": "Param",
              "type_": "ndarray"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Apply an affine transformation."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/scipy/ndimage/_interpolation.py",
  "item_line": 464,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns",
    "Notes",
    "References"
  ],
  "references": null,
  "see_also": [],
  "signature": {
    "type": "Signature",
    "value": "(input, matrix, offset=0.0, output_shape=None, output=None, order=3, mode='constant', cval=0.0, prefilter=True)"
  },
  "type": "DocBlob"
}