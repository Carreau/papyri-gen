{
  "aliases": [
    "scipy.ndimage.geometric_transform"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "The given mapping function is used to find, for each point in the output, the corresponding coordinates in the input. The value of the input at those coordinates is determined by spline interpolation of the requested order."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "This function also accepts low-level callback functions with one the following signatures and wrapped in "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "module",
              "reference": {
                "kind": "api",
                "module": "scipy._lib._ccallback",
                "path": "scipy._lib._ccallback:LowLevelCallable",
                "type": "RefInfo",
                "version": "*"
              },
              "type": "Link",
              "value": "scipy.LowLevelCallable"
            },
            {
              "type": "text",
              "value": ":"
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": "int mapping(npy_intp *output_coordinates, double *input_coordinates,\n            int output_rank, int input_rank, void *user_data)\nint mapping(intptr_t *output_coordinates, double *input_coordinates,\n            int output_rank, int input_rank, void *user_data)"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "The calling function iterates over the elements of the output array, calling the callback function at each element. The coordinates of the current output element are passed through "
            },
            {
              "type": "inlineCode",
              "value": "output_coordinates"
            },
            {
              "type": "text",
              "value": ". The callback function must return the coordinates at which the input must be interpolated in "
            },
            {
              "type": "inlineCode",
              "value": "input_coordinates"
            },
            {
              "type": "text",
              "value": ". The rank of the input and output arrays are given by "
            },
            {
              "type": "inlineCode",
              "value": "input_rank"
            },
            {
              "type": "text",
              "value": " and "
            },
            {
              "type": "inlineCode",
              "value": "output_rank"
            },
            {
              "type": "text",
              "value": " respectively. "
            },
            {
              "type": "inlineCode",
              "value": "user_data"
            },
            {
              "type": "text",
              "value": " is the data pointer provided to "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "module",
              "reference": {
                "kind": "api",
                "module": "scipy._lib._ccallback",
                "path": "scipy._lib._ccallback:LowLevelCallable",
                "type": "RefInfo",
                "version": "*"
              },
              "type": "Link",
              "value": "scipy.LowLevelCallable"
            },
            {
              "type": "text",
              "value": " as-is."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "The callback function must return an integer error status that is zero if something went wrong and one otherwise. If an error occurs, you should normally set the Python error status with an informative message before returning, otherwise a default error message is set by the calling function."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "In addition, some other low-level function pointer specifications are accepted, but these are for backward compatibility only and should not be used in new code."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "For complex-valued "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "input",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "input"
            },
            {
              "type": "text",
              "value": ", this function transforms the real and imaginary components independently."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "children": [
                {
                  "type": "text",
                  "value": "versionadded 1.6.0"
                }
              ],
              "type": "admonitionTitle"
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "Complex-valued support added."
                }
              ],
              "type": "paragraph"
            }
          ],
          "kind": "note",
          "type": "admonition"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The input array."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "input",
              "type": "Param",
              "type_": "array_like"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "A callable object that accepts a tuple of length equal to the output array rank, and returns the corresponding input coordinates as a tuple of length equal to the input array rank."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "mapping",
              "type": "Param",
              "type_": "{callable, scipy.LowLevelCallable}"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Shape tuple."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "output_shape",
              "type": "Param",
              "type_": "tuple of ints, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The array in which to place the output, or the dtype of the returned array. By default an array of the same dtype as input will be created."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "output",
              "type": "Param",
              "type_": "array or dtype, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The order of the spline interpolation, default is 3. The order has to be in the range 0-5."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "order",
              "type": "Param",
              "type_": "int, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "mode",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "mode"
                    },
                    {
                      "type": "text",
                      "value": " parameter determines how the input array is extended beyond its boundaries. Default is 'constant'. Behavior for each valid value is as follows (see additional plots and details on "
                    },
                    {
                      "type": "inlineCode",
                      "value": "boundary modes <ndimage-interpolation-modes>"
                    },
                    {
                      "type": "text",
                      "value": "):"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "dd": [
                        {
                          "children": [
                            {
                              "type": "text",
                              "value": "The input is extended by reflecting about the edge of the last     pixel. This mode is also sometimes referred to as half-sample     symmetric."
                            }
                          ],
                          "type": "paragraph"
                        }
                      ],
                      "dt": {
                        "children": [
                          {
                            "type": "text",
                            "value": "'reflect' ("
                          },
                          {
                            "domain": null,
                            "role": null,
                            "type": "Directive",
                            "value": "d c b a | a b c d | d c b a"
                          },
                          {
                            "type": "text",
                            "value": ")"
                          }
                        ],
                        "type": "paragraph"
                      },
                      "type": "DefListItem"
                    },
                    {
                      "dd": [
                        {
                          "children": [
                            {
                              "type": "text",
                              "value": "This is a synonym for 'reflect'."
                            }
                          ],
                          "type": "paragraph"
                        }
                      ],
                      "dt": {
                        "children": [
                          {
                            "type": "text",
                            "value": "'grid-mirror'"
                          }
                        ],
                        "type": "paragraph"
                      },
                      "type": "DefListItem"
                    },
                    {
                      "dd": [
                        {
                          "children": [
                            {
                              "type": "text",
                              "value": "The input is extended by filling all values beyond the edge with     the same constant value, defined by the "
                            },
                            {
                              "anchor": null,
                              "exists": true,
                              "kind": "local",
                              "reference": {
                                "kind": "local",
                                "module": null,
                                "path": "cval",
                                "type": "RefInfo",
                                "version": null
                              },
                              "type": "Link",
                              "value": "cval"
                            },
                            {
                              "type": "text",
                              "value": " parameter. No     interpolation is performed beyond the edges of the input."
                            }
                          ],
                          "type": "paragraph"
                        }
                      ],
                      "dt": {
                        "children": [
                          {
                            "type": "text",
                            "value": "'constant' ("
                          },
                          {
                            "domain": null,
                            "role": null,
                            "type": "Directive",
                            "value": "k k k k | a b c d | k k k k"
                          },
                          {
                            "type": "text",
                            "value": ")"
                          }
                        ],
                        "type": "paragraph"
                      },
                      "type": "DefListItem"
                    },
                    {
                      "dd": [
                        {
                          "children": [
                            {
                              "type": "text",
                              "value": "The input is extended by filling all values beyond the edge with     the same constant value, defined by the "
                            },
                            {
                              "anchor": null,
                              "exists": true,
                              "kind": "local",
                              "reference": {
                                "kind": "local",
                                "module": null,
                                "path": "cval",
                                "type": "RefInfo",
                                "version": null
                              },
                              "type": "Link",
                              "value": "cval"
                            },
                            {
                              "type": "text",
                              "value": " parameter. Interpolation     occurs for samples outside the input's extent  as well."
                            }
                          ],
                          "type": "paragraph"
                        }
                      ],
                      "dt": {
                        "children": [
                          {
                            "type": "text",
                            "value": "'grid-constant' ("
                          },
                          {
                            "domain": null,
                            "role": null,
                            "type": "Directive",
                            "value": "k k k k | a b c d | k k k k"
                          },
                          {
                            "type": "text",
                            "value": ")"
                          }
                        ],
                        "type": "paragraph"
                      },
                      "type": "DefListItem"
                    },
                    {
                      "dd": [
                        {
                          "children": [
                            {
                              "type": "text",
                              "value": "The input is extended by replicating the last pixel."
                            }
                          ],
                          "type": "paragraph"
                        }
                      ],
                      "dt": {
                        "children": [
                          {
                            "type": "text",
                            "value": "'nearest' ("
                          },
                          {
                            "domain": null,
                            "role": null,
                            "type": "Directive",
                            "value": "a a a a | a b c d | d d d d"
                          },
                          {
                            "type": "text",
                            "value": ")"
                          }
                        ],
                        "type": "paragraph"
                      },
                      "type": "DefListItem"
                    },
                    {
                      "dd": [
                        {
                          "children": [
                            {
                              "type": "text",
                              "value": "The input is extended by reflecting about the center of the last     pixel. This mode is also sometimes referred to as whole-sample     symmetric."
                            }
                          ],
                          "type": "paragraph"
                        }
                      ],
                      "dt": {
                        "children": [
                          {
                            "type": "text",
                            "value": "'mirror' ("
                          },
                          {
                            "domain": null,
                            "role": null,
                            "type": "Directive",
                            "value": "d c b | a b c d | c b a"
                          },
                          {
                            "type": "text",
                            "value": ")"
                          }
                        ],
                        "type": "paragraph"
                      },
                      "type": "DefListItem"
                    },
                    {
                      "dd": [
                        {
                          "children": [
                            {
                              "type": "text",
                              "value": "The input is extended by wrapping around to the opposite edge."
                            }
                          ],
                          "type": "paragraph"
                        }
                      ],
                      "dt": {
                        "children": [
                          {
                            "type": "text",
                            "value": "'grid-wrap' ("
                          },
                          {
                            "domain": null,
                            "role": null,
                            "type": "Directive",
                            "value": "a b c d | a b c d | a b c d"
                          },
                          {
                            "type": "text",
                            "value": ")"
                          }
                        ],
                        "type": "paragraph"
                      },
                      "type": "DefListItem"
                    },
                    {
                      "dd": [
                        {
                          "children": [
                            {
                              "type": "text",
                              "value": "The input is extended by wrapping around to the opposite edge, but in a     way such that the last point and initial point exactly overlap. In this     case it is not well defined which sample will be chosen at the point of     overlap."
                            }
                          ],
                          "type": "paragraph"
                        }
                      ],
                      "dt": {
                        "children": [
                          {
                            "type": "text",
                            "value": "'wrap' ("
                          },
                          {
                            "domain": null,
                            "role": null,
                            "type": "Directive",
                            "value": "d b c d | a b c d | b c a b"
                          },
                          {
                            "type": "text",
                            "value": ")"
                          }
                        ],
                        "type": "paragraph"
                      },
                      "type": "DefListItem"
                    }
                  ],
                  "type": "DefList"
                }
              ],
              "param": "mode",
              "type": "Param",
              "type_": "{'reflect', 'grid-mirror', 'constant', 'grid-constant', 'nearest',            'mirror', 'grid-wrap', 'wrap'}, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Value to fill past edges of input if "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "mode",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "mode"
                    },
                    {
                      "type": "text",
                      "value": " is 'constant'. Default is 0.0."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "cval",
              "type": "Param",
              "type_": "scalar, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Determines if the input array is prefiltered with "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "spline_filter"
                    },
                    {
                      "type": "text",
                      "value": " before interpolation. The default is True, which will create a temporary "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "float64"
                    },
                    {
                      "type": "text",
                      "value": " array of filtered values if "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "order > 1"
                    },
                    {
                      "type": "text",
                      "value": ". If setting this to False, the output will be slightly blurred if "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "order > 1"
                    },
                    {
                      "type": "text",
                      "value": ", unless the input is prefiltered, i.e. it is the result of calling "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "spline_filter"
                    },
                    {
                      "type": "text",
                      "value": " on the original input."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "prefilter",
              "type": "Param",
              "type_": "bool, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Extra arguments passed to "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "mapping",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "mapping"
                    },
                    {
                      "type": "text",
                      "value": "."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "extra_arguments",
              "type": "Param",
              "type_": "tuple, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Extra keywords passed to "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "mapping",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "mapping"
                    },
                    {
                      "type": "text",
                      "value": "."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "extra_keywords",
              "type": "Param",
              "type_": "dict, optional"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The filtered input."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "output",
              "type": "Param",
              "type_": "ndarray"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Apply an arbitrary geometric transform."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [
      {
        "type": "code",
        "value": "import numpy as np\nfrom scipy.ndimage import geometric_transform\na = np.arange(12.).reshape((4, 3))\ndef shift_func(output_coords):\n    return (output_coords[0] - 0.5, output_coords[1] - 0.5)"
      },
      {
        "type": "code",
        "value": "geometric_transform(a, shift_func)"
      },
      {
        "type": "code",
        "value": "b = [1, 2, 3, 4, 5]\ndef shift_func(output_coords):\n    return (output_coords[0] - 3,)"
      },
      {
        "type": "code",
        "value": "geometric_transform(b, shift_func, mode='constant')"
      },
      {
        "type": "code",
        "value": "geometric_transform(b, shift_func, mode='nearest')"
      },
      {
        "type": "code",
        "value": "geometric_transform(b, shift_func, mode='reflect')"
      },
      {
        "type": "code",
        "value": "geometric_transform(b, shift_func, mode='wrap')"
      }
    ],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/scipy/ndimage/_interpolation.py",
  "item_line": 214,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns",
    "See Also",
    "Notes",
    "Examples"
  ],
  "references": null,
  "see_also": [
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "module",
          "module": "scipy",
          "path": "scipy.ndimage._interpolation:map_coordinates",
          "type": "RefInfo",
          "version": "1.10.1"
        },
        "type": "Link",
        "value": "map_coordinates"
      },
      "type": null
    },
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "module",
          "module": "scipy",
          "path": "scipy.ndimage._interpolation:affine_transform",
          "type": "RefInfo",
          "version": "1.10.1"
        },
        "type": "Link",
        "value": "affine_transform"
      },
      "type": null
    },
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "to-resolve",
          "module": "current-module",
          "path": "spline_filter1d",
          "type": "RefInfo",
          "version": "current-version"
        },
        "type": "Link",
        "value": "spline_filter1d"
      },
      "type": null
    }
  ],
  "signature": {
    "type": "Signature",
    "value": "(input, mapping, output_shape=None, output=None, order=3, mode='constant', cval=0.0, prefilter=True, extra_arguments=(), extra_keywords={})"
  },
  "type": "DocBlob"
}