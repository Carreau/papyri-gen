{
  "aliases": [
    "scipy.ndimage.binary_dilation"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Dilation  is a mathematical morphology operation  that uses a structuring element for expanding the shapes in an image. The binary dilation of an image by a structuring element is the locus of the points covered by the structuring element, when its center lies within the non-zero points of the image."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Binary array_like to be dilated. Non-zero (True) elements form the subset to be dilated."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "input",
              "type": "Param",
              "type_": "array_like"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Structuring element used for the dilation. Non-zero elements are considered True. If no structuring element is provided an element is generated with a square connectivity equal to one."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "structure",
              "type": "Param",
              "type_": "array_like, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The dilation is repeated "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "iterations",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "iterations"
                    },
                    {
                      "type": "text",
                      "value": " times (one, by default). If iterations is less than 1, the dilation is repeated until the result does not change anymore. Only an integer of iterations is accepted."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "iterations",
              "type": "Param",
              "type_": "int, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "If a mask is given, only those elements with a True value at the corresponding mask element are modified at each iteration."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "mask",
              "type": "Param",
              "type_": "array_like, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Array of the same shape as input, into which the output is placed. By default, a new array is created."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "output",
              "type": "Param",
              "type_": "ndarray, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Value at the border in the output array."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "border_value",
              "type": "Param",
              "type_": "int (cast to 0 or 1), optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Placement of the filter, by default 0."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "origin",
              "type": "Param",
              "type_": "int or tuple of ints, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Memory condition: if False, only the pixels whose value was changed in the last iteration are tracked as candidates to be updated (dilated) in the current iteration; if True all pixels are considered as candidates for dilation, regardless of what happened in the previous iteration. False by default."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "brute_force",
              "type": "Param",
              "type_": "boolean, optional"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Dilation of the input by the structuring element."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "binary_dilation",
              "type": "Param",
              "type_": "ndarray of bools"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Multidimensional binary dilation with the given structuring element."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [
      {
        "type": "code",
        "value": "from scipy import ndimage\nimport numpy as np\na = np.zeros((5, 5))\na[2, 2] = 1\na"
      },
      {
        "type": "code",
        "value": "ndimage.binary_dilation(a)"
      },
      {
        "type": "code",
        "value": "ndimage.binary_dilation(a).astype(a.dtype)"
      },
      {
        "type": "code",
        "value": "# 3x3 structuring element with connectivity 1, used by default\nstruct1 = ndimage.generate_binary_structure(2, 1)\nstruct1"
      },
      {
        "type": "code",
        "value": "# 3x3 structuring element with connectivity 2\nstruct2 = ndimage.generate_binary_structure(2, 2)\nstruct2"
      },
      {
        "type": "code",
        "value": "ndimage.binary_dilation(a, structure=struct1).astype(a.dtype)"
      },
      {
        "type": "code",
        "value": "ndimage.binary_dilation(a, structure=struct2).astype(a.dtype)"
      },
      {
        "type": "code",
        "value": "ndimage.binary_dilation(a, structure=struct1,\\\niterations=2).astype(a.dtype)"
      }
    ],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/scipy/ndimage/_morphology.py",
  "item_line": 391,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Parameters",
    "Returns",
    "See Also",
    "Notes",
    "References",
    "Examples"
  ],
  "references": null,
  "see_also": [
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "module",
          "module": "scipy",
          "path": "scipy.ndimage._morphology:grey_dilation",
          "type": "RefInfo",
          "version": "1.10.1"
        },
        "type": "Link",
        "value": "grey_dilation"
      },
      "type": null
    },
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "to-resolve",
          "module": "current-module",
          "path": "binary_erosion",
          "type": "RefInfo",
          "version": "current-version"
        },
        "type": "Link",
        "value": "binary_erosion"
      },
      "type": null
    },
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "module",
          "module": "scipy",
          "path": "scipy.ndimage._morphology:binary_closing",
          "type": "RefInfo",
          "version": "1.10.1"
        },
        "type": "Link",
        "value": "binary_closing"
      },
      "type": null
    },
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "module",
          "module": "scipy",
          "path": "scipy.ndimage._morphology:binary_opening",
          "type": "RefInfo",
          "version": "1.10.1"
        },
        "type": "Link",
        "value": "binary_opening"
      },
      "type": null
    },
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "module",
          "module": "scipy",
          "path": "scipy.ndimage._morphology:generate_binary_structure",
          "type": "RefInfo",
          "version": "1.10.1"
        },
        "type": "Link",
        "value": "generate_binary_structure"
      },
      "type": null
    }
  ],
  "signature": {
    "type": "Signature",
    "value": "(input, structure=None, iterations=1, mask=None, output=None, border_value=0, origin=0, brute_force=False)"
  },
  "type": "DocBlob"
}