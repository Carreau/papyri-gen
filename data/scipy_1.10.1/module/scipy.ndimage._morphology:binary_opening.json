{
  "aliases": [
    "scipy.ndimage.binary_opening"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "The "
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "opening"
                }
              ],
              "type": "emphasis"
            },
            {
              "type": "text",
              "value": " of an input image by a structuring element is the "
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "dilation"
                }
              ],
              "type": "emphasis"
            },
            {
              "type": "text",
              "value": " of the "
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "erosion"
                }
              ],
              "type": "emphasis"
            },
            {
              "type": "text",
              "value": " of the image by the structuring element."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [
        {
          "children": [
            {
              "children": [
                {
                  "type": "text",
                  "value": "Opening"
                }
              ],
              "type": "emphasis"
            },
            {
              "type": "text",
              "value": "  is a mathematical morphology operation  that consists in the succession of an erosion and a dilation of the input with the same structuring element. Opening, therefore, removes objects smaller than the structuring element."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Together with "
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "closing"
                }
              ],
              "type": "emphasis"
            },
            {
              "type": "text",
              "value": " ("
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "module",
              "reference": {
                "kind": "module",
                "module": "scipy",
                "path": "scipy.ndimage._morphology:binary_closing",
                "type": "RefInfo",
                "version": "1.10.1"
              },
              "type": "Link",
              "value": "binary_closing"
            },
            {
              "type": "text",
              "value": "), opening can be used for noise removal."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Binary array_like to be opened. Non-zero (True) elements form the subset to be opened."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "input",
              "type": "Param",
              "type_": "array_like"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Structuring element used for the opening. Non-zero elements are considered True. If no structuring element is provided an element is generated with a square connectivity equal to one (i.e., only nearest neighbors are connected to the center, diagonally-connected elements are not considered neighbors)."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "structure",
              "type": "Param",
              "type_": "array_like, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The erosion step of the opening, then the dilation step are each repeated "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "iterations",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "iterations"
                    },
                    {
                      "type": "text",
                      "value": " times (one, by default). If "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "iterations",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "iterations"
                    },
                    {
                      "type": "text",
                      "value": " is less than 1, each operation is repeated until the result does not change anymore. Only an integer of iterations is accepted."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "iterations",
              "type": "Param",
              "type_": "int, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Array of the same shape as input, into which the output is placed. By default, a new array is created."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "output",
              "type": "Param",
              "type_": "ndarray, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Placement of the filter, by default 0."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "origin",
              "type": "Param",
              "type_": "int or tuple of ints, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "If a mask is given, only those elements with a True value at the corresponding mask element are modified at each iteration."
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "versionadded 1.1.0"
                        }
                      ],
                      "type": "admonitionTitle"
                    }
                  ],
                  "kind": "note",
                  "type": "admonition"
                }
              ],
              "param": "mask",
              "type": "Param",
              "type_": "array_like, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Value at the border in the output array."
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "versionadded 1.1.0"
                        }
                      ],
                      "type": "admonitionTitle"
                    }
                  ],
                  "kind": "note",
                  "type": "admonition"
                }
              ],
              "param": "border_value",
              "type": "Param",
              "type_": "int (cast to 0 or 1), optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Memory condition: if False, only the pixels whose value was changed in the last iteration are tracked as candidates to be updated in the current iteration; if true all pixels are considered as candidates for update, regardless of what happened in the previous iteration. False by default."
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "versionadded 1.1.0"
                        }
                      ],
                      "type": "admonitionTitle"
                    }
                  ],
                  "kind": "note",
                  "type": "admonition"
                }
              ],
              "param": "brute_force",
              "type": "Param",
              "type_": "boolean, optional"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Opening of the input by the structuring element."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "binary_opening",
              "type": "Param",
              "type_": "ndarray of bools"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Multidimensional binary opening with the given structuring element."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [
      {
        "type": "code",
        "value": "from scipy import ndimage\nimport numpy as np\na = np.zeros((5,5), dtype=int)\na[1:4, 1:4] = 1; a[4, 4] = 1\na"
      },
      {
        "type": "code",
        "value": "# Opening removes small objects\nndimage.binary_opening(a, structure=np.ones((3,3))).astype(int)"
      },
      {
        "type": "code",
        "value": "# Opening can also smooth corners\nndimage.binary_opening(a).astype(int)"
      },
      {
        "type": "code",
        "value": "# Opening is the dilation of the erosion of the input\nndimage.binary_erosion(a).astype(int)"
      },
      {
        "type": "code",
        "value": "ndimage.binary_dilation(ndimage.binary_erosion(a)).astype(int)"
      }
    ],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/scipy/ndimage/_morphology.py",
  "item_line": 524,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns",
    "See Also",
    "Notes",
    "References",
    "Examples"
  ],
  "references": null,
  "see_also": [
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "module",
          "module": "scipy",
          "path": "scipy.ndimage._morphology:grey_opening",
          "type": "RefInfo",
          "version": "1.10.1"
        },
        "type": "Link",
        "value": "grey_opening"
      },
      "type": null
    },
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "module",
          "module": "scipy",
          "path": "scipy.ndimage._morphology:binary_closing",
          "type": "RefInfo",
          "version": "1.10.1"
        },
        "type": "Link",
        "value": "binary_closing"
      },
      "type": null
    },
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "to-resolve",
          "module": "current-module",
          "path": "binary_erosion",
          "type": "RefInfo",
          "version": "current-version"
        },
        "type": "Link",
        "value": "binary_erosion"
      },
      "type": null
    },
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "module",
          "module": "scipy",
          "path": "scipy.ndimage._morphology:binary_dilation",
          "type": "RefInfo",
          "version": "1.10.1"
        },
        "type": "Link",
        "value": "binary_dilation"
      },
      "type": null
    },
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "module",
          "module": "scipy",
          "path": "scipy.ndimage._morphology:generate_binary_structure",
          "type": "RefInfo",
          "version": "1.10.1"
        },
        "type": "Link",
        "value": "generate_binary_structure"
      },
      "type": null
    }
  ],
  "signature": {
    "type": "Signature",
    "value": "(input, structure=None, iterations=1, output=None, origin=0, mask=None, border_value=0, brute_force=False)"
  },
  "type": "DocBlob"
}