{
  "aliases": [
    "scipy.optimize.basinhopping"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Basin-hopping is a two-phase method that combines a global stepping algorithm with local minimization at each step. Designed to mimic the natural process of energy minimization of clusters of atoms, it works well for similar problems with \"funnel-like, but rugged\" energy landscapes ."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "As the step-taking, step acceptance, and minimization methods are all customizable, this function can also be used to implement other two-phase methods."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Basin-hopping is a stochastic algorithm which attempts to find the global minimum of a smooth scalar function of one or more variables    . The algorithm in its current form was described by David Wales and Jonathan Doye  http://www-wales.ch.cam.ac.uk/."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "The algorithm is iterative with each cycle composed of the following features"
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "random perturbation of the coordinates"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "local minimization"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "accept or reject the new coordinates based on the minimized function    value"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            }
          ],
          "ordered": true,
          "spread": false,
          "start": 1,
          "type": "list"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "The acceptance test used here is the Metropolis criterion of standard Monte Carlo algorithms, although there are many other possibilities ."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "This global minimization method has been shown to be extremely efficient for a wide variety of problems in physics and chemistry. It is particularly useful when the function has many minima separated by large barriers. See the "
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "Cambridge Cluster Database"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://www-wales.ch.cam.ac.uk/CCD.html"
            },
            {
              "type": "text",
              "value": " for databases of molecular systems that have been optimized primarily using basin-hopping. This database includes minimization problems exceeding 300 degrees of freedom."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "See the free software program "
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "GMIN"
                }
              ],
              "title": "",
              "type": "link",
              "url": "https://www-wales.ch.cam.ac.uk/GMIN"
            },
            {
              "type": "text",
              "value": " for a Fortran implementation of basin-hopping. This implementation has many variations of the procedure described above, including more advanced step taking algorithms and alternate acceptance criterion."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "For stochastic global optimization there is no way to determine if the true global minimum has actually been found. Instead, as a consistency check, the algorithm can be run from a number of different random starting points to ensure the lowest minimum found in each example has converged to the global minimum. For this reason, "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "basinhopping"
            },
            {
              "type": "text",
              "value": " will by default simply run for the number of iterations "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "niter",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "niter"
            },
            {
              "type": "text",
              "value": " and return the lowest minimum found. It is left to the user to ensure that this is in fact the global minimum."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Choosing "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "stepsize",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "stepsize"
            },
            {
              "type": "text",
              "value": ":  This is a crucial parameter in "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "basinhopping"
            },
            {
              "type": "text",
              "value": " and depends on the problem being solved. The step is chosen uniformly in the region from x0-stepsize to x0+stepsize, in each dimension. Ideally, it should be comparable to the typical separation (in argument values) between local minima of the function being optimized. "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "basinhopping"
            },
            {
              "type": "text",
              "value": " will, by default, adjust "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "stepsize",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "stepsize"
            },
            {
              "type": "text",
              "value": " to find an optimal value, but this may take many iterations. You will get quicker results if you set a sensible initial value for "
            },
            {
              "type": "inlineCode",
              "value": "stepsize"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Choosing "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "T",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "T"
            },
            {
              "type": "text",
              "value": ": The parameter "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "T",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "T"
            },
            {
              "type": "text",
              "value": " is the \"temperature\" used in the Metropolis criterion. Basinhopping steps are always accepted if "
            },
            {
              "type": "inlineCode",
              "value": "func(xnew) < func(xold)"
            },
            {
              "type": "text",
              "value": ". Otherwise, they are accepted with probability      "
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": "exp( -(func(xnew) - func(xold)) / T )"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "So, for best results, "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "T",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "T"
            },
            {
              "type": "text",
              "value": " should to be comparable to the typical difference (in function values) between local minima. (The height of \"walls\" between local minima is irrelevant.)"
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "If "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "T",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "T"
            },
            {
              "type": "text",
              "value": " is 0, the algorithm becomes Monotonic Basin-Hopping, in which all steps that increase energy are rejected."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "children": [
                {
                  "type": "text",
                  "value": "versionadded 0.12.0"
                }
              ],
              "type": "admonitionTitle"
            }
          ],
          "kind": "note",
          "type": "admonition"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Function to be optimized.  "
                    },
                    {
                      "type": "inlineCode",
                      "value": "args"
                    },
                    {
                      "type": "text",
                      "value": " can be passed as an optional item in the dict "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "minimizer_kwargs",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "minimizer_kwargs"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "func",
              "type": "Param",
              "type_": "callable ``f(x, *args)``"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Initial guess."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "x0",
              "type": "Param",
              "type_": "array_like"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The number of basin-hopping iterations. There will be a total of "
                    },
                    {
                      "type": "inlineCode",
                      "value": "niter + 1"
                    },
                    {
                      "type": "text",
                      "value": " runs of the local minimizer."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "niter",
              "type": "Param",
              "type_": "integer, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The \"temperature\" parameter for the acceptance or rejection criterion. Higher \"temperatures\" mean that larger jumps in function value will be accepted.  For best results "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "T",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "T"
                    },
                    {
                      "type": "text",
                      "value": " should be comparable to the separation (in function value) between local minima."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "T",
              "type": "Param",
              "type_": "float, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Maximum step size for use in the random displacement."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "stepsize",
              "type": "Param",
              "type_": "float, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Extra keyword arguments to be passed to the local minimizer "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "module",
                      "reference": {
                        "kind": "api",
                        "module": "scipy.optimize._minimize",
                        "path": "scipy.optimize._minimize:minimize",
                        "type": "RefInfo",
                        "version": "*"
                      },
                      "type": "Link",
                      "value": "scipy.optimize.minimize"
                    },
                    {
                      "type": "text",
                      "value": " Some important options could be:"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "children": [
                        {
                          "dd": [
                            {
                              "children": [
                                {
                                  "type": "text",
                                  "value": "method"
                                }
                              ],
                              "type": "paragraph"
                            }
                          ],
                          "dt": {
                            "children": [
                              {
                                "type": "text",
                                "value": "method"
                              }
                            ],
                            "type": "paragraph"
                          },
                          "type": "DefListItem"
                        },
                        {
                          "dd": [
                            {
                              "children": [
                                {
                                  "type": "text",
                                  "value": "args"
                                }
                              ],
                              "type": "paragraph"
                            }
                          ],
                          "dt": {
                            "children": [
                              {
                                "type": "text",
                                "value": "args"
                              }
                            ],
                            "type": "paragraph"
                          },
                          "type": "DefListItem"
                        }
                      ],
                      "type": "DefList"
                    }
                  ],
                  "type": "blockquote"
                }
              ],
              "param": "minimizer_kwargs",
              "type": "Param",
              "type_": "dict, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Replace the default step-taking routine with this routine. The default step-taking routine is a random displacement of the coordinates, but other step-taking algorithms may be better for some systems. "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "take_step",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "take_step"
                    },
                    {
                      "type": "text",
                      "value": " can optionally have the attribute "
                    },
                    {
                      "type": "inlineCode",
                      "value": "take_step.stepsize"
                    },
                    {
                      "type": "text",
                      "value": ". If this attribute exists, then "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "basinhopping"
                    },
                    {
                      "type": "text",
                      "value": " will adjust "
                    },
                    {
                      "type": "inlineCode",
                      "value": "take_step.stepsize"
                    },
                    {
                      "type": "text",
                      "value": " in order to try to optimize the global minimum search."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "take_step",
              "type": "Param",
              "type_": "callable ``take_step(x)``, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Define a test which will be used to judge whether to accept the step. This will be used in addition to the Metropolis test based on \"temperature\" "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "T",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "T"
                    },
                    {
                      "type": "text",
                      "value": ". The acceptable return values are True, False, or "
                    },
                    {
                      "type": "inlineCode",
                      "value": "\"force accept\""
                    },
                    {
                      "type": "text",
                      "value": ". If any of the tests return False then the step is rejected. If the latter, then this will override any other tests in order to accept the step. This can be used, for example, to forcefully escape from a local minimum that "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "basinhopping"
                    },
                    {
                      "type": "text",
                      "value": " is trapped in."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "accept_test",
              "type": "Param",
              "type_": "callable, ``accept_test(f_new=f_new, x_new=x_new, f_old=fold, x_old=x_old)``, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "A callback function which will be called for all minima found. "
                    },
                    {
                      "type": "inlineCode",
                      "value": "x"
                    },
                    {
                      "type": "text",
                      "value": " and "
                    },
                    {
                      "type": "inlineCode",
                      "value": "f"
                    },
                    {
                      "type": "text",
                      "value": " are the coordinates and function value of the trial minimum, and "
                    },
                    {
                      "type": "inlineCode",
                      "value": "accept"
                    },
                    {
                      "type": "text",
                      "value": " is whether that minimum was accepted. This can be used, for example, to save the lowest N minima found. Also, "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "callback",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "callback"
                    },
                    {
                      "type": "text",
                      "value": " can be used to specify a user defined stop criterion by optionally returning True to stop the "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "basinhopping"
                    },
                    {
                      "type": "text",
                      "value": " routine."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "callback",
              "type": "Param",
              "type_": "callable, ``callback(x, f, accept)``, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "interval for how often to update the "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "stepsize",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "stepsize"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "interval",
              "type": "Param",
              "type_": "integer, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Set to True to print status messages"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "disp",
              "type": "Param",
              "type_": "bool, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Stop the run if the global minimum candidate remains the same for this number of iterations."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "niter_success",
              "type": "Param",
              "type_": "integer, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "If "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "seed",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "seed"
                    },
                    {
                      "type": "text",
                      "value": " is None (or "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "np.random"
                    },
                    {
                      "type": "text",
                      "value": "), the "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "module",
                      "reference": {
                        "kind": "api",
                        "module": "numpy.random.mtrand",
                        "path": "numpy.random.mtrand:RandomState",
                        "type": "RefInfo",
                        "version": "*"
                      },
                      "type": "Link",
                      "value": "numpy.random.RandomState"
                    },
                    {
                      "type": "text",
                      "value": " singleton is used. If "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "seed",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "seed"
                    },
                    {
                      "type": "text",
                      "value": " is an int, a new "
                    },
                    {
                      "type": "inlineCode",
                      "value": "RandomState"
                    },
                    {
                      "type": "text",
                      "value": " instance is used, seeded with "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "seed",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "seed"
                    },
                    {
                      "type": "text",
                      "value": ". If "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "seed",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "seed"
                    },
                    {
                      "type": "text",
                      "value": " is already a "
                    },
                    {
                      "type": "inlineCode",
                      "value": "Generator"
                    },
                    {
                      "type": "text",
                      "value": " or "
                    },
                    {
                      "type": "inlineCode",
                      "value": "RandomState"
                    },
                    {
                      "type": "text",
                      "value": " instance then that instance is used. Specify "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "seed",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "seed"
                    },
                    {
                      "type": "text",
                      "value": " for repeatable minimizations. The random numbers generated with this seed only affect the default Metropolis "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "accept_test",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "accept_test"
                    },
                    {
                      "type": "text",
                      "value": " and the default "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "take_step",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "take_step"
                    },
                    {
                      "type": "text",
                      "value": ". If you supply your own "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "take_step",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "take_step"
                    },
                    {
                      "type": "text",
                      "value": " and "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "accept_test",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "accept_test"
                    },
                    {
                      "type": "text",
                      "value": ", and these functions use random number generation, then those functions are responsible for the state of their random number generator."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "seed",
              "type": "Param",
              "type_": "{None, int, `numpy.random.Generator`, `numpy.random.RandomState`}, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The target acceptance rate that is used to adjust the "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "stepsize",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "stepsize"
                    },
                    {
                      "type": "text",
                      "value": ". If the current acceptance rate is greater than the target, then the "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "stepsize",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "stepsize"
                    },
                    {
                      "type": "text",
                      "value": " is increased. Otherwise, it is decreased. Range is (0, 1). Default is 0.5."
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "versionadded 1.8.0"
                        }
                      ],
                      "type": "admonitionTitle"
                    }
                  ],
                  "kind": "note",
                  "type": "admonition"
                }
              ],
              "param": "target_accept_rate",
              "type": "Param",
              "type_": "float, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "stepsize",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "stepsize"
                    },
                    {
                      "type": "text",
                      "value": " is multiplied or divided by this stepwise factor upon each update. Range is (0, 1). Default is 0.9."
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "versionadded 1.8.0"
                        }
                      ],
                      "type": "admonitionTitle"
                    }
                  ],
                  "kind": "note",
                  "type": "admonition"
                }
              ],
              "param": "stepwise_factor",
              "type": "Param",
              "type_": "float, optional"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The optimization result represented as a "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "OptimizeResult"
                    },
                    {
                      "type": "text",
                      "value": " object. Important attributes are: "
                    },
                    {
                      "type": "inlineCode",
                      "value": "x"
                    },
                    {
                      "type": "text",
                      "value": " the solution array, "
                    },
                    {
                      "type": "inlineCode",
                      "value": "fun"
                    },
                    {
                      "type": "text",
                      "value": " the value of the function at the solution, and "
                    },
                    {
                      "type": "inlineCode",
                      "value": "message"
                    },
                    {
                      "type": "text",
                      "value": " which describes the cause of the termination. The "
                    },
                    {
                      "type": "inlineCode",
                      "value": "OptimizeResult"
                    },
                    {
                      "type": "text",
                      "value": " object returned by the selected minimizer at the lowest minimum is also contained within this object and can be accessed through the "
                    },
                    {
                      "type": "inlineCode",
                      "value": "lowest_optimization_result"
                    },
                    {
                      "type": "text",
                      "value": " attribute.  See "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "OptimizeResult"
                    },
                    {
                      "type": "text",
                      "value": " for a description of other attributes."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "res",
              "type": "Param",
              "type_": "OptimizeResult"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Find the global minimum of a function using the basin-hopping algorithm."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [
      {
        "type": "text",
        "value": "The following example is a 1-D minimization problem, with many\nlocal minima superimposed on a parabola."
      },
      {
        "type": "code",
        "value": "import numpy as np\nfrom scipy.optimize import basinhopping\nfunc = lambda x: np.cos(14.5 * x - 0.3) + (x + 0.2) * x\nx0 = [1.]"
      },
      {
        "type": "text",
        "value": "Basinhopping, internally, uses a local minimization algorithm. We will use\nthe parameter `minimizer_kwargs` to tell basinhopping which algorithm to\nuse and how to set up that minimizer. This parameter will be passed to\n`scipy.optimize.minimize`."
      },
      {
        "type": "code",
        "value": "minimizer_kwargs = {\"method\": \"BFGS\"}\nret = basinhopping(func, x0, minimizer_kwargs=minimizer_kwargs,\n                   niter=200)\nprint(\"global minimum: x = %.4f, f(x) = %.4f\" % (ret.x, ret.fun))"
      },
      {
        "type": "text",
        "value": "Next consider a 2-D minimization problem. Also, this time, we\nwill use gradient information to significantly speed up the search."
      },
      {
        "type": "code",
        "value": "def func2d(x):\n    f = np.cos(14.5 * x[0] - 0.3) + (x[1] + 0.2) * x[1] + (x[0] +\n                                                           0.2) * x[0]\n    df = np.zeros(2)\n    df[0] = -14.5 * np.sin(14.5 * x[0] - 0.3) + 2. * x[0] + 0.2\n    df[1] = 2. * x[1] + 0.2\n    return f, df"
      },
      {
        "type": "text",
        "value": "We'll also use a different local minimization algorithm. Also, we must tell\nthe minimizer that our function returns both energy and gradient (Jacobian)."
      },
      {
        "type": "code",
        "value": "minimizer_kwargs = {\"method\":\"L-BFGS-B\", \"jac\":True}\nx0 = [1.0, 1.0]\nret = basinhopping(func2d, x0, minimizer_kwargs=minimizer_kwargs,\n                   niter=200)\nprint(\"global minimum: x = [%.4f, %.4f], f(x) = %.4f\" % (ret.x[0],\n                                                          ret.x[1],\n                                                          ret.fun))"
      },
      {
        "type": "text",
        "value": "Here is an example using a custom step-taking routine. Imagine you want\nthe first coordinate to take larger steps than the rest of the coordinates.\nThis can be implemented like so:"
      },
      {
        "type": "code",
        "value": "class MyTakeStep:\n   def __init__(self, stepsize=0.5):\n       self.stepsize = stepsize\n       self.rng = np.random.default_rng()\n   def __call__(self, x):\n       s = self.stepsize\n       x[0] += self.rng.uniform(-2.*s, 2.*s)\n       x[1:] += self.rng.uniform(-s, s, x[1:].shape)\n       return x"
      },
      {
        "type": "text",
        "value": "Since ``MyTakeStep.stepsize`` exists basinhopping will adjust the magnitude\nof `stepsize` to optimize the search. We'll use the same 2-D function as\nbefore"
      },
      {
        "type": "code",
        "value": "mytakestep = MyTakeStep()\nret = basinhopping(func2d, x0, minimizer_kwargs=minimizer_kwargs,\n                   niter=200, take_step=mytakestep)\nprint(\"global minimum: x = [%.4f, %.4f], f(x) = %.4f\" % (ret.x[0],\n                                                          ret.x[1],\n                                                          ret.fun))"
      },
      {
        "type": "text",
        "value": "Now, let's do an example using a custom callback function which prints the\nvalue of every minimum found"
      },
      {
        "type": "code",
        "value": "def print_fun(x, f, accepted):\n        print(\"at minimum %.4f accepted %d\" % (f, int(accepted)))"
      },
      {
        "type": "text",
        "value": "We'll run it for only 10 basinhopping steps this time."
      },
      {
        "type": "code",
        "value": "rng = np.random.default_rng()\nret = basinhopping(func2d, x0, minimizer_kwargs=minimizer_kwargs,\n                   niter=10, callback=print_fun, seed=rng)"
      },
      {
        "type": "text",
        "value": "The minimum at -1.0109 is actually the global minimum, found already on the\n8th iteration."
      }
    ],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/scipy/optimize/_basinhopping.py",
  "item_line": 350,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns",
    "See Also",
    "Notes",
    "References",
    "Examples"
  ],
  "references": null,
  "see_also": [
    {
      "descriptions": [
        {
          "children": [
            {
              "type": "text",
              "value": "The local minimization function called once for each basinhopping step. "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "minimizer_kwargs"
            },
            {
              "type": "text",
              "value": " is passed to this routine."
            }
          ],
          "type": "paragraph"
        }
      ],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "module",
          "module": "scipy",
          "path": "scipy.optimize._shgo:SHGO.minimize",
          "type": "RefInfo",
          "version": "1.10.1"
        },
        "type": "Link",
        "value": "minimize"
      },
      "type": null
    }
  ],
  "signature": {
    "type": "Signature",
    "value": "(func, x0, niter=100, T=1.0, stepsize=0.5, minimizer_kwargs=None, take_step=None, accept_test=None, callback=None, interval=50, disp=False, niter_success=None, seed=None, *, target_accept_rate=0.5, stepwise_factor=0.9)"
  },
  "type": "DocBlob"
}