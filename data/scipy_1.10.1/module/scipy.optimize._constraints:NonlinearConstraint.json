{
  "aliases": [
    "scipy.optimize.NonlinearConstraint"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "The constraint has the general inequality form      "
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": "lb <= fun(x) <= ub"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Here the vector of independent variables x is passed as ndarray of shape (n,) and "
            },
            {
              "type": "inlineCode",
              "value": "fun"
            },
            {
              "type": "text",
              "value": " returns a vector with m components."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "It is possible to use equal bounds to represent an equality constraint or infinite bounds to represent a one-sided constraint."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Finite difference schemes {'2-point', '3-point', 'cs'} may be used for approximating either the Jacobian or the Hessian. We, however, do not allow its use for approximating both simultaneously. Hence whenever the Jacobian is estimated via finite-differences, we require the Hessian to be estimated using one of the quasi-Newton strategies."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "The scheme 'cs' is potentially the most accurate, but requires the function to correctly handles complex inputs and be analytically continuable to the complex plane. The scheme '3-point' is more accurate than '2-point' but requires twice as many operations."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The function defining the constraint. The signature is "
                    },
                    {
                      "type": "inlineCode",
                      "value": "fun(x) -> array_like, shape (m,)"
                    },
                    {
                      "type": "text",
                      "value": "."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "fun",
              "type": "Param",
              "type_": "callable"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Lower and upper bounds on the constraint. Each array must have the shape (m,) or be a scalar, in the latter case a bound will be the same for all components of the constraint. Use "
                    },
                    {
                      "type": "inlineCode",
                      "value": "np.inf"
                    },
                    {
                      "type": "text",
                      "value": " with an appropriate sign to specify a one-sided constraint. Set components of "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "lb",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "lb"
                    },
                    {
                      "type": "text",
                      "value": " and "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "ub",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "ub"
                    },
                    {
                      "type": "text",
                      "value": " equal to represent an equality constraint. Note that you can mix constraints of different types: interval, one-sided or equality, by setting different components of "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "lb",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "lb"
                    },
                    {
                      "type": "text",
                      "value": " and "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "ub",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "ub"
                    },
                    {
                      "type": "text",
                      "value": " as  necessary."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "lb, ub",
              "type": "Param",
              "type_": "array_like"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Method of computing the Jacobian matrix (an m-by-n matrix, where element (i, j) is the partial derivative of f[i] with respect to x[j]).  The keywords {'2-point', '3-point', 'cs'} select a finite difference scheme for the numerical estimation. A callable must have the following signature: "
                    },
                    {
                      "type": "inlineCode",
                      "value": "jac(x) -> {ndarray, sparse matrix}, shape (m, n)"
                    },
                    {
                      "type": "text",
                      "value": ". Default is '2-point'."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "jac",
              "type": "Param",
              "type_": "{callable,  '2-point', '3-point', 'cs'}, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Method for computing the Hessian matrix. The keywords {'2-point', '3-point', 'cs'} select a finite difference scheme for numerical  estimation.  Alternatively, objects implementing "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "HessianUpdateStrategy"
                    },
                    {
                      "type": "text",
                      "value": " interface can be used to approximate the Hessian. Currently available implementations are:"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "children": [
                        {
                          "children": [
                            {
                              "children": [
                                {
                                  "domain": null,
                                  "role": null,
                                  "type": "Directive",
                                  "value": "BFGS"
                                },
                                {
                                  "type": "text",
                                  "value": " (default option)"
                                }
                              ],
                              "type": "paragraph"
                            }
                          ],
                          "spread": false,
                          "type": "listItem"
                        },
                        {
                          "children": [
                            {
                              "children": [
                                {
                                  "domain": null,
                                  "role": null,
                                  "type": "Directive",
                                  "value": "SR1"
                                }
                              ],
                              "type": "paragraph"
                            }
                          ],
                          "spread": false,
                          "type": "listItem"
                        }
                      ],
                      "ordered": false,
                      "spread": false,
                      "start": 1,
                      "type": "list"
                    }
                  ],
                  "type": "blockquote"
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "A callable must return the Hessian matrix of "
                    },
                    {
                      "type": "inlineCode",
                      "value": "dot(fun, v)"
                    },
                    {
                      "type": "text",
                      "value": " and must have the following signature: "
                    },
                    {
                      "type": "inlineCode",
                      "value": "hess(x, v) -> {LinearOperator, sparse matrix, array_like}, shape (n, n)"
                    },
                    {
                      "type": "text",
                      "value": ". Here "
                    },
                    {
                      "type": "inlineCode",
                      "value": "v"
                    },
                    {
                      "type": "text",
                      "value": " is ndarray with shape (m,) containing Lagrange multipliers."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "hess",
              "type": "Param",
              "type_": "{callable, '2-point', '3-point', 'cs', HessianUpdateStrategy, None}, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Whether to keep the constraint components feasible throughout iterations. A single value set this property for all components. Default is False. Has no effect for equality constraints."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "keep_feasible",
              "type": "Param",
              "type_": "array_like of bool, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Relative step size for the finite difference approximation. Default is None, which will select a reasonable value automatically depending on a finite difference scheme."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "finite_diff_rel_step: None or array_like, optional",
              "type": "Param",
              "type_": ""
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Defines the sparsity structure of the Jacobian matrix for finite difference estimation, its shape must be (m, n). If the Jacobian has only few non-zero elements in "
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "each"
                        }
                      ],
                      "type": "emphasis"
                    },
                    {
                      "type": "text",
                      "value": " row, providing the sparsity structure will greatly speed up the computations. A zero entry means that a corresponding element in the Jacobian is identically zero. If provided, forces the use of 'lsmr' trust-region solver. If None (default) then dense differencing will be used."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "finite_diff_jac_sparsity: {None, array_like, sparse matrix}, optional",
              "type": "Param",
              "type_": ""
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Nonlinear constraint on the variables."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [
      {
        "type": "text",
        "value": "Constrain ``x[0] < sin(x[1]) + 1.9``"
      },
      {
        "type": "code",
        "value": "from scipy.optimize import NonlinearConstraint\nimport numpy as np\ncon = lambda x: x[0] - np.sin(x[1])\nnlc = NonlinearConstraint(con, -np.inf, 1.9)"
      }
    ],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/scipy/optimize/_constraints.py",
  "item_line": 18,
  "item_type": "<class 'type'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Notes",
    "Examples"
  ],
  "references": null,
  "see_also": [],
  "signature": {
    "type": "Signature",
    "value": null
  },
  "type": "DocBlob"
}