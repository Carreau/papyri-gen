{
  "aliases": [
    "scipy.optimize._differentiable_functions.ScalarFunction"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "This class defines a scalar function F: R^n->R and methods for computing or approximating its first and second derivatives."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "This class implements a memoization logic. There are methods "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "fun",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "fun"
            },
            {
              "type": "text",
              "value": ", "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "grad",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "grad"
            },
            {
              "type": "text",
              "value": ", hess` and corresponding attributes "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "module",
              "reference": {
                "kind": "module",
                "module": "scipy",
                "path": "scipy.optimize._bglu_dense:_consider_refactor.<locals>.f",
                "type": "RefInfo",
                "version": "1.10.1"
              },
              "type": "Link",
              "value": "f"
            },
            {
              "type": "text",
              "value": ", "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "g"
            },
            {
              "type": "text",
              "value": " and "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "H"
            },
            {
              "type": "text",
              "value": ". The following things should be considered:"
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "children": [
                {
                  "children": [
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "Use only public methods "
                        },
                        {
                          "anchor": null,
                          "exists": true,
                          "kind": "local",
                          "reference": {
                            "kind": "local",
                            "module": null,
                            "path": "fun",
                            "type": "RefInfo",
                            "version": null
                          },
                          "type": "Link",
                          "value": "fun"
                        },
                        {
                          "type": "text",
                          "value": ", "
                        },
                        {
                          "anchor": null,
                          "exists": true,
                          "kind": "local",
                          "reference": {
                            "kind": "local",
                            "module": null,
                            "path": "grad",
                            "type": "RefInfo",
                            "version": null
                          },
                          "type": "Link",
                          "value": "grad"
                        },
                        {
                          "type": "text",
                          "value": " and "
                        },
                        {
                          "anchor": null,
                          "exists": true,
                          "kind": "local",
                          "reference": {
                            "kind": "local",
                            "module": null,
                            "path": "hess",
                            "type": "RefInfo",
                            "version": null
                          },
                          "type": "Link",
                          "value": "hess"
                        },
                        {
                          "type": "text",
                          "value": "."
                        }
                      ],
                      "type": "paragraph"
                    }
                  ],
                  "spread": false,
                  "type": "listItem"
                },
                {
                  "children": [
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "After one of the methods is called, the corresponding attribute        will be set. However, a subsequent call with a different argument        of "
                        },
                        {
                          "children": [
                            {
                              "type": "text",
                              "value": "any"
                            }
                          ],
                          "type": "emphasis"
                        },
                        {
                          "type": "text",
                          "value": " of the methods may overwrite the attribute."
                        }
                      ],
                      "type": "paragraph"
                    }
                  ],
                  "spread": false,
                  "type": "listItem"
                }
              ],
              "ordered": true,
              "spread": false,
              "start": 1,
              "type": "list"
            }
          ],
          "type": "blockquote"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "evaluates the scalar function. Must be of the form "
                    },
                    {
                      "type": "inlineCode",
                      "value": "fun(x, *args)"
                    },
                    {
                      "type": "text",
                      "value": ", where "
                    },
                    {
                      "type": "inlineCode",
                      "value": "x"
                    },
                    {
                      "type": "text",
                      "value": " is the argument in the form of a 1-D array and "
                    },
                    {
                      "type": "inlineCode",
                      "value": "args"
                    },
                    {
                      "type": "text",
                      "value": " is a tuple of any additional fixed parameters needed to completely specify the function. Should return a scalar."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "fun",
              "type": "Param",
              "type_": "callable"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Provides an initial set of variables for evaluating fun. Array of real elements of size (n,), where 'n' is the number of independent variables."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "x0",
              "type": "Param",
              "type_": "array-like"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Any additional fixed parameters needed to completely specify the scalar function."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "args",
              "type": "Param",
              "type_": "tuple, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Method for computing the gradient vector. If it is a callable, it should be a function that returns the gradient vector:"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "children": [
                        {
                          "type": "inlineCode",
                          "value": "grad(x, *args) -> array_like, shape (n,)"
                        }
                      ],
                      "type": "paragraph"
                    }
                  ],
                  "type": "blockquote"
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "where "
                    },
                    {
                      "type": "inlineCode",
                      "value": "x"
                    },
                    {
                      "type": "text",
                      "value": " is an array with shape (n,) and "
                    },
                    {
                      "type": "inlineCode",
                      "value": "args"
                    },
                    {
                      "type": "text",
                      "value": " is a tuple with the fixed parameters. Alternatively, the keywords  {'2-point', '3-point', 'cs'} can be used to select a finite difference scheme for numerical estimation of the gradient with a relative step size. These finite difference schemes obey any specified "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "bounds"
                    },
                    {
                      "type": "text",
                      "value": "."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "grad",
              "type": "Param",
              "type_": "{callable, '2-point', '3-point', 'cs'}"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Method for computing the Hessian matrix. If it is callable, it should return the  Hessian matrix:"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "children": [
                        {
                          "type": "inlineCode",
                          "value": "hess(x, *args) -> {LinearOperator, spmatrix, array}, (n, n)"
                        }
                      ],
                      "type": "paragraph"
                    }
                  ],
                  "type": "blockquote"
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "where x is a (n,) ndarray and "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "args",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "args"
                    },
                    {
                      "type": "text",
                      "value": " is a tuple with the fixed parameters. Alternatively, the keywords {'2-point', '3-point', 'cs'} select a finite difference scheme for numerical estimation. Or, objects implementing "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "HessianUpdateStrategy"
                    },
                    {
                      "type": "text",
                      "value": " interface can be used to approximate the Hessian. Whenever the gradient is estimated via finite-differences, the Hessian cannot be estimated with options {'2-point', '3-point', 'cs'} and needs to be estimated using one of the quasi-Newton strategies."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "hess",
              "type": "Param",
              "type_": "{callable, '2-point', '3-point', 'cs', HessianUpdateStrategy}"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Relative step size to use. The absolute step size is computed as "
                    },
                    {
                      "type": "inlineCode",
                      "value": "h = finite_diff_rel_step * sign(x0) * max(1, abs(x0))"
                    },
                    {
                      "type": "text",
                      "value": ", possibly adjusted to fit into the bounds. For "
                    },
                    {
                      "type": "inlineCode",
                      "value": "method='3-point'"
                    },
                    {
                      "type": "text",
                      "value": " the sign of "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "h"
                    },
                    {
                      "type": "text",
                      "value": " is ignored. If None then finite_diff_rel_step is selected automatically,"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "finite_diff_rel_step",
              "type": "Param",
              "type_": "None or array_like"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Lower and upper bounds on independent variables. Defaults to no bounds, (-np.inf, np.inf). Each bound must match the size of "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "x0",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "x0"
                    },
                    {
                      "type": "text",
                      "value": " or be a scalar, in the latter case the bound will be the same for all variables. Use it to limit the range of function evaluation."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "finite_diff_bounds",
              "type": "Param",
              "type_": "tuple of array_like"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Absolute step size to use, possibly adjusted to fit into the bounds. For "
                    },
                    {
                      "type": "inlineCode",
                      "value": "method='3-point'"
                    },
                    {
                      "type": "text",
                      "value": " the sign of "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "epsilon",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "epsilon"
                    },
                    {
                      "type": "text",
                      "value": " is ignored. By default relative steps are used, only if "
                    },
                    {
                      "type": "inlineCode",
                      "value": "epsilon is not None"
                    },
                    {
                      "type": "text",
                      "value": " are absolute steps used."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "epsilon",
              "type": "Param",
              "type_": "None or array_like, optional"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Scalar function and its derivatives."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/scipy/optimize/_differentiable_functions.py",
  "item_line": 11,
  "item_type": "<class 'type'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Notes"
  ],
  "references": null,
  "see_also": [],
  "signature": {
    "type": "Signature",
    "value": null
  },
  "type": "DocBlob"
}