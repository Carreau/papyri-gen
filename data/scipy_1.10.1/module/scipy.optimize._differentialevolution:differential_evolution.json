{
  "aliases": [
    "scipy.optimize.differential_evolution"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "The differential evolution method  is stochastic in nature. It does not use gradient methods to find the minimum, and can search large areas of candidate space, but often requires larger numbers of function evaluations than conventional gradient-based techniques."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "The algorithm is due to Storn and Price ."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Differential evolution is a stochastic population based method that is useful for global optimization problems. At each pass through the population the algorithm mutates each candidate solution by mixing with other candidate solutions to create a trial candidate. There are several strategies  for creating trial candidates, which suit some problems more than others. The 'best1bin' strategy is a good starting point for many systems. In this strategy two members of the population are randomly chosen. Their difference is used to mutate the best member (the 'best' in 'best1bin'), "
            },
            {
              "type": "inlineMath",
              "value": "b_0"
            },
            {
              "type": "text",
              "value": ", so far:"
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "math",
          "value": "b' = b_0 + mutation * (population[rand0] - population[rand1])"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "A trial vector is then constructed. Starting with a randomly chosen ith parameter the trial is sequentially filled (in modulo) with parameters from "
            },
            {
              "type": "inlineCode",
              "value": "b'"
            },
            {
              "type": "text",
              "value": " or the original candidate. The choice of whether to use "
            },
            {
              "type": "inlineCode",
              "value": "b'"
            },
            {
              "type": "text",
              "value": " or the original candidate is made with a binomial distribution (the 'bin' in 'best1bin') - a random number in [0, 1) is generated. If this number is less than the "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "recombination",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "recombination"
            },
            {
              "type": "text",
              "value": " constant then the parameter is loaded from "
            },
            {
              "type": "inlineCode",
              "value": "b'"
            },
            {
              "type": "text",
              "value": ", otherwise it is loaded from the original candidate. The final parameter is always loaded from "
            },
            {
              "type": "inlineCode",
              "value": "b'"
            },
            {
              "type": "text",
              "value": ". Once the trial candidate is built its fitness is assessed. If the trial is better than the original candidate then it takes its place. If it is also better than the best overall candidate it also replaces that. To improve your chances of finding a global minimum use higher "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "popsize",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "popsize"
            },
            {
              "type": "text",
              "value": " values, with higher "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "mutation",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "mutation"
            },
            {
              "type": "text",
              "value": " and (dithering), but lower "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "recombination",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "recombination"
            },
            {
              "type": "text",
              "value": " values. This has the effect of widening the search radius, but slowing convergence. By default the best solution vector is updated continuously within a single iteration ("
            },
            {
              "type": "inlineCode",
              "value": "updating='immediate'"
            },
            {
              "type": "text",
              "value": "). This is a modification  of the original differential evolution algorithm which can lead to faster convergence as trial vectors can immediately benefit from improved solutions. To use the original Storn and Price behaviour, updating the best solution once per iteration, set "
            },
            {
              "type": "inlineCode",
              "value": "updating='deferred'"
            },
            {
              "type": "text",
              "value": ". The "
            },
            {
              "type": "inlineCode",
              "value": "'deferred'"
            },
            {
              "type": "text",
              "value": " approach is compatible with both parallelization and vectorization ("
            },
            {
              "type": "inlineCode",
              "value": "'workers'"
            },
            {
              "type": "text",
              "value": " and "
            },
            {
              "type": "inlineCode",
              "value": "'vectorized'"
            },
            {
              "type": "text",
              "value": " keywords). These may improve minimization speed by using computer resources more efficiently. The "
            },
            {
              "type": "inlineCode",
              "value": "'workers'"
            },
            {
              "type": "text",
              "value": " distribute calculations over multiple processors. By default the Python "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "module",
              "reference": {
                "kind": "api",
                "module": "multiprocessing",
                "path": "multiprocessing",
                "type": "RefInfo",
                "version": "*"
              },
              "type": "Link",
              "value": "multiprocessing"
            },
            {
              "type": "text",
              "value": " module is used, but other approaches are also possible, such as the Message Passing Interface (MPI) used on clusters  . The overhead from these approaches (creating new Processes, etc) may be significant, meaning that computational speed doesn't necessarily scale with the number of processors used. Parallelization is best suited to computationally expensive objective functions. If the objective function is less expensive, then "
            },
            {
              "type": "inlineCode",
              "value": "'vectorized'"
            },
            {
              "type": "text",
              "value": " may aid by only calling the objective function once per iteration, rather than multiple times for all the population members; the interpreter overhead is reduced."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "children": [
                {
                  "type": "text",
                  "value": "versionadded 0.15.0"
                }
              ],
              "type": "admonitionTitle"
            }
          ],
          "kind": "note",
          "type": "admonition"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The objective function to be minimized. Must be in the form "
                    },
                    {
                      "type": "inlineCode",
                      "value": "f(x, *args)"
                    },
                    {
                      "type": "text",
                      "value": ", where "
                    },
                    {
                      "type": "inlineCode",
                      "value": "x"
                    },
                    {
                      "type": "text",
                      "value": " is the argument in the form of a 1-D array and "
                    },
                    {
                      "type": "inlineCode",
                      "value": "args"
                    },
                    {
                      "type": "text",
                      "value": " is a tuple of any additional fixed parameters needed to completely specify the function. The number of parameters, N, is equal to "
                    },
                    {
                      "type": "inlineCode",
                      "value": "len(x)"
                    },
                    {
                      "type": "text",
                      "value": "."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "func",
              "type": "Param",
              "type_": "callable"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Bounds for variables. There are two ways to specify the bounds: 1. Instance of "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "Bounds"
                    },
                    {
                      "type": "text",
                      "value": " class. 2. "
                    },
                    {
                      "type": "inlineCode",
                      "value": "(min, max)"
                    },
                    {
                      "type": "text",
                      "value": " pairs for each element in "
                    },
                    {
                      "type": "inlineCode",
                      "value": "x"
                    },
                    {
                      "type": "text",
                      "value": ", defining the finite lower and upper bounds for the optimizing argument of "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "func",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "func"
                    },
                    {
                      "type": "text",
                      "value": ". The total number of bounds is used to determine the number of parameters, N."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "bounds",
              "type": "Param",
              "type_": "sequence or `Bounds`"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Any additional fixed parameters needed to completely specify the objective function."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "args",
              "type": "Param",
              "type_": "tuple, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The differential evolution strategy to use. Should be one of:"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "children": [
                        {
                          "children": [
                            {
                              "children": [
                                {
                                  "type": "text",
                                  "value": "'best1bin'"
                                }
                              ],
                              "type": "paragraph"
                            }
                          ],
                          "spread": false,
                          "type": "listItem"
                        },
                        {
                          "children": [
                            {
                              "children": [
                                {
                                  "type": "text",
                                  "value": "'best1exp'"
                                }
                              ],
                              "type": "paragraph"
                            }
                          ],
                          "spread": false,
                          "type": "listItem"
                        },
                        {
                          "children": [
                            {
                              "children": [
                                {
                                  "type": "text",
                                  "value": "'rand1exp'"
                                }
                              ],
                              "type": "paragraph"
                            }
                          ],
                          "spread": false,
                          "type": "listItem"
                        },
                        {
                          "children": [
                            {
                              "children": [
                                {
                                  "type": "text",
                                  "value": "'randtobest1exp'"
                                }
                              ],
                              "type": "paragraph"
                            }
                          ],
                          "spread": false,
                          "type": "listItem"
                        },
                        {
                          "children": [
                            {
                              "children": [
                                {
                                  "type": "text",
                                  "value": "'currenttobest1exp'"
                                }
                              ],
                              "type": "paragraph"
                            }
                          ],
                          "spread": false,
                          "type": "listItem"
                        },
                        {
                          "children": [
                            {
                              "children": [
                                {
                                  "type": "text",
                                  "value": "'best2exp'"
                                }
                              ],
                              "type": "paragraph"
                            }
                          ],
                          "spread": false,
                          "type": "listItem"
                        },
                        {
                          "children": [
                            {
                              "children": [
                                {
                                  "type": "text",
                                  "value": "'rand2exp'"
                                }
                              ],
                              "type": "paragraph"
                            }
                          ],
                          "spread": false,
                          "type": "listItem"
                        },
                        {
                          "children": [
                            {
                              "children": [
                                {
                                  "type": "text",
                                  "value": "'randtobest1bin'"
                                }
                              ],
                              "type": "paragraph"
                            }
                          ],
                          "spread": false,
                          "type": "listItem"
                        },
                        {
                          "children": [
                            {
                              "children": [
                                {
                                  "type": "text",
                                  "value": "'currenttobest1bin'"
                                }
                              ],
                              "type": "paragraph"
                            }
                          ],
                          "spread": false,
                          "type": "listItem"
                        },
                        {
                          "children": [
                            {
                              "children": [
                                {
                                  "type": "text",
                                  "value": "'best2bin'"
                                }
                              ],
                              "type": "paragraph"
                            }
                          ],
                          "spread": false,
                          "type": "listItem"
                        },
                        {
                          "children": [
                            {
                              "children": [
                                {
                                  "type": "text",
                                  "value": "'rand2bin'"
                                }
                              ],
                              "type": "paragraph"
                            }
                          ],
                          "spread": false,
                          "type": "listItem"
                        },
                        {
                          "children": [
                            {
                              "children": [
                                {
                                  "type": "text",
                                  "value": "'rand1bin'"
                                }
                              ],
                              "type": "paragraph"
                            }
                          ],
                          "spread": false,
                          "type": "listItem"
                        }
                      ],
                      "ordered": false,
                      "spread": false,
                      "start": 1,
                      "type": "list"
                    }
                  ],
                  "type": "blockquote"
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The default is 'best1bin'."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "strategy",
              "type": "Param",
              "type_": "str, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The maximum number of generations over which the entire population is evolved. The maximum number of function evaluations (with no polishing) is: "
                    },
                    {
                      "type": "inlineCode",
                      "value": "(maxiter + 1) * popsize * N"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "maxiter",
              "type": "Param",
              "type_": "int, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "A multiplier for setting the total population size. The population has "
                    },
                    {
                      "type": "inlineCode",
                      "value": "popsize * N"
                    },
                    {
                      "type": "text",
                      "value": " individuals. This keyword is overridden if an initial population is supplied via the "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "init",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "init"
                    },
                    {
                      "type": "text",
                      "value": " keyword. When using "
                    },
                    {
                      "type": "inlineCode",
                      "value": "init='sobol'"
                    },
                    {
                      "type": "text",
                      "value": " the population size is calculated as the next power of 2 after "
                    },
                    {
                      "type": "inlineCode",
                      "value": "popsize * N"
                    },
                    {
                      "type": "text",
                      "value": "."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "popsize",
              "type": "Param",
              "type_": "int, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Relative tolerance for convergence, the solving stops when "
                    },
                    {
                      "type": "inlineCode",
                      "value": "np.std(pop) <= atol + tol * np.abs(np.mean(population_energies))"
                    },
                    {
                      "type": "text",
                      "value": ", where and "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "atol",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "atol"
                    },
                    {
                      "type": "text",
                      "value": " and "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "tol",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "tol"
                    },
                    {
                      "type": "text",
                      "value": " are the absolute and relative tolerance respectively."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "tol",
              "type": "Param",
              "type_": "float, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The mutation constant. In the literature this is also known as differential weight, being denoted by F. If specified as a float it should be in the range [0, 2]. If specified as a tuple "
                    },
                    {
                      "type": "inlineCode",
                      "value": "(min, max)"
                    },
                    {
                      "type": "text",
                      "value": " dithering is employed. Dithering randomly changes the mutation constant on a generation by generation basis. The mutation constant for that generation is taken from "
                    },
                    {
                      "type": "inlineCode",
                      "value": "U[min, max)"
                    },
                    {
                      "type": "text",
                      "value": ". Dithering can help speed convergence significantly. Increasing the mutation constant increases the search radius, but will slow down convergence."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "mutation",
              "type": "Param",
              "type_": "float or tuple(float, float), optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The recombination constant, should be in the range [0, 1]. In the literature this is also known as the crossover probability, being denoted by CR. Increasing this value allows a larger number of mutants to progress into the next generation, but at the risk of population stability."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "recombination",
              "type": "Param",
              "type_": "float, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "If "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "seed",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "seed"
                    },
                    {
                      "type": "text",
                      "value": " is None (or "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "np.random"
                    },
                    {
                      "type": "text",
                      "value": "), the "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "module",
                      "reference": {
                        "kind": "api",
                        "module": "numpy.random.mtrand",
                        "path": "numpy.random.mtrand:RandomState",
                        "type": "RefInfo",
                        "version": "*"
                      },
                      "type": "Link",
                      "value": "numpy.random.RandomState"
                    },
                    {
                      "type": "text",
                      "value": " singleton is used. If "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "seed",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "seed"
                    },
                    {
                      "type": "text",
                      "value": " is an int, a new "
                    },
                    {
                      "type": "inlineCode",
                      "value": "RandomState"
                    },
                    {
                      "type": "text",
                      "value": " instance is used, seeded with "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "seed",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "seed"
                    },
                    {
                      "type": "text",
                      "value": ". If "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "seed",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "seed"
                    },
                    {
                      "type": "text",
                      "value": " is already a "
                    },
                    {
                      "type": "inlineCode",
                      "value": "Generator"
                    },
                    {
                      "type": "text",
                      "value": " or "
                    },
                    {
                      "type": "inlineCode",
                      "value": "RandomState"
                    },
                    {
                      "type": "text",
                      "value": " instance then that instance is used. Specify "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "seed",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "seed"
                    },
                    {
                      "type": "text",
                      "value": " for repeatable minimizations."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "seed",
              "type": "Param",
              "type_": "{None, int, `numpy.random.Generator`, `numpy.random.RandomState`}, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Prints the evaluated "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "func",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "func"
                    },
                    {
                      "type": "text",
                      "value": " at every iteration."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "disp",
              "type": "Param",
              "type_": "bool, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "A function to follow the progress of the minimization. "
                    },
                    {
                      "type": "inlineCode",
                      "value": "xk"
                    },
                    {
                      "type": "text",
                      "value": " is the best solution found so far. "
                    },
                    {
                      "type": "inlineCode",
                      "value": "val"
                    },
                    {
                      "type": "text",
                      "value": " represents the fractional value of the population convergence.  When "
                    },
                    {
                      "type": "inlineCode",
                      "value": "val"
                    },
                    {
                      "type": "text",
                      "value": " is greater than one the function halts. If callback returns "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "True"
                    },
                    {
                      "type": "text",
                      "value": ", then the minimization is halted (any polishing is still carried out)."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "callback",
              "type": "Param",
              "type_": "callable, `callback(xk, convergence=val)`, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "If True (default), then "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "module",
                      "reference": {
                        "kind": "api",
                        "module": "scipy.optimize._minimize",
                        "path": "scipy.optimize._minimize:minimize",
                        "type": "RefInfo",
                        "version": "*"
                      },
                      "type": "Link",
                      "value": "scipy.optimize.minimize"
                    },
                    {
                      "type": "text",
                      "value": " with the "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "L-BFGS-B"
                    },
                    {
                      "type": "text",
                      "value": " method is used to polish the best population member at the end, which can improve the minimization slightly. If a constrained problem is being studied then the "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "trust-constr"
                    },
                    {
                      "type": "text",
                      "value": " method is used instead. For large problems with many constraints, polishing can take a long time due to the Jacobian computations."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "polish",
              "type": "Param",
              "type_": "bool, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Specify which type of population initialization is performed. Should be one of:"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "children": [
                        {
                          "children": [
                            {
                              "children": [
                                {
                                  "type": "text",
                                  "value": "'latinhypercube'"
                                }
                              ],
                              "type": "paragraph"
                            }
                          ],
                          "spread": false,
                          "type": "listItem"
                        },
                        {
                          "children": [
                            {
                              "children": [
                                {
                                  "type": "text",
                                  "value": "'sobol'"
                                }
                              ],
                              "type": "paragraph"
                            }
                          ],
                          "spread": false,
                          "type": "listItem"
                        },
                        {
                          "children": [
                            {
                              "children": [
                                {
                                  "type": "text",
                                  "value": "'halton'"
                                }
                              ],
                              "type": "paragraph"
                            }
                          ],
                          "spread": false,
                          "type": "listItem"
                        },
                        {
                          "children": [
                            {
                              "children": [
                                {
                                  "type": "text",
                                  "value": "'random'"
                                }
                              ],
                              "type": "paragraph"
                            }
                          ],
                          "spread": false,
                          "type": "listItem"
                        },
                        {
                          "children": [
                            {
                              "children": [
                                {
                                  "type": "text",
                                  "value": "array specifying the initial population. The array should have       shape "
                                },
                                {
                                  "type": "inlineCode",
                                  "value": "(S, N)"
                                },
                                {
                                  "type": "text",
                                  "value": ", where S is the total population size and N is       the number of parameters.       "
                                },
                                {
                                  "anchor": null,
                                  "exists": true,
                                  "kind": "local",
                                  "reference": {
                                    "kind": "local",
                                    "module": null,
                                    "path": "init",
                                    "type": "RefInfo",
                                    "version": null
                                  },
                                  "type": "Link",
                                  "value": "init"
                                },
                                {
                                  "type": "text",
                                  "value": " is clipped to "
                                },
                                {
                                  "anchor": null,
                                  "exists": true,
                                  "kind": "local",
                                  "reference": {
                                    "kind": "local",
                                    "module": null,
                                    "path": "bounds",
                                    "type": "RefInfo",
                                    "version": null
                                  },
                                  "type": "Link",
                                  "value": "bounds"
                                },
                                {
                                  "type": "text",
                                  "value": " before use."
                                }
                              ],
                              "type": "paragraph"
                            }
                          ],
                          "spread": false,
                          "type": "listItem"
                        }
                      ],
                      "ordered": false,
                      "spread": false,
                      "start": 1,
                      "type": "list"
                    }
                  ],
                  "type": "blockquote"
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The default is 'latinhypercube'. Latin Hypercube sampling tries to maximize coverage of the available parameter space."
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "'sobol' and 'halton' are superior alternatives and maximize even more the parameter space. 'sobol' will enforce an initial population size which is calculated as the next power of 2 after "
                    },
                    {
                      "type": "inlineCode",
                      "value": "popsize * N"
                    },
                    {
                      "type": "text",
                      "value": ". 'halton' has no requirements but is a bit less efficient. See "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "module",
                      "reference": {
                        "kind": "module",
                        "module": "scipy",
                        "path": "scipy.stats.qmc",
                        "type": "RefInfo",
                        "version": "1.10.1"
                      },
                      "type": "Link",
                      "value": "scipy.stats.qmc"
                    },
                    {
                      "type": "text",
                      "value": " for more details."
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "'random' initializes the population randomly - this has the drawback that clustering can occur, preventing the whole of parameter space being covered. Use of an array to specify a population could be used, for example, to create a tight bunch of initial guesses in an location where the solution is known to exist, thereby reducing time for convergence."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "init",
              "type": "Param",
              "type_": "str or array-like, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Absolute tolerance for convergence, the solving stops when "
                    },
                    {
                      "type": "inlineCode",
                      "value": "np.std(pop) <= atol + tol * np.abs(np.mean(population_energies))"
                    },
                    {
                      "type": "text",
                      "value": ", where and "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "atol",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "atol"
                    },
                    {
                      "type": "text",
                      "value": " and "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "tol",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "tol"
                    },
                    {
                      "type": "text",
                      "value": " are the absolute and relative tolerance respectively."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "atol",
              "type": "Param",
              "type_": "float, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "If "
                    },
                    {
                      "type": "inlineCode",
                      "value": "'immediate'"
                    },
                    {
                      "type": "text",
                      "value": ", the best solution vector is continuously updated within a single generation . This can lead to faster convergence as trial vectors can take advantage of continuous improvements in the best solution. With "
                    },
                    {
                      "type": "inlineCode",
                      "value": "'deferred'"
                    },
                    {
                      "type": "text",
                      "value": ", the best solution vector is updated once per generation. Only "
                    },
                    {
                      "type": "inlineCode",
                      "value": "'deferred'"
                    },
                    {
                      "type": "text",
                      "value": " is compatible with parallelization or vectorization, and the "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "workers",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "workers"
                    },
                    {
                      "type": "text",
                      "value": " and "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "vectorized",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "vectorized"
                    },
                    {
                      "type": "text",
                      "value": " keywords can over-ride this option."
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "versionadded 1.2.0"
                        }
                      ],
                      "type": "admonitionTitle"
                    }
                  ],
                  "kind": "note",
                  "type": "admonition"
                }
              ],
              "param": "updating",
              "type": "Param",
              "type_": "{'immediate', 'deferred'}, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "If "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "workers",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "workers"
                    },
                    {
                      "type": "text",
                      "value": " is an int the population is subdivided into "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "workers",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "workers"
                    },
                    {
                      "type": "text",
                      "value": " sections and evaluated in parallel (uses "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "multiprocessing.Pool <multiprocessing>"
                    },
                    {
                      "type": "text",
                      "value": "). Supply -1 to use all available CPU cores. Alternatively supply a map-like callable, such as "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "multiprocessing.Pool.map"
                    },
                    {
                      "type": "text",
                      "value": " for evaluating the population in parallel. This evaluation is carried out as "
                    },
                    {
                      "type": "inlineCode",
                      "value": "workers(func, iterable)"
                    },
                    {
                      "type": "text",
                      "value": ". This option will override the "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "updating",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "updating"
                    },
                    {
                      "type": "text",
                      "value": " keyword to "
                    },
                    {
                      "type": "inlineCode",
                      "value": "updating='deferred'"
                    },
                    {
                      "type": "text",
                      "value": " if "
                    },
                    {
                      "type": "inlineCode",
                      "value": "workers != 1"
                    },
                    {
                      "type": "text",
                      "value": ". This option overrides the "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "vectorized",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "vectorized"
                    },
                    {
                      "type": "text",
                      "value": " keyword if "
                    },
                    {
                      "type": "inlineCode",
                      "value": "workers != 1"
                    },
                    {
                      "type": "text",
                      "value": ". Requires that "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "func",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "func"
                    },
                    {
                      "type": "text",
                      "value": " be pickleable."
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "versionadded 1.2.0"
                        }
                      ],
                      "type": "admonitionTitle"
                    }
                  ],
                  "kind": "note",
                  "type": "admonition"
                }
              ],
              "param": "workers",
              "type": "Param",
              "type_": "int or map-like callable, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Constraints on the solver, over and above those applied by the "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "bounds",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "bounds"
                    },
                    {
                      "type": "text",
                      "value": " kwd. Uses the approach by Lampinen ."
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "versionadded 1.4.0"
                        }
                      ],
                      "type": "admonitionTitle"
                    }
                  ],
                  "kind": "note",
                  "type": "admonition"
                }
              ],
              "param": "constraints",
              "type": "Param",
              "type_": "{NonLinearConstraint, LinearConstraint, Bounds}"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Provides an initial guess to the minimization. Once the population has been initialized this vector replaces the first (best) member. This replacement is done even if "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "init",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "init"
                    },
                    {
                      "type": "text",
                      "value": " is given an initial population. "
                    },
                    {
                      "type": "inlineCode",
                      "value": "x0.shape == (N,)"
                    },
                    {
                      "type": "text",
                      "value": "."
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "versionadded 1.7.0"
                        }
                      ],
                      "type": "admonitionTitle"
                    }
                  ],
                  "kind": "note",
                  "type": "admonition"
                }
              ],
              "param": "x0",
              "type": "Param",
              "type_": "None or array-like, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "For each decision variable, a boolean value indicating whether the decision variable is constrained to integer values. The array is broadcast to "
                    },
                    {
                      "type": "inlineCode",
                      "value": "(N,)"
                    },
                    {
                      "type": "text",
                      "value": ". If any decision variables are constrained to be integral, they will not be changed during polishing. Only integer values lying between the lower and upper bounds are used. If there are no integer values lying between the bounds then a "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "ValueError"
                    },
                    {
                      "type": "text",
                      "value": " is raised."
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "versionadded 1.9.0"
                        }
                      ],
                      "type": "admonitionTitle"
                    }
                  ],
                  "kind": "note",
                  "type": "admonition"
                }
              ],
              "param": "integrality",
              "type": "Param",
              "type_": "1-D array, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "If "
                    },
                    {
                      "type": "inlineCode",
                      "value": "vectorized is True"
                    },
                    {
                      "type": "text",
                      "value": ", "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "func",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "func"
                    },
                    {
                      "type": "text",
                      "value": " is sent an "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "x"
                    },
                    {
                      "type": "text",
                      "value": " array with "
                    },
                    {
                      "type": "inlineCode",
                      "value": "x.shape == (N, S)"
                    },
                    {
                      "type": "text",
                      "value": ", and is expected to return an array of shape "
                    },
                    {
                      "type": "inlineCode",
                      "value": "(S,)"
                    },
                    {
                      "type": "text",
                      "value": ", where "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "S"
                    },
                    {
                      "type": "text",
                      "value": " is the number of solution vectors to be calculated. If constraints are applied, each of the functions used to construct a "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "Constraint"
                    },
                    {
                      "type": "text",
                      "value": " object should accept an "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "x"
                    },
                    {
                      "type": "text",
                      "value": " array with "
                    },
                    {
                      "type": "inlineCode",
                      "value": "x.shape == (N, S)"
                    },
                    {
                      "type": "text",
                      "value": ", and return an array of shape "
                    },
                    {
                      "type": "inlineCode",
                      "value": "(M, S)"
                    },
                    {
                      "type": "text",
                      "value": ", where "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "M"
                    },
                    {
                      "type": "text",
                      "value": " is the number of constraint components. This option is an alternative to the parallelization offered by "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "workers",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "workers"
                    },
                    {
                      "type": "text",
                      "value": ", and may help in optimization speed by reducing interpreter overhead from multiple function calls. This keyword is ignored if "
                    },
                    {
                      "type": "inlineCode",
                      "value": "workers != 1"
                    },
                    {
                      "type": "text",
                      "value": ". This option will override the "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "updating",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "updating"
                    },
                    {
                      "type": "text",
                      "value": " keyword to "
                    },
                    {
                      "type": "inlineCode",
                      "value": "updating='deferred'"
                    },
                    {
                      "type": "text",
                      "value": ". See the notes section for further discussion on when to use "
                    },
                    {
                      "type": "inlineCode",
                      "value": "'vectorized'"
                    },
                    {
                      "type": "text",
                      "value": ", and when to use "
                    },
                    {
                      "type": "inlineCode",
                      "value": "'workers'"
                    },
                    {
                      "type": "text",
                      "value": "."
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "versionadded 1.9.0"
                        }
                      ],
                      "type": "admonitionTitle"
                    }
                  ],
                  "kind": "note",
                  "type": "admonition"
                }
              ],
              "param": "vectorized",
              "type": "Param",
              "type_": "bool, optional"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The optimization result represented as a "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "OptimizeResult"
                    },
                    {
                      "type": "text",
                      "value": " object. Important attributes are: "
                    },
                    {
                      "type": "inlineCode",
                      "value": "x"
                    },
                    {
                      "type": "text",
                      "value": " the solution array, "
                    },
                    {
                      "type": "inlineCode",
                      "value": "success"
                    },
                    {
                      "type": "text",
                      "value": " a Boolean flag indicating if the optimizer exited successfully and "
                    },
                    {
                      "type": "inlineCode",
                      "value": "message"
                    },
                    {
                      "type": "text",
                      "value": " which describes the cause of the termination. See "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "OptimizeResult"
                    },
                    {
                      "type": "text",
                      "value": " for a description of other attributes. If "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "polish",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "polish"
                    },
                    {
                      "type": "text",
                      "value": " was employed, and a lower minimum was obtained by the polishing, then OptimizeResult also contains the "
                    },
                    {
                      "type": "inlineCode",
                      "value": "jac"
                    },
                    {
                      "type": "text",
                      "value": " attribute. If the eventual solution does not satisfy the applied constraints "
                    },
                    {
                      "type": "inlineCode",
                      "value": "success"
                    },
                    {
                      "type": "text",
                      "value": " will be "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "False"
                    },
                    {
                      "type": "text",
                      "value": "."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "res",
              "type": "Param",
              "type_": "OptimizeResult"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Finds the global minimum of a multivariate function."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [
      {
        "type": "text",
        "value": "Let us consider the problem of minimizing the Rosenbrock function. This\nfunction is implemented in `rosen` in `scipy.optimize`."
      },
      {
        "type": "code",
        "value": "import numpy as np\nfrom scipy.optimize import rosen, differential_evolution\nbounds = [(0,2), (0, 2), (0, 2), (0, 2), (0, 2)]\nresult = differential_evolution(rosen, bounds)\nresult.x, result.fun"
      },
      {
        "type": "text",
        "value": "Now repeat, but with parallelization."
      },
      {
        "type": "code",
        "value": "result = differential_evolution(rosen, bounds, updating='deferred',\n                                workers=2)\nresult.x, result.fun"
      },
      {
        "type": "text",
        "value": "Let's do a constrained minimization."
      },
      {
        "type": "code",
        "value": "from scipy.optimize import LinearConstraint, Bounds"
      },
      {
        "type": "text",
        "value": "We add the constraint that the sum of ``x[0]`` and ``x[1]`` must be less\nthan or equal to 1.9.  This is a linear constraint, which may be written\n``A @ x <= 1.9``, where ``A = array([[1, 1]])``.  This can be encoded as\na `LinearConstraint` instance:"
      },
      {
        "type": "code",
        "value": "lc = LinearConstraint([[1, 1]], -np.inf, 1.9)"
      },
      {
        "type": "text",
        "value": "Specify limits using a `Bounds` object."
      },
      {
        "type": "code",
        "value": "bounds = Bounds([0., 0.], [2., 2.])\nresult = differential_evolution(rosen, bounds, constraints=lc,\n                                seed=1)\nresult.x, result.fun"
      },
      {
        "type": "text",
        "value": "Next find the minimum of the Ackley function\n(https://en.wikipedia.org/wiki/Test_functions_for_optimization)."
      },
      {
        "type": "code",
        "value": "def ackley(x):\n    arg1 = -0.2 * np.sqrt(0.5 * (x[0] ** 2 + x[1] ** 2))\n    arg2 = 0.5 * (np.cos(2. * np.pi * x[0]) + np.cos(2. * np.pi * x[1]))\n    return -20. * np.exp(arg1) - np.exp(arg2) + 20. + np.e\nbounds = [(-5, 5), (-5, 5)]\nresult = differential_evolution(ackley, bounds, seed=1)\nresult.x, result.fun"
      },
      {
        "type": "text",
        "value": "The Ackley function is written in a vectorized manner, so the\n``'vectorized'`` keyword can be employed. Note the reduced number of\nfunction evaluations."
      },
      {
        "type": "code",
        "value": "result = differential_evolution(\n    ackley, bounds, vectorized=True, updating='deferred', seed=1\n)\nresult.x, result.fun"
      }
    ],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/scipy/optimize/_differentialevolution.py",
  "item_line": 22,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns",
    "Notes",
    "References",
    "Examples"
  ],
  "references": null,
  "see_also": [],
  "signature": {
    "type": "Signature",
    "value": "(func, bounds, args=(), strategy='best1bin', maxiter=1000, popsize=15, tol=0.01, mutation=(0.5, 1), recombination=0.7, seed=None, callback=None, disp=False, polish=True, init='latinhypercube', atol=0, updating='immediate', workers=1, constraints=(), x0=None, *, integrality=None, vectorized=False)"
  },
  "type": "DocBlob"
}