{
  "aliases": [
    "scipy.optimize.linear_sum_assignment"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "The linear sum assignment problem  is also known as minimum weight matching in bipartite graphs. A problem instance is described by a matrix C, where each C[i,j] is the cost of matching vertex i of the first partite set (a 'worker') and vertex j of the second set (a 'job'). The goal is to find a complete assignment of workers to jobs of minimal cost."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Formally, let X be a boolean matrix where "
            },
            {
              "type": "inlineMath",
              "value": "X[i,j] = 1"
            },
            {
              "type": "text",
              "value": " iff row i is assigned to column j. Then the optimal assignment has cost"
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "math",
          "value": "\\min \\sum_i \\sum_j C_{i,j} X_{i,j}"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "where, in the case where the matrix X is square, each row is assigned to exactly one column, and each column to exactly one row."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "This function can also solve a generalization of the classic assignment problem where the cost matrix is rectangular. If it has more rows than columns, then not every row needs to be assigned to a column, and vice versa."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "This implementation is a modified Jonker-Volgenant algorithm with no initialization, described in ref. ."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "children": [
                {
                  "type": "text",
                  "value": "versionadded 0.17.0"
                }
              ],
              "type": "admonitionTitle"
            }
          ],
          "kind": "note",
          "type": "admonition"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The cost matrix of the bipartite graph."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "cost_matrix",
              "type": "Param",
              "type_": "array"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Calculates a maximum weight matching if true."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "maximize",
              "type": "Param",
              "type_": "bool (default: False)"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "An array of row indices and one of corresponding column indices giving the optimal assignment. The cost of the assignment can be computed as "
                    },
                    {
                      "type": "inlineCode",
                      "value": "cost_matrix[row_ind, col_ind].sum()"
                    },
                    {
                      "type": "text",
                      "value": ". The row indices will be sorted; in the case of a square cost matrix they will be equal to "
                    },
                    {
                      "type": "inlineCode",
                      "value": "numpy.arange(cost_matrix.shape[0])"
                    },
                    {
                      "type": "text",
                      "value": "."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "row_ind, col_ind",
              "type": "Param",
              "type_": "array"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Solve the linear sum assignment problem."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [
      {
        "type": "code",
        "value": "import numpy as np\ncost = np.array([[4, 1, 3], [2, 0, 5], [3, 2, 2]])\nfrom scipy.optimize import linear_sum_assignment\nrow_ind, col_ind = linear_sum_assignment(cost)\ncol_ind"
      },
      {
        "type": "code",
        "value": "cost[row_ind, col_ind].sum()"
      }
    ],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": null,
  "item_line": null,
  "item_type": "<class 'builtin_function_or_method'>",
  "ordered_sections": [
    "Summary",
    "Parameters",
    "Returns",
    "See Also",
    "Notes",
    "References",
    "Examples"
  ],
  "references": null,
  "see_also": [
    {
      "descriptions": [
        {
          "children": [
            {
              "type": "text",
              "value": "for sparse inputs"
            }
          ],
          "type": "paragraph"
        }
      ],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "module",
          "module": "scipy",
          "path": "scipy.sparse.csgraph._matching:min_weight_full_bipartite_matching",
          "type": "RefInfo",
          "version": "1.10.1"
        },
        "type": "Link",
        "value": "scipy.sparse.csgraph.min_weight_full_bipartite_matching"
      },
      "type": null
    }
  ],
  "signature": {
    "type": "Signature",
    "value": null
  },
  "type": "DocBlob"
}