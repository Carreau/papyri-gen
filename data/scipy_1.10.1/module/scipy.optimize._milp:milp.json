{
  "aliases": [
    "scipy.optimize.milp"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Solves problems of the following form:"
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "math",
          "value": "\\min_x \\ & c^T x \\\\\n\\mbox{such that} \\ & b_l \\leq A x \\leq b_u,\\\\\n& l \\leq x \\leq u, \\\\\n& x_i \\in \\mathbb{Z}, i \\in X_i"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "where "
            },
            {
              "type": "inlineMath",
              "value": "x"
            },
            {
              "type": "text",
              "value": " is a vector of decision variables; "
            },
            {
              "type": "inlineMath",
              "value": "c"
            },
            {
              "type": "text",
              "value": ", "
            },
            {
              "type": "inlineMath",
              "value": "b_l"
            },
            {
              "type": "text",
              "value": ", "
            },
            {
              "type": "inlineMath",
              "value": "b_u"
            },
            {
              "type": "text",
              "value": ", "
            },
            {
              "type": "inlineMath",
              "value": "l"
            },
            {
              "type": "text",
              "value": ", and "
            },
            {
              "type": "inlineMath",
              "value": "u"
            },
            {
              "type": "text",
              "value": " are vectors; "
            },
            {
              "type": "inlineMath",
              "value": "A"
            },
            {
              "type": "text",
              "value": " is a matrix, and "
            },
            {
              "type": "inlineMath",
              "value": "X_i"
            },
            {
              "type": "text",
              "value": " is the set of indices of decision variables that must be integral. (In this context, a variable that can assume only integer values is said to be \"integral\"; it has an \"integrality\" constraint.)"
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Alternatively, that's:"
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "minimize      "
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": "c @ x"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "such that      "
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": "b_l <= A @ x <= b_u\nl <= x <= u\nSpecified elements of x must be integers"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "By default, "
            },
            {
              "type": "inlineCode",
              "value": "l = 0"
            },
            {
              "type": "text",
              "value": " and "
            },
            {
              "type": "inlineCode",
              "value": "u = np.inf"
            },
            {
              "type": "text",
              "value": " unless specified with "
            },
            {
              "type": "inlineCode",
              "value": "bounds"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [
        {
          "children": [
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "milp"
            },
            {
              "type": "text",
              "value": " is a wrapper of the HiGHS linear optimization software . The algorithm is deterministic, and it typically finds the global optimum of moderately challenging mixed-integer linear programs (when it exists)."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The coefficients of the linear objective function to be minimized. "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "c",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "c"
                    },
                    {
                      "type": "text",
                      "value": " is converted to a double precision array before the problem is solved."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "c",
              "type": "Param",
              "type_": "1D array_like"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Indicates the type of integrality constraint on each decision variable."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "integrality",
              "type": "Param",
              "type_": "1D array_like, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Bounds on the decision variables. Lower and upper bounds are converted to double precision arrays before the problem is solved. The "
                    },
                    {
                      "type": "inlineCode",
                      "value": "keep_feasible"
                    },
                    {
                      "type": "text",
                      "value": " parameter of the "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "Bounds"
                    },
                    {
                      "type": "text",
                      "value": " object is ignored. If not specified, all decision variables are constrained to be non-negative."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "bounds",
              "type": "Param",
              "type_": "scipy.optimize.Bounds, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Linear constraints of the optimization problem. Arguments may be one of the following:"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "children": [
                        {
                          "children": [
                            {
                              "type": "text",
                              "value": "A single "
                            },
                            {
                              "domain": null,
                              "role": null,
                              "type": "Directive",
                              "value": "LinearConstraint"
                            },
                            {
                              "type": "text",
                              "value": " object"
                            }
                          ],
                          "type": "paragraph"
                        }
                      ],
                      "spread": false,
                      "type": "listItem"
                    },
                    {
                      "children": [
                        {
                          "children": [
                            {
                              "type": "text",
                              "value": "A single tuple that can be converted to a "
                            },
                            {
                              "domain": null,
                              "role": null,
                              "type": "Directive",
                              "value": "LinearConstraint"
                            },
                            {
                              "type": "text",
                              "value": " object    as "
                            },
                            {
                              "type": "inlineCode",
                              "value": "LinearConstraint(*constraints)"
                            }
                          ],
                          "type": "paragraph"
                        }
                      ],
                      "spread": false,
                      "type": "listItem"
                    },
                    {
                      "children": [
                        {
                          "children": [
                            {
                              "type": "text",
                              "value": "A sequence composed entirely of objects of type 1. and 2."
                            }
                          ],
                          "type": "paragraph"
                        }
                      ],
                      "spread": false,
                      "type": "listItem"
                    }
                  ],
                  "ordered": true,
                  "spread": false,
                  "start": 1,
                  "type": "list"
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Before the problem is solved, all values are converted to double precision, and the matrices of constraint coefficients are converted to instances of "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "module",
                      "reference": {
                        "kind": "api",
                        "module": "scipy.sparse._arrays",
                        "path": "scipy.sparse._arrays:csc_array",
                        "type": "RefInfo",
                        "version": "*"
                      },
                      "type": "Link",
                      "value": "scipy.sparse.csc_array"
                    },
                    {
                      "type": "text",
                      "value": ". The "
                    },
                    {
                      "type": "inlineCode",
                      "value": "keep_feasible"
                    },
                    {
                      "type": "text",
                      "value": " parameter of "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "LinearConstraint"
                    },
                    {
                      "type": "text",
                      "value": " objects is ignored."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "constraints",
              "type": "Param",
              "type_": "sequence of scipy.optimize.LinearConstraint, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "A dictionary of solver options. The following keys are recognized."
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "dd": [
                        {
                          "children": [
                            {
                              "type": "text",
                              "value": "disp"
                            }
                          ],
                          "type": "paragraph"
                        }
                      ],
                      "dt": {
                        "children": [
                          {
                            "type": "text",
                            "value": "disp"
                          }
                        ],
                        "type": "paragraph"
                      },
                      "type": "DefListItem"
                    },
                    {
                      "dd": [
                        {
                          "children": [
                            {
                              "type": "text",
                              "value": "node_limit"
                            }
                          ],
                          "type": "paragraph"
                        }
                      ],
                      "dt": {
                        "children": [
                          {
                            "type": "text",
                            "value": "node_limit"
                          }
                        ],
                        "type": "paragraph"
                      },
                      "type": "DefListItem"
                    },
                    {
                      "dd": [
                        {
                          "children": [
                            {
                              "type": "text",
                              "value": "presolve"
                            }
                          ],
                          "type": "paragraph"
                        }
                      ],
                      "dt": {
                        "children": [
                          {
                            "type": "text",
                            "value": "presolve"
                          }
                        ],
                        "type": "paragraph"
                      },
                      "type": "DefListItem"
                    },
                    {
                      "dd": [
                        {
                          "children": [
                            {
                              "type": "text",
                              "value": "time_limit"
                            }
                          ],
                          "type": "paragraph"
                        }
                      ],
                      "dt": {
                        "children": [
                          {
                            "type": "text",
                            "value": "time_limit"
                          }
                        ],
                        "type": "paragraph"
                      },
                      "type": "DefListItem"
                    },
                    {
                      "dd": [
                        {
                          "children": [
                            {
                              "type": "text",
                              "value": "mip_rel_gap"
                            }
                          ],
                          "type": "paragraph"
                        }
                      ],
                      "dt": {
                        "children": [
                          {
                            "type": "text",
                            "value": "mip_rel_gap"
                          }
                        ],
                        "type": "paragraph"
                      },
                      "type": "DefListItem"
                    }
                  ],
                  "type": "DefList"
                }
              ],
              "param": "options",
              "type": "Param",
              "type_": "dict, optional"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "An instance of "
                    },
                    {
                      "type": "inlineCode",
                      "value": "scipy.optimize.OptimizeResult"
                    },
                    {
                      "type": "text",
                      "value": ". The object is guaranteed to have the following attributes."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "res",
              "type": "Param",
              "type_": "OptimizeResult"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Mixed-integer linear programming"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [
      {
        "type": "text",
        "value": "Consider the problem at\nhttps://en.wikipedia.org/wiki/Integer_programming#Example, which is\nexpressed as a maximization problem of two variables. Since `milp` requires\nthat the problem be expressed as a minimization problem, the objective\nfunction coefficients on the decision variables are:"
      },
      {
        "type": "code",
        "value": "import numpy as np\nc = -np.array([0, 1])"
      },
      {
        "type": "text",
        "value": "Note the negative sign: we maximize the original objective function\nby minimizing the negative of the objective function."
      },
      {
        "type": "text",
        "value": "We collect the coefficients of the constraints into arrays like:"
      },
      {
        "type": "code",
        "value": "A = np.array([[-1, 1], [3, 2], [2, 3]])\nb_u = np.array([1, 12, 12])\nb_l = np.full_like(b_u, -np.inf)"
      },
      {
        "type": "text",
        "value": "Because there is no lower limit on these constraints, we have defined a\nvariable ``b_l`` full of values representing negative infinity. This may\nbe unfamiliar to users of `scipy.optimize.linprog`, which only accepts\n\"less than\" (or \"upper bound\") inequality constraints of the form\n``A_ub @ x <= b_u``. By accepting both ``b_l`` and ``b_u`` of constraints\n``b_l <= A_ub @ x <= b_u``, `milp` makes it easy to specify \"greater than\"\ninequality constraints, \"less than\" inequality constraints, and equality\nconstraints concisely."
      },
      {
        "type": "text",
        "value": "These arrays are collected into a single `LinearConstraint` object like:"
      },
      {
        "type": "code",
        "value": "from scipy.optimize import LinearConstraint\nconstraints = LinearConstraint(A, b_l, b_u)"
      },
      {
        "type": "text",
        "value": "The non-negativity bounds on the decision variables are enforced by\ndefault, so we do not need to provide an argument for `bounds`."
      },
      {
        "type": "text",
        "value": "Finally, the problem states that both decision variables must be integers:"
      },
      {
        "type": "code",
        "value": "integrality = np.ones_like(c)"
      },
      {
        "type": "text",
        "value": "We solve the problem like:"
      },
      {
        "type": "code",
        "value": "from scipy.optimize import milp\nres = milp(c=c, constraints=constraints, integrality=integrality)\nres.x"
      },
      {
        "type": "text",
        "value": "Note that had we solved the relaxed problem (without integrality\nconstraints):"
      },
      {
        "type": "code",
        "value": "res = milp(c=c, constraints=constraints)  # OR:\n# from scipy.optimize import linprog; res = linprog(c, A, b_u)\nres.x"
      },
      {
        "type": "text",
        "value": "we would not have obtained the correct solution by rounding to the nearest\nintegers."
      },
      {
        "type": "text",
        "value": "Other examples are given :ref:`in the tutorial <tutorial-optimize_milp>`."
      }
    ],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/scipy/optimize/_milp.py",
  "item_line": 147,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns",
    "Notes",
    "References",
    "Examples"
  ],
  "references": null,
  "see_also": [],
  "signature": {
    "type": "Signature",
    "value": "(c, *, integrality=None, bounds=None, constraints=None, options=None)"
  },
  "type": "DocBlob"
}