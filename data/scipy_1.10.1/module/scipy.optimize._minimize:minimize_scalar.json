{
  "aliases": [
    "scipy.optimize.minimize_scalar"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "This section describes the available solvers that can be selected by the 'method' parameter. The default method is the "
            },
            {
              "type": "inlineCode",
              "value": "\"Bounded\""
            },
            {
              "type": "text",
              "value": " Brent method if "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "bounds",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "bounds"
            },
            {
              "type": "text",
              "value": " are passed and unbounded "
            },
            {
              "type": "inlineCode",
              "value": "\"Brent\""
            },
            {
              "type": "text",
              "value": " otherwise."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Method "
            },
            {
              "type": "inlineCode",
              "value": "Brent <optimize.minimize_scalar-brent>"
            },
            {
              "type": "text",
              "value": " uses Brent's algorithm  to find a local minimum.  The algorithm uses inverse parabolic interpolation when possible to speed up convergence of the golden section method."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Method "
            },
            {
              "type": "inlineCode",
              "value": "Golden <optimize.minimize_scalar-golden>"
            },
            {
              "type": "text",
              "value": " uses the golden section search technique . It uses analog of the bisection method to decrease the bracketed interval. It is usually preferable to use the "
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "Brent"
                }
              ],
              "type": "emphasis"
            },
            {
              "type": "text",
              "value": " method."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Method "
            },
            {
              "type": "inlineCode",
              "value": "Bounded <optimize.minimize_scalar-bounded>"
            },
            {
              "type": "text",
              "value": " can perform bounded minimization  . It uses the Brent method to find a local minimum in the interval x1 < xopt < x2."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "children": [
                {
                  "type": "text",
                  "value": "Custom minimizers"
                }
              ],
              "type": "strong"
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "It may be useful to pass a custom minimization method, for example when using some library frontend to minimize_scalar. You can simply pass a callable as the "
            },
            {
              "type": "inlineCode",
              "value": "method"
            },
            {
              "type": "text",
              "value": " parameter."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "The callable is called as "
            },
            {
              "type": "inlineCode",
              "value": "method(fun, args, **kwargs, **options)"
            },
            {
              "type": "text",
              "value": " where "
            },
            {
              "type": "inlineCode",
              "value": "kwargs"
            },
            {
              "type": "text",
              "value": " corresponds to any other parameters passed to "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "module",
              "reference": {
                "kind": "module",
                "module": "scipy",
                "path": "scipy.optimize._shgo:SHGO.minimize",
                "type": "RefInfo",
                "version": "1.10.1"
              },
              "type": "Link",
              "value": "minimize"
            },
            {
              "type": "text",
              "value": " (such as "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "bracket",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "bracket"
            },
            {
              "type": "text",
              "value": ", "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "tol",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "tol"
            },
            {
              "type": "text",
              "value": ", etc.), except the "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "options",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "options"
            },
            {
              "type": "text",
              "value": " dict, which has its contents also passed as "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "method",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "method"
            },
            {
              "type": "text",
              "value": " parameters pair by pair.  The method shall return an "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "OptimizeResult"
            },
            {
              "type": "text",
              "value": " object."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "The provided "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "method",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "method"
            },
            {
              "type": "text",
              "value": " callable must be able to accept (and possibly ignore) arbitrary parameters; the set of parameters accepted by "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "module",
              "reference": {
                "kind": "module",
                "module": "scipy",
                "path": "scipy.optimize._shgo:SHGO.minimize",
                "type": "RefInfo",
                "version": "1.10.1"
              },
              "type": "Link",
              "value": "minimize"
            },
            {
              "type": "text",
              "value": " may expand in future versions and then these parameters will be passed to the method. You can find an example in the scipy.optimize tutorial."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "children": [
                {
                  "type": "text",
                  "value": "versionadded 0.11.0"
                }
              ],
              "type": "admonitionTitle"
            }
          ],
          "kind": "note",
          "type": "admonition"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Objective function. Scalar function, must return a scalar."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "fun",
              "type": "Param",
              "type_": "callable"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "For methods 'brent' and 'golden', "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "bracket",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "bracket"
                    },
                    {
                      "type": "text",
                      "value": " defines the bracketing interval and can either have three items "
                    },
                    {
                      "type": "inlineCode",
                      "value": "(a, b, c)"
                    },
                    {
                      "type": "text",
                      "value": " so that "
                    },
                    {
                      "type": "inlineCode",
                      "value": "a < b < c"
                    },
                    {
                      "type": "text",
                      "value": " and "
                    },
                    {
                      "type": "inlineCode",
                      "value": "fun(b) < fun(a), fun(c)"
                    },
                    {
                      "type": "text",
                      "value": " or two items "
                    },
                    {
                      "type": "inlineCode",
                      "value": "a"
                    },
                    {
                      "type": "text",
                      "value": " and "
                    },
                    {
                      "type": "inlineCode",
                      "value": "c"
                    },
                    {
                      "type": "text",
                      "value": " which are assumed to be a starting interval for a downhill bracket search (see "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "bracket",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "bracket"
                    },
                    {
                      "type": "text",
                      "value": "); it doesn't always mean that the obtained solution will satisfy "
                    },
                    {
                      "type": "inlineCode",
                      "value": "a <= x <= c"
                    },
                    {
                      "type": "text",
                      "value": "."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "bracket",
              "type": "Param",
              "type_": "sequence, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "For method 'bounded', "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "bounds",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "bounds"
                    },
                    {
                      "type": "text",
                      "value": " is mandatory and must have two finite items corresponding to the optimization bounds."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "bounds",
              "type": "Param",
              "type_": "sequence, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Extra arguments passed to the objective function."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "args",
              "type": "Param",
              "type_": "tuple, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Type of solver.  Should be one of:"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "children": [
                        {
                          "children": [
                            {
                              "children": [
                                {
                                  "type": "inlineCode",
                                  "value": "Brent <optimize.minimize_scalar-brent>"
                                }
                              ],
                              "type": "paragraph"
                            }
                          ],
                          "spread": false,
                          "type": "listItem"
                        },
                        {
                          "children": [
                            {
                              "children": [
                                {
                                  "type": "inlineCode",
                                  "value": "Bounded <optimize.minimize_scalar-bounded>"
                                }
                              ],
                              "type": "paragraph"
                            }
                          ],
                          "spread": false,
                          "type": "listItem"
                        },
                        {
                          "children": [
                            {
                              "children": [
                                {
                                  "type": "inlineCode",
                                  "value": "Golden <optimize.minimize_scalar-golden>"
                                }
                              ],
                              "type": "paragraph"
                            }
                          ],
                          "spread": false,
                          "type": "listItem"
                        },
                        {
                          "children": [
                            {
                              "children": [
                                {
                                  "type": "text",
                                  "value": "custom - a callable object (added in version 0.14.0), see below"
                                }
                              ],
                              "type": "paragraph"
                            }
                          ],
                          "spread": false,
                          "type": "listItem"
                        }
                      ],
                      "ordered": false,
                      "spread": false,
                      "start": 1,
                      "type": "list"
                    }
                  ],
                  "type": "blockquote"
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Default is \"Bounded\" if bounds are provided and \"Brent\" otherwise. See the 'Notes' section for details of each solver."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "method",
              "type": "Param",
              "type_": "str or callable, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Tolerance for termination. For detailed control, use solver-specific options."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "tol",
              "type": "Param",
              "type_": "float, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "A dictionary of solver options."
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "children": [
                        {
                          "dd": [
                            {
                              "children": [
                                {
                                  "type": "text",
                                  "value": "maxiter"
                                }
                              ],
                              "type": "paragraph"
                            }
                          ],
                          "dt": {
                            "children": [
                              {
                                "type": "text",
                                "value": "maxiter"
                              }
                            ],
                            "type": "paragraph"
                          },
                          "type": "DefListItem"
                        },
                        {
                          "dd": [
                            {
                              "children": [
                                {
                                  "type": "text",
                                  "value": "disp"
                                }
                              ],
                              "type": "paragraph"
                            }
                          ],
                          "dt": {
                            "children": [
                              {
                                "type": "text",
                                "value": "disp"
                              }
                            ],
                            "type": "paragraph"
                          },
                          "type": "DefListItem"
                        }
                      ],
                      "type": "DefList"
                    }
                  ],
                  "type": "blockquote"
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "See "
                    },
                    {
                      "type": "inlineCode",
                      "value": "show_options()"
                    },
                    {
                      "type": "text",
                      "value": " for solver-specific options."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "options",
              "type": "Param",
              "type_": "dict, optional"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The optimization result represented as a "
                    },
                    {
                      "type": "inlineCode",
                      "value": "OptimizeResult"
                    },
                    {
                      "type": "text",
                      "value": " object. Important attributes are: "
                    },
                    {
                      "type": "inlineCode",
                      "value": "x"
                    },
                    {
                      "type": "text",
                      "value": " the solution array, "
                    },
                    {
                      "type": "inlineCode",
                      "value": "success"
                    },
                    {
                      "type": "text",
                      "value": " a Boolean flag indicating if the optimizer exited successfully and "
                    },
                    {
                      "type": "inlineCode",
                      "value": "message"
                    },
                    {
                      "type": "text",
                      "value": " which describes the cause of the termination. See "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "OptimizeResult"
                    },
                    {
                      "type": "text",
                      "value": " for a description of other attributes."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "res",
              "type": "Param",
              "type_": "OptimizeResult"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Minimization of scalar function of one variable."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [
      {
        "type": "text",
        "value": "Consider the problem of minimizing the following function."
      },
      {
        "type": "code",
        "value": "def f(x):\n    return (x - 2) * x * (x + 2)**2"
      },
      {
        "type": "text",
        "value": "Using the *Brent* method, we find the local minimum as:"
      },
      {
        "type": "code",
        "value": "from scipy.optimize import minimize_scalar\nres = minimize_scalar(f)\nres.fun"
      },
      {
        "type": "text",
        "value": "The minimizer is:"
      },
      {
        "type": "code",
        "value": "res.x"
      },
      {
        "type": "text",
        "value": "Using the *Bounded* method, we find a local minimum with specified\nbounds as:"
      },
      {
        "type": "code",
        "value": "res = minimize_scalar(f, bounds=(-3, -1), method='bounded')\nres.fun  # minimum"
      },
      {
        "type": "code",
        "value": "res.x  # minimizer"
      }
    ],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/scipy/optimize/_minimize.py",
  "item_line": 735,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Parameters",
    "Returns",
    "See Also",
    "Notes",
    "References",
    "Examples"
  ],
  "references": null,
  "see_also": [
    {
      "descriptions": [
        {
          "children": [
            {
              "type": "text",
              "value": "Interface to minimization algorithms for scalar multivariate functions"
            }
          ],
          "type": "paragraph"
        }
      ],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "module",
          "module": "scipy",
          "path": "scipy.optimize._shgo:SHGO.minimize",
          "type": "RefInfo",
          "version": "1.10.1"
        },
        "type": "Link",
        "value": "minimize"
      },
      "type": null
    },
    {
      "descriptions": [
        {
          "children": [
            {
              "type": "text",
              "value": "Additional options accepted by the solvers"
            }
          ],
          "type": "paragraph"
        }
      ],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "module",
          "module": "scipy",
          "path": "scipy.optimize._optimize:show_options",
          "type": "RefInfo",
          "version": "1.10.1"
        },
        "type": "Link",
        "value": "show_options"
      },
      "type": null
    }
  ],
  "signature": {
    "type": "Signature",
    "value": "(fun, bracket=None, bounds=None, args=(), method=None, tol=None, options=None)"
  },
  "type": "DocBlob"
}