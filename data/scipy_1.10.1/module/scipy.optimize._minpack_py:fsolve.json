{
  "aliases": [
    "scipy.optimize.fsolve"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Return the roots of the (non-linear) equations defined by "
            },
            {
              "type": "inlineCode",
              "value": "func(x) = 0"
            },
            {
              "type": "text",
              "value": " given a starting estimate."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [
        {
          "children": [
            {
              "type": "inlineCode",
              "value": "fsolve"
            },
            {
              "type": "text",
              "value": " is a wrapper around MINPACK's hybrd and hybrj algorithms."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "A function that takes at least one (possibly vector) argument, and returns a value of the same length."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "func",
              "type": "Param",
              "type_": "callable ``f(x, *args)``"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The starting estimate for the roots of "
                    },
                    {
                      "type": "inlineCode",
                      "value": "func(x) = 0"
                    },
                    {
                      "type": "text",
                      "value": "."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "x0",
              "type": "Param",
              "type_": "ndarray"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Any extra arguments to "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "func",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "func"
                    },
                    {
                      "type": "text",
                      "value": "."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "args",
              "type": "Param",
              "type_": "tuple, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "A function to compute the Jacobian of "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "func",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "func"
                    },
                    {
                      "type": "text",
                      "value": " with derivatives across the rows. By default, the Jacobian will be estimated."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "fprime",
              "type": "Param",
              "type_": "callable ``f(x, *args)``, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "If True, return optional outputs."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "full_output",
              "type": "Param",
              "type_": "bool, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Specify whether the Jacobian function computes derivatives down the columns (faster, because there is no transpose operation)."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "col_deriv",
              "type": "Param",
              "type_": "bool, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The calculation will terminate if the relative error between two consecutive iterates is at most "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "xtol",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "xtol"
                    },
                    {
                      "type": "text",
                      "value": "."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "xtol",
              "type": "Param",
              "type_": "float, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The maximum number of calls to the function. If zero, then "
                    },
                    {
                      "type": "inlineCode",
                      "value": "100*(N+1)"
                    },
                    {
                      "type": "text",
                      "value": " is the maximum where N is the number of elements in "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "x0",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "x0"
                    },
                    {
                      "type": "text",
                      "value": "."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "maxfev",
              "type": "Param",
              "type_": "int, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "If set to a two-sequence containing the number of sub- and super-diagonals within the band of the Jacobi matrix, the Jacobi matrix is considered banded (only for "
                    },
                    {
                      "type": "inlineCode",
                      "value": "fprime=None"
                    },
                    {
                      "type": "text",
                      "value": ")."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "band",
              "type": "Param",
              "type_": "tuple, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "A suitable step length for the forward-difference approximation of the Jacobian (for "
                    },
                    {
                      "type": "inlineCode",
                      "value": "fprime=None"
                    },
                    {
                      "type": "text",
                      "value": "). If "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "epsfcn",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "epsfcn"
                    },
                    {
                      "type": "text",
                      "value": " is less than the machine precision, it is assumed that the relative errors in the functions are of the order of the machine precision."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "epsfcn",
              "type": "Param",
              "type_": "float, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "A parameter determining the initial step bound ("
                    },
                    {
                      "type": "inlineCode",
                      "value": "factor * || diag * x||"
                    },
                    {
                      "type": "text",
                      "value": "). Should be in the interval "
                    },
                    {
                      "type": "inlineCode",
                      "value": "(0.1, 100)"
                    },
                    {
                      "type": "text",
                      "value": "."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "factor",
              "type": "Param",
              "type_": "float, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "N positive entries that serve as a scale factors for the variables."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "diag",
              "type": "Param",
              "type_": "sequence, optional"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The solution (or the result of the last iteration for an unsuccessful call)."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "x",
              "type": "Param",
              "type_": "ndarray"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "A dictionary of optional outputs with the keys:"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "dd": [
                        {
                          "children": [
                            {
                              "type": "text",
                              "value": "number of function calls"
                            }
                          ],
                          "type": "paragraph"
                        }
                      ],
                      "dt": {
                        "children": [
                          {
                            "type": "inlineCode",
                            "value": "nfev"
                          }
                        ],
                        "type": "paragraph"
                      },
                      "type": "DefListItem"
                    },
                    {
                      "dd": [
                        {
                          "children": [
                            {
                              "type": "text",
                              "value": "number of Jacobian calls"
                            }
                          ],
                          "type": "paragraph"
                        }
                      ],
                      "dt": {
                        "children": [
                          {
                            "type": "inlineCode",
                            "value": "njev"
                          }
                        ],
                        "type": "paragraph"
                      },
                      "type": "DefListItem"
                    },
                    {
                      "dd": [
                        {
                          "children": [
                            {
                              "type": "text",
                              "value": "function evaluated at the output"
                            }
                          ],
                          "type": "paragraph"
                        }
                      ],
                      "dt": {
                        "children": [
                          {
                            "type": "inlineCode",
                            "value": "fvec"
                          }
                        ],
                        "type": "paragraph"
                      },
                      "type": "DefListItem"
                    },
                    {
                      "dd": [
                        {
                          "children": [
                            {
                              "type": "text",
                              "value": "the orthogonal matrix, q, produced by the QR     factorization of the final approximate Jacobian     matrix, stored column wise"
                            }
                          ],
                          "type": "paragraph"
                        }
                      ],
                      "dt": {
                        "children": [
                          {
                            "type": "inlineCode",
                            "value": "fjac"
                          }
                        ],
                        "type": "paragraph"
                      },
                      "type": "DefListItem"
                    },
                    {
                      "dd": [
                        {
                          "children": [
                            {
                              "type": "text",
                              "value": "upper triangular matrix produced by QR factorization     of the same matrix"
                            }
                          ],
                          "type": "paragraph"
                        }
                      ],
                      "dt": {
                        "children": [
                          {
                            "type": "inlineCode",
                            "value": "r"
                          }
                        ],
                        "type": "paragraph"
                      },
                      "type": "DefListItem"
                    },
                    {
                      "dd": [
                        {
                          "children": [
                            {
                              "type": "text",
                              "value": "the vector "
                            },
                            {
                              "type": "inlineCode",
                              "value": "(transpose(q) * fvec)"
                            }
                          ],
                          "type": "paragraph"
                        }
                      ],
                      "dt": {
                        "children": [
                          {
                            "type": "inlineCode",
                            "value": "qtf"
                          }
                        ],
                        "type": "paragraph"
                      },
                      "type": "DefListItem"
                    }
                  ],
                  "type": "DefList"
                }
              ],
              "param": "infodict",
              "type": "Param",
              "type_": "dict"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "An integer flag.  Set to 1 if a solution was found, otherwise refer to "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "mesg",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "mesg"
                    },
                    {
                      "type": "text",
                      "value": " for more information."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "ier",
              "type": "Param",
              "type_": "int"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "If no solution is found, "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "mesg",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "mesg"
                    },
                    {
                      "type": "text",
                      "value": " details the cause of failure."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "mesg",
              "type": "Param",
              "type_": "str"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Find the roots of a function."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [
      {
        "type": "text",
        "value": "Find a solution to the system of equations:\n``x0*cos(x1) = 4,  x1*x0 - x1 = 5``."
      },
      {
        "type": "code",
        "value": "import numpy as np\nfrom scipy.optimize import fsolve\ndef func(x):\n    return [x[0] * np.cos(x[1]) - 4,\n            x[1] * x[0] - x[1] - 5]\nroot = fsolve(func, [1, 1])\nroot"
      },
      {
        "type": "code",
        "value": "np.isclose(func(root), [0.0, 0.0])  # func(root) should be almost 0.0."
      }
    ],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/scipy/optimize/_minpack_py.py",
  "item_line": 48,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns",
    "See Also",
    "Notes",
    "Examples"
  ],
  "references": null,
  "see_also": [
    {
      "descriptions": [
        {
          "children": [
            {
              "type": "text",
              "value": "Interface to root finding algorithms for multivariate functions. See the "
            },
            {
              "type": "inlineCode",
              "value": "method='hybr'"
            },
            {
              "type": "text",
              "value": " in particular."
            }
          ],
          "type": "paragraph"
        }
      ],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "to-resolve",
          "module": "current-module",
          "path": "root",
          "type": "RefInfo",
          "version": "current-version"
        },
        "type": "Link",
        "value": "root"
      },
      "type": null
    }
  ],
  "signature": {
    "type": "Signature",
    "value": "(func, x0, args=(), fprime=None, full_output=0, col_deriv=0, xtol=1.49012e-08, maxfev=0, band=None, epsfcn=None, factor=100, diag=None)"
  },
  "type": "DocBlob"
}