{
  "aliases": [
    "scipy.optimize.broyden1"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "This method is also known as \\\"Broyden's good method\\\"."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "This algorithm implements the inverse Jacobian Quasi-Newton update"
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "math",
          "value": "H_+ = H + (dx - H df) dx^\\dagger H / ( dx^\\dagger H df)"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "which corresponds to Broyden's first Jacobian update"
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "math",
          "value": "J_+ = J + (df - J dx) dx^\\dagger / dx^\\dagger dx"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Function whose root to find; should take and return an array-like object."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "F",
              "type": "Param",
              "type_": "function(x) -> f"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Initial guess for the solution"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "xin",
              "type": "Param",
              "type_": "array_like"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Initial guess for the Jacobian is "
                    },
                    {
                      "type": "inlineCode",
                      "value": "(-1/alpha)"
                    },
                    {
                      "type": "text",
                      "value": "."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "alpha",
              "type": "Param",
              "type_": "float, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Method used in ensuring that the rank of the Broyden matrix stays low. Can either be a string giving the name of the method, or a tuple of the form "
                    },
                    {
                      "type": "inlineCode",
                      "value": "(method, param1, param2, ...)"
                    },
                    {
                      "type": "text",
                      "value": " that gives the name of the method and values for additional parameters."
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Methods available:"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "children": [
                        {
                          "children": [
                            {
                              "children": [
                                {
                                  "type": "inlineCode",
                                  "value": "restart"
                                },
                                {
                                  "type": "text",
                                  "value": ": drop all matrix columns. Has no extra parameters."
                                }
                              ],
                              "type": "paragraph"
                            }
                          ],
                          "spread": false,
                          "type": "listItem"
                        },
                        {
                          "children": [
                            {
                              "children": [
                                {
                                  "type": "inlineCode",
                                  "value": "simple"
                                },
                                {
                                  "type": "text",
                                  "value": ": drop oldest matrix column. Has no extra parameters."
                                }
                              ],
                              "type": "paragraph"
                            }
                          ],
                          "spread": false,
                          "type": "listItem"
                        },
                        {
                          "children": [
                            {
                              "children": [
                                {
                                  "type": "inlineCode",
                                  "value": "svd"
                                },
                                {
                                  "type": "text",
                                  "value": ": keep only the most significant SVD components.       Takes an extra parameter, "
                                },
                                {
                                  "type": "inlineCode",
                                  "value": "to_retain"
                                },
                                {
                                  "type": "text",
                                  "value": ", which determines the       number of SVD components to retain when rank reduction is done.       Default is "
                                },
                                {
                                  "type": "inlineCode",
                                  "value": "max_rank - 2"
                                },
                                {
                                  "type": "text",
                                  "value": "."
                                }
                              ],
                              "type": "paragraph"
                            }
                          ],
                          "spread": false,
                          "type": "listItem"
                        }
                      ],
                      "ordered": false,
                      "spread": false,
                      "start": 1,
                      "type": "list"
                    }
                  ],
                  "type": "blockquote"
                }
              ],
              "param": "reduction_method",
              "type": "Param",
              "type_": "str or tuple, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Maximum rank for the Broyden matrix. Default is infinity (i.e., no rank reduction)."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "max_rank",
              "type": "Param",
              "type_": "int, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Number of iterations to make. If omitted (default), make as many as required to meet tolerances."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "iter",
              "type": "Param",
              "type_": "int, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Print status to stdout on every iteration."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "verbose",
              "type": "Param",
              "type_": "bool, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Maximum number of iterations to make. If more are needed to meet convergence, "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "NoConvergence"
                    },
                    {
                      "type": "text",
                      "value": " is raised."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "maxiter",
              "type": "Param",
              "type_": "int, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Absolute tolerance (in max-norm) for the residual. If omitted, default is 6e-6."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "f_tol",
              "type": "Param",
              "type_": "float, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Relative tolerance for the residual. If omitted, not used."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "f_rtol",
              "type": "Param",
              "type_": "float, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Absolute minimum step size, as determined from the Jacobian approximation. If the step size is smaller than this, optimization is terminated as successful. If omitted, not used."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "x_tol",
              "type": "Param",
              "type_": "float, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Relative minimum step size. If omitted, not used."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "x_rtol",
              "type": "Param",
              "type_": "float, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Norm to use in convergence check. Default is the maximum norm."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "tol_norm",
              "type": "Param",
              "type_": "function(vector) -> scalar, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Which type of a line search to use to determine the step size in the direction given by the Jacobian approximation. Defaults to 'armijo'."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "line_search",
              "type": "Param",
              "type_": "{None, 'armijo' (default), 'wolfe'}, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Optional callback function. It is called on every iteration as "
                    },
                    {
                      "type": "inlineCode",
                      "value": "callback(x, f)"
                    },
                    {
                      "type": "text",
                      "value": " where "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "x"
                    },
                    {
                      "type": "text",
                      "value": " is the current solution and "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "module",
                      "reference": {
                        "kind": "module",
                        "module": "scipy",
                        "path": "scipy.optimize._bglu_dense:_consider_refactor.<locals>.f",
                        "type": "RefInfo",
                        "version": "1.10.1"
                      },
                      "type": "Link",
                      "value": "f"
                    },
                    {
                      "type": "text",
                      "value": " the corresponding residual."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "callback",
              "type": "Param",
              "type_": "function, optional"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "When a solution was not found."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "",
              "type": "Param",
              "type_": "NoConvergence"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "An array (of similar array type as "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "x0"
                    },
                    {
                      "type": "text",
                      "value": ") containing the final solution."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "sol",
              "type": "Param",
              "type_": "ndarray"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Find a root of a function, using Broyden's first Jacobian approximation."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [
      {
        "type": "text",
        "value": "The following functions define a system of nonlinear equations"
      },
      {
        "type": "code",
        "value": "def fun(x):\n    return [x[0]  + 0.5 * (x[0] - x[1])**3 - 1.0,\n            0.5 * (x[1] - x[0])**3 + x[1]]"
      },
      {
        "type": "text",
        "value": "A solution can be obtained as follows."
      },
      {
        "type": "code",
        "value": "from scipy import optimize\nsol = optimize.broyden1(fun, [0, 0])\nsol"
      }
    ],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/private/var/folders/7x/x6hsdv257b3_ml15w4czp2rc0000gn/T/tmpp7_nl_5p/<string>",
  "item_line": null,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns",
    "Raises",
    "See Also",
    "Notes",
    "References",
    "Examples"
  ],
  "references": null,
  "see_also": [
    {
      "descriptions": [
        {
          "children": [
            {
              "type": "text",
              "value": "Interface to root finding algorithms for multivariate functions. See "
            },
            {
              "type": "inlineCode",
              "value": "method='broyden1'"
            },
            {
              "type": "text",
              "value": " in particular."
            }
          ],
          "type": "paragraph"
        }
      ],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "to-resolve",
          "module": "current-module",
          "path": "root",
          "type": "RefInfo",
          "version": "current-version"
        },
        "type": "Link",
        "value": "root"
      },
      "type": null
    }
  ],
  "signature": {
    "type": "Signature",
    "value": "(F, xin, iter=None, alpha=None, reduction_method='restart', max_rank=None, verbose=False, maxiter=None, f_tol=None, f_rtol=None, x_tol=None, x_rtol=None, tol_norm=None, line_search='armijo', callback=None, **kw)"
  },
  "type": "DocBlob"
}